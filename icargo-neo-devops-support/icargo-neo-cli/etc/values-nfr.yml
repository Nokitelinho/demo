namespace: "nfr"
tenants: ["AV"]
envName: "nfr"
# This would be applied to all the java m/s and node m/s
applicationProfile: "nfr"
environmentProfile: "PROD" # STAG, DEV, PROD
dockerRegistry: "141807520248.dkr.ecr.ap-south-1.amazonaws.com"
cloudConfigServerUrl: "http://neo-config-server/config-service"
configServerArtifactId: "neo-config-server"
enableGroupedDeployment: false

# Some Defaults
default:
  containerPort: 8080
  processType: "JAVA"
  javaMemoryProfile: "JavaDefaultMemArgs"
  cpuProfile: "Default"
  healthEndpoint: "/health"

# Smart Loadbalacer to proxy requests based on application versions for blue-green deployment
smartLoadbalancer:
  enabled: true
  image: "icargo-neo-slb:v1.1.7"
  port: 2080

# Crashdump support
crashDumps:
  enabled: true
  mountPath: "/icargo-crash-dumps" # Mount path of the volume inside the pod
  hostPath: "/icargo-crash-dumps"  # The directory in the node which is mounted ( will be created if not present )

# The options can be overriden at a service level as well.
environment:
  PROD:
    upgradeStrategy: "RollingUpdate"
    numberOfReplicas: 1
    autoScalingEnabled: false
    replicaEnabled: true
    JavaSmallMemArgs: "-Xverify:none -Xms128M -Xmx128M -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=60 -XX:+ExitOnOutOfMemoryError"
    JavaDefaultMemArgs: "-Xverify:none -Xms256M -Xmx256M -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=60 -XX:+ExitOnOutOfMemoryError"
    JavaHugeMemArgs: "-Xverify:none -Xms512M -Xmx512M -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=60 -XX:+ExitOnOutOfMemoryError"

# Separate ingress for web and webservice
ingress:
  AV:
    devIngress: true # Should a separate ingress be created for private API and bff endpoints for dev testing
    ingressClassName: "nginx-nfr"
    host: "k8s-nginxnfr-nginxica-9f0fe5df94-d60c5e79471aee93.elb.ap-south-1.amazonaws.com"

# custom deployments properties
deployments:
  neo-config-server:
    javaMemoryProfile: 'JavaSmallMemArgs'
    serviceName: 'neo-config-server'
  neo-booking-business:
    javaMemoryProfile: 'JavaHugeMemArgs'
  ebl-nbridge-base-rt:
    javaMemoryProfile: 'JavaHugeMemArgs'

# Object creation flags, used during incremental deployments with single entry boms
disable:
  ns: true
  ingress: false
  ingressMaster: false
  prometheus: false
  serviceaccounts: true

# Enable prometheus
prometheus:
  enabled: true
  alertRules:
    jdbcPool: true
    kafkaConsumer: true
    jvmHeap: true
    jvmThreads: true
    k8sWorkerNode: true
    pod: true
  alertManagerConfigOverrides:
    snowReceiver:
      enabled: false
      url: "http://neo-snow-adapter.icargo-system/snow-adapter/api/alertmanager/receive"

initDependencies:
  enabled: true
  image: "icargo-neo-init-controller:1.0.5"
  dependencies:
    #Deployment Name: Dependant Deployment Name
    neo-admin-business: "ebl-nbridge-base-rt,nbridge-base-security-rt"
    auth-service-business: "neo-admin-business"
    neo-msgbroker-eai-base-rt: "neo-admin-business"
    neo-msgbroker-rt: "neo-admin-business"
    neo-booking-business: "neo-admin-business, neo-businessrules-business"
    icargo-neo-customs-business: "neo-admin-business"
    neo-awb-business: "neo-admin-business"
    neo-pricing-business: "neo-admin-business"

#-------------- Values which are required for icargo-helm-monitoring charts -------------------#
elasticSearchUrl:
  - ip: "10.246.12.62"
    httpPort: 9020
    transportPort: 9030
crashCollector:
  remoteS3Directory: "/icargo-crash-dumps_nfr"
