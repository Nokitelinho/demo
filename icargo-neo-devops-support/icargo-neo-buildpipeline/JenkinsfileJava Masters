def Stage_Name
def ARTIFACTORY_HOST
def ARTIFACTORY_REPO
def APP
def ENV
def bitbucketURL ="http://bitbucket.ibsplc.com/rest/build-status/1.0/commits/"
def commitId
def response
def results
def data
def bitbucketresponse
def branchName
def loadValuesYaml(){
  def valuesYaml = readYaml file: 'app.yml'
  return valuesYaml;
}

def cancelPreviousBuilds() {
    def jobName = env.JOB_NAME
    branchName =env.GIT_BRANCH
    def buildNumber = env.BUILD_NUMBER.toInteger()
    /* Get job name */
    def currentJob = Jenkins.instance.getItemByFullName(jobName)

    /* Iterating over the builds for specific job */
    for (def build : currentJob.builds) {
        def exec = build.getExecutor()
        /* If there is a build that is currently running and it's not current build */
        if (build.isBuilding() && build.number.toInteger() != buildNumber && exec != null) {
            /* Then stop it */
            exec.interrupt(
                    Result.ABORTED,
                    new CauseOfInterruption.UserInterruption("Aborted by #${currentBuild.number}")
                )
            println("Aborted previously running build #${build.number}")            
        }
    }
}


def uploadUnitTestReport(){

					sh'''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                    mvn surefire-report:report-only -Daggregate=true'''
           
            script{
				Stage_Name = 'Publish Report Phase'
					
					publishHTML([allowMissing: true,
					 alwaysLinkToLastBuild: true,
					 keepAll: true,
					 reportDir: 'target/site',
					 reportFiles: 'surefire-report.html',
					 reportName: 'Unit Test Report '
					 ])
				}
			

}

def uploadIntegrationTestReport(){

			 sh'''
				set +x
				OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
				mvn  surefire-report:failsafe-report-only -Daggregate=true'''
		script{
			Stage_Name = 'Publish Report Phase -Integration Test'
			
				publishHTML([allowMissing: true,
				 alwaysLinkToLastBuild: true,
				 keepAll: true,
				 reportDir: 'target/site/',
				 reportFiles: 'failsafe-report.html',
				 reportName: 'IT Test Report '
				 ])
			}

}

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '3', artifactNumToKeepStr: '1'))
       
    }
    stages {
		stage('Initial Setup') {
			steps {
                script {
                	cancelPreviousBuilds()
					Stage_Name = 'Initial Setup'
					valuesYaml = loadValuesYaml()
					echo " valuesYaml   : ${valuesYaml}"
                    env.branchName=env.GIT_BRANCH
					appServers = valuesYaml.APP.each{ k,v->}
					for(app in appServers) { 
							env.repo=app.repo
							env.token=app.token
							env.project_name=app.project_name
							env.sonar_host_url=app.sonar_host_url
							env.sonar_projectkey_dev=app.sonar_projectkey_dev
							env.sonar_projectkey_master=app.sonar_projectkey_master
							env.sonar_password=app.sonar_password
							env.sonar_user=app.sonar_user
							env.sonar_project_name_dev=app.sonar_project_name_dev
							env.sonar_project_name_master=app.sonar_project_name_master
                      		env.stop_script=app.stop_script
                      		env.copy_script=app.copy_script
                      		env.start_script=app.start_script
                      		env.sonar_project_name_integrationtest=app.sonar_project_name_integrationtest
                      		env.sonar_projectkey_integrationtest=app.sonar_projectkey_integrationtest
                      		env.deploy_stage=app.deploy_stage
                      		env.integration_test_stage=app.integration_test_stage
							env.sonar_project_name_integrationtest_dev=app.sonar_project_name_integrationtest_dev
                      		env.sonar_projectkey_integrationtest_dev=app.sonar_projectkey_integrationtest_dev
                            env.service_name =app.service_name
                      		env.release_url=app.release_url
                            env.deployment_name=app.deployment_name
						}
                }

            }
        }
			
        stage('Build') {
			when {
                        branch 'master'
            }
			
            steps {
                script {
					Stage_Name = 'Build Stage'
					
					echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
                }

                checkout([$class           : 'GitSCM',
                          branches         : [[name: env.BRANCH_NAME]],
                          userRemoteConfigs: [[
                                                      credentialsId: env.token,
                                                      url          : env.repo]]])

                 dir(path: '.') {
                    sh '''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                    mvn clean deploy -U -Dhttps.proxyHost=10.246.8.59 -Dhttps.proxyPort=3128 -Dproj.name=$project_name -Dspring.datasource.url=jdbc:postgresql://10.246.13.30:5432/ico_neo_av_alpha_masters?currentSchema=ico_av_usr_bkp -Dspring.datasource.password=ico_av_usr -Dspring.datasource.username=ico_av_usr'''
                }
				script {
                    Stage_Name = 'Build Stage'
					 echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
					 def notifyBitbucket = {
					  echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
					  return "ees"
					 }
					 echo "   notifyBitbucket  ${notifyBitbucket}"
                }
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
				
            }
			post{
				always{
						uploadUnitTestReport()
					}
			}
        }
		
		stage('Build Branch') {
			when {
				not{
					 branch 'master'
				}      
            }
            steps {
                script {
					Stage_Name = 'Build Stage'
					
					echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
                }

                checkout([$class           : 'GitSCM',
                          branches         : [[name: env.BRANCH_NAME]],
                          userRemoteConfigs: [[
                                                      credentialsId: env.token,
                                                      url          : env.repo]]])

                 dir(path: '.') {
                    sh '''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                      mvn clean install -Dproj.name=$project_name -Dmaven.install.skip=true -Dspring.datasource.url=jdbc:postgresql://10.246.13.30:5432/ico_neo_av_alpha_masters?currentSchema=ico_av_usr_bkp -Dspring.datasource.password=ico_av_usr -Dspring.datasource.username=ico_av_usr'''
                }
				archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
			post{
				always{
						uploadUnitTestReport()
					}
			}
        }
        
        stage('SonarQube Analysis') {
            when {
                        branch 'master'
            }
            steps {
                script {
                    Stage_Name = 'SonarQube Analysis Stage'
                }
				withSonarQubeEnv('Sonar Qube -EE') {
                    sh '''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                      mvn sonar:sonar -Dproj.name=$sonar_project_name_master -Dsonar.projectKey=$sonar_projectkey_master -Dsonar.host.url=$sonar_host_url -Dsonar.java.source=11 -Dsonar.branch.name=$branchName -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-ut/jacoco.xml,target/site/jacoco-ut/jacoco.xml
					  '''
                }
            }
		}
		stage('SonarQube Analysis Dev') {
			when {
				not{
					 branch 'master'
				}      
            }
            steps {
                script {
                    Stage_Name = 'SonarQube Analysis Stage Dev Stage'
                }
				withSonarQubeEnv('Sonar Qube -EE') {
                    sh '''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                      mvn sonar:sonar -Dproj.name=$sonar_project_name_master -Dsonar.projectKey=$sonar_projectkey_master -Dsonar.host.url=$sonar_host_url -Dsonar.java.source=11 -Dsonar.branch.name=$branchName -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-ut/jacoco.xml,target/site/jacoco-ut/jacoco.xml'''
                }
                
            }
        }
        stage('Quality Gate Status Check') {
            when {
                        branch 'master'
            }
            steps {
                script {
                    Stage_Name = 'Quality Gate Status Check Stage'
                }
                sleep(40)
				script {
                def qg = waitForQualityGate()
				  if (qg.status != 'OK') {
					  error "Pipeline aborted due to quality gate failure: ${qg.status}"
				  }else{
					 print "Success" 
				  }
				 }
				
            }
        }
		
		stage('Quality Gate Status Check Dev') {
            when {
				not{
					 branch 'master'
				}      
            }
            steps {
                script {
                    Stage_Name = 'Quality Gate Status Check Stage Dev'
                }
                sleep(40)
				script {
                def qg = waitForQualityGate()
				  if (qg.status != 'OK') {
					  error "Pipeline aborted due to quality gate failure: ${qg.status}"
				  }else{
					 print "Success" 
				  }
				 }
            }
        }
		
		stage('Contract Integration Test') {
            when {
                        branch 'master'
              			expression{integration_test_stage=='true'}
            }
            steps {
                script {
                    Stage_Name = 'Contract Integration Stage'
                }
				    sh '''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                      mvn clean install -U -Pinttest -Dspring.profiles.active=test -Dspring.datasource.url=jdbc:postgresql://10.246.13.30:5432/ico_neo_av_alpha_masters?currentSchema=ico_av_usr_bkp -Dspring.datasource.password=ico_av_usr -Dspring.datasource.username=ico_av_usr
					  '''
            }
			

			post {
				always{
					uploadIntegrationTestReport()
				}
			}
		}
		stage('Contract Integration Analysis') {
            when {
                        branch 'master'
              			expression{integration_test_stage=='true'}
            }
            steps {
              	sleep(40)
                script {
                    Stage_Name = 'SonarQube Integration Analysis Stage'
                }
				withSonarQubeEnv('Sonar Qube -Linux') {
                    sh '''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                      mvn sonar:sonar -Dsonar.login=$sonar_user -Dsonar.password=$sonar_password -Dproj.name=$sonar_project_name_integrationtest -Dsonar.projectKey=$sonar_projectkey_integrationtest -Dsonar.host.url=$sonar_host_url -Dsonar.java.source=11
					  '''
                }
            }
		}
		
		stage('Contract Integration Test - Dev') {
            when {
                        not{
							branch 'master'
						} 
              			expression{integration_test_stage=='true'}
            }
            steps {
                script {
                    Stage_Name = 'Contract Integration Stage -Dev'
                }
				    sh '''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                      mvn clean install -Pinttest -Dspring.profiles.active=test -Dmaven.install.skip=true -Dspring.datasource.url=jdbc:postgresql://10.246.13.30:5432/ico_neo_av_alpha_masters?currentSchema=ico_av_usr_bkp -Dspring.datasource.password=ico_av_usr -Dspring.datasource.username=ico_av_usr
					  '''
            }
			
			post {
				always{
					uploadIntegrationTestReport()
				}
			}
		}
      
    
      	stage('Contract Integration Analysis - Dev') {
            when {
                         not{
							branch 'master'
						} 
              			expression{integration_test_stage=='true'}
            }
            steps {
              	sleep(40)
                script {
                    Stage_Name = 'SonarQube Integration Analysis Stage'
                }
				withSonarQubeEnv('Sonar Qube -Linux') {
                    sh '''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                      mvn sonar:sonar -Dsonar.login=$sonar_user -Dsonar.password=$sonar_password -Dproj.name=$sonar_project_name_integrationtest_dev -Dsonar.projectKey=$sonar_projectkey_integrationtest_dev -Dsonar.host.url=$sonar_host_url -Dsonar.java.source=11
					  '''
                }
            }
		}
		
		 stage('Contract Test Quality Gate Status Check') {
            when {
                        branch 'master'
              			expression{integration_test_stage=='true'}
            }
            steps {
                script {
                    Stage_Name = 'Contract Test Quality Gate Status Check Stage'
                }
                sleep(40)
				script {
                def qg = waitForQualityGate()
				  if (qg.status != 'OK') {
					  error "Pipeline aborted due to quality gate failure: ${qg.status}"
				  }else{
					 print "Success" 
				  }
				 }
				
            }
        }
		
		stage('Contract Test Quality Gate Status Check Dev') {
            when {
                         not{
							branch 'master'
						} 
              			expression{integration_test_stage=='true'}
            }
            steps {
                script {
                    Stage_Name = 'Contract Test Quality Gate Status Check Stage Dev'
                }
                sleep(40)
				script {
                def qg = waitForQualityGate()
				  if (qg.status != 'OK') {
					  error "Pipeline aborted due to quality gate failure: ${qg.status}"
				  }else{
					 print "Success" 
				  }
				 }
            }
        }
		
		
		
		stage('Docker Image Vulnerability Scan') {
			when{
				branch 'master'
			}
			steps{
				script {		
						GIT_COMMIT_SHORT = sh(
							script: "printf \$(git log -1 --pretty=%H | cut -c -10)",
							returnStdout: true
						)
						echo "GIT_COMMIT_SHORT   ->  ${GIT_COMMIT_SHORT}"
                    def listOfServices =Arrays.asList(env.service_name.split(","))
					env.testValue=listOfServices
					for (servicename in listOfServices) {
					env.servicename=servicename
					env.GIT_COMMIT_SHORT=GIT_COMMIT_SHORT
					    sh '''set +x
					OLDPWD=$(pwd) && source /home/icargoadm/.bashrc && cd -
                     /usr/local/bin/aws ecr describe-image-scan-findings --repository-name $servicename --image-id imageTag=$GIT_COMMIT_SHORT --output json --output json | tee ecr_scanResult.txt
					  '''
					}
				}
			}
		}
		
        stage('Delete Old Branch') {
		when {
					expression { BRANCH_NAME ==~ /(master)/ || BRANCH_NAME ==~ /(release\/[a-zA-Z0-9.-]*)/ || BRANCH_NAME ==~ /(hotfix\/[a-zA-Z0-9.-]*)/}
		}
		steps {
			script {
				Stage_Name = 'Delete Old Branch Stage'
			}
			dir(path: '.') {
				sshagent( ['gitCommitCrendentials']) {
					sh '''
						git fetch --prune

						for k in $(git branch -r --merged | sed /\\*/d); do 
						  if [[ "$(git log $k --since "60 days ago" | wc -l)" -eq 0 ]]; then
							local_branch_name=$(echo "$k" | sed 's/^origin\\///')
							echo $local_branch_name
							if [[ $local_branch_name = feature/* ]] || [[ $local_branch_name = bugfix/* ]]; then 
								git push $repo --delete $local_branch_name
							fi
						  fi
						done
					'''
				}
			}
		}
}
		
		
}


	

    post {
		success{
			script {
			 echo "GIT_COMMIT is ${env.GIT_COMMIT}"
			 data='{"key": "'+env.BUILD_ID+'","state":"SUCCESSFUL", "name":"'+env.JOB_NAME+'","url":"'+env.BUILD_URL+'","description":"Build is successful."}'
							bitbucketURL="http://bitbucket.ibsplc.com/rest/build-status/1.0/commits/"+env.GIT_COMMIT
							echo "bitbucketURL  ${bitbucketURL}"
							bitbucketresponse = ["curl", "-u", "icargo-release:Icargo-release", "-X", "POST", "-H", "Content-Type: application/json", "-d", "${data}", "${bitbucketURL}"].execute().text
							echo "bitbucketresponse ${bitbucketresponse}"
			
			if (env.BRANCH_NAME == 'master') {
              env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
              echo "GIT_COMMIT_MSG is ${env.GIT_COMMIT_MSG}"
              env.GIT_AUTHOR = sh (script: 'git log -1 --pretty=%cn ${GIT_COMMIT}', returnStdout: true).trim()
			  echo "GIT_COMMIT is ${env.GIT_COMMIT[0..6]}"
              recipientProvidersForQADeploy= emailextrecipients([[$class: 'CulpritsRecipientProvider'],
								[$class: 'RequesterRecipientProvider'],
								[$class: 'DevelopersRecipientProvider']])
			  echo "recipientProvidersForQADeploy  -> ${recipientProvidersForQADeploy}"
              gitCommitID =env.GIT_COMMIT
              echo "gitCommitID  -> ${gitCommitID}"
					def listOfServices =Arrays.asList(env.service_name.split(","))
					echo "listOfServices   - ${listOfServices}"
					echo "size of list "+listOfServices.size()
					echo "size of size 0 values "+listOfServices[0]
					echo "Deployment name ${env.deployment_name}"
                    if(env.deployment_name != "null"){
                    	deploymentList =Arrays.asList(env.deployment_name.split(",")) 
                    }
                    else{
                    	deploymentList =Arrays.asList(env.service_name.split(",")) 
                    }
                    
					for (servicename in deploymentList) {
						echo "  -- servicename for deployment--  ${servicename}"
						
							try {
							build job: "${servicename}-rollout", parameters: [[$class: 'StringParameterValue', name: 'gitCommitID', value: gitCommitID ], [$class: 'StringParameterValue', name: 'recipientProvidersForQADeploy', value: recipientProvidersForQADeploy]],wait: false , propagate: true
							sleep(20)
							}
							catch (Exception e) {
								echo "WARNING: ${e.message}"
							}
              
					}
			  
                    emailext(
                            subject: "Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
							
Check console output at:  ${env.BUILD_URL}  

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            recipientProviders: [[$class: 'CulpritsRecipientProvider'],
                                                 [$class: 'RequesterRecipientProvider'],
                                                 [$class: 'DevelopersRecipientProvider']],
                            to: 'cc:'
                    )
					echo " Updating the stub for the Contract test"
					sh'''
					export PATH='/home/icargoadm/.nvm/versions/node/v14.15.1/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/apache-maven-3.6.2/bin:/home/icargoadm/.local/bin:/home/icargoadm/bin'
					kubectl  --context iCargoUser@ico-neo-alpha.ap-south-1.eksctl.io rollout restart deployment -n mock stub-runner
					'''
					
                } else {
					emailext(
                            subject: "Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
Check console output at:  ${env.BUILD_URL}

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            recipientProviders: [[$class: 'CulpritsRecipientProvider']],
							to: 'cc:'
                    )
                }
				
				
			
			}
			
	}
	
        failure {
            script {
			
				echo "GIT_COMMIT is ${env.GIT_COMMIT}"
				data='{"key": "'+env.BUILD_ID+'","state":"FAILED", "name":"'+env.JOB_NAME+'","url":"'+env.BUILD_URL+'","description":"Build has failed"}'
							bitbucketURL="http://bitbucket.ibsplc.com/rest/build-status/1.0/commits/"+env.GIT_COMMIT
							echo "bitbucketURL  ${bitbucketURL}"
							bitbucketresponse = ["curl", "-u", "icargo-release:Icargo-release", "-X", "POST", "-H", "Content-Type: application/json", "-d", "${data}", "${bitbucketURL}"].execute().text
							echo "bitbucketresponse ${bitbucketresponse}"
			 
				if (env.BRANCH_NAME == 'master') {
                    emailext(
                            subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
							
Failure happened in ${Stage_Name}.
										
Check console output at:  ${env.BUILD_URL}  

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            recipientProviders: [[$class: 'CulpritsRecipientProvider'],
                                                 [$class: 'RequesterRecipientProvider'],
                                                 [$class: 'DevelopersRecipientProvider']],
                            to: 'cc:krishna.kumar@ibsplc.com,bejoy.kunjumon@ibsplc.com'
                    )
					
					
                } else {
					emailext(
                            subject: "BRANCH FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
Failure happened in ${Stage_Name}

Check console output at:  ${env.BUILD_URL}

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            recipientProviders: [[$class: 'CulpritsRecipientProvider']],
							to: 'cc:'
                    )
                }
            }
        }
    }
}
