def Stage_Name
def ARTIFACTORY_HOST
def ARTIFACTORY_REPO
def APP
def ENV
def bitbucketURL ="http://bitbucket.ibsplc.com/rest/build-status/1.0/commits/"
def commitId
def response
def results
def data
def bitbucketresponse
def deploymentList
def BRANCH_PREFIX  =  env.BRANCH_NAME.split("/")[0]
echo "BranchPFX is " + BRANCH_PREFIX

def loadValuesYaml(){
  def valuesYaml = readYaml file: 'app.yml'
  return valuesYaml;
}

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '3', artifactNumToKeepStr: '1'))
    }
    stages {
	
	
	
	stage('Initial Setup') {
			steps {
                script {
                	Stage_Name = 'Initial Setup'
					valuesYaml = loadValuesYaml()
					echo " valuesYaml   : ${valuesYaml}"
					appServers = valuesYaml.APP.each{ k,v->}
					for(app in appServers) { 
							env.JAVA_HOME=app.JAVA_HOME
							env.M2_HOME =app.M2_HOME
							env.repo=app.repo
							env.token=app.token
							env.project_name=app.project_name
							env.sonar_host_url=app.sonar_host_url
							env.sonar_projectkey_dev=app.sonar_projectkey_dev
							env.sonar_projectkey_master=app.sonar_projectkey_master
							env.sonar_password=app.sonar_password
							env.sonar_user=app.sonar_user
							env.sonar_project_name_dev=app.sonar_project_name_dev
							env.sonar_project_name_master=app.sonar_project_name_master
                      		env.stop_script=app.stop_script
                      		env.copy_script=app.copy_script
                      		env.start_script=app.start_script
                      		env.sonar_project_name_integrationtest=app.sonar_project_name_integrationtest
                      		env.sonar_projectkey_integrationtest=app.sonar_projectkey_integrationtest
                      		env.deploy_stage=app.deploy_stage
                      		env.integration_test_stage=app.integration_test_stage
							env.sonar_project_name_integrationtest_dev=app.sonar_project_name_integrationtest_dev
                      		env.sonar_projectkey_integrationtest_dev=app.sonar_projectkey_integrationtest_dev
                            env.service_name =app.service_name
                      		env.release_url=app.release_url
                            env.deployment_name=app.deployment_name
						}
                }

            }
        }
		
		
		stage('Build') {
			when {
                        expression { BRANCH_NAME ==~ /(master)/ || BRANCH_NAME ==~ /(release\/[a-zA-Z0-9.-]*)/ || BRANCH_NAME ==~ /(hotfix\/[a-zA-Z0-9.-]*)/}
            }
			
            steps {
                script {
					Stage_Name = 'Build Stage'
					
					echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
                }

                checkout([$class           : 'GitSCM',
                          branches         : [[name: env.BRANCH_NAME]],
                          userRemoteConfigs: [[
                                                      credentialsId: env.token,
                                                      url          : env.repo]]])

                 dir(path: '.') {sshagent( ['gitCommitCrendentials']) {
				 
                    sh '''
git fetch --prune

for k in $(git branch -r --merged | sed /\\*/d); do 
  if [[ "$(git log $k --since "120 days ago" | wc -l)" -eq 0 ]]; then
    local_branch_name=$(echo "$k" | sed 's/^origin\\///')
	echo $local_branch_name
	if [[ $local_branch_name = feature/* ]] || [[ $local_branch_name = bugfix/* ]]; then 
      	git push $repo --delete $local_branch_name
    fi
  fi
done
					'''}
                }
            }

        }
		
	
		
		
}


	
}