def Stage_Name
def APP
def ENV
def response
def bom
def commitIDpassed
def loadValuesYaml(){
  def valuesYaml = readYaml file: 'service/app.yml'
  return valuesYaml;
}

pipeline {
    agent any

	options {
        buildDiscarder(logRotator(numToKeepStr: '15', artifactNumToKeepStr: '1'))
    }
	
   parameters {
        text(defaultValue: "12121454512", description: '', name: 'gitCommitID')
    }
	
    stages {
	
		stage('Repo Checkout') {
			steps{
				checkout([$class           : 'GitSCM',
				branches         : [[name: "master"]],
				extensions: [[$class: 'CleanBeforeCheckout'],
				            [$class: 'RelativeTargetDirectory',
							relativeTargetDir: 'service/']],
				userRemoteConfigs: [[
						credentialsId: "f60d9763-39f7-4e73-8467-258d60f1d7f6",
						url: env.repourl]]])
				}
		}
		stage('ARgo Repo Checkout') {
			steps{
				checkout([$class           : 'GitSCM',
				branches         : [[name: "master"]],
				extensions: [[$class: 'CleanBeforeCheckout'],
				            [$class: 'RelativeTargetDirectory',
							relativeTargetDir: 'argocd/']],
				userRemoteConfigs: [[
						credentialsId: "f60d9763-39f7-4e73-8467-258d60f1d7f6",
						url: "http://Icargo-release@bitbucket.ibsplc.com/scm/icneo/icargo-neo-argocd.git"]]])
				}
		}
		
			
		stage('Load Values from Application ') {
			steps {
                script {
					Stage_Name = 'Load_VALUES'
					valuesYaml = loadValuesYaml()
					echo " valuesYaml   : ${valuesYaml}"
					appServers = valuesYaml.APP.each{ k,v->}
					for(app in appServers) { 
							env.repo=app.repo
							env.token=app.token
							env.project_name=app.project_name
							env.service_name =app.service_name
                            env.GIT_COMMIT =env.commitid
							env.bff=app.bff
						}
						
                }

            }
        }
		
		stage('Release Manager Entry') {
			steps{
				checkout([$class           : 'GitSCM',
				branches         : [[name: "master"]],
				extensions: [[$class: 'CleanBeforeCheckout'],
				            [$class: 'RelativeTargetDirectory',
							relativeTargetDir: 'service/']],
				userRemoteConfigs: [[
						credentialsId: "f60d9763-39f7-4e73-8467-258d60f1d7f6",
						url: env.repourl]]])
				script {
					dir("service"){
						GIT_COMMIT_SHORT = sh(
							script: "printf \$(git log -1 --pretty=%H | cut -c -10)",
							returnStdout: true
						)
						echo "GIT COMMIT   ->  ${env.GIT_COMMIT}"
						echo "GIT_COMMIT_SHORT   ->  ${GIT_COMMIT_SHORT}"
                        GIT_AUTHOR_EMAIL = sh(
							script: "printf \$(git log -1 --pretty='%ae : %s')",
							returnStdout: true
						)
						echo "GIT_AUTHOR_EMAIL   ->  ${GIT_AUTHOR_EMAIL}"
						GIT_COMMITER_EMAIL = sh(
							script: "printf \$(git log -1 --pretty='%ce : %s')",
							returnStdout: true
						)
                        echo "GIT_COMMITER_EMAIL   ->  ${GIT_COMMITER_EMAIL}"
					}
				
					def listOfServices =Arrays.asList(env.service_name.split(","))
					env.testValue=listOfServices
					echo "listOfServices   - ${listOfServices}"
					echo "size of list "+listOfServices.size()
					for (servicename in listOfServices) {
						echo "  -- servicename --  ${servicename}"
                        commitIDpassed =GIT_COMMIT_SHORT
                        env.POSTURL="http://10.246.12.51:5000/release-manager-service/rest/api/release/"+servicename+"/"+GIT_COMMIT_SHORT
						echo "POSTURL is ${env.POSTURL}"
						env.dataForPost='{"branch":"master"}'
						env.cont='Content-Type:application/json'
						response = sh(script: 'curl -XPOST -s -o /dev/null -w %{http_code} -H $cont -d $dataForPost $POSTURL', returnStdout: true)
						if (response != '200') {
							error "Pipeline aborted due to Dokcer push: ${response}"
							}else{
							print "Docker image successfully released" 
						}
					}
				}
			}
				
		}
		stage('Deployment to QA') {
			steps{
				sh '''
						IFS=',' # hyphen (-) is set as delimiter
						read -ra ADDR <<< "$service_name" # str is read into an array as tokens separated by IFS
						for sername in "${ADDR[@]}"; do # access each element of array
							if [ -e ${WORKSPACE}/bom-${sername} ]; then
							echo "---- >Deleting ---  $sername"
							rm  ${WORKSPACE}/bom-${sername}
							fi
						done
						IFS=' ' # reset to default value after usage
					'''
					script {
						def listOfServices =Arrays.asList(env.service_name.split(","))
						env.testValue=listOfServices
						echo "listOfServices   - ${listOfServices}"
						echo "size of list "+listOfServices.size()
						for (servicename in listOfServices) {
							echo "  -- servicename --  ${servicename}"
							env.POSTURL="http://10.246.12.51:5000/release-manager-service/rest/api/deployment/base/"+servicename+"/"+GIT_COMMIT_SHORT+"/bom"
							echo "POSTURL is ${env.POSTURL}"
							bom = ["curl","-o","${WORKSPACE}/bom-${servicename}" ,"-X", "GET", "-H", "Content-Type: application/json", "${env.POSTURL}"].execute().text
						}
					}
				}
		}
		
		stage("Deploy Phase") {
			steps {
				echo "Deploy Phase"
				dir("argocd/icargo-neo-cli"){
					sh"pwd"
					sh '''
						IFS=',' # hyphen (-) is set as delimiter
						read -ra ADDR <<< "$service_name" # str is read into an array as tokens separated by IFS
		
						export ENABLE_COLOR="false"
						for sername in "${ADDR[@]}"; do # access each element of array
							echo "---- > $sername"
                            /data/utils/ecr-sync-harbor-cvc.sh ${WORKSPACE}/bom-"${sername}"||true
							./iconctl.sh deploy-single cvcqaalpha ${sername} ${WORKSPACE}/bom-${sername}
						done
						IFS=' ' # reset to default value after usage
					'''
				}
			}
		}
	
		
	}

	
	post {
		success{
			script {
				echo "recipientProvidersForQADeploy   ->  ${recipientProvidersForQADeploy}"
				echo"gitCommitID     ---> ${gitCommitID}"
				data='{"key": "'+env.BUILD_ID+'","state":"SUCCESSFUL", "name":"'+env.JOB_NAME+'","url":"'+env.BUILD_URL+'","description":"QA Deployment is successful."}'
				bitbucketURL="http://bitbucket.ibsplc.com/rest/build-status/1.0/commits/"+env.gitCommitID
				bitbucketresponse = ["curl", "-u", "icargo-release:Icargo-release", "-X", "POST", "-H", "Content-Type: application/json", "-d", "${data}", "${bitbucketURL}"].execute().text
				echo "bitbucketresponse ${bitbucketresponse}"
				def listOfServices =Arrays.asList(env.service_name.split(","))
				env.testValue=listOfServices
				echo "listOfServices   - ${listOfServices}"
				echo "size of list "+listOfServices.size()
				if(env.bff=='true') {
					echo "BFF Service "
					for (servicename in listOfServices) {
						echo "Service Name passed "+servicename
						def buildURL= "http://localhost:5080/build/"+servicename
						response = ["curl","-X", "POST", "-H", "Content-Type: application/json", "${buildURL}"].execute().text
						echo "response    "+response
						env.statusURL ="http://localhost:5080/status/"+servicename
					
						statusresponse = sh(script: 'curl -XGET -s -o /dev/null -w %{http_code} ${statusURL}', returnStdout: true)
						echo "statusresponse    "+statusresponse
						if (statusresponse != '200') {
							
											    emailext( attachmentsPattern: "argocd/icargo-neo-cli/alpha_${servicename}.zip",
                            subject: "Deployment is sucess : BFF JAR Deployment Failed: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """Deployment is sucess : BFF JAR Deployment Failed: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
							
Check console output at:  ${env.BUILD_URL} 

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            
                            to: "${recipientProvidersForQADeploy},${GIT_AUTHOR_EMAIL}, ${GIT_COMMITER_EMAIL}"
                    )
							}else{
						
											    emailext( attachmentsPattern: "argocd/icargo-neo-cli/alpha_${servicename}.zip",
                            subject: "Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
							
Check console output at:  ${env.BUILD_URL} 

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            
                            to: "${recipientProvidersForQADeploy},${GIT_AUTHOR_EMAIL}, ${GIT_COMMITER_EMAIL}"
                    )
						}
						 
							
					}
				}
				
				else{
						
				for (servicename in listOfServices) {
				echo "Service Name passed "+servicename
				    emailext( attachmentsPattern: "argocd/icargo-neo-cli/alpha_${servicename}.zip",
                            subject: "Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
							
Check console output at:  ${env.BUILD_URL} 

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            
                            to: "${recipientProvidersForQADeploy},${GIT_AUTHOR_EMAIL}, ${GIT_COMMITER_EMAIL}"
                    )
					def profile="alpha"
						def testType="smoke_test"
						def tenant="base"
                        commitIDpassed =GIT_COMMIT_SHORT
                        echo "Commit id passed is : "+commitIDpassed +"  GIT_COMMIT_SHORT"+GIT_COMMIT_SHORT
						try {
							build job: "smoke-test", parameters: [[$class: 'StringParameterValue', name: 'tenant', value: tenant ], [$class: 'StringParameterValue', name: 'artidr', value: servicename],[$class: 'StringParameterValue', name: 'profile', value: profile],[$class: 'StringParameterValue', name: 'testType', value: testType],[$class: 'StringParameterValue', name: 'commitIDpassed', value: GIT_COMMIT_SHORT],[$class: 'StringParameterValue', name: 'recipientProvidersForQADeploy', value: recipientProvidersForQADeploy]],wait: false , propagate: true
							}
							catch (Exception e) {
								echo "WARNING: ${e.message}"
							}
				}	
				
                
			}
			
			
			
			
			}
			
			sh '''
				if [ -e ${WORKSPACE}/bom ]; then
					rm  ${WORKSPACE}/bom
				fi
				export alpha=alpha_
				export envtest=$service_name
				export zipextentsion=.zip
				if [ -e ${WORKSPACE}/argocd/icargo-neo-cli/${alpha}${service_name}${zipextentsion} ]; then
					rm  ${WORKSPACE}/argocd/icargo-neo-cli/${alpha}${service_name}${zipextentsion}
				fi
				
				'''
			
	}
	
        failure {
            script {
			
				echo "GIT_COMMIT is ${env.gitCommitID}"
                echo "recipientProvidersForQADeploy   ->  ${recipientProvidersForQADeploy}"
                echo "GIT_AUTHOR_EMAIL   ->  ${GIT_AUTHOR_EMAIL}"
                echo "GIT_COMMITER_EMAIL   ->  ${GIT_COMMITER_EMAIL}"
                
				data='{"key": "'+env.BUILD_ID+'","state":"FAILED", "name":"'+env.JOB_NAME+'","url":"'+env.BUILD_URL+'","description":"QA Deployment has failed"}'
				bitbucketURL="http://bitbucket.ibsplc.com/rest/build-status/1.0/commits/"+env.gitCommitID
				bitbucketresponse = ["curl", "-u", "icargo-release:Icargo-release", "-X", "POST", "-H", "Content-Type: application/json", "-d", "${data}", "${bitbucketURL}"].execute().text
				echo "bitbucketresponse ${bitbucketresponse}"
				
				def listOfServices =Arrays.asList(env.service_name.split(","))
				env.testValue=listOfServices
				echo "listOfServices   - ${listOfServices}"
				echo "size of list "+listOfServices.size()
				for (servicename in listOfServices) {
				echo "Service Name passed "+servicename
                echo "Deleting entry from the Release Manager as the deployment failed"
                deleteURL="http://10.246.12.51:5000/release-manager-service/rest/api/release/"+servicename+"/"+GIT_COMMIT_SHORT
                echo "deleteURL    ${deleteURL}"
				delResponse = ["curl","-X", "DELETE", "-H", "Content-Type: application/json", "${deleteURL}"].execute().text
				echo "delResponse ${delResponse}"
						emailext(
							attachmentsPattern: "argocd/icargo-neo-cli/alpha_${servicename}.zip",
                            subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
							
Failure happened in ${Stage_Name}.
										
Check console output at:  ${env.BUILD_URL}  

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            to: "${recipientProvidersForQADeploy},${GIT_AUTHOR_EMAIL}, ${GIT_COMMITER_EMAIL},Sander.Joseph@ibsplc.com, bejoy.kunjumon@ibsplc.com, Aswathy.Parameswaran@ibsplc.com,sinoob.saithumuhammed@ibsplc.com,krishna.kumar@ibsplc.com"
						)
					}
				
            }
        }
    }

}
