def Stage_Name="Init"
def ENV
def releaseVersion
def bom
def tenantId = "base"
def applicationId ="icargo-neo"
def currentVersion
def jiraIds

env.EMAIL_SUBSCRIBERS="Sander.Joseph@ibsplc.com"


pipeline {
    agent any

	options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '1'))
    }
		
   parameters {
        text(defaultValue: "base", description: 'Tenant of the application', name: 'tenant')
		text(defaultValue: "icargo-neo", description: 'The Application Id ', name: 'appId')
		text(defaultValue: "iCO_5.0.7.7100", description: 'The version we plan to deploy to the environment', name: 'buildVer')
		text(defaultValue: "demo", description: 'Branch', name: 'commitBranch')
    }
	
    stages {
		
		stage("Release Certification Stage") {			
			steps {
				echo "Certifing the Version as a Release Candidate for ${tenant}   ${appId}   ${buildVer}   "
				script {
					env.RELEASEUPDATEURL="http://10.246.12.51:5000/release-manager-service/rest/api/builds/"+buildVer+"/rc"
					echo "RELEASEUPDATEURL is ${env.RELEASEUPDATEURL}"
					env.cont='Content-Type:application/json'
					response = sh(script: 'curl -XPOST -s -o /dev/null -w %{http_code} -H $cont $RELEASEUPDATEURL', returnStdout: true)
					if (response != '200') {
						error "Release Quality Version Update is not done ${response}"
					}else{
						print "The Release Quality sucessfully udpated." 
					}
				}
			}
		}
	}

	
	post {
		success{
			script {
				emailext( 
						recipientProviders: [[$class: 'CulpritsRecipientProvider'],
								[$class: 'RequesterRecipientProvider'],
								[$class: 'DevelopersRecipientProvider']],
						mimeType: 'text/html',
						to : "${env.EMAIL_SUBSCRIBERS}",
                        subject: "Success: Job '${env.JOB_NAME} [${env.buildVer}]'",
                        body: """Success: Job '${env.JOB_NAME} [${env.buildVer}]':
							<br />
							Check console output at:  ${env.BUILD_URL}/console 
							<br />
							Job Name:  ${env.JOB_NAME} 
                            Release Version: ${env.buildVer}
							<br />
							Jenkins Build Number: [${env.BUILD_NUMBER}]"""             
                    )
					try {
                        build job: "CustomerRelease", parameters: [[$class: 'StringParameterValue', name: 'buildVer', value: buildVer ], [$class: 'StringParameterValue', name: 'tenant', value: tenant], [$class: 'StringParameterValue', name: 'appId', value: appId], [$class: 'StringParameterValue', name: 'commitBranch', value: commitBranch]],wait: false , propagate: true
                        sleep(20)
                    }
                    catch (Exception e) {
                        echo "WARNING: ${e.message}"
                    }
                    
			}
			
	}
	
        failure {
            script {
				emailext(
						mimeType: 'text/html',
						recipientProviders: [[$class: 'CulpritsRecipientProvider'],
										[$class: 'RequesterRecipientProvider'],
										[$class: 'DevelopersRecipientProvider']],
						to : "${env.EMAIL_SUBSCRIBERS}",
						subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
						body: """
								<div style="color:red;font-size:20px">
								FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
								</div>
								Failure happened in ${Stage_Name}.
								<br />
								Check console output at:  ${env.BUILD_URL}/console
								<br />
								Job Name:  ${env.JOB_NAME} 
								<br />
								Build Number: [${env.BUILD_NUMBER}]"""
						)				
            }
        }
    }

}
