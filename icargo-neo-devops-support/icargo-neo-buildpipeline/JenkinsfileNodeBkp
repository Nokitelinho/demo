def Stage_Name
def ARTIFACTORY_HOST
def ARTIFACTORY_REPO
def APP
def ENV
def bitbucketURL ="http://bitbucket.ibsplc.com/rest/build-status/1.0/commits/"
def commitId
def response
def results
def data
def bitbucketresponse
def loadValuesYaml(){
  def valuesYaml = readYaml file: 'app.yml'
  return valuesYaml;
}

def cancelPreviousBuilds() {
    def jobName = env.JOB_NAME
    def buildNumber = env.BUILD_NUMBER.toInteger()
    /* Get job name */
    def currentJob = Jenkins.instance.getItemByFullName(jobName)

    /* Iterating over the builds for specific job */
    for (def build : currentJob.builds) {
        def exec = build.getExecutor()
        /* If there is a build that is currently running and it's not current build */
        if (build.isBuilding() && build.number.toInteger() != buildNumber && exec != null) {
            /* Then stop it */
            exec.interrupt(
                    Result.ABORTED,
                    new CauseOfInterruption.UserInterruption("Aborted by #${currentBuild.number}")
                )
            println("Aborted previously running build #${build.number}")            
        }
    }
}

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '3', artifactNumToKeepStr: '1'))
    }
    stages {
		stage('Initial Setup') {
			steps {
                script {
                	cancelPreviousBuilds()
					Stage_Name = 'Initial Setup'
					valuesYaml = loadValuesYaml()
					echo " valuesYaml   : ${valuesYaml}"
					appServers = valuesYaml.APP.each{ k,v->}
					for(app in appServers) { 
							env.repo=app.repo
							env.token=app.token
							env.project_name=app.project_name
							env.sonar_host_url=app.sonar_host_url
							env.sonar_projectkey_dev=app.sonar_projectkey_dev
							env.sonar_projectkey_master=app.sonar_projectkey_master
							env.sonar_password=app.sonar_password
							env.sonar_user=app.sonar_user
							env.sonar_project_name_dev=app.sonar_project_name_dev
							env.sonar_project_name_master=app.sonar_project_name_master
                      		env.stop_script=app.stop_script
                      		env.copy_script=app.copy_script
                      		env.start_script=app.start_script
                      		env.deploy_stage=app.deploy_stage
                            env.yarn_path=app.yarn_path
                            env.node_path=app.node_path
							env.service_name =app.service_name
							env.docker_reg =app.docker_reg
                      		env.release_url=app.release_url
							if(app.containsKey("gateway")) {
								env.gateway=app.gateway
							} else {
								env.gateway='false'
							}
						}
                    sh '''npm config set registry http://repo.ibsplc.com:8182/'''
                }

            }
        }
        stage('Build') {
			when {
                        branch 'master'
            }

            steps {
                script {
					Stage_Name = 'Build Stage'
					
					echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
                }

                checkout([$class           : 'GitSCM',
                          branches         : [[name: env.BRANCH_NAME]],
                          userRemoteConfigs: [[
                                                      credentialsId: env.token,
                                                      url          : env.repo]]])

				script {
					if(env.gateway=='true') {
						dir(path: '.') {
							
							sh '''export PATH=$node_path:$PATH:$yarn_path
							rm -rf node_modules  
							
							rm -rf eslint-coverage
							yarn install'''
							
						}
					} else {
						dir(path: '.') {
							sh '''export PATH=$node_path:$PATH:$yarn_path
							rm -rf node_modules  
							
							rm -rf eslint-coverage
							yarn install'''
							
							sh '''export PATH=$node_path:$PATH:$yarn_path
							yarn build'''
						
						}
					}					
				}
                
				script {
                    Stage_Name = 'Build Stage'
					 echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
					 def notifyBitbucket = {
					  echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
					  return "ees"
					 }
					 echo "   notifyBitbucket  ${notifyBitbucket}"
                }
               
				
            }
        }

        stage('Build Branch') {
			when {
				not{
					 branch 'master'
				}      
            }
            steps {
                script {
					Stage_Name = 'Build Stage'
					
					echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
                }

                checkout([$class           : 'GitSCM',
                          branches         : [[name: env.BRANCH_NAME]],
                          userRemoteConfigs: [[
                                                      credentialsId: env.token,
                                                      url          : env.repo]]])

				script {
					if(env.gateway=='true') {
						dir(path: '.') {
							
							sh '''export PATH=$node_path:$PATH:$yarn_path
							rm -rf node_modules  
							rm -rf yarn.lock
							rm -rf eslint-coverage
							yarn install'''
							
						}
					} else {
						dir(path: '.') {
							sh '''export PATH=$node_path:$PATH:$yarn_path
							rm -rf node_modules  
							
							rm -rf eslint-coverage
							yarn install'''
							
							sh '''export PATH=$node_path:$PATH:$yarn_path
							yarn build'''
						
						}
					}					
				}
				script {
                    Stage_Name = 'Build Stage'
					 echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
					 def notifyBitbucket = {
					  echo "Building env.BRANCH_NAME ${env.BRANCH_NAME}"
					  return "ees"
					 }
					 echo "   notifyBitbucket  ${notifyBitbucket}"
                }
               
				
            }
        }

        stage('SonarQube Analysis') {
            when {				
				branch 'master'	
				expression { gateway == 'false' }				
            }
            steps {
                script {
                    Stage_Name = 'SonarQube Analysis Stage'
                }
				withSonarQubeEnv('Sonar Qube -Linux') {
                    sh '''export PATH=$PATH:$yarn_path:$node_path
                    yarn sonar -Dsonar.projectKey=$sonar_projectkey_master -Dsonar.projectName=$sonar_project_name_master'''
                }
            }
		}	

        stage('SonarQube Analysis Dev') {
            when {
				not{
					anyOf {
						branch 'master'
						expression { gateway == 'true' }	
					}			    	
				}      
            }
            steps {
                script {
                    Stage_Name = 'SonarQube Analysis Dev Stage'
                }
				withSonarQubeEnv('Sonar Qube -Linux') {
                   sh '''export PATH=$PATH:$yarn_path:$node_path
                   yarn sonar -Dsonar.projectKey=$sonar_projectkey_dev -Dsonar.projectName=$sonar_project_name_dev'''
                }
            }
		}

		stage('Quality Gate Status Check') {
            when {				
				branch 'master'	
				expression { gateway == 'false' }				
            }
            steps {
                script {
                    Stage_Name = 'Quality Gate Status Check Stage'
                }
                sleep(40)
				script {
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }else{
                        print "Success" 
                    }
				}
				
            }
        }
		
		stage('Quality Gate Status Check Dev') {
            when {
				not{
					anyOf {
						branch 'master'
						expression { gateway == 'true' }	
					}					
				}      
            }
            steps {
                script {
                    Stage_Name = 'Quality Gate Status Check Stage Dev'
                }
                sleep(40)
				script {
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }else{
                        print "Success" 
                    }
				}
            }
        }
      stage('Docker') {
            when {
                branch 'master'
             	expression{deploy_stage=='true'}
            }
            steps {
                sh "bash ./docker.sh '141807520248.dkr.ecr.ap-south-1.amazonaws.com' ${env.service_name}"
            }
        }
		

}

    post {
		success{
			script {
			 echo "GIT_COMMIT is ${env.GIT_COMMIT}"
			 data='{"key": "'+env.BUILD_ID+'","state":"SUCCESSFUL", "name":"'+env.JOB_NAME+'","url":"'+env.BUILD_URL+'","description":"Build is successful."}'
							bitbucketURL="http://bitbucket.ibsplc.com/rest/build-status/1.0/commits/"+env.GIT_COMMIT
							echo "bitbucketURL  ${bitbucketURL}"
							bitbucketresponse = ["curl", "-u", "icargo-release:Icargo-release", "-X", "POST", "-H", "Content-Type: application/json", "-d", "${data}", "${bitbucketURL}"].execute().text
							echo "bitbucketresponse ${bitbucketresponse}"
			
			if (env.BRANCH_NAME == 'master') {
				env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
				echo "GIT_COMMIT_MSG is ${env.GIT_COMMIT_MSG}"
				env.GIT_AUTHOR = sh (script: 'git log -1 --pretty=%cn ${GIT_COMMIT}', returnStdout: true).trim()
				echo "GIT_COMMIT is ${env.GIT_COMMIT[0..6]}"
               
				 recipientProvidersForQADeploy= emailextrecipients([[$class: 'CulpritsRecipientProvider'],
								[$class: 'RequesterRecipientProvider'],
								[$class: 'DevelopersRecipientProvider']])
			  	echo "recipientProvidersForQADeploy  -> ${recipientProvidersForQADeploy}"
             	 gitCommitID =env.GIT_COMMIT
             	 echo "gitCommitID  -> ${gitCommitID}"
                 build job: "${env.SERVICE_NAME}-deployment", parameters: [[$class: 'StringParameterValue', name: 'gitCommitID', value: gitCommitID ], [$class: 'StringParameterValue', name: 'recipientProvidersForQADeploy', value: recipientProvidersForQADeploy]],wait: false
             
                    emailext(
                            subject: "Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
							
Check console output at:  ${env.BUILD_URL}  

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            recipientProviders: [[$class: 'CulpritsRecipientProvider'],
                                                 [$class: 'RequesterRecipientProvider'],
                                                 [$class: 'DevelopersRecipientProvider']],
                            to: 'cc:sander.joseph@ibsplc.com'
                    )
					
					
                } else {
					emailext(
                            subject: "Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
Check console output at:  ${env.BUILD_URL}

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            recipientProviders: [[$class: 'CulpritsRecipientProvider']],
							to: 'cc:sander.joseph@ibsplc.com'
                    )
                }
				
				
			
			}
			
	}
	
        failure {
            script {
			
				echo "GIT_COMMIT is ${env.GIT_COMMIT}"
				data='{"key": "'+env.BUILD_ID+'","state":"FAILED", "name":"'+env.JOB_NAME+'","url":"'+env.BUILD_URL+'","description":"Build has failed"}'
							bitbucketURL="http://bitbucket.ibsplc.com/rest/build-status/1.0/commits/"+env.GIT_COMMIT
							echo "bitbucketURL  ${bitbucketURL}"
							bitbucketresponse = ["curl", "-u", "icargo-release:Icargo-release", "-X", "POST", "-H", "Content-Type: application/json", "-d", "${data}", "${bitbucketURL}"].execute().text
							echo "bitbucketresponse ${bitbucketresponse}"
							
				if (env.BRANCH_NAME == 'master') {
                    emailext(
                            subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
							
Failure happened in ${Stage_Name}.
										
Check console output at:  ${env.BUILD_URL}  

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            recipientProviders: [[$class: 'CulpritsRecipientProvider'],
                                                 [$class: 'RequesterRecipientProvider'],
                                                 [$class: 'DevelopersRecipientProvider']],
                            to: 'cc:sander.joseph@ibsplc.com'
                    )
					
					
                } else {
					emailext(
                            subject: "BRANCH FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
Failure happened in ${Stage_Name}

Check console output at:  ${env.BUILD_URL}

Job Name:  ${env.JOB_NAME} 

Build Number: [${env.BUILD_NUMBER}]""",

                            recipientProviders: [[$class: 'CulpritsRecipientProvider']],
							to: 'cc:sander.joseph@ibsplc.com'
                    )
                }
            }
        }
  always {
    dir("${env.WORKSPACE}@tmp") {
      deleteDir()
    }
    dir("${env.WORKSPACE}@script") {
      deleteDir()
    }
    dir("${env.WORKSPACE}@script@tmp") {
      deleteDir()
    }
  }
    }
}