package com.ibsplc.icargo.business.mail.operations;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyCollectionOf;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.spy;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertNull;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import org.junit.Test;

import com.ibsplc.icargo.business.mail.mra.defaults.vo.RateAuditDetailsVO;
import com.ibsplc.icargo.business.mail.mra.defaults.vo.RateAuditVO;
import com.ibsplc.icargo.business.mail.operations.proxy.MailOperationsMRAProxy;
import com.ibsplc.icargo.business.mail.operations.proxy.SharedDefaultsProxy;
import com.ibsplc.icargo.business.mail.operations.proxy.SharedULDProxy;
import com.ibsplc.icargo.business.mail.operations.vo.ContainerVO;
import com.ibsplc.icargo.business.mail.operations.vo.MailConstantsVO;
import com.ibsplc.icargo.business.mail.operations.vo.MailbagVO;
import com.ibsplc.icargo.business.mail.operations.vo.OperationalFlightVO;
import com.ibsplc.icargo.business.shared.uld.vo.ULDValidationVO;
import com.ibsplc.icargo.framework.feature.AbstractFeatureTest;
import com.ibsplc.icargo.framework.proxy.ProxyException;
import com.ibsplc.icargo.framework.security.vo.LogonAttributes;
import com.ibsplc.icargo.framework.util.time.LocalDate;
import com.ibsplc.icargo.framework.util.time.Location;
import com.ibsplc.icargo.framework.util.unit.Measure;
import com.ibsplc.icargo.framework.util.unit.UnitConstants;
import com.ibsplc.icargo.persistence.dao.mail.operations.MailTrackingDefaultsDAO;
import com.ibsplc.xibase.server.framework.exceptions.SystemException;
import com.ibsplc.xibase.server.framework.persistence.EntityManagerMock;
import com.ibsplc.xibase.server.framework.persistence.FinderException;
import com.ibsplc.xibase.server.framework.persistence.PersistenceController;
import com.ibsplc.icargo.business.mail.operations.proxy.SharedAreaProxy;

import static org.mockito.Mockito.mock;
public class ReassignControllerTest extends AbstractFeatureTest{
	
	private ReassignController reassignControllerSpy;
	private Container containerEntity;
	private LogonAttributes logonAttributes;
	private SharedDefaultsProxy sharedDefaultsProxy;
	private MailTrackingDefaultsDAO dao;
	private Mailbag mailbagBean;
	private MailController mailController;
	private MailOperationsMRAProxy mailOperationsMRAProxy;
	private SharedAreaProxy sharedAreaProxy;
	private SharedULDProxy sharedULDProxy;
	private ULDForSegment uldForSegmentEntity;
	private AssignedFlightSegment assignedFlightSegmentEntity;
    private MailbagInULDForSegment mailbagInULDForSegmententity;
	@Override
	public void setup() throws Exception {
		EntityManagerMock.mockEntityManager();
		reassignControllerSpy = spy(new ReassignController());
		containerEntity = new Container();
		logonAttributes = mock(LogonAttributes.class);
		sharedDefaultsProxy = mockProxy(SharedDefaultsProxy.class);
		dao = mock(MailTrackingDefaultsDAO.class);
		doReturn(dao).when(PersistenceController.getEntityManager()).getQueryDAO("mail.operations");
		mailbagBean = mockBean("MailbagEntity",Mailbag.class);
		mailController = mockBean("mAilcontroller",MailController.class);
		mailOperationsMRAProxy = mockProxy(MailOperationsMRAProxy.class);
		sharedAreaProxy = mockProxy(SharedAreaProxy.class);
        sharedULDProxy = mockProxy(SharedULDProxy.class);
		uldForSegmentEntity = new ULDForSegment();
		assignedFlightSegmentEntity = new AssignedFlightSegment();
		mailbagInULDForSegmententity = new MailbagInULDForSegment();
	}

	@Test
	public void updateReassignedContainer_ContainerDestChangedTrue() throws SystemException, FinderException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(true);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
		assertTrue(assignedContainerVO.isContainerDestChanged());
		
	}
	
	@Test
	public void updateReassignedContainer_OffloadTrue() throws SystemException, FinderException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		containerEntity.setArrivedStatus("N");
		containerEntity.setPou("CDG");
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou("CDG");
		assignedContainerVO.setContainerDestChanged(false);
		assignedContainerVO.setAssignedUser(null);
		assignedContainerVO.setLastUpdateUser("ICOADMIN");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setContentId(null);
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(true);
		assignedContainerVO.setOffload(true);
		assignedContainerVO.setUldReferenceNo(1);
		destAssignedContainers.add(assignedContainerVO);
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
		assertTrue(assignedContainerVO.isOffload());
	}
	
	@Test
	public void updateReassignedContainer_FinderException() throws SystemException, FinderException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		doThrow(FinderException.class).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
	}
	
	@Test
	public void updateReassignedContainer_FlightVoNull() throws SystemException, FinderException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO = null;
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setContainerPK(containerPK);
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
		assertNull(toFlightVO);
	}
	
	@Test
	public void createContainer_ContainerTypeUld() throws FinderException, SystemException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setTransferAudit(false);
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		toFlightVO.setFlightSequenceNumber(-1);
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
		assertThat(containerEntity.getContainerType(),is("U"));
	}
	
	@Test
	public void createContainer_ConatainerTypeBulk() throws FinderException, SystemException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setUldReferenceNo(1);
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		toFlightVO.setFlightSequenceNumber(-1);
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
		assertThat(containerEntity.getContainerType(),is("B"));
	}
	
	@Test
	public void createContainer_forCarriers() throws FinderException, SystemException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setUldTobarrow(true);
		assignedContainerVO.setOffload(true);
		assignedContainerVO.setFlightNumber("-1");
		assignedContainerVO.setUldReferenceNo(1);
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		toFlightVO.setFlightSequenceNumber(1);
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
		assertThat(assignedContainerVO.getFlightNumber(),is("-1"));
	}
	@Test
	public void shouldAppendAdditionalInfo_WhenContentIdIsNull() throws Exception{
		ContainerVO containerVO = new ContainerVO();
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		containerVO.setPou("CDG");
		containerVO.setFlightNumber("-1");
		containerVO.setFlightSequenceNumber(-1);
		containerVO.setCompanyCode(getCompanyCode());
		containerVO.setAssignedPort("CDG");
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setCompanyCode(getCompanyCode());
		mailbagVO.setMailbagId("FRCDGADEFRAAACA10300002001200");
		mailbagVO.setScannedDate(new LocalDate(LocalDate.NO_STATION,Location.NONE,true));
		mailbagVOs.add(mailbagVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		toFlightVO.setFlightSequenceNumber(-1);
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		String sysParForInvetory = "mailtracking.defaults.inventoryenabled";
		Map<String, String> parameterMap= new HashMap<>();
		parameterMap.put(sysParForInvetory, MailConstantsVO.FLAG_NO);
		long mailSequenceNumber = 1000;
		Mailbag mailbag = new Mailbag();
		MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(getCompanyCode());
		mailbagPK.setMailSequenceNumber(mailSequenceNumber);
		mailbag.setMailbagPK(mailbagPK);
		doReturn(parameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(mailSequenceNumber).when(dao).findMailSequenceNumber(any(String.class),any(String.class));
		doReturn(mailbag).when(PersistenceController.getEntityManager()).find(mailbagBean.getClass(), mailbagPK);
		reassignControllerSpy.reassignMailFromDestnToDestn(mailbagVOs, containerVO);
		assertTrue(Objects.isNull(containerEntity.getContentId()));
	}
	@Test
	public void shouldAppendAdditionalInfo_WhenContentIdIsNotNull() throws Exception{
		ContainerVO containerVO = new ContainerVO();
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		containerVO.setPou("CDG");
		containerVO.setFlightNumber("-1");
		containerVO.setFlightSequenceNumber(-1);
		containerVO.setCompanyCode(getCompanyCode());
		containerVO.setAssignedPort("CDG");
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setCompanyCode(getCompanyCode());
		mailbagVO.setMailbagId("FRCDGADEFRAAACA10300002001200");
		mailbagVO.setScannedDate(new LocalDate(LocalDate.NO_STATION,Location.NONE,true));
		mailbagVOs.add(mailbagVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		toFlightVO.setFlightSequenceNumber(-1);
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		containerEntity.setContentId("MO");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		String sysParForInvetory = "mailtracking.defaults.inventoryenabled";
		Map<String, String> parameterMap= new HashMap<>();
		parameterMap.put(sysParForInvetory, MailConstantsVO.FLAG_NO);
		long mailSequenceNumber = 1000;
		Mailbag mailbag = new Mailbag();
		MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(getCompanyCode());
		mailbagPK.setMailSequenceNumber(mailSequenceNumber);
		mailbag.setMailbagPK(mailbagPK);
		doReturn(parameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(mailSequenceNumber).when(dao).findMailSequenceNumber(any(String.class),any(String.class));
		doReturn(mailbag).when(PersistenceController.getEntityManager()).find(mailbagBean.getClass(), mailbagPK);
		reassignControllerSpy.reassignMailFromDestnToDestn(mailbagVOs, containerVO);
		assertTrue(Objects.nonNull(containerEntity.getContentId()));
	}	
	@Test
	public void importMailProvisionalRateData_forDestToDest() throws SystemException, FinderException, ProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		ContainerVO containerVO = new ContainerVO();
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
		assertTrue(assignedContainerVO.isContainerDestChanged());
	}
	@Test(expected=SystemException.class)
	public void importMailProvisionalRateData_forDestToDest_throwException() throws SystemException, FinderException, ProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		ContainerVO containerVO = new ContainerVO();
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doThrow(ProxyException.class).when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
	}
	@Test
	public void importMailProvisionalRateData_WithImportNotEnabled() throws SystemException, FinderException, ProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		ContainerVO containerVO = new ContainerVO();
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "N");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
	}
	@Test
	public void importMailProvisionalRateData_WithNoRateAuditVOs() throws SystemException, FinderException, ProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = null;
		ContainerVO containerVO = new ContainerVO();
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
	}
	@Test
	public void importMailProvisionalRateData_WithEmptyRateAuditVOs() throws SystemException, FinderException, ProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		ContainerVO containerVO = new ContainerVO();
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromDestToDest(destAssignedContainers, toFlightVO);
	}
	@Test
	public void importMailProvisionalRateData_forDestToFlight() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		ContainerVO containerVO = new ContainerVO();
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromDestToFlight(destAssignedContainers, toFlightVO,1);
		assertTrue(assignedContainerVO.isContainerDestChanged());
	}
	@Test(expected=SystemException.class)
	public void importMailProvisionalRateData_forDestToFlight_throwException() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		ContainerVO containerVO = new ContainerVO();
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doThrow(ProxyException.class).when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromDestToFlight(destAssignedContainers, toFlightVO,1);
		assertTrue(assignedContainerVO.isContainerDestChanged());
	}
	@Test
	public void importMailProvisionalRateData_forDestToFlight_WithImportNotEnabled() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		ContainerVO containerVO = new ContainerVO();
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "N");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		reassignControllerSpy.reassignContainerFromDestToFlight(destAssignedContainers, toFlightVO,1);
	}
	@Test
	public void importMailProvisionalRateData_forDestToFlightWithNoAuditVo() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = null;
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromDestToFlight(destAssignedContainers, toFlightVO,1);
	}
	@Test
	public void importMailProvisionalRateData_forDestToFlightWithEmptyAuditVo() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList<>();
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromDestToFlight(destAssignedContainers, toFlightVO,1);
	}
	@Test
	public void importMailProvisionalRateData_forFlightToFlight() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		ULDForSegmentPK uLDForSegmentPK = new ULDForSegmentPK();
		uLDForSegmentPK.setUldNumber("AKE1234AV");
		uldForSegmentEntity.setUldForSegmentPk(uLDForSegmentPK);
		 doReturn(uldForSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(ULDForSegment.class), any(ULDForSegmentPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(assignedFlightSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(AssignedFlightSegment.class), any(AssignedFlightSegmentPK.class));
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromFlightToFlight(destAssignedContainers, toFlightVO,1);
	}
	@Test
	public void importMailProvisionalRateData_forFlightToFlightWithImportNotEnabled() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		ULDForSegmentPK uLDForSegmentPK = new ULDForSegmentPK();
		uLDForSegmentPK.setUldNumber("AKE1234AV");
		uldForSegmentEntity.setUldForSegmentPk(uLDForSegmentPK);
		 doReturn(uldForSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(ULDForSegment.class), any(ULDForSegmentPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(assignedFlightSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(AssignedFlightSegment.class), any(AssignedFlightSegmentPK.class));
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "N");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromFlightToFlight(destAssignedContainers, toFlightVO,1);
	}
	@Test
	public void importMailProvisionalRateData_forFlightToFlightWithImportNoAuditVO() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = null;
		ULDForSegmentPK uLDForSegmentPK = new ULDForSegmentPK();
		uLDForSegmentPK.setUldNumber("AKE1234AV");
		uldForSegmentEntity.setUldForSegmentPk(uLDForSegmentPK);
		 doReturn(uldForSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(ULDForSegment.class), any(ULDForSegmentPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(assignedFlightSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(AssignedFlightSegment.class), any(AssignedFlightSegmentPK.class));
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromFlightToFlight(destAssignedContainers, toFlightVO,1);
	}
	@Test
	public void importMailProvisionalRateData_forFlightToFlightWithEmptyAuditVO() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		ULDForSegmentPK uLDForSegmentPK = new ULDForSegmentPK();
		uLDForSegmentPK.setUldNumber("AKE1234AV");
		uldForSegmentEntity.setUldForSegmentPk(uLDForSegmentPK);
		 doReturn(uldForSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(ULDForSegment.class), any(ULDForSegmentPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		HashMap<String, String> systemParameterMap = new HashMap();
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(assignedFlightSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(AssignedFlightSegment.class), any(AssignedFlightSegmentPK.class));
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromFlightToFlight(destAssignedContainers, toFlightVO,1);
	}
	@Test(expected=SystemException.class)
	public void importMailProvisionalRateData_forFlightToFlightThrowsException() throws SystemException, FinderException, ProxyException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SharedProxyException{
		Collection<ContainerVO> destAssignedContainers = new ArrayList<>();
		ContainerVO assignedContainerVO = new ContainerVO();
		assignedContainerVO.setContainerDestChanged(true);
		assignedContainerVO.setAssignedUser("ICOADMIN");
		assignedContainerVO.setLastUpdateUser(null);
		assignedContainerVO.setActualWeight(new Measure(UnitConstants.MAIL_WGT, 300));
		assignedContainerVO.setContentId("1");
		assignedContainerVO.setUldTobarrow(false);
		assignedContainerVO.setBarrowToUld(false);
		assignedContainerVO.setOffload(false);
		assignedContainerVO.setPou("CDG");
		assignedContainerVO.setContainerNumber("AKE12345AV");
		assignedContainerVO.setTransferAudit(true);
		assignedContainerVO.setUldReferenceNo(1);
		assignedContainerVO.setAcceptanceFlag("Y");
		assignedContainerVO.setType("U");
		assignedContainerVO.setFinalDestination("FRA");
		assignedContainerVO.setCarrierCode("AV");
		destAssignedContainers.add(assignedContainerVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		toFlightVO.setFlightSequenceNumber(1);
		toFlightVO.setPou(null);
		ContainerPK containerPK = new ContainerPK();
		containerPK.setAssignmentPort("CDG");
		containerPK.setFlightNumber("-1");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeightDisplayUnit("K");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("B");
		containerEntity.setArrivedStatus("Y");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setOperationalFlag("I");
		mailbagVO.setPaCode("US101");
		mailbagVOs.add(mailbagVO);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		ULDForSegmentPK uLDForSegmentPK = new ULDForSegmentPK();
		uLDForSegmentPK.setUldNumber("AKE1234AV");
		uldForSegmentEntity.setUldForSegmentPk(uLDForSegmentPK);
		 doReturn(uldForSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(ULDForSegment.class), any(ULDForSegmentPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn("CDG").when(logonAttributes).getStationCode();
		String companyCode = "IBS";
		String airportCode = "CDG";
		Collection<String> parCodes =new ArrayList<>();
		parCodes.add("operations.flthandling.isonlinehandledairport");
		doReturn(new HashMap()).when(sharedAreaProxy).findAirportParametersByCode(companyCode, airportCode, parCodes);
    	ULDValidationVO uldValidationVO = new ULDValidationVO();
    	uldValidationVO.setUldNumber("AKE12345AV");
		doReturn(uldValidationVO).when(sharedULDProxy).validateULD(getCompanyCode(),uldValidationVO.getUldNumber());
		doReturn(assignedFlightSegmentEntity).when(PersistenceController.getEntityManager()).find(eq(AssignedFlightSegment.class), any(AssignedFlightSegmentPK.class));
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(OperationalFlightVO.class), any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		HashMap<String, String> systemParameterMap = new HashMap();
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doThrow(ProxyException.class).when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignContainerFromFlightToFlight(destAssignedContainers, toFlightVO,1);
	}
	@Test
	public void reassignMailFromDestnToDestn() throws Exception{
		ContainerVO containerVO = new ContainerVO();
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		containerVO.setPou("CDG");
		containerVO.setFlightNumber("-1");
		containerVO.setFlightSequenceNumber(-1);
		containerVO.setCompanyCode(getCompanyCode());
		containerVO.setAssignedPort("CDG");
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setCompanyCode(getCompanyCode());
		mailbagVO.setMailbagId("FRCDGADEFRAAACA10300002001200");
		mailbagVO.setScannedDate(new LocalDate(LocalDate.NO_STATION,Location.NONE,true));
		mailbagVOs.add(mailbagVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		toFlightVO.setFlightSequenceNumber(-1);
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		containerEntity.setContentId("MO");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		String sysParForInvetory = "mailtracking.defaults.inventoryenabled";
		Map<String, String> parameterMap= new HashMap<>();
		parameterMap.put(sysParForInvetory, MailConstantsVO.FLAG_NO);
		long mailSequenceNumber = 1000;
		Mailbag mailbag = new Mailbag();
		MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(getCompanyCode());
		mailbagPK.setMailSequenceNumber(mailSequenceNumber);
		mailbag.setMailbagPK(mailbagPK);
		Collection<RateAuditVO> rateAuditVOs1 = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs1.add(auditVO);
		doReturn(parameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(mailSequenceNumber).when(dao).findMailSequenceNumber(any(String.class),any(String.class));
		doReturn(mailbag).when(PersistenceController.getEntityManager()).find(mailbagBean.getClass(), mailbagPK);
		doReturn(rateAuditVOs1).when(mailController).createRateAuditVOs(any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		HashMap<String, String> systemParameterMap = new HashMap();
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignMailFromDestnToDestn(mailbagVOs, containerVO);
	}
	@Test
	public void reassignMailFromDestnToDestn_WithNoImportEnabled() throws Exception{
		ContainerVO containerVO = new ContainerVO();
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		containerVO.setPou("CDG");
		containerVO.setFlightNumber("-1");
		containerVO.setFlightSequenceNumber(-1);
		containerVO.setCompanyCode(getCompanyCode());
		containerVO.setAssignedPort("CDG");
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setCompanyCode(getCompanyCode());
		mailbagVO.setMailbagId("FRCDGADEFRAAACA10300002001200");
		mailbagVO.setScannedDate(new LocalDate(LocalDate.NO_STATION,Location.NONE,true));
		mailbagVOs.add(mailbagVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		toFlightVO.setFlightSequenceNumber(-1);
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		containerEntity.setContentId("MO");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		String sysParForInvetory = "mailtracking.defaults.inventoryenabled";
		Map<String, String> parameterMap= new HashMap<>();
		parameterMap.put(sysParForInvetory, MailConstantsVO.FLAG_NO);
		long mailSequenceNumber = 1000;
		Mailbag mailbag = new Mailbag();
		MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(getCompanyCode());
		mailbagPK.setMailSequenceNumber(mailSequenceNumber);
		mailbag.setMailbagPK(mailbagPK);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		doReturn(parameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(mailSequenceNumber).when(dao).findMailSequenceNumber(any(String.class),any(String.class));
		doReturn(mailbag).when(PersistenceController.getEntityManager()).find(mailbagBean.getClass(), mailbagPK);
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		HashMap<String, String> systemParameterMap = new HashMap();
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "N");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignMailFromDestnToDestn(mailbagVOs, containerVO);
	}
	@Test
	public void reassignMailFromDestnToDestnWithEmptyAuditVO() throws Exception{
		ContainerVO containerVO = new ContainerVO();
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		containerVO.setPou("CDG");
		containerVO.setFlightNumber("-1");
		containerVO.setFlightSequenceNumber(-1);
		containerVO.setCompanyCode(getCompanyCode());
		containerVO.setAssignedPort("CDG");
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setCompanyCode(getCompanyCode());
		mailbagVO.setMailbagId("FRCDGADEFRAAACA10300002001200");
		mailbagVO.setScannedDate(new LocalDate(LocalDate.NO_STATION,Location.NONE,true));
		mailbagVOs.add(mailbagVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		toFlightVO.setFlightSequenceNumber(-1);
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		containerEntity.setContentId("MO");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		String sysParForInvetory = "mailtracking.defaults.inventoryenabled";
		Map<String, String> parameterMap= new HashMap<>();
		parameterMap.put(sysParForInvetory, MailConstantsVO.FLAG_NO);
		long mailSequenceNumber = 1000;
		Mailbag mailbag = new Mailbag();
		MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(getCompanyCode());
		mailbagPK.setMailSequenceNumber(mailSequenceNumber);
		mailbag.setMailbagPK(mailbagPK);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		doReturn(parameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(mailSequenceNumber).when(dao).findMailSequenceNumber(any(String.class),any(String.class));
		doReturn(mailbag).when(PersistenceController.getEntityManager()).find(mailbagBean.getClass(), mailbagPK);
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		HashMap<String, String> systemParameterMap = new HashMap();
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignMailFromDestnToDestn(mailbagVOs, containerVO);
	}
	@Test
	public void reassignMailFromDestnToDestn_WithNoAuditVO() throws Exception{
		ContainerVO containerVO = new ContainerVO();
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		containerVO.setPou("CDG");
		containerVO.setFlightNumber("-1");
		containerVO.setFlightSequenceNumber(-1);
		containerVO.setCompanyCode(getCompanyCode());
		containerVO.setAssignedPort("CDG");
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setCompanyCode(getCompanyCode());
		mailbagVO.setMailbagId("FRCDGADEFRAAACA10300002001200");
		mailbagVO.setScannedDate(new LocalDate(LocalDate.NO_STATION,Location.NONE,true));
		mailbagVOs.add(mailbagVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		toFlightVO.setFlightSequenceNumber(-1);
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		containerEntity.setContentId("MO");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		String sysParForInvetory = "mailtracking.defaults.inventoryenabled";
		Map<String, String> parameterMap= new HashMap<>();
		parameterMap.put(sysParForInvetory, MailConstantsVO.FLAG_NO);
		long mailSequenceNumber = 1000;
		Mailbag mailbag = new Mailbag();
		MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(getCompanyCode());
		mailbagPK.setMailSequenceNumber(mailSequenceNumber);
		mailbag.setMailbagPK(mailbagPK);
		Collection<RateAuditVO> rateAuditVOs = null;
		doReturn(parameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(mailSequenceNumber).when(dao).findMailSequenceNumber(any(String.class),any(String.class));
		doReturn(mailbag).when(PersistenceController.getEntityManager()).find(mailbagBean.getClass(), mailbagPK);
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		HashMap<String, String> systemParameterMap = new HashMap();
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doNothing().when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignMailFromDestnToDestn(mailbagVOs, containerVO);
	}
	@Test(expected=SystemException.class)
	public void reassignMailFromDestnToDestn_throwSystemException() throws Exception{
		ContainerVO containerVO = new ContainerVO();
		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		containerVO.setPou("CDG");
		containerVO.setFlightNumber("-1");
		containerVO.setFlightSequenceNumber(-1);
		containerVO.setCompanyCode(getCompanyCode());
		containerVO.setAssignedPort("CDG");
		MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setCompanyCode(getCompanyCode());
		mailbagVO.setMailbagId("FRCDGADEFRAAACA10300002001200");
		mailbagVO.setScannedDate(new LocalDate(LocalDate.NO_STATION,Location.NONE,true));
		mailbagVOs.add(mailbagVO);
		OperationalFlightVO toFlightVO = new OperationalFlightVO() ;
		ContainerPK containerPK = new ContainerPK();
		toFlightVO.setFlightSequenceNumber(-1);
		containerPK.setAssignmentPort("CDG");
		containerEntity.setAssignedOn(Calendar.getInstance());
		containerEntity.setActualWeight(10);
		containerEntity.setActualWeightDisplayUnit("kg");
		containerEntity.setContainerPK(containerPK);
		containerEntity.setContainerType("U");
		containerEntity.setContentId("MO");
		ULDAtAirport uldAtAirport = new ULDAtAirport();
		ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
		uldAtAirportPK.setCarrierId(1001);
		uldAtAirportPK.setCompanyCode(getCompanyCode());
		uldAtAirportPK.setAirportCode("CDG");
		uldAtAirportPK.setUldNumber("AKE1234AV");
		uldAtAirport.setUldAtAirportPK(uldAtAirportPK);
		String sysParForInvetory = "mailtracking.defaults.inventoryenabled";
		Map<String, String> parameterMap= new HashMap<>();
		parameterMap.put(sysParForInvetory, MailConstantsVO.FLAG_NO);
		long mailSequenceNumber = 1000;
		Mailbag mailbag = new Mailbag();
		MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(getCompanyCode());
		mailbagPK.setMailSequenceNumber(mailSequenceNumber);
		mailbag.setMailbagPK(mailbagPK);
		Collection<RateAuditVO> rateAuditVOs = new ArrayList();
		Collection<RateAuditDetailsVO> rateAuditDetailsVOs = new ArrayList();
		RateAuditVO auditVO = new RateAuditVO();
		auditVO.setCompanyCode("IBS");
		auditVO.setMailSequenceNumber(234567);
		RateAuditDetailsVO auditDetail = new RateAuditDetailsVO();
		auditDetail.setSource("TRA");
		rateAuditDetailsVOs.add(auditDetail);
		auditVO.setRateAuditDetails(rateAuditDetailsVOs);
		rateAuditVOs.add(auditVO);
		doReturn(parameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doReturn(containerEntity).when(PersistenceController.getEntityManager()).find(eq(Container.class), any(ContainerPK.class));
		doReturn(uldAtAirport).when(PersistenceController.getEntityManager()).find(eq(ULDAtAirport.class), any(ULDAtAirportPK.class));
		doReturn(mailSequenceNumber).when(dao).findMailSequenceNumber(any(String.class),any(String.class));
		doReturn(mailbag).when(PersistenceController.getEntityManager()).find(mailbagBean.getClass(), mailbagPK);
		doReturn(rateAuditVOs).when(mailController).createRateAuditVOs(any(ContainerVO.class), anyCollectionOf(MailbagVO.class), any(String.class), any(Boolean.class));
		HashMap<String, String> systemParameterMap = new HashMap();
		systemParameterMap.put("mailtracking.defaults.importsmailstomra", "Y");
		doReturn(systemParameterMap).when(sharedDefaultsProxy).findSystemParameterByCodes(anyCollectionOf(String.class));
		doThrow(ProxyException.class).when(mailOperationsMRAProxy).importMailProvisionalRateData(anyCollectionOf(RateAuditVO.class));
		reassignControllerSpy.reassignMailFromDestnToDestn(mailbagVOs, containerVO);
	}
}
