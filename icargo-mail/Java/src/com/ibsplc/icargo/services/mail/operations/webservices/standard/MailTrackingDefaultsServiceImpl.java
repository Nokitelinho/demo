
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.ibsplc.icargo.services.mail.operations.webservices.standard;



import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import com.ibsplc.icargo.business.flight.operation.vo.FlightFilterVO;
import com.ibsplc.icargo.business.flight.operation.vo.FlightValidationVO;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailDetails;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailDetailsFilterType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailDetailsReponseType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailErrorDetailsType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailHistoryDetails;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailHistoryDetailsReponseType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailHistoryDetailsRequestType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailHistoryType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailOperationsDetailsRequestType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailSaveDetailsRequestType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailSaveDetailsResponseType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailStatusReponseType;
import com.ibsplc.icargo.business.mail.operations.types.standard.MailStatusRequestType;
import com.ibsplc.icargo.business.mail.operations.types.standard.DespatchDetailsType;
import com.ibsplc.icargo.business.mail.operations.types.standard.FindDespatchDetailsRequestType;
import com.ibsplc.icargo.business.mail.operations.types.standard.FindDespatchDetailsResponseType;
import com.ibsplc.icargo.business.mail.operations.vo.DespatchDetailsVO;
import com.ibsplc.icargo.business.mail.operations.vo.MailConstantsVO;
import com.ibsplc.icargo.business.mail.operations.vo.MailUploadVO;
import com.ibsplc.icargo.business.mail.operations.vo.MailWebserviceErrorVO;
import com.ibsplc.icargo.business.mail.operations.vo.MailWebserviceVO;
import com.ibsplc.icargo.business.mail.operations.vo.MailbagEnquiryFilterVO;
import com.ibsplc.icargo.business.mail.operations.vo.MailbagHistoryVO;
import com.ibsplc.icargo.business.shared.defaults.onetime.vo.OneTimeVO;
import com.ibsplc.icargo.business.xaddons.lh.mail.operations.vo.DespatchDetailsFilterVO;
import com.ibsplc.icargo.framework.services.jaxws.endpoint.WebServiceEndPoint;
import com.ibsplc.icargo.framework.services.jaxws.endpoint.exception.WSBusinessException;
import com.ibsplc.icargo.framework.util.time.LocalDate;
import com.ibsplc.icargo.framework.util.time.Location;
import com.ibsplc.xibase.client.framework.delegate.Module;
import com.ibsplc.xibase.client.framework.delegate.SubModule;
import com.ibsplc.xibase.server.framework.exceptions.SystemException;
import com.ibsplc.xibase.server.framework.vo.ErrorVO;
import com.ibsplc.xibase.util.log.Log;
import com.ibsplc.xibase.util.log.factory.LogFactory;

/**
 * This class was generated by Apache CXF 2.1
 * Wed Oct 21 19:09:25 IST 2009
 * Generated source version: 2.1
 *
 */

@javax.jws.WebService(name = "MailOperationsService",
                      serviceName = "MailOperationsService",
                      portName = "MailOperationsService",
                      targetNamespace = "http://www.ibsplc.com/icargo/services/MailOperationsService/standard/2012/12/12_01",
                      wsdlLocation = "file:wsdl/mail/operations/standard/MailTrackingDefaultsService.wsdl",
                      endpointInterface = "com.ibsplc.icargo.services.mail.operations.webservices.standard.MailOperationsService")

@Module("mail")
@SubModule("operations")
public class MailTrackingDefaultsServiceImpl  extends WebServiceEndPoint implements MailOperationsService {


	private static final Logger LOG = Logger.getLogger(MailTrackingDefaultsServiceImpl.class.getName());
	private Log log = LogFactory.getLogger("MAILTRACKING_IMPL");
	private static final String MODULE = "MailTrackingDefaultsServiceImpl";
	private static final String SUCCESS = "S";
	private static final String FAILURE = "F";
	private static final String MAIl_STATUS="mailtracking.defaults.mailstatus";
	private static final String EMPTY_STRING = "";
	
	public MailTrackingDefaultsServiceImpl(){
		this.retryCount=3;
	}

	public MailSaveDetailsResponseType saveMailBagDetails(
			MailSaveDetailsRequestType saveMailDetailsRequestType) throws ServiceFault,
			InvalidRequestFault {
		if(saveMailDetailsRequestType.getCompanyCode()==null ||
				saveMailDetailsRequestType.getCompanyCode().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field Company Code not present");
			}
		if(saveMailDetailsRequestType.getHhtVersion()==null ||
				saveMailDetailsRequestType.getHhtVersion().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field HHT Version not present");
			}
		if(saveMailDetailsRequestType.getScanningPort()==null ||
				saveMailDetailsRequestType.getScanningPort().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field ScanningPort not present");
			}
		if(saveMailDetailsRequestType.getMessagePartId()==0)
			{
			throw new InvalidRequestFault("Mandatory Field MessagePartId not present");
			}
		ArrayList<MailWebserviceVO> mailBags = populateWebserviceVOFromSaveMailDetailsRequestType
		(saveMailDetailsRequestType);
		Collection<MailWebserviceErrorVO> errors = new ArrayList<MailWebserviceErrorVO>();
		Collection<MailWebserviceErrorVO> finalErrors = new ArrayList<MailWebserviceErrorVO>();
		Collection<MailWebserviceVO> mails = null;
		if(mailBags!=null && mailBags.size()>0){
		Collections.sort(mailBags, new EventOrderComparator());
		try {
			validateFlights(mailBags);   
		} catch (SystemException e1) {
			e1.getMessage();
		}
		
			for(MailWebserviceVO webVo : mailBags){
		try{
					mails = new ArrayList<MailWebserviceVO>();
					ArrayList<MailUploadVO> mailscanVos;
					mails.add(webVo);
					mailscanVos=despatchRequest("performMailOperationForGHA", mails,webVo.getScanningPort());
					if (mailscanVos!=null &&! mailscanVos.isEmpty()){
					for(MailUploadVO MailUploadVO:mailscanVos){
						despatchRequest("performErrorStampingForFoundMailWebServices", MailUploadVO,webVo.getScanningPort());	
					}
					}

		}
		//Modified as part of code quality work by A-7531 starts
		catch(WSBusinessException e) {
			e.getMessage();
		}
		//Modified as part of code quality work by A-7531 ends	
		catch (SystemException e) {
					for(ErrorVO errVo : e.getErrors()){
						MailWebserviceErrorVO errorVo = new MailWebserviceErrorVO();
						if(webVo.getMailBagId()!=null && 
								webVo.getMailBagId().trim().length()>0){
						errorVo.setMailBagId(webVo.getMailBagId());
						}
						else{
						errorVo.setMailBagId(webVo.getContainerNumber());	
						}						
						errorVo.setErrorCode(errVo.getErrorCode());
						if (!validateFoundCasesErrorFormat(errVo.getErrorCode())){
						finalErrors.add(errorVo);
						}
					}
				}
			}
		}
		return generateErrorsForperformMailOperationForGHA
		(finalErrors,saveMailDetailsRequestType);
		






	}

	/**
	 * @author A-1885
	 * @return
	 */
	private ArrayList<MailWebserviceVO> populateWebserviceVOFromSaveMailDetailsRequestType
	(MailSaveDetailsRequestType saveMailDetailsRequestType){
		ArrayList<MailWebserviceVO> mailBags = new ArrayList<MailWebserviceVO>();
		MailWebserviceVO webServiceVO = null;
		if(saveMailDetailsRequestType.getMailDetails()!=null){
			for(MailOperationsDetailsRequestType reqType :saveMailDetailsRequestType.getMailDetails() ){
				webServiceVO = new MailWebserviceVO();
				webServiceVO.setCompanyCode(saveMailDetailsRequestType.getCompanyCode());
				webServiceVO.setHhtVersion(saveMailDetailsRequestType.getHhtVersion());
				webServiceVO.setScanningPort(saveMailDetailsRequestType.getScanningPort());
				webServiceVO.setMessagePartId(saveMailDetailsRequestType.getMessagePartId());
				webServiceVO.setProduct(reqType.getProduct());
				webServiceVO.setScanType(reqType.getScanType());
				webServiceVO.setCarrierCode(reqType.getCarrierCode());
				//if(reqType.getFlightNumber()!=null && 
				//		reqType.getFlightNumber().trim().length()==0){
				//	webServiceVO.setFlightNumber(null);
				//}
				//else{
				webServiceVO.setFlightNumber(reqType.getFlightNumber());
				//}
				if(reqType.getFlightDate()!=null && reqType.getFlightDate().trim().length()>0){
					LocalDate flightDate = new LocalDate(webServiceVO.getScanningPort(),Location.ARP,
							false);
					webServiceVO.setFlightDate(flightDate.setDate(reqType.getFlightDate()));
				}
				if(reqType.getContainerPou()!=null && 
						reqType.getContainerPou().trim().length()==0){
					webServiceVO.setContainerPou(null);
				}
				else{
				webServiceVO.setContainerPou(reqType.getContainerPou());
				}
				if(reqType.getContainerNumber()!=null && 
						reqType.getContainerNumber().trim().length()==0){
					webServiceVO.setContainerNumber(null);
				}
				else{
				webServiceVO.setContainerNumber(reqType.getContainerNumber());
				}
				if(reqType.getContainerType()!=null && 
						reqType.getContainerType().trim().length()==0){
					webServiceVO.setContainerType(null);
				}
				else{
				webServiceVO.setContainerType(reqType.getContainerType());
				}
				if(reqType.getContainerDestination()!=null && 
						reqType.getContainerDestination().trim().length()==0){
					webServiceVO.setContainerDestination(null);
				}
				else{
				webServiceVO.setContainerDestination(reqType.getContainerDestination());
				}
				webServiceVO.setContainerPol(reqType.getContainerPol());
				webServiceVO.setRemarks(reqType.getRemarks());
				//if(reqType.getMailTag()!=null && reqType.getMailTag().trim().length()==0){
				//	webServiceVO.setMailBagId(null);
				//}
				//else{
				webServiceVO.setMailBagId(reqType.getMailTag());
				//}
				if(reqType.getDamageCode()!=null && 
						reqType.getDamageCode().trim().length()==0){
					webServiceVO.setDamageCode(null);
				}
				else{
				webServiceVO.setDamageCode(reqType.getDamageCode());
				}
				webServiceVO.setDamageRemarks(reqType.getDamageRemarks());
				if(reqType.getOffloadReason()!=null && 
						reqType.getOffloadReason().trim().length()==0){
					webServiceVO.setOffloadReason(null);
				}
				else{
				webServiceVO.setOffloadReason(reqType.getOffloadReason());
				}
				if(reqType.getReturnCode()!=null && 
						reqType.getReturnCode().trim().length()==0){
					webServiceVO.setReturnCode(null);
				}
				else{
				webServiceVO.setReturnCode(reqType.getReturnCode());
				}
				if(reqType.getToContainerType()!=null && 
						reqType.getToContainerType().trim().length()==0){
					webServiceVO.setToContainerType(null);
				}
				else{
				webServiceVO.setToContainerType(reqType.getToContainerType());
				}
				if(reqType.getToContainer()!=null && reqType.getToContainer().trim().length()==0){
					webServiceVO.setToContainer(null);
				}
				else{
				webServiceVO.setToContainer(reqType.getToContainer());
				}
				if(reqType.getToCarrierCode()!=null && 
						reqType.getToCarrierCode().trim().length()==0){
					webServiceVO.setToCarrierCod(null);
				}
				else{
				webServiceVO.setToCarrierCod(reqType.getToCarrierCode());
				}
				if(reqType.getToFlightNumber()!=null && 
						reqType.getToFlightNumber().trim().length()==0){
					webServiceVO.setToFlightNumber(null);
				}
				else{
				webServiceVO.setToFlightNumber(reqType.getToFlightNumber());
				}
				if(reqType.getToFlightDate()!=null && reqType.getToFlightDate().trim().length()>0){
					LocalDate flightDate = new LocalDate(webServiceVO.getScanningPort(),Location.ARP,
							false);
					webServiceVO.setToFlightDate(flightDate.setDate(reqType.getToFlightDate()));
				}
				if(reqType.getToContainerPOU()!=null && 
						reqType.getToContainerPOU().trim().length()==0){
					webServiceVO.setToContainerPou(null);
				}
				else{
				webServiceVO.setToContainerPou(reqType.getToContainerPOU());
				}
				if(reqType.getToContainerDestination()!=null && 
						reqType.getToContainerDestination().trim().length()==0){
					webServiceVO.setToContainerDestination(null);
				}
				else{
				webServiceVO.setToContainerDestination(reqType.getToContainerDestination());
				}
				if(reqType.getConsignmentDocumentNumber()!=null && 
						reqType.getConsignmentDocumentNumber().trim().length()==0){
					webServiceVO.setConsignmentDocNumber(null);
				}
				else{
				webServiceVO.setConsignmentDocNumber(reqType.getConsignmentDocumentNumber());
				}
				webServiceVO.setSerialNumber(Integer.parseInt(reqType.getSerialNumber()));
				if(MailWebserviceVO.FLAG_YES.equals(reqType.getIsPABuilt()))
					{
					webServiceVO.setPAbuilt(true);
					}
				if(MailWebserviceVO.FLAG_YES.equals(reqType.getIsDelivered()))
					{
					webServiceVO.setDelivered(true);
					}
				webServiceVO.setUserName(reqType.getUserName());
				if(reqType.getScanDateTime()!=null && reqType.getScanDateTime().trim().length()>0){
					//for testing only. Airport code is required.
					LocalDate scanDate = new LocalDate(webServiceVO.getScanningPort(),Location.ARP,
							false);
					//LocalDate scanDate = new LocalDate(LocalDate.NO_STATION,Location.NONE,false);
					webServiceVO.setScanDateTime(scanDate.setDateAndTime(reqType.getScanDateTime()));
				}
				if((reqType.getUldFullIndicator()!=null && 
						reqType.getUldFullIndicator().trim().length()>0))
				{
					webServiceVO.setUldFullIndicator(reqType.getUldFullIndicator());
				}
				mailBags.add(webServiceVO);
			}
		}

		return mailBags;

	}

	/**
	 * @author A-1885
	 * @param errors
	 * @param MailSaveDetailsResponseType
	 * @return
	 */
	private MailSaveDetailsResponseType generateErrorsForperformMailOperationForGHA
					(Collection<MailWebserviceErrorVO> errors,MailSaveDetailsRequestType
							saveMailDetailsRequestType ){
		MailSaveDetailsResponseType responseType = new MailSaveDetailsResponseType();
		responseType.setCompanyCode(saveMailDetailsRequestType.getCompanyCode());
		responseType.setHhtVersion(saveMailDetailsRequestType.getHhtVersion());
		responseType.setScanningPort(saveMailDetailsRequestType.getScanningPort());
		responseType.setMessagePartId(saveMailDetailsRequestType.getMessagePartId());
		responseType.setErrorFlag(SUCCESS);
		if(errors!=null && errors.size()>0){
			responseType.setErrorFlag(FAILURE);
			MailErrorDetailsType errorType = null;
			Collection<MailErrorDetailsType> errorDetails = new ArrayList<MailErrorDetailsType>();
			for(MailWebserviceErrorVO errorVo : errors){
				errorType = new MailErrorDetailsType();
				errorType.setErrorCode(errorVo.getErrorCode());
				errorType.setMailTagId(errorVo.getMailBagId());
				errorDetails.add(errorType);
			}
			//Initialize List

			responseType.getMailResponseDetails().addAll(errorDetails);
		}
		return responseType;
	}
	/**
	 * @author A-1885
	 * @author A-1885
	 *
	 */
	class EventOrderComparator implements Comparator {
		public int compare(Object arg0, Object arg1) {
			MailWebserviceVO firstEvent = (MailWebserviceVO) arg0;
			MailWebserviceVO secondEvent = (MailWebserviceVO) arg1;				
				return firstEvent.getSerialNumber()-
				secondEvent.getSerialNumber();
	}
	}

//Added by A-6991 for CR ICRD-208718 Starts
	/**
	 * 
	 *	Overriding Method	:@see com.ibsplc.icargo.services.mail.operations.webservices.standard.MailOperationsService#findMailBagHistoryDetails(com.ibsplc.icargo.business.mail.operations.types.standard.MailHistoryDetailsRequestType)
	 *	Added by 			:A-6991 on 17-Jul-2017
	 * 	Used for 	        :ICRD-208718 
	 *	Parameters	        :@param mailHistoryDetailsRequestType
	 *	Parameters	        :@return
	 *	Parameters	        :@throws ServiceFault
	 *	Parameters	        :@throws InvalidRequestFault
	 */
	public MailHistoryDetailsReponseType findMailBagHistoryDetails(MailHistoryDetailsRequestType mailHistoryDetailsRequestType) throws ServiceFault,
	InvalidRequestFault{
		log.entering("MailTrackingDefaultsServiceImpl", "findMailBagHistoryDetails");
		
		if(mailHistoryDetailsRequestType.getCompanyCode()==null ||
				mailHistoryDetailsRequestType.getCompanyCode().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field Company Code not present");
			}
		if(mailHistoryDetailsRequestType.getScanningPort()==null ||
				mailHistoryDetailsRequestType.getScanningPort().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field ScanningPort not present");
			}
		if(mailHistoryDetailsRequestType.getMessagePartId()==0)
			{
			throw new InvalidRequestFault("Mandatory Field MessagePartId not present");
			}
		if(mailHistoryDetailsRequestType.getIsLatestTansaction()==null ||
				mailHistoryDetailsRequestType.getIsLatestTansaction().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field Latest Operation Check not present");
			}
		if(mailHistoryDetailsRequestType.getMailtag()==null ||
				mailHistoryDetailsRequestType.getMailtag().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field Mailtag not present");
			}

		Collection<MailWebserviceErrorVO> finalErrors = new ArrayList<MailWebserviceErrorVO>();
		Collection<MailbagHistoryVO> mailbagHistoryVOs = null;
		long mailSequenceNumber=01;

		try{
				
			mailbagHistoryVOs=despatchRequest("findMailbagHistories", mailHistoryDetailsRequestType.getCompanyCode(),mailHistoryDetailsRequestType.getMailtag(),mailSequenceNumber);
			
			if(mailbagHistoryVOs !=null && mailbagHistoryVOs.isEmpty()){
				MailWebserviceErrorVO errorVo = new MailWebserviceErrorVO();
				errorVo.setErrorCode("mailtracking.defaults.err.nodatafound");
				finalErrors.add(errorVo);
			}
		
			
		}
		catch(WSBusinessException e) {
		  log.log(Log.FINE, e.getMessage());	
		}
		catch (SystemException e) {
					for(ErrorVO errVo : e.getErrors()){
						MailWebserviceErrorVO errorVo = new MailWebserviceErrorVO();
						if(mailHistoryDetailsRequestType.getMailtag()!=null && 
								mailHistoryDetailsRequestType.getMailtag().trim().length()>0){
						errorVo.setMailBagId(mailHistoryDetailsRequestType.getMailtag());
						}
						else{
						errorVo.setMailBagId("");	
						}						
						errorVo.setErrorCode(errVo.getErrorCode());
						finalErrors.add(errorVo);
					}
				}
		return generateErrorsForperformMailHistoryDetailsReponse
				(finalErrors,mailbagHistoryVOs,mailHistoryDetailsRequestType);
			
	}	
	
	
	private MailHistoryDetailsReponseType generateErrorsForperformMailHistoryDetailsReponse
		(Collection<MailWebserviceErrorVO> errors,Collection<MailbagHistoryVO>
				mailbagHistoryVOs,MailHistoryDetailsRequestType mailHistoryDetailsRequestType){
		log.entering("MailTrackingDefaultsServiceImpl", "generateErrorsForperformMailHistoryDetailsReponse");
			
			MailHistoryDetailsReponseType responseType = new MailHistoryDetailsReponseType();
			MailHistoryType mailHistoryType= null;
			MailHistoryDetails mailHistoryDetails =null;
			

			responseType.setCompanyCode(mailHistoryDetailsRequestType.getCompanyCode());
			responseType.setScanningPort(mailHistoryDetailsRequestType.getScanningPort());
			responseType.setMessagePartId(mailHistoryDetailsRequestType.getMessagePartId());
			responseType.setErrorFlag(SUCCESS);
			responseType.setMailtag(mailHistoryDetailsRequestType.getMailtag());
			if(errors!=null && errors.size()>0){
				for(MailWebserviceErrorVO errorVO:errors){
				responseType.setErrorFlag(FAILURE);
				responseType.setErrorCode(errorVO.getErrorCode());
				}
			}else{
				responseType.setErrorCode(EMPTY_STRING);
			}
		
			if(!mailbagHistoryVOs.isEmpty()){
				Map<String, Collection<OneTimeVO>> oneTimes = null;
				Collection<OneTimeVO> oneTimeVOs=null;
				String oneTimeCode=MAIl_STATUS;
		
				try {
		
					 oneTimes = despatchRequest("findOneTimeDescription", mailHistoryDetailsRequestType.getCompanyCode(),oneTimeCode);
					log.log(Log.FINEST, "\n hash map******************", oneTimes);

				} 
				catch (SystemException e) {
					log.log(Log.FINE, e.getMessage());
				}
				catch(WSBusinessException e) {
					log.log(Log.FINE, e.getMessage());	
				}
				oneTimeVOs=oneTimes.get(MAIl_STATUS);
				if("Y".equalsIgnoreCase(mailHistoryDetailsRequestType.getIsLatestTansaction())){
				
				 	
				 MailbagHistoryVO   latestMailbagHistVO =new MailbagHistoryVO();
				  Collection<MailbagHistoryVO> latestMailbagHistVOs=new ArrayList<MailbagHistoryVO>(); 
				 
				 for(MailbagHistoryVO mailbagHistoryVO:mailbagHistoryVOs){
					 
                   
					 if(!(mailbagHistoryVO.getMailStatus().matches(".*\\d.*"))){

						 latestMailbagHistVOs.add(mailbagHistoryVO);	
				        }
						
				 }
				 for(MailbagHistoryVO templatestMailbagHistVO :latestMailbagHistVOs){
				          String transactionType=null;
					      for(OneTimeVO mailStatus:oneTimeVOs){
						 
							if(mailStatus.getFieldValue().equalsIgnoreCase(templatestMailbagHistVO.getMailStatus())){
								 transactionType=mailStatus.getFieldDescription().toUpperCase();
							}
						
						 }
					      latestMailbagHistVO=templatestMailbagHistVO;
						 if(transactionType !=null){
						 latestMailbagHistVO.setMailStatus(transactionType); 
					 }
				 }
					
			
			mailHistoryType = new MailHistoryType();
			if(latestMailbagHistVO.getScannedPort() !=null && latestMailbagHistVO.getScannedPort().trim().length()>0){
			mailHistoryType.setAirportCode(latestMailbagHistVO.getScannedPort());
			}
			else{
				mailHistoryType.setAirportCode(EMPTY_STRING);
			}
			if(latestMailbagHistVO.getCarrierCode() !=null && latestMailbagHistVO.getCarrierCode().trim().length()>0){
			mailHistoryType.setCarrierCode(latestMailbagHistVO.getCarrierCode());
			}
			else{
			mailHistoryType.setCarrierCode(EMPTY_STRING);
			}
			if(latestMailbagHistVO.getContainerNumber() !=null && latestMailbagHistVO.getContainerNumber().trim().length()>0){
			mailHistoryType.setContainer(latestMailbagHistVO.getContainerNumber());
			}
			else{
			mailHistoryType.setContainer(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getPou() !=null && latestMailbagHistVO.getPou().trim().length()>0){
			mailHistoryType.setPou(latestMailbagHistVO.getPou());
			}
			else{
			mailHistoryType.setPou(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getFlightDate() !=null ){
			mailHistoryType.setFlightDate(latestMailbagHistVO.getFlightDate().toDisplayFormat("dd-MMM-yyyy").toUpperCase());
			}
			else{
			mailHistoryType.setFlightDate(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getFlightNumber() != null && !("-1".equalsIgnoreCase(latestMailbagHistVO.getFlightNumber())) 
					&& latestMailbagHistVO.getFlightNumber().trim().length()>0){
			mailHistoryType.setFlightNumber(latestMailbagHistVO.getFlightNumber());
			}
			else{
			mailHistoryType.setFlightNumber(EMPTY_STRING);
			}
			if(latestMailbagHistVO.getHistorySequenceNumber() > 0){
			mailHistoryType.setSerialno(latestMailbagHistVO.getHistorySequenceNumber());
			}
			if(latestMailbagHistVO.getScanDate() !=null ){
			mailHistoryType.setTransactionDateTime(latestMailbagHistVO.getScanDate().toDisplayFormat("dd-MMM-yyyy HH:mm:SS").toUpperCase());
			}
			else{
			mailHistoryType.setTransactionDateTime(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getMailStatus() !=null && latestMailbagHistVO.getMailStatus().trim().length()>0){
			mailHistoryType.setTransactionType(latestMailbagHistVO.getMailStatus());
			}
			else{
				mailHistoryType.setTransactionType(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getScanUser() !=null && latestMailbagHistVO.getScanUser().trim().length()>0){
			mailHistoryType.setUserName(latestMailbagHistVO.getScanUser());
			}
			else{
			mailHistoryType.setUserName(EMPTY_STRING);	
			}
			mailHistoryDetails =new MailHistoryDetails();
			mailHistoryDetails.getMailHistory().add(mailHistoryType);
			responseType.setMailHistoryDetails(mailHistoryDetails);




		}else{
			  Collection<MailHistoryType> mailHistoryTypes=new ArrayList<MailHistoryType>();
			for(MailbagHistoryVO mailbagHistoryVO:mailbagHistoryVOs){
				String transactionType=null;
				for(OneTimeVO mailStatus:oneTimeVOs){
					if(mailStatus.getFieldValue().equalsIgnoreCase(mailbagHistoryVO.getMailStatus())){
						 transactionType=mailStatus.getFieldDescription().toUpperCase();
					}
				}
		    mailHistoryDetails =new MailHistoryDetails();
			mailHistoryType = new MailHistoryType();
			if(mailbagHistoryVO.getScannedPort() !=null && mailbagHistoryVO.getScannedPort().trim().length()>0){
			mailHistoryType.setAirportCode(mailbagHistoryVO.getScannedPort());
			}
			else{
				mailHistoryType.setAirportCode(EMPTY_STRING);
			}
			if(mailbagHistoryVO.getCarrierCode() !=null && mailbagHistoryVO.getCarrierCode().trim().length()>0){
			mailHistoryType.setCarrierCode(mailbagHistoryVO.getCarrierCode());
			}
			else{
			mailHistoryType.setCarrierCode(EMPTY_STRING);
			}
			if(mailbagHistoryVO.getContainerNumber() !=null && mailbagHistoryVO.getContainerNumber().trim().length()>0){
			mailHistoryType.setContainer(mailbagHistoryVO.getContainerNumber());
			}
			else{
			mailHistoryType.setContainer(EMPTY_STRING);	
			}
			if(mailbagHistoryVO.getPou() !=null && mailbagHistoryVO.getPou().trim().length()>0){
			mailHistoryType.setPou(mailbagHistoryVO.getPou());
			}
			else{
			mailHistoryType.setPou(EMPTY_STRING);	
			}
			if(mailbagHistoryVO.getFlightDate() !=null ){
			mailHistoryType.setFlightDate(mailbagHistoryVO.getFlightDate().toDisplayFormat("dd-MMM-yyyy").toUpperCase());
			}
			else{
			mailHistoryType.setFlightDate(EMPTY_STRING);	
			}
			if(mailbagHistoryVO.getFlightNumber() != null && !("-1".equalsIgnoreCase(mailbagHistoryVO.getFlightNumber())) 
					&& mailbagHistoryVO.getFlightNumber().trim().length()>0){
			mailHistoryType.setFlightNumber(mailbagHistoryVO.getFlightNumber());
			}
			else{
			mailHistoryType.setFlightNumber(EMPTY_STRING);
			}
			if(mailbagHistoryVO.getHistorySequenceNumber() > 0){
			mailHistoryType.setSerialno(mailbagHistoryVO.getHistorySequenceNumber());
			}
			if(mailbagHistoryVO.getScanDate() !=null ){
			mailHistoryType.setTransactionDateTime(mailbagHistoryVO.getScanDate().toDisplayFormat("dd-MMM-yyyy HH:mm:SS").toUpperCase());
			}
			else{
			mailHistoryType.setTransactionDateTime(EMPTY_STRING);	
			}
			if(transactionType !=null && transactionType.trim().length()>0){
			mailHistoryType.setTransactionType(transactionType);
			}
			else{
				mailHistoryType.setTransactionType(EMPTY_STRING);	
			}
			if(mailbagHistoryVO.getScanUser() !=null && mailbagHistoryVO.getScanUser().trim().length()>0){
			mailHistoryType.setUserName(mailbagHistoryVO.getScanUser());
			}
			else{
			mailHistoryType.setUserName(EMPTY_STRING);	
			}
			mailHistoryTypes.add(mailHistoryType);
			mailHistoryDetails.getMailHistory().addAll(mailHistoryTypes);
			responseType.setMailHistoryDetails(mailHistoryDetails);


			}
		}
			
		}
			
			
		return responseType;	
	}
//Added by A-6991 for ICRD-208718 Ends
	//----------------------------------------------------------------------
	public MailStatusReponseType findMailStatusDetails(MailStatusRequestType mailStatusRequestType) throws ServiceFault,
	InvalidRequestFault{
		log.entering("MailTrackingDefaultsServiceImpl", "findMailBagHistoryDetails");
		
		if(mailStatusRequestType.getCompanyCode()==null ||
				mailStatusRequestType.getCompanyCode().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field Company Code not present");
			}
		if(mailStatusRequestType.getOrigin()==null ||
				mailStatusRequestType.getOrigin().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field Origin not present");
			}
		if(mailStatusRequestType.getMessagePartId()==0)
			{
			throw new InvalidRequestFault("Mandatory Field MessagePartId not present");
			}
		if(mailStatusRequestType.getDsnNumber()==null && mailStatusRequestType.getAwbNumber()==null
				)
			{
			throw new InvalidRequestFault("Mandatory Field DsnNumber or AwbNumber not present");
			}
		
		if(mailStatusRequestType.getFromDate()==null ||
				mailStatusRequestType.getFromDate().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field FromDate not present");
			}
		if(mailStatusRequestType.getToDate()==null ||
				mailStatusRequestType.getToDate().trim().length()==0)
			{
			throw new InvalidRequestFault("Mandatory Field ToDate not present");
			}

		Collection<MailWebserviceErrorVO> finalErrors = new ArrayList<MailWebserviceErrorVO>();
		Collection<MailbagHistoryVO> mailbagHistoryVOs = null;

		try{
				
			MailbagEnquiryFilterVO mailbagEnquiryFilterVO=new MailbagEnquiryFilterVO();
			
			if (mailStatusRequestType
					.getCompanyCode() !=null) {
				mailbagEnquiryFilterVO.setCompanyCode(mailStatusRequestType
						.getCompanyCode());
			}
			if (mailStatusRequestType
						.getOrigin() !=null) {
				mailbagEnquiryFilterVO.setOrigin(mailStatusRequestType
						.getOrigin());
			}
			if (mailStatusRequestType
								.getDsnNumber() !=null) {
				mailbagEnquiryFilterVO
						.setDespatchSerialNumber(mailStatusRequestType
								.getDsnNumber());
			}
			if (mailStatusRequestType
						.getAwbNumber() !=null && mailStatusRequestType.getAwbNumber().trim().length()>0) {
				mailbagEnquiryFilterVO.setAwbNumber(mailStatusRequestType
						.getAwbNumber());  
			}
			mailbagEnquiryFilterVO.setFromDate(mailStatusRequestType.getFromDate());
			mailbagEnquiryFilterVO.setToDate(mailStatusRequestType.getToDate());
			if(mailStatusRequestType.getMailtag() !=null && mailStatusRequestType.getMailtag().trim().length()>0){
				mailbagEnquiryFilterVO.setMailbagId(mailStatusRequestType.getMailtag());
			}
			
			
				
			mailbagHistoryVOs=despatchRequest("findMailStatusDetails", mailbagEnquiryFilterVO);
			
			if(mailbagHistoryVOs !=null && mailbagHistoryVOs.isEmpty()){
				MailWebserviceErrorVO errorVo = new MailWebserviceErrorVO();
				errorVo.setErrorCode("mailtracking.defaults.err.nodatafound");
				finalErrors.add(errorVo);
			}
		
			
		}
		catch(WSBusinessException e) {
		  log.log(Log.FINE, e.getMessage());	
		}
		catch (SystemException e) {
					for(ErrorVO errVo : e.getErrors()){
						MailWebserviceErrorVO errorVo = new MailWebserviceErrorVO();
						errorVo.setErrorCode(errVo.getErrorCode());
						finalErrors.add(errorVo);
					}
				}
		return generateErrorsForperformMailStatusetailsReponse
				(finalErrors,mailbagHistoryVOs,mailStatusRequestType);
			
	}	
	
	
	private MailStatusReponseType generateErrorsForperformMailStatusetailsReponse
	(Collection<MailWebserviceErrorVO> errors,Collection<MailbagHistoryVO>
			mailbagHistoryVOs,MailStatusRequestType mailStatusRequestType){
	log.entering("MailTrackingDefaultsServiceImpl", "generateErrorsForperformMailHistoryDetailsReponse");
		
	    MailStatusReponseType responseType = new MailStatusReponseType();
	    MailDetailsReponseType mailDetailsReponseType= null;
		MailDetails mailDetails =null;
		

		responseType.setCompanyCode(mailStatusRequestType.getCompanyCode());				
		responseType.setMessagePartId(mailStatusRequestType.getMessagePartId());
		if(mailStatusRequestType.getMailtag() !=null && mailStatusRequestType.getMailtag().trim().length() >0){
		responseType.setMailtag(mailStatusRequestType.getMailtag());
		}
		responseType.setErrorFlag(SUCCESS);
			
			if(errors!=null && errors.size()>0){
				for(MailWebserviceErrorVO errorVO:errors){
				responseType.setErrorFlag(FAILURE);
				responseType.setErrorCode(errorVO.getErrorCode());
				}
			}else{
				responseType.setErrorCode(EMPTY_STRING);
			}
		
			if(!mailbagHistoryVOs.isEmpty()){
				
				 Collection<MailDetailsReponseType> mailDetailsReponseTypes=new ArrayList<MailDetailsReponseType>();
				 Collection<MailbagHistoryVO> latestMailbagHistVOs=new ArrayList<MailbagHistoryVO>(); 				
				 mailDetails =new MailDetails();			
				 MailbagHistoryVO templateMailbagHistoryVO=null;
				 HashMap<String,MailDetailsReponseType> mailStatusDetailsMap=
							new HashMap<String,MailDetailsReponseType>();  
				 for(MailbagHistoryVO mailbagHistVO :mailbagHistoryVOs){
					
					 if(mailbagHistVO.getFlightNumber() !=null  && !("-1".equalsIgnoreCase(mailbagHistVO.getFlightNumber()))){
						  mailbagHistVO.setFirstFlight(mailbagHistVO.getFlightNumber());
					 }					
				      
				    		   if(templateMailbagHistoryVO !=null){
				    			   if(mailbagHistVO.getMailbagId().equalsIgnoreCase(templateMailbagHistoryVO.getMailbagId())){
					    			   if(mailbagHistVO.getFlightNumber() !=null  && !("-1".equalsIgnoreCase(mailbagHistVO.getFlightNumber()))){
					    				   if(!mailbagHistVO.getFirstFlight().equalsIgnoreCase(templateMailbagHistoryVO.getFirstFlight())){
					    					   if(templateMailbagHistoryVO.getSecondFlight()==null){
					    					   mailbagHistVO.setSecondFlight(mailbagHistVO.getFirstFlight());
					    					   mailbagHistVO.setSecondFlightDate(mailbagHistVO.getFlightDate());    
					    					   } else{
					    						   mailbagHistVO.setSecondFlight(templateMailbagHistoryVO.getSecondFlight());
						    					   mailbagHistVO.setSecondFlightDate(templateMailbagHistoryVO.getSecondFlightDate()); 
					    					   }    
					    					   mailbagHistVO.setFirstFlight(templateMailbagHistoryVO.getFirstFlight());
					    					    mailbagHistVO.setFlightDate(templateMailbagHistoryVO.getFlightDate());
					    					   latestMailbagHistVOs.add(mailbagHistVO);
					    					               
					    				   }
					    				
					    			   }
					    			
						    		 
						    	  
					    		   }
				    			   else{				    				  
				    					   latestMailbagHistVOs.add(mailbagHistVO); 
				    				  				    				 
				    			   }
				    		   }else{
				    			   latestMailbagHistVOs.add(mailbagHistVO);    
				    		   }
				    		  
				    		   templateMailbagHistoryVO=mailbagHistVO;
				    		
				    		  
				    	  
				       }
							   
				
				 
				 for(MailbagHistoryVO latestMailbagHistVO :latestMailbagHistVOs){					 				
					
				 
				 if(mailDetailsReponseType==null || (latestMailbagHistVO.getMailbagId()!=null && !latestMailbagHistVO.getMailbagId().equalsIgnoreCase(mailDetailsReponseType.getMailbagId()))){
				 mailDetailsReponseType = new MailDetailsReponseType();
				 }   else{
					 mailDetailsReponseType=mailStatusDetailsMap.get(mailDetailsReponseType.getMailbagId());
				 }               
				    
			
			if(latestMailbagHistVO.getDsn() !=null && latestMailbagHistVO.getDsn().trim().length()>0){
				mailDetailsReponseType.setDsnNumber(latestMailbagHistVO.getDsn());
			}
			else{
				mailDetailsReponseType.setDsnNumber(EMPTY_STRING);
			}
			if(latestMailbagHistVO.getMasterDocumentNumber() !=null && latestMailbagHistVO.getMasterDocumentNumber().trim().length()>0){
				mailDetailsReponseType.setAwbNumber(latestMailbagHistVO.getMasterDocumentNumber());
			}
			else{
				mailDetailsReponseType.setAwbNumber(EMPTY_STRING);
			}
			if(latestMailbagHistVO.getMalClass() !=null && latestMailbagHistVO.getMalClass().trim().length()>0){
				mailDetailsReponseType.setMailClass(latestMailbagHistVO.getMalClass());
			}
			else{
				mailDetailsReponseType.setMailClass(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getMalType() !=null && latestMailbagHistVO.getMalType().trim().length()>0){
				mailDetailsReponseType.setMailType(latestMailbagHistVO.getMalType());
			}
			else{
				mailDetailsReponseType.setMailType(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getOrigin() !=null && latestMailbagHistVO.getOrigin().trim().length()>0){
				mailDetailsReponseType.setOrigin(latestMailbagHistVO.getOrigin());
			}
			else{
				mailDetailsReponseType.setOrigin(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getDestination() !=null && latestMailbagHistVO.getDestination().trim().length()>0){
				mailDetailsReponseType.setDestination(latestMailbagHistVO.getDestination());
			}
			else{
				mailDetailsReponseType.setDestination(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getFirstFlight() !=null && latestMailbagHistVO.getFirstFlight().trim().length()>0){
				mailDetailsReponseType.setFirstFlight(latestMailbagHistVO.getFirstFlight());
			}
			if(latestMailbagHistVO.getFlightDate() !=null ){
				mailDetailsReponseType.setFlightDate(latestMailbagHistVO.getFlightDate().toDisplayDateOnlyFormat());     
			}
			else{
				mailDetailsReponseType.setFirstFlight(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getSecondFlight() !=null && latestMailbagHistVO.getSecondFlight().trim().length()>0){
				mailDetailsReponseType.setSecondFlight(latestMailbagHistVO.getSecondFlight());
			}
			else{
				mailDetailsReponseType.setSecondFlight(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getSecondFlightDate() !=null ){
				mailDetailsReponseType.setSecondFlightDate(latestMailbagHistVO.getSecondFlightDate().toDisplayDateOnlyFormat());
			}
			else{
				mailDetailsReponseType.setSecondFlightDate(EMPTY_STRING);	      
			}
			if(latestMailbagHistVO.getMailbagId() !=null && latestMailbagHistVO.getMailbagId().trim().length()>0){
				mailDetailsReponseType.setMailbagId(latestMailbagHistVO.getMailbagId());
			}
			else{
				mailDetailsReponseType.setMailbagId(EMPTY_STRING);	
			}
			if(latestMailbagHistVO.getPieces() !=0 ){
				mailDetailsReponseType.setPiece(latestMailbagHistVO.getPieces());
			}
			else{
				mailDetailsReponseType.setPiece(0);	
			}
			if(latestMailbagHistVO.getWeight() != null ){
				mailDetailsReponseType.setWeight(latestMailbagHistVO.getWeight().getRoundedSystemValue());
			}
			else{
				mailDetailsReponseType.setPiece(0);	
			}			
			
			if(!"N".equalsIgnoreCase(latestMailbagHistVO.getDeliveryStatus()) && latestMailbagHistVO.getUtcScanDate()!=null ){
				//Modified as part of bug ICRD-304004 by A-5526 
				mailDetailsReponseType.setDeliveryDateTime(latestMailbagHistVO.getUtcScanDate().toDisplayFormat("dd-MMM-yyyy HH:mm:SS").toUpperCase());        
			}
			else{
				mailDetailsReponseType.setDeliveryDateTime(EMPTY_STRING);
			}
			mailStatusDetailsMap.put(mailDetailsReponseType.getMailbagId(), mailDetailsReponseType) ;
			
		
		 }   if(mailStatusDetailsMap!=null && !mailStatusDetailsMap.isEmpty())
				 mailDetailsReponseTypes.addAll(mailStatusDetailsMap.values());
		mailDetails.getMailStatus().addAll(mailDetailsReponseTypes);
		//mailDetails.getMailStatus().add(mailDetailsReponseType);
		responseType.setMailDetails(mailDetails);	
		}
				
		return responseType;	

//Added by A-6991 for ICRD-208718 Ends
	}
	
	//----------------------------------------------------------------------
	private void validateFlights(ArrayList<MailWebserviceVO> mailBags) throws SystemException  {
		Collection<FlightFilterVO> flightFilterVOs=new ArrayList<FlightFilterVO>();
		LinkedHashMap<String,FlightFilterVO> flightFilterVOsmap = new LinkedHashMap<String, FlightFilterVO>();
		String flightKey;
		
		for(MailWebserviceVO mailWebserviceVO:mailBags){
			if(mailWebserviceVO.getFlightNumber()!=null && !mailWebserviceVO.getFlightNumber().isEmpty()){
			
			FlightFilterVO flightFilterVO=createFlightFilterVO(mailWebserviceVO);
			flightKey=createFlightKey(flightFilterVO);
			
			if (!flightFilterVOsmap.containsKey(flightKey)) {
				flightFilterVOsmap.put(flightKey, flightFilterVO);
				flightFilterVOs.add(flightFilterVO);
			}
			}
		}
		
		if(flightFilterVOs!=null && flightFilterVOs.size()>0){
			HashMap<String, Collection<FlightValidationVO>> flightValidationMap=null;
		try {
			flightValidationMap=despatchRequest("validateFlightsForAirport", flightFilterVOs);
		} catch (WSBusinessException e) {
			e.getMessage();
		}
		if(flightValidationMap!=null)    
			{
			for(MailWebserviceVO mailWebserviceVO:mailBags){
				if(mailWebserviceVO.getFlightNumber()!=null && !mailWebserviceVO.getFlightNumber().isEmpty()){
				String SEPARATOR="_";
						String flightValidationKey = new StringBuilder(mailWebserviceVO.getFlightDate().toDisplayDateOnlyFormat()).append(SEPARATOR).append(mailWebserviceVO.getCarrierCode()).append(SEPARATOR).append(mailWebserviceVO.getFlightNumber()).append(SEPARATOR).append(mailWebserviceVO.getScanningPort()).toString();
				Collection<FlightValidationVO> flightValidationVOs=flightValidationMap.get(flightValidationKey);
				mailWebserviceVO.setFlightValidationVOS(flightValidationVOs);
				}
		}
		}
		}
		
		//Setting flight Validation VO to each webserviceRequestVO
			
		}
		


		private FlightFilterVO createFlightFilterVO(
				MailWebserviceVO mailWebserviceVO) {
			FlightFilterVO flightFilterVO = new FlightFilterVO();

			if (MailConstantsVO.MAIL_STATUS_ARRIVED.equals(mailWebserviceVO.getScanType())) {
				flightFilterVO.setDirection(MailConstantsVO.OPERATION_INBOUND);
			} else {
				flightFilterVO.setDirection(MailConstantsVO.OPERATION_OUTBOUND);
			}
			
			
			flightFilterVO.setCompanyCode(mailWebserviceVO.getCompanyCode());
			flightFilterVO.setCarrierCode(mailWebserviceVO.getCarrierCode());
			flightFilterVO.setFlightNumber(mailWebserviceVO.getFlightNumber());
			flightFilterVO.setFlightDate(mailWebserviceVO.getFlightDate());
			flightFilterVO.setAirportCode(mailWebserviceVO.getScanningPort());
			flightFilterVO.setOrigin(mailWebserviceVO.getScanningPort());       
			return flightFilterVO;    
		}
		private String createFlightKey(FlightFilterVO flightFilterVO) {
			String SEPARATOR="-";
			return new StringBuilder(flightFilterVO.getCarrierCode()).append(SEPARATOR).append(flightFilterVO.getFlightNumber()).append(SEPARATOR).append(flightFilterVO.getFlightDate().toDisplayDateOnlyFormat()).append(SEPARATOR).append(flightFilterVO.getAirportCode()).toString();    
		}
		
		private boolean validateFoundCasesErrorFormat(String errorCode) {
			boolean  isFoundScenerio=false;
				if(errorCode!=null && !errorCode.isEmpty()&&(errorCode.startsWith("Mailbag delivered. Import flight details are mandatory for mailbag arrival")||
						errorCode.startsWith("Mailbag returned. Import flight details are mandatory for mailbag arrival")||
						errorCode.startsWith("Mailbag Transfered. Import flight details are mandatory for mailbag arrival"))){
					isFoundScenerio=true;
				}
			return isFoundScenerio;
		}

		public FindDespatchDetailsResponseType findDespatchDetails(
				FindDespatchDetailsRequestType findDespatchDetailsRequest) throws ServiceFault, InvalidRequestFault {
						FindDespatchDetailsResponseType findDespatchDetailsResponse = new FindDespatchDetailsResponseType();
			DespatchDetailsFilterVO despatchDetailsFilter = new DespatchDetailsFilterVO();
			Collection<DespatchDetailsVO> despatchDetailsVOs = new ArrayList<>();
			populateDespatchDetailsFilterVO(findDespatchDetailsRequest, despatchDetailsFilter);
			try {
				despatchDetailsVOs = despatchRequest("findDespatchDetails", despatchDetailsFilter);
			} catch (SystemException | WSBusinessException e) {
				throw new ServiceFault("Exception occured!!" + e);
			}
			if (despatchDetailsVOs.isEmpty()) {
				throw new ServiceFault("Response data unavailable.");
			}
			populateFindDespatchDetailsResponse(findDespatchDetailsResponse, despatchDetailsVOs,despatchDetailsFilter);
				return findDespatchDetailsResponse;
		}
		private FindDespatchDetailsResponseType populateFindDespatchDetailsResponse(
				FindDespatchDetailsResponseType findDespatchDetailsResponse,
				Collection<DespatchDetailsVO> despatchDetailsVOs, DespatchDetailsFilterVO despatchDetailsFilter) {
			// appending flightinfo for unique mailbags
			Map<String, DespatchDetailsVO> mailBagMap = new HashMap<>();
			for (DespatchDetailsVO uniqueMailVO : despatchDetailsVOs) {
				if(!despatchDetailsFilter.isMailBagOperationFlag()) {
				String mBkey = uniqueMailVO.getDsn() + uniqueMailVO.getUbrNumber();// Malidr
				 if (mailBagMap.containsKey(mBkey)) {
					DespatchDetailsVO previousMBVo = mailBagMap.get(mBkey);
					previousMBVo.setFlightNumber(previousMBVo.getFlightNumber() + "\n" + uniqueMailVO.getFlightNumber());
				} else {
					mailBagMap.put(mBkey, uniqueMailVO);
				}
				}else {
					String mBkey = uniqueMailVO.getDsn() + uniqueMailVO.getUbrNumber();// Malidr
					 if (mailBagMap.containsKey(mBkey)) {
						DespatchDetailsVO previousMBVo = mailBagMap.get(mBkey);
						previousMBVo.setFlightNumber(previousMBVo.getFlightNumber() + "<br>" + uniqueMailVO.getFlightNumber());
					} else {
						mailBagMap.put(mBkey, uniqueMailVO);
					}
				}
			}
			List<DespatchDetailsVO> updatedMailBagDespatchList = new ArrayList<>(mailBagMap.values());
			Map<String, Collection<OneTimeVO>> oneTimes = null;
			Collection<OneTimeVO> oneTimeVOs=null;
			try {
				 oneTimes = despatchRequest("findOneTimeDescription", despatchDetailsFilter.getCompanyCode(),MAIl_STATUS);
				 oneTimeVOs=oneTimes.get(MAIl_STATUS);
				log.log(Log.FINEST, "\n hash map******************", oneTimes);
			} catch (SystemException | WSBusinessException e) {
				log.log(Log.FINE, e);
			}
			List<DespatchDetailsType> despatchDetails = new ArrayList<>();
			for (DespatchDetailsVO despatchDetailsVO : updatedMailBagDespatchList) {
				DespatchDetailsType despatchDetailsType = new DespatchDetailsType();
				if(despatchDetailsVO.getFlightDate()!=null) {
					despatchDetailsType.setFlightInfo(despatchDetailsVO.getFlightNumber());// flight info ORG-DST LH1234
																							// DD-MMM format
				}
				despatchDetailsType.setDespatchNumber(formattingDespatchNumber(despatchDetailsVO));
				despatchDetailsType.setMailCategory(despatchDetailsVO.getMailCategoryCode());
				despatchDetailsType.setMailClass(despatchDetailsVO.getMailSubclass());
				despatchDetailsType.setDestinationIMPC(despatchDetailsVO.getDestinationOfficeOfExchange());
				despatchDetailsType.setOrginIMPC(despatchDetailsVO.getOriginOfficeOfExchange());			
				despatchDetailsType.setTotalReceptacles(despatchDetailsVO.getAcceptedBags());
				if(despatchDetailsFilter.isMailBagOperationFlag()) {
					MailHistoryType mailHistory =new MailHistoryType();
					mailHistory.setPou(despatchDetailsVO.getRsn());//RSN 
					mailHistory.setTransactionType(despatchDetailsVO.getRemarks());//Remarks
					for(OneTimeVO lastEvent :oneTimeVOs) {
						if(lastEvent.getFieldValue().equalsIgnoreCase(despatchDetailsVO.getLatestStatus())) {
							mailHistory.setContainer(lastEvent.getFieldDescription()+"<br>"
							+despatchDetailsVO.getBookingLastUpdateTime().toDisplayFormat("dd-MM-yyyy/hh:mm"));
					break;
						}
					}//LastEvent
					despatchDetailsType.getMailbagDetails().add(mailHistory);
				}
				despatchDetailsType.setTotalDespatchWeight(despatchDetailsVO.getAcceptedWeight().getRoundedSystemValue());	
				despatchDetails.add(despatchDetailsType);
			}
			findDespatchDetailsResponse.getDespatchDetails().addAll(despatchDetails);
			findDespatchDetailsResponse.setCompanyCode("LH");
			findDespatchDetailsResponse.setGPOCode(despatchDetailsVOs.iterator().next().getPaCode() != null
					? despatchDetailsVOs.iterator().next().getPaCode()
					: "GPOnamenotFound");// GPO Name set here
			return findDespatchDetailsResponse;
		}
		protected String formattingDespatchNumber(DespatchDetailsVO despatchDetailsVO) {
			String dsn=null;
			if(despatchDetailsVO.getDsn()!=null && despatchDetailsVO.getAcceptanceFlag()!=null) {
				 StringBuilder sb = new StringBuilder(despatchDetailsVO.getDsn());
				    sb.insert(0, despatchDetailsVO.getAcceptanceFlag().charAt(3));
				    dsn=sb.toString();
			}
			return dsn;
		}
		private DespatchDetailsFilterVO populateDespatchDetailsFilterVO(
				FindDespatchDetailsRequestType findDespatchDetailsRequest, DespatchDetailsFilterVO despatchDetailsFilter) {
			 despatchDetailsFilter.setCompanyCode(findDespatchDetailsRequest.getCompanyCode());
			if (findDespatchDetailsRequest.isRetrieveReceptacles()) {
				despatchDetailsFilter.setMailBagOperationFlag(true);	
			}
			MailDetailsFilterType mailDetailsFilterType = findDespatchDetailsRequest.getMailDetailsFilter();
			if (mailDetailsFilterType != null) {
				despatchDetailsFilter.setDespatchNumber((mailDetailsFilterType.getDespatchNumber() != null
						&& !mailDetailsFilterType.getDespatchNumber().trim().isEmpty())
								? mailDetailsFilterType.getDespatchNumber()
								: null);
				if(despatchDetailsFilter.getDespatchNumber()!=null && despatchDetailsFilter.getDespatchNumber().length()==5) {
					String dsnNumber =despatchDetailsFilter.getDespatchNumber().substring(1,5);
					despatchDetailsFilter.setDespatchNumber(dsnNumber);
				}
				despatchDetailsFilter.setOriginIMPC((mailDetailsFilterType.getOrginIMPC() != null
						&& !mailDetailsFilterType.getOrginIMPC().trim().isEmpty()) ? mailDetailsFilterType.getOrginIMPC()
								: null);
				despatchDetailsFilter.setDestinationIMPC((mailDetailsFilterType.getDestinationIMPC() != null
						&& !mailDetailsFilterType.getDestinationIMPC().trim().isEmpty())
								? mailDetailsFilterType.getDestinationIMPC()
								: null);
				despatchDetailsFilter.setMailCategory((mailDetailsFilterType.getMailCategory() != null
						&& !mailDetailsFilterType.getMailCategory().trim().isEmpty())
								? mailDetailsFilterType.getMailCategory()
								: null);
				despatchDetailsFilter.setMailClass((mailDetailsFilterType.getMailClass() != null
						&& !mailDetailsFilterType.getMailClass().trim().isEmpty()) ? mailDetailsFilterType.getMailClass()
								: null);
				despatchDetailsFilter.setReceptacleID((mailDetailsFilterType.getReceptacleID() != null
						&& !mailDetailsFilterType.getReceptacleID().trim().isEmpty())
								? mailDetailsFilterType.getReceptacleID()
								: null);
			}
			despatchDetailsFilter.setToDate((findDespatchDetailsRequest.getToDate() != null
					&& !findDespatchDetailsRequest.getToDate().trim().isEmpty()) ? findDespatchDetailsRequest.getToDate()
							: null);
			despatchDetailsFilter.setFromDate((findDespatchDetailsRequest.getFromDate() != null
					&& !findDespatchDetailsRequest.getFromDate().trim().isEmpty())
							? findDespatchDetailsRequest.getFromDate()
							: null);
			despatchDetailsFilter.setGpoCode(findDespatchDetailsRequest.getGPOCode());
			return despatchDetailsFilter;
			}



}
