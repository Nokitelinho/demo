/*
 * MailController.java Created on May 29, 2006
 *
 * Copyright 2005 IBS Software Services(P) Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of IBS Software Services (P) Ltd.
 * Use is subject to license terms.
 */
package com.ibsplc.icargo.business.mail.operations; 


import com.ibsplc.icargo.business.admin.report.vo.PrinterAssignmentMasterVO;
import com.ibsplc.icargo.business.admin.report.vo.ReportPublishJobVO;
import com.ibsplc.icargo.business.admin.user.vo.UserVO;
import com.ibsplc.icargo.business.businessframework.documentrepository.defaults.vo.DocumentRepositoryAttachmentVO;
import com.ibsplc.icargo.business.businessframework.documentrepository.defaults.vo.DocumentRepositoryFilterVO;
import com.ibsplc.icargo.business.businessframework.documentrepository.defaults.vo.DocumentRepositoryMasterVO;
import com.ibsplc.icargo.business.cra.defaults.vo.InvoiceTransactionLogVO;
import com.ibsplc.icargo.business.flight.operation.vo.*;
import com.ibsplc.icargo.business.mail.mra.defaults.vo.DocumentBillingDetailsVO;
import com.ibsplc.icargo.business.mail.mra.defaults.vo.RateAuditDetailsVO;
import com.ibsplc.icargo.business.mail.mra.defaults.vo.RateAuditVO;
import com.ibsplc.icargo.business.mail.mra.gpabilling.vo.GenerateInvoiceFilterVO;
import com.ibsplc.icargo.business.mail.operations.aa.AAMailController;
import com.ibsplc.icargo.business.mail.operations.cache.OfficeOfExchangeCache;
import com.ibsplc.icargo.business.mail.operations.cache.PostalAdministrationCache;
import com.ibsplc.icargo.business.mail.operations.cache.SecurityScreeningValidationCache;
import com.ibsplc.icargo.business.mail.operations.errorhandling.MailHHTBusniessException;
import com.ibsplc.icargo.business.mail.operations.feature.autoattachawbdetails.AutoAttachAWBDetailsFeature;
import com.ibsplc.icargo.business.mail.operations.feature.closemailinboundflight.CloseMailInboundFlightFeature;
import com.ibsplc.icargo.business.mail.operations.feature.publishmailoperationsdata.PublishRapidMailOperationsDataFeature;
import com.ibsplc.icargo.business.mail.operations.feature.savearrivaldetails.SaveArrivalFeature;
import com.ibsplc.icargo.business.mail.operations.feature.saveloadplandetailsformail.SaveLoadPlanDetailsForMailFeature;
import com.ibsplc.icargo.business.mail.operations.feature.saveloadplandetailsformail.SaveLoadPlanDetailsForMailFeatureConstants;
import com.ibsplc.icargo.business.mail.operations.feature.savemailbaghistory.SaveMailbagHistoryFeature;
import com.ibsplc.icargo.business.mail.operations.feature.savemailbaghistory.SaveMailbagHistoryFeatureConstants;
import com.ibsplc.icargo.business.mail.operations.feature.savepawbdetails.SavePAWBDetailsFeature;
import com.ibsplc.icargo.business.mail.operations.feature.savesecuritydetails.SaveSecurityDetailsFeature;
import com.ibsplc.icargo.business.mail.operations.feature.savesecuritydetails.SaveSecurityDetailsFeatureConstants;
import com.ibsplc.icargo.business.mail.operations.feature.savesendresditmessagedetails.SaveSendResditMessageDetailsFeature;
import com.ibsplc.icargo.business.mail.operations.feature.savesendresditmessagedetails.SaveSendResditMessageDetailsFeatureConstants;
import com.ibsplc.icargo.business.mail.operations.feature.stampresdit.StampResditFeature;
import com.ibsplc.icargo.business.mail.operations.feature.stampresdit.StampResditFeatureConstants;
import com.ibsplc.icargo.business.mail.operations.proxy.*;
import com.ibsplc.icargo.business.mail.operations.vo.*;
import com.ibsplc.icargo.business.mail.operations.vo.converter.MailtrackingDefaultsVOConverter;
import com.ibsplc.icargo.business.msgbroker.config.handling.vo.AutoForwardDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.MessageDespatchDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.MessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.cardit.CarditMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.cardit.CarditTempMsgVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.mailmasterdata.MailSubClassMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.mailmasterdata.MailbagDetailsMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.mailmasterdata.OfficeOfExchangeMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.mailmasterdata.PostalAdministrationMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.mailsecurityandscreening.SecurityAndScreeningMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.resdit.ConsignmentInformationVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.resdit.ReceptacleInformationVO;
import com.ibsplc.icargo.business.operations.flthandling.cto.vo.FlightListingFilterVO;
import com.ibsplc.icargo.business.operations.shipment.vo.*;
import com.ibsplc.icargo.business.products.defaults.vo.ProductVO;
import com.ibsplc.icargo.business.products.defaults.vo.ProductValidationVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoDetailsVO;
import com.ibsplc.icargo.business.reco.defaults.vo.ShipmentDetailsVO;
import com.ibsplc.icargo.business.shared.airline.vo.*;
import com.ibsplc.icargo.business.shared.area.airport.vo.AirportVO;
import com.ibsplc.icargo.business.shared.area.airport.vo.AirportValidationVO;
import com.ibsplc.icargo.business.shared.area.city.vo.CityVO;
import com.ibsplc.icargo.business.shared.area.country.vo.CountryVO;
import com.ibsplc.icargo.business.shared.audit.vo.AuditDetailsVO;
import com.ibsplc.icargo.business.shared.commodity.vo.CommodityValidationVO;
import com.ibsplc.icargo.business.shared.customer.vo.CustomerFilterVO;
import com.ibsplc.icargo.business.shared.customer.vo.CustomerLovVO;
import com.ibsplc.icargo.business.shared.customer.vo.CustomerPreferenceVO;
import com.ibsplc.icargo.business.shared.customer.vo.CustomerVO;
import com.ibsplc.icargo.business.shared.defaults.fileupload.vo.FileUploadFilterVO;
import com.ibsplc.icargo.business.shared.defaults.generalconfig.vo.GeneralConfigParameterVO;
import com.ibsplc.icargo.business.shared.defaults.generalconfig.vo.GeneralConfigurationFilterVO;
import com.ibsplc.icargo.business.shared.defaults.generalconfig.vo.GeneralConfigurationMasterVO;
import com.ibsplc.icargo.business.shared.defaults.generalconfig.vo.GeneralRuleConfigDetailsVO;
import com.ibsplc.icargo.business.shared.defaults.onetime.vo.OneTimeVO;
import com.ibsplc.icargo.business.shared.generalmastergrouping.vo.GeneralMasterGroupDetailsVO;
import com.ibsplc.icargo.business.shared.generalmastergrouping.vo.GeneralMasterGroupFilterVO;
import com.ibsplc.icargo.business.shared.generalmastergrouping.vo.GeneralMasterGroupVO;
import com.ibsplc.icargo.business.shared.message.vo.MessageConfigConstants;
import com.ibsplc.icargo.business.shared.uld.vo.ULDPositionFilterVO;
import com.ibsplc.icargo.business.shared.uld.vo.ULDTypeFilterVO;
import com.ibsplc.icargo.business.shared.uld.vo.ULDTypeVO;
import com.ibsplc.icargo.business.shared.uld.vo.ULDValidationFilterVO;
import com.ibsplc.icargo.business.stockcontrol.defaults.vo.DocumentFilterVO;
import com.ibsplc.icargo.business.stockcontrol.defaults.vo.DocumentValidationVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.FlightDetailsVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.ULDInFlightVO;
import com.ibsplc.icargo.business.uld.defaults.vo.ULDVO;
import com.ibsplc.icargo.business.warehouse.defaults.location.vo.LocationValidationVO;
import com.ibsplc.icargo.business.warehouse.defaults.operations.vo.StorageUnitCheckinVO;
import com.ibsplc.icargo.business.warehouse.defaults.ramp.vo.RunnerFlightFilterVO;
import com.ibsplc.icargo.business.warehouse.defaults.ramp.vo.RunnerFlightULDVO;
import com.ibsplc.icargo.business.warehouse.defaults.ramp.vo.RunnerFlightVO;
import com.ibsplc.icargo.business.warehouse.defaults.vo.LocationEnquiryFilterVO;
import com.ibsplc.icargo.business.warehouse.defaults.vo.WarehouseVO;
import com.ibsplc.icargo.business.xaddons.bs.mail.operations.vo.MailBookingDetailVO;
import com.ibsplc.icargo.business.xaddons.lh.mail.operations.vo.HbaMarkingVO;
import com.ibsplc.icargo.framework.event.annotations.Raise;
import com.ibsplc.icargo.framework.feature.Proxy;
import com.ibsplc.icargo.framework.floworchestration.context.SpringAdapter;
import com.ibsplc.icargo.framework.jobscheduler.SchedulerAgent;
import com.ibsplc.icargo.framework.proxy.ProxyException;
import com.ibsplc.icargo.framework.report.agent.ReportAgent;
import com.ibsplc.icargo.framework.report.agent.ReportAgentInstance;
import com.ibsplc.icargo.framework.report.exception.ReportGenerationException;
import com.ibsplc.icargo.framework.report.vo.ReportMetaData;
import com.ibsplc.icargo.framework.report.vo.ReportSpec;
import com.ibsplc.icargo.framework.security.SecurityAgent;
import com.ibsplc.icargo.framework.security.vo.LogonAttributes;
import com.ibsplc.icargo.framework.util.BeanHelper;
import com.ibsplc.icargo.framework.util.time.LocalDate;
import com.ibsplc.icargo.framework.util.time.Location;
import com.ibsplc.icargo.framework.util.unit.Measure;
import com.ibsplc.icargo.framework.util.unit.UnitConstants;
import com.ibsplc.icargo.framework.util.unit.UnitException;
import com.ibsplc.icargo.framework.util.unit.UnitFormatter;
import com.ibsplc.icargo.framework.util.unit.vo.UnitConversionNewVO;
import com.ibsplc.icargo.persistence.dao.mail.operations.MailTrackingDefaultsDAO;
import com.ibsplc.xibase.client.framework.delegate.BusinessDelegateException;
import com.ibsplc.xibase.client.framework.delegate.Module;
import com.ibsplc.xibase.client.framework.delegate.SubModule;
import com.ibsplc.xibase.server.framework.audit.util.AuditUtils;
import com.ibsplc.xibase.server.framework.audit.vo.AuditFieldVO;
import com.ibsplc.xibase.server.framework.audit.vo.AuditVO;
import com.ibsplc.xibase.server.framework.cache.CacheFactory;
import com.ibsplc.xibase.server.framework.cache.CacheException;
import com.ibsplc.xibase.server.framework.exceptions.BusinessException;
import com.ibsplc.xibase.server.framework.exceptions.SystemException;
import com.ibsplc.xibase.server.framework.interceptor.Advice;
import com.ibsplc.xibase.server.framework.interceptor.Phase;
import com.ibsplc.xibase.server.framework.persistence.*;
import com.ibsplc.xibase.server.framework.persistence.keygen.GenerationFailedException;
import com.ibsplc.xibase.server.framework.persistence.keygen.provider.Criterion;
import com.ibsplc.xibase.server.framework.persistence.query.Page;
import com.ibsplc.xibase.server.framework.persistence.tx.Transaction;
import com.ibsplc.xibase.server.framework.persistence.tx.TransactionProvider;
import com.ibsplc.xibase.server.framework.util.ContextUtils;
import com.ibsplc.xibase.server.framework.util.error.ErrorUtils;
import com.ibsplc.xibase.server.framework.util.keygen.KeyUtilInstance;
import com.ibsplc.xibase.server.framework.util.keygen.KeyUtils;
import com.ibsplc.xibase.server.framework.vo.ErrorDisplayType;
import com.ibsplc.xibase.server.framework.vo.ErrorVO;
import com.ibsplc.xibase.server.jobscheduler.business.job.JobSchedulerException;
import com.ibsplc.xibase.server.jobscheduler.business.schedule.vo.ScheduleVO;
import com.ibsplc.xibase.util.log.Log;
import com.ibsplc.xibase.util.log.factory.LogFactory;
import com.ibsplc.xibase.util.time.TimeConvertor;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.InvocationTargetException;
import java.rmi.RemoteException;
import java.time.temporal.WeekFields;
import java.util.*;
import java.util.stream.Collectors;

import static com.ibsplc.icargo.business.mail.operations.vo.DSNVO.OPERATION_FLAG_DELETE;
import static com.ibsplc.icargo.business.mail.operations.vo.DSNVO.OPERATION_FLAG_INSERT;
import static com.ibsplc.icargo.business.mail.operations.vo.DSNVO.OPERATION_FLAG_UPDATE;
import static com.ibsplc.icargo.business.mail.operations.vo.DSNVO.*;
import static com.ibsplc.icargo.business.mail.operations.vo.MailActivityDetailVO.SLASTATUS_FAILURE;
import static com.ibsplc.icargo.business.mail.operations.vo.MailActivityDetailVO.SLASTATUS_SUCCESS;
import static com.ibsplc.icargo.business.mail.operations.vo.MonitorMailSLAVO.*;
import static com.ibsplc.icargo.framework.util.time.Location.ARP;
import static com.ibsplc.xibase.server.framework.exceptions.SystemException.UNEXPECTED_SERVER_ERROR;

import com.ibsplc.icargo.business.mail.operations.feature.saveactualweightcontainer.SaveActualWeightInContainerFeature;
import com.ibsplc.icargo.business.mail.operations.feature.saveactualweightcontainer.SaveActualWeightInContainerFeatureConstants;


/**
 * @author a-1303
 */
@Module("mail")
@SubModule("operations")
public class MailController {


	private Log log = LogFactory.getLogger("mail.operations");
	private static final String CLASS = "MailController";
	private static final String HYPHEN = "-";
	private static final String CSGDOCNUM_GEN_KEY = "CSGDOCNUM_GEN_KEY";
	private static final String ID_SEP = "~";
	private static final String FINDEREXCEPTIO_STRING = "FINDER EXCEPTION IS THROWN";
    private static final String OFFLOADED_FOR_MLD_UPL = "Flight Departed-MLD";
	private static final String SPACE = " ";
	private static final String MODULENAME = "mail.operations";
	private static final String TRANSFER_MANIFEST_KEY = "TRF_MFT_KEY";
	private static final String TRFMFT_KEYTABLE = "MALTRFMFTKEY";
	private static final String CONTAINER_ASSIGNEDFORFLIGHT = "F";
	private static final String CITY_CACHE = "CITY";
	private static final String MODEOFTRANSPORT_ROAD="3";
	private static final String MAIL_STATUS = "mailtracking.defaults.mailstatus";
	private static final String  GENERATE_TRANSFER_MANIFEST_REPORT="generateTransferManifestReport";

	private static final String COUNTRY_ORIGIN = "COUNTRYORIGIN";

	private static final String COUNTRY_DESTINATION = "COUNTRYDESTINATION";
	private static final String COUNTRY_CACHE = "COUNTRY";

	private static final String EXCHANGE_CACHE = "EXCHANGE";

	private static final String ORIGINEXCHANGE = "OOE";

	private static final String DESTINATIONEXCHANGE = "DOE";

    private static final String SUBCLS_CACHE = "MailSubClass";


	private static final String ERROR_CACHE = "ERROR";

	private static final String CITY_ORIGIN = "CITYORIGIN";

	private static final String CITY_DESTINATION = "CITYDESTINATION";

	private static final String PAIR_ORIGIN = "CITYPAIRORIGIN";

	private static final String PAIR_DESTINATION = "CITYPAIRDESTINATION";

	private static final String CITYPAIR_CACHE = "CITYPAIRDESTINATION";

	private static final String PA_CACHE = "PACODE";
	private static final String MODULE = "MailController";
    private static final String MTK_IMP_FLT = "MTK_IMP_FLT";
    private static final String MTK_INB_ONLINEFLT_CLOSURE = "MTK_INB_ONLINEFLT_CLOSURE";
	private static final String DEFAULTCOMMODITYCODE_SYSPARAM = "mailtracking.defaults.booking.commodity";
    private static final String IMPORTMRA_REQUIRED = "mailtracking.defaults.importmailstomra";
    private static final String USPS_INTERNATIONAL_PA = "mailtracking.defaults.uspsinternationalpa";

	private static final String USPS_DOMESTIC_PA = "mailtracking.domesticmra.usps";
    private static final String MAILSERVICELEVELS = "mail.operations.mailservicelevels";
    private static final String MAILCLASS = "mailtracking.defaults.mailclass";
    private static final String CONTRACTID_ALREADY_EXISTS =
			"mailtracking.defaults.ux.mailperformance.msg.err.contractidforodpairalreadyexists";
    private static final String CONTRACTID_ALREADY_EXISTS_FOR_SAME_DATE_SPAN =
            "mailtracking.defaults.ux.mailperformance.msg.err.contractidforsametimeperiodalreadyexists";

	public static final String LAT_VIOLATED_ERR = "mailtracking.defaults.err.latvalidation";
	public static final String LAT_VIOLATED_WAR = "mailtracking.defaults.war.latvalidation";
    private static final String MAIL_ROUTE_INDEX_ERROR = "mailtracking.operations.msg.err.routeindex";
private static final String LST_DGT_OF_YEAR_FMT = "y";

   //Added by A-7540
   public static final String COUNTRY = "logonattributes.country";
   public static final String MAILAWB_STATUS_DETACH="mail.operations.malawb.status.det";

    //Added for ICRD-232361
    // private static final String FORMULA_ALREADY_EXISTS_WITH_DIFF_PERCENTAGE = "mailtracking.defaults.ux.mailperformance.msg.err.formulaalreadyexistswithdifferentpercentage";
    private static final String FORMULA_ALREADY_EXISTS_WITH_SAME_PERCENTAGE_FOR_SAME_PRODUCT =
            "mailtracking.defaults.ux.mailperformance.msg.err.formulaalreadyexistswithsamepercentforsameproduct";
    // private static final String DATE_RANGE_OVERLAPPING = "mailtracking.defaults.ux.mailperformance.msg.err.daterangeoverlapping";
    // private static final String SAME_CONFIGURATION_EXISTS = "mailtracking.defaults.ux.mailperformance.msg.err.sameconfigurationexistsforsameperiod";
    private static final String BOTH_CONFIGURATION_NOT_ALLOWED = "mailtracking.defaults.ux.mailperformance.msg.err.bothconfigurationnotallowed";
    private static final String SERVICE_RESPONSIVE = "Y";
    private static final String NON_SERVICE_RESPONSIVE = "N";
    private static final String BOTH = "B";
    private static final String DUPLICATE_RECORD = "mailtracking.defaults.ux.mailperformance.msg.err.duplicaterecord";
    private static final String INCENTIVEPRODUCTPARAMETER = "PRD";
    private static final String ERROR_ALREADY_READY_FOR_DELIVED_MARKED = "mailtracking.defaults.mailarrival.readyfordeliverymarkedalready";
    private static final String ERROR_ALREADY_READY_FOR_DELIVED_RESDIT_MARKED = "mailtracking.defaults.mailarrival.readyfordeliveryresdittrigerred";
    public static final String INVALID_DELIVERY_AIRPORT = "mailtracking.defaults.InvalidDeliveryAirportException";
   private Map<String, String> exchangeOfficeMap;
    //Added by A-7540 for ICRD-335994
 	public static final String INVALID_READYFOR_DELIVERY_AIRPORT ="mailtracking.defaults.InvalidReadyForDeliveryAirportException";
 	private static final String STNPAR_DEFUNIT_VOL = "station.defaults.unit.volume";//added by A-8353 for ICRD-274933
 	 private static final String AIRCRAFT_COMBATIBILITY_CHECK_REQUIRED = "operations.flthandling.aircraftcompatibilityrequireduldtypes";
 	 private static final String AUTOARRIVALFUNCTIONPOINTS="mail.operations.autoarrivalfunctionpoints";

 	 private static final String HAS_PRIVILEGE_FOR_VIEW_ALL_MAIL_TRUCK="mail.operations.viewalltruckflightsforoperatios";
 	 private static final String TRANSER_STATUS_REJECT="TRFREJ";  
	 private static final String MAIL_CATEGORY = "mailtracking.defaults.mailcategory";
     private static final String LIST_TRANSFER_MANIFEST_SCREENID ="MTK027";
	 private static final String DEST_FOR_CDT_MISSING_DOM_MAL="mail.operation.destinationforcarditmissingdomesticmailbag";
	 private static final String PA_LIST_FOR_PA_BUILT_RATING = "mailtracking.mra.PAlisttoapplycontainerrate";
	 private static final String BLANK = "";
	 private static final String CONSIGNMENTCAPTURE ="C";
	 private static final String IMPORTTRIGGER_DELIVERY ="D";
	 private static final String PROXYEXCEPTION="ProxyException";
     private static final String MAIL_REASSIGN_FROM_CLOSED_FLIGHT="mail.operations.offloadonreassignment";
	private static final String TRANSFER_END_FROM_OPS = "EXPFLTFIN_TRAMAL";
	private static final String MAIL_CONTROLLER_BEAN = "mAilcontroller";
	public static final String MAIL_OPERATIONS_TRANSFER_TRANSACTION="mail.operation.transferoutinonetransaction";
	private static final String MAIL_OPS_TRAEND="TRAEND";
	private static final String SECURITY_SCREENING_MESSGE_TYPE = "SECANDSCREENING";
	private static final String PUBLISH = "PUBLISH";
	private static final String MAIL_OPERATION_SERVICES="mailOperationsFlowServices";
	private static final String REGULATED_AGENTACCEPTING_MAIL="mail.operations.regulatedagentacceptingmail";
    private static final String THIRDPARTYRA_ISSUE_MAIL="mail.operations.thirdpartyraissuemail";
    private static final String RA_ACCEPTANCE_VALIDATION_OVERRIDE="mail.operations.raacceptancevalidationoverride";
    private static final String FLT_CLS="FLTCLS";
    private static final String MAIL_MASTER_DATA_TYPE_MALBAGINF = "MALBAGINF";
    private static final String MAIL_MASTER_DATA_TYPE_PACOD = "PACOD";

    private static final String MAIL_MASTER_DATA_TYPE_SUBCLS = "SUBCLS";
    private static final String MAIL_MASTER_DATA_TYPE_EXCHANGE_OFFICE = "EXGOFC";
    private static final String MACC = "MACC";
    private static final String NO_VALUE="NO_VALUE";
    private static final String DSTARPCNTGRP="DSTARPCNTGRP";
    private static final String NO_GROUP="NO_GRP";
    private static final String SEND_ALL_STATION_SCREENING_STATUS="mail.operations.sendallstationsscreeningstatus";
    private static final Log LOGGER = LogFactory.getLogger("MAIL OPERATIONS");
    private static final String SECURITY_STATUS_SPX = "SPX";
    private static final String SECURITY_STATUS_SHR = "SHR";
    private static final String SECURITY_STATUS_NSC = "NSC";
    private static final String COUNTRY_TYPE_OTHER = "Other";
    private static final String AIRPORT_PARAMETER_ICAOAIRPORTCODE = "operations.flthandling.alternateairportcodeforacc3";
	 private static final String AIRLINE_PARAMETER_ICAOAIRPORTCODEREQUIRED = "operations.flthandling.isalternatearpcoderequired";
    
private static final String SYSTEM_EXCEPTION_ERROR="System Exception caught";
    
	/**
	 * Saves the scanned outbound mails thru the acceptance. Returns a
	 * collection of containers having Oct 6, 2006, a-1739
	 *
	 * @param scannedItems
	 * @return
	 * @throws DuplicateMailBagsException
	 * @throws FlightClosedException
	 * @throws SystemException
	 * @throws InvalidFlightSegmentException
	 * @throws ContainerAssignmentException
	 * @throws ULDDefaultsProxyException
	 * @throws CapacityBookingProxyException
	 * @throws MailBookingException
	 */
	public Collection<ScannedMailDetailsVO> saveScannedOutboundDetails(
			Collection<MailAcceptanceVO> scannedItems)
			throws DuplicateMailBagsException, FlightClosedException,
			SystemException, ContainerAssignmentException,
			InvalidFlightSegmentException, ULDDefaultsProxyException,
            DuplicateDSNException, CapacityBookingProxyException, MailBookingException, MailDefaultStorageUnitException {

		Collection<ScannedMailDetailsVO> exceptionMails = new ArrayList<ScannedMailDetailsVO>();
		for (MailAcceptanceVO scannedAcpVO : scannedItems) {
			exceptionMails.addAll(saveAcceptanceDetails(scannedAcpVO));
		}
		log.log(Log.FINE, "---exceptionMails---", exceptionMails);
		return exceptionMails;
	}

	/**
     * Update the GHT for mailbags Returns
	 *  a-7938
	 *
	 * @param scannedItems
	 * @return
	 * @throws DuplicateMailBagsException
	 * @throws SystemException
	 * @throws FinderException
	 */
	public void updateGHTformailbags(Collection<OperationalFlightVO> operationalFlightVOs) throws ProxyException, SystemException, FinderException {
		if (operationalFlightVOs != null && !operationalFlightVOs.isEmpty()) {
            GeneralConfigurationFilterVO generalTimeMappingFilterVO = new GeneralConfigurationFilterVO();
            Collection<GeneralConfigurationMasterVO> generalConfigurationMasterVOs = null;
        Collection<MailbagVO> mailbags = null;

        for(OperationalFlightVO operationalFlightVO : operationalFlightVOs){

		generalTimeMappingFilterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
		generalTimeMappingFilterVO.setCarrierId(operationalFlightVO.getCarrierId());
		generalTimeMappingFilterVO.setFlightNumber(operationalFlightVO.getFlightNumber());
		generalTimeMappingFilterVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
            if (operationalFlightVO.getPou() != null) {
			generalTimeMappingFilterVO.setPou(operationalFlightVO.getPou());
		}

		generalTimeMappingFilterVO.setPol(operationalFlightVO.getPol());
		generalTimeMappingFilterVO.setAirportCode(operationalFlightVO.getAirportCode());
		generalTimeMappingFilterVO.setConfigurationType("MHT");
			//Modified by A-7540
			try {
                   mailbags = constructDAO().findMailBagsForTransportCompletedResdit(operationalFlightVO);
			     }
			catch (PersistenceException e) {
			   	e.getMessage();
			    }

	    if(mailbags != null && mailbags.size() > 0){
	      for (MailbagVO milbagVO : mailbags) {
	    	  LocalDate ghttim = null;
	    	 // LocalDate arrtim = new LocalDate(LocalDate.NO_STATION, Location.NONE, false);;
		       LocalDate ata = new LocalDate(operationalFlightVO.getArrivaltime(),true);
	    	   LocalDate arrtim = ata;


               generalConfigurationMasterVOs = getSharedProxy().findGeneralConfigurationDetails(generalTimeMappingFilterVO);



		if (generalConfigurationMasterVOs != null && !generalConfigurationMasterVOs.isEmpty()) {
		//arrtime=new LocalDate(generalTimeMappingFilterVO.getAirportCode(),Location.ARP,false);

                for (GeneralConfigurationMasterVO general : generalConfigurationMasterVOs) {
                    String parvalmin = null;
                    String parvalhr = null;
                    int min = 0;
                    int hour = 0;

				//Modified by A-7540
                if((operationalFlightVO.getFlightDate().isGreaterThan(general.getStartDate())
                         && operationalFlightVO.getFlightDate().isLesserThan(general.getEndDate()))
                      || operationalFlightVO.getFlightDate().equals(general.getStartDate())
                      || operationalFlightVO.getFlightDate().equals(general.getEndDate()))  {
                	if(milbagVO.getPou().equals(general.getAirportCode())){
                        Collection<GeneralRuleConfigDetailsVO> time = getTimedetails(general);
                        for (GeneralRuleConfigDetailsVO offset : time) {

                            if (offset.getParameterCode().equals("Min")) {
                                parvalmin = offset.getParameterValue();

                                min = Integer.parseInt(parvalmin);

                            }

                            if (offset.getParameterCode().equals("Hrs")) {
                                parvalhr = offset.getParameterValue();
                                hour = Integer.parseInt(parvalhr);
					}
                        }


                        arrtim.addHours(hour);
                        arrtim.addMinutes(min);
                        ghttim = arrtim;
                	}
                }
             }
            }
            else{

                        ghttim = arrtim;
            }
				MailbagInULDForSegment mailbagInULDForSegment = null;
				MailbagInULDForSegmentPK	mailbagInULDForSegmentPK = new MailbagInULDForSegmentPK();
                            mailbagInULDForSegmentPK.setCompanyCode(milbagVO.getCompanyCode());
                            mailbagInULDForSegmentPK.setCarrierId(milbagVO.getCarrierId());
				mailbagInULDForSegmentPK.setFlightNumber(milbagVO.getFlightNumber());
				mailbagInULDForSegmentPK.setFlightSequenceNumber(milbagVO.getFlightSequenceNumber());
				mailbagInULDForSegmentPK.setSegmentSerialNumber(milbagVO.getSegmentSerialNumber());
				if(MailConstantsVO.BULK_TYPE.equals(milbagVO.getContainerType())){
					mailbagInULDForSegmentPK.setUldNumber("BULK-"+milbagVO.getPou());
				}
				else{
				mailbagInULDForSegmentPK.setUldNumber(milbagVO.getContainerNumber());
				}
				mailbagInULDForSegmentPK.setMailSequenceNumber(milbagVO.getMailSequenceNumber());

				mailbagInULDForSegment = getMailbagInULDForSegment(mailbagInULDForSegmentPK);
                            if (mailbagInULDForSegment != null && ghttim != null) {
						mailbagInULDForSegment.setGhttim(ghttim);
					removeULDForSegment(mailbagInULDForSegment);
					//mailbagInULDForSegment.remove();
					persistMailbagInULDForSegment(mailbagInULDForSegment);
					//new MailbagInULDForSegment(mailbagInULDForSegment);
                            }
				 }
			}
			}
			}
	}

    public void removeULDForSegment(MailbagInULDForSegment mailbagInULDForSegment) throws SystemException {
        mailbagInULDForSegment.remove();
    }

	public void persistMailbagInULDForSegment(MailbagInULDForSegment mailbagInULDForSegment) throws SystemException {
						new MailbagInULDForSegment(mailbagInULDForSegment);

	}

	public LocalDate getLocalDate(String station, Location location, boolean isTimeRequired) {
        return new LocalDate(station, location, isTimeRequired);
	}

    public Collection<GeneralRuleConfigDetailsVO> getTimedetails(GeneralConfigurationMasterVO general) {
        Collection<GeneralRuleConfigDetailsVO> time = general.getTimeDetails();
		 return time;
		}

    public MailbagInULDForSegment getMailbagInULDForSegment(MailbagInULDForSegmentPK mailbagInULDForSegmentPK) throws FinderException, SystemException {
		return MailbagInULDForSegment.find(mailbagInULDForSegmentPK);

		}

    public SharedDefaultsProxy getSharedProxy() {

		return new SharedDefaultsProxy();
		}

    public Collection<MailbagVO> getfindMailBagsForUpliftedResdit(OperationalFlightVO operationalflightVO) {
        Collection<MailbagVO> mailbags = null;
        try {
            mailbags = MailAcceptance.findMailBagsForUpliftedResdit(operationalflightVO);
		} catch (SystemException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mailbags;
		}

    /**
	 * @param mailAcceptanceVO
	 * @return
	 * @throws SystemException
	 * @throws DuplicateMailBagsException
	 * @throws FlightClosedException
	 * @throws ContainerAssignmentException
	 * @throws InvalidFlightSegmentException
	 * @throws ULDDefaultsProxyException
	 * @throws CapacityBookingProxyException
	 * @throws MailBookingException
     * @author a-1739
	 */
	public Collection<ScannedMailDetailsVO> saveAcceptanceDetails(
			MailAcceptanceVO mailAcceptanceVO) throws SystemException,
			DuplicateMailBagsException, FlightClosedException,
			ContainerAssignmentException, InvalidFlightSegmentException,
            ULDDefaultsProxyException, DuplicateDSNException, CapacityBookingProxyException, MailBookingException, MailDefaultStorageUnitException {
        log.entering(CLASS, "saveAcceptanceDetails");
		log.log(Log.FINE, "The MailAcceptanceVO is  >>>>>>>> ", mailAcceptanceVO);
		Collection<ScannedMailDetailsVO> expDetails = new ArrayList<ScannedMailDetailsVO>();
        Map<String, Collection<MailbagVO>> mailbagsToReassignMap = null;
        Map<String, Collection<MailbagVO>> mailbagsToTransferMap = null;
		boolean isScanned = mailAcceptanceVO.isScanned();
		Collection<ContainerDetailsVO> containerDetailsVOs = mailAcceptanceVO.getContainerDetails();
		Collection<PostalAdministrationVO> postalAdministrationVOs = null;
		//checkIfDSNinBothMailbagAndDespatchMode(containerDetailsVOs);
		//mailbagsToReassignMap = checkForDuplicateAndReassignableMailbags(mailAcceptanceVO,isScanned,expDetails,containerDetailsVOs);
		Collection<MailbagVO> mailBagVOsForArrival =  new ArrayList<MailbagVO>();
		Collection<MailbagVO> deletedMails = new ArrayList<MailbagVO>();
		 //added by A-7815 as part of IASCB-48443

        if(mailAcceptanceVO.isFromDeviationList() || mailAcceptanceVO.isFromCarditList()) {      
        	mailAcceptanceVO.setDuplicateMailOverride("Y");

        
        }
		if (containerDetailsVOs != null && !containerDetailsVOs.isEmpty()) {
            if (!MailbagVO.FLAG_YES.equals(mailAcceptanceVO.getDuplicateMailOverride())) {
            	//uncommented the below call,as the reassign pop up is not been shown
            	//while accepting a duplicate mailbag for ICRD-322819
                checkForDuplicateMailbags(mailAcceptanceVO,isScanned,expDetails);//commented by A-8353 for ICRD-230449
				log.log(Log.FINE, "!!!expDetails!!!", expDetails);
                if (expDetails == null || expDetails.size() == 0) {
                    mailbagsToReassignMap = new HashMap<String, Collection<MailbagVO>>();
                    mailAcceptanceVO.setDuplicateMailOverride(MailbagVO.FLAG_YES);
                }
            }

            for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
                Collection<MailbagVO> mailbagsToReassign = new ArrayList<MailbagVO>();
                Collection<MailbagVO> mailbagsToTransfer = new ArrayList<MailbagVO>();
				Collection<MailbagVO> mailBagVOs = containerDetailsVO
						.getMailDetails();
				if (mailBagVOs != null && !mailBagVOs.isEmpty()) {
					mailAcceptanceVO.setMailbagPresent(true);
					for (MailbagVO mailbagVO : mailBagVOs) {
                        if (mailAcceptanceVO.getMailSource() != null) {
                            mailbagVO.
                                    setMailbagSource(mailAcceptanceVO.getMailSource());
                          //Added by A-8527 for IASCB-58918
                            mailbagVO.setMessageVersion(mailAcceptanceVO.getMessageVersion());
                        }
                        if (mailAcceptanceVO.getMailDataSource() != null) {
                            mailbagVO.
                                    setMailbagDataSource(mailAcceptanceVO.getMailDataSource());
						  }
                        //Added by A-8527 for ICRD-346864 starts
                        	if(MailbagVO.FLAG_YES.equals(containerDetailsVO.getPaBuiltFlag())){
                        		mailbagVO.setPaBuiltFlag(MailbagVO.FLAG_YES);
                        		if(MailConstantsVO.OPERATION_FLAG_INSERT.equals(mailbagVO.getOperationalFlag())){
                        			mailbagVO.setPaCode(containerDetailsVO.getPaCode());
                        		}  
                        	}
                        	else{
                        		mailbagVO.setPaBuiltFlag(MailbagVO.FLAG_NO);
                        	}
                        	//Added by A-8527 for ICRD-346864 Ends
						  if (MailbagVO.FLAG_YES.equals(mailAcceptanceVO.getDuplicateMailOverride()) && containerDetailsVO.getOperationFlag() != null) {
                            if (MailbagVO.FLAG_YES.equals(mailbagVO.getReassignFlag())) {
									mailbagVO.setSegmentSerialNumber(mailbagVO.getFromSegmentSerialNumber());
									mailbagVO.setCarrierCode(mailbagVO.getCarrierCode());
									mailbagVO.setOperationalFlag(null);
									mailbagVO.setMailbagHistories(null);
									mailbagVO.setScreen("ACC");
									mailbagsToReassign.add(mailbagVO);
                                if (mailbagsToReassignMap == null) {
										mailbagsToReassignMap = new HashMap<String, Collection<MailbagVO>>();
									}
									mailbagsToReassignMap.put(containerDetailsVO
											.getContainerNumber(), mailbagsToReassign);
								}
						  }

						  if ((mailAcceptanceVO.isFromDeviationList()||mailAcceptanceVO.isFromCarditList() ||mailAcceptanceVO.isFromOutboundScreen() || MailConstantsVO.MLD.equals(mailAcceptanceVO.getMailSource()) || MailConstantsVO.EXPFLTFIN_ACPMAL.equals(mailAcceptanceVO.getMailSource())) &&( (!"NEW".equals(mailbagVO.getLatestStatus())
									&& !"BKD".equals(mailbagVO.getLatestStatus())) ||(mailAcceptanceVO.isFromCarditList()||mailAcceptanceVO.isFromOutboundScreen()||MailConstantsVO.MLD.equals(mailAcceptanceVO.getMailSource()))) && mailbagVO.getOrigin() != null
									&& ((!mailbagVO.getOrigin().equals(mailAcceptanceVO.getPol())
									&& !validateCoterminusairports(mailbagVO.getOrigin(), mailAcceptanceVO.getPol(),
											MailConstantsVO.RESDIT_RECEIVED, mailbagVO.getPaCode(),mailbagVO.getConsignmentDate())
											&& !MailConstantsVO.OPERATION_FLAG_DELETE.equals(mailbagVO.getOperationalFlag())
										    && !MailConstantsVO.OPERATION_FLAG_UPDATE
												.equals(mailbagVO.getOperationalFlag()))
											||(mailAcceptanceVO.isModifyAfterExportOpr()))) {
                                if (!mailAcceptanceVO.isFromDeviationList()&&!mailAcceptanceVO.isFromCarditList()){
                                	if(MailConstantsVO.MLD.equals(mailAcceptanceVO.getMailSource())||mailAcceptanceVO.isFromOutboundScreen()||MailConstantsVO.EXPFLTFIN_ACPMAL.equals(mailAcceptanceVO.getMailSource())) {
                                		mailAcceptanceVO.setFoundTransfer(true);
                                	}
                                	long seqNum=0;
                                	seqNum=Mailbag.findMailBagSequenceNumberFromMailIdr(
                                			mailbagVO.getMailbagId(), mailbagVO.getCompanyCode());
                                	Mailbag mailBag = null;
                                	if (seqNum==0){
                                		mailbagVO.setConsignmentDate(mailbagVO.getScannedDate());
                                		Transaction tx = null;
    				 					boolean success = false;
    				 					try {
    				 						TransactionProvider tm = PersistenceController
    				 								.getTransactionProvider();
    				 						tx = tm.getNewTransaction(false);
                                		mailBag=new Mailbag(mailbagVO);
    				 				    success=true;
    				 					}finally {
    				 						if(success){ 
    				 							tx.commit();    
    		 						}
    		 					}
                                	/*	mailBag=new Mailbag(mailbagVO);  
                                	    try {
											PersistenceController.getEntityManager().flush();
										} catch (PersistenceException e) {
											log.log(Log.SEVERE,"exception raised", e  );
										}*/
                                	    MailbagPK mailBagPK = null;        
                                	    mailBagPK= mailBag.getMailbagPK();
                                	    mailbagVO.setMailSequenceNumber(mailBagPK.getMailSequenceNumber());
                                	}
                                }
								mailbagVO.setTransferFlag(MailbagVO.FLAG_YES);
								if(mailAcceptanceVO.isFromDeviationList()){
								mailbagVO.setFromDeviationList(true);
								}
								mailbagVO.setOperationalFlag(null);

								 if (mailbagsToTransferMap == null) {
									  mailbagsToTransferMap = new HashMap<String, Collection<MailbagVO>>();
									}
								  mailbagsToTransfer.add(mailbagVO);
								  mailbagsToTransferMap.put(containerDetailsVO
											.getContainerNumber(), mailbagsToTransfer);

							}
						  if(mailAcceptanceVO.isFromDeviationList() && (mailbagVO.getOrigin().equals(mailAcceptanceVO.getPol())  || validateCoterminusairports(mailbagVO.getOrigin(), mailAcceptanceVO.getPol(),
									MailConstantsVO.RESDIT_RECEIVED, mailbagVO.getPaCode(),mailbagVO.getConsignmentDate()))) {
								mailBagVOsForArrival.addAll(mailBagVOs);
						   }

						  mailbagVO.setFinalDestination(containerDetailsVO
									.getDestination());
                        if (mailAcceptanceVO.isInventoryForArrival()) {
								mailbagVO.setUldNumber(mailbagVO.getContainerNumber());
							}

                        if (containerDetailsVO.isMailUpdateFlag()) {
								mailbagVO.setMailUpdateFlag(true);
								}

						// Added as part of CRQ ICRD-118163 by A-5526 starts
						if (MailConstantsVO.OPERATION_FLAG_DELETE
								.equals(mailbagVO.getOperationalFlag())
								&& !"D".equals(mailbagVO.getAcknowledge())) {
	
boolean isMailInMRA = false;
String provisionalRateimportEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRA_PROVISIONAL_RATE_IMPORT);
							try {
								
								if(provisionalRateimportEnabled!=null && MailConstantsVO.FLAG_YES.equals(provisionalRateimportEnabled)){
								isMailInMRA = new MailtrackingMRAProxy().isMailbagInMRA(mailbagVO.getCompanyCode(),
										mailbagVO.getMailSequenceNumber());
								}
							} catch (ProxyException e) {
								log.log(Log.INFO, "Exception finding mail exists in MRA " , e);
								isMailInMRA=false;
							}
							if (isMailInMRA) {
								throw new MailBookingException(
										MailTrackingBusinessException.MAIL_IMPORTED_TO_MRA
										);
							}else{
							deletedMails.add(mailbagVO);
							}

						}

// Added as part of CRQ ICRD-118163 by A-5526 ends
						Collection<DamagedMailbagVO> damagedMailBags = mailbagVO
								.getDamagedMailbags();
						if (damagedMailBags != null
								&& !damagedMailBags.isEmpty()) {
							for (DamagedMailbagVO damagedMailbagVO : damagedMailBags) {
								if (damagedMailbagVO.getPaCode() == null) {
									if (mailbagVO.getOoe() != null
											&& mailbagVO.getOoe().trim()
													.length() > 0) {
										// Modified for icrd-111917
										String paCode = findPAForOfficeOfExchange(
												mailbagVO.getCompanyCode(),
												mailbagVO.getOoe());
										if (paCode != null
												&& !"".equals(paCode)) {
											damagedMailbagVO.setPaCode(paCode);
										}
									}
								}
							}
						}
					}
					if(mailbagsToTransfer!=null&&!mailbagsToTransfer.isEmpty()) {
					  mailBagVOs.removeAll(mailbagsToTransfer);
					}
				}

			}

		}
        if (MailAcceptanceVO.FLAG_YES.equals(mailAcceptanceVO.getDuplicateMailOverride())) {
				if (!mailAcceptanceVO.isPreassignNeeded()&&!mailAcceptanceVO.isModifyAfterExportOpr()) {
					//Assign the containers
					saveAcceptedContainers(mailAcceptanceVO);
				}
            if (!mailAcceptanceVO.isConsignmentGenerationNotNeeded()) {
	 				generateConsignmentDocumentNoForAxp(mailAcceptanceVO);
	 				updateDocumentDetails(mailAcceptanceVO);
	 			}

	 			Collection<MailbagVO> mailBagsForMonitorSLA = null;
	 			boolean isMonitorSLAEnabled = isMonitorSLAEnabled();
	 			if (isMonitorSLAEnabled) {
	 				mailBagsForMonitorSLA = new ArrayList<MailbagVO>();
	 			}
	 		if(mailAcceptanceVO.isFromDeviationList()) {
	 			reassignMailFromDestinationForDeviationMailbags(mailAcceptanceVO);
	 		}
            new MailAcceptance().saveAcceptanceDetails(mailAcceptanceVO, mailBagsForMonitorSLA);
            if(mailAcceptanceVO.isFromDeviationList()) {
            	inboundFlightsArrivalForDeviation(mailAcceptanceVO, mailBagVOsForArrival,true);
            }
            calculateAndSaveContentId(mailAcceptanceVO);
            if (mailbagsToReassignMap != null && mailbagsToReassignMap.size() > 0) {
                performMailbagReassignmentFromAcceptance(mailbagsToReassignMap, mailAcceptanceVO);
            }
            if (mailbagsToTransferMap != null && mailbagsToTransferMap.size() > 0) {
            	performMailbagTransferFromAcceptance(mailbagsToTransferMap, mailAcceptanceVO);
            }

            if (isMonitorSLAEnabled) {
                performSLAActivityFromAcceptance(mailAcceptanceVO, isMonitorSLAEnabled, mailBagsForMonitorSLA);
            }

            performMailAllocationFromAcceptance(containerDetailsVOs, mailAcceptanceVO);

		}
		log.log(Log.FINE, "Expection Details  >>>>>>>> ", expDetails);

		if (deletedMails != null && deletedMails.size() > 0) {
			boolean flightMode = false;
			if (mailAcceptanceVO != null
					&& mailAcceptanceVO.getFlightSequenceNumber() > 0) {
				flightMode = true;
			}
			deleteMailBagDetails(deletedMails, flightMode);
		}

		log.exiting(CLASS, "saveAcceptanceDetails");
		return expDetails;
	}

	private void reassignMailFromDestinationForDeviationMailbags(MailAcceptanceVO mailAcceptanceVO) {
		Collection<ContainerDetailsVO> containerDetailsVOs = mailAcceptanceVO.getContainerDetails();
		Collection<MailbagVO> mailbags = null;
		Collection<MailbagVO> destinationAssignedMailbags = null;
		MailbagVO destMailbag = null;
		if (containerDetailsVOs != null) {
			for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
				mailbags = containerDetailsVO.getMailDetails();
				if (mailbags != null && mailbags.size()>0) {
					for (MailbagVO mailbagVO : mailbags) {
						try {
							destMailbag = new MailbagVO();
							BeanHelper.copyProperties(destMailbag, mailbagVO);
							destMailbag.setPol(mailAcceptanceVO.getPol());
							destMailbag = constructDAO().findNotupliftedMailsInCarrierforDeviationlist(destMailbag);
							if(destMailbag!=null) {
								mailbagVO.setFromContainer(destMailbag.getUldNumber());
								mailbagVO.setReassignFlag(MailConstantsVO.FLAG_YES);
								destinationAssignedMailbags = new ArrayList<>();
								destinationAssignedMailbags.add(destMailbag);
								new ReassignController()
								.reassignMailFromDestination(destinationAssignedMailbags);
							}
						} catch (PersistenceException | SystemException e) {
							log.log(Log.SEVERE,"MailController reassignMailFromDestinationForDeviationMailbags:-", e  );
							
						}
					}
				}
			}
		}

	}

	/**
	 * Added as part of CRQ ICRD-118163 by A-5526 to delete accepted mailbags
     *
	 * @param deletedMails
	 * @param flightMode
	 * @throws SystemException
	 */

	private void deleteMailBagDetails(Collection<MailbagVO> deletedMails, boolean flightMode) throws SystemException {
		log.entering(CLASS, "deleteMailBagDetails");
		log.log(Log.FINE, "The deleteMailBagDetails is ", deletedMails);
		checkDeletedMailbagDetails(deletedMails);
        if (deletedMails != null && !deletedMails.isEmpty()) {
            if (flightMode) {
		new ReassignController()
		.reassignMailFromFlight(deletedMails);
            } else {
			new ReassignController()
			.reassignMailFromDestination(deletedMails);
		}

		//This method is used to delete the entries from MTKMALMST,MTKMALHIS ,MTKDMGMAL and MTKMALRDt tables
		deleteMailbags(deletedMails);
		}
		log.exiting(CLASS, "deleteMailBagDetails");
	}


	/**
	 * Added as part of CRQ ICRD-118163 by A-5526 to delete mailbag infos
     *
	 * @param deletedMails
	 * @throws SystemException
	 */
	private void deleteMailbags(
			Collection<MailbagVO> deletedMails) throws SystemException {
		log.entering(CLASS, "deleteMailbags");
		for (MailbagVO mailbagVO : deletedMails) {
			Mailbag mailBag = null;
			MailbagPK mailbagPk = new MailbagPK();
			mailbagPk.setCompanyCode(mailbagVO.getCompanyCode());
			mailbagPk.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
			try {
				mailBag = Mailbag.find(mailbagPk);
			} catch (SystemException e) {
				log.log(Log.SEVERE, "System Exception Caught");
			} catch (FinderException e) {
                mailBag = null;
			}
			if (mailBag != null) {

                MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
                if (!mailbagVO.isMailUpdated()) {
						//Added as part of ICRD-221105 starts
					/*
					 * if(Cardit.findCarditForMailbag(mailbagVO.getCompanyCode(),
					 * mailbagVO.getMailbagId())!=null)
					 */
					try {  /* modified by A-8149 for ICRD-269252*/
						if (constructDAO().findConsignmentDetailsForMailbag(
								mailbagVO.getCompanyCode(),
								mailbagVO.getMailbagId(), "") != null) {
                            if (mailBag.getDamagedMailbags() != null) {
                                for (DamagedMailbag damaged : mailBag.getDamagedMailbags()) {
									damaged.remove();
								}
							}
                          /*  if (mailBag.getMailbagHistories() != null) {IASCB-46569
                                for (MailbagHistory history : mailBag.getMailbagHistories()) {
									history.remove();
								}
							}*/
							mailBag.setLatestStatus(MailConstantsVO.MAIL_STATUS_NEW);
							mailBag.setFlightNumber("-1");//a-7531
							mailBag.setFlightSequenceNumber(-1);
							mailBag.setMasterDocumentNumber("");
							mailBag.setDocumentOwnerId(0);
							mailBag.setDupliacteNumber(0);
							mailBag.setSequenceNumber(0);
							mailBag.setShipmentPrefix("");
						//Added as part of ICRD-221105 ends
                        } else {

						//Code to remove data from MTKMALMST,MTKMALHIS and MTKMALDAMG(if damage is captured) starts
						mailBag.remove();
						//Code to remove data from MTKMALMST,MTKMALHIS and MTKMALDAMG ends

						//Added by A-5945  for Auditing mailbag deletion
						}
					} catch (PersistenceException exception) {
						throw new SystemException(exception.getMessage(),
								exception);
					}
					mailController.auditMailBagDeletion(mailbagVO,
							MailbagAuditVO.MAILBAG_DELETED);
                } else {
						/*MailbagAuditVO auditVO = new MailbagAuditVO(MailbagAuditVO.MOD_NAM,MailbagAuditVO.SUB_MOD_OPERATIONS,MailbagAuditVO.ENTITY_MAIL);
						auditVO = (MailbagAuditVO)AuditUtils.populateAuditDetails(auditVO, mailBag, false);*/
						mailBag.remove();
						//auditVO = (MailbagAuditVO)AuditUtils.populateAuditDetails(auditVO, mailBag, false);
                    mailController.auditMailBagUpdate(mailbagVO, MailbagAuditVO.MAILBAG_MODIFIED);
					}
			}


			//Code to remove the mail resdits from MTKMALRDT starts

			ArrayList<MailResdit> resdits = null;
            resdits = (ArrayList<MailResdit>) MailResdit.findAllResditDetails(mailbagVO.getCompanyCode(), mailbagVO.getMailSequenceNumber());
            if (resdits != null && resdits.size() > 0) {
                for (MailResdit mailResdit : resdits) {
                    if (MailConstantsVO.FLAG_NO.equals(mailResdit.getProcessedStatus()) &&
                            MailConstantsVO.FLAG_NO.equals(mailResdit.getResditSent())) {
					mailResdit.remove();
					}
				}
			}
			//Code to remove the mail resdits ends
		}
	}

	/**
	 * 	Method		:	MailController.auditMailBagDeletion
	 *	Added by 	:	A-5945 on Oct 12, 2015
	 * 	Used for 	:	Audit at Mailbag deletion
	 *	Parameters	:	@param mailbagvo
	 *	Parameters	:	@throws SystemException
	 *	Return type	: 	void
	 */
    @Advice(name = "mail.operations.auditMailBagDeleteion", phase = Phase.POST_INVOKE)
    public void auditMailBagDeletion(MailbagVO mailbagvo, String actionCode)
            throws SystemException {
		log.entering(CLASS, "auditMailBagDeletion");
        log.log(Log.FINE, "Deleted mailbagvo:-", mailbagvo);
		log.exiting(CLASS, "auditMailBagDeletion");
	}

    private void checkIfDSNinBothMailbagAndDespatchMode(Collection<ContainerDetailsVO> containerDetailsVOs) throws SystemException, DuplicateDSNException {
		log.entering(CLASS, "checkIfDSNinBothMailbagAndDespatchMode");
        if (containerDetailsVOs != null && containerDetailsVOs.size() > 0) {
            String errorInfo = "";
            int err = 0;
            for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
                if (containerDetailsVO.getDsnVOs() != null && containerDetailsVO.getDsnVOs().size() > 0) {
                    for (DSNVO dsnVO : containerDetailsVO.getDsnVOs()) {
                        if ("I".equals(dsnVO.getOperationFlag())) {
								String pltFlag = findMailType(dsnVO);
                            log.log(Log.FINE, "!!!!!!!!!!!!!!!!pltFlag", pltFlag);
                            if (pltFlag != null && pltFlag.trim().length() > 0) {
                                if (!"M".equals(pltFlag)) {
                                    if ("".equals(errorInfo)) {
                                        errorInfo = dsnVO.getOriginExchangeOffice() + HYPHEN
                                                + dsnVO.getDestinationExchangeOffice() + HYPHEN
                                                + dsnVO.getMailCategoryCode() + HYPHEN
                                                + dsnVO.getMailSubclass() + HYPHEN
                                                + dsnVO.getDsn() + HYPHEN
                                                + dsnVO.getYear();
                                    } else {
                                        String errorInf = dsnVO.getOriginExchangeOffice() + HYPHEN
                                                + dsnVO.getDestinationExchangeOffice() + HYPHEN
                                                + dsnVO.getMailCategoryCode() + HYPHEN
                                                + dsnVO.getMailSubclass() + HYPHEN
                                                + dsnVO.getDsn() + HYPHEN
                                                + dsnVO.getYear();
			    	    					errorInfo = new StringBuilder().append(errorInfo).append(" , ").append(errorInf).toString();
			    	    				}
                                    err = 1;
			    	    			}
								}
							}
						}
					}
				}
            if (err == 1) {
					log.log(Log.FINE, "!!!!!!!!!!!!!!!!inpk", errorInfo);
                throw new DuplicateDSNException(DuplicateDSNException.DSN_IN_MAILBAG_DESPATCH, new Object[]{errorInfo});
				}
	}

		}

	/**
	 * TODO Purpose May 26, 2008 , A-3251
	 *
	 * @param dsnVO
	 */
	public String findMailType(DSNVO dsnVO)
            throws SystemException {
        MailbagVO mailbagVO = new MailbagVO();
		mailbagVO.setCompanyCode(dsnVO.getCompanyCode());
        String mailId = MailtrackingDefaultsVOConverter.createMailBag(dsnVO);
		mailbagVO.setMailbagId(mailId);
		mailbagVO.setMailSequenceNumber(Mailbag.findMailBagSequenceNumberFromMailIdr(mailId, dsnVO.getCompanyCode()));

	return Mailbag.findMailType(mailbagVO);
	}


    private Map<String, Collection<MailbagVO>> checkForDuplicateAndReassignableMailbags(MailAcceptanceVO mailAcceptanceVO, boolean isScanned, Collection<ScannedMailDetailsVO> expDetails, Collection<ContainerDetailsVO> containerDetailsVOs) throws DuplicateMailBagsException, SystemException {
		log.entering(CLASS, "checkIfDSNinBothMailbagAndDespatchMode");
        Map<String, Collection<MailbagVO>> mailbagsToReassignMap = null;
        if (!MailbagVO.FLAG_YES.equals(mailAcceptanceVO.getDuplicateMailOverride())) {
            checkForDuplicateMailbags(mailAcceptanceVO, isScanned, expDetails);
            log.log(Log.FINE, "!!!expDetails!!!", expDetails);
            if (expDetails == null || expDetails.size() == 0) {
                mailbagsToReassignMap = new HashMap<String, Collection<MailbagVO>>();
                mailAcceptanceVO.setDuplicateMailOverride(MailbagVO.FLAG_YES);
            }
        } else {
            mailbagsToReassignMap = new HashMap<String, Collection<MailbagVO>>();
            Collection<MailbagVO> mailbagsToReassign = new ArrayList<MailbagVO>();
            for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
                if (containerDetailsVO.getOperationFlag() != null) {
                    Collection<MailbagVO> mailbagVOs = containerDetailsVO.getMailDetails();
                    if (mailbagVOs != null && mailbagVOs.size() > 0) {
                        for (MailbagVO mailbagVO : mailbagVOs) {
                            if (MailbagVO.FLAG_YES.equals(mailbagVO.getReassignFlag())) {
								mailbagVO.setSegmentSerialNumber(mailbagVO.getFromSegmentSerialNumber());
								mailbagVO.setCarrierCode(mailbagVO.getCarrierCode());
								mailbagVO.setOperationalFlag(null);
								mailbagVO.setMailbagHistories(null);
								mailbagVO.setScreen("ACC");
								mailbagsToReassign.add(mailbagVO);
							}
						}
						mailbagsToReassignMap.put(containerDetailsVO
								.getContainerNumber(), mailbagsToReassign);
					}
				}
			}
		}
		return mailbagsToReassignMap;

	}

	/**
	 * This method checks for any duplicate mailbags in a container. A mailbag
	 * is duplicate if it is present in another flight/destination. All the
	 * mailbags present in the same flight/destn are added to a hashmap of
	 * containers.
     * <p>
	 * A-1739
	 *
     * @param mailAcceptanceVO The acceptance details
     * @param isScanned        TODO
	 * @param expDetails
	 * @return mailbagsToReassignMap Amapping between 2 containers key is the
	 *         container from which mail has to be reassigned and the value
	 *         contains the to container
	 * @throws SystemException
     * @throws DuplicateMailBagsException If any duplciate bag is found in a container
	 */
	private void checkForDuplicateMailbags(
			MailAcceptanceVO mailAcceptanceVO, boolean isScanned,
			Collection<ScannedMailDetailsVO> expDetails)
			throws SystemException, DuplicateMailBagsException {
		log.entering(CLASS, "checkForDuplicateMailbags");
		/**
		 * While checking for duplicate mailbags we have following scenarios
		 * 1.Mailbag which is already assigned to a ULD in another
		 * flight/destination This is called a duplicate mailbag and error is
		 * thrown for these 2. Incase Mailbag is in same flt/dest but in a diff
		 * uld we have to reassign those mailbags to this uld. These are added
		 * in mailbagsToReassignContainers collection and are removed from the
		 * mailaccceptance mailbag collection
		 */
		Collection<ContainerDetailsVO> containerDetailsVOs = mailAcceptanceVO.getContainerDetails();
		for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
			if (containerDetailsVO.getOperationFlag() != null) {
				Collection<ExistingMailbagVO> existingMails = new ArrayList<ExistingMailbagVO>();
				Collection<MailbagVO> mailbagVOs = containerDetailsVO.getMailDetails();
				if (mailbagVOs != null && mailbagVOs.size() > 0) {
					for (MailbagVO mailbagVO : mailbagVOs) {
						if (OPERATION_FLAG_INSERT.equals(mailbagVO.getOperationalFlag())) {
                            Mailbag mailbag = null;
							try {
                                mailbag = Mailbag.find(createMailbagPK(mailAcceptanceVO.getCompanyCode(), mailbagVO));
							} catch (FinderException exception) {
								// ignore no problem if not found
								// we are anyway adding
								continue;
							}
                            //Commented as part of IASCB-52140 to add the duplicate check for mailbags currebtly in a container assigned to a carrier
							//if ("NEW".equals(mailbag.getLatestStatus()) || "BKD".equals(mailbag.getLatestStatus()) || ("-1".equals(mailbag.getFlightNumber()))
                            if ("NEW".equals(mailbag.getLatestStatus()) || "BKD".equals(mailbag.getLatestStatus())
                                    || mailbag.getFlightNumber() == null) {
                            	if(!mailAcceptanceVO.isFromCarditList()){
                            		mailbagVO.setOrigin(mailbag.getOrigin());
                            		mailbagVO.setDestination(mailbag.getDestination());
                            		//mailbagVO.setPaCode(mailbag.getPaCode());
                            	}
								continue;
							}

                            if(mailAcceptanceVO.isFromCarditList()&&MailConstantsVO.MAIL_STATUS_ACCEPTED.equals(mailbag.getLatestStatus()) && mailbag.getUldNumber()==null){
                            	mailbagVO.setReassignFlag(MailConstantsVO.FLAG_YES);
                            	mailbagVO.setFlightNumber(mailbag.getFlightNumber());
                            	mailbagVO.setFlightSequenceNumber(mailbag.getFlightSequenceNumber());
                            	continue;
                            }
                            if(MailConstantsVO.MAIL_STATUS_DAMAGED.equals(mailbag.getLatestStatus())){
                            	boolean isAcceptableMailbag=true;
                            	Collection<MailbagHistoryVO>  mailbagHistoryVOs =Mailbag.findMailbagHistories(mailbag.getMailbagPK().getCompanyCode(),"", mailbag.getMailbagPK().getMailSequenceNumber());
								if(mailbagHistoryVOs!=null && !mailbagHistoryVOs.isEmpty()){
									for(MailbagHistoryVO mailbagHistoryVO :mailbagHistoryVOs){
										if (MailConstantsVO.MAIL_STATUS_ACCEPTED
												.equals(mailbagHistoryVO.getMailStatus())
												|| MailConstantsVO.MAIL_STATUS_TRANSFERRED
														.equals(mailbagHistoryVO.getMailStatus())
												|| MailConstantsVO.MAIL_STATUS_ARRIVED
														.equals(mailbagHistoryVO.getMailStatus())
												|| MailConstantsVO.MAIL_STATUS_DELIVERED
														.equals(mailbagHistoryVO.getMailStatus())
												|| MailConstantsVO.MAIL_STATUS_ASSIGNED
														.equals(mailbagHistoryVO.getMailStatus())) {
											isAcceptableMailbag = false;
											break;
										}
									}
								}
								if(isAcceptableMailbag){
									continue;
								}
                            }
							String flightStatus = "";
							String fltCarCode = "";
							String ubrNumber = "";
                            int legsernum = 0;
							LocalDate bookingLastUpdateTime = null;
							LocalDate bookingFlightDetailLastUpdTime = null;
                            LocalDate fltDat = null;

                            if (mailbag != null) {
                                if (MailConstantsVO.MAIL_STATUS_RETURNED.equals(mailbag.getLatestStatus())) {
										throw new DuplicateMailBagsException(
												DuplicateMailBagsException.
												MAILBAG_ALREADY_RETURNED_EXCEPTION,
                                            new Object[]{mailbag.getMailIdr()});
									}
                                if (mailbag.getFlightSequenceNumber() > 0) {
                                    long mailSequenceNumber = Mailbag.findMailBagSequenceNumberFromMailIdr(mailbagVO.getMailbagId(), mailAcceptanceVO.getCompanyCode());
                                    MailbagVO mail = Mailbag.findExistingMailbags(mailAcceptanceVO.getCompanyCode(), mailSequenceNumber);
                                    if (mail != null && mail.getFlightSequenceNumber() > 0) {
											flightStatus = mail.getFlightStatus();
											fltCarCode = mail.getCarrierCode();
											fltDat = mail.getFlightDate();
											ubrNumber = mail.getUbrNumber();
                                        legsernum = mail.getLegSerialNumber();     //Added by A-5945 for ICRD-96482

											bookingLastUpdateTime = mail.getBookingLastUpdateTime();
											bookingFlightDetailLastUpdTime = mail.getBookingFlightDetailLastUpdTime();
										}
                                } else {
										try {
											AirlineValidationVO airlineValidationVO =
												new SharedAirlineProxy().findAirline(mailAcceptanceVO.getCompanyCode(), mailbag.getCarrierId());
											fltCarCode = airlineValidationVO.getAlphaCode();
										} catch (SharedProxyException e) {
											// TODO Auto-generated catch block
											e.getMessage();
										}

									}
								}

							/*
							 * Added By Karthick V Under the Assumption 1.Once
							 * the Mail Bag is Returned or Once the MailBag is
							 * already inbound at the Pol Which means that mail
							 * Bag Can still be Accepted at the Current Port ..
							 * So if Such a Scenario occurs continue with the
							 * Next MailBag as this MailBag is already there in
							 * the ContainerDetails For Save and also Duplicate
							 * Check has to be Ignored for these Mail Bags .
							 *
							 */
								//Added by A-5945 for preventing acceptance of arrived mailbags using MTK002 screen.Arrived mailbags can be transfered but cannot be accepted
							if (!mailAcceptanceVO.isScanned()) {
								if (!(MailConstantsVO.MAIL_STATUS_NEW.equals(mailbag.getLatestStatus())) && (mailbagVO.getScannedPort().equals(
										mailbag.getScannedPort()) && MailConstantsVO.OPERATION_INBOUND
										.equals(mailbag.getOperationalStatus()))) {
									log.log(Log.FINE,
											"DuplicateMailBagsException -->");
									throw new DuplicateMailBagsException(
											DuplicateMailBagsException.INVALIDACCEPATNCE_EXCEPTION,
                                            new Object[]{mailbagVO
                                                    .getMailbagId()});
								}
							}
                            if (MailConstantsVO.MAIL_STATUS_RETURNED.equals(mailbag.getLatestStatus()) ||
								(mailbagVO.getScannedPort().equals(mailbag.getScannedPort()) &&
								 MailConstantsVO.OPERATION_INBOUND.equals(mailbag.getOperationalStatus()))) {
								continue;
							}
							/*
							 * check whether mailbag is currently assigned to
							 * destination if so check it is currently beling
							 * assigned to a flight or to a different
							 * destination, then throw exception else addto
							 * reassign
							 */
                            String orgPaCod = null;
                            String OOE = mailbagVO.getOoe();
                            PostalAdministrationVO postalAdministrationVO = new PostalAdministrationVO();
                            try {
                                orgPaCod = findPAForOfficeOfExchange(mailbagVO.getCompanyCode(), OOE);
        					} catch (SystemException e2) {
        						e2.getMessage();
        					}

        					try {
        						postalAdministrationVO = findPACode(mailbagVO.getCompanyCode(), orgPaCod);
        					}  catch (SystemException e) {
        						e.getMessage();
        					}
                            boolean isDuplicate = checkForDuplicateMailbag(mailbagVO.getCompanyCode(),postalAdministrationVO.getPaCode(), mailbag);
                           if(!isDuplicate){

                            ExistingMailbagVO existingMailbagVO = new ExistingMailbagVO();
											existingMailbagVO.setCarrierCode(fltCarCode);
											existingMailbagVO.setCurrentAirport(mailbag.getScannedPort());
											existingMailbagVO.setFlightNumber(mailbag.getFlightNumber());
											existingMailbagVO.setFlightStatus(flightStatus);
											existingMailbagVO.setMailId(mailbagVO.getMailbagId());
											existingMailbagVO.setContainerNumber(mailbag.getUldNumber());
											existingMailbagVO.setPol(mailbagVO.getPol());
											existingMailbagVO.setFlightSequenceNumber(mailbag.getFlightSequenceNumber());
											existingMailbagVO.setLegSerialNumber(legsernum);
											existingMailbagVO.setSegmentSerialNumber(mailbag.getSegmentSerialNumber());
											existingMailbagVO.setContainerType(mailbag.getContainerType());
											existingMailbagVO.setPou(mailbag.getPou());
											existingMailbagVO.setFlightDate(fltDat);
											existingMailbagVO.setFinalDestination(mailbag.getPou());
											existingMailbagVO.setCarrierId(mailbag.getCarrierId());
											existingMailbagVO.setUbrNumber(ubrNumber);
											existingMailbagVO.setBookingLastUpdateTime(bookingLastUpdateTime);
											existingMailbagVO.setBookingFlightDetailLastUpdTime(bookingFlightDetailLastUpdTime);
											existingMailbagVO.setReassign("Y");
											existingMailbagVO.setMalseqnum(Objects.nonNull(mailbag.getMailbagPK())?
													mailbag.getMailbagPK().getMailSequenceNumber():existingMailbagVO.getMalseqnum());
											existingMails.add(existingMailbagVO);
                           }
						}
					}
				}

                if (existingMails != null && existingMails.size() > 0) {
					ScannedMailDetailsVO scannedMalDetVO = new ScannedMailDetailsVO();
					scannedMalDetVO.setExistingMailbagVOS(existingMails);
					scannedMalDetVO.setMailDetails(mailbagVOs);
					scannedMalDetVO.setContainerNumber(containerDetailsVO.getContainerNumber());
					scannedMalDetVO.setContainerType(containerDetailsVO.getContainerType());
					scannedMalDetVO.setCompanyCode(containerDetailsVO.getCompanyCode());
					scannedMalDetVO.setCarrierCode(containerDetailsVO.getCarrierCode());
					scannedMalDetVO.setFlightNumber(containerDetailsVO.getFlightNumber());
					scannedMalDetVO.setFlightDate(containerDetailsVO.getFlightDate());
					scannedMalDetVO.setPou(containerDetailsVO.getPou());
					scannedMalDetVO.setDestination(containerDetailsVO.getDestination());
					scannedMalDetVO.setPol(containerDetailsVO.getPol());
					expDetails.add(scannedMalDetVO);
				}
			}
		}

		log.exiting(CLASS, "checkForDuplicateMailbags");

	}

	/**
	 * @param companyCode
	 * @param mailbagVO
	 * @return
	 * @throws SystemException
     * @author A-5991
	 */
	public MailbagPK createMailbagPK(String companyCode, MailbagVO mailbagVO) throws SystemException {
		MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(companyCode);
        mailbagPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber() > 0 ? mailbagVO.getMailSequenceNumber() : findMailSequenceNumber(mailbagVO.getMailbagId(), mailbagVO.getCompanyCode()));
		return mailbagPK;
	}

	/**
	 * TODO Purpose Feb 6, 2007, A-1739
	 *
	 * @param mailAcceptanceVO
	 * @throws SystemException
	 * @throws InvalidFlightSegmentException
	 * @throws FlightClosedException
	 * @throws ContainerAssignmentException
	 * @throws ULDDefaultsProxyException
	 * @throws CapacityBookingProxyException
	 * @throws MailBookingException
	 */
	public void saveAcceptedContainers(MailAcceptanceVO mailAcceptanceVO)
			throws ContainerAssignmentException, FlightClosedException,
			InvalidFlightSegmentException, SystemException,
            ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, MailDefaultStorageUnitException {
		log.entering(CLASS, "saveAcceptedContainers");
		Collection<ContainerDetailsVO> containerDetails = mailAcceptanceVO
				.getContainerDetails();
		Collection<ContainerVO> containersToSave = new ArrayList<ContainerVO>();
		for (ContainerDetailsVO containerDetailsVO : containerDetails) {
			if (containerDetailsVO.getContainerOperationFlag() != null ||
				 containerDetailsVO.isReassignFlag()) {
				ContainerVO containerVOToSave = constructContainerVOFromDetails(containerDetailsVO, mailAcceptanceVO);
				containerVOToSave.setOperationFlag(containerDetailsVO.getContainerOperationFlag());
				containersToSave.add(containerVOToSave);	
if( containerVOToSave.getFlightSequenceNumber()>0){
					validateAndReleasePreviousAssignment(containerVOToSave);
					}
			}
		}
		


if(canReuseEmptyContainerCheckEnabled()) {
			if(mailAcceptanceVO.getContainerDetails()!=null && mailAcceptanceVO.getContainerDetails().size()==1) {
				ContainerDetailsVO containerDetailsVO= mailAcceptanceVO.getContainerDetails().iterator().next();
				if("I".equals(containerDetailsVO.getContainerOperationFlag())  && !containerDetailsVO.isReassignFlag()
						&&( containerDetailsVO.getMailDetails()==null || containerDetailsVO.getMailDetails().size()==0)) {
					String pol = mailAcceptanceVO.getPol()!=null? mailAcceptanceVO.getPol():containerDetailsVO.getPol();
					ContainerVO containerVOToSave = constructContainerVOFromDetails(containerDetailsVO, mailAcceptanceVO);
					if(!(mailAcceptanceVO.getMailSource()!=null && mailAcceptanceVO.getMailSource().contains("MAN010"))) {
						containerVOToSave.setDeleteEmptyContainer(true);
					    validateContainerAssignment(pol,containerVOToSave);
					}
				}
			}
		} 
		

		
		
        ((MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN))
                .saveContainers(constructOpFlightFromAcp(mailAcceptanceVO), containersToSave);
        //saveContainers(constructOpFlightFromAcp(mailAcceptanceVO),containersToSave);

		updateContainerDetailsVOsForAcp(containersToSave, containerDetails,
				mailAcceptanceVO);
		log.exiting(CLASS, "saveAcceptedContainers");

	}

	/**
	 * @param mailAcceptanceVO
	 * @param airportVO
	 * @return
	 * @throws SystemException
     * @author A-2553
	 */
	private void generateConsignmentDocumentNoForAxp(MailAcceptanceVO mailAcceptanceVO)
			throws SystemException {
		log.entering(CLASS, "generateConsignmentDocumentNoForAxp");
		Collection<ContainerDetailsVO> contDetVOs = mailAcceptanceVO.getContainerDetails();
        if (contDetVOs != null && contDetVOs.size() > 0) {
            for (ContainerDetailsVO containerDetailsVO : contDetVOs) {
				Collection<DespatchDetailsVO> despatchDetailsVOs = containerDetailsVO.getDesptachDetailsVOs();
                if (despatchDetailsVOs != null && despatchDetailsVOs.size() > 0) {
                    for (DespatchDetailsVO despatchDetailsVO : despatchDetailsVOs) {
                        if (despatchDetailsVO.getConsignmentNumber() == null
                                || despatchDetailsVO.getConsignmentNumber().length() == 0) {
							log.log(Log.FINE, "Consignment Document number not available !!! Going to create an internal Consignment Document number");
							AirportVO airportVO = new SharedAreaProxy().findAirportDetails(mailAcceptanceVO.getCompanyCode(), mailAcceptanceVO.getPol());
							log.log(Log.FINE, "AIRPORT VO", airportVO);
							String id = new StringBuilder()
								.append(airportVO.getCountryCode())
									.append(airportVO.getCityCode()).toString();
							Criterion criterion = KeyUtils.getCriterion(mailAcceptanceVO.getCompanyCode(),
									CSGDOCNUM_GEN_KEY, id);
							String key = KeyUtils.getKey(criterion);
							String str = "";
                            int count = 0;
                            for (int i = 0; i < (7 - key.length()); i++) {
                                if (count == 0) {
                                    str = "0";
                                    count = 1;
                                } else {
                                    str = new StringBuilder().append(str).append("0").toString();
                                }

                            }
                            String conDocNo = new StringBuilder().append(id).append("S").append(str).append(key).toString();

                            if (despatchDetailsVO.getConsignmentDate() == null) {
                                if (airportVO.getAirportCode() != null) {
                                    despatchDetailsVO.setConsignmentDate(new LocalDate(airportVO.getAirportCode(), Location.ARP, false));
                                } else {
                                    despatchDetailsVO.setConsignmentDate(new LocalDate(LocalDate.NO_STATION, Location.NONE, false));
                                }
                            }
                            despatchDetailsVO.setConsignmentNumber(conDocNo);
                            log
                                    .log(
                                            Log.FINE,
                                            "%%%%%despatchDetailsVO%%%%-ConsignmentNumber-->",
                                            despatchDetailsVO.getConsignmentNumber());
                            log
                                    .log(
                                            Log.FINE,
                                            "%%%%%despatchDetailsVO%%%%-ConsignmentDate-->",
                                            despatchDetailsVO.getConsignmentDate());
                            log
                                    .log(
                                            Log.FINE,
                                            "%%%%%despatchDetailsVO%%%%-PaCode-->",
                                            despatchDetailsVO.getPaCode());
                        } else {
                            log.log(Log.FINE, "Consignment Document number already available !!! Not creating new", despatchDetailsVO.getConsignmentNumber());
						}

					}
				}
			}
		}

	}

	private void updateDocumentDetails(MailAcceptanceVO mailAcceptanceVO)
            throws SystemException, DuplicateMailBagsException {
		log.entering(CLASS, "updateDocumentDetails");
		updateDespatchDocumentDetails(mailAcceptanceVO);

		updateMailbagDocumentDetails(mailAcceptanceVO);

		log.exiting(CLASS, "updateDocumentDetails");
	}

	/**
     * @return
     * @throws SystemException
	 * @author a-1936 Added By karthick V This method is used to check wether
	 *         the MailBag has to monitored for Service Lvl Activity throughout
	 *         its Process say From the Acceptance to Delivery .
	 */
	private boolean isMonitorSLAEnabled() throws SystemException {
		boolean isMonitorSLAEnabled = false;
		ArrayList<String> systemParameters = new ArrayList<String>();
		systemParameters.add(MailConstantsVO.MAILTRACKING_MONITORSLA);
		HashMap<String, String> systemParameterMap = null;
		systemParameterMap = Proxy.getInstance().get(SharedDefaultsProxy.class)
				.findSystemParameterByCodes(systemParameters);
		log.log(Log.FINE, " systemParameterMap ", systemParameterMap);
		if (systemParameterMap != null
				&& ContainerVO.FLAG_YES.equals(systemParameterMap
						.get(MailConstantsVO.MAILTRACKING_MONITORSLA))) {
			isMonitorSLAEnabled = true;
		}
		log.log(Log.FINE, " isMonitorSLAEnabled :", isMonitorSLAEnabled);
		return isMonitorSLAEnabled;
	}

    private void performMailbagReassignmentFromAcceptance(Map<String, Collection<MailbagVO>> mailbagsToReassignMap, MailAcceptanceVO mailAcceptanceVO) throws FlightClosedException, InvalidFlightSegmentException, CapacityBookingProxyException, MailBookingException, SystemException {
		// Perform reassign mailbags
			if (mailbagsToReassignMap.size() > 0) {
				Collection<ContainerDetailsVO> containerDetails = mailAcceptanceVO
				.getContainerDetails();
				for (Map.Entry<String, Collection<MailbagVO>> entrySet : mailbagsToReassignMap
						.entrySet()) {
				ReassignController reassignController = (ReassignController)SpringAdapter.getInstance().getBean("reassigncontroller");
					reassignController.reassignMailbags(entrySet.getValue(), constructContainerVOForAcp(entrySet.getKey(), containerDetails, mailAcceptanceVO));
				}
			}
	}

    /**
     *
     * 	Method		:	MailController.performMailbagTransferFromAcceptance
     *	Added by 	:	A-8061 on 21-Apr-2020
     * 	Used for 	:	IASCB-48445
     *	Parameters	:	@param mailbagsToTransferMap
     *	Parameters	:	@param mailAcceptanceVO
     *	Parameters	:	@throws FlightClosedException
     *	Parameters	:	@throws InvalidFlightSegmentException
     *	Parameters	:	@throws CapacityBookingProxyException
     *	Parameters	:	@throws MailBookingException
     *	Parameters	:	@throws SystemException
     *	Return type	: 	void
     */
    private void performMailbagTransferFromAcceptance(Map<String, Collection<MailbagVO>> mailbagsToTransferMap, MailAcceptanceVO mailAcceptanceVO) throws FlightClosedException, InvalidFlightSegmentException, CapacityBookingProxyException, MailBookingException, SystemException {
			if (mailbagsToTransferMap.size() > 0) {
				Collection<ContainerDetailsVO> containerDetails = mailAcceptanceVO
				.getContainerDetails();
				for (Map.Entry<String, Collection<MailbagVO>> entrySet : mailbagsToTransferMap
						.entrySet()) {

					Collection<MailbagVO> mailbagVos=entrySet.getValue();
					 inboundFlightsArrivalForDeviation(mailAcceptanceVO, mailbagVos,false);
					 MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
					 if(mailAcceptanceVO.isModifyAfterExportOpr()){
						 mailController.flagHandoverReceivedAfterExportOpr(entrySet.getValue(),constructContainerVOForAcp(entrySet.getKey(), containerDetails, mailAcceptanceVO));
					 }
					 else if(mailAcceptanceVO.isTransferOnModify()){
						   try {
							mailController.transferMailAtExport(entrySet.getValue(),constructContainerVOForAcp(entrySet.getKey(), containerDetails, mailAcceptanceVO),"N" );
						} catch (MailTrackingBusinessException e) {
							e.getMessage();
						}
					 }
					 else{
		             try {
						mailController.transferMail(null,entrySet.getValue(),constructContainerVOForAcp(entrySet.getKey(), containerDetails, mailAcceptanceVO),"N" );
					} catch (MailTrackingBusinessException e) {
						e.getMessage();
					}
					 }
		             //added as part of IASCB-60180
		             if(mailAcceptanceVO.isFromDeviationList()) {
		              inboundFlightsArrivalForDeviation(mailAcceptanceVO, mailbagVos,true);
		             }
				}
			}
	}

	private void inboundFlightsArrivalForDeviation(MailAcceptanceVO mailAcceptanceVO, Collection<MailbagVO> mailbagVos, boolean isPou)
			throws SystemException {
		ScannedMailDetailsVO scannedMailDetailsVO;
		Collection<MailbagVO> mailbagVosTemp;
		Collection<MailbagVO> mailbagVosForArrival;
		MailbagVO mailbagVOForArrival;
		MailbagInULDForSegmentVO mailbagInULDForSegmentVO;
		for (MailbagVO mailbagVO : mailbagVos) {
			mailbagVO.setOperationalFlag("U");
			if (isAutoArrivalEnabled(MailConstantsVO.MAIL_STATUS_TRANSFERRED)) {
				scannedMailDetailsVO = new ScannedMailDetailsVO();
				mailbagVosTemp = new ArrayList<MailbagVO>();
				mailbagVOForArrival = new MailbagVO();
				mailbagVosForArrival = new ArrayList<MailbagVO>();
				ContainerVO containerVO = null;
				mailbagInULDForSegmentVO = null;
				mailbagVosTemp.add(mailbagVO);
				scannedMailDetailsVO.setMailDetails(mailbagVosTemp);
				scannedMailDetailsVO.setCompanyCode(mailAcceptanceVO.getCompanyCode());
				if(mailbagVO.isFromDeviationList() && isPou) {
					scannedMailDetailsVO.setAirportCode(mailbagVO.getPou());
				} else {
				scannedMailDetailsVO.setAirportCode(mailAcceptanceVO.getPol());
				}
				try {
					mailbagInULDForSegmentVO = new MailbagInULDForSegment().getManifestInfo(scannedMailDetailsVO);
				} catch (PersistenceException e) {
					log.log(Log.SEVERE, "Not manifested");
				}
				if (mailbagInULDForSegmentVO != null
						&& !MailbagVO.FLAG_YES.equals(mailbagInULDForSegmentVO.getArrivalFlag())) {
					BeanHelper.copyProperties(mailbagVOForArrival, mailbagVO);
					containerVO = constructContainerVOForAutoArrival(mailbagInULDForSegmentVO, mailbagVOForArrival);
					containerVO.setFromDeviationList(mailAcceptanceVO.isFromDeviationList());
					mailbagVosForArrival.add(mailbagVOForArrival);
					new MailTransfer().saveMailbagsInboundDtlsForTransfer(mailbagVosForArrival, containerVO);
				}
			}

		}
	}

    /**
     *
     * 	Method		:	MailController.constructContainerVOForAutoArrival
     *	Added by 	:	A-8061 on 21-Apr-2020
     * 	Used for 	:	IASCB-48445
     *	Parameters	:	@param mailbagInULDForSegmentVO
     *	Parameters	:	@param mailbagVO
     *	Parameters	:	@return
     *	Return type	: 	ContainerVO
     */
	private ContainerVO constructContainerVOForAutoArrival(
			MailbagInULDForSegmentVO mailbagInULDForSegmentVO,MailbagVO mailbagVO) {
		log.entering(CLASS, "constructContainerVO");
		ContainerVO containerVO = new ContainerVO();
		containerVO.setCompanyCode(mailbagInULDForSegmentVO.getCompanyCode());
		containerVO.setContainerNumber(mailbagInULDForSegmentVO.getContainerNumber());
		containerVO.setAssignedPort(mailbagInULDForSegmentVO.getAssignedPort());
		containerVO.setCarrierId(mailbagInULDForSegmentVO.getCarrierId());
		containerVO.setFlightNumber(mailbagInULDForSegmentVO.getFlightNumber());
		containerVO.setFlightSequenceNumber(mailbagInULDForSegmentVO
				.getFlightSequenceNumber());
		containerVO.setSegmentSerialNumber(mailbagInULDForSegmentVO.getSegmentSerialNumber());
		containerVO.setLegSerialNumber(mailbagInULDForSegmentVO.getLegSerialNumber());
		mailbagVO.setContainerType(mailbagInULDForSegmentVO.getContainerType());
		mailbagVO.setCarrierId(mailbagInULDForSegmentVO.getCarrierId());
		mailbagVO.setFlightNumber(mailbagInULDForSegmentVO.getFlightNumber());
		mailbagVO.setFlightSequenceNumber(mailbagInULDForSegmentVO
				.getFlightSequenceNumber());
		mailbagVO.setContainerNumber(mailbagInULDForSegmentVO.getContainerNumber());
		mailbagVO.setSegmentSerialNumber(mailbagInULDForSegmentVO.getSegmentSerialNumber());
		mailbagVO.setLegSerialNumber(mailbagInULDForSegmentVO.getLegSerialNumber());
		return containerVO;
	}

	private void performSLAActivityFromAcceptance(
			MailAcceptanceVO mailAcceptanceVO, boolean isMonitorSLAEnabled,
			Collection<MailbagVO> mailBagsForMonitorSLA) throws SystemException {
		/*
		 * Added By Karthick V Check if the Service Level Activity Monotoring
		 * for an Mail bag is enabled , if so For all the MailBags in the Flight
		 * call SLA
		 */
		if (mailAcceptanceVO.getFlightSequenceNumber() != MailConstantsVO.DESTN_FLT	&& isMonitorSLAEnabled) {
			if (mailBagsForMonitorSLA != null &&
				mailBagsForMonitorSLA.size() > 0) {
				monitorMailSLAActivity(createMonitorSLAVosForAcceptance(mailBagsForMonitorSLA, mailAcceptanceVO));
			}
		}

	}

	private void performMailAllocationFromAcceptance(
			Collection<ContainerDetailsVO> containerDetailsVOs,
			MailAcceptanceVO mailAcceptanceVO) {
		/*
		 * @author A-3227 RENO K ABRAHAM,  Added ON 07-SEP-08
		 * FOR CRQ_AirNZ404 - Mail Allocation
		 * START
		 */
		Collection<DSNVO> dsnVOs = new ArrayList<DSNVO>();
        if (containerDetailsVOs != null && containerDetailsVOs.size() > 0) {
            for (ContainerDetailsVO contDetVO : containerDetailsVOs) {
                if (contDetVO.getDsnVOs() != null && contDetVO.getDsnVOs().size() > 0) {
                    for (DSNVO dsnVO : contDetVO.getDsnVOs()) {
                        if (dsnVO.getBags() != 0) {
							dsnVO.setSegmentSerialNumber(contDetVO.getSegmentSerialNumber());
							dsnVO.setContainerType(contDetVO.getContainerType());
                            if (dsnVO.getContainerType() != null) {
                                if (MailConstantsVO.ULD_TYPE.equals(dsnVO.getContainerType())) {
									dsnVO.setContainerNumber(contDetVO.getContainerNumber());
									dsnVO.setRemarks(contDetVO.getRemarks());
                                } else if (MailConstantsVO.BULK_TYPE.equals(dsnVO.getContainerType())) {
									String contNum = new StringBuilder()
									.append(MailConstantsVO.CONST_BULK)
									.append(MailConstantsVO.SEPARATOR)
									.append(contDetVO.getPou()).toString();
									dsnVO.setContainerNumber(contNum);
								}
							}
							//This POU of Container gives the - Flight Segment POU
							dsnVO.setPou(contDetVO.getPou());
							dsnVOs.add(dsnVO);
						}
					}
				}
			}
		}
		OperationalFlightVO operationalFlightVO =
			constructOpFlightFromAcp(mailAcceptanceVO);
        if (dsnVOs.size() > 0 && operationalFlightVO != null) {
            if (operationalFlightVO.getFlightNumber() != null &&
					!String.valueOf(MailConstantsVO.DESTN_FLT).equals(operationalFlightVO.getFlightNumber())) {
				log.log(Log.FINE, "MailController--saveAcceptanceDetails--createBookingForMail");
//				bookingForMail(dsnVOs,operationalFlightVO);
				log.log(Log.FINE, "Created Booking");
			}
		}
		/*
		 * END CRQ_AirNZ404 - Mail Allocation
		 */

	}

	/**
	 * TODO Purpose Feb 6, 2007, A-1739
	 *
	 * @param mailAcceptanceVO
	 * @return
	 */
	public OperationalFlightVO constructOpFlightFromAcp(
			MailAcceptanceVO mailAcceptanceVO) {
		OperationalFlightVO opFlightVO = new OperationalFlightVO();
		opFlightVO.setCompanyCode(mailAcceptanceVO.getCompanyCode());
		opFlightVO.setCarrierId(mailAcceptanceVO.getCarrierId());
		opFlightVO.setFlightNumber(mailAcceptanceVO.getFlightNumber());
		opFlightVO.setFlightSequenceNumber(mailAcceptanceVO
				.getFlightSequenceNumber());
		opFlightVO.setLegSerialNumber(mailAcceptanceVO.getLegSerialNumber());
		opFlightVO.setPol(mailAcceptanceVO.getPol());
		opFlightVO.setDirection(MailConstantsVO.OPERATION_OUTBOUND);
		opFlightVO.setFlightDate(mailAcceptanceVO.getFlightDate());
		opFlightVO.setCarrierCode(mailAcceptanceVO.getFlightCarrierCode());
		opFlightVO.setOwnAirlineCode(mailAcceptanceVO.getOwnAirlineCode());
		opFlightVO.setOwnAirlineId(mailAcceptanceVO.getOwnAirlineId());
		opFlightVO.setOperator(mailAcceptanceVO.getAcceptedUser());
		log.log(Log.FINE, "THE accepted User", mailAcceptanceVO.getAcceptedUser());
		return opFlightVO;
	}

	private ContainerVO constructContainerVOFromDetails(
			ContainerDetailsVO containerDetailsVO, MailAcceptanceVO mailAcpVO) throws SystemException {
		ContainerVO newContainerVO = new ContainerVO();
		LogonAttributes logonAttributes= ContextUtils.getSecurityContext()
					.getLogonAttributesVO();

		newContainerVO.setCompanyCode(mailAcpVO.getCompanyCode());
		if (containerDetailsVO.isReassignFlag()) {
			newContainerVO.setCarrierId(containerDetailsVO.getCarrierId());
			newContainerVO.setFlightNumber(containerDetailsVO.getFlightNumber());
			newContainerVO.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
			newContainerVO.setLegSerialNumber(containerDetailsVO.getLegSerialNumber());
			newContainerVO.setFlightDate(containerDetailsVO.getFlightDate());
			newContainerVO.setCarrierCode(containerDetailsVO.getCarrierCode());
		} else {
			newContainerVO.setCarrierId(mailAcpVO.getCarrierId());
			newContainerVO.setFlightNumber(mailAcpVO.getFlightNumber());
			newContainerVO.setFlightSequenceNumber(mailAcpVO.getFlightSequenceNumber());
			newContainerVO.setLegSerialNumber(mailAcpVO.getLegSerialNumber());
			newContainerVO.setFlightDate(mailAcpVO.getFlightDate());
			newContainerVO.setCarrierCode(mailAcpVO.getFlightCarrierCode());
		}
		newContainerVO.setOwnAirlineCode(logonAttributes.getOwnAirlineCode());
		newContainerVO.setSegmentSerialNumber(containerDetailsVO
				.getSegmentSerialNumber());
		newContainerVO.setPreassignNeeded(mailAcpVO.isPreassignNeeded());
		newContainerVO.setAssignedPort(containerDetailsVO.getPol());
		newContainerVO.setContainerNumber(containerDetailsVO.getContainerNumber());
		newContainerVO.setContainerJnyID(containerDetailsVO.getContainerJnyId());
        newContainerVO.setContentId(containerDetailsVO.getContentId());
        if (containerDetailsVO.getPaCode() != null) {
			newContainerVO.setShipperBuiltCode(containerDetailsVO.getPaCode());
		}
		newContainerVO.setType(containerDetailsVO.getContainerType());
		newContainerVO.setPou(containerDetailsVO.getPou());
		//Added by A-7794 as part of ICRD-208677
		newContainerVO.setPol(containerDetailsVO.getPol());
		newContainerVO.setFinalDestination(containerDetailsVO.getDestination());
		newContainerVO.setRemarks(containerDetailsVO.getRemarks());
		newContainerVO.setReassignFlag(containerDetailsVO.isReassignFlag());
		newContainerVO.setAssignedUser(containerDetailsVO.getAssignedUser());
		newContainerVO.setAssignedDate(containerDetailsVO.getAssignmentDate());
		newContainerVO.setPaBuiltFlag(containerDetailsVO.getPaBuiltFlag());
		newContainerVO.setArrivedStatus(MailConstantsVO.FLAG_NO);
		newContainerVO.setPaBuiltOpenedFlag(MailConstantsVO.FLAG_NO);
		newContainerVO.setAcceptanceFlag(containerDetailsVO.getAcceptedFlag());
		newContainerVO.setTransactionCode(containerDetailsVO.getTransactonCode());
		newContainerVO.setTransitFlag(MailConstantsVO.FLAG_YES);
		newContainerVO.setLastUpdateTime(containerDetailsVO.getLastUpdateTime());
		newContainerVO.setULDLastUpdateTime(containerDetailsVO.getUldLastUpdateTime());
		newContainerVO.setFromDeviationList(mailAcpVO.isFromDeviationList());
		newContainerVO.setLastUpdateUser(mailAcpVO.getAcceptedUser());
		newContainerVO.setFromCarditList(mailAcpVO.isFromCarditList());
		newContainerVO.setFoundTransfer(mailAcpVO.isFoundTransfer());
		newContainerVO.setMailSource(mailAcpVO.getMailSource());
		newContainerVO.setMailbagPresent(mailAcpVO.isMailbagPresent());
		newContainerVO.setUldFulIndFlag(containerDetailsVO.getUldFulIndFlag());   
		newContainerVO.setUldReferenceNo(containerDetailsVO.getUldReferenceNo());
		newContainerVO.setActualWeight(containerDetailsVO.getActualWeight());
		newContainerVO.setActWgtSta(containerDetailsVO.getActWgtSta());
		newContainerVO.setMailDetails(containerDetailsVO.getMailDetails());
		return newContainerVO;
	}

	/**
	 * This method saves the Assignment of containers at a port A-1936
	 *
	 * @param operationalFlightVO
	 * @param containerVos
	 * @return
	 * @throws SystemException
	 * @throws ContainerAssignmentException
	 * @throws FlightClosedException
	 * @throws InvalidFlightSegmentException
	 * @throws ULDDefaultsProxyException
	 * @throws CapacityBookingProxyException
	 * @throws MailBookingException
	 */
    @Raise(module = "mail", submodule = "operations", event = "ASSIGNED_TOFLIGHT_EVENT", methodId = "mail.operations.saveContainers", enablecontext="true")
	public Collection<ContainerVO> saveContainers(
			OperationalFlightVO operationalFlightVO,
			Collection<ContainerVO> containerVos) throws SystemException,
			ContainerAssignmentException, FlightClosedException,
			InvalidFlightSegmentException, ULDDefaultsProxyException,
            CapacityBookingProxyException, MailBookingException, MailDefaultStorageUnitException {
		log.entering(CLASS, "saveContainers");
		FlightDetailsVO flightDetailsVO = null;
		Collection<ULDInFlightVO> uldInFlightVos = null;
		ULDInFlightVO uldInFlightVO = null;
		Collection<ContainerVO> reassignContainers = null;
		Collection<ContainerVO> assignContainers = null;
		boolean isUld=false;
		Collection<ContainerVO> containersForReturn = new ArrayList<ContainerVO>();
		Collection<UldInFlightVO> operationalUlds = new ArrayList<UldInFlightVO>();
		//Added by A-7794 for ICRD-208677
		boolean isOprUldEnabled = MailConstantsVO.FLAG_YES.equals(findSystemParameterValue(MailConstantsVO.FLAG_UPD_OPRULD));
		boolean isUMSUpdateNeeded = isULDIntegrationEnabled();  //Modified as part of Bug ICRD-90910 by A-5526
		//Modified by A-7794 for ICRD-208677
		for (ContainerVO containerVo : containerVos) {
			if(MailConstantsVO.ULD_TYPE.equals(containerVo.getType())){
				isUld=true;
			}			
		if (isUMSUpdateNeeded && OPERATION_FLAG_INSERT.equals(containerVo
                    .getOperationFlag()) && !MailConstantsVO.BULK_TYPE.equals(containerVo.getType())) {//Modified as part of ICRD-241936
			flightDetailsVO = new FlightDetailsVO();
			flightDetailsVO
					.setCompanyCode(operationalFlightVO.getCompanyCode());
			flightDetailsVO.setFlightCarrierIdentifier(operationalFlightVO
					.getCarrierId());
			flightDetailsVO.setFlightDate(operationalFlightVO.getFlightDate());
			flightDetailsVO.setFlightNumber(operationalFlightVO
					.getFlightNumber());
			flightDetailsVO.setFlightSequenceNumber(operationalFlightVO
					.getFlightSequenceNumber());
			flightDetailsVO
					.setCarrierCode(operationalFlightVO.getCarrierCode());
			flightDetailsVO.setDirection(MailConstantsVO.EXPORT);
			uldInFlightVos = new ArrayList<ULDInFlightVO>();
			ULDInFlightVO uldFltVo = new ULDInFlightVO();
			uldFltVo.setUldNumber(containerVo.getContainerNumber());
			//Modified by A-7794 as part of ICRD-224604
                if (null == containerVo.getPol() || containerVo.getPol().trim().isEmpty()) {
				uldFltVo.setPointOfLading(containerVo.getAssignedPort());
				flightDetailsVO.setCurrentAirport(containerVo.getAssignedPort());
                } else {
			uldFltVo.setPointOfLading(containerVo.getPol
					());
			flightDetailsVO.setCurrentAirport(containerVo.getPol());
			}
                if (null == containerVo.getPou() || containerVo.getPou().trim().isEmpty()) {
				uldFltVo.setPointOfUnLading(containerVo.getFinalDestination());
                } else {
			uldFltVo.setPointOfUnLading(containerVo.
					getPou());
                }
			uldFltVo.setRemark(MailConstantsVO.MAIL_ULD_ASSIGNED);
			uldFltVo.setContent(MailConstantsVO.UCM_ULD_SOURCE_MAIL);
			uldInFlightVos.add(uldFltVo);
			//Modified by A-7794 as part of ICRD-229934
			if (flightDetailsVO.getCurrentAirport() != null) {
				flightDetailsVO.setTransactionDate(new LocalDate(
								flightDetailsVO
										.getCurrentAirport(),
								Location.ARP, true));
			}
			flightDetailsVO.setUldInFlightVOs(uldInFlightVos);
			flightDetailsVO.setAction(FlightDetailsVO.ACCEPTANCE);
			flightDetailsVO.setSubSystem(MailConstantsVO.MAIL_CONST);
			try {
				new ULDDefaultsProxy().updateULDForOperations(flightDetailsVO);
			} catch (ULDDefaultsProxyException uldDefaultsException) {
				throw new ContainerAssignmentException(uldDefaultsException);
			}

		}
		}
		

		
		for (ContainerVO containerVO : containerVos) {
			if (containerVO.isReassignFlag()) {
				if (reassignContainers == null) {
					reassignContainers = new ArrayList<ContainerVO>();
				}
				//A-7794 as part of ICRD-208677
				//containerVO.setRemarks(MailConstantsVO.MAIL_ULD_REASSIGN);
				reassignContainers.add(containerVO);
			} else {
				if (assignContainers == null) {
					assignContainers = new ArrayList<ContainerVO>();
				}
				//A-7794 as part of ICRD-208677
				//containerVO.setRemarks(MailConstantsVO.MAIL_ULD_ASSIGNED);
				assignContainers.add(containerVO);
			}
			/*if(containerVO.isOffload()){
				//A-7794 as part of ICRD-208677
				containerVO.setRemarks(MailConstantsVO.MAIL_ULD_OFFLOAD);
			}*/

            if (isUMSUpdateNeeded || isOprUldEnabled) {
                constructDetailsForIntegrationForSaveCotainers(containerVO, isUMSUpdateNeeded, uldInFlightVos, isOprUldEnabled, operationalUlds, uldInFlightVO);
			}

		}

		if (assignContainers != null && assignContainers.size() > 0) {
            if (operationalFlightVO == null ||
				operationalFlightVO.getFlightSequenceNumber() == MailConstantsVO.DESTN_FLT) {
				saveContainersForDestination(assignContainers);
			} else {
				saveContainersForFlight(operationalFlightVO, assignContainers);
			}
		}

		if (reassignContainers != null && reassignContainers.size() > 0) {
            performReassignFromSaveContainers(reassignContainers, operationalFlightVO);
		}

		if (assignContainers != null && assignContainers.size() > 0) {
			containersForReturn.addAll(assignContainers);
		}
		if (reassignContainers != null && reassignContainers.size() > 0) {
			containersForReturn.addAll(reassignContainers);
		}

		if (isOprUldEnabled && isUld && operationalUlds != null && operationalUlds.size() > 0) {
				new OperationsFltHandlingProxy()
						.saveOperationalULDsInFlight(operationalUlds);
			}
		

		log.exiting(CLASS, "saveContainers");
		return containersForReturn;

	}

	/**
	 * Updates the ULD details after saving their assignments. Along with this
	 * all the reassigned containers can be removed, since everything for them
	 * is already done by the reassigncontainers methods Feb 6, 2007, A-1739
	 *
	 * @param containersToSave
	 * @param containerDetails
	 * @param mailAcceptanceVO
	 */
	private void updateContainerDetailsVOsForAcp(
			Collection<ContainerVO> containersToSave,
			Collection<ContainerDetailsVO> containerDetails,
			MailAcceptanceVO mailAcceptanceVO) {

		for (ContainerDetailsVO containerDetailsVO : containerDetails) {
			if (OPERATION_FLAG_INSERT.equals(containerDetailsVO
					.getOperationFlag())
					|| containerDetailsVO.isReassignFlag()) {
				for (ContainerVO savedContainerVO : containersToSave) {
					if (containerDetailsVO.getContainerNumber() != null &&
							containerDetailsVO.getContainerNumber().equals(
							savedContainerVO.getContainerNumber())) {
						// for containers after reassign
						containerDetailsVO.setCompanyCode(mailAcceptanceVO
								.getCompanyCode());
						containerDetailsVO.setCarrierId(mailAcceptanceVO
								.getCarrierId());
						containerDetailsVO.setFlightNumber(mailAcceptanceVO
								.getFlightNumber());
						containerDetailsVO
								.setFlightSequenceNumber(mailAcceptanceVO
										.getFlightSequenceNumber());
						containerDetailsVO.setLegSerialNumber(mailAcceptanceVO
								.getLegSerialNumber());
						containerDetailsVO.setFlightDate(mailAcceptanceVO
								.getFlightDate());
						// for new containers
						containerDetailsVO
								.setSegmentSerialNumber(savedContainerVO
										.getSegmentSerialNumber());
						//Added by A-7794 as part of ICRD-208677
						containerDetailsVO.setRemarks(savedContainerVO.getRemarks());
                        if (containerDetailsVO.getFlightSequenceNumber() > 0) {
						updateFlightDetailsForMailbagVOs(containerDetailsVO);
						}
						if (containerDetailsVO.isReassignFlag()) {
							if (MailConstantsVO.FLAG_YES
									.equals(savedContainerVO
											.getAcceptanceFlag())) {
								containerDetailsVO
										.setOperationFlag(OPERATION_FLAG_UPDATE);
							} else {
								containerDetailsVO
										.setOperationFlag(OPERATION_FLAG_INSERT);
							}
						}
						break;
					}
				}
			}
		}
	}

	/**
	 * A-1739
	 *
	 * @param mailAcceptanceVO
	 * @throws SystemException
     * @throws DuplicateMailBagsException
	 */
	private void updateDespatchDocumentDetails(MailAcceptanceVO mailAcceptanceVO)
            throws SystemException, DuplicateMailBagsException {

		log.entering(CLASS, "updateDespatchDocumentDetails");

		Collection<ContainerDetailsVO> containerDetails = compareAndCalculateTotalsOfDespatches(mailAcceptanceVO.getContainerDetails());

		Map<String, Collection<DespatchDetailsVO>> despatchMap = groupDespatchesForConsignment(containerDetails);

		log.log(Log.FINE, "despatch map -->", despatchMap);
		try {
			for (Map.Entry<String, Collection<DespatchDetailsVO>> despatch : despatchMap
					.entrySet()) {
				Collection<DespatchDetailsVO> despatches = despatch.getValue();
				ConsignmentDocumentVO consignDocVO = constructConsignmentDocVO(
						despatch.getKey(), despatches, mailAcceptanceVO.getPol());
				/*
				 * Added By Karthick V Since the same saveMailAcceptance is
				 * being called in the case of the Upload and the Normal Axp
				 * Because to avoid validate Mail Bags from throwing Exception
				 * in the case of the saveConsignment..
				 */
				consignDocVO.setScanned(mailAcceptanceVO.isScanned());
				log.log(Log.FINE, "Consignment Document to save -->", consignDocVO);
				int consignmentSeqNum = new DocumentController().saveConsignmentForAcceptance(consignDocVO);
				updateDespatchesSequenceNum(consignmentSeqNum, despatches);
			}
		} catch (MailbagAlreadyAcceptedException mailbagAlreadyAcceptedException) {
			/* Ignore this Exception */
		}
		log.exiting(CLASS, "updateDespatchDocumentDetails");
	}

	/**
	 * A-1739
	 *
	 * @param mailAcceptanceVO
	 * @throws SystemException
	 */
	/*
	 * Added By Karthick V If the Consignment has already been Captured For the
	 * Mail Then Update the Details of those MailBags Fom the Consignment Tables
	 * Say MTKCSGMST,MTKCSGMAL..
	 *
	 */
	private void updateMailbagDocumentDetails(MailAcceptanceVO mailAcceptanceVO)
			throws SystemException {
		Collection<ContainerDetailsVO> containerDetails = mailAcceptanceVO
				.getContainerDetails();

		log.entering(CLASS, "updateMailbagDocumentDetails");
		for (ContainerDetailsVO containerDetailsVO : containerDetails) {
			if (containerDetailsVO.getOperationFlag() != null) {
				Collection<MailbagVO> mailbags = containerDetailsVO
						.getMailDetails();
				if (mailbags != null && mailbags.size() > 0) {
					DocumentController docController = new DocumentController();
					MailInConsignmentVO mailInConsignmentVO = null;
					for (MailbagVO mailbagVO : mailbags) {
						if (mailbagVO.getOperationalFlag() != null) {
							/*Scan port have no priority for fetching the consignment
							 * as per ANZ bug 49056. So Airport code is not used,
							 * even though it is passed.
							 */
							mailInConsignmentVO = docController
									.findConsignmentDetailsForMailbag(mailbagVO
											.getCompanyCode(), mailbagVO
											.getMailbagId(), mailbagVO
											.getScannedPort());
							if (mailInConsignmentVO != null) {
								mailbagVO
										.setConsignmentNumber(mailInConsignmentVO
												.getConsignmentNumber());
								mailbagVO
										.setConsignmentSequenceNumber(mailInConsignmentVO
												.getConsignmentSequenceNumber());
								if(!"MTK060".equalsIgnoreCase(mailAcceptanceVO.getMailSource())) {
								mailbagVO.setPaCode(mailInConsignmentVO
										.getPaCode());
								}
							}
						}
					}
				}
			}
		}
		log.exiting(CLASS, "updateMailbagDocumentDetails");
	}

	private ContainerVO constructContainerVOForAcp(String uldPK,
			Collection<ContainerDetailsVO> containerDetails,
			MailAcceptanceVO mailAcpVO) throws SystemException {

		for (ContainerDetailsVO containerDetailsVO : containerDetails) {
			if (containerDetailsVO.getContainerNumber().equals(uldPK)) {
				return constructContainerVOFromDetails(containerDetailsVO,
						mailAcpVO);
			}
		}
		return null;
	}

	/**
     * @param mailBagsForMonitorSLA
     * @param mailAcceptanceVO
     * @return
     * @throws SystemException
     * @author a-1936 This method is used to construct the MonitorSLAVos From
     * the MailBagVos
	 */
	private Collection<MonitorMailSLAVO> createMonitorSLAVosForAcceptance(
			Collection<MailbagVO> mailBagsForMonitorSLA,
			MailAcceptanceVO mailAcceptanceVO) throws SystemException {
		log.entering(CLASS, "createMonitorSLAVosForAcceptance");
		MonitorMailSLAVO monitorSLAVo = null;
		Collection<MonitorMailSLAVO> monitorSLAVos = new ArrayList<MonitorMailSLAVO>();
		for (MailbagVO mailBagForMonitorSLA : mailBagsForMonitorSLA) {
			monitorSLAVo = new MonitorMailSLAVO();
			monitorSLAVo.setCompanyCode(mailAcceptanceVO.getCompanyCode());
			monitorSLAVo.setAirlineCode(mailAcceptanceVO.getOwnAirlineCode());
			monitorSLAVo.setFlightCarrierCode(mailAcceptanceVO
					.getFlightCarrierCode());
			monitorSLAVo.setFlightCarrierIdentifier(mailAcceptanceVO
					.getCarrierId());
			monitorSLAVo.setAirlineIdentifier(mailAcceptanceVO
					.getOwnAirlineId());
			monitorSLAVo.setFlightNumber(mailAcceptanceVO.getFlightNumber());
			monitorSLAVo.setActivity(MonitorMailSLAVO.MAILSTATUS_ACCEPTED);
			monitorSLAVo.setMailBagNumber(mailBagForMonitorSLA.getMailbagId());
			monitorSLAVo.setOperationFlag(mailBagForMonitorSLA
					.getOperationalFlag());
			monitorSLAVo.setScanTime(mailBagForMonitorSLA.getScannedDate());
			monitorSLAVos.add(monitorSLAVo);
		}
		log.entering(CLASS, "createMonitorSLAVosForAcceptance");
		return monitorSLAVos;
	}

	/**
	 * @param monitorMailSlaVos
	 * @throws SystemException
     * @author a-2518
	 */
	public void monitorMailSLAActivity(
			Collection<MonitorMailSLAVO> monitorMailSlaVos)
			throws SystemException {
		log.entering(CLASS, "monitorMailSLAActivity");
		HashMap<String, String> cityOEMap = null;
		Collection<String> cities = new ArrayList<String>();
		Collection<String> officeOfExchanges = new ArrayList<String>();
        String companyCode = ((ArrayList<MonitorMailSLAVO>) monitorMailSlaVos).get(0).getCompanyCode();
		//FINDING OE-CITY MAPPING
        for (MonitorMailSLAVO monitorMailSlaVo : monitorMailSlaVos) {
			String originOfficeOfExchange = monitorMailSlaVo.getMailBagNumber().substring(0, 6);
			String destinationOfficeOfExchange = monitorMailSlaVo.getMailBagNumber().substring(6, 12);
            if (!officeOfExchanges.contains(originOfficeOfExchange)) {
				officeOfExchanges.add(originOfficeOfExchange);
			}
            if (!officeOfExchanges.contains(destinationOfficeOfExchange)) {
				officeOfExchanges.add(destinationOfficeOfExchange);
			}
		}
        if (companyCode != null && companyCode.length() > 0 && officeOfExchanges.size() > 0) {
            cityOEMap = findCityForOfficeOfExchange(companyCode, officeOfExchanges);
		}
		for (MonitorMailSLAVO monitorMailSlaVo : monitorMailSlaVos) {
			String origin = null;
			String destination = null;
			String originOfficeOfExchange = monitorMailSlaVo.getMailBagNumber()
					.substring(0, 6);
			String destinationOfficeOfExchange = monitorMailSlaVo
					.getMailBagNumber().substring(6, 12);
            if (cityOEMap != null && cityOEMap.size() > 0) {
				origin = cityOEMap.get(originOfficeOfExchange);
				destination = cityOEMap.get(destinationOfficeOfExchange);
			}
			String poaCode = MailActivityDetail.findPostalAuthorityCode(
					monitorMailSlaVo.getCompanyCode(), originOfficeOfExchange);
			String mailCategory = monitorMailSlaVo.getMailBagNumber()
					.substring(12, 13);
			log.log(Log.FINE, "The Monitor SLA VO", monitorMailSlaVo);
			// If the mail status is 'Accepted'
			if (MAILSTATUS_ACCEPTED.equals(monitorMailSlaVo.getActivity())) {
				if (OPERATION_FLAG_INSERT.equals(monitorMailSlaVo
						.getOperationFlag())) {
					MailActivityDetailVO mailActivityDetailVO = null;
					mailActivityDetailVO = MailActivityDetail
							.findServiceTimeAndSLAId(monitorMailSlaVo
									.getCompanyCode(), poaCode, origin,
									destination, mailCategory,
									SLAACTIVITY_ACCEPTANCE_TO_DEPARTURE,
									monitorMailSlaVo.getScanTime());
					if (mailActivityDetailVO != null) {
						if (mailActivityDetailVO.getSlaIdentifier() != null
								&& !"".equals(mailActivityDetailVO
										.getSlaIdentifier())) {
							mailActivityDetailVO
									.setCompanyCode(monitorMailSlaVo
											.getCompanyCode());
							mailActivityDetailVO
									.setMailBagNumber(monitorMailSlaVo
											.getMailBagNumber());
							mailActivityDetailVO
									.setServiceLevelActivity(SLAACTIVITY_ACCEPTANCE_TO_DEPARTURE);
							mailActivityDetailVO.setGpaCode(poaCode);
							mailActivityDetailVO
									.setPlannedTime(monitorMailSlaVo
											.getScanTime().addHours(
													mailActivityDetailVO
															.getServiceTime()));
							mailActivityDetailVO.setActualTime(null);
							mailActivityDetailVO
									.setAirlineCode(monitorMailSlaVo
											.getAirlineCode());
							mailActivityDetailVO
									.setAirlineIdentifier(monitorMailSlaVo
											.getAirlineIdentifier());
							mailActivityDetailVO
									.setFlightCarrierCode(monitorMailSlaVo
											.getFlightCarrierCode());
							mailActivityDetailVO
									.setFlightCarrierId(monitorMailSlaVo
											.getFlightCarrierIdentifier());
							mailActivityDetailVO
									.setFlightNumber(monitorMailSlaVo
											.getFlightNumber());
							mailActivityDetailVO.setMailCategory(mailCategory);
							mailActivityDetailVO.setSlaStatus(null);
							new MailActivityDetail(mailActivityDetailVO);
						}
					}
				}
				// If scan date is changed
				else if (OPERATION_FLAG_UPDATE.equals(monitorMailSlaVo
						.getOperationFlag())) {
					MailActivityDetail mailActivityDetail = null;
					try {
						mailActivityDetail = MailActivityDetail.find(
								monitorMailSlaVo.getCompanyCode(),
								monitorMailSlaVo.getMailBagNumber(),
								SLAACTIVITY_ACCEPTANCE_TO_DEPARTURE);
					} catch (FinderException finderException) {
						log
								.log(Log.SEVERE,
										"Finder Exception occurred in finding MailActivityDetail entity");
					}
					if (mailActivityDetail != null) {
						MailActivityDetailVO mailActivityDetailVO = MailActivityDetail
								.findServiceTimeAndSLAId(monitorMailSlaVo
										.getCompanyCode(), poaCode, origin,
										destination, mailCategory,
										SLAACTIVITY_ACCEPTANCE_TO_DEPARTURE,
										monitorMailSlaVo.getScanTime());
						mailActivityDetail.setPlannedTime(monitorMailSlaVo
								.getScanTime().addHours(
										mailActivityDetailVO.getServiceTime()));
						log
								.log(Log.INFO,
										"MailActivityDetail has been updated");
					}
				}
				// If the mail bag is damaged
				else if (OPERATION_FLAG_DELETE.equals(monitorMailSlaVo
						.getOperationFlag())) {
					MailActivityDetail mailActivityDetail = null;
					try {
						mailActivityDetail = MailActivityDetail.find(
								monitorMailSlaVo.getCompanyCode(),
								monitorMailSlaVo.getMailBagNumber(),
								SLAACTIVITY_ACCEPTANCE_TO_DEPARTURE);
					} catch (FinderException finderException) {
						log
								.log(Log.SEVERE,
										"Finder Exception occurred in finding MailActivityDetail entity");
					}
					if (mailActivityDetail != null) {
						mailActivityDetail.remove();
						log
								.log(Log.INFO,
										"MailActivityDetail has been removed");
					}
				}
			}
			// If the mail status is 'Manifested'
			else if (MAILSTATUS_MANIFESTED.equals(monitorMailSlaVo
					.getActivity())) {
				if (OPERATION_FLAG_UPDATE.equals(monitorMailSlaVo
						.getOperationFlag())) {
					MailActivityDetail mailActivityDetail = null;
					try {
						mailActivityDetail = MailActivityDetail.find(
								monitorMailSlaVo.getCompanyCode(),
								monitorMailSlaVo.getMailBagNumber(),
								SLAACTIVITY_ACCEPTANCE_TO_DEPARTURE);
					} catch (FinderException finderException) {
						log
								.log(Log.SEVERE,
										"Finder Exception occurred in finding MailActivityDetail entity");
					}
					if (mailActivityDetail != null) {
						/*
						 * If the actual time is greater than planned time, set
						 * SLA staus to F-Failure, else, S-Success
						 */

						log.log(Log.FINE, " the Scan time from the Opr",
								monitorMailSlaVo.getScanTime());
						mailActivityDetail.setActualTime(monitorMailSlaVo
								.getScanTime());
						LocalDate ldate = new LocalDate(getLogonAirport(),
								Location.ARP, mailActivityDetail
										.getPlannedTime(), true);
						log.log(Log.FINE, " the Scan time Planned ", ldate);
						if (monitorMailSlaVo.getScanTime().isGreaterThan(ldate)) {
							mailActivityDetail.setSlaStatus(SLASTATUS_FAILURE);
						} else {
							mailActivityDetail.setSlaStatus(SLASTATUS_SUCCESS);
						}
						log
								.log(Log.INFO,
										"MailActivityDetail has been updated");
					}
				}
			}
			// If the mail status is 'Offloaded'
			else if (MAILSTATUS_OFFLOADED
					.equals(monitorMailSlaVo.getActivity())) {
				if (OPERATION_FLAG_UPDATE.equals(monitorMailSlaVo
						.getOperationFlag())) {
					MailActivityDetail mailActivityDetail = null;
					try {
						mailActivityDetail = MailActivityDetail.find(
								monitorMailSlaVo.getCompanyCode(),
								monitorMailSlaVo.getMailBagNumber(),
								SLAACTIVITY_ACCEPTANCE_TO_DEPARTURE);
					} catch (FinderException finderException) {
						log
								.log(Log.SEVERE,
										"Finder Exception occurred in finding MailActivityDetail entity");
					}
					if (mailActivityDetail != null) {
						mailActivityDetail.setActualTime(null);
						mailActivityDetail.setPlannedTime(null);
						mailActivityDetail.setSlaStatus(null);
						log
								.log(Log.INFO,
										"MailActivityDetail has been updated");
					}
				} else if (OPERATION_FLAG_DELETE.equals(monitorMailSlaVo
						.getOperationFlag())) {
					MailActivityDetail mailActivityDetail = null;
					try {
						mailActivityDetail = MailActivityDetail.find(
								monitorMailSlaVo.getCompanyCode(),
								monitorMailSlaVo.getMailBagNumber(),
								SLAACTIVITY_ACCEPTANCE_TO_DEPARTURE);
					} catch (FinderException finderException) {
						log
								.log(Log.SEVERE,
										"Finder Exception occurred in finding MailActivityDetail entity");
					}
					if (mailActivityDetail != null) {
						mailActivityDetail.remove();
						log
								.log(Log.INFO,
										"MailActivityDetail has been removed");
					}
				}
			}
			// If the mail status is 'Arrived'
			else if (MAILSTATUS_ARRIVED.equals(monitorMailSlaVo.getActivity())) {
				/*
				 * Check whether the entry for this mail bag exists with the
				 * service level activity 'Acceptance To Departure'
				 */
				MailActivityDetail mailActivityDetail = null;
				try {
					mailActivityDetail = MailActivityDetail.find(
							monitorMailSlaVo.getCompanyCode(), monitorMailSlaVo
									.getMailBagNumber(),
							SLAACTIVITY_ACCEPTANCE_TO_DEPARTURE);
				} catch (FinderException finderException) {
					log
							.log(Log.SEVERE,
									"Finder Exception occurred in finding MailActivityDetail entity");
				}
				log.log(Log.FINE, "THE OPERATIONAL FLAG FOR THE ARR ",
						monitorMailSlaVo.getOperationFlag());
				if (mailActivityDetail != null) {
					log.log(Log.FINE, "THE ACCEPTANCE ENTITY GOT  ");
					log.log(Log.FINE, "THE ACCEPTANCE ENTITY GOT  ");
					if (OPERATION_FLAG_INSERT.equals(monitorMailSlaVo
							.getOperationFlag())) {
						log.log(Log.FINE, "THE OPERATIONAL FLAG FOR THE DLV ",
								monitorMailSlaVo.getOperationFlag());
						log.log(Log.FINE, "THE OPERATIONAL FLAG FOR THE arr ",
								monitorMailSlaVo.getOperationFlag());
						MailActivityDetailVO mailActivityDetailVO = null;
						mailActivityDetailVO = MailActivityDetail
								.findServiceTimeAndSLAId(monitorMailSlaVo
										.getCompanyCode(), poaCode, origin,
										destination, mailCategory,
										SLAACTIVITY_ARRIVAL_TO_DELIVERY,
										monitorMailSlaVo.getScanTime());
						log.log(Log.FINE, " The Mail Activcity Detailvo",
								mailActivityDetailVO);
						if (mailActivityDetailVO != null) {
							if (mailActivityDetailVO.getSlaIdentifier() != null
									&& !"".equals(mailActivityDetailVO
											.getSlaIdentifier())) {
								mailActivityDetailVO
										.setCompanyCode(monitorMailSlaVo
												.getCompanyCode());
								mailActivityDetailVO
										.setMailBagNumber(monitorMailSlaVo
												.getMailBagNumber());
								mailActivityDetailVO
										.setServiceLevelActivity(SLAACTIVITY_ARRIVAL_TO_DELIVERY);
								mailActivityDetailVO.setGpaCode(poaCode);
								mailActivityDetailVO
										.setPlannedTime(monitorMailSlaVo
												.getScanTime()
												.addHours(
														mailActivityDetailVO
																.getServiceTime()));
								mailActivityDetailVO.setActualTime(null);
								mailActivityDetailVO
										.setAirlineCode(monitorMailSlaVo
												.getAirlineCode());
								mailActivityDetailVO
										.setAirlineIdentifier(monitorMailSlaVo
												.getAirlineIdentifier());
								mailActivityDetailVO
										.setFlightCarrierCode(monitorMailSlaVo
												.getFlightCarrierCode());
								mailActivityDetailVO
										.setFlightCarrierId(monitorMailSlaVo
												.getFlightCarrierIdentifier());
								mailActivityDetailVO
										.setFlightNumber(monitorMailSlaVo
												.getFlightNumber());
								mailActivityDetailVO
										.setMailCategory(mailCategory);
								mailActivityDetailVO.setSlaStatus(null);
								new MailActivityDetail(mailActivityDetailVO);
							}
						}
					}
					if (OPERATION_FLAG_UPDATE.equals(monitorMailSlaVo
							.getOperationFlag())) {

						mailActivityDetail = null;
						try {
							mailActivityDetail = MailActivityDetail.find(
									monitorMailSlaVo.getCompanyCode(),
									monitorMailSlaVo.getMailBagNumber(),
									SLAACTIVITY_ARRIVAL_TO_DELIVERY);
						} catch (FinderException finderException) {
							log
									.log(Log.SEVERE,
											"Finder Exception occurred in finding MailActivityDetail entity");
						}
						if (mailActivityDetail != null) {
							mailActivityDetail.setPlannedTime(monitorMailSlaVo
									.getScanTime());
						} else {
							// Insert the record
							MailActivityDetailVO mailActivityDetailVO = null;
							mailActivityDetailVO = MailActivityDetail
									.findServiceTimeAndSLAId(monitorMailSlaVo
											.getCompanyCode(), poaCode, origin,
											destination, mailCategory,
											SLAACTIVITY_ARRIVAL_TO_DELIVERY,
											monitorMailSlaVo.getScanTime());
							if (mailActivityDetailVO != null) {
								if (mailActivityDetailVO.getSlaIdentifier() != null
										&& !"".equals(mailActivityDetailVO
												.getSlaIdentifier())) {
									mailActivityDetailVO
											.setCompanyCode(monitorMailSlaVo
													.getCompanyCode());
									mailActivityDetailVO
											.setMailBagNumber(monitorMailSlaVo
													.getMailBagNumber());
									mailActivityDetailVO
											.setServiceLevelActivity(SLAACTIVITY_ARRIVAL_TO_DELIVERY);
									mailActivityDetailVO.setGpaCode(poaCode);
									mailActivityDetailVO
											.setPlannedTime(monitorMailSlaVo
													.getScanTime()
													.addHours(
															mailActivityDetailVO
																	.getServiceTime()));
									mailActivityDetailVO.setActualTime(null);
									mailActivityDetailVO
											.setAirlineCode(monitorMailSlaVo
													.getAirlineCode());
									mailActivityDetailVO
											.setAirlineIdentifier(monitorMailSlaVo
													.getAirlineIdentifier());
									mailActivityDetailVO
											.setFlightCarrierCode(monitorMailSlaVo
													.getFlightCarrierCode());
									mailActivityDetailVO
											.setFlightCarrierId(monitorMailSlaVo
													.getFlightCarrierIdentifier());
									mailActivityDetailVO
											.setFlightNumber(monitorMailSlaVo
													.getFlightNumber());
									mailActivityDetailVO
											.setMailCategory(mailCategory);
									mailActivityDetailVO.setSlaStatus(null);
									new MailActivityDetail(mailActivityDetailVO);
								}
							}
						}
					}
				}
			}
			// If the mail status is 'Delivered'
			else if (MAILSTATUS_DELIVERED
					.equals(monitorMailSlaVo.getActivity())) {
				log.log(Log.FINE, "THE OPERATIONAL FLAG FOR THE DLV ",
						monitorMailSlaVo.getOperationFlag());
				if (OPERATION_FLAG_UPDATE.equals(monitorMailSlaVo
						.getOperationFlag())) {
					MailActivityDetail mailActivityDetail = null;
					try {
						mailActivityDetail = MailActivityDetail.find(
								monitorMailSlaVo.getCompanyCode(),
								monitorMailSlaVo.getMailBagNumber(),
								SLAACTIVITY_ARRIVAL_TO_DELIVERY);
					} catch (FinderException finderException) {
						log
								.log(Log.SEVERE,
										"Finder Exception occurred in finding MailActivityDetail entity");
					}
					if (mailActivityDetail != null) {
						/*
						 * If the actual time is greater than planned time, set
						 * SLA staus to F-Failure, else, S-Success
						 */
						if (monitorMailSlaVo.getScanTime().isGreaterThan(
								new LocalDate(getLogonAirport(), Location.ARP,
										mailActivityDetail.getPlannedTime(),
										true))) {
							mailActivityDetail.setSlaStatus(SLASTATUS_FAILURE);
						} else {
							mailActivityDetail.setSlaStatus(SLASTATUS_SUCCESS);
						}
						mailActivityDetail.setActualTime(monitorMailSlaVo
								.getScanTime());
						log
								.log(Log.INFO,
										"MailActivityDetail has been updated");
					}
				}
			}
		}
		log.entering(CLASS, "monitorMailSLAActivity");
	}

	/**
	 * Utilty for finding syspar Mar 23, 2007, A-1739
	 *
	 * @param syspar
	 * @return
	 * @throws SystemException
	 */
	public String findSystemParameterValue(String syspar)
			throws SystemException {
		String sysparValue = null;
		ArrayList<String> systemParameters = new ArrayList<String>();
		systemParameters.add(syspar);
		HashMap<String, String> systemParameterMap = Proxy.getInstance().get(SharedDefaultsProxy.class)
				.findSystemParameterByCodes(systemParameters);
		log.log(Log.FINE, " systemParameterMap ", systemParameterMap);
		if (systemParameterMap != null) {
			sysparValue = systemParameterMap.get(syspar);
		}
		return sysparValue;
	}

	/**
	 * This method checks whether ULD integration Enabled or not
	 *
	 * @return
	 * @throws SystemException
	 */
	public boolean isULDIntegrationEnabled() throws SystemException {
		boolean isULDIntegrationEnabled = false;
		ArrayList<String> systemParameters = new ArrayList<String>();
		systemParameters.add(MailConstantsVO.ULD_INTEGRATION_ENABLED);
		HashMap<String, String> systemParameterMap = null;
		systemParameterMap = Proxy.getInstance().get(SharedDefaultsProxy.class)
				.findSystemParameterByCodes(systemParameters);
		log.log(Log.FINE, " systemParameterMap ", systemParameterMap);
		if (systemParameterMap != null
				&& ContainerVO.FLAG_YES.equals(systemParameterMap
						.get(MailConstantsVO.ULD_INTEGRATION_ENABLED))) {
			isULDIntegrationEnabled = true;
		}
		log
				.log(Log.FINE, " isULDIntegrationEnabled :",
						isULDIntegrationEnabled);
		return isULDIntegrationEnabled;
	}

	private void constructDetailsForIntegrationForSaveCotainers(
			ContainerVO containerVO, boolean isUMSUpdateNeeded,
			Collection<ULDInFlightVO> uldInFlightVos, boolean isOprUldEnabled,
			Collection<UldInFlightVO> operationalUlds,
			ULDInFlightVO uldInFlightVO) {

		if (containerVO != null && containerVO.getContainerNumber() != null &&
				containerVO.getContainerNumber().length() >= 3) {
			/**
			 * Added By Karthick V to incorporate the Changes that the
			 * AKE12345EK which is an Actual ULD is being used as the Bulk .
			 *
			 */
			boolean isULD = false;
			isULD = MailConstantsVO.ULD_TYPE.equals(containerVO.getType());
			log.log(Log.FINE, "THE ULD TYPE IS ", isULD);
			if (isULD) {
                if (ContainerVO.OPERATION_FLAG_INSERT.equals(containerVO.getOperationFlag()) ||
					ContainerVO.OPERATION_FLAG_UPDATE.equals(containerVO.getOperationFlag())) {
					if (isUMSUpdateNeeded) {
						//Modified by A-7794 as part of ICRD-223360 , null check
                        if (null == uldInFlightVos) {
							uldInFlightVos =  new ArrayList<ULDInFlightVO>();
							}
						uldInFlightVO = new ULDInFlightVO();
						uldInFlightVO.setPointOfLading(containerVO
								.getAssignedPort());
						uldInFlightVO.setPointOfUnLading(containerVO
								.getPou());
						uldInFlightVO.setUldNumber(containerVO
								.getContainerNumber());
						uldInFlightVO.setRemark(MailConstantsVO.MAIL_ULD_ASSIGNED);
						uldInFlightVos.add(uldInFlightVO);
					}
                    if (!containerVO.isReassignFlag() &&
                            isOprUldEnabled &&
						MailConstantsVO.ULD_TYPE.equals(containerVO.getType())) {
                        log.log(Log.FINE, "ITS AN ULD SO ADDING TO THE OPERATIONAL ULDS ");
						operationalUlds.add(constructUldInFlightVO(containerVO));
					}
				}
			}
		}


    }

    /**
     * @param containerVos
     * @throws SystemException
	 * @author a-1936 This method is used to save the containers for Destination
	 */
	private void saveContainersForDestination(
			Collection<ContainerVO> containerVos) throws SystemException {
		log.entering(CLASS, "saveContainersForDestination");
		log.log(Log.FINE, "Containers to Save ", containerVos);
		if (containerVos != null && containerVos.size() > 0) {
			for (ContainerVO containerVo : containerVos) {
				if (OPERATION_FLAG_INSERT
						.equals(containerVo.getOperationFlag())) {
					createContainer(containerVo);
				} else if (OPERATION_FLAG_UPDATE.equals(containerVo
						.getOperationFlag())) {
					modifyContainer(containerVo);
				} else if (OPERATION_FLAG_DELETE.equals(containerVo
						.getOperationFlag())) {
					deleteContainer(containerVo);
				}
			}
		}
	}

	/**
     * @param operationalFlightVO
     * @param containerVos
     * @throws SystemException
     * @throws ContainerAssignmentException
	 * @author a-1936 This method is used to save the containers for the flight
	 *         checks 1.check whether the Fligt is Closed if Exception 2.else
	 *         find finderthrown create 3.For each ContainerVo call
	 *         findflightsegments group the containers get segsernum and check
	 *         findassignedflightsegment if no create
	 */
	private void saveContainersForFlight(
			OperationalFlightVO operationalFlightVO,
			Collection<ContainerVO> containerVos) throws SystemException,
			ContainerAssignmentException {
		log.entering(CLASS, "saveContainersForFlight");
		//Validate flight assignment if not assigned create an assignment
		validateAndCreateAssignedFlight(operationalFlightVO);

		if (containerVos != null && containerVos.size() > 0) {
			//Validate and obtain segment serial number from flight module
            containerVos = validateFlightForSegment(operationalFlightVO, containerVos);
			for (ContainerVO containerVo : containerVos) {
				containerVo.setCarrierId(operationalFlightVO.getCarrierId());
				containerVo.setCompanyCode(operationalFlightVO.getCompanyCode());
				containerVo.setFlightNumber(operationalFlightVO.getFlightNumber());
				containerVo.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
				containerVo.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
				//Validate flight segment assignment if not assigned in the segment create an assignment
				validateAssignedFlightSegment(containerVo);
			}
			log.log(Log.FINE, "Flight details ", operationalFlightVO);
			log.log(Log.FINE, "Containers to Save ", containerVos);
			//Save the containers to container master and child tables
			persistContainerVos(containerVos);
		}
	}

	private void performReassignFromSaveContainers(
            Collection<ContainerVO> reassignContainers, OperationalFlightVO operationalFlightVO) throws FlightClosedException, ContainerAssignmentException, InvalidFlightSegmentException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, SystemException, MailDefaultStorageUnitException {
		log.entering(CLASS, "performReassignFromSaveContainers");

		Map<String, Collection<ContainerVO>> pouContainersMap = null;
		Collection<String> pous = null;
		pouContainersMap = createPouContainersMap(reassignContainers);
		pous = pouContainersMap.keySet();
		for (String pou : pous) {
			int segsernum = 0;
			operationalFlightVO.setPou(pou);
			log.log(Log.INFO, "POU : ", pou);
			Collection<ContainerVO> containersReturn = null;
			//Reassign containers to the to flight or to destination for each POU by POU
			containersReturn = reassignContainers(pouContainersMap.get(pou), operationalFlightVO);
			if (containersReturn != null && containersReturn.size() > 0) {
				ContainerVO containerForReturn = new ArrayList<ContainerVO>(
						containersReturn).get(0);
				segsernum = containerForReturn.getSegmentSerialNumber();
			}
			if (segsernum <= 0) {
				segsernum = MailConstantsVO.DESTN_FLT;
			}
			for (ContainerVO reassignedCont : pouContainersMap.get(pou)) {
				reassignedCont.setSegmentSerialNumber(segsernum);
			}
		}

	}

	/**
	 * TODO Purpose Feb 6, 2007, A-1739
	 *
	 * @param containerDetailsVO
	 */
	private void updateFlightDetailsForMailbagVOs(
			ContainerDetailsVO containerDetailsVO) {
		Collection<MailbagVO> mailbagVOs = containerDetailsVO.getMailDetails();
		if (mailbagVOs != null && mailbagVOs.size() > 0) {
			for (MailbagVO mailbagVO : mailbagVOs) {
					mailbagVO.setSegmentSerialNumber(containerDetailsVO
						.getSegmentSerialNumber());
			}
		}
	}

	 /**
	* @param Collection<ContainerDetailsVO>
	* @return Collection<ContainerDetailsVO>
	* This function is to check whether any duplicate consignmentno with same unique ie first 20 character of despatch
	* exist with containers or within the container .If such a sitution occurs it will add bags,vol together with details
	* of first DespatchDetailsVO
	 * @throws SystemException
     * @author A-2107
 	*/

    private Collection<ContainerDetailsVO> compareAndCalculateTotalsOfDespatches(Collection<ContainerDetailsVO> containers) throws SystemException {
	   log.entering(CLASS, "compareAndCalculateTotalsOfDespatches");
	     DespatchDetailsVO despvo1 = null;
         DespatchDetailsVO despvo2 = null;
         Collection<DespatchDetailsVO> despatchVOs = null;
         List<DespatchDetailsVO> innerDespatchVOList = null;
         List<DespatchDetailsVO> outerDespatchVOList = null;
        if (containers != null && containers.size() > 0) {
            List<ContainerDetailsVO> containerVOList = (List<ContainerDetailsVO>) containers;
         int containerVOSize = containerVOList.size();
            for (int i = 0; i < containerVOSize; i++) {
               despatchVOs = containerVOList.get(i).getDesptachDetailsVOs();
                if (despatchVOs != null && despatchVOs.size() > 1) {
                    innerDespatchVOList = (List<DespatchDetailsVO>) despatchVOs;
                     int innerDespatchVOSize = innerDespatchVOList.size();
                    for (int j = 0; j < innerDespatchVOSize; j++) {
                           despvo1 = innerDespatchVOList.get(j);
                        for (int k = (j + 1); k < innerDespatchVOSize; k++) {
                                 despvo2 = innerDespatchVOList.get(k);
                            if (compareDespatchDetailsVOs(despvo1, despvo2)) {
                                	   log.log(Log.FINE, "Consignment no is same");
                                       despvo1.setAcceptedBags(despvo1.getAcceptedBags() + despvo2.getAcceptedBags());
                                       despvo1.setStatedBags(despvo1.getStatedBags() + despvo2.getStatedBags());
                                       //despvo1.setAcceptedWeight(despvo1.getAcceptedWeight() + despvo2.getAcceptedWeight());
                                      // despvo1.setStatedWeight(despvo1.getStatedWeight()+despvo2.getAcceptedWeight());
										try {
											despvo1.setAcceptedWeight(Measure.addMeasureValues(despvo1.getAcceptedWeight(), despvo2.getAcceptedWeight()));
										} catch (UnitException e) {
											// TODO Auto-generated catch block
											throw new SystemException(e.getErrorCode());
										}

										try {
											despvo1.setStatedWeight(Measure.addMeasureValues(despvo1.getStatedWeight(), despvo2.getStatedWeight()));
										} catch (UnitException e) {
											// TODO Auto-generated catch block
											throw new SystemException(e.getErrorCode());
										}

                                       //despvo1.setStatedVolume(despvo1.getStatedVolume() + despvo2.getStatedVolume());
										try {
                                    despvo1.setStatedVolume(Measure.addMeasureValues(despvo1.getStatedVolume(), despvo2.getStatedVolume()));
										} catch (UnitException e) {
											// TODO Auto-generated catch block
											throw new SystemException(e.getErrorCode());
										}
                                       //despvo1.setAcceptedVolume(despvo1.getAcceptedVolume() + despvo2.getAcceptedVolume());
										try {
											despvo1.setAcceptedVolume(Measure.addMeasureValues(despvo1.getAcceptedVolume(), despvo2.getAcceptedVolume()));
										} catch (UnitException e) {
											// TODO Auto-generated catch block
											throw new SystemException(e.getErrorCode());
										}

                                       despvo1.setOperationalFlag(MailConstantsVO.OPERATION_FLAG_INSERT);
                                       innerDespatchVOList.remove(despvo2);
                                       j--;
                                       innerDespatchVOSize = innerDespatchVOList.size();
                                 }
                           }
                        for (int l = (i + 1); l < containerVOSize; l++) {
                                 despatchVOs = containerVOList.get(l).getDesptachDetailsVOs();
                            if (despatchVOs != null && despatchVOs.size() > 1) {
                                outerDespatchVOList = (List<DespatchDetailsVO>) despatchVOs;
                                       int outerDespatchVOSize = outerDespatchVOList.size();
                                for (int m = 0; m < outerDespatchVOSize; m++) {
                                             despvo2 = outerDespatchVOList.get(m);
                                    if (compareDespatchDetailsVOs(despvo1, despvo2)) {
                                                   log.log(Log.FINE, "Consignment no is same");
                                                   despvo1.setAcceptedBags(despvo1.getAcceptedBags() + despvo2.getAcceptedBags());
                                                   despvo1.setStatedBags(despvo1.getStatedBags() + despvo2.getStatedBags());
                                                   //despvo1.setAcceptedWeight(despvo1.getAcceptedWeight() + despvo2.getAcceptedWeight());//added by A-7371

													try {
														despvo1.setAcceptedWeight(Measure.addMeasureValues(despvo1.getAcceptedWeight(), despvo2.getAcceptedWeight()));
													} catch (UnitException e) {
														// TODO Auto-generated catch block
														throw new SystemException(e.getErrorCode());
													}

                                                   //despvo1.setStatedWeight(despvo1.getStatedWeight() + despvo2.getStatedWeight());//added by A-7371

													try {
														despvo1.setStatedWeight(Measure.addMeasureValues(despvo1.getStatedWeight(), despvo2.getStatedWeight()));
													} catch (UnitException e) {
														// TODO Auto-generated catch block
														throw new SystemException(e.getErrorCode());
													}

                                                   //despvo1.setStatedVolume(despvo1.getStatedVolume() + despvo2.getStatedVolume());
													try {
														despvo1.setStatedVolume(Measure.addMeasureValues(despvo1.getStatedVolume(), despvo2.getStatedVolume()));
													} catch (UnitException e) {
														// TODO Auto-generated catch block
														throw new SystemException(e.getErrorCode());
													}//added by A-7371
                                                   //despvo1.setAcceptedVolume(despvo1.getAcceptedVolume() + despvo2.getAcceptedVolume());
													try {
														despvo1.setAcceptedVolume(Measure.addMeasureValues(despvo1.getAcceptedVolume(), despvo2.getAcceptedVolume()));
													} catch (UnitException e) {
														// TODO Auto-generated catch block
														throw new SystemException(e.getErrorCode());
													}

                                                   despvo1.setOperationalFlag(MailConstantsVO.OPERATION_FLAG_INSERT);
                                                   outerDespatchVOList.remove(despvo2);
                                                   m--;
                                                   outerDespatchVOSize = outerDespatchVOList.size();
                                             }
                                       }
                                 }
                           }


                     }
               }
         }
         }
         return containers;
   }

   /**
	 * A-1739
	 *
	 * @param despatchMap
	 * @param containerDetails
	 */
	private Map<String, Collection<DespatchDetailsVO>> groupDespatchesForConsignment(
			Collection<ContainerDetailsVO> containerDetails) {

		Map<String, Collection<DespatchDetailsVO>> despatchMap = new HashMap<String, Collection<DespatchDetailsVO>>();
        if (containerDetails != null && containerDetails.size() > 0) {
		for (ContainerDetailsVO containerDetailsVO : containerDetails) {
			if (containerDetailsVO.getOperationFlag() != null) {
				Collection<DespatchDetailsVO> despatchDetailsVOs = containerDetailsVO
						.getDesptachDetailsVOs();
				if (despatchDetailsVOs != null && despatchDetailsVOs.size() > 0) {

					for (DespatchDetailsVO despatchDetailsVO : despatchDetailsVOs) {
						if (despatchDetailsVO.getOperationalFlag() != null
								&& OPERATION_FLAG_INSERT.equals(despatchDetailsVO.getOperationalFlag())) {
							String documentPK = constructDocumentPK(
									despatchDetailsVO, containerDetailsVO);
							Collection<DespatchDetailsVO> docDespatches = despatchMap
									.get(documentPK);
							if (docDespatches == null) {
								docDespatches = new ArrayList<DespatchDetailsVO>();
								despatchMap.put(documentPK, docDespatches);
							}
							if (MailConstantsVO.FLAG_YES
									.equals(containerDetailsVO.getPaBuiltFlag())) {
								despatchDetailsVO
										.setUldNumber(containerDetailsVO
												.getContainerNumber());
							} else {
								despatchDetailsVO.setUldNumber(null);
							}
							docDespatches.add(despatchDetailsVO);
						}
					}
				}
			}
		}
		}
		return despatchMap;
	}

	/**
	 * This methods constructs a docPK for consignment master save A-1739
	 *
	 * @param docPK
	 * @param despatches
	 * @param airportCode
	 * @return
	 */
	private ConsignmentDocumentVO constructConsignmentDocVO(String docPK,
			Collection<DespatchDetailsVO> despatches, String airportCode) {
		String[] tokens = docPK.split(ID_SEP);
		int idx = 0;
		ConsignmentDocumentVO docVO = new ConsignmentDocumentVO();
		docVO.setCompanyCode(tokens[idx++]);
		docVO.setConsignmentNumber(tokens[idx++]);
		docVO.setPaCode(tokens[idx++]);
		LocalDate consignDate = new LocalDate(LocalDate.NO_STATION,
				Location.NONE, false);
		consignDate.setDate(tokens[idx++]);
		docVO.setConsignmentDate(consignDate);
		docVO.setAirportCode(airportCode);
		constructMailConsignsFromDespatch(despatches, docVO);
		docVO.setOperation(MailConstantsVO.OPERATION_OUTBOUND);

		return docVO;
	}

	/**
	 * A-1739
	 *
	 * @param consignmentSeqNum
	 * @param despatches
	 */
	private void updateDespatchesSequenceNum(int consignmentSeqNum,
			Collection<DespatchDetailsVO> despatches) {
		for (DespatchDetailsVO despatchDetailsVO : despatches) {
			despatchDetailsVO.setConsignmentSequenceNumber(consignmentSeqNum);
		}
	}

	 /**
	    * findCityForOfficeOfExchange
     *
	    * @param companyCode
	    * @param officeOfExchanges
     * @return MAP<CITY   ,   OFFICE_OF_EXCHANGE>
	    * @throws SystemException
	    */
    public HashMap<String, String> findCityForOfficeOfExchange(String companyCode, Collection<String> officeOfExchanges)
            throws SystemException {
		   log.entering(CLASS, "findCityForOfficeOfExchange");
		   CacheFactory factory = CacheFactory.getInstance();
			OfficeOfExchangeCache cache = factory
				.getCache(OfficeOfExchangeCache.ENTITY_NAME);
			return cache.findCityForOfficeOfExchange(companyCode,officeOfExchanges);
	   }
    

	   /**
     * @return
     * @throws SystemException
		 * @author a-1936 Added By Karthick V This method is used to find the Logon
		 *         Airport From the Logon Attributes.
		 */
		public String getLogonAirport() throws SystemException {
			log.log(Log.FINE, " Finding the  Airport from the Logon Attributes");
			LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
					.getLogonAttributesVO();
			return logonAttributes.getAirportCode();
		}

		private UldInFlightVO constructUldInFlightVO(ContainerVO containerVO) {
			UldInFlightVO uldInFlightVO = new UldInFlightVO();
			uldInFlightVO.setCompanyCode(containerVO.getCompanyCode());
			uldInFlightVO.setUldNumber(containerVO.getContainerNumber());
			uldInFlightVO.setPou(containerVO.getPou());
			uldInFlightVO.setAirportCode(containerVO.getAssignedPort());
			uldInFlightVO.setCarrierId(containerVO.getCarrierId());
			if (containerVO.getFlightSequenceNumber() > 0) {
				uldInFlightVO.setFlightNumber(containerVO.getFlightNumber());
				uldInFlightVO.setFlightSequenceNumber(containerVO
						.getFlightSequenceNumber());
				uldInFlightVO.setLegSerialNumber(containerVO.getLegSerialNumber());
			}
			uldInFlightVO.setFlightDirection(MailConstantsVO.OPERATION_OUTBOUND);
			return uldInFlightVO;
		}

		/**
     * @param containerVo
     * @throws SystemException
		 * @author a-1936 This method is used to create a new Container in the
		 *         System
		 */
		private Container createContainer(ContainerVO containerVo)
				throws SystemException {
			MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
			ContainerPK containerPk = new ContainerPK();
			Container container = null;
			containerPk.setContainerNumber(containerVo.getContainerNumber());
			containerPk.setAssignmentPort(containerVo.getAssignedPort());
			containerPk.setCarrierId(containerVo.getCarrierId());
			containerPk.setFlightNumber(containerVo.getFlightNumber());
			containerPk.setFlightSequenceNumber(containerVo
					.getFlightSequenceNumber());
			containerPk.setLegSerialNumber(containerVo.getLegSerialNumber());
			containerPk.setCompanyCode(containerVo.getCompanyCode());
			try {
				container = Container.find(containerPk);
			} catch (FinderException ex) {
				//System.out.println(ex.getMessage());
			}
        if (container == null) {
				container = new Container(containerVo);
				if(!"B".equals(containerVo.getType()))
				{
				mailController.flagMLDForMailOperationsInULD(containerVo,MailConstantsVO.MLD_STG);
				}
			}
			ContainerAuditVO containerAuditVO = new ContainerAuditVO(
					ContainerVO.MODULE, ContainerVO.SUBMODULE, ContainerVO.ENTITY);
			containerAuditVO = (ContainerAuditVO) AuditUtils.populateAuditDetails(
					containerAuditVO, container, true);
			collectContainerAuditDetails(container, containerAuditVO);

			//Removed Audit code for Assignment as part of IASCB-84649
				
			return container; 
		}


			
			

		/**
     * @param containerVo
     * @throws SystemException
		 * @author a-1936 This method is used to modify the container
		 */
		private void modifyContainer(ContainerVO containerVo)
				throws SystemException {
			ContainerPK containerPk = new ContainerPK();
			Container container = null;
			containerPk.setContainerNumber(containerVo.getContainerNumber());
			containerPk.setAssignmentPort(containerVo.getAssignedPort());
			containerPk.setCarrierId(containerVo.getCarrierId());
			containerPk.setFlightNumber(containerVo.getFlightNumber());
			containerPk.setFlightSequenceNumber(containerVo
					.getFlightSequenceNumber());
			containerPk.setLegSerialNumber(containerVo.getLegSerialNumber());
			containerPk.setCompanyCode(containerVo.getCompanyCode());
			try {
				container = Container.find(containerPk);
			} catch (FinderException ex) {
				throw new SystemException(ex.getErrorCode(), ex);
			}

			if (MailConstantsVO.FLAG_YES.equals(container.getAcceptanceFlag()) &&
				(containerVo.getOnwardRoutings() != null && !containerVo.getOnwardRoutings().isEmpty())
						|| (container.getOnwardRoutes() != null && !container.getOnwardRoutes().isEmpty())) {
					updateOnwardRoutingForULDSeg(containerVo);
				}
			
            if(containerVo.isFromDeviationList()&&container.getTransitFlag()!=null){
            	containerVo.setTransitFlag(container.getTransitFlag());
            }
            if(container.getUldReferenceNo()> 0){
            	containerVo.setUldReferenceNo(container.getUldReferenceNo());
            }
            container.update(containerVo);
			ContainerAuditVO containerAuditVO = new ContainerAuditVO(
					ContainerVO.MODULE, ContainerVO.SUBMODULE, ContainerVO.ENTITY);
			collectContainerAuditDetails(container, containerAuditVO);
		//Update Audit Transaction is removed as part of IASCB-84649, Confirmed with Ansal Muhammed
			 }

		/**
     * @param containerVo
     * @throws SystemException
		 * @author a-1936 This method is used to delete the container
		 */
		private void deleteContainer(ContainerVO containerVo)
				throws SystemException {
			ContainerPK containerPk = new ContainerPK();
			Container container = null;
			containerPk.setContainerNumber(containerVo.getContainerNumber());
			containerPk.setAssignmentPort(containerVo.getAssignedPort());
			containerPk.setCarrierId(containerVo.getCarrierId());
			containerPk.setFlightNumber(containerVo.getFlightNumber());
			containerPk.setFlightSequenceNumber(containerVo
					.getFlightSequenceNumber());
			containerPk.setLegSerialNumber(containerVo.getLegSerialNumber());
			containerPk.setCompanyCode(containerVo.getCompanyCode());
			try {
				container = Container.find(containerPk);
			} catch (FinderException ex) {
				throw new SystemException(ex.getErrorCode(), ex);
			}
			//Added by A-5945 for ICRD-116673
        if (MailConstantsVO.BULK_TYPE.equals(container.getContainerType()) && !("-1").equals(containerVo.getFlightNumber()) && containerVo.getFlightSequenceNumber() > 0) {
            consrtuctAndRemoveBulkForSegment(containerVo);
			}
			ContainerAuditVO containerAuditVO = new ContainerAuditVO(ContainerVO.MODULE, ContainerVO.SUBMODULE, ContainerVO.ENTITY);
			//Added by A-5945 for ICRD-116673
			/*Removed as part of BUG ICRD-144076 by A-5526
			The code was came as part of merge from TK to base.*/
			containerAuditVO = (ContainerAuditVO) AuditUtils.populateAuditDetails(
					containerAuditVO, container, false);
			collectContainerAuditDetails(container, containerAuditVO);
			containerAuditVO.setActionCode(MailConstantsVO.AUD_CON_REM);
			container.setLastUpdateTime(containerVo.getLastUpdateTime());
			container.setLastUpdateUser(containerVo.getLastUpdateUser());
			container.remove();

			UldInFlightVO uldInFlightVO = new UldInFlightVO();
			uldInFlightVO.setCompanyCode(containerVo.getCompanyCode());
			uldInFlightVO.setUldNumber(containerVo.getContainerNumber());
			uldInFlightVO.setPou(containerVo.getPou());
			uldInFlightVO.setAirportCode(containerVo.getAssignedPort());
			uldInFlightVO.setCarrierId(containerVo.getCarrierId());
			if (containerVo.getFlightSequenceNumber() > 0) {
				uldInFlightVO.setFlightNumber(containerVo.getFlightNumber());
				uldInFlightVO.setFlightSequenceNumber(containerVo
						.getFlightSequenceNumber());
				uldInFlightVO.setLegSerialNumber(containerVo.getLegSerialNumber());
			}
			uldInFlightVO.setFlightDirection(MailConstantsVO.OPERATION_INBOUND);

			Collection<UldInFlightVO> operationalUlds = new ArrayList<UldInFlightVO>();
			operationalUlds.add(uldInFlightVO);

			boolean isOprUldEnabled = MailConstantsVO.FLAG_YES
					.equals(findSystemParameterValue(MailConstantsVO.FLAG_UPD_OPRULD));

			if (isOprUldEnabled) {
				if (!MailConstantsVO.BULK_TYPE.equals(containerVo.getType())) {
					if (operationalUlds != null && operationalUlds.size() > 0) {
						new OperationsFltHandlingProxy()
								.saveOperationalULDsInFlight(operationalUlds);
					}
				}
			}
			AuditUtils.performAudit(containerAuditVO);
		}

		/**
     * @param operationalFlightVO
     * @throws SystemException
     * @throws ContainerAssignmentException
		 * @author a-1936 This method is used to validateflight for closed status
		 *         and if not exists create
		 */
		private void validateAndCreateAssignedFlight(
				OperationalFlightVO operationalFlightVO) throws SystemException,
				ContainerAssignmentException {

			AssignedFlightPK assignedFlightPk = constructAssignedFlightPK(operationalFlightVO);
			try {
				AssignedFlight.find(assignedFlightPk);
			} catch (FinderException ex) {
				log.log(Log.INFO, "No Assigned Flight...Creating..");
				createAssignedFlight(operationalFlightVO);
			}
		}

    /**
     * @param operationalFlightVO
     * @param containerVos
     * @return
     * @throws SystemException
     * @throws ContainerAssignmentException
		 * @author a-1936 This method is used to get the segmentSerialNumber for
		 *         eacgh POL-POU combination
		 */
		public Collection<ContainerVO> validateFlightForSegment(
				OperationalFlightVO operationalFlightVO,
				Collection<ContainerVO> containerVos) throws SystemException,
				ContainerAssignmentException {
		// Main  intension of this method is to get the segment serial number

			Collection<FlightSegmentSummaryVO> segmentSummaryVos = null;
			int segmentSerialNumber = 0;
			log.log(Log.INFO, "Validate the Container For the Flight");
			segmentSummaryVos = new FlightOperationsProxy().findFlightSegments(
					operationalFlightVO.getCompanyCode(), operationalFlightVO
							.getCarrierId(), operationalFlightVO.getFlightNumber(),
					(int) operationalFlightVO.getFlightSequenceNumber());

			if (segmentSummaryVos != null && segmentSummaryVos.size() > 0) {
				for (ContainerVO containerVO : containerVos) {
					for (FlightSegmentSummaryVO segmentVo : segmentSummaryVos) {
                    if (segmentVo.getSegmentOrigin() != null &&
							segmentVo.getSegmentDestination() != null) {
                        if (segmentVo.getSegmentOrigin().equals(containerVO.getAssignedPort()) &&
								segmentVo.getSegmentDestination().equals(containerVO.getPou())) {
								segmentSerialNumber = segmentVo.getSegmentSerialNumber();
								containerVO.setSegmentSerialNumber(segmentSerialNumber);
								log.log(Log.FINE, "THE POL IS", containerVO.getAssignedPort());
								log.log(Log.FINE, "THE POU IS", containerVO.getPou());
                            log.log(Log.FINE, "THE SEGSERNUM FOR THE POL-POU", segmentSerialNumber);
								break;
							}
						}
					}
					if (containerVO.getSegmentSerialNumber() == 0) {
						throw new ContainerAssignmentException(
								ContainerAssignmentException.INVALID_FLIGHT_SEGMENT);
					}
				}
        } else {
				log.log(Log.SEVERE, "No Segment Details obtained from Flight module");
			}
			return containerVos;
		}

    /**
     * @param containerVo
     * @throws SystemException
		 * @author a-1936 If the segment for the particularFlight does not exist
		 *         create a FlightSegment
		 */
		private void validateAssignedFlightSegment(ContainerVO containerVo)
				throws SystemException {
			AssignedFlightSegmentPK assignedFlightSegmentPK = new AssignedFlightSegmentPK();
			assignedFlightSegmentPK.setCarrierId(containerVo.getCarrierId());
			assignedFlightSegmentPK.setCompanyCode(containerVo.getCompanyCode());
			assignedFlightSegmentPK.setFlightNumber(containerVo.getFlightNumber());
			assignedFlightSegmentPK.setFlightSequenceNumber(containerVo
					.getFlightSequenceNumber());
			assignedFlightSegmentPK.setSegmentSerialNumber(containerVo
					.getSegmentSerialNumber());
			try {
				AssignedFlightSegment.find(assignedFlightSegmentPK);
			} catch (FinderException ex) {
				log.log(Log.INFO, "FINDEREXCEPTION THROWN FOR ASSIGNEDFLTSEG");
				AssignedFlightSegmentVO assignedFlightSegmentVO = new AssignedFlightSegmentVO();
				assignedFlightSegmentVO.setCarrierId(containerVo.getCarrierId());
				assignedFlightSegmentVO
						.setCompanyCode(containerVo.getCompanyCode());
				assignedFlightSegmentVO.setFlightNumber(containerVo
						.getFlightNumber());
				assignedFlightSegmentVO.setFlightSequenceNumber(containerVo
						.getFlightSequenceNumber());
				assignedFlightSegmentVO.setPol(containerVo.getAssignedPort());
				assignedFlightSegmentVO.setPou(containerVo.getPou());
				assignedFlightSegmentVO.setSegmentSerialNumber(containerVo
						.getSegmentSerialNumber());

				/*
				 * Added By Karthick V to include the Status for importing the data
				 * from the Mail Operations that is used for the Mail Revenue
				 * Accounting ...
				 *
				 *
				 */
				assignedFlightSegmentVO
						.setMraStatus(MailConstantsVO.MRA_STATUS_NEW);
				new AssignedFlightSegment(assignedFlightSegmentVO);
			}
		}

		/**
     * @param containerVos
     * @throws SystemException
		 * @author a-1936 This method is used to persist the containers from the
		 *         collection
		 */
		private void persistContainerVos(Collection<ContainerVO> containerVos)
				throws SystemException {
			for (ContainerVO containerVo : containerVos) {
				if (OPERATION_FLAG_INSERT.equals(containerVo.getOperationFlag())) {
					createContainer(containerVo);
				} else if (OPERATION_FLAG_UPDATE.equals(containerVo
						.getOperationFlag())) {
					//IASCB-62684
					//found delivery case no need to update container as such,in case of deviation panel
					//else all the properties get reinitialize. if anything to be update new method should be invoked
					if(!containerVo.isFromDeviationList()) {
						modifyContainer(containerVo);
					}
				} else if (OPERATION_FLAG_DELETE.equals(containerVo
						.getOperationFlag())) {
					deleteContainer(containerVo);
				}
			}
		}

		/**
		 * Mar 13, 2007, a-1739
		 *
		 * @param reassignContainers
		 * @return
		 */
		private Map<String, Collection<ContainerVO>> createPouContainersMap(
				Collection<ContainerVO> reassignContainers) {
			Map<String, Collection<ContainerVO>> pouContainersMap = new HashMap<String, Collection<ContainerVO>>();
			Collection<ContainerVO> containerVOs = null;
			for (ContainerVO containerVO : reassignContainers) {
				containerVOs = pouContainersMap.get(containerVO.getPou());
				if (containerVOs == null) {
					containerVOs = new ArrayList<ContainerVO>();
					pouContainersMap.put(containerVO.getPou(), containerVOs);
				}
				containerVOs.add(containerVO);
			}
			return pouContainersMap;
		}

		/**
		 * This method reassigns a collection of containers from to another flight
		 * or destination A-1739
		 *
		 * @param containersToReassign
		 * @param toFlightVO
		 * @return
		 * @throws SystemException
		 * @throws FlightClosedException
		 * @throws ContainerAssignmentException
		 * @throws InvalidFlightSegmentException
		 * @throws ULDDefaultsProxyException
		 * @throws CapacityBookingProxyException
		 * @throws MailBookingException
		 */
    @Raise(module = "mail", submodule = "operations", event = "ASSIGNED_TOFLIGHT_EVENT", methodId = "mail.operations.reassignContainers", enablecontext="true")
		public Collection<ContainerVO> reassignContainers(
				Collection<ContainerVO> containersToReassign,
				OperationalFlightVO toFlightVO) throws SystemException,
				FlightClosedException, ContainerAssignmentException,
				InvalidFlightSegmentException, ULDDefaultsProxyException,
            CapacityBookingProxyException, MailBookingException, MailDefaultStorageUnitException {
			log.entering(CLASS, "reassignContainers");
			log.log(Log.FINE, "To Flight details ", toFlightVO);
			log.log(Log.FINE, "Containers to Reassign ", containersToReassign);
			return new ReassignController().reassignContainers(
					containersToReassign, toFlightVO);

		}

		  private boolean compareDespatchDetailsVOs(DespatchDetailsVO despvo1, DespatchDetailsVO despvo2) {
        if (despvo1.getConsignmentNumber().equalsIgnoreCase(despvo2.getConsignmentNumber()) &&
		               despvo1.getOriginOfficeOfExchange().equals(despvo2.getOriginOfficeOfExchange()) &&
		                     despvo1.getDestinationOfficeOfExchange().equals(despvo2.getDestinationOfficeOfExchange()) &&
		                           despvo1.getMailCategoryCode().equals(despvo2.getMailCategoryCode()) &&
		                                 despvo1.getMailSubclass().equals(despvo2.getMailSubclass()) &&
		                                       despvo1.getYear() == (despvo2.getYear()) &&
                despvo1.getDsn().equals(despvo2.getDsn())) {
		                                                   return true;
		         }
		         return false;
		   }

		  private String constructDocumentPK(DespatchDetailsVO despatchDetailsVO,
					ContainerDetailsVO containerDtlsVO) {
				return new StringBuilder().append(despatchDetailsVO.getCompanyCode())
						.append(ID_SEP)
						.append(despatchDetailsVO.getConsignmentNumber())
						.append(ID_SEP).append(despatchDetailsVO.getPaCode()).append(
								ID_SEP).append(
								despatchDetailsVO.getConsignmentDate()
										.toDisplayDateOnlyFormat()).toString();
			}

		  /**
			 * A-1739
			 *
			 * @param despatches
			 * @param docVO
			 * @return
			 */
			private void constructMailConsignsFromDespatch(
					Collection<DespatchDetailsVO> despatches,
					ConsignmentDocumentVO docVO) {
				Page<MailInConsignmentVO> mailInConsigns = new Page<MailInConsignmentVO>(
                new ArrayList<MailInConsignmentVO>(), 0, 0, 0, 0, 0, false);
				int statedBagDlt = 0;
				double statedWtDlt = 0;
				for (DespatchDetailsVO despatchDetailsVO : despatches) {
					MailInConsignmentVO mailInConsign = new MailInConsignmentVO();
					mailInConsign.setCompanyCode(despatchDetailsVO.getCompanyCode());
					mailInConsign.setConsignmentNumber(despatchDetailsVO
							.getConsignmentNumber());
					mailInConsign.setConsignmentSequenceNumber(despatchDetailsVO
							.getConsignmentSequenceNumber());
					mailInConsign.setPaCode(despatchDetailsVO.getPaCode());
					mailInConsign.setDsn(despatchDetailsVO.getDsn());
					mailInConsign.setOriginExchangeOffice(despatchDetailsVO
							.getOriginOfficeOfExchange());
					mailInConsign.setDestinationExchangeOffice(despatchDetailsVO
							.getDestinationOfficeOfExchange());
					mailInConsign.setMailClass(despatchDetailsVO.getMailClass());
					mailInConsign.setMailSubclass(despatchDetailsVO.getMailSubclass());
					mailInConsign.setMailCategoryCode(despatchDetailsVO
							.getMailCategoryCode());
					mailInConsign.setYear(despatchDetailsVO.getYear());
					mailInConsign.setStatedBags(despatchDetailsVO.getStatedBags());
					mailInConsign.setStatedWeight(despatchDetailsVO.getStatedWeight());
            if (despatchDetailsVO.getStatedBags() > 0) {
						mailInConsign.setStatedBags(despatchDetailsVO.getStatedBags());
						mailInConsign.setStatedWeight(despatchDetailsVO.getStatedWeight());
            } else {
						mailInConsign.setStatedBags(despatchDetailsVO.getReceivedBags());
						mailInConsign.setStatedWeight(despatchDetailsVO.getReceivedWeight());
					}
					mailInConsigns.add(mailInConsign);
					statedBagDlt += (despatchDetailsVO.getStatedBags() - despatchDetailsVO
							.getPrevStatedBags());
					/*statedWtDlt += (despatchDetailsVO.getStatedWeight() - despatchDetailsVO
							.getPrevStatedWeight());*/
					statedWtDlt += (despatchDetailsVO.getStatedWeight().getRoundedSystemValue() - despatchDetailsVO
							.getPrevStatedWeight().getRoundedSystemValue());//added by A-7371

					mailInConsign.setUldNumber(despatchDetailsVO.getUldNumber());
				}
				docVO.setMailInConsignmentVOs(mailInConsigns);
				/*
				 * Below Code Commented for the bug MTK549
				 */
				//docVO.setStatedBags(statedBagDlt);
				//docVO.setStatedWeight(statedWtDlt);
			}

    /**
			 * @param container
			 * @param containerAuditVO
     * @author a-1936 This method is used to collect the AuditDetails
			 */
			private void collectContainerAuditDetails(Container container,
					ContainerAuditVO containerAuditVO) {
				log.log(Log.FINE, "---------Setting ContainerAuditVO Details-------");
				StringBuffer additionalInfo = new StringBuffer();
				log.log(Log.INFO, " container.getContainerPK() ", container.getContainerPK());
				containerAuditVO.setCompanyCode(container.getContainerPK()
						.getCompanyCode());
				containerAuditVO.setContainerNumber(container.getContainerPK()
						.getContainerNumber());
				containerAuditVO.setAssignedPort(container.getContainerPK()
						.getAssignmentPort());
				containerAuditVO
						.setCarrierId(container.getContainerPK().getCarrierId());
				containerAuditVO.setFlightNumber(container.getContainerPK()
						.getFlightNumber());
				containerAuditVO.setFlightSequenceNumber(container.getContainerPK()
						.getFlightSequenceNumber());
				containerAuditVO.setLegSerialNumber(container.getContainerPK()
						.getLegSerialNumber());
				containerAuditVO.setUserId(container.getLastUpdateUser());

				if (containerAuditVO.getAuditFields() != null
						&& containerAuditVO.getAuditFields().size() > 0) {
					log.log(Log.INFO, "Going to populate additional info");
					for (AuditFieldVO auditField : containerAuditVO.getAuditFields()) {
						if (auditField != null) {
							additionalInfo.append(" Field Name: ").append(
									auditField.getFieldName());
							if (auditField.getOldValue() != null) {
								additionalInfo.append(" Old Value: ").append(
										auditField.getOldValue());
							}
							additionalInfo.append(" New Value: ").append(
									auditField.getNewValue());
						} else {
							log.log(Log.WARNING,
									"auditField is NULL!!!!!!!!!!!!!!!!!!!!!!!");
						}
					}
				}
				containerAuditVO.setAdditionalInformation(additionalInfo.toString());
				log.exiting("collectContainerAuditDetails",
						"...Finished construction of AuditVO");
			}

			/**
			 * TODO Purpose Dec 5, 2006, a-1739
			 *
			 * @param containerVO
			 * @throws SystemException
			 */
			private void updateOnwardRoutingForULDSeg(ContainerVO containerVO)
					throws SystemException {
				log.entering(CLASS, "updateOnwardRoutingForULDSeg");

				new AssignedFlightSegment().updateULDOnwardRoute(containerVO);

				log.exiting(CLASS, "updateOnwardRoutingForULDSeg");

			}

			//added By A-5945 for deleting bulk with zero manifested and zero received bags
			private void consrtuctAndRemoveBulkForSegment(
					ContainerVO containerVo) throws SystemException {
				log.entering(CLASS, "consrtuctAndRemoveBulkForSegment");
				log.log(Log.FINE, "The Container Vo is ", containerVo);
				ULDForSegment uldForSegment = null;
				ULDForSegmentPK uldForSegmentPK = new ULDForSegmentPK();
				uldForSegmentPK.setCompanyCode(containerVo.getCompanyCode());
				uldForSegmentPK.setCarrierId(containerVo.getCarrierId());
				uldForSegmentPK.setFlightNumber(containerVo.getFlightNumber());
				uldForSegmentPK.setFlightSequenceNumber(containerVo
						.getFlightSequenceNumber());
				uldForSegmentPK.setSegmentSerialNumber(containerVo
						.getSegmentSerialNumber());
				String bulkname = new StringBuilder("BULK").append("-").append(
						containerVo.getPou()).toString();
				uldForSegmentPK.setUldNumber(bulkname);
				try {
            uldForSegment = ULDForSegment.find(uldForSegmentPK);
				} catch (FinderException ex) {
					//Modified as part of bug ICRD-145625 by A-5526 starts
					/*If bulk is added thru Assign Container screen,no entry will stamp in MTKULDSEG.
					So while we trying to unassign always finder exception will thrown */
            uldForSegment = null;
					//Modified as part of bug ICRD-145625 by A-5526 ends
				}
        if (uldForSegment != null) {
					log.log(Log.FINE, "The uldForSegment is ", uldForSegment);
            if (uldForSegment.getNumberOfBags() == 0 && uldForSegment.getWeight() == 0.0 && uldForSegment.getReceivedBags() == 0 && uldForSegment.getReceivedWeight() == 0.0) {
						uldForSegment.remove();
					}
				}
			}

			private AssignedFlightPK constructAssignedFlightPK(
					OperationalFlightVO operationalFlightVO) {
				AssignedFlightPK assignedFlightPk = new AssignedFlightPK();
				//Added by A-6991 for CR INRD-77772 Starts
        if (operationalFlightVO.isForUCMSendChk()) {
					assignedFlightPk.setAirportCode(operationalFlightVO.getAirportCode());
        } else {
					assignedFlightPk.setAirportCode(operationalFlightVO.getPol());
				}
				//Added by A-6991 for CR INRD-77772 Starts
				assignedFlightPk.setCompanyCode(operationalFlightVO.getCompanyCode());
				assignedFlightPk.setFlightNumber(operationalFlightVO.getFlightNumber());
				assignedFlightPk.setFlightSequenceNumber(operationalFlightVO
						.getFlightSequenceNumber());
				assignedFlightPk.setLegSerialNumber(operationalFlightVO
						.getLegSerialNumber());
				assignedFlightPk.setCarrierId(operationalFlightVO.getCarrierId());
				return assignedFlightPk;
			}

			/**
     * @param operationalFlightVO
     * @throws SystemException
			 * @author a-1936 This method is used to create the assignedFlight
			 */
			private void createAssignedFlight(OperationalFlightVO operationalFlightVO)
					throws SystemException {
				AssignedFlightVO assignedFlightVO = new AssignedFlightVO();
				assignedFlightVO.setAirportCode(operationalFlightVO.getPol());
				assignedFlightVO.setCarrierCode(operationalFlightVO.getCarrierCode());
				assignedFlightVO.setCarrierId(operationalFlightVO.getCarrierId());
				assignedFlightVO.setCompanyCode(operationalFlightVO.getCompanyCode());
				assignedFlightVO.setFlightDate(operationalFlightVO.getFlightDate());
				assignedFlightVO.setFlightNumber(operationalFlightVO.getFlightNumber());
				assignedFlightVO.setFlightSequenceNumber(operationalFlightVO
						.getFlightSequenceNumber());
				assignedFlightVO.setFlightStatus(MailConstantsVO.FLIGHT_STATUS_OPEN);
				assignedFlightVO.setLegSerialNumber(operationalFlightVO
						.getLegSerialNumber());
				AssignedFlight assignedFlight = new AssignedFlight(assignedFlightVO);

				AssignedFlightAuditVO assignedFlightAuditVO = new AssignedFlightAuditVO(
						AssignedFlightVO.MODULE, AssignedFlightVO.SUBMODULE,
						AssignedFlightVO.ENTITY);
				assignedFlightAuditVO.setAdditionalInformation("Flight Created");
				performAssignedFlightAudit(assignedFlightAuditVO, assignedFlight,
						MailConstantsVO.AUDIT_FLT_CREAT);
			}

			/**
			 * @param assignedFlightAuditVO
			 * @param assignedFlight
			 * @param actionCode
			 * @throws SystemException
     * @author A-1936
			 */
			private void performAssignedFlightAudit(
					AssignedFlightAuditVO assignedFlightAuditVO,
					AssignedFlight assignedFlight, String actionCode)
					throws SystemException {
				AssignedFlightPK assignedFlightPK = assignedFlight
						.getAssignedFlightPk();
				assignedFlightAuditVO.setCompanyCode(assignedFlightPK.getCompanyCode());
				assignedFlightAuditVO.setAirportCode(assignedFlightPK.getAirportCode());
				assignedFlightAuditVO.setFlightNumber(assignedFlightPK
						.getFlightNumber());
				assignedFlightAuditVO.setFlightSequenceNumber(assignedFlightPK
						.getFlightSequenceNumber());
				assignedFlightAuditVO.setCarrierId(assignedFlightPK.getCarrierId());
				assignedFlightAuditVO.setLegSerialNumber(assignedFlightPK
						.getLegSerialNumber());
				assignedFlightAuditVO.setActionCode(actionCode);

				AuditUtils.performAudit(assignedFlightAuditVO);
				log.exiting("DSN", "performAssignedFlightAudit");
			}

			/**
     * @param containerNumber
     * @return
     * @throws SystemException
			 * @author A-3227
			 * This method fetches the latest Container Assignment
			 * irrespective of the PORT to which it is assigned.
			 * This to know the current assignment of the Contianer.
			 */
			public ContainerAssignmentVO findLatestContainerAssignment(String containerNumber) throws
			SystemException {
				ContainerAssignmentVO containerAssignmentVO = null;

				if (containerNumber != null) {
					LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
					containerAssignmentVO = Container.findLatestContainerAssignment(
							logonAttributes.getCompanyCode(), containerNumber);
				}
				return containerAssignmentVO;
			}


			/**
			 * Added by A-5526
     *
			 * @param containerVO
			 * @return
			 * @throws SystemException
			 */

			public ContainerAssignmentVO findContainerAssignmentForUpload(ContainerVO containerVO) throws
			SystemException {
				ContainerAssignmentVO containerAssignmentVO = null;

				if (containerVO.getContainerNumber() != null) {
					containerAssignmentVO = Container.findContainerAssignment(containerVO.getCompanyCode(),
							containerVO.getContainerNumber(), containerVO.getAssignedPort());
				}
				return containerAssignmentVO;
			}

			/**
     * @param flightFilterVO
     * @return
     * @throws SystemException
			 * @author a-1936 This a FlightProductProxyCall .This method is used to
			 *         validate the FlightForAirport
			 */
			public Collection<FlightValidationVO> validateFlight(
					FlightFilterVO flightFilterVO) throws SystemException {
				log.entering(CLASS, "validateFlight");

				
				return Proxy.getInstance().get(FlightOperationsProxy.class)
						.validateFlightForAirport(flightFilterVO);

			}

			/**
			 * @param companyCode
			 * @param officeOfExchange
			 * @return
			 * @throws SystemException
			 */
    public OfficeOfExchangeVO validateOfficeOfExchange(String companyCode, String officeOfExchange)
            throws SystemException {
		    Page<OfficeOfExchangeVO> officeOfExchangePage = null;
		    OfficeOfExchangeVO officeOfExchangeVO=null;
		    CacheFactory factory = CacheFactory.getInstance();
		    OfficeOfExchangeCache cache = factory  
			.getCache(OfficeOfExchangeCache.ENTITY_NAME);
		     officeOfExchangePage= cache.findOfficeOfExchange(companyCode,officeOfExchange,1);
		     if(officeOfExchangePage!=null && !officeOfExchangePage.isEmpty()
				 &&officeOfExchangePage.iterator().next().isActive()){
		    	 officeOfExchangeVO =officeOfExchangePage.iterator().next() ;
			  }
		 return officeOfExchangeVO;
			}

			/**
     * @param bookingVoToBeSaved
     * @param maintainReservationForm
     * @param invocationContext
			 * @author A-1936 Added By Karthick v as the part of the NCA Mail Tracking
			 *         CR -(Auto Create UBrs For the Booking) Validating commodity codes
			 *         in each Shipment DetailVO and calculating the Volume by using the
			 *         Density factor of the corrosponding commodity if it is not
			 *         specified by the user.. Since this is an despacth to the Booking
			 *         Server Straight away the Booking Client Code is skipped where
			 *         these calculations afre actually done so its better to do the
			 *         Volume Calculations in MailTracking System even before the
			 *         Despacth..
			 */
			public CommodityValidationVO validateCommodity(String companyCode,
					String commodityCode,String poaCode) throws SystemException {
				log.entering("ValidateBookingCommand", "doCommodityCodeValidation");
				CommodityValidationVO commodityValidationVo = null;
				Collection<String> commodityColl = new ArrayList<String>();
				Map<String, CommodityValidationVO> commodityMap = null;
				String densityFactor=null;
				if(poaCode!=null && !poaCode.isEmpty()){				
				densityFactor=findDensityfactorForPA(companyCode,poaCode);
				}
				if(densityFactor!=null && !densityFactor.isEmpty()){
					commodityValidationVo=new CommodityValidationVO();
					commodityValidationVo.setCompanyCode(companyCode);
					commodityValidationVo.setDensityFactor(Double.parseDouble(densityFactor));
					return commodityValidationVo;
				}
				/*
				 * Since for all the Mails the commodity Code Is MAL OR a value which
				 * will be always unique..
				 */
				commodityColl.add(commodityCode);
				try {
					commodityMap = Proxy.getInstance().get(SharedCommodityProxy.class).validateCommodityCodes(
							companyCode, commodityColl);
				} catch (ProxyException ex) {
					throw new SystemException(ex.getMessage());
				}
				if (commodityMap != null && commodityMap.size() > 0) {
					commodityValidationVo = commodityMap.get(commodityCode);
				}
				return commodityValidationVo;
			}

			/**
			 * 	Method		:	MailController.validateDestination
			 *	Added by 	:
			 * 	Used for 	:
			 *	Parameters	:	@param scannedMailDetailsVO
			 *	Parameters	:	@return
			 *	Parameters	:	@throws SystemException
			 *	Return type	: 	boolean
			 */
    public boolean validateAirport(String airport, String companyCode) throws SystemException {
				Log logger = LogFactory.getLogger("mail.operations");
				logger.entering("MAILCONTROLLER", "validateDestination");
				AirportValidationVO airportValidationVO = null;

		    	if (airport != null && !"".equals(airport)) {

		    		try {

		    			
		    			airportValidationVO=Proxy.getInstance().get(SharedAreaProxy.class).validateAirportCode(

                        companyCode, airport.toUpperCase());
            } catch (SystemException ex) {
                return false;
            }
            if (airportValidationVO != null) {
		    			logger.log(Log.INFO, "true");
		    			return true;
		    		}
			   }
		    	logger.log(Log.INFO, "false");
				return false;
			}

			 /**
	         * @param shipmentDetailsVos
	         * @return
	         * @throws SystemException
     * @author A-4810
	         */
			public Collection<EmbargoDetailsVO> checkEmbargoForMail(
            Collection<ShipmentDetailsVO> shipmentDetailsVos) throws SystemException {
				RecoDefaultsProxy recoDefaultsProxy = new RecoDefaultsProxy();
        Collection<EmbargoDetailsVO> embargoDetailsVOs = null;
				try {
					embargoDetailsVOs = recoDefaultsProxy.checkForEmbargo(shipmentDetailsVos);
				} catch (SystemException e) {
					log.log(Log.INFO, e.getMessage());
				}
				return embargoDetailsVOs;
			}

			/**
			 * Validates the mailbags for upload Oct 6, 2006, a-1739
			 *
			 * @param mailbags
			 * @return
			 * @throws InvalidMailTagFormatException
			 * @throws SystemException
			 */
			public Collection<com.ibsplc.icargo.business.mail.operations.vo.MailbagVO> validateScannedMailbagDetails(Collection<com.ibsplc.icargo.business.mail.operations.vo.MailbagVO> mailbags) throws
			InvalidMailTagFormatException, SystemException {
				//Collection<com.ibsplc.icargo.business.mail.operations.vo.MailbagVO> mailbags = new ArrayList<com.ibsplc.icargo.business.mail.operations.vo.MailbagVO>();

				//BeanHelper.copyProperties(mailbags, oldMailbags);
				boolean isFromHHT = true;

        if (mailbags != null && mailbags.size() > 0 && MailConstantsVO.MLD.equals(
                mailbags.iterator().next().getMailSource())) {
					isFromHHT = false;
				}
				new Mailbag().validateMailBags(mailbags, isFromHHT);
//Collection<com.ibsplc.icargo.business.mailtracking.defaults.vo.MailbagVO> mailbagsToReturn = new ArrayList<com.ibsplc.icargo.business.mailtracking.defaults.vo.MailbagVO>();
//
//				BeanHelper.copyProperties(mailbagsToReturn, mailbags);
				return mailbags;
			}

    /**
			 * Validates the mailbags for upload Oct 6, 2006, a-1739
			 *
			 * @param mailbags
			 * @return
			 * @throws InvalidMailTagFormatException
			 * @throws SystemException
			 */
			public Collection<MailbagVO> validateScannedMailDetails(Collection<MailbagVO> mailbags) throws
			InvalidMailTagFormatException, SystemException {

				boolean isFromHHT = true;

        if (mailbags != null && mailbags.size() > 0 && MailConstantsVO.MLD.equals(
                mailbags.iterator().next().getMailSource())) {
					isFromHHT = false;
				}
				new Mailbag().validateMailBags(mailbags, isFromHHT);

				return mailbags;
			}

			/**
     * @param companyCode
     * @param subclass
     * @return
     * @throws SystemException
			  * @author A-3227 Reno K Abraham
			  * This method is used to validate the MailSubClass
     */
    public boolean validateMailSubClass(String companyCode, String subclass)
            throws SystemException {
					log.entering(CLASS, "validateMailSubClass");
        return new Mailbag().validateMailSubClass(companyCode, subclass);

    }

    /**
     * @param containerVO
     * @return
     * @throws SystemException
				 * @author a-1936 This method is used to retrieve the
				 *         ContainerassignmentDetails if it is already assigned
				 */
				public ContainerAssignmentVO findContainerAssignment(ContainerVO containerVO)
						throws SystemException {
					ContainerAssignmentVO containerAssignmentVO = null;
					return Container.findContainerAssignment(containerVO.getCompanyCode(), containerVO.getContainerNumber(), containerVO.getAssignedPort());
				}

    /**
     * @param containerVO
     * @return
     * @throws FinderException
     * @throws SystemException
				 * @author a-1936 Added By Karthick V as the part of the NCA Mail Tracking
				 *         Bug Fix
				 */
				public Container findContainer(ContainerVO containerVO)
						throws FinderException, SystemException {
					log.entering(CLASS, "findContainer");
					Container container = null;
					ContainerPK containerPK = new ContainerPK();
					containerPK.setAssignmentPort(containerVO.getAssignedPort());
					containerPK.setCarrierId(containerVO.getCarrierId());
					containerPK.setCompanyCode(containerVO.getCompanyCode());
					containerPK.setContainerNumber(containerVO.getContainerNumber());
					containerPK.setFlightNumber(containerVO.getFlightNumber());
					containerPK.setFlightSequenceNumber(containerVO
							.getFlightSequenceNumber());
					containerPK.setLegSerialNumber(containerVO.getLegSerialNumber());

					container = Container.find(containerPK);

					log.exiting(CLASS, "findContainer");
					return container;
				}

				/**
				 * @param companyCode
				 * @param containerNumber
				 * @return
				 * @throws SystemException
				 */
				public  boolean validateUld(String companyCode, String containerNumber) throws SystemException {
					Log logger = LogFactory.getLogger("mail.operations");
					ULDVO uldVO = null;
					logger.entering("MAILCONTROLLER", "validateUld");
					 	if (containerNumber != null && !"".equals(containerNumber)) {
			    			try {
			    				uldVO = new ULDDefaultsProxy().findULDDetails(companyCode, containerNumber);
							} catch (ULDDefaultsProxyException e) {
								return false;
							}
            if (uldVO != null) {
								return true;
							}
			    		}
					return false;
				}

				/**
     * @param operationalFlightVO
     * @return
     * @throws SystemException
				 * @author a-1936 This method is used to check whether the Flight is closed
				 *         for Operations
				 */
				public boolean isFlightClosedForOperations(
						OperationalFlightVO operationalFlightVO) throws SystemException {
					log.entering(CLASS, "isFlightClosedForOperations");
					boolean isFlightClosedForOperations = false;
					AssignedFlight assignedFlight = null;
					AssignedFlightPK assignedFlightPk = constructAssignedFlightPK(operationalFlightVO);

					try {
						assignedFlight = AssignedFlight.find(assignedFlightPk);
					} catch (FinderException ex) {
						log.log(Log.INFO, FINDEREXCEPTIO_STRING);
						// throw new SystemException(ex.getMessage(), ex);
					}
					if (assignedFlight != null) {
						isFlightClosedForOperations = MailConstantsVO.FLIGHT_STATUS_CLOSED
								.equals(assignedFlight.getExportClosingFlag());
						log.log(Log.FINE, "The Flight Status is found to be ",
								isFlightClosedForOperations);
					}
					return isFlightClosedForOperations;
				}

				/**
     * @param operationalFlightVO
     * @return boolean
     * @throws SystemException
     * @author a-1883
				 */
				public boolean isFlightClosedForInboundOperations(
						OperationalFlightVO operationalFlightVO) throws SystemException {
					log.entering(CLASS, "isFlightClosedForInboundOperations");
					boolean isFlightClosedForInbound = false;
					AssignedFlight inboundFlight = null;
					AssignedFlightPK inboundFlightPk = new AssignedFlightPK();
					//Added by A-6991 for CR ICRD-77772 Starts
        if (operationalFlightVO.isForUCMSendChk()) {
						inboundFlightPk.setAirportCode(operationalFlightVO.getAirportCode());
        } else {
						inboundFlightPk.setAirportCode(operationalFlightVO.getPou());
					}
					//Added by A-6991 for CR ICRD-77772 Starts
					inboundFlightPk.setCompanyCode(operationalFlightVO.getCompanyCode());
					inboundFlightPk.setFlightNumber(operationalFlightVO.getFlightNumber());
					inboundFlightPk.setFlightSequenceNumber(operationalFlightVO
							.getFlightSequenceNumber());
					inboundFlightPk.setLegSerialNumber(operationalFlightVO
							.getLegSerialNumber());
					inboundFlightPk.setCarrierId(operationalFlightVO.getCarrierId());
					try {
						inboundFlight = AssignedFlight.find(inboundFlightPk);
					} catch (FinderException ex) {
						log.log(Log.INFO, FINDEREXCEPTIO_STRING);
						//throw new SystemException(ex.getMessage(), ex);
					}
					if (inboundFlight != null) {
						isFlightClosedForInbound = MailConstantsVO.FLIGHT_STATUS_CLOSED
								.equals(inboundFlight.getImportClosingFlag());
						log.log(Log.FINE, "The Flight Status is found to be ",
								isFlightClosedForInbound);
					}
					log.exiting(CLASS, "isFlightClosedForInboundOperations");
					return isFlightClosedForInbound;
				}


				/**
     * @param companyCode
     * @param mailbagId
     * @return
     * @throws SystemException
				 * @author A-2037 This method is used to find the History of a Mailbag
				 */
				public Collection<MailbagHistoryVO> findMailbagHistories(  /*modified by A-8149 for ICRD-248207*/
						String companyCode, String mailBagId, long mailSequenceNumber) throws SystemException {
					log.entering(CLASS, "findMailbagHistories");
        return Mailbag.findMailbagHistories(companyCode, mailBagId, mailSequenceNumber);
				}

				
				public Collection<MailHistoryRemarksVO> findMailbagNotes(String mailBagId) 
						throws SystemException {
					log.entering(CLASS, "findMailbagNotes");
					return Mailbag.findMailbagNotes(mailBagId);
				}
				/**
				 * @param companyCode
				 * @param officeOfExchange
				 * @return
				 * @throws SystemException
				 */
				public String findPAForOfficeOfExchange(String companyCode,
						String officeOfExchange) throws SystemException {
					log.entering(CLASS, "findPAForOfficeOfExchange");
					String paCode=null;
					Page<OfficeOfExchangeVO> officeOfExchangePage = null;
					CacheFactory factory = CacheFactory.getInstance();
					OfficeOfExchangeCache cache = factory  
	    				.getCache(OfficeOfExchangeCache.ENTITY_NAME);
					officeOfExchangePage= cache.findOfficeOfExchange(companyCode,officeOfExchange,1);
	    			 if(officeOfExchangePage!=null && !officeOfExchangePage.isEmpty()
	    					 &&officeOfExchangePage.iterator().next().getPoaCode()!=null
	    					 &&officeOfExchangePage.iterator().next().isActive()){
	    				 paCode =officeOfExchangePage.iterator().next().getPoaCode() ;
	 				 }
	    			 return paCode;
				}

				/**
				 * @param companyCode
				 * @param subclassCode
				 * @return Collection<MailSubClassVO>
				 * @throws SystemException
     * @author a-2037 This method is used to find all the mail subclass codes
				 */
				public Collection<MailSubClassVO> findMailSubClassCodes(String companyCode,
						String subclassCode) throws SystemException {
					log.entering(CLASS, "findMailSubClassCodes");
					return MailSubClass.findMailSubClassCodes(companyCode, subclassCode);
				}

				 /**
     * @param companyCode
     * @param officeOfExchanges
     * @return
				    * @author A-3227
				    * This method returns Collection<ArrayList<String>> in which,
				    * the inner collection contains the values in the order :
				    * 1.OFFICE OF EXCHANGE
				    * 2.CITY
				    * 3.NEAREST AIRPORT
				    */
				   public Collection<ArrayList<String>> findCityAndAirportForOE(String companyCode, Collection<String> officeOfExchanges)
            throws SystemException {
        log.entering(CLASS, "findCityForOfficeOfExchange");
        HashMap<String, String> cityForOE = null;
						Map<String, CityVO> cityAirtportMap = null;
						Collection<String> cityCodes = new ArrayList<String>();
						ArrayList<String> groupedCodes = new ArrayList<String>();
						Collection<ArrayList<String>> groupedOECityArpCodes = new ArrayList<ArrayList<String>>();
        if (officeOfExchanges != null && officeOfExchanges.size() > 0) {
            cityForOE = findCityForOfficeOfExchange(companyCode, officeOfExchanges);
            if (cityForOE != null && cityForOE.size() > 0) {
                for (String oe : officeOfExchanges) {
									cityCodes.add(cityForOE.get(oe));
								}
                if (cityCodes != null && cityCodes.size() > 0) {
                    cityAirtportMap = findCityAirportMap(companyCode, cityCodes);
								}
							}
						}
        if (cityForOE != null && cityForOE.size() > 0 &&
                cityAirtportMap != null && cityAirtportMap.size() > 0) {
            for (String oe : officeOfExchanges) {
								String city = cityForOE.get(oe);
								CityVO cityVO =  cityAirtportMap.get(city);
								groupedCodes = new ArrayList<String>();
								groupedCodes.add(oe);
								groupedCodes.add(city);
									groupedCodes.add(cityVO.getNearestAirport());
								groupedOECityArpCodes.add(groupedCodes);
							}
						}
					   return groupedOECityArpCodes;
				   }

    public boolean checkIfPartnerCarrier(String airportCode, String carrierCode) throws SystemException {
						boolean isPartnerCarrier = true;

						LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
						Collection<PartnerCarrierVO> partnerCarrierVOs = null;
						ArrayList<String> partnerCarriers = new ArrayList<String>();
        String companyCode = logonAttributes.getCompanyCode();
						String ownCarrierCode = logonAttributes.getOwnAirlineCode();
						//String airportCode = logonAttributes.getAirportCode();

        partnerCarrierVOs = findAllPartnerCarriers(companyCode, ownCarrierCode, airportCode);
							log.log(Log.INFO, "partnerCarrierVOs-----------------",
									partnerCarrierVOs);
        if (partnerCarrierVOs != null) {
            for (PartnerCarrierVO partner : partnerCarrierVOs) {
									String partnerCarrier =	 partner.getPartnerCarrierCode();
									partnerCarriers.add(partnerCarrier);
									}
									partnerCarriers.add(ownCarrierCode);
            if (!(partnerCarriers.contains(carrierCode))) {

                isPartnerCarrier = false;
								}

							}
					return	isPartnerCarrier;
					}

				   /**
					 * @param companyCode
					 * @param dsnVOs
					 * @return
					 * @throws SystemException
					 */
					private Map<String, CityVO> findCityAirportMap(String companyCode,
							Collection<String> cities) throws SystemException {
						Collection<String> cityCodes = new ArrayList<String>();
						Map<String, CityVO> cityMap = null;
						for (String cityCode : cities) {
							if (!cityCodes.contains(cityCode)) {
								cityCodes.add(cityCode);
							}
						}
						log.log(Log.FINE, "CityCodes->", cityCodes);
						try {
							cityMap = Proxy.getInstance().get(SharedAreaProxy.class).validateCityCodes(companyCode,
									cityCodes);
						} catch (SharedProxyException ex) {
							throw new SystemException(ex.getMessage(), ex);
						}
						log.log(Log.FINE, "CityMap-->", cityMap);
						return cityMap;
					}

					/**
					 * @param companyCode
					 * @param ownCarrierCode
					 * @param airportCode
					 * @return Collection<PartnerCarrierVO>
					 * @throws SystemException
     * @author a-1876 This method is used to list the PartnerCarriers..
					 */
					public Collection<PartnerCarrierVO> findAllPartnerCarriers(
							String companyCode, String ownCarrierCode, String airportCode)
							throws SystemException {
						log.entering(CLASS, "findAllPartnerCarriers");
						return PartnerCarrier.findAllPartnerCarriers(companyCode,
								ownCarrierCode, airportCode);
					}

					public Collection<CoTerminusVO> findAllCoTerminusAirports(
							CoTerminusFilterVO filterVO)
							throws SystemException {
						log.entering(CLASS, "findAllCoTerminusAirports");
						return CoterminusAirport.findAllCoTerminusAirports(filterVO);
					}

					/*added by A-8149 for ICRD-243386*/
    public Page<MailServiceStandardVO> listServiceStandardDetails(
            MailServiceStandardFilterVO mailServiceStandardFilterVO, int pageNumber)
							throws SystemException {
						log.entering(CLASS, "listServiceStandardDetails");
        return MailServiceStandard.listServiceStandardDetails(mailServiceStandardFilterVO, pageNumber);
					}

					/**
     * Method		:	MailController.findAllCoTerminusAirports
     * Added by 	:	A-6991 on 17-Jul-2018
     * Used for 	:   ICRD-212544
     * Parameters	:	@param filterVO
     * Parameters	:	@return
     * Parameters	:	@throws SystemException
     * Return type	: 	Collection<CoTerminusVO>
     */
    public Collection<MailRdtMasterVO> findRdtMasterDetails(
            RdtMasterFilterVO filterVO)
            throws SystemException {
        log.entering(CLASS, "findAllCoTerminusAirports");
        return MailRdtMaster.findRdtMasterDetails(filterVO);
    }

    /**
     * @param consignmentDocumentVO
     * @throws SystemException
     * @throws DuplicateMailBagsException
     * @author a-1883
					 */
					public void updateMailBag(ConsignmentDocumentVO consignmentDocumentVO)
            throws SystemException, DuplicateMailBagsException {
						log.entering(CLASS, "updateMailBag-");
						Collection<MailInConsignmentVO> mailInConsignmentVOs = consignmentDocumentVO
								.getMailInConsignmentVOs();
        int carrierId = 0;
        Collection<RoutingInConsignmentVO> routingInConsignmentVOs = consignmentDocumentVO.getRoutingInConsignmentVOs();
        if (routingInConsignmentVOs != null && routingInConsignmentVOs.size() > 0) {
							for (RoutingInConsignmentVO routingConsignmentVO : routingInConsignmentVOs) {
                carrierId = routingConsignmentVO.getOnwardCarrierId();
							}
						}
						if (mailInConsignmentVOs != null && mailInConsignmentVOs.size() > 0) {
							for (MailInConsignmentVO mailInConsignmentVO : mailInConsignmentVOs) {

								if (mailInConsignmentVO.getMailId() != null) {
									mailInConsignmentVO.setCarrierId(carrierId);
									Mailbag mailbag = findMailBag(mailInConsignmentVO);
                    boolean isDuplicate = false;
                    if (mailbag != null) {
                        // Added by A-8353 for ICRD-230449 starts
                        isDuplicate = checkForDuplicateMailbag(mailInConsignmentVO.getCompanyCode(),mailInConsignmentVO.getPaCode(), mailbag);
                        // Added by A-8353 for ICRD-230449 ends
                        //mailbag.setConsignmentNumber(consignmentDocumentVO.getConsignmentNumber());
                        //mailbag.setConsignmentSequenceNumber(consignmentDocumentVO.getConsignmentSequenceNumber());
                        //mailbag.setPaCode(consignmentDocumentVO.getPaCode());
                        mailInConsignmentVO.setMailSequenceNumber(mailbag.getMailbagPK().getMailSequenceNumber());
                    }
                    if (mailbag == null || isDuplicate) {


											if (MailInConsignmentVO.OPERATION_FLAG_INSERT
													.equals(mailInConsignmentVO.getOperationFlag())) {
												if (mailInConsignmentVO.getReceptacleSerialNumber() != null) {
													MailbagVO mailbagVO = new MailbagVO();
													mailbagVO
															.setOperationalFlag(MailbagVO.OPERATION_FLAG_INSERT);
													mailbagVO.setCompanyCode(mailInConsignmentVO
															.getCompanyCode());
													mailbagVO.setDoe(mailInConsignmentVO
															.getDestinationExchangeOffice());
													mailbagVO.setOoe(mailInConsignmentVO
															.getOriginExchangeOffice());
													mailbagVO.setMailSubclass(mailInConsignmentVO
															.getMailSubclass());
							                        mailbagVO.setMailCategoryCode(mailInConsignmentVO
															.getMailCategoryCode());
													mailbagVO.setMailbagId(mailInConsignmentVO.getMailId());
													mailbagVO.setDespatchSerialNumber(mailInConsignmentVO
															.getDsn());
													mailbagVO.setDespatchId(createDespatchBag(mailInConsignmentVO));
													mailbagVO.setMailClass(mailInConsignmentVO
															.getMailClass());
													mailbagVO.setYear(mailInConsignmentVO.getYear());
													mailbagVO.setUldNumber(mailInConsignmentVO
															.getUldNumber());
													mailbagVO.setHighestNumberedReceptacle(mailInConsignmentVO.getHighestNumberedReceptacle());
													mailbagVO.setReceptacleSerialNumber(mailInConsignmentVO.getReceptacleSerialNumber());
													mailbagVO.setRegisteredOrInsuredIndicator(mailInConsignmentVO.getRegisteredOrInsuredIndicator());
													mailbagVO.setScannedPort(consignmentDocumentVO.getAirportCode());
													mailbagVO.setScannedDate(consignmentDocumentVO.getConsignmentDate());
													mailbagVO.setCarrierId(mailInConsignmentVO.getCarrierId());
													mailbagVO.setWeight(mailInConsignmentVO.getStatedWeight());
													mailbagVO.setDeclaredValue(mailInConsignmentVO.getDeclaredValue());
													mailbagVO.setCurrencyCode(mailInConsignmentVO.getCurrencyCode());
													mailbagVO.setConsignmentNumber(consignmentDocumentVO.getConsignmentNumber());
													mailbagVO.setConsignmentNumber(consignmentDocumentVO.getConsignmentNumber());
													mailbagVO.setPaCode(consignmentDocumentVO.getPaCode());
													mailbagVO.setLatestStatus("NEW");
                                mailbagVO.setConsignmentDate(mailInConsignmentVO.getConsignmentDate()); //added by A-8353 for ICRD-230449
													//Added for ICRD-243469 starts
													/*String serviceLevel = null;

													serviceLevel = findMailServiceLevel(mailbagVO);

                                if (serviceLevel != null) {
														mailbagVO.setMailServiceLevel(serviceLevel);
													}*/
													//Added for ICRD-243469 ends
                                //Added by A-7794 as part of ICRD-232299
                                String scanWaved = constructDAO().checkScanningWavedDest(mailbagVO);
                                if (scanWaved != null) {
                                    mailbagVO.setScanningWavedFlag(scanWaved);
                                }

								//ICRD-341146 Begin
								if(isUSPSMailbag(mailbagVO)){
									mailbagVO.setOnTimeDelivery(MailConstantsVO.FLAG_NO);
								}else{
									mailbagVO.setOnTimeDelivery(MailConstantsVO.FLAG_NOT_AVAILABLE);
								}
								//ICRD-341146 End
                                MailController.calculateAndUpdateLatestAcceptanceTime(mailbagVO);

                                mailbag = new Mailbag(mailbagVO);
                                if (mailbag != null) {
														mailInConsignmentVO.setMailSequenceNumber(mailbag.getMailbagPK().getMailSequenceNumber());
													}
												}
											}
									}
								}
							}
						}
						log.exiting(CLASS, "updateMailBag");
					}

					/**
     * @param mailInConsignmentVO
     * @return
     * @throws SystemException
     * @author a-1883
					 */
					private Mailbag findMailBag(MailInConsignmentVO mailInConsignmentVO)
							throws SystemException {
						log.entering(CLASS, "findMailBag");
						Mailbag mailbag = null;
						MailbagPK mailbagPk = new MailbagPK();
						mailbagPk.setCompanyCode(mailInConsignmentVO.getCompanyCode());
						mailbagPk.setMailSequenceNumber(findMailSequenceNumber(mailInConsignmentVO.getMailId(), mailInConsignmentVO.getCompanyCode()));
//						mailbagPk.setDestinationExchangeOffice(mailInConsignmentVO
//								.getDestinationExchangeOffice());
//						mailbagPk.setDsn(mailInConsignmentVO.getDsn());
//						mailbagPk.setMailbagId(mailInConsignmentVO.getMailId());
//						mailbagPk.setMailSubclass(mailInConsignmentVO.getMailSubclass());
//						mailbagPk
//								.setMailCategoryCode(mailInConsignmentVO.getMailCategoryCode());
//						mailbagPk.setOriginExchangeOffice(mailInConsignmentVO
//								.getOriginExchangeOffice());
//						mailbagPk.setYear(mailInConsignmentVO.getYear());
						try {
							mailbag = Mailbag.find(mailbagPk);
						} catch (FinderException finderException) {
							log.log(Log.FINE, " ++++  Finder Exception  +++");
							log.log(Log.FINE, " <===  Mailbag is Not accepted ===>");
							// throw new
							// SystemException(finderException.getErrorCode(),finderException);
						}
						return mailbag;
					}

					/**
					 * @param mailbagVos
					 * @return
					 * @throws SystemException
					 * @throws InvalidMailTagFormatException
     * @author a-1936 This metrhod is used to validate the mailBag and the
     * MailTagFormat
					 */
					public boolean validateMailBags(Collection<MailbagVO> mailbagVos)
							throws SystemException, InvalidMailTagFormatException {
						log.entering(CLASS, "validateMailBags");
						return new Mailbag().validateMailBags(mailbagVos, false);
					}


					/**
					 * This method updates mailbag consignment details (that is if this mail bag
					 * is already accepted)
					 *
     * @param mailInConsignmentVO
     * @throws SystemException
     * @throws DuplicateMailBagsException
     * @author a-1883
					 */
					public void updateMailBagConsignmentDetails(
            MailInConsignmentVO mailInConsignmentVO, Collection<RoutingInConsignmentVO> routingInConsignments,Map<String,Long>flightSeqNumMap) throws SystemException, DuplicateMailBagsException {
						log.entering(CLASS, "updateMailBagConsignmentDetails");
						Mailbag mailbag = findMailBag(mailInConsignmentVO);
        boolean isDuplicate = false;
        LogonAttributes logonVO = ContextUtils.getSecurityContext().getLogonAttributesVO();
        if (mailbag != null) {
            // Added by A-8353 for ICRD-230449 starts
            isDuplicate = checkForDuplicateMailbag(mailInConsignmentVO.getCompanyCode(),mailInConsignmentVO.getPaCode(), mailbag);
            // Added by A-8353 for ICRD-230449 ends
            //Uncommented by A-8176 as part of IASCB-111690 STARTS
            if(!isDuplicate) {
                mailbag.setConsignmentNumber(mailInConsignmentVO.getConsignmentNumber());
                mailbag.setConsignmentSequenceNumber(mailInConsignmentVO.getConsignmentSequenceNumber());
                mailbag.setPaCode(mailInConsignmentVO.getPaCode());
            }
            //Uncommented by A-8176 as part of IASCB-111690 ENDS
            mailInConsignmentVO.setMailSequenceNumber(mailbag.getMailbagPK().getMailSequenceNumber());
        }
        if (mailbag == null || isDuplicate) {
								if (MailInConsignmentVO.OPERATION_FLAG_INSERT
										.equals(mailInConsignmentVO.getOperationFlag())) {
									if (mailInConsignmentVO.getReceptacleSerialNumber() != null) {
										MailbagVO mailbagVO = new MailbagVO();
										mailbagVO
												.setOperationalFlag(MailbagVO.OPERATION_FLAG_INSERT);
										mailbagVO.setCompanyCode(mailInConsignmentVO
												.getCompanyCode());
										mailbagVO.setDoe(mailInConsignmentVO
												.getDestinationExchangeOffice());
										mailbagVO.setOoe(mailInConsignmentVO
												.getOriginExchangeOffice());
										mailbagVO.setMailSubclass(mailInConsignmentVO
												.getMailSubclass());
				                        mailbagVO.setMailCategoryCode(mailInConsignmentVO
												.getMailCategoryCode());
										mailbagVO.setMailbagId(mailInConsignmentVO.getMailId());
										mailbagVO.setDespatchSerialNumber(mailInConsignmentVO
												.getDsn());
										mailbagVO.setMailClass(mailInConsignmentVO
												.getMailClass());
										mailbagVO.setYear(mailInConsignmentVO.getYear());
										mailbagVO.setUldNumber(mailInConsignmentVO
												.getUldNumber());
										mailbagVO.setHighestNumberedReceptacle(mailInConsignmentVO.getHighestNumberedReceptacle());
										mailbagVO.setReceptacleSerialNumber(mailInConsignmentVO.getReceptacleSerialNumber());
										mailbagVO.setRegisteredOrInsuredIndicator(mailInConsignmentVO.getRegisteredOrInsuredIndicator());
										mailbagVO.setScannedPort(mailInConsignmentVO.getAirportCode());
										mailbagVO.setScannedDate(mailInConsignmentVO.getConsignmentDate());
										mailbagVO.setCarrierId(mailInConsignmentVO.getCarrierId());
										mailbagVO.setWeight(mailInConsignmentVO.getStatedWeight());
                    mailbagVO.setConsignmentDate(mailInConsignmentVO.getConsignmentDate()); //added by A-8353 for ICRD-230449
                    mailbagVO.setDespatchId(createDespatchBag(mailInConsignmentVO));
                    if (mailbagVO.getWeight().getRoundedSystemValue() > 0) {//modified by A-7371
											double actualVolume = 0.0;
											double stationVolume=0.0;
											String commodityCode = "";
											String stationVolumeUnit="";
											CommodityValidationVO commodityValidationVO = null;
											try {
												commodityCode = findSystemParameterValue(DEFAULTCOMMODITYCODE_SYSPARAM);
												commodityValidationVO = validateCommodity(
														mailbagVO.getCompanyCode(),
														commodityCode,mailInConsignmentVO.getPaCode());
											} catch (SystemException e) {
												log.log(Log.FINE, e.getMessage());
                        } catch (Exception e) {
												log.log(Log.FINE, e.getMessage());
											}
											if (commodityValidationVO != null
													&& commodityValidationVO.getDensityFactor() != 0) {
												//mailbag weight is in KG,hence no need of converting to Hg
												/*actualVolume = (mailvo.getStatedWeight())
														/ (commodityValidationVO.getDensityFactor());*/
												 //added by A-8353 for ICRD-274933 starts
												    Map stationParameters = null;
													String stationCode = logonVO.getStationCode();
													Collection<String> parameterCodes = new ArrayList<String>();
													parameterCodes.add(STNPAR_DEFUNIT_VOL);
											      stationParameters =new SharedAreaProxy().findStationParametersByCode(logonVO.getCompanyCode(), stationCode, parameterCodes);
												  stationVolumeUnit = (String)stationParameters.get(STNPAR_DEFUNIT_VOL);
					                               if(mailInConsignmentVO.getStatedWeight()!=null){
					                            	  double weightInKg=new DocumentController().unitConvertion(UnitConstants.MAIL_WGT,mailInConsignmentVO.getStatedWeight().getSystemUnit(),UnitConstants.WEIGHT_UNIT_KILOGRAM,mailInConsignmentVO.getStatedWeight().getSystemValue());
					                            	  actualVolume=(weightInKg/(commodityValidationVO.getDensityFactor()));
												//actualVolume = (mailvo.getStatedWeight().getRoundedSystemValue())/// (commodityValidationVO.getDensityFactor());//added by A-7371
					                             stationVolume= new DocumentController().unitConvertion(UnitConstants.VOLUME,UnitConstants.VOLUME_UNIT_CUBIC_METERS,stationVolumeUnit,actualVolume);
												log.log(Log.INFO, "inside volume calculation for mailbags***:>>>", actualVolume);
												if (stationVolume < 0.01) {
													stationVolume = 0.01;
												}
												}
											}
											if(stationVolumeUnit!=null){
												mailbagVO.setVolume(new Measure(UnitConstants.VOLUME,0.0,stationVolume,stationVolumeUnit));//added by A-7371
												}
												 //added by A-8353 for ICRD-274933 ends

											}
										mailbagVO.setDeclaredValue(mailInConsignmentVO.getDeclaredValue());
										mailbagVO.setCurrencyCode(mailInConsignmentVO.getCurrencyCode());
										mailbagVO.setConsignmentNumber(mailInConsignmentVO.getConsignmentNumber());
										mailbagVO.setConsignmentSequenceNumber(mailInConsignmentVO.getConsignmentSequenceNumber());
										mailbagVO.setPaCode(mailInConsignmentVO.getPaCode());
										mailbagVO.setLatestStatus("NEW");

										String destination=null;//added for 329494		//  uncommented  as part of IASCB-32332
										try {
											 destination = constructDAO().findCityForOfficeOfExchange(mailInConsignmentVO.getCompanyCode(),mailInConsignmentVO.getDestinationExchangeOffice());
										} catch (PersistenceException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										//mailbagVO.setDestination(destination);

									      mailbagVO.setMailbagSource(mailInConsignmentVO.getMailSource());
									      mailbagVO.setMailbagDataSource(mailInConsignmentVO.getMailSource());
									      mailbagVO.setContractIDNumber(mailInConsignmentVO.getContractIDNumber());
									      mailbagVO.setTransWindowEndTime(mailInConsignmentVO.getTransWindowEndTime());
									      mailbagVO.setReqDeliveryTime(mailInConsignmentVO.getReqDeliveryTime());
									     /* if (routingInConsignments != null && routingInConsignments.size() > 0) {
									        RoutingInConsignmentVO routingInConsignmentVO = routingInConsignments.iterator().next();
									        mailbagVO.setFlightNumber(routingInConsignmentVO.getOnwardFlightNumber());
									        mailbagVO.setCarrierCode(routingInConsignmentVO.getOnwardCarrierCode());
									        mailbagVO.setFlightDate(routingInConsignmentVO.getOnwardFlightDate());
									        mailbagVO.setFlightSequenceNumber(routingInConsignmentVO.getOnwardCarrierSeqNum());
									        mailbagVO.setPou(routingInConsignmentVO.getPou());
									      } else{
											mailbagVO.setFlightNumber(MailConstantsVO.DESTN_FLT_STR);
											mailbagVO.setFlightSequenceNumber(MailConstantsVO.DESTN_FLT);
									      } */
									      if(routingInConsignments!=null && routingInConsignments.size()>0){
												for (RoutingInConsignmentVO routingVO : routingInConsignments) {
													if (routingVO.getPou().equals(destination)) {
														mailbagVO.setFlightNumber(routingVO.getOnwardFlightNumber());
														mailbagVO.setFlightDate(routingVO.getOnwardFlightDate());
                                                        if(flightSeqNumMap!=null &&!flightSeqNumMap.isEmpty() && flightSeqNumMap.containsKey(destination)){
                                                        	mailbagVO.setFlightSequenceNumber(flightSeqNumMap.get(destination));
                                                        }
                                                        else{
														FlightFilterVO flightFilterVO = new FlightFilterVO();
														flightFilterVO.setCompanyCode(mailInConsignmentVO.getCompanyCode());
														flightFilterVO.setFlightNumber(routingVO.getOnwardFlightNumber().toUpperCase());
														flightFilterVO.setStation(routingVO.getPol());
														flightFilterVO.setDirection(mailInConsignmentVO.getOperation());
														flightFilterVO.setActiveAlone(false);
														flightFilterVO.setFlightDate(routingVO.getOnwardFlightDate());
														Collection<FlightValidationVO> flightValidationVOs = null;
														flightValidationVOs = new MailController().validateFlight(flightFilterVO);
														if (flightValidationVOs != null && flightValidationVOs.size() == 1) {
															for (FlightValidationVO vo : flightValidationVOs){
																mailbagVO.setFlightSequenceNumber(vo.getFlightSequenceNumber());
																flightSeqNumMap.put(destination,vo.getFlightSequenceNumber());
															}
														}
														else
														{
															flightSeqNumMap.put(destination,0L);
														}

														}
														break;
													}else{
														if (routingInConsignments != null && routingInConsignments.size() > 0) {
													        RoutingInConsignmentVO routingInConsignmentVO = routingInConsignments.iterator().next();
													        mailbagVO.setFlightNumber(routingInConsignmentVO.getOnwardFlightNumber());
													        mailbagVO.setCarrierCode(routingInConsignmentVO.getOnwardCarrierCode());
													        mailbagVO.setFlightDate(routingInConsignmentVO.getOnwardFlightDate());
													        mailbagVO.setFlightSequenceNumber(routingInConsignmentVO.getOnwardCarrierSeqNum());
													        mailbagVO.setPou(routingInConsignmentVO.getPou());
													      } else{
															mailbagVO.setFlightNumber(MailConstantsVO.DESTN_FLT_STR);
															mailbagVO.setFlightSequenceNumber(MailConstantsVO.DESTN_FLT);
													      }
													}
												}
											}

										mailbagVO = new MailController().constructOriginDestinationDetailsForConsignment(mailInConsignmentVO,mailbagVO);

										//Added for ICRD-243469 starts
										if (mailInConsignmentVO.getMailServiceLevel() != null && !mailInConsignmentVO.getMailServiceLevel().isEmpty()) {
						mailbagVO.setMailServiceLevel(mailInConsignmentVO.getMailServiceLevel());
					} /*else {
										String serviceLevel = null;
										serviceLevel = findMailServiceLevel(mailbagVO);

                    if (serviceLevel != null) {
											mailbagVO.setMailServiceLevel(serviceLevel);
										}
										}*/
										//Added for ICRD-243469 ends
                    //Added by A-7794 as part of ICRD-232299
                    String scnaWaved = constructDAO().checkScanningWavedDest(mailbagVO);
                    if (scnaWaved != null) {
                        mailbagVO.setScanningWavedFlag(scnaWaved);
                    }

					//ICRD-341146 Begin
					if(isUSPSMailbag(mailbagVO)){
						mailbagVO.setOnTimeDelivery(MailConstantsVO.FLAG_NO);
					}else{
						mailbagVO.setOnTimeDelivery(MailConstantsVO.FLAG_NOT_AVAILABLE);
					}
					//ICRD-341146 End
                    MailController.calculateAndUpdateLatestAcceptanceTime(mailbagVO);

                    mailbag = new Mailbag(mailbagVO);
                    if (mailbag != null) {
											mailInConsignmentVO.setMailSequenceNumber(mailbag.getMailbagPK().getMailSequenceNumber());
										}
									}
								}
						}
						log.exiting(CLASS, "updateMailBagConsignmentDetails");
					}

					/**
					 * This method checks whether mail already accepted or not and returns
					 * accepted mailbag details A-1883
					 *
					 * @param mailInConsignmentVOs
					 * @return
					 * @throws SystemException
					 */
					public Collection<Mailbag> checkMailbagAccepted(
							Collection<MailInConsignmentVO> mailInConsignmentVOs)
							throws SystemException {
						log.entering(CLASS, "checkMailbagAccepted");
						Collection<Mailbag> mailbags = null;
						Mailbag mailbag = null;
						MailbagPK mailbagPk = null;
						for (MailInConsignmentVO mailInConsignmentVO : mailInConsignmentVOs) {
							if (MailInConsignmentVO.OPERATION_FLAG_DELETE
									.equals(mailInConsignmentVO.getOperationFlag())) {
								mailbagPk = new MailbagPK();
								mailbagPk.setCompanyCode(mailInConsignmentVO.getCompanyCode());
								mailbagPk.setMailSequenceNumber(
										findMailSequenceNumber(mailInConsignmentVO.getMailId(), mailInConsignmentVO.getCompanyCode()));
								mailbag = findAcceptedMailbag(mailbagPk);
								if (mailbags == null) {
									mailbags = new ArrayList<Mailbag>();
								}
								if (mailbag != null) {
									mailbags.add(mailbag);
								}
							}
						}

						log.exiting(CLASS, "checkMailbagAccepted");
						return mailbags;
					}

    /**
					 * @param companyCode
					 * @param countryCode
					 * @return Collection<PostalAdministrationVO>
					 * @throws SystemException
     * @author A-2037 This method is used to find Local PAs
					 */
					public Collection<PostalAdministrationVO> findLocalPAs(String companyCode,
							String countryCode) throws SystemException {
						log.entering(CLASS, "findLocalPAs");
						return PostalAdministration.findLocalPAs(companyCode, countryCode);
					}

					/**
					 * @param mailbagPk
					 * @return Mailbag
					 * @throws SystemException
     * @author a-1883
					 */
					private Mailbag findAcceptedMailbag(MailbagPK mailbagPk)
							throws SystemException {
						log.entering(CLASS, "findAcceptedMailbag");
						Mailbag mailbag = null;
						try {
							mailbag = Mailbag.find(mailbagPk);
							log.log(Log.FINE, " Mail is accepted");
						} catch (FinderException finderException) {
							log.log(Log.FINE, " Mail not accepted");
						}
						log.exiting(CLASS, "findAcceptedMailbag");
						return mailbag;
					}


					/**
					 * @param operationalFlightVOs
					 * @param mailBagVOs
					 * @return
					 * @throws MailMLDBusniessException
     * @author A-5991
					 */
					public Collection<MailUploadVO> findAndRetriveUpliftedOperations(
							Collection<OperationalFlightVO> operationalFlightVOs,
					Collection<MailUploadVO> mailBagVOs) throws SystemException, MailMLDBusniessException {

				Collection<MailUploadVO> mailUploadVosForReturn = new ArrayList<MailUploadVO>();

				LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
						.getLogonAttributesVO();
				if (operationalFlightVOs != null) {
					for (OperationalFlightVO operationalFlightVO : operationalFlightVOs) {

						Collection<MailbagVO> totalMailBags = new ArrayList<MailbagVO>();
						Collection<MailbagVO> mailBagsForSentResdit = new ArrayList<MailbagVO>();
						totalMailBags = MailAcceptance
								.findMailBagsForUpliftedResdit(operationalFlightVO);

						// Find mailbags coming as part of UPL message and group them to
						// send resdit -starts
						for (MailUploadVO mailUploadVOFromMLD : mailBagVOs) {
							// To identify the mailbags coming as part of UPL message is
							// present in the same flight or not.
                    boolean containerValid = false;
                    long mailSequenceNumber = Mailbag.findMailBagSequenceNumberFromMailIdr(mailUploadVOFromMLD.getMailTag(), mailUploadVOFromMLD.getCompanyCode());
							MailbagVO mailbagVO = Mailbag.findExistingMailbags(
									mailUploadVOFromMLD.getCompanyCode(),
									mailSequenceNumber);

                   //Commented as part of bug IASCB-62365 by A-5526
							/*if (mailbagVO == null &&
                            MailConstantsVO.MLD.equalsIgnoreCase(mailBagVOs.iterator().next().getMailSource()) &&
									MailConstantsVO.MAIL_STATUS_UPLIFTED.equalsIgnoreCase(mailBagVOs.iterator().next().getProcessPoint())) {


								 throw new MailMLDBusniessException(MailMLDBusniessException.MAILBAG_NOT_PRESENT_UPL);
								 }*/
                             // Added by A-8488 as part of bug ICRD-323284
							if (mailbagVO==null  &&
									MailConstantsVO.MLD.equalsIgnoreCase(mailBagVOs.iterator().next().getMailSource())&&
									MailConstantsVO.MLD_STG.equalsIgnoreCase(mailBagVOs.iterator().next().getProcessPoint())) {
										throw new MailMLDBusniessException(MailMLDBusniessException.MAILBAG_NOT_PRESENT_FOR_STG);
								 }
							// Added by A-8488 as part of bug ICRD-323181
							if(MailConstantsVO.MLD_STG.equalsIgnoreCase(mailBagVOs.iterator().next().getProcessPoint())
									&&(MailConstantsVO.MAIL_STATUS_ARRIVED.equals(mailbagVO.getMailStatus()) ||
									MailConstantsVO.MAIL_STATUS_TRANSFERRED.equals(mailbagVO.getMailStatus()) ||
									MailConstantsVO.FLAG_YES.equals(mailbagVO.getArrivedFlag())||
									!logonAttributes.getAirportCode().equals(mailbagVO.getScannedPort()))){
								 throw new MailMLDBusniessException(MailMLDBusniessException.MAILBAG_NOT_PRESENT_FOR_STG);
							}//Modified as part of bug IASCB-62365 by A-5526
							else if(mailbagVO!=null && (MailConstantsVO.MAIL_STATUS_ARRIVED.equals(mailbagVO.getMailStatus()) ||
									MailConstantsVO.MAIL_STATUS_TRANSFERRED.equals(mailbagVO.getMailStatus()) ||
                            MailConstantsVO.FLAG_YES.equals(mailbagVO.getArrivedFlag()) ||
                            !logonAttributes.getAirportCode().equals(mailbagVO.getScannedPort()))) {
								 throw new MailMLDBusniessException(MailMLDBusniessException.MAILBAG_NOT_PRESENT_UPL);
							}
                    if (mailbagVO != null && (!operationalFlightVO.getFlightNumber().equals(
									mailbagVO.getFlightNumber())
									|| operationalFlightVO.getFlightSequenceNumber() != mailbagVO
											.getFlightSequenceNumber())) {

								mailbagVO
										.setMailStatus(MailConstantsVO.MAILBAG_ASSIGNMENT_IN);

								totalMailBags.add(mailbagVO);
							}//Added as part of bug IASCB-62365 by A-5526
                       else if( mailbagVO == null &&
		                            MailConstantsVO.MLD.equalsIgnoreCase(mailBagVOs.iterator().next().getMailSource()) &&
											MailConstantsVO.MAIL_STATUS_UPLIFTED.equalsIgnoreCase(mailBagVOs.iterator().next().getProcessPoint())){
								 containerValid = true;
								 	mailUploadVOFromMLD.setScanType(MailConstantsVO.MAILBAG_ASSIGNMENT_IN);
							}

							for (MailbagVO mailbag : totalMailBags) {
                        if (mailUploadVOFromMLD.getContainerNumber() != null && mailUploadVOFromMLD.getContainerNumber()
                                .equals(mailbag.getContainerNumber())) {
                            containerValid = true;
												}
                        if ((mailbag.getMailbagId() != null && mailbag.getMailbagId().equals(
										mailUploadVOFromMLD.getMailTag()))
                                || (mailUploadVOFromMLD.getContainerNumber() != null && mailUploadVOFromMLD.getContainerNumber()
												.equals(mailbag.getContainerNumber()))) {
									mailBagsForSentResdit.add(mailbag);

									if (!MailConstantsVO.MAILBAG_ASSIGNMENT_IN
											.equals(mailbag.getMailStatus())) {
										mailbag.setMailStatus(MailConstantsVO.RESDIT_SEND_STATUS);
										mailbag.setActionMode(MailConstantsVO.RESDIT_SEND_STATUS);

									}
								}

							}
							// Modified by A-8488 as part of bug ICRD-323284
							if(!MailConstantsVO.MLD_STG.equals(mailUploadVOFromMLD.getProcessPoint())&&
									mailUploadVOFromMLD.getContainerNumber()!=null && !containerValid){
								 throw new MailMLDBusniessException(MailMLDBusniessException.CONTAINER_CANNOT_ASSIGN_IN_FLIGHT);
							}

						}
						// Find mailbags coming as part of UPL message and group them to
						// send resdit -ends
						mailUploadVosForReturn = checkUpliftedOperations(
								operationalFlightVO, totalMailBags, mailBagVOs);


						break;
					}
				}
				return mailUploadVosForReturn;
			}

				/**
				 * @param mailIdr
				 * @param companyCode
				 * @return
				 * @throws SystemException
     * @author A-5991
     */
    public long findMailSequenceNumber(String mailIdr, String companyCode) throws SystemException {
					return Mailbag.findMailBagSequenceNumberFromMailIdr(mailIdr, companyCode);
				}

				/**
				 * @param operationalFlightVO
				 * @param totalMailBags
				 * @param mailBagVOs
				 * @return
				 * @throws SystemException
     * @author A-5991
				 */
				private Collection<MailUploadVO> checkUpliftedOperations(
						OperationalFlightVO operationalFlightVO,
						Collection<MailbagVO> totalMailBags,
				Collection<MailUploadVO> mailBagVOs) throws SystemException {
			// Validating Flight Closure
			boolean isFlightClosed = false;

			if (operationalFlightVO.getFlightSequenceNumber() > 0) {

				isFlightClosed = isFlightClosedForOperations(operationalFlightVO);
			}
			// Find mailbags for reassignMent/Offload starts
			for (MailbagVO mailbag : totalMailBags) {

				if (!MailConstantsVO.RESDIT_SEND_STATUS.equals(mailbag.getMailStatus())
						&& !MailConstantsVO.MAILBAG_ASSIGNMENT_IN.equals(mailbag
								.getMailStatus())) {
					if (isFlightClosed) {
						// Consider to offload to the destination as flight is
						// closed.
						mailbag.setActionMode(MailConstantsVO.MAIL_STATUS_OFFLOADED);

					} else {
						// Consider for reassignment to destination

						mailbag.setActionMode(MailConstantsVO.MAIL_STATUS_ASSIGNED);
					}
            } else if (MailConstantsVO.MAILBAG_ASSIGNMENT_IN.equals(mailbag
                    .getMailStatus())) {
					mailbag.setActionMode(MailConstantsVO.MAIL_STATUS_ACCEPTED);
				}

			}

			for (MailUploadVO mailUploadVo : mailBagVOs) {
				for (MailbagVO mailbag : totalMailBags) {
					if (mailUploadVo.getMailTag().equals(mailbag.getMailbagId())) {
						if (MailConstantsVO.RESDIT_SEND_STATUS.equals(mailbag.getActionMode())) {
							mailUploadVo.setScanType(MailConstantsVO.RESDIT_SEND_STATUS);
						}  else if (MailConstantsVO.MAIL_STATUS_ACCEPTED
								.equals(mailbag.getActionMode())) {
							mailUploadVo.setScanType(MailConstantsVO.MAILBAG_ASSIGNMENT_IN);
						}
					}
				}

			}
			return mailBagVOs;

		}

				/**
     * @param operationalFlightVOs
     * @param mailBagVOs
     * @throws SystemException
				 * @author A-5526 This method is used to find the Mailbags Accepted to a
				 *         Flight and UpliftedResdit to be flagged for the Same .
				 */
				//Modified for bug ICRD-154762 by A-5526
				public void flagUpliftedResditForMailbagsForMLD(
						Collection<OperationalFlightVO> operationalFlightVOs, Collection<MailUploadVO> mailBagVOs)
						throws SystemException {
					log.entering(CLASS, "flagUpliftedResditForMailbags");
					String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
					LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
					.getLogonAttributesVO();
        if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
						log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
					if (operationalFlightVOs != null) {
						for (OperationalFlightVO operationalFlightVO : operationalFlightVOs) {

								Collection<MailbagVO> totalMailBags = new ArrayList<MailbagVO>();
								Collection<MailbagVO> mailBagsForSentResdit = new ArrayList<MailbagVO>();
								totalMailBags = MailAcceptance
									.findMailBagsForUpliftedResdit(operationalFlightVO);


								// Find mailbags coming as part of UPL message and group them to send resdit -starts
								for (MailUploadVO mailUploadVOFromMLD : mailBagVOs) {


									for (MailbagVO mailbag : totalMailBags) {

										if (mailbag.getMailbagId().equals(
                                    mailUploadVOFromMLD.getMailTag()) || (mailUploadVOFromMLD.getContainerNumber() != null && mailUploadVOFromMLD.getContainerNumber().equals(mailbag.getContainerNumber()))) {
											mailbag.setCarrierCode(mailUploadVOFromMLD
													.getCarrierCode());
                                if (!MailConstantsVO.MAIL_STATUS_ASSIGNED.equals(mailbag.getMailStatus())) {
											mailbag.setFlightDate(mailUploadVOFromMLD
													.getFlightDate());

											}
                                mailbag.setScannedDate(new LocalDate(logonAttributes.getAirportCode(), ARP, true));
											mailbag.setScannedUser(logonAttributes.getUserId());
											mailbag.setPou(mailUploadVOFromMLD
													.getContainerPOU());
											mailbag.setFinalDestination(mailUploadVOFromMLD
													.getContainerPOU());
											mailBagsForSentResdit.add(mailbag);

                                if (!MailConstantsVO.MAIL_STATUS_ASSIGNED.equals(mailbag.getMailStatus())) {
											mailbag.setMailStatus(MailConstantsVO.RESDIT_SEND_STATUS);

											}
										}

									}

								}
								// Find mailbags coming as part of UPL message and group them to send resdit -ends

								checkAndProceedOffloadorReassignForUPLMessage(
										operationalFlightVO, totalMailBags);

							Collection<ContainerDetailsVO> containerDetailsVOs = null;
							containerDetailsVOs = MailAcceptance
									.findUldsForUpliftedResdit(operationalFlightVO);

                    MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
							mailController.flagResditsForFlightDeparture(
									operationalFlightVO.getCompanyCode(),
										operationalFlightVO.getCarrierId(),
										mailBagsForSentResdit, containerDetailsVOs,
										operationalFlightVO.getPol());
							//Added by A-8527 for IASCB-34446 start
							String enableMLDSend= findSystemParameterValue(MailConstantsVO.MAIL_MLD_ENABLED_SEND);
							if(MailConstantsVO.FLAG_YES.equals(enableMLDSend)){
							//Added by A-8527 for IASCB-34446 Ends
							mailController.flagMLDForMailOperations(mailBagsForSentResdit, "UPL");
							}
							/*new ResditController().flagResditsForFlightDeparture(
									operationalFlightVO.getCompanyCode(),
										operationalFlightVO.getCarrierId(),
										mailBagsForSentResdit, containerDetailsVOs,
										operationalFlightVO.getPol());
							//Added as part of CRQ ICRD-93584 by A-5526 starts
							new MLDController().flagMLDForMailOperations(mailBagsForSentResdit, "UPL");
							//Added as part of CRQ ICRD-93584 by A-5526 ends*/
							break;
							}
						}
					}

					log.exiting(CLASS, "flagUpliftedResditForMailbags");

				}


    /**
     * Created as part of CR ICRD-89077 by A-5526
				 * Method is used to offload or reassign the missing mailbags(in UPL message) to carrier w.r.t to flight status
     *
				 * @param operationalFlightVO
				 * @param totalMailBags
				 * @throws SystemException
				 */
				private void checkAndProceedOffloadorReassignForUPLMessage(
						OperationalFlightVO operationalFlightVO, Collection<MailbagVO> totalMailBags) throws SystemException {
					// Validating Flight Closure
					boolean isFlightClosed = false;
					LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
					.getLogonAttributesVO();

					ScannedMailDetailsVO scannedMailDetailsVO = new ScannedMailDetailsVO();
					Collection<MailbagVO> mailBagsForReassign = new ArrayList<MailbagVO>();

					Collection<MailbagVO> mailBagsForOffload = new ArrayList<MailbagVO>();

						isFlightClosed = isFlightClosedForOperations(operationalFlightVO);
			
					// Find mailbags for reassignMent/Offload starts
					for (MailbagVO mailbag : totalMailBags) {

            updateMailbagVOsForUPLOffloadOrReassign(mailbag, operationalFlightVO);


            if (!MailConstantsVO.RESDIT_SEND_STATUS.equals(mailbag.getMailStatus()) && !MailConstantsVO.MAIL_STATUS_ASSIGNED.equals(mailbag.getMailStatus())) {
						if (isFlightClosed) {
							//Consider to offload to the destination as flight is closed.
							mailbag.setActionMode(MailConstantsVO.MAIL_STATUS_OFFLOADED);
							mailbag.setIsoffload(true);
							mailbag.setOffloadedRemarks(OFFLOADED_FOR_MLD_UPL);
							mailbag.setOffloadedDescription(OFFLOADED_FOR_MLD_UPL);
							mailbag.setOffloadedReason("2"); // Reason code for Flight departed as there is no way to mentioned the offload reason.
							mailBagsForOffload.add(mailbag);
						} else {
							//Consider for reassignment to destination


							mailBagsForReassign.add(mailbag);
						}
						}

					}

        if (mailBagsForOffload != null && mailBagsForOffload.size() > 0) {

					scannedMailDetailsVO.setMailDetails(mailBagsForOffload);
					Collection<OffloadVO> offloadMailbagVOs = new MailUploadController()
							.makeOffloadVOs(scannedMailDetailsVO,
									logonAttributes);

					for (OffloadVO offloadVO : offloadMailbagVOs) {
						try {
							offload(offloadVO);
						} catch (FlightClosedException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "FlightClosedException-offload");
						} catch (FlightDepartedException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "FlightDepartedException-offload");
						} catch (ReassignmentException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "ReassignmentException-offload");
						} catch (ULDDefaultsProxyException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "ULDDefaultsProxyException-offload");
						} catch (CapacityBookingProxyException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "CapacityBookingProxyException-offload");
						} catch (MailBookingException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "MailBookingException-offload");
						}
					}
        } else {

            MailbagVO mailbag = null;
						//Reassignment
						try {


                if (mailBagsForReassign != null && mailBagsForReassign.size() > 0) {
                    ContainerVO toContainerVO = new ContainerVO();
							mailbag = mailBagsForReassign.iterator().next();
                    createAndUpdateToContainerDetails(mailbag, toContainerVO, null, logonAttributes);
							reassignMailbags(mailBagsForReassign, toContainerVO);
							}


						} catch (FlightClosedException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "FlightClosedException-reassignMailbags");
						} catch (ReassignmentException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "ReassignmentException-reassignMailbags");
						} catch (InvalidFlightSegmentException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "InvalidFlightSegmentException-reassignMailbags");
						} catch (CapacityBookingProxyException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "CapacityBookingProxyException-reassignMailbags");
						} catch (MailBookingException e) {
							// TODO Auto-generated catch block
							log.log(Log.FINE, "MailBookingException-reassignMailbags");
						}

					}
					// Find mailbags fro reassignMent/Offload ends

				}


				/**
				 * Method to validate mailbags are assigned in the same container
     *
				 * @param mailbagVOs
				 * @param toContainerVO
				 * @throws ReassignmentException
				 * @throws SystemException
				 */
    private void validateMailbagVOs(Collection<MailbagVO> mailbagVOs, ContainerVO toContainerVO) throws ReassignmentException, SystemException {
        int errorFlag = 0;
					String errorBags = "";
        for (MailbagVO mailbagVO : mailbagVOs) {
            Mailbag mailbag = null;
            // Added by A-8353 for ICRD-230449 starts
            MailbagPK mailbagPK = new MailbagPK();
            mailbagPK.setCompanyCode(mailbagVO.getCompanyCode());
           // mailbagPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
            mailbagPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber()> 0 ?
            		mailbagVO.getMailSequenceNumber(): findMailSequenceNumber(mailbagVO.getMailbagId(), mailbagVO.getCompanyCode()) );
            // Added by A-8353 for ICRD-230449 ends

            try {
                mailbag = Mailbag.find(mailbagPK);

						} catch (SystemException e) {
							//e.printStackTrace();

							log.log(Log.SEVERE, "System Exception Caught");
						} catch (FinderException e) {

							log.log(Log.SEVERE, "Finder Exception Caught");
							throw new ReassignmentException(
									"mailtracking.defaults.noresultsfound");
						}


            if ((mailbag.getCarrierId() == toContainerVO.getCarrierId()
                    && (mailbag.getFlightNumber() != null && mailbag.getFlightNumber().equals(toContainerVO.getFlightNumber()))
								&& mailbag.getFlightSequenceNumber() == toContainerVO.getFlightSequenceNumber()
								&& mailbag.getSegmentSerialNumber() == toContainerVO.getSegmentSerialNumber()
                    && (mailbag.getUldNumber() != null && mailbag.getUldNumber().equals(toContainerVO.getContainerNumber()))) && !toContainerVO.isContainerDestChanged()) {
							errorFlag = 1;
                if ("".equals(errorBags)) {
								errorBags = mailbagVO.getMailbagId();
                } else {
			       				errorBags = new StringBuilder(errorBags)
			       				           .append(",")
			       				           .append(mailbagVO.getMailbagId())
			       				           .toString();
			       			}


            }
            if (mailbag != null && mailbag.getFlightSequenceNumber() < 0 && MailConstantsVO.BULK_TYPE.equals(mailbag.getContainerType())) {
							ContainerAssignmentVO containerAssignmentVO = null;
							ContainerVO containerVO = new ContainerVO();
							containerVO.setCompanyCode(mailbagVO.getCompanyCode());
							containerVO.setContainerNumber(mailbagVO
									.getContainerNumber());
							containerVO.setAssignedPort(mailbagVO.getScannedPort());
							containerAssignmentVO = findContainerAssignmentForUpload(containerVO);
                if (containerAssignmentVO != null) {
								mailbagVO.setFinalDestination(containerAssignmentVO.getDestination());
							}

						}
									mailbagVO.setCarrierId(mailbag.getCarrierId());
            if (mailbag.getFlightNumber() != null) {
									mailbagVO.setFlightNumber(mailbag.getFlightNumber());
									}
									mailbagVO.setFlightSequenceNumber(mailbag.getFlightSequenceNumber());
									mailbagVO.setSegmentSerialNumber(mailbag.getSegmentSerialNumber());
									mailbagVO.setContainerNumber(mailbag.getUldNumber());

					}

        if (errorFlag == 1) {
						throw new ReassignmentException(
                    "mailtracking.defaults.reassignmail.reassignsamecontainer", new Object[]{errorBags, toContainerVO.getContainerNumber()});
					}

				}


				/**
				 * A-1739
				 *
				 * @param mailbagVO
				 * @param toContainerVO
				 * @return
				 */
				private OperationalFlightVO constructOpFlightVOFromContainer(
						ContainerVO containerVo) {
					OperationalFlightVO opFlightVO = new OperationalFlightVO();
					opFlightVO.setCompanyCode(containerVo.getCompanyCode());
					opFlightVO.setCarrierId(containerVo.getCarrierId());
					opFlightVO.setFlightNumber(containerVo.getFlightNumber());
					opFlightVO.setFlightSequenceNumber(containerVo.getFlightSequenceNumber());
					opFlightVO.setFlightDate(containerVo.getFlightDate());
					opFlightVO.setPol(containerVo.getAssignedPort());
					opFlightVO.setCarrierCode(containerVo.getCarrierCode());
					opFlightVO.setLegSerialNumber(containerVo.getLegSerialNumber());
					log
							.log(Log.FINE, "THE OPERATIONAL FLIGHT VO FROM MAIL BAG",
									opFlightVO);
					return opFlightVO;
				}


    /**
				 * @param mailbagVOs
				 * @param mailbagsToReassign
				 * @param mailbagsToTsfr
				 * @throws SystemException
     * @author A-1739
				 */

				/*
				 * Added By Karthick V . Note :- The Behaviour of this method is Follows
				 * like From Mail Bag Enquiry the user can select 1.Accepted Ones 2.Accepted
				 * Ones lying in the Inventory as the part of Arrival . 3.Flight Assigned
				 * Ones
				 *
				 * In Case1:- Reassign MailBags to be called as Arrival Details Will be
				 * Null;
				 *
				 * In Case 2 :- For those One lying in the Inventory they have to
				 * Transferred rather than being Reassigned.
				 *
				 * In Case 3:- Flight -- Carrier/Flight ... Call Reasign Mail Bags
				 *
				 */
				private void groupMailbagsForReassignMailBags(
						Collection<MailbagVO> mailbagVOs,
						Collection<MailbagVO> mailbagsToReassign,
						Collection<MailbagVO> mailbagsToTsfr) throws SystemException {
					log.entering("ReassignController", "groupMailbagsForReassignOrTsfr");
					for (MailbagVO mailbagVO : mailbagVOs) {
						// Case 3 is Satisfied Call Reassign Mail Bags
						if (mailbagVO.getFlightSequenceNumber() > 0) {
							mailbagsToReassign.add(mailbagVO);
						} else {
							MailbagVO histMailbagVO = MailbagHistory
									.findArrivalDetailsForMailbag(mailbagVO);
							log.log(Log.FINE, "THE HISTORY MAIL BAG VO", histMailbagVO);
							// Case 1 is satisfied Collect Reassign ..
							if (histMailbagVO == null) {
								mailbagsToReassign.add(mailbagVO);
							}/*
								 * Case 2 is Satisfied collect Transfer
                 */ else if (MailbagVO.FLAG_YES.equals(histMailbagVO
									.getArrivedFlag())
									&& !(MailbagVO.FLAG_YES.equals(histMailbagVO
											.getDeliveredFlag()) || MailbagVO.FLAG_YES
											.equals(histMailbagVO.getDeliveredFlag()))) {
								MailbagVO mailbagToTsfr = new MailbagVO();

								BeanHelper.copyProperties(mailbagToTsfr, histMailbagVO);
								mailbagToTsfr.setCompanyCode(mailbagVO.getCompanyCode());
								mailbagToTsfr.setScannedDate(new LocalDate(mailbagVO
										.getScannedPort(), Location.ARP, false));
								mailbagToTsfr.setScannedUser(mailbagVO.getScannedUser());
								mailbagToTsfr.setInventoryContainer(mailbagVO
										.getContainerNumber());
								mailbagToTsfr.setInventoryContainerType(mailbagVO
										.getContainerType());
								mailbagsToTsfr.add(mailbagToTsfr);
							}
						}
					}
					log.exiting("ReassignController", "groupMailbagsForReassignOrTsfr");
				}


				/**
				 * This method is used to reassign the MailBags .. The Reassignmemts
				 * Possible are 1.Reassign From Flight To Destination 2.Reassign From
				 * Destination To Destination 3.Reassign From Flight To Flight 4.Reassign
				 * From Destination To Flight This method also returns any ULDs which
				 * becomes empty if all the mailbags in it are moved to another ULD. This is
				 * done so that the user can choose to unassign it. At the same time all
				 * Barrows which become empty are deassigned automatically by the System.
				 * A-1739
				 *
				 * @param mailbagsToReassign
				 * @param toContainerVO
				 * @return the ULDs to be unassigned
				 * @throws SystemException
				 * @throws FlightClosedException
				 * @throws ReassignmentException
				 * @throws InvalidFlightSegmentException
				 * @throws CapacityBookingProxyException
				 * @throws MailBookingException
     * @author A-1936 Modified To make the Methods work in a generic manner
				 */
				// TODO ADD THE COMMENTS
				public Collection<ContainerDetailsVO> reassignMailbags(
						Collection<MailbagVO> mailbagVOs, ContainerVO toContainerVO)
						throws SystemException, FlightClosedException,
						ReassignmentException, InvalidFlightSegmentException, CapacityBookingProxyException, MailBookingException {
					Collection<MailbagVO> mailbagsToReassign = new ArrayList<MailbagVO>();
					Collection<MailbagVO> mailbagsToTsfr = new ArrayList<MailbagVO>();
					Collection<ContainerDetailsVO> conDetVO = null;
					//Added as part of bug ICRD-131902 to check whether the mailbags are assigned as part of container assignment itself.
        validateMailbagVOs(mailbagVOs, toContainerVO);
					if (toContainerVO.getFlightSequenceNumber() > 0) {
						 /**
						  * Added By Karthick  V as the part of the ANZ Mail Tracking Bug Fix
						  * If   the  reassign\Transfer is to the Flight then  the Flight Closure check is Required..
						  * for  the ToFlight .....
						  */
						OperationalFlightVO   toFlightVo = constructOpFlightVOFromContainer(toContainerVO);
						log.log(Log.FINE, "THE  TO  FLIGHT ", toFlightVo);
            if (toFlightVo.getFlightSequenceNumber() > 0 && toFlightVo.getLegSerialNumber() > 0 && isFlightClosedForOperations(toFlightVo)) {
                log.log(Log.FINE, "THROW EXCEPTION FOR THE TO FLIGHT");
							throw new FlightClosedException(
									FlightClosedException.FLIGHT_STATUS_CLOSED,
									constructFltErrorData(toFlightVo));
						}
						groupMailbagsForReassignMailBags(mailbagVOs, mailbagsToReassign,
								mailbagsToTsfr);
						log.log(Log.FINEST, "maiblags to transfer ", mailbagsToTsfr);
						log.log(Log.FINEST, "maiblags to reassign ", mailbagsToReassign);
					} else {
						mailbagsToReassign = mailbagVOs;
					}
					if (mailbagsToReassign != null && mailbagsToReassign.size() > 0) {
            try {
				ReassignController reassignController = (ReassignController)SpringAdapter.getInstance().getBean("reassigncontroller");
						conDetVO = reassignController.reassignMailbags(
								mailbagsToReassign, toContainerVO);
						//Added as part of CRQ ICRD-93584 by A-5526 starts
						//Going to save MLD-ALL info as part of reassignment to flight
						//if(toContainerVO.getFlightSequenceNumber()>0)
						//Added by A-8527 for IASCB-34446 start
						String enableMLDSend= findSystemParameterValue(MailConstantsVO.MAIL_MLD_ENABLED_SEND);
						if(MailConstantsVO.FLAG_YES.equals(enableMLDSend)){
						//Added by A-8527 for IASCB-34446 Ends
                MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
                mailController.flagMLDForMailReassignOperations(mailbagsToReassign, toContainerVO, "ALL");
						}
						/*new MLDController().flagMLDForMailReassignOperations(mailbagsToReassign,toContainerVO,"ALL");*/
						//Added as part of CRQ ICRD-93584 by A-5526 starts
            } catch (SystemException e) {
                if ((e.getMessage() != null && (e.getMessage().contains("No such persistent instance"))) ||
                        (e.getError() != null && e.getError().getErrorCode().contains("NO DSN ULD FOR SEG"))
                        ) {
								throw new  ReassignmentException(
										ReassignmentException.MAILBAG_REASSIGN_NOT_AVAILABLE);
                } else {
                    throw new SystemException(e.getMessage(), e);
								}
						}
					}
					if (mailbagsToTsfr != null && mailbagsToTsfr.size() > 0) {
						new MailTransfer().transferMailbags(mailbagsToTsfr, toContainerVO);
					}
					return conDetVO;
				}


    /**
     * Added as part OF CR ICRD-89077 by A-5526
				 * Method to create toContainer info for reassignment to default trolley as part of UPL message processing.
     *
				 * @param mailbag
				 * @param toContainerVO
				 * @param operationalFlightVO
				 * @param logonAttributes
				 * @throws SystemException
				 */
			private void createAndUpdateToContainerDetails(MailbagVO mailbag, ContainerVO toContainerVO, OperationalFlightVO operationalFlightVO, LogonAttributes logonAttributes) throws SystemException {


        String serialNumberForcarrier = "";
				String defaultSU = findSystemParameterValue("mailtracking.defaults.defaultstorageunitforMLDairports");
				StringBuilder uldNumberForCarrier = new StringBuilder();


				toContainerVO.setCompanyCode(mailbag.getCompanyCode());
				toContainerVO.setCarrierCode(mailbag.getCarrierCode());
				toContainerVO.setCarrierId(mailbag.getCarrierId());
				toContainerVO.setAssignedPort(mailbag.getPol());

        if (MailConstantsVO.MAIL_STATUS_ASSIGNED.equals(mailbag.getMailStatus())) {
					toContainerVO.setAcceptanceFlag(MailConstantsVO.FLAG_YES);
					toContainerVO.setArrivedStatus(MailConstantsVO.FLAG_NO);
					toContainerVO.setFlightNumber(operationalFlightVO.getFlightNumber());
					toContainerVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
					toContainerVO.setFlightDate(mailbag.getFromFlightDate());
					toContainerVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
					toContainerVO.setSegmentSerialNumber(operationalFlightVO.getSegSerNum());
					toContainerVO.setPol(mailbag.getPol());
					toContainerVO.setPou(mailbag.getPou());
					toContainerVO.setOwnAirlineCode(mailbag.getCarrierCode());
					toContainerVO.setOwnAirlineId(mailbag.getCarrierId());
            if (mailbag.getInventoryContainer() != null && mailbag.getInventoryContainer().trim().length() > 0) {
					toContainerVO.setContainerNumber(mailbag.getInventoryContainer());
					toContainerVO.setType(mailbag.getInventoryContainerType());
					mailbag.setInventoryContainer(mailbag.getContainerNumber());
					mailbag.setInventoryContainerType(mailbag.getContainerType());
					}
        } else {
				toContainerVO.setFlightNumber("-1");
				toContainerVO.setFlightSequenceNumber(MailConstantsVO.DESTN_FLT);
				toContainerVO.setLegSerialNumber(MailConstantsVO.DESTN_FLT);

				}
				toContainerVO.setFinalDestination(mailbag.getPou());
        serialNumberForcarrier = uldNumberForCarrier.append(toContainerVO.getCompanyCode()).append("-").append(defaultSU).append("-").append(toContainerVO.getFinalDestination()).toString();
        if (toContainerVO.getContainerNumber() == null || toContainerVO.getContainerNumber().trim().length() == 0) {
				toContainerVO.setContainerNumber(serialNumberForcarrier);
				}
        toContainerVO.setLastUpdateTime(new LocalDate(logonAttributes.getAirportCode(), ARP, true));


				}


				/**
				 * This method is to populateMailPK values and set some required field values in mailbag Vo from operationalFlightVO
     *
				 * @param mailbag
				 * @param operationalFlightVO
				 */
					private void updateMailbagVOsForUPLOffloadOrReassign(MailbagVO mailbag,
							OperationalFlightVO operationalFlightVO) {
						log.entering(CLASS, "updateMailbagVOsForUPLOffloadOrReassign");
						mailbag.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
						mailbag.setPol(operationalFlightVO.getPol());
						mailbag.setOperationalStatus(MailConstantsVO.OPERATION_OUTBOUND);

						populateMailPKFields(mailbag);
						log.exiting(CLASS, "updateMailbagVOsForUPLOffloadOrReassign");
					}


					private MailbagVO populateMailPKFields(MailbagVO mailbagVO) {
						log.entering("UploadMailDetailsCommand", "populateMailPKFields");
						String mailBagId = mailbagVO.getMailbagId();

						if (mailBagId != null && mailBagId.trim().length() > 0) {
							mailbagVO.setOoe(mailBagId.substring(0, 6));
							mailbagVO.setDoe(mailBagId.substring(6, 12));
							mailbagVO.setMailCategoryCode(mailBagId.substring(12, 13));
							mailbagVO.setMailSubclass(mailBagId.substring(13, 15));
							mailbagVO.setMailClass(mailbagVO.getMailSubclass().substring(0, 1));
							mailbagVO.setYear(Integer.parseInt(mailBagId.substring(15, 16)));
							mailbagVO.setDespatchSerialNumber(mailBagId.substring(16, 20));
							mailbagVO.setReceptacleSerialNumber(mailBagId.substring(20, 23));
							mailbagVO.setHighestNumberedReceptacle(mailBagId.substring(23, 24));
							mailbagVO.setRegisteredOrInsuredIndicator(mailBagId.substring(24,
									25));
            double displayStrWt = Double.parseDouble(mailBagId.substring(25, 29)) / 10;//added by A-7371
            Measure strWt = new Measure(UnitConstants.MAIL_WGT, displayStrWt);
							mailbagVO
									.setWeight(strWt);

							mailbagVO.setStrWeight(strWt);


						}
						log.exiting("UploadMailDetailsCommand", "populateMailPKFields");
						return mailbagVO;
					}


				/**
				 * 	Method		:	MailController.findAlreadyAssignedTrolleyNumberForMLD
				 *	Added by 	:	A-4803 on 28-Oct-2014
				 * 	Used for 	:	To find whether a container is already presnet for the mail bag
				 *	Parameters	:	@param mldMasterVO
				 *	Parameters	:	@return
				 *	Parameters	:	@throws SystemException
				 *	Return type	: 	String
				 */
				public String findAlreadyAssignedTrolleyNumberForMLD(MLDMasterVO mldMasterVO) throws
				SystemException {
					log.entering(CLASS, "findAlreadyAssignedTrolleyNumberForMLD");
					String containerNumber = Container.findAlreadyAssignedTrolleyNumberForMLD(
							mldMasterVO);
					log.exiting(CLASS, "findAlreadyAssignedTrolleyNumberForMLD");
					return containerNumber;
				}

				/**
				 * saveScannedOffloadMails
     *
				 * @param scannedMailSession
				 * @throws MailBookingException
				 * @throws CapacityBookingProxyException
				 * @throws ULDDefaultsProxyException
				 * @throws ReassignmentException
				 * @throws FlightDepartedException
				 * @throws FlightClosedException
				 */
				public void saveScannedOffloadMails(Collection<OffloadVO> OffloadVosForSave)
				throws SystemException, FlightClosedException, FlightDepartedException,
				ReassignmentException, ULDDefaultsProxyException,
            CapacityBookingProxyException, MailBookingException {
					log.entering(CLASS, "saveScannedOffloadMails");
        if (OffloadVosForSave != null && OffloadVosForSave.size() > 0) {
						for (OffloadVO offloadVOForSave :OffloadVosForSave){
							MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
							mailController.offload(offloadVOForSave);
						}
					}
					log.exiting(CLASS, "saveScannedOffloadMails");
				}

    /**
				 * @param offloadVo
				 * @return
				 * @throws SystemException
				 * @throws FlightClosedException
				 * @throws FlightDepartedException
				 * @throws ReassignmentException
				 * @throws ULDDefaultsProxyException
				 * @throws CapacityBookingProxyException
				 * @throws MailBookingException
     * @author
				 */
				@Raise(module = "mail", submodule = "operations", event = "SAVE_DWS_EVENT", methodId = "mail.operations.offloadmail")
				public Collection<ContainerDetailsVO> offload(OffloadVO offloadVo)
						throws SystemException, FlightClosedException,
						FlightDepartedException, ReassignmentException,
						ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException {

					Collection<ContainerDetailsVO> emptyULDs = new ArrayList<ContainerDetailsVO>();
					OperationalFlightVO opFlightVO = createOperationalFlightVO(offloadVo);
					//offloadVo.isFltClosureChkNotReq() added by A-5219 for ICRD-253863
					//to by pass flight closure check when we offload uld from cargo OPS
					if (!offloadVo.isFltClosureChkNotReq() && !isFlightClosedForOperations(opFlightVO)) {
						throw new FlightClosedException(
                    FlightClosedException.FLIGHT_STATUS_CLOSED, new Object[]{
										new StringBuilder(offloadVo.getCarrierCode())
												.append(SPACE).append(
														offloadVo.getFlightNumber())
												.toString(),
										offloadVo.getFlightDate().toString().substring(0,
                            11)});
					}
					if (!offloadVo.isDepartureOverride()) {
						FlightValidationVO flightValidationVO = validateOperationalFlight(
								opFlightVO, false);
            if (flightValidationVO != null) {//Added by A-5160 for ICRD-90823
						if (flightValidationVO.getAtd() != null) {
							throw new FlightDepartedException(
									constructFltErrorData(opFlightVO));
						}
					}
					}
        try {
					if (MailConstantsVO.OFFLOAD_CONTAINER
							.equals(offloadVo.getOffloadType())) {
						offloadContainers(offloadVo);
					} else if (MailConstantsVO.OFFLOAD_MAILBAG.equals(offloadVo
							.getOffloadType())) {
						emptyULDs = offloadMails(offloadVo);
					} else if (MailConstantsVO.OFFLOAD_DSN.equals(offloadVo
							.getOffloadType())) {
						emptyULDs = offloadDSNs(offloadVo);
					}
        } catch (SystemException e) {
            if ((e.getMessage() != null && (e.getMessage().contains("No such persistent instance"))) ||
                    (e.getError() != null && e.getError().getErrorCode().contains("NO DSN ULD FOR SEG"))
                    ) {
							throw new  ReassignmentException(
									ReassignmentException.MAILBAG_REASSIGN_NOT_AVAILABLE);
            } else {
                throw new SystemException(e.getMessage(), e);
							}

					}

					return emptyULDs;
				}

    /**
     * @param offloadVo
     * @return
     * @author This method is used to create the OperationalFlightVO to
				 * check isflightClosed
				 */
				private OperationalFlightVO createOperationalFlightVO(OffloadVO offloadVo) {
					log.entering(CLASS, "createOperationalFlightVO");
					OperationalFlightVO operationalFlightVo = new OperationalFlightVO();
					operationalFlightVo.setCompanyCode(offloadVo.getCompanyCode());
					operationalFlightVo.setCarrierId(offloadVo.getCarrierId());
					operationalFlightVo.setFlightNumber(offloadVo.getFlightNumber());
					operationalFlightVo.setFlightSequenceNumber(offloadVo
							.getFlightSequenceNumber());
					operationalFlightVo.setPol(offloadVo.getPol());
					operationalFlightVo.setLegSerialNumber(offloadVo.getLegSerialNumber());
					operationalFlightVo.setFlightDate(offloadVo.getFlightDate());
					operationalFlightVo.setCarrierCode(offloadVo.getCarrierCode());
					return operationalFlightVo;

				}

				public Collection<FlightValidationVO> validateOperationalFlights(
						OperationalFlightVO opFlightVO, boolean isInbound)
						throws SystemException {
					LOGGER.entering(CLASS, "validateOperationalFlights");
					FlightFilterVO flightFilterVO = new FlightFilterVO();
					flightFilterVO.setCompanyCode(opFlightVO.getCompanyCode());
					flightFilterVO.setFlightCarrierId(opFlightVO.getCarrierId());
					flightFilterVO.setFlightNumber(opFlightVO.getFlightNumber());

					if(opFlightVO.getFlightDate()!=null&&!opFlightVO.isRequireAllLegs()){
					flightFilterVO.setFlightDate(opFlightVO.getFlightDate());
					}
					if(opFlightVO.getFlightSequenceNumber()>0){
						flightFilterVO.setFlightSequenceNumber(opFlightVO.getFlightSequenceNumber());
					}
					if(opFlightVO.getFlightDate()==null && opFlightVO.getFlightSequenceNumber()<=0){
						return null;
					}

					if (isInbound) {
						flightFilterVO.setDirection(FlightFilterVO.INBOUND);
						flightFilterVO.setStation(opFlightVO.getPou());
					} else {
						if(!opFlightVO.isRequireAllLegs()){
						flightFilterVO.setDirection(FlightFilterVO.OUTBOUND);
						flightFilterVO.setStation(opFlightVO.getPol());
					}
					}

					Collection<FlightValidationVO> flightValidationVOs = validateFlight(flightFilterVO);
					LOGGER.exiting(CLASS, "validateOperationalFlights");
					log.log(Log.FINE, "THE FLIGHT FILTER VO IS ", flightFilterVO);
					return flightValidationVOs;
				}

				/**
				 * @param operationalFlightVO
				 * @return
				 */
				private Object[] constructFltErrorData(
						OperationalFlightVO operationalFlightVO) {
					log.log(Log.FINE, SPACE, operationalFlightVO);
        return new String[]{
							new StringBuilder()
									.append(operationalFlightVO.getCarrierCode()).append(
											SPACE).append(
											operationalFlightVO.getFlightNumber())
									.toString(),
                operationalFlightVO.getFlightDate().toDisplayDateOnlyFormat()};
				}

				/**
				 * This method is used to offload the Containers A-1936
				 *
				 * @param offloadVo
				 * @throws SystemException
				 * @throws ULDDefaultsProxyException
				 * @throws CapacityBookingProxyException
				 * @throws MailBookingException
				 */
				private void offloadContainers(OffloadVO offloadVo) throws SystemException,
						ULDDefaultsProxyException, CapacityBookingProxyException,
						MailBookingException {
					log.entering("Inside the OffloadContainers", "offloadContainers");
					Collection<String> mailIds = null;
					boolean isMonitorSLAEnabled = isMonitorSLAEnabled();
					// Added By Karthick V For Monitoring the Service Level Activity
					Collection<ContainerDetailsVO> shipperBuiltContainersForResdit = null;
					Collection<ContainerVO> shipperBuiltContainers = null;
					OperationalFlightVO operationalFlightVo = null;
					if (offloadVo.getOffloadContainers() != null
							&& offloadVo.getOffloadContainers().size() > 0) {
						Collection<ContainerVO> containerVos = new ArrayList<ContainerVO>(
								offloadVo.getOffloadContainers());
						for (ContainerVO containerVo : containerVos) {
							containerVo.setFlightDate(offloadVo.getFlightDate());
							log.log(Log.FINE, "The Flight Date in Offload Containers",
									containerVo.getFlightDate());
							if (containerVo.getCarrierId() == 0) {
								containerVo.setCarrierId(offloadVo.getCarrierId());
							}
									/*
							 * Added the Check for Flagging the Pending Resdits For
							 * ShipperBuiltUlds
							 */
							if (ContainerVO.FLAG_YES.equals(containerVo.getPaBuiltFlag())
									&& MailConstantsVO.ULD_TYPE.equals(containerVo
											.getType())) {
								if (shipperBuiltContainers == null) {
									shipperBuiltContainers = new ArrayList<ContainerVO>();
								}
								shipperBuiltContainers.add(containerVo);
							}

							if (MailConstantsVO.FLAG_YES
									.equals(findSystemParameterValue(MailConstantsVO.INVENTORY_ENABLED_FLAG))) {
								containerVo.setFinalDestination(null);
							}

						}
						operationalFlightVo = constructFlightVoForOffload(offloadVo);
						// Added By Karthick V
						if (isMonitorSLAEnabled) {
							mailIds = new ArrayList<String>();
						}
						new ReassignController().reassignContainerFromFlightToDest(
								containerVos, operationalFlightVo, mailIds);
						createOffloadDetails(containerVos, offloadVo);
						shipperBuiltContainersForResdit = constructConDetailsVOsForResdit(shipperBuiltContainers);
            MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
                        if(!offloadVo.isRemove()) {
						mailController.flagPendingResditForUlds(
								shipperBuiltContainersForResdit, offloadVo.getPol());
                        }
						/*String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
						if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
							log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
							new ResditController().flagPendingResditForUlds(
									shipperBuiltContainersForResdit, offloadVo.getPol());
						}*/
						// Added By Karthick V For Monitoring the Service Level Activity
						if (mailIds != null && mailIds.size() > 0) {
							log.log(Log.FINE, "The Mail IDS ", mailIds.size());
							log.log(Log.FINE, "The Mail IDS ", mailIds);
							monitorMailSLAActivity(createMonitorSLAVosForOffloadContainer(
									mailIds, offloadVo.getCompanyCode()));
						}
						// Added By Karthick V For Monitoring the Service Level Activity

					}
					log.exiting("OffloadContainers", "offloadContainers");
				}

    /**
     * @param offloadVo
     * @return
				 * @author This method is used to construct the
				 *         constructFlightVoForOffload
				 */
				private OperationalFlightVO constructFlightVoForOffload(OffloadVO offloadVo) {
        log.entering(CLASS, "constructFlightVoForOffload");
					OperationalFlightVO operationalFlightVo = new OperationalFlightVO();
					operationalFlightVo.setCompanyCode(offloadVo.getCompanyCode());
					operationalFlightVo.setCarrierId(offloadVo.getCarrierId());
					operationalFlightVo.setPol(offloadVo.getPol());
					operationalFlightVo.setCarrierCode(offloadVo.getCarrierCode());
					operationalFlightVo.setFlightNumber(String
							.valueOf(MailConstantsVO.DESTN_FLT));
					operationalFlightVo.setFlightSequenceNumber(MailConstantsVO.DESTN_FLT);
					operationalFlightVo.setLegSerialNumber(MailConstantsVO.DESTN_FLT);
        log.exiting(CLASS, "constructFlightVoForOffload");
					return operationalFlightVo;
				}

				/**
				 * This method is used to construct the ContainerDetailsVo from the
				 * ContainerVo A-1936
				 *
				 * @param containerVos
				 * @return
				 */
				private Collection<ContainerDetailsVO> constructConDetailsVOsForResdit(
						Collection<ContainerVO> containerVos) {
					Collection<ContainerDetailsVO> containerDetailsVOs = null;
					if (containerVos != null && containerVos.size() > 0) {
						containerDetailsVOs = new ArrayList<ContainerDetailsVO>();
						for (ContainerVO containerVo : containerVos) {
							ContainerDetailsVO containerDetailsVO = new ContainerDetailsVO();
							containerDetailsVO.setCompanyCode(containerVo.getCompanyCode());
							containerDetailsVO.setPol(containerVo.getAssignedPort());
							containerDetailsVO.setContainerNumber(containerVo
									.getContainerNumber());
							containerDetailsVO.setCarrierCode(containerVo.getCarrierCode());
							containerDetailsVO.setCarrierId(containerVo.getCarrierId());
							containerDetailsVO.setFlightNumber(containerVo
									.getFlightNumber());
							containerDetailsVO.setFlightSequenceNumber(containerVo
									.getFlightSequenceNumber());
							containerDetailsVO.setSegmentSerialNumber(containerVo
									.getSegmentSerialNumber());
							containerDetailsVO.setOwnAirlineCode(containerVo
									.getOwnAirlineCode());
							containerDetailsVO.setContainerJnyId(containerVo
									.getContainerJnyID());
                if (containerVo.getShipperBuiltCode() != null) {
							containerDetailsVO.setPaCode(containerVo
									.getShipperBuiltCode());
							}
							containerDetailsVOs.add(containerDetailsVO);
						}
					}
					return containerDetailsVOs;
				}

				private void createOffloadDetails(Collection<ContainerVO> containerVos,
						OffloadVO offloadVo) throws SystemException {
					for (ContainerVO containerVO : containerVos) {
						OffloadDetailVO offloadDetailVo = new OffloadDetailVO();
						offloadDetailVo.setCompanyCode(containerVO.getCompanyCode());
						offloadDetailVo
								.setContainerNumber(containerVO.getContainerNumber());
						offloadDetailVo.setFlightNumber(containerVO.getFlightNumber());
						offloadDetailVo.setFlightSequenceNumber(containerVO
								.getFlightSequenceNumber());
						offloadDetailVo.setAirportCode(containerVO.getAssignedPort());
						offloadDetailVo.setCarrierId(containerVO.getCarrierId());
						offloadDetailVo.setSegmentSerialNumber(containerVO
								.getSegmentSerialNumber());
						offloadDetailVo.setOffloadedBags(containerVO.getBags());
						offloadDetailVo.setOffloadedWeight(containerVO.getWeight());
						offloadDetailVo.setCarrierCode(offloadVo.getCarrierCode());
						offloadDetailVo.setOffloadType(MailConstantsVO.OFFLOADTYPE_FULL);
						offloadDetailVo.setOffloadReasonCode(containerVO
								.getOffloadedReason());
						offloadDetailVo
								.setOffloadRemarks(containerVO.getOffloadedRemarks());
						offloadDetailVo.setOffloadUser(containerVO.getLastUpdateUser());
						offloadDetailVo.setOffloadDescription(containerVO
								.getOffloadedDescription());
						new MailOffloadDetail(offloadDetailVo);
					}
				}

				/**
				 * 120507
				 *
				 * @param mailBagsForMonitorSLA
				 * @param mailAcceptanceVO
				 * @return
				 * @throws SystemException
     * @author a-1936 This method is used to construct the MonitorSLAVos From
     * the MailBagVos
				 */
				private Collection<MonitorMailSLAVO> createMonitorSLAVosForOffloadContainer(
						Collection<String> mailBagsForMonitorSLA, String companyCode)
						throws SystemException {
					log.entering(CLASS, "createMonitorSLAVosForOffloadContainer");
					MonitorMailSLAVO monitorSLAVo = null;
					Collection<MonitorMailSLAVO> monitorSLAVos = new ArrayList<MonitorMailSLAVO>();
					for (String mailBagForMonitorSLA : mailBagsForMonitorSLA) {
						monitorSLAVo = new MonitorMailSLAVO();
						monitorSLAVo.setCompanyCode(companyCode);
						monitorSLAVo.setActivity(MonitorMailSLAVO.MAILSTATUS_OFFLOADED);
						monitorSLAVo.setMailBagNumber(mailBagForMonitorSLA);
						monitorSLAVo
								.setOperationFlag(MonitorMailSLAVO.OPERATION_FLAG_UPDATE);
						monitorSLAVos.add(monitorSLAVo);
					}
					log.entering(CLASS, "createMonitorSLAVosForOffloadContainer");
					return monitorSLAVos;
				}

    /**
				 * @param offloadVo
				 * @return
				 * @throws SystemException
				 * @throws ReassignmentException
				 * @throws CapacityBookingProxyException
				 * @throws MailBookingException
     * @author a-1936 This method is used to offload the mailBags.
				 */
				private Collection<ContainerDetailsVO> offloadMails(OffloadVO offloadVo)
						throws SystemException, ReassignmentException, CapacityBookingProxyException, MailBookingException {
					log.log(Log.INFO, "OFFLOAD MAILBAGS");
					// Added By Karthick V for Monitoring the Service Level Activities
					// Starts
					boolean isMonitorSLAEnabled = isMonitorSLAEnabled();
					log.log(Log.FINE, "ISMONITORSLAENABLED ", isMonitorSLAEnabled);
					LocalDate dateOfOffload = null;
					// Added By Karthick V for Monitoring the Service Level Activities
					// Starts
					Map<String, Collection<MailbagVO>> offloadMap = null;
					Collection<MailbagVO> mailBags = offloadVo.getOffloadMailbags();
					Collection<ContainerDetailsVO> emptyContainers = new ArrayList<ContainerDetailsVO>();
					if (mailBags != null && mailBags.size() > 0) {
					for (MailbagVO mailbagVO : mailBags) {
						if (mailbagVO.getCarrierId() == 0) {
							mailbagVO.setCarrierId(offloadVo.getCarrierId());
						}
						mailbagVO.setTriggerForReImport(MailConstantsVO.MAIL_STATUS_OFFLOADED);						
					}
					if(!offloadVo.isRemove()) {
						checkForPaBuiltContainersForMail(mailBags);
					}
						offloadMap = constructMapForOffload(offloadVo);
						if (offloadMap != null && offloadMap.size() > 0) {
							for (String dummyContainer : offloadMap.keySet()) {
								ContainerVO containerVo = createContainerForOffload(
										dummyContainer, offloadVo.getPol());
								containerVo.setCompanyCode(offloadVo.getCompanyCode());
								containerVo.setCarrierId(offloadVo.getCarrierId());
								containerVo.setAssignedUser(offloadVo.getUserCode());
								containerVo.setAssignedPort(offloadVo.getPol());
								log.log(Log.FINE, "THE ASSIGNED PORT IS ", offloadVo.getPol());
								containerVo.setAssignedUser(offloadVo.getUserCode());
								containerVo.setCarrierCode(offloadVo.getCarrierCode());
								for (MailbagVO mailbagVo : offloadMap.get(dummyContainer)) {
									containerVo.setPou(mailbagVo.getPou());
									if (MailConstantsVO.FLAG_YES
											.equals(findSystemParameterValue(MailConstantsVO.INVENTORY_ENABLED_FLAG))) {
										containerVo.setFinalDestination(null);
									} else {
										containerVo.setFinalDestination(mailbagVo.getPou());
									}
									//Done as a work around for Optimistic Locking.
									containerVo.setLastUpdateTime(mailbagVo.getLastUpdateTime());
									break;
								}
								updateContainerForOffload(containerVo);

								/*
								 * Update/Cancel Booing For From Flight : This should happen before the Transaction happens from the " From Flight "
								 * Since Mail bag is considered here,
								 * pass "NULL" to the second parameter of
								 * updateBookingFromFlight(Collection<MailbagVO> mailbagVOs, Collection<DespatchDetailsVO> despatchDetailsVOs),
								 * as it takes the despatch details.
								 */
								Collection<MailbagVO> flightAssignedMailbags = offloadMap.get(dummyContainer);
//								updateBookingFromFlight(flightAssignedMailbags,null);

								emptyContainers.addAll(new ReassignController()
										.reassignMailFromFlightToDestination(offloadMap
												.get(dummyContainer), containerVo, true));
								createOffloadDetailsForMail(offloadVo);

								//added by A-3229 for irregularity
//								createIrregularityDetailsForMail(offloadVo);

								/*
								 * Added By Karthick V to fetch the server time at the
								 * Current port for the Offload of the Very first Mailbag.
								 * Currently this formulated Date to be used as the time at
								 * which the Offload took place...This is actually being
								 * done for Monitoring the Service Level Activity of the
								 * Mail Bags.
								 *
								 */
								if (isMonitorSLAEnabled && dateOfOffload == null) {
									dateOfOffload = new LocalDate(offloadVo.getPol(),
											Location.ARP, true);
								}
							}

							// Added By Karthick V for MOnitor SLA
							if (isMonitorSLAEnabled && mailBags != null
									&& mailBags.size() > 0) {
								log.log(Log.FINE, "The MailBags", mailBags.size());
								log.log(Log.FINE, "The MailBags", mailBags);
								monitorMailSLAActivity(createMonitorSLAVosForOffloadMail(
										mailBags, dateOfOffload));
							}

						}
					}
					return emptyContainers;
				}

				private void checkForPaBuiltContainersForMail(Collection<MailbagVO> mailbags)
						throws SystemException, ReassignmentException {
					log.entering(CLASS, "checkForPaBuiltContainers");
					Collection<ContainerPK> containers = groupContainersForMailbags(mailbags);

					try {
						for (ContainerPK containerPK : containers) {
							Container container = Container.find(containerPK);
                if (MailConstantsVO.FLAG_YES.equals(container.getPaBuiltFlag())) {

								throw new ReassignmentException(
										ReassignmentException.MAILBAG_REASSIGN_FROM_PABUILT);
							}
						}
					} catch (FinderException ex) {
						throw new SystemException(ex.getMessage(), ex);
					}
					log.exiting(CLASS, "checkForPaBuiltContainers");
				}

				/**
				 * @param mailbags
				 * @return
				 */
				private Collection<ContainerPK> groupContainersForMailbags(
						Collection<MailbagVO> mailbags) {

					Collection<ContainerPK> containers = new ArrayList<ContainerPK>();
					for (MailbagVO mailbagVO : mailbags) {
						/*
						 * sep 28 06 Pabuilt check done only for outbound mailbags
						 */
						if (MailConstantsVO.OPERATION_OUTBOUND.equals(mailbagVO
								.getOperationalStatus())) {
							ContainerPK containerPK = contstructContainerPKFromMail(mailbagVO);
							if (!containers.contains(containerPK)) {
								containers.add(containerPK);
							}
						}
					}
					return containers;
				}

				/**
				 * @param mailbagVO
				 * @return
				 */
				private ContainerPK contstructContainerPKFromMail(MailbagVO mailbagVO) {
					ContainerPK containerPK = new ContainerPK();
					containerPK.setCompanyCode(mailbagVO.getCompanyCode());
					containerPK.setCarrierId(mailbagVO.getCarrierId());
					containerPK.setFlightNumber(mailbagVO.getFlightNumber());
					containerPK
							.setFlightSequenceNumber(mailbagVO.getFlightSequenceNumber());
					containerPK.setLegSerialNumber(mailbagVO.getLegSerialNumber());
					containerPK.setAssignmentPort(mailbagVO.getScannedPort());
					containerPK.setContainerNumber(mailbagVO.getContainerNumber());
					return containerPK;
				}

				/**
				 * This method is used to group the mailbags based on the mailbags carrierId
				 * and POU .. say OFL-QF-SIN contains a Collection<MailBagVO> OFL-QF-SYD
				 * contains a Collection<MailBagVO> A-1936
				 *
				 * @param offloadVo
				 * @return
				 */
				private Map<String, Collection<MailbagVO>> constructMapForOffload(
						OffloadVO offloadVo) {
					log.entering(CLASS, "constructMapForOffload");
					Map<String, Collection<MailbagVO>> offloadMap = new HashMap<String, Collection<MailbagVO>>();
					String key = null;
					Collection<MailbagVO> mailbagVos = null;
					Collection<MailbagVO> mailbags = new ArrayList<MailbagVO>(offloadVo
							.getOffloadMailbags());
					for (MailbagVO mailbagVo : mailbags) {
						mailbagVo.setFlightDate(offloadVo.getFlightDate());
						mailbagVo.setCarrierCode(offloadVo.getCarrierCode());
						mailbagVo.setScannedUser(offloadVo.getUserCode());
						key = constructContainerForOffload(mailbagVo);
						mailbagVos = offloadMap.get(key);
						if (mailbagVos == null) {
							mailbagVos = new ArrayList<MailbagVO>();
							offloadMap.put(key, mailbagVos);
						}
						mailbagVos.add(mailbagVo);
					}
					return offloadMap;
				}

    /**
     * @param mailbagVo
     * @return
				 * @author a-1936 This method is used to create the DummyContainers in case
				 *         of the Offload. Say OFL-QF-SYD OFL-QF-SIN OFL-QF-PER and The
				 *         Destination of the Container is POU of the Mailbag
				 */
				private String constructContainerForOffload(MailbagVO mailbagVo) {
					return new StringBuilder(MailConstantsVO.MAIL_STATUS_OFFLOADED).append(
							"-").append(mailbagVo.getCarrierCode()).append("-").append(
							mailbagVo.getPou()).toString();
				}

    /**
				 * @param offloadContainer
				 * @param scannedPort
				 * @return
     * @author a-1936 This method is used to CreateContainerForOffload
				 */
	private ContainerVO createContainerForOffload(String offloadContainer, String scannedPort) {
					ContainerVO containerVO = new ContainerVO();
					containerVO.setContainerNumber(offloadContainer);
					containerVO.setFlightNumber(String.valueOf(MailConstantsVO.DESTN_FLT));
					containerVO.setFlightSequenceNumber(MailConstantsVO.DESTN_FLT);
					containerVO.setSegmentSerialNumber(MailConstantsVO.DESTN_FLT);
					containerVO.setLegSerialNumber(MailConstantsVO.DESTN_FLT);
					containerVO.setAssignedDate(new LocalDate(scannedPort, Location.ARP,
							true));
					containerVO.setType(MailConstantsVO.BULK_TYPE);
					containerVO.setReassignFlag(true);
					containerVO.setOffloadFlag(MailConstantsVO.FLAG_YES);
					containerVO.setTransactionCode(MailConstantsVO.MAIL_TXNCOD_ASG);
					return containerVO;
				}

    /**
				 * @param toDestinationContainerVO
				 * @throws SystemException
     * @author a-1936 This methodo is used to update the Container or create and
     * update the Container for OFFload
				 */
				private void updateContainerForOffload(ContainerVO toDestinationContainerVO)
						throws SystemException {
					ContainerPK containerPk = new ContainerPK();
					containerPk.setCompanyCode(toDestinationContainerVO.getCompanyCode());
					containerPk.setContainerNumber(toDestinationContainerVO
							.getContainerNumber());
					containerPk.setAssignmentPort(toDestinationContainerVO
							.getAssignedPort());
					containerPk.setFlightNumber(toDestinationContainerVO.getFlightNumber());
					containerPk.setCarrierId(toDestinationContainerVO.getCarrierId());
					containerPk.setFlightSequenceNumber(toDestinationContainerVO
							.getFlightSequenceNumber());
					containerPk.setLegSerialNumber(toDestinationContainerVO
							.getLegSerialNumber());
					toDestinationContainerVO
							.setAssignedDate(new LocalDate(toDestinationContainerVO
									.getAssignedPort(), Location.ARP, true));
					Container container = null;
					try {
						container = Container.find(containerPk);
						container.setLastUpdateTime(toDestinationContainerVO.getLastUpdateTime());
					} catch (FinderException ex) {
						// Audit implementation for the Insert Operation is being done in
						// the Create Method
						container = createContainer(toDestinationContainerVO);
					}
					container.setAcceptanceFlag(MailConstantsVO.FLAG_YES);
				}

				/**
				 * This method is used to create the offloadDetails and persist them This is
				 * used to used while offloading mailbags A-1739
				 *
				 * @param offloadVo
				 * @throws SystemException
				 */
				private void createOffloadDetailsForMail(OffloadVO offloadVo)
						throws SystemException {
					log.entering(CLASS, "createOffloadDetailsForMail");
					Collection<MailbagVO> mailbags = new ArrayList<MailbagVO>(offloadVo
							.getOffloadMailbags());
					if (mailbags != null && mailbags.size() > 0) {
						for (MailbagVO mailbagVo : mailbags) {
							OffloadDetailVO offloadDetailVO = new OffloadDetailVO();
							offloadDetailVO.setCompanyCode(mailbagVo.getCompanyCode());
							offloadDetailVO.setContainerNumber(mailbagVo
									.getContainerNumber());
							offloadDetailVO.setAirportCode(mailbagVo.getScannedPort());
							offloadDetailVO.setCarrierCode(mailbagVo.getCarrierCode());
							offloadDetailVO.setCarrierId(mailbagVo.getCarrierId());
							offloadDetailVO.setFlightNumber(mailbagVo.getFlightNumber());
							offloadDetailVO
									.setDestinationExchangeOffice(mailbagVo.getDoe());
							offloadDetailVO.setOriginExchangeOffice(mailbagVo.getOoe());
							offloadDetailVO.setDsn(mailbagVo.getDespatchSerialNumber());
							offloadDetailVO.setFlightSequenceNumber(mailbagVo
									.getFlightSequenceNumber());
							offloadDetailVO.setMailSequenceNumber(mailbagVo.getMailSequenceNumber());
							// ADDED TO INCLUDE THE DSN PK
							offloadDetailVO.setMailClass(mailbagVo.getMailClass());
							offloadDetailVO.setMailSubclass(mailbagVo.getMailSubclass());
							offloadDetailVO.setMailCategoryCode(mailbagVo
									.getMailCategoryCode());
							offloadDetailVO.setMailId(mailbagVo.getMailbagId());
							offloadDetailVO.setOffloadDescription(mailbagVo
									.getOffloadedDescription());
							offloadDetailVO.setOffloadedDate(new LocalDate(mailbagVo
									.getScannedPort(), Location.ARP, true));
							offloadDetailVO.setOffloadReasonCode(mailbagVo
									.getOffloadedReason());
							offloadDetailVO.setOffloadRemarks(mailbagVo
									.getOffloadedRemarks());
							offloadDetailVO
									.setOffloadType(MailConstantsVO.OFFLOADTYPE_PARTIAL);
							offloadDetailVO.setYear(mailbagVo.getYear());
							offloadDetailVO.setOffloadedBags(MailConstantsVO.ONE);
							offloadDetailVO.setOffloadedWeight(mailbagVo.getWeight());

							// TODO LOGON USER
							offloadDetailVO.setOffloadUser(offloadVo.getUserCode());
							offloadDetailVO.setSegmentSerialNumber(mailbagVo
									.getSegmentSerialNumber());
							new MailOffloadDetail(offloadDetailVO);
						}
					}
				}

    /**
     * @param mailBagsForMonitorSLA
     * @param mailAcceptanceVO
     * @return
     * @throws SystemException
     * @author a-1936 This method is used to construct the MonitorSLAVos From
     * the MailBagVos
				 */
				private Collection<MonitorMailSLAVO> createMonitorSLAVosForOffloadMail(
						Collection<MailbagVO> mailBagsForMonitorSLA, LocalDate dateOfOffload)
						throws SystemException {
					log.entering(CLASS, "createMonitorSLAVosForOffloadMail");
					MonitorMailSLAVO monitorSLAVo = null;
					Collection<MonitorMailSLAVO> monitorSLAVos = new ArrayList<MonitorMailSLAVO>();
					for (MailbagVO mailBagForMonitorSLA : mailBagsForMonitorSLA) {
						monitorSLAVo = new MonitorMailSLAVO();
						monitorSLAVo.setCompanyCode(mailBagForMonitorSLA.getCompanyCode());
						monitorSLAVo.setActivity(MonitorMailSLAVO.MAILSTATUS_OFFLOADED);
						monitorSLAVo.setMailBagNumber(mailBagForMonitorSLA.getMailbagId());
						monitorSLAVo
								.setOperationFlag(MonitorMailSLAVO.OPERATION_FLAG_UPDATE);
						monitorSLAVos.add(monitorSLAVo);
					}
					log.entering(CLASS, "createMonitorSLAVosForOffloadMail");
					return monitorSLAVos;
				}

				/**
				 * This method is used to offload the Dsns Say when the Offload For Dsns
				 * Happens all the DSNS are assigned to a POU of the Despatch and into a
				 * dummyContainer A-1936
				 *
				 * @param offloadVo
				 * @return
				 * @throws SystemException
				 * @throws ReassignmentException
				 * @throws CapacityBookingProxyException
				 * @throws MailBookingException
				 */
				private Collection<ContainerDetailsVO> offloadDSNs(OffloadVO offloadVo)
						throws SystemException, ReassignmentException, CapacityBookingProxyException, MailBookingException {
					log.log(Log.INFO, "OFFLOAD MAILBAGS");
					Map<String, Collection<DespatchDetailsVO>> offloadMap = null;
					Collection<DespatchDetailsVO> despatchDetailsVos = offloadVo
							.getOffloadDSNs();
					Collection<ContainerDetailsVO> emptyULDs = new ArrayList<ContainerDetailsVO>();
					if (despatchDetailsVos != null && despatchDetailsVos.size() > 0) {
						checkForPaBuiltULDsForDespatch(despatchDetailsVos);
						offloadMap = constructMapForOffloadDSNs(offloadVo);
						if (offloadMap != null && offloadMap.size() > 0) {
							for (String dummyContainer : offloadMap.keySet()) {
								ContainerVO containerVo = createContainerForOffload(
										dummyContainer, offloadVo.getPol());
								containerVo.setCompanyCode(offloadVo.getCompanyCode());
								containerVo.setCarrierId(offloadVo.getCarrierId());
								containerVo.setAssignedUser(offloadVo.getUserCode());
								containerVo.setAssignedPort(offloadVo.getPol());
								log.log(Log.FINE, "THE ASSIGNED PORT IS ", offloadVo.getPol());
								containerVo.setAssignedUser(offloadVo.getUserCode());
								containerVo.setCarrierCode(offloadVo.getCarrierCode());
								for (DespatchDetailsVO despatchDetailsVO : offloadMap
										.get(dummyContainer)) {
									containerVo.setPou(despatchDetailsVO.getPou());
									containerVo.setFinalDestination(despatchDetailsVO
											.getPou());
									break;
								}
								updateContainerForOffload(containerVo);

								/*
								 * Update/Cancel Booing For From Flight : This should
								 * happen before the Transaction happens from the " From Flight "
								 * Since Despatch is considered here,
								 * pass "NULL" to the first parameter of
								 * updateBookingFromFlight(Collection<MailbagVO> mailbagVOs,
								 * 			Collection<DespatchDetailsVO> despatchDetailsVOs),
								 * as it takes the mail details.
								 */
								Collection<DespatchDetailsVO> flightAssignedDSNs = offloadMap.get(dummyContainer);
//								updateBookingFromFlight(null,flightAssignedDSNs);

								emptyULDs.addAll(new ReassignController()
										.reassignDSNsFromFlightToDestination(offloadMap
												.get(dummyContainer), containerVo));
								createOffloadDetailsForDSNs(offloadVo);

								//added by A-3229 for irregularity
			                   // createIrregularityForDSNs(offloadVo);

				/*				performAuditForReasssignDespatches(offloadMap
										.get(dummyContainer), containerVo);*/
							}
						}
					}
					return emptyULDs;
				}

				/**
				 * This method checks if a despatch is being reassigned from a Pa built ULD.
				 * if so it throws exception A-1739
				 *
				 * @param despatches
				 * @throws SystemException
     * @throws ReassignmentException If reassignment is from a PA ULD
				 */
				private void checkForPaBuiltULDsForDespatch(
						Collection<DespatchDetailsVO> despatches) throws SystemException,
						ReassignmentException {
					log.entering(CLASS, "checkForPaBuiltContainersForDespatch");
					Collection<ContainerPK> containers = groupContainersForDespatches(despatches);

					try {
						for (ContainerPK containerPK : containers) {
							Container container = Container.find(containerPK);
							if (MailConstantsVO.FLAG_YES.equals(container.getPaBuiltFlag())) {

								throw new ReassignmentException(
										ReassignmentException.DESPATCH_REASSIGN_FROM_PABUILT);
							}
						}
					} catch (FinderException ex) {
						throw new SystemException(ex.getMessage(), ex);
					}
					log.exiting(CLASS, "checkForPaBuiltContainersForDespatch");
				}

				/**
				 * A-1739
				 *
				 * @param despatches
				 * @return
				 */
				private Collection<ContainerPK> groupContainersForDespatches(
						Collection<DespatchDetailsVO> despatches) {
					Collection<ContainerPK> containerPKs = new ArrayList<ContainerPK>();

					for (DespatchDetailsVO despatchDetailsVO : despatches) {
						// operation type may not be set in all cases
						if (!MailConstantsVO.OPERATION_INBOUND.equals(despatchDetailsVO
								.getOperationType())) {
							ContainerPK containerPK = constructContainerPKForDespatch(despatchDetailsVO);
							if (!containerPKs.contains(containerPK)) {
								containerPKs.add(containerPK);
							}
						}
					}
					return containerPKs;
				}

				/**
				 * A-1739
				 *
				 * @param despatchDetailsVO
				 * @return
				 */
				private ContainerPK constructContainerPKForDespatch(
						DespatchDetailsVO despatchDetailsVO) {
					ContainerPK containerPK = new ContainerPK();
					containerPK.setCompanyCode(despatchDetailsVO.getCompanyCode());
					containerPK.setCarrierId(despatchDetailsVO.getCarrierId());
					if (despatchDetailsVO.getFlightNumber() != null) {
						containerPK.setFlightNumber(despatchDetailsVO.getFlightNumber());
						containerPK.setFlightSequenceNumber(despatchDetailsVO
								.getFlightSequenceNumber());
						containerPK.setLegSerialNumber(despatchDetailsVO
								.getLegSerialNumber());
					} else {
						containerPK.setFlightNumber(String
								.valueOf(MailConstantsVO.DESTN_FLT));
						containerPK.setFlightSequenceNumber(MailConstantsVO.DESTN_FLT);
						containerPK.setLegSerialNumber(MailConstantsVO.DESTN_FLT);
					}
					containerPK.setAssignmentPort(despatchDetailsVO.getAirportCode());
					containerPK.setContainerNumber(despatchDetailsVO.getContainerNumber());
					return containerPK;
				}

				/**
				 * This method is used to group the mailbags based on the mailbags carrierId
				 * and POU .. say OFL-QF-SIN contains a Collection<DespatchDetailsVo>
				 * OFL-QF-SYD contains a Collection<DespatchDetailsVo>
				 *
				 * @param offloadVo
				 * @return
				 */
				private Map<String, Collection<DespatchDetailsVO>> constructMapForOffloadDSNs(
						OffloadVO offloadVo) {
					log.entering(CLASS, "constructMapForOffload");
					Map<String, Collection<DespatchDetailsVO>> offloadMap = new HashMap<String, Collection<DespatchDetailsVO>>();
					String key = null;
					Collection<DespatchDetailsVO> despatchDetailsVOs = null;
					Collection<DespatchDetailsVO> despatchDetails = new ArrayList<DespatchDetailsVO>(
							offloadVo.getOffloadDSNs());
					for (DespatchDetailsVO despatchDetailsVO : despatchDetails) {
						key = constructContainerForOffloadDSN(despatchDetailsVO);
						despatchDetailsVOs = offloadMap.get(key);
						if (despatchDetailsVOs == null) {
							despatchDetailsVOs = new ArrayList<DespatchDetailsVO>();
							offloadMap.put(key, despatchDetailsVOs);
						}
						despatchDetailsVOs.add(despatchDetailsVO);
					}
					return offloadMap;
				}

    /**
     * @param despatchDetailsVO
     * @return
				 * @author a-1936 This method is used to create the DummyContainers in case
				 *         of the Offload. Say OFL-QF-SYD OFL-QF-SIN OFL-QF-PER and The
				 *         Destination of the Container is POU of the Despatches
				 */
				private String constructContainerForOffloadDSN(
						DespatchDetailsVO despatchDetailsVO) {
					return new StringBuilder(MailConstantsVO.MAIL_STATUS_OFFLOADED).append(
							"-").append(despatchDetailsVO.getCarrierCode()).append("-")
							.append(despatchDetailsVO.getPou()).toString();
				}

    /**
				 * @param offloadVO
				 * @throws SystemException
     * @author a-1936 This method is used to create the Offload Details for the
     * DSNs
				 */
				private void createOffloadDetailsForDSNs(OffloadVO offloadVO)
						throws SystemException {
					log.entering(CLASS, "createOffloadDetailsForMail");
					Collection<DespatchDetailsVO> despatchDetails = new ArrayList<DespatchDetailsVO>(
							offloadVO.getOffloadDSNs());
					if (despatchDetails != null && despatchDetails.size() > 0) {
						for (DespatchDetailsVO despatchDetailsVO : despatchDetails) {
		    				MailbagVO mailbagVO  = constructMailbagInULDAtAirportvoFromDespatch(despatchDetailsVO);
                Collection<MailbagVO> mailbagVOs = findMailBagForDespatch(mailbagVO);
				if (mailbagVOs != null && mailbagVOs.size() > 0) {
					for (MailbagVO mailbagvo : mailbagVOs) {
						OffloadDetailVO offloadDetailVO = new OffloadDetailVO();
						offloadDetailVO.setCompanyCode(despatchDetailsVO
								.getCompanyCode());
						offloadDetailVO.setContainerNumber(despatchDetailsVO
								.getContainerNumber());
						offloadDetailVO.setAirportCode(despatchDetailsVO
								.getAirportCode());
						offloadDetailVO.setCarrierCode(despatchDetailsVO
								.getCarrierCode());
						offloadDetailVO.setCarrierId(despatchDetailsVO
								.getCarrierId());
						offloadDetailVO.setFlightNumber(despatchDetailsVO
								.getFlightNumber());
						offloadDetailVO.setMailSequenceNumber(mailbagvo.getMailSequenceNumber());
						offloadDetailVO
								.setDestinationExchangeOffice(despatchDetailsVO
										.getDestinationOfficeOfExchange());
						offloadDetailVO
								.setOriginExchangeOffice(despatchDetailsVO
										.getOriginOfficeOfExchange());
						offloadDetailVO.setDsn(despatchDetailsVO.getDsn());
						offloadDetailVO
								.setFlightSequenceNumber(despatchDetailsVO
										.getFlightSequenceNumber());
						offloadDetailVO.setMailClass(despatchDetailsVO
								.getMailClass());
						offloadDetailVO.setMailSubclass(despatchDetailsVO
								.getMailSubclass());
						offloadDetailVO.setMailCategoryCode(despatchDetailsVO
								.getMailCategoryCode());
						offloadDetailVO.setOffloadDescription(despatchDetailsVO
								.getOffloadedDescription());
						offloadDetailVO.setOffloadedDate(new LocalDate(
								despatchDetailsVO.getAirportCode(),
								Location.ARP, true));
						offloadDetailVO.setOffloadReasonCode(despatchDetailsVO
								.getOffloadedReason());
						offloadDetailVO.setOffloadRemarks(despatchDetailsVO
								.getOffloadedRemarks());
						offloadDetailVO
								.setOffloadType(MailConstantsVO.OFFLOADTYPE_FULL);
						offloadDetailVO.setYear(despatchDetailsVO.getYear());
						offloadDetailVO.setOffloadedBags(despatchDetailsVO
								.getAcceptedBags());
						offloadDetailVO.setOffloadedWeight(despatchDetailsVO
								.getAcceptedWeight());
						// TODO LOGON USER
						offloadDetailVO.setOffloadUser(offloadVO.getUserCode());
						offloadDetailVO
								.setSegmentSerialNumber(despatchDetailsVO
										.getSegmentSerialNumber());
						new MailOffloadDetail(offloadDetailVO);
					}
				}

						}
					}
				}

				/**
				 * @param mailBagId
				 * @param companyCode
				 * @return
				 * @throws SystemException
				 * @throws PersistenceException
     * @author A-5991
				 */
				public Collection<MailbagVO> findMailBagForDespatch(MailbagVO mailbagVO)
						throws SystemException {

					return ULDForSegment.findMailBagForDespatch(mailbagVO);

				}

    /**
     * @param mailbagVo
     * @return
     * @throws SystemException
				 * @author  This method is used to construct the
				 *         MailbagInULDAtAirportPK
				 */
				private MailbagVO constructMailbagInULDAtAirportvoFromDespatch(
						DespatchDetailsVO despatchDetailsVO) throws SystemException {
					MailbagVO mailbagVO = new MailbagVO();
					mailbagVO.setCompanyCode(despatchDetailsVO
							.getCompanyCode());
					mailbagVO
							.setUldNumber(despatchDetailsVO.getUldNumber());
					mailbagVO.setScannedPort(despatchDetailsVO
							.getAirportCode());
					mailbagVO
							.setCarrierId(despatchDetailsVO.getCarrierId());
					mailbagVO.setDespatchId(
							createDespatchBag(despatchDetailsVO));
					// Added to Include the DSN PK

					return mailbagVO;

				}

				public static String createDespatchBag(MailInConsignmentVO mailInConsignmentVO) {
					StringBuilder dsnid = new StringBuilder();
					dsnid.append(mailInConsignmentVO.getOriginExchangeOffice())
							.append(mailInConsignmentVO.getDestinationExchangeOffice())
							.append(mailInConsignmentVO.getMailCategoryCode())
							.append(mailInConsignmentVO.getMailSubclass())
							.append(mailInConsignmentVO.getYear())
							.append(mailInConsignmentVO.getDsn());
					return dsnid.toString();
				}

				public static String createDespatchBag(DespatchDetailsVO despatchDetailsVO) {
					StringBuilder dsnid = new StringBuilder();
					dsnid.append(despatchDetailsVO.getOriginOfficeOfExchange())
							.append(despatchDetailsVO.getDestinationOfficeOfExchange())
							.append(despatchDetailsVO.getMailCategoryCode())
							.append(despatchDetailsVO.getMailSubclass())
							.append(despatchDetailsVO.getYear())
							.append(despatchDetailsVO.getDsn());
					return dsnid.toString();
				}

    /**
     * @param dsnsToReassign
     * @param toContainerVO
     * @throws SystemException
				 * @author A-1936 This method is used to perform the Audit For Despathces in
				 *         Case of Reassign Reassign Possible are From 1. Flight to
				 *         Destination 2.Destination to Destination 3.Flight to Flight
				 *         4.Destination to Flight This method signifies the No of
				 *         Despatches reassigned From the Flight\Destination to
				 *         Flight\Destination.
				 */
				private void performAuditForReasssignDespatches(
						Collection<DespatchDetailsVO> dsnsToReassign,
						ContainerVO toContainerVO) throws SystemException {
					log.entering(CLASS, "performAuditForReasssignDespatches");
					Collection<DespatchDetailsVO> despatches = null;

					boolean isOffload = false;
					for (DespatchDetailsVO despatchVO : dsnsToReassign) {
						if (despatchVO.isOffload()) {
							isOffload = true;
						}
						break;
					}
				//	Map<DSNPK, Collection<DespatchDetailsVO>> despatchMap = groupDSNDespatches(dsnsToReassign);
					if (dsnsToReassign != null && dsnsToReassign.size() > 0) {
						for (DespatchDetailsVO despatchDetailsVO : dsnsToReassign) {
							//despatches = despatchMap.get(dsnPk);
							int bags = calculateTotalDespatches(dsnsToReassign);
							double weight = calculateDespatchesWeight(dsnsToReassign);
							DSNAuditVO dsnAuditVo = new DSNAuditVO(DSNVO.MODULE_NAME,
									DSNVO.SUBMODULE_NAME, DSNVO.ENTITY_NAME);
							dsnAuditVo.setCompanyCode(despatchDetailsVO.getCompanyCode());
							dsnAuditVo.setOriginExchangeOffice(despatchDetailsVO
									.getOriginOfficeOfExchange());
							dsnAuditVo.setDestinationExchangeOffice(despatchDetailsVO
									.getDestinationOfficeOfExchange());
							dsnAuditVo.setDsn(despatchDetailsVO.getDsn());
							dsnAuditVo.setYear(despatchDetailsVO.getYear());
							dsnAuditVo.setMailSubclass(despatchDetailsVO.getMailSubclass());
							dsnAuditVo
									.setMailClass(despatchDetailsVO.getMailSubclass().substring(0, 1));

							dsnAuditVo.setMailCategoryCode(despatchDetailsVO.getMailCategoryCode());
							dsnAuditVo
									.setActionCode(isOffload ? MailConstantsVO.AUDIT_OFFLOADESPATCHES
											: MailConstantsVO.AUDIT_REASSIGNDESPATCHES);
							dsnAuditVo.setLastUpdateUser(toContainerVO.getAssignedUser());
							StringBuilder additionalInfo = new StringBuilder();
							additionalInfo.append("No Of Bags: ").append(bags).append(",")
									.append(" Total Weight: ").append(weight)
									.append(" To ");
							if (toContainerVO.getFlightSequenceNumber() > 0) {
								additionalInfo.append(toContainerVO.getCarrierCode())
										.append(SPACE)
										.append(toContainerVO.getFlightNumber())
										.append(SPACE).append(
												toContainerVO.getFlightDate()
														.toDisplayDateOnlyFormat());
							} else {
								additionalInfo.append(toContainerVO.getCarrierCode())
										.append(SPACE).append(
												toContainerVO.getFinalDestination());
							}
							dsnAuditVo.setAdditionalInformation(additionalInfo.toString());
							AuditUtils.performAudit(dsnAuditVo);
							log.exiting(CLASS,
									"performAuditForReasssignDespatches");
						}
					}

				}

    /**
     * @param despatchDetailsVos
     * @return
				 * @author A-1936 This method is used to calculate the BagWeight For the
				 *         Despatches...
				 */
				private double calculateDespatchesWeight(
						Collection<DespatchDetailsVO> despatchDetailsVos) {
					double totalWeight = 0;
					for (DespatchDetailsVO despatch : despatchDetailsVos) {
						totalWeight += despatch.getAcceptedBags();
					}
					return totalWeight;
				}

				/**
     * @param despatchDetailsVos
     * @return
				 * @author A-1936 This method is used to calculate the Bagcount for The
				 *         Despatches....
				 */
				private int calculateTotalDespatches(
						Collection<DespatchDetailsVO> despatchDetailsVos) {
					int totalBags = 0;
					for (DespatchDetailsVO despatch : despatchDetailsVos) {
						totalBags += despatch.getAcceptedBags();
					}
					return totalBags;
				}


				/**
				 * @param scannedMailbagsToReturn
				 * @return Collection<ScannedMailDetailsVO>
				 * @throws MailbagAlreadyReturnedException
				 * @throws ReturnNotPossibleException
				 * @throws SystemException
				 * @throws FlightClosedException
     * @throws ReassignmentException           Mailbags are validated and correct mailbags are sent to return.
				 * Exceptional mailbags are added with error and sent back.
     * @throws DuplicateMailBagsException
     * @throws InvalidMailTagFormatException
     * @author a-2107
				 */

				public Collection<ScannedMailDetailsVO> returnScannedMailbags(String airportCode,
						Collection<MailbagVO> scannedMailbagsToReturn)
						throws MailbagAlreadyReturnedException, ReturnNotPossibleException,
            SystemException, FlightClosedException, ReassignmentException, DuplicateMailBagsException {

					log.entering(CLASS, "returnscannedMailbags");
					Collection<MailbagVO> exceptionalMailbags = new ArrayList<MailbagVO>();
					Collection<MailbagVO> flightAssignedMails = new ArrayList<MailbagVO>();
					Collection<MailbagVO> destAssignedMails = new ArrayList<MailbagVO>();

					// if(scannedMailbagsToReturn !=null &&
					// scannedMailbagsToReturn.size()>0){
					// Collection<MailbagVO> mailbags = validateMailBagsForOfflineReturn(
					// scannedMailbagsToReturn);
					// if (mailbags != null && mailbags.size() > 0) {
					// scannedMailbagsToReturn.removeAll(mailbags);
					// exceptionalMailbags.addAll(mailbags);
					// }
					// }
					MailbagPK mailbagPK=null;
					Mailbag mailBagTmp=null;
					for(MailbagVO mailbagVO: scannedMailbagsToReturn){
						mailbagVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber()> 0 ?
								mailbagVO.getMailSequenceNumber(): findMailSequenceNumber(mailbagVO.getMailbagId(), mailbagVO.getCompanyCode()) );
						mailbagPK= new MailbagPK();
                        mailbagPK.setCompanyCode(mailbagVO.getCompanyCode());
                        mailbagPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                        try {
						mailBagTmp = Mailbag.findMailbag(mailbagPK);
							} catch (FinderException e) {
								e.printStackTrace();
							}
						if(mailBagTmp!=null){

							mailbagVO.setFlightSequenceNumber(mailBagTmp.getFlightSequenceNumber());
							mailbagVO.setFlightNumber(mailBagTmp.getFlightNumber());
							mailbagVO.setCarrierId(mailBagTmp.getCarrierId());
							mailbagVO.setSegmentSerialNumber(mailBagTmp.getSegmentSerialNumber());

						}

						}

					if (scannedMailbagsToReturn != null
							&& scannedMailbagsToReturn.size() > 0) {
						if (new ReassignController().isReassignableMailbags(
								scannedMailbagsToReturn, flightAssignedMails,
								destAssignedMails)) {
							if (flightAssignedMails.size() > 0) {
								new ReassignController()
										.reassignMailFromFlight(flightAssignedMails);
							}
							if (destAssignedMails.size() > 0) {
								new ReassignController()
										.reassignMailFromDestination(destAssignedMails);
							}
						}
						updateMailbagReturnDetails(airportCode, scannedMailbagsToReturn,
								true);
					}


			        String importEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
			        if (importEnabled != null && importEnabled.contains("D")) {
			            Collection<RateAuditVO> rateAuditVOs = createRateAuditVOsForReturn(null, scannedMailbagsToReturn, MailConstantsVO.MAIL_STATUS_RETURNED);
			            if (rateAuditVOs != null && !rateAuditVOs.isEmpty()) {
			                try {
			                    new MailOperationsMRAProxy().importMRAData(rateAuditVOs);
			                } catch (ProxyException e) {
			                    throw new SystemException(e.getMessage(), e);
			                }
			            }
			        }

			     // import Provisonal rate Data to malmraproint for upront rate Calculation
					String provisionalRateimportEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRA_PROVISIONAL_RATE_IMPORT);
					if(provisionalRateimportEnabled!=null && MailConstantsVO.FLAG_YES.equals(provisionalRateimportEnabled)){
			      	Collection<RateAuditVO> provisionalRateAuditVOs = new MailController().createRateAuditVOsForReturn(null, scannedMailbagsToReturn, MailConstantsVO.MAIL_STATUS_RETURNED  ); 
			      	if(provisionalRateAuditVOs!=null && !provisionalRateAuditVOs.isEmpty()){
			        try {
			        	Proxy.getInstance().get(MailOperationsMRAProxy.class).importMailProvisionalRateData(provisionalRateAuditVOs);
						} catch (ProxyException e) {      
							throw new SystemException(e.getMessage(), e);     
			        }
			        }
				}
					ScannedMailDetailsVO scannedMailDetailsVO = new ScannedMailDetailsVO();
					scannedMailDetailsVO.setMailDetails(exceptionalMailbags);

					Collection<ScannedMailDetailsVO> exceptionDetails = new ArrayList<ScannedMailDetailsVO>();
					exceptionDetails.add(scannedMailDetailsVO);

					log.exiting(CLASS, "returnscannedMailbags");
					return exceptionDetails;
				}

				/**
				 * A-1739
				 *
				 * @param mailbagsToReturn
     * @param isScanned        TODO
     * @throws SystemException
     * @throws DuplicateMailBagsException
				 */
				private void updateMailbagReturnDetails(String airportCode,
						Collection<MailbagVO> mailbagsToReturn, boolean isScanned)
            throws SystemException, DuplicateMailBagsException {
					//Map<DSNPK, DSNVO> dsnMap = groupDSNMailbags(mailbagsToReturn);

					Collection<DSNVO> newDSNVOs = new ArrayList<DSNVO>();

				/*	for (Map.Entry<DSNPK, DSNVO> dsnEntry : dsnMap.entrySet()) {
						DSNVO dsnVO = dsnEntry.getValue();
						DSN dsn = null;
						try {
							dsn = DSN.find(dsnEntry.getKey());
						} catch (FinderException exception) {
							if (isScanned) {

								 * Ins scan mode a new mailbag with a new DSN might be
								 * returned

								dsn = new DSN(dsnVO);
								newDSNVOs.add(dsnVO);
							} else {
								throw new SystemException(exception.getMessage(), exception);
							}
						}
						if (dsn != null) {
							dsn.updateReturnedMailbags(dsnVO, isScanned);
						}
					}*/


					Mailbag mailbag=new Mailbag();
					mailbag.updateReturnedMailbags(mailbagsToReturn, isScanned);
					
        MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);

					mailController.flagResditForMailbags(mailbagsToReturn, airportCode,
							MailConstantsVO.RESDIT_RECEIVED);

					mailController.flagResditForMailbags(mailbagsToReturn, airportCode,
							MailConstantsVO.RESDIT_RETURNED);


					mailController.flagHistoryForReturnedMailbags(mailbagsToReturn);
					mailController.flagAuditForReturnedMailbags(mailbagsToReturn);

					//Added by A-8527 for IASCB-34446 start
					String enableMLDSend= findSystemParameterValue(MailConstantsVO.MAIL_MLD_ENABLED_SEND);
					if(MailConstantsVO.FLAG_YES.equals(enableMLDSend)){
					//Added by A-8527 for IASCB-34446 Ends
					 mailController.flagMLDForMailbagReturn(mailbagsToReturn);//Added for CRQ ICRD-135130 by A-8061
				}
				}

    /**
				 * @param mailbags
				 * @throws SystemException
     * @author A-8061
     */
    @Advice(name = "mail.operations.flagMLDForMailbagReturn", phase = Phase.POST_INVOKE)
    public void flagMLDForMailbagReturn(Collection<MailbagVO> mailbags) throws SystemException {
					log.entering(CLASS, "flagMLDForMailbagReturn");
					log.exiting(CLASS, "flagMLDForMailbagReturn");

				}

				/**
				 * This method is used for flagging various resdits. This inturn call
				 * various private methods for flagging different resdits A-1739
				 *
				 * @param dsnVOs
				 * @param eventAirport
				 * @param eventCode
				 * @throws SystemException
				 */
				/*private void flagResditForMailbags(Collection<MailbagVO> mailbagsToFlag,
						String eventAirport, String eventCode) throws SystemException {

					//Collection<MailbagVO> mailbagsToFlag = mergeMailbagsofDSNs(dsnVOs);
					String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
					if(MailConstantsVO.FLAG_YES .equals(resditEnabled)){
						log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
					new ResditController().flagResditForMailbags(eventCode, eventAirport,
							mailbagsToFlag);
				}
				}*/

				/**
				 * @param mailInConsignmentVO
				 * @return String
				 * @throws SystemException
     * @author a-1883
				 */
				public String checkMailAccepted(MailInConsignmentVO mailInConsignmentVO)
						throws SystemException {
					log.entering(CLASS, "checkMailAccepted");
					return new Mailbag().checkMailAccepted(mailInConsignmentVO);
				}


				 /**
			       * @param operationalFlightVO
			       * @return
			       * @throws SystemException
			       * @throws RemoteException
			       */
				  public Page<OperationalFlightVO> findMailFlightDetails(
            OperationalFlightVO operationalFlightVO) throws SystemException, RemoteException {
        Page<OperationalFlightVO> operationalFlightVOs = null;
        if (MailConstantsVO.OPERATION_INBOUND.equals(operationalFlightVO.getDirection())) {
            operationalFlightVOs = AssignedFlight.findMailFlightDetails(operationalFlightVO);
					  }
        if (MailConstantsVO.OPERATION_OUTBOUND.equals(operationalFlightVO.getDirection())) {
            operationalFlightVOs = AssignedFlight.findMailFlightDetails(operationalFlightVO);
					  }
					  return operationalFlightVOs;
				  }

    /**
					 * @param mailbagVO
					 * @param clientmailbagvo
					 * @return
     * @throws SystemException Updating mailbag from db entries with client mailbag
     */
    public void updateExistingMailBagVO(MailbagVO mailbagvo, MailbagVO mailbagvofromdb, boolean isoffload) throws SystemException {
        log.entering(CLASS, "updateExistingMailBagVO");
						mailbagvo.setCarrierCode(mailbagvofromdb.getCarrierCode());
						mailbagvo.setCarrierId(mailbagvofromdb.getCarrierId());
						mailbagvo.setPol(mailbagvofromdb.getPol());
						mailbagvo.setPou(mailbagvofromdb.getPou());
						mailbagvo.setFinalDestination(mailbagvofromdb.getFinalDestination());
						mailbagvo.setFlightNumber(mailbagvofromdb.getFlightNumber());
						mailbagvo.setFlightDate(mailbagvofromdb.getFlightDate());
						mailbagvo.setLegSerialNumber(mailbagvofromdb.getLegSerialNumber());
						mailbagvo.setSegmentSerialNumber(mailbagvofromdb.getSegmentSerialNumber());
						mailbagvo.setFlightSequenceNumber(mailbagvofromdb.getFlightSequenceNumber());
						mailbagvo.setContainerNumber(mailbagvofromdb.getContainerNumber());
						mailbagvo.setUldNumber(mailbagvofromdb.getUldNumber());
						mailbagvo.setContainerType(mailbagvofromdb.getContainerType());
						mailbagvo.setLatestStatus(mailbagvofromdb.getLatestStatus());
						mailbagvo.setOperationalStatus(mailbagvofromdb.getOperationalStatus());
						mailbagvo.setConsignmentNumber(mailbagvofromdb.getConsignmentNumber());
						mailbagvo.setConsignmentSequenceNumber(mailbagvofromdb.getConsignmentSequenceNumber());
						mailbagvo.setPaCode(mailbagvofromdb.getPaCode());
						mailbagvo.setDamageFlag(mailbagvofromdb.getDamageFlag());
						mailbagvo.setInventoryContainer(mailbagvofromdb.getInventoryContainer());
						mailbagvo.setInventoryContainerType(mailbagvofromdb.getInventoryContainerType());
						mailbagvo.setArrivedFlag(mailbagvofromdb.getArrivedFlag());
        if (isoffload) {
							mailbagvo.setIsoffload(true);
						}
        if (MailConstantsVO.FLAG_YES.equals(mailbagvo.getReassignFlag())) {
							mailbagvo.setFromSegmentSerialNumber(mailbagvo.getSegmentSerialNumber());
						}
        log.exiting(CLASS, "updateExistingMailBagVO");
					}


    /**
					 * @param deliverVosForSave
					 * @throws SystemException
					 * @throws MailBookingException
					 * @throws CapacityBookingProxyException
					 * @throws ULDDefaultsProxyException
					 * @throws FlightClosedException
					 * @throws InvalidFlightSegmentException
					 * @throws MailbagIncorrectlyDeliveredException
					 * @throws DuplicateMailBagsException
					 * @throws ContainerAssignmentException
					 */
					public void saveScannedDeliverMails(Collection<MailArrivalVO> deliverVosForSave)
					throws SystemException, ContainerAssignmentException, DuplicateMailBagsException,
					MailbagIncorrectlyDeliveredException, InvalidFlightSegmentException,
					FlightClosedException, ULDDefaultsProxyException,
            CapacityBookingProxyException, MailBookingException, MailTrackingBusinessException {
						log.entering(CLASS, "saveScannedDeliverMails");
        if (deliverVosForSave != null && deliverVosForSave.size() > 0) {
            for (MailArrivalVO deliverVoForSave : deliverVosForSave) {
								deliverMailbags(deliverVoForSave);
							}
						}
						log.exiting(CLASS, "saveScannedDeliverMails");
					}


					/**
					 * This method is used to create the Monitor SLAVos for all the Inbound
					 * Operations say the Arrival\Delivery Operations taking place in the System
					 *
					 * @param mailbags
					 * @param mailArrivalVo
					 * @param activity
					 * @return
					 */
					private Collection<MonitorMailSLAVO> createMonitorSLAVosForInboundOperations(
							Collection<MailbagVO> mailbags, MailArrivalVO mailArrivalVo,
							String activity, LocalDate deliveryDate) {
						log.entering(CLASS, "createMonitorSLAVosForInboundOperations");
						MonitorMailSLAVO monitorSLAVo = null;
						Collection<MonitorMailSLAVO> monitorSLAVos = new ArrayList<MonitorMailSLAVO>();
						for (MailbagVO mailBag : mailbags) {
							monitorSLAVo = new MonitorMailSLAVO();
							monitorSLAVo.setCompanyCode(mailArrivalVo.getCompanyCode());
							// TODO Since this will be required
							monitorSLAVo.setAirlineCode(mailArrivalVo.getOwnAirlineCode());
							monitorSLAVo.setAirlineIdentifier(mailArrivalVo.getOwnAirlineId());
							monitorSLAVo.setFlightCarrierCode(mailArrivalVo
									.getFlightCarrierCode());
							monitorSLAVo.setFlightCarrierIdentifier(mailArrivalVo
									.getCarrierId());
							monitorSLAVo.setFlightNumber(mailArrivalVo.getFlightNumber());
							monitorSLAVo.setActivity(activity);
							monitorSLAVo.setMailBagNumber(mailBag.getMailbagId());
							if (MonitorMailSLAVO.MAILSTATUS_ARRIVED.equals(activity)) {
								monitorSLAVo.setScanTime(mailBag.getScannedDate());
							} else {
								monitorSLAVo.setScanTime(deliveryDate);
							}
							if (MonitorMailSLAVO.MAILSTATUS_ARRIVED.equals(activity)) {
								monitorSLAVo.setOperationFlag(mailBag.getOperationalFlag());
							} else {
								monitorSLAVo
										.setOperationFlag(MonitorMailSLAVO.OPERATION_FLAG_UPDATE);
							}
							monitorSLAVos.add(monitorSLAVo);
						}
						log.entering(CLASS, "createMonitorSLAVosForInboundOperations");
						return monitorSLAVos;
					}


					/**
					 * @param mailArrivalVO
					 * @return void
					 * @throws SystemException
     * @author A-2107
					 */

    private void updateMailBagDeliveryInOpertions(MailArrivalVO mailArrivalVO) throws SystemException {
        try {
            new OperationsFltHandlingProxy()
                    .updateOperationalFlightStatus(mailArrivalVO);
        } catch (FinderException ex) {
							log.log(Log.INFO, FINDEREXCEPTIO_STRING, ex);
        } catch (CreateException ex) {
							log.log(Log.INFO, "CREATE EXCEPTION IS THROWN", ex);
						}
					}


					/**
					 * This method is used to auto Deliver all the MailBags in the System.
					 *
					 * @param mailArrivalVO
					 * @throws SystemException
					 * @throws ContainerAssignmentException
					 * @throws DuplicateMailBagsException
					 * @throws MailbagIncorrectlyDeliveredException
					 * @throws InvalidFlightSegmentException
					 * @throws FlightClosedException
					 * @throws ULDDefaultsProxyException
					 * @throws CapacityBookingProxyException
					 * @throws MailBookingException
					 */
					public void deliverMailbags(MailArrivalVO mailArrivalVO)
							throws SystemException, ContainerAssignmentException,
							DuplicateMailBagsException, MailbagIncorrectlyDeliveredException,
							InvalidFlightSegmentException, FlightClosedException,
            ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, MailTrackingBusinessException {
						log.entering(CLASS, "deliveryMailbags");

						Collection<DespatchDetailsVO> despatchesForRemovalFromInventory = new ArrayList<DespatchDetailsVO>();
						/*
						 *
						 * Added By Karthick V for Monitoring the SLA for the MailBags
						 *
						 */
						Collection<MailbagVO> arrivedMailBagsForMonitorSLA = new ArrayList<MailbagVO>();
						Collection<MailbagVO> deliveredMailBagsForMonitorSLA = new ArrayList<MailbagVO>();
						LocalDate deliveredDate = null;
						boolean isMonitorSLAEnabled = isMonitorSLAEnabled();

		boolean isArrivalOffset = false;

		if (mailArrivalVO.isOfflineJob() == true) {
			/*
								 * To check current time against the flight Actual arrival time is greater than equal to offset.
								 * */

			// Added for ICRD-327979 start
			if (mailArrivalVO.isArrivalAndDeliveryMarkedTogether() == true) {
				isArrivalOffset = true;
			} else {
				if (mailArrivalVO.getActualArrivalTime() != null) {
					LocalDate actualArrivalTime = mailArrivalVO.getActualArrivalTime();
					LocalDate currentDate = new LocalDate(mailArrivalVO.getLegDestination(), Location.ARP, true);

					actualArrivalTime.addHours(mailArrivalVO.getOffset());

					Date arrival = actualArrivalTime.getTime();
					Date currentDateTime = currentDate.getTime();

					if (arrival.compareTo(currentDateTime) <= 0) {
						isArrivalOffset = true;
					}
				}

				if (isArrivalOffset == false) {
					new MailArrival().saveArrivalDetails(mailArrivalVO, arrivedMailBagsForMonitorSLA,
							deliveredMailBagsForMonitorSLA);
				}
			}

			if (isArrivalOffset == true) {
						new MailArrival().deliverMailbags(mailArrivalVO,
								arrivedMailBagsForMonitorSLA, deliveredMailBagsForMonitorSLA,
								despatchesForRemovalFromInventory);
						if (isMonitorSLAEnabled) {
							deliveredDate = new LocalDate(getLogonAirport(), Location.ARP, true);
							if (arrivedMailBagsForMonitorSLA != null
									&& arrivedMailBagsForMonitorSLA.size() > 0) {
								log.log(Log.FINE, "The MailBagVos For SLA ARR ",
										arrivedMailBagsForMonitorSLA.size());
								log.log(Log.FINE, "The MailBagVos For SLA ARR ",
										arrivedMailBagsForMonitorSLA);
								monitorMailSLAActivity(createMonitorSLAVosForInboundOperations(
										arrivedMailBagsForMonitorSLA, mailArrivalVO,
										MonitorMailSLAVO.MAILSTATUS_ARRIVED, null));
							}
							if (deliveredMailBagsForMonitorSLA != null
									&& deliveredMailBagsForMonitorSLA.size() > 0) {
								log.log(Log.FINE, "The MailBagVos For SLA DLV",
										deliveredMailBagsForMonitorSLA.size());
								log.log(Log.FINE, "The MailBagVos For SLA DLV",
										deliveredMailBagsForMonitorSLA);
								monitorMailSLAActivity(createMonitorSLAVosForInboundOperations(
										deliveredMailBagsForMonitorSLA, mailArrivalVO,
										MonitorMailSLAVO.MAILSTATUS_DELIVERED, deliveredDate));
							}
			
										// When a mail delivery is done, the time has to be saved into OPRIMPFLTHIS table.
			
										updateMailBagDeliveryInOpertions(mailArrivalVO);
										log.exiting(CLASS, "deliveryMailbags");
									}
								//}
				// Added for ICRD-327979 end
			}
		} else {

							new MailArrival().deliverMailbags(mailArrivalVO,
									arrivedMailBagsForMonitorSLA, deliveredMailBagsForMonitorSLA,
									despatchesForRemovalFromInventory);
							if (isMonitorSLAEnabled) {
								deliveredDate = new LocalDate(getLogonAirport(), Location.ARP, true);
								if (arrivedMailBagsForMonitorSLA != null
										&& arrivedMailBagsForMonitorSLA.size() > 0) {
									log.log(Log.FINE, "The MailBagVos For SLA ARR ",
											arrivedMailBagsForMonitorSLA.size());
									log.log(Log.FINE, "The MailBagVos For SLA ARR ",
											arrivedMailBagsForMonitorSLA);
									monitorMailSLAActivity(createMonitorSLAVosForInboundOperations(
											arrivedMailBagsForMonitorSLA, mailArrivalVO,
											MonitorMailSLAVO.MAILSTATUS_ARRIVED, null));
								}
								if (deliveredMailBagsForMonitorSLA != null
										&& deliveredMailBagsForMonitorSLA.size() > 0) {
									log.log(Log.FINE, "The MailBagVos For SLA DLV",
											deliveredMailBagsForMonitorSLA.size());
									log.log(Log.FINE, "The MailBagVos For SLA DLV",
											deliveredMailBagsForMonitorSLA);
									monitorMailSLAActivity(createMonitorSLAVosForInboundOperations(
											deliveredMailBagsForMonitorSLA, mailArrivalVO,
											MonitorMailSLAVO.MAILSTATUS_DELIVERED, deliveredDate));
								}
	
							// When a mail delivery is done, the time has to be saved into OPRIMPFLTHIS table.
	
							updateMailBagDeliveryInOpertions(mailArrivalVO);
							log.exiting(CLASS, "deliveryMailbags");
						}
						}
        //Added by A-7794 as part of ICRD-232299
        Collection<RateAuditVO> rateAuditVOs = createRateAuditVOs(mailArrivalVO.getContainerDetails(), MailConstantsVO.MAIL_STATUS_DELIVERED,false);
        if (rateAuditVOs != null && !rateAuditVOs.isEmpty()) {
            String importEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
            if (importEnabled != null && importEnabled.contains("D")) {
                try {
                    new MailOperationsMRAProxy().importMRAData(rateAuditVOs);
                } catch (ProxyException e) {
                    throw new SystemException(e.getMessage(), e);
                }
            }
        }


						// if(despatchesForRemovalFromInventory != null &&
						// despatchesForRemovalFromInventory.size() > 0) {
						// //Reassign Despatches From the Destination
						// //TODO TO MAKE SURE BEFORE CALLING THE METHOD THE DESPATCH IS IN THE
						// INVENTORY LIST OTHERWISE CAN IGNORE THAT DESPATCH
						// updateDespatchesForInventoryRemoval(
						// despatchesForRemovalFromInventory);
						// new ReassignController().reassignDSNsFromDestination(
						// despatchesForRemovalFromInventory);
						// }

					}


					/**
     * @param containers
     * @return
     * @throws SystemException
     * @author a-1936
					 */
					public Collection<ContainerDetailsVO> findMailbagsInContainer(
							Collection<ContainerDetailsVO> containers) throws SystemException {
						return MailAcceptance.findMailbagsInContainer(containers);
					}


					/**
					 * This method saves all inbound mails uploaded Each elem in the vo
					 * represents the flight and the mails in it TODO Purpose Oct 7, 2006,
					 * a-1739
					 *
					 * @param mailArrivalVOs
					 * @return
					 * @throws SystemException
					 * @throws MailbagIncorrectlyDeliveredException
					 * @throws DuplicateMailBagsException
					 * @throws ContainerAssignmentException
					 * @throws InvalidFlightSegmentException
					 * @throws FlightClosedException
					 * @throws ULDDefaultsProxyException
					 * @throws CapacityBookingProxyException
					 * @throws MailBookingException
					 */
					public Collection<ScannedMailDetailsVO> saveScannedInboundMails(
							Collection<MailArrivalVO> mailArrivalVOs) throws SystemException,
							ContainerAssignmentException, DuplicateMailBagsException,
							MailbagIncorrectlyDeliveredException,
							InvalidFlightSegmentException, FlightClosedException,
            InventoryForArrivalFailedException, ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException, MailTrackingBusinessException {
						log.entering(CLASS, "saveScannedInboundMails");
						/*
						 *
						 * Added By Karthick V for Monitoring the SLA for the MailBags
						 *
						 */

						Collection<MailbagVO> arrivedMailBagsForMonitorSLA = null;
						Collection<MailbagVO> deliveredMailBagsForMonitorSLA = null;
						LocalDate deliveredDate = null;

						boolean isMonitorSLAEnabled = isMonitorSLAEnabled();
						Collection<ScannedMailDetailsVO> scannedDetails = new ArrayList<ScannedMailDetailsVO>();
						for (MailArrivalVO mailArrivalVO : mailArrivalVOs) {
							if (isMonitorSLAEnabled) {
								arrivedMailBagsForMonitorSLA = new ArrayList<MailbagVO>();
								deliveredMailBagsForMonitorSLA = new ArrayList<MailbagVO>();

							}
							ULDInFlightVO uldInFlightVO = null;
							Collection<ULDInFlightVO> uldInFlightVOs = null;
							FlightDetailsVO flightDetailsVO = null;
							boolean isUldIntegrationEnbled = isULDIntegrationEnabled();
            if (isUldIntegrationEnbled) {
								uldInFlightVOs = new ArrayList<ULDInFlightVO>();
								flightDetailsVO = new FlightDetailsVO();
								flightDetailsVO.setCompanyCode(mailArrivalVO.getCompanyCode());
								flightDetailsVO.setFlightCarrierIdentifier(mailArrivalVO.
										getCarrierId());
								flightDetailsVO.setCarrierCode(mailArrivalVO.getFlightCarrierCode());
								flightDetailsVO.setFlightNumber(mailArrivalVO.getFlightNumber());
								//Added by A-8527 for IASCB-56506 starts
								if(mailArrivalVO.getArrivalDate()!=null){
								flightDetailsVO.setFlightDate(mailArrivalVO.getArrivalDate());
								}else{
									flightDetailsVO.setFlightDate(mailArrivalVO.getScanDate());
								}
								//Added by A-8527 for IASCB-56506 Ends
								flightDetailsVO.setFlightSequenceNumber(mailArrivalVO.
										getFlightSequenceNumber());
								flightDetailsVO.setDirection(MailConstantsVO.IMPORT);
                Collection<ContainerDetailsVO> containerDetailsVOs = mailArrivalVO
								.getContainerDetails();
                if (containerDetailsVOs != null && containerDetailsVOs.size() > 0) {
                    for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
                        if (containerDetailsVO.getOperationFlag() != null &&
												!(MailConstantsVO.BULK_TYPE.equals
														(containerDetailsVO.getContainerType()))) {
											uldInFlightVO = new ULDInFlightVO();
											uldInFlightVO.setUldNumber(containerDetailsVO.
													getContainerNumber());
											uldInFlightVO.setPointOfLading(containerDetailsVO.getPol
													());
											uldInFlightVO.setPointOfUnLading(containerDetailsVO.
													getPou());
											uldInFlightVO.setRemark(MailConstantsVO.MAIL_ULD_ARRIVED);
											uldInFlightVO.setContent(MailConstantsVO.UCM_ULD_SOURCE_MAIL);
											uldInFlightVOs.add(uldInFlightVO);
										}
									}
									flightDetailsVO.setUldInFlightVOs(uldInFlightVOs);
									//Added by A-7794 as part of ICRD_224779
									flightDetailsVO.setSubSystem(MailConstantsVO.MAIL_CONST);

									flightDetailsVO.setAction(FlightDetailsVO.ARRIVAL);

									new ULDDefaultsProxy().updateULDForOperations(
											flightDetailsVO);
								}
							}

            ScannedMailDetailsVO scanMail = new ScannedMailDetailsVO();
							saveArrivalDetails(mailArrivalVO);

							if (isMonitorSLAEnabled) {
								deliveredDate = new LocalDate(getLogonAirport(), Location.ARP,
										true);
							}
							if (scanMail != null && scanMail.getMailDetails() != null
									&& scanMail.getMailDetails().size() > 0) {
								scannedDetails.add(scanMail);
							}

							if (isMonitorSLAEnabled) {
								if (arrivedMailBagsForMonitorSLA != null
										&& arrivedMailBagsForMonitorSLA.size() > 0) {
									log.log(Log.FINE, "The MailBagVos For SLA ARR ",
											arrivedMailBagsForMonitorSLA.size());
									log.log(Log.FINE, "The MailBagVos For SLA ARR ",
											arrivedMailBagsForMonitorSLA);
									monitorMailSLAActivity(createMonitorSLAVosForInboundOperations(
											arrivedMailBagsForMonitorSLA, mailArrivalVO,
											MonitorMailSLAVO.MAILSTATUS_ARRIVED, null));
								}
								if (deliveredMailBagsForMonitorSLA != null
										&& deliveredMailBagsForMonitorSLA.size() > 0) {
									log.log(Log.FINE, "The MailBagVos For SLA DLV ",
											deliveredMailBagsForMonitorSLA.size());
									log.log(Log.FINE, "The MailBagVos For SLA DLV",
											deliveredMailBagsForMonitorSLA);
									monitorMailSLAActivity(createMonitorSLAVosForInboundOperations(
											deliveredMailBagsForMonitorSLA, mailArrivalVO,
											MonitorMailSLAVO.MAILSTATUS_DELIVERED,
											deliveredDate));
								}
							}
							//importMRAData
							boolean provisionalRateImport =false;
            Collection<RateAuditVO> rateAuditVOs = createRateAuditVOs(mailArrivalVO.getContainerDetails(), MailConstantsVO.MAIL_STATUS_ARRIVED, provisionalRateImport);
							log.log(Log.FINEST, "RateAuditVO-->", rateAuditVOs);
            if (rateAuditVOs != null && !rateAuditVOs.isEmpty()) {
								 String importEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
                if (importEnabled != null && importEnabled.contains("A")) {
				            try {
								new MailOperationsMRAProxy().importMRAData(rateAuditVOs);
							} catch (ProxyException e) {
								throw new SystemException(e.getMessage(), e);
							}
							 }
						  }
            // import Provisonal rate Data to malmraproint for upront rate Calculation
			String provisionalRateimportEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRA_PROVISIONAL_RATE_IMPORT);
			if(provisionalRateimportEnabled!=null && MailConstantsVO.FLAG_YES.equals(provisionalRateimportEnabled)){
				provisionalRateImport = true;
	      	Collection<RateAuditVO> provisionalRateAuditVOs = new MailController().createRateAuditVOs(mailArrivalVO.getContainerDetails(),MailConstantsVO.MAIL_STATUS_ARRIVED,provisionalRateImport) ;    
	      	if(provisionalRateAuditVOs!=null && !provisionalRateAuditVOs.isEmpty()){
	        try {
	        	Proxy.getInstance().get(MailOperationsMRAProxy.class).importMailProvisionalRateData(provisionalRateAuditVOs);
							} catch (ProxyException e) {
								throw new SystemException(e.getMessage(), e);
							}
							 }
						  }
						}
						log.exiting(CLASS, "saveScannedInboundMails");
						return scannedDetails;
					}


					/**
					 * This method saves the arrival detail of a flight A-1739
					 *
     * @param mailArrivalVO the arrival VO
     * @throws ContainerAssignmentException
     * @throws SystemException
     * @throws DuplicateMailBagsException           If mailbags is arriving in another flight than the current
					 *             one
     * @throws MailbagIncorrectlyDeliveredException If mailbags or despatches delivered in ports other that the
					 *             port of its DOE
					 * @throws InvalidFlightSegmentException
					 * @throws FlightClosedException
					 * @throws ULDDefaultsProxyException
					 * @throws InventoryForArrivalFailedException
					 * @throws DuplicateDSNException
					 * @throws CapacityBookingProxyException
					 * @throws MailBookingException
					 */
    @Advice(name = "mail.operations.saveArrivalDetails", phase = Phase.POST_INVOKE)
					public void saveArrivalDetailsOld(MailArrivalVO mailArrivalVO)
							throws ContainerAssignmentException, SystemException,
							DuplicateMailBagsException, MailbagIncorrectlyDeliveredException,
							InvalidFlightSegmentException, FlightClosedException,
							InventoryForArrivalFailedException, ULDDefaultsProxyException, DuplicateDSNException,
            CapacityBookingProxyException, MailBookingException, MailTrackingBusinessException {
						log.entering(CLASS, "saveArrivalDetails");
						log.log(Log.FINE, "The mailArrivalVO is  >>>>>>>> ", mailArrivalVO);
						//This method is to validate the post data capturing.This is to avoid master and history mismatch
						Collection<MailbagVO> mailVOs = new ArrayList<MailbagVO>();
						Collection<ContainerDetailsVO> containerDetailsVOs = mailArrivalVO
						.getContainerDetails();
        if (containerDetailsVOs != null && !containerDetailsVOs.isEmpty()) {
            for (ContainerDetailsVO contVO : containerDetailsVOs) {
                if (contVO.getMailDetails() != null && !contVO.getMailDetails().isEmpty()) {
                    Collection<MailbagVO> mailbagVOs = contVO.getMailDetails();
                    if (!mailArrivalVO.isFlightChange()) {
                        for (MailbagVO mailbagVO : mailbagVOs) {
                            if (mailbagVO.getMailSequenceNumber() > 0 && mailbagVO.getOperationalFlag() != null) {
										mailVOs.add(mailbagVO);
									}
									}
								}
								}

							}
            updateMailbagVOs(mailVOs, mailArrivalVO.isFlightChange());
							mailArrivalVO.setMailVOUpdated(true);
						}
						checkForPostDataCaptureAndSaveDetails(mailArrivalVO);
						Collection<MailbagVO> arrivedMailBagsForMonitorSLA = null;
						Collection<MailbagVO> deliveredMailBagsForMonitorSLA = null;
						LocalDate deliveryDate = null;
						//Commented for performanace improvement as this logic has no relevance now..
						//boolean isMonitorSLAEnabled = isMonitorSLAEnabled();
						boolean isMonitorSLAEnabled = false;
						boolean undoArriveNeeded = false;
						if (isMonitorSLAEnabled) {
							arrivedMailBagsForMonitorSLA = new ArrayList<MailbagVO>();
							deliveredMailBagsForMonitorSLA = new ArrayList<MailbagVO>();
						}

						mailArrivalVO.setDeliveryCheckNeeded(true);
						Collection<ContainerDetailsVO> arrivedContainers = mailArrivalVO.getContainerDetails();
						//updatebulkDetails(arrivedContainers);
						//checkIfDSNinBothMailbagAndDespatchMode(arrivedContainers);
				    	boolean isUldIntegrationEnbled = isULDIntegrationEnabled();
        if (isUldIntegrationEnbled) {
				        	performULDIntegrationOperations(mailArrivalVO);
				        }
						 //These methods  are for saving the consignment data added for SAA 403 starts
						generateConsignmentDocumentNoForArrival(mailArrivalVO);
						updateDespatchDocumentDetailsForImport(mailArrivalVO);
						updateMailbagDocumentDetailsForImport(mailArrivalVO);

						Collection<PostalAdministrationVO> postalAdministrationVOs = null;

						if (containerDetailsVOs != null && !containerDetailsVOs.isEmpty()) {

							for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
								Collection<MailbagVO> mailBagVOs = containerDetailsVO.getMailDetails();

								if (mailBagVOs != null && !mailBagVOs.isEmpty()) {

									for (MailbagVO mailbagVO : mailBagVOs) {
										mailbagVO.setMailSource(mailArrivalVO.getMailSource());//Added for ICRD-156218
                        mailbagVO.setMailbagDataSource(mailArrivalVO.getMailDataSource());
                      //Added by A-8527 for IASCB-58918
                        mailbagVO.setMessageVersion(mailArrivalVO.getMessageVersion());
                        if (MailConstantsVO.FLAG_YES.equals(mailbagVO.getUndoArrivalFlag())) {
											undoArriveNeeded = true;
											//Added as part of Bug ICRD-142162 by A-5526 starts
                            if (mailbagVO.getScannedDate() == null) {
                                mailbagVO.setScannedDate(new LocalDate(mailbagVO.getScannedPort(), Location.ARP, true));
											}
											//Added as part of Bug ICRD-142162 by A-5526 ends
										}
										Collection<DamagedMailbagVO> damagedMailBags = mailbagVO
												.getDamagedMailbags();

										if (damagedMailBags != null && !damagedMailBags.isEmpty()) {

											for (DamagedMailbagVO damagedMailbagVO : damagedMailBags) {

												if (damagedMailbagVO.getPaCode() == null) {

													if (mailbagVO.getOoe() != null && mailbagVO.getOoe()
															.trim().length() > 0) {
														//Modified for icrd-111917
															String paCode = findPAForOfficeOfExchange(mailbagVO.getCompanyCode(),  mailbagVO.getOoe());
                                        if (paCode != null && !"".equals(paCode)) {
																damagedMailbagVO.setPaCode(paCode);
															}
													}
												}
											}
										}
									}
								}
							}
						}
        new MailArrival().saveArrivalDetails(mailArrivalVO, arrivedMailBagsForMonitorSLA, deliveredMailBagsForMonitorSLA);

						if (isMonitorSLAEnabled) {
							deliveryDate = new LocalDate(getLogonAirport(), Location.ARP, true);
							if (arrivedMailBagsForMonitorSLA != null && arrivedMailBagsForMonitorSLA.size() > 0) {
                monitorMailSLAActivity(createMonitorSLAVosForInboundOperations(arrivedMailBagsForMonitorSLA, mailArrivalVO, MonitorMailSLAVO.MAILSTATUS_ARRIVED, null));
							}
							if (deliveredMailBagsForMonitorSLA != null && deliveredMailBagsForMonitorSLA.size() > 0) {
                monitorMailSLAActivity(createMonitorSLAVosForInboundOperations(deliveredMailBagsForMonitorSLA, mailArrivalVO, MonitorMailSLAVO.MAILSTATUS_DELIVERED, deliveryDate));
							}
						}

						log.entering(CLASS, "saveArrivalDetails");
						//Added by A-5945 for ICRD-118205 starts
        if (undoArriveNeeded) {
							log.log(Log.FINE, "Going To undo arrive ...", mailArrivalVO);
							undoArriveContainer(mailArrivalVO);
						}
						//importMRAData
        boolean provisionalRateImport =false;
        Collection<RateAuditVO> rateAuditVOs = createRateAuditVOs(mailArrivalVO.getContainerDetails(), MailConstantsVO.MAIL_STATUS_ARRIVED, provisionalRateImport);
						log.log(Log.FINEST, "RateAuditVO-->", rateAuditVOs);
        if (rateAuditVOs != null && !rateAuditVOs.isEmpty()) {
							 String importEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
            if (importEnabled != null && importEnabled.contains("A")) {
			            try {
							new MailOperationsMRAProxy().importMRAData(rateAuditVOs);
						} catch (ProxyException e) {
							throw new SystemException(e.getMessage(), e);
						}
						 }
						 }
     // import Provisonal rate Data to malmraproint for upront rate Calculation
		String provisionalRateimportEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRA_PROVISIONAL_RATE_IMPORT);
		if(MailConstantsVO.FLAG_YES.equals(provisionalRateimportEnabled)){
			provisionalRateImport = true;
      	Collection<RateAuditVO> provisionalRateAuditVOs = new MailController().createRateAuditVOs(mailArrivalVO.getContainerDetails(),MailConstantsVO.MAIL_STATUS_ARRIVED
      			,provisionalRateImport) ;    
      	if(provisionalRateAuditVOs!=null && !provisionalRateAuditVOs.isEmpty()){
        try {
        	Proxy.getInstance().get(MailOperationsMRAProxy.class).importMailProvisionalRateData(provisionalRateAuditVOs);
						} catch (ProxyException e) {
							throw new SystemException(e.getMessage(), e);
						}
						 }
						 }
						//Added by A-5945 for ICRD-118205 ends
					}

					/**
     * @param mailbagVO This method is to perform post data capture only,withouit updating the master details
     * @throws SystemException
     * @author A-5526
					 */
						private void performPostDataCapture(MailbagVO mailbagVO) throws SystemException {
							log.entering(CLASS, "updatePostCapturedData");
							MailbagPK mailbagPk = new MailbagPK();

							Mailbag mailbag = null;
							String mailbagId = mailbagVO.getMailbagId();
							mailbagPk.setCompanyCode(mailbagVO.getCompanyCode());
							mailbagPk.setMailSequenceNumber(mailbagVO.getMailSequenceNumber()> 0 ?
									mailbagVO.getMailSequenceNumber(): findMailSequenceNumber(mailbagVO.getMailbagId(), mailbagVO.getCompanyCode()) );
							try {

								mailbag = Mailbag.find(mailbagPk);

							} catch (SystemException e) {
								log.log(Log.SEVERE, "System Exception Caught");
							} catch (FinderException e) {

								log.log(Log.SEVERE, "Finder Exception Caught");
							}
							// Updating MailCompanyCode /Damage details to MTKMALHIS & MTKDMGMAL(for damage) starts
							if (mailbag != null) {
								mailbag.setMailCompanyCode(mailbagVO.getMailCompanyCode());
								if (MailConstantsVO.FLAG_YES.equals(mailbagVO.getDamageFlag())) {
									mailbag.setDamageFlag(mailbagVO.getDamageFlag());

										mailbag.updateDamageDetails(mailbagVO);

								}

							}


							//Updating Seal Number/Arrival Seal number to MTKMALULDSEG and MTKMALARPULD starts

							MailbagInULDForSegment mailbagInULDForSegment = null;
							MailbagInULDForSegmentPK	mailbagInULDForSegmentPK = new MailbagInULDForSegmentPK();
        mailbagInULDForSegmentPK.setCompanyCode(mailbagVO.getCompanyCode());
        mailbagInULDForSegmentPK.setCarrierId(mailbagVO.getCarrierId());
							mailbagInULDForSegmentPK.setFlightNumber(mailbagVO.getFlightNumber());
							mailbagInULDForSegmentPK.setFlightSequenceNumber(mailbagVO.getFlightSequenceNumber());
							mailbagInULDForSegmentPK.setSegmentSerialNumber(mailbagVO.getSegmentSerialNumber());
							mailbagInULDForSegmentPK.setUldNumber(mailbagVO.getUldNumber());

							try {
								mailbagInULDForSegment = MailbagInULDForSegment
										.find(mailbagInULDForSegmentPK);
							}  catch (FinderException e) {
								log.log(Log.SEVERE, "Finder Exception Caught");
							}
        if (mailbagInULDForSegment != null) {
								/*if(mailbagVO.getSealNumber()!=null && mailbagVO.getSealNumber().trim().length()>0){
								mailbagInULDForSegment.setSealNumber(mailbagVO.getSealNumber());
								}*/
            if (mailbagVO.getArrivalSealNumber() != null && mailbagVO.getArrivalSealNumber().trim().length() > 0) {
								mailbagInULDForSegment.setArrivalsealNumber(mailbagVO.getArrivalSealNumber());
								}
							}
        MailbagInULDAtAirport mailbagInULDAtAirport = null;
							MailbagInULDAtAirportPK	mailbagInULDAtAirportPK = new MailbagInULDAtAirportPK();
        mailbagInULDAtAirportPK.setCompanyCode(mailbagVO.getCompanyCode());
        mailbagInULDAtAirportPK.setCarrierId(mailbagVO.getCarrierId());
        mailbagInULDAtAirportPK.setAirportCode(mailbagVO.getScannedPort());
							mailbagInULDAtAirportPK.setUldNumber(new StringBuilder().append("BULK").append("-").append("ARR").append("-").append(mailbagVO.getCompanyCode()).toString());
//							mailbagInULDAtAirportPK.setDsn(mailbagVO.getDespatchSerialNumber());
//							mailbagInULDAtAirportPK.setOriginExchangeOffice(mailbagVO.getOoe());
//							mailbagInULDAtAirportPK.setDestinationExchangeOffice(mailbagVO.getDoe());
//							mailbagInULDAtAirportPK.setMailSubclass(  mailbagVO.getMailSubclass());
//							mailbagInULDAtAirportPK.setMailCategoryCode(mailbagVO.getMailCategoryCode());
//							mailbagInULDAtAirportPK.setYear( mailbagVO.getYear());
//							mailbagInULDAtAirportPK.setMailId(   mailbagVO.getMailbagId());

							try {
								mailbagInULDAtAirport = MailbagInULDAtAirport
										.find(mailbagInULDAtAirportPK);
							}  catch (FinderException e) {
								log.log(Log.SEVERE, "Finder Exception Caught");
							}

        if (mailbagInULDAtAirport != null) {
            if (mailbagVO.getSealNumber() != null && mailbagVO.getSealNumber().trim().length() > 0) {
							//	mailbagInULDAtAirport.setSealNumber(mailbagVO.getSealNumber());
								}
							}


						}


    private void performULDIntegrationOperations(MailArrivalVO mailArrivalVO) throws ULDDefaultsProxyException, SystemException {
							ULDInFlightVO uldInFlightVO = null;
							Collection<ULDInFlightVO> uldInFlightVOs = null;
							FlightDetailsVO flightDetailsVO = null;
							boolean offlineJobWithAlreadyArrivedMailBag = false;
					        uldInFlightVOs = new ArrayList<ULDInFlightVO>();
					        flightDetailsVO = new FlightDetailsVO();
							flightDetailsVO.setCompanyCode(mailArrivalVO.getCompanyCode());
					        flightDetailsVO.setFlightCarrierIdentifier(mailArrivalVO.
					            getCarrierId());
					        flightDetailsVO.setCarrierCode(mailArrivalVO.getFlightCarrierCode());
							  flightDetailsVO.setFlightNumber(mailArrivalVO.getFlightNumber());
							  //Added by A-8527 for IASCB-56506 starts
							  if(mailArrivalVO.getArrivalDate()!=null){
							  flightDetailsVO.setFlightDate(mailArrivalVO.getArrivalDate());
							  }else{
								  flightDetailsVO.setFlightDate(mailArrivalVO.getScanDate());
							  }
							//Added by A-8527 for IASCB-56506 Ends
					        flightDetailsVO.setFlightSequenceNumber(mailArrivalVO.
					            getFlightSequenceNumber());
							  flightDetailsVO.setDirection(MailConstantsVO.IMPORT);
        Collection<ContainerDetailsVO> containerDetailsVOs = mailArrivalVO
					            .getContainerDetails();
        if (containerDetailsVOs != null && containerDetailsVOs.size() > 0) {
            for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
                if (containerDetailsVO.getOperationFlag() != null &&
                        !(MailConstantsVO.BULK_TYPE.equals
                                (containerDetailsVO.getContainerType()))) {
                    //Modified by A-7794 as part of ICRD-242579
                    if (MailConstantsVO.FLAG_YES.equals(containerDetailsVO.getArrivedStatus()) && mailArrivalVO.isOfflineJob()) {
					                		offlineJobWithAlreadyArrivedMailBag = true;
					                		break;
					                	}
											uldInFlightVO = new ULDInFlightVO();
					                    uldInFlightVO.setUldNumber(containerDetailsVO.
					                        getContainerNumber());
					                    uldInFlightVO.setPointOfLading(containerDetailsVO.getPol
					                        ());
					                    uldInFlightVO.setPointOfUnLading(containerDetailsVO.
					                        getPou());
					                    uldInFlightVO.setRemark(MailConstantsVO.MAIL_ULD_ARRIVED);
					            		uldInFlightVO.setContent(MailConstantsVO.UCM_ULD_SOURCE_MAIL);
					                    uldInFlightVOs.add(uldInFlightVO);
					                }
					            }
					            flightDetailsVO.setAction(FlightDetailsVO.ARRIVAL);
					          //Added by A-7794 as part of ICRD-224596
					            flightDetailsVO.setRemark(MailConstantsVO.MAIL_ULD_ARRIVED);
					          //Added by A-7794 as part of ICRD_224779
					            flightDetailsVO.setSubSystem(MailConstantsVO.MAIL_CONST);

					            flightDetailsVO.setUldInFlightVOs(uldInFlightVOs);
					          //Modified by A-7794 as part of ICRD-242579
            if (!offlineJobWithAlreadyArrivedMailBag) {

					             new ULDDefaultsProxy().updateULDForOperations(
					                    flightDetailsVO);
					            }
					        }


						}


						/**
						 * @param mailAcceptanceVO
						 * @param airportVO
						 * @return
						 * @throws SystemException
     * @author A-2553
						 */
						private void generateConsignmentDocumentNoForArrival(MailArrivalVO mailArrivalVO)
								throws SystemException {
							log.entering(CLASS, "generateConsignmentDocumentNoForArrival");
							Collection<ContainerDetailsVO> contDetVOs = mailArrivalVO.getContainerDetails();
        if (contDetVOs != null && contDetVOs.size() > 0) {
            for (ContainerDetailsVO containerDetailsVO : contDetVOs) {
									Collection<DespatchDetailsVO> despatchDetailsVOs = containerDetailsVO.getDesptachDetailsVOs();
                if (despatchDetailsVOs != null && despatchDetailsVOs.size() > 0) {
                    for (DespatchDetailsVO despatchDetailsVO : despatchDetailsVOs) {
                        if (despatchDetailsVO.getConsignmentNumber() == null
                                || despatchDetailsVO.getConsignmentNumber().length() == 0) {
												AirportVO airportVO = new SharedAreaProxy().findAirportDetails(mailArrivalVO.getCompanyCode(), mailArrivalVO.getAirportCode());
												log.log(Log.FINE, "AIRPORT VO", airportVO);
												String id = new StringBuilder()
													.append(airportVO.getCountryCode())
														.append(airportVO.getCityCode()).toString();
												Criterion criterion = KeyUtils.getCriterion(mailArrivalVO.getCompanyCode(),
														CSGDOCNUM_GEN_KEY, id);
												String key = KeyUtils.getKey(criterion);
												String str = "";
                            int count = 0;
                            for (int i = 0; i < (7 - key.length()); i++) {
                                if (count == 0) {
                                    str = "0";
                                    count = 1;
                                } else {
														str =  new StringBuilder().append(str).append("0").toString();
													}

												}
												log.log(Log.FINE, "222222222%%%%%%%%%%str",
														str);
												String conDocNo = new StringBuilder().append(id).append("S").append(str).append(key).toString();
												log.log(Log.FINE, "conDocNo", conDocNo);
                            if (despatchDetailsVO.getConsignmentDate() == null) {
                                if (airportVO.getAirportCode() != null) {
                                    despatchDetailsVO.setConsignmentDate(new LocalDate(airportVO.getAirportCode(), Location.ARP, false));
                                } else {
                                    despatchDetailsVO.setConsignmentDate(new LocalDate(LocalDate.NO_STATION, Location.NONE, false));
													}
												}
												despatchDetailsVO.setConsignmentNumber(conDocNo);
												log
														.log(
																Log.FINE,
																"%%%%%despatchDetailsVO%%%%-ConsignmentNumber-->",
																despatchDetailsVO.getConsignmentNumber());
												log
														.log(
																Log.FINE,
																"%%%%%despatchDetailsVO%%%%-ConsignmentDate-->",
																despatchDetailsVO.getConsignmentDate());
												log
														.log(
																Log.FINE,
																"%%%%%despatchDetailsVO%%%%-PaCode-->",
																despatchDetailsVO.getPaCode());
											}
										}
									}
								}
							}

						}


						/**
						 * A-1739
						 *
						 * @param mailAcceptanceVO
						 * @throws SystemException
     * @throws DuplicateMailBagsException
						 */
						private void updateDespatchDocumentDetailsForImport(MailArrivalVO mailArrivalVO)
            throws SystemException, DuplicateMailBagsException {

							log.entering(CLASS, "updateDespatchDocumentDetailsForImport");

							Collection<ContainerDetailsVO> containerDetails = compareAndCalculateTotalsOfDespatches(mailArrivalVO
									.getContainerDetails());

							Map<String, Collection<DespatchDetailsVO>> despatchMap = groupDespatchesForConsignment(containerDetails);

							log.log(Log.FINE, "despatch map -->", despatchMap);
							try {
								for (Map.Entry<String, Collection<DespatchDetailsVO>> despatch : despatchMap
										.entrySet()) {
									Collection<DespatchDetailsVO> despatches = despatch.getValue();
									ConsignmentDocumentVO consignDocVO = constructConsignmentDocVO(
											despatch.getKey(), despatches, mailArrivalVO
													.getAirportCode());
									/*
									 * Added By Karthick V Since the same saveMailAcceptance is
									 * being called in the case of the Upload and the Normal Axp
									 * Because to avoid validate Mail Bags from throwing Exception
									 * in the case of the saveConsignment..
									 */
									consignDocVO.setScanned(mailArrivalVO.isScanned());
									int consignmentSeqNum = new DocumentController()
											.saveConsignmentForAcceptance(consignDocVO);
									updateDespatchesSequenceNum(consignmentSeqNum, despatches);
								}
							} catch (MailbagAlreadyAcceptedException mailbagAlreadyAcceptedException) {
								/* Ignore this Exception */
							}
							log.exiting(CLASS, "updateDespatchDocumentDetailsForImport");
						}


						/**
						 * A-1739
						 *
						 * @param mailAcceptanceVO
						 * @throws SystemException
						 */
						/*
						 * Added By Karthick V If the Consignment has already been Captured For the
						 * Mail Then Update the Details of those MailBags Fom the Consignment Tables
						 * Say MTKCSGMST,MTKCSGMAL..
						 *
						 */
						private void updateMailbagDocumentDetailsForImport(MailArrivalVO mailArrivalVO)
								throws SystemException {
							Collection<ContainerDetailsVO> containerDetails = mailArrivalVO
									.getContainerDetails();

							log.entering(CLASS, "updateMailbagDocumentDetailsForImport");
        if (containerDetails != null && containerDetails.size() > 0) {
							for (ContainerDetailsVO containerDetailsVO : containerDetails) {
								if (containerDetailsVO.getOperationFlag() != null) {
									Collection<MailbagVO> mailbags = containerDetailsVO
											.getMailDetails();
									if (mailbags != null && mailbags.size() > 0) {
										//DocumentController docController = new DocumentController();
										MailInConsignmentVO mailInConsignmentVO = null;
										for (MailbagVO mailbagVO : mailbags) {
											if (mailbagVO.getOperationalFlag() != null) {
												/*Scan port have no priority for fetching the consignment
												 * as per ANZ bug 49056. So Airport code is not used,
												 * even though it is passed.
												 */
												mailInConsignmentVO = mailbagVO.getMailConsignmentVO();
												if (mailInConsignmentVO != null) {
													mailbagVO
															.setConsignmentNumber(mailInConsignmentVO
																	.getConsignmentNumber());
													mailbagVO
															.setConsignmentSequenceNumber(mailInConsignmentVO
																	.getConsignmentSequenceNumber());
													if(!"MTK064".equalsIgnoreCase(mailArrivalVO.getMailSource())) {
													mailbagVO.setPaCode(mailInConsignmentVO
															.getPaCode());
												}
											}
										}
                    }
                }
								}
							}
							}
							log.exiting(CLASS, "updateMailbagDocumentDetailsForImport");
						}


						//Added by A-5945 for ICRD-118205	starts
    public void undoArriveContainer(MailArrivalVO mailArrivalVO) throws SystemException, MailTrackingBusinessException {
							log.log(Log.FINE, "Entering UNDOARRIVAl >>>>>>>>>>>>>>>>>>");
							Collection<ContainerDetailsVO> containerDetailsVOs = mailArrivalVO
									.getContainerDetails();
							Collection<ContainerDetailsVO> containerDetailsVOforUndoArrival = new ArrayList<ContainerDetailsVO>();
							Collection<DamagedMailbagVO> damagedmailbags = new ArrayList<DamagedMailbagVO>();
							int legserialnum = mailArrivalVO.getLegSerialNumber();
							ArrayList<MailbagHistoryVO>  mailhistories = new  ArrayList<MailbagHistoryVO>();

							String changeFlightFlag = mailArrivalVO.getChangeFlightFlag();

							if (containerDetailsVOs != null && !containerDetailsVOs.isEmpty()) {
								/* This check is to find which all containers are selected for undo arrival operation.
								 * for container which contains mailbags for undo arrival,then is operation flag will be "U".
								 * If the container as such is selected for undo arrival,then UNDO arrive flag for the container is set to "Y"
								 */
            for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
                if (MailConstantsVO.OPERATION_FLAG_UPDATE.equals(containerDetailsVO.getOperationFlag())) {
										containerDetailsVOforUndoArrival.add(containerDetailsVO);
										}
								}
							}
							if (containerDetailsVOforUndoArrival != null && !containerDetailsVOforUndoArrival.isEmpty()) {
								log.log(Log.FINE, "The containerDetailsVOforUndoArrival is >>>>", containerDetailsVOforUndoArrival);
								//method to remove entries from MTKULDSEG,MTKDSNULDSEG and MTKMALULDSEG
								new AssignedFlightSegment().undoArriveContainer(containerDetailsVOforUndoArrival);
							}
        for (ContainerDetailsVO containerDetailsVO : containerDetailsVOforUndoArrival) {
								Container container = null;
								 Container bulkcontainer = null;
								ContainerPK containerpk = null;


            if (MailConstantsVO.ULD_TYPE.equals(containerDetailsVO.getContainerType())) {
								 containerpk  = constructContainerPKfromContainerDetailVO(containerDetailsVO);
                try {
                    container = Container.find(containerpk);
                } catch (FinderException e) {
										log.log(Log.SEVERE, "Finder Exception Caught");
									 }
                if (container != null) {

                    if (MailConstantsVO.FLAG_YES.equals(container.getAcceptanceFlag()) && changeFlightFlag == null) {

										container.setTransitFlag(MailConstantsVO.FLAG_YES);//Since this conatiner has atleast one mailbag for undo arrival
                    } else {
										/*Found container.If conatiner is selected for undo arrival then remove the entry.
										 * If mailbags in the found continer is selected for undo arrival then no need to remove the container
										 */
                        if ("CON".equals(containerDetailsVO.getUndoArrivalFlag())) {

										container.remove();//found container,hence removing
										}
									}
								}
								}

									Collection<MailbagVO> mailBagVOs = containerDetailsVO.getMailDetails();
								int mailbagcount = mailBagVOs.size();
								int mailbagforundoarrival = 0;
								int unarrivedbags = 0;
            if (mailBagVOs != null && mailBagVOs.size() > 0) {
                for (MailbagVO mailbagvo : mailBagVOs) {
                    if (MailConstantsVO.FLAG_NO.equals(mailbagvo.getArrivedFlag()) && !MailConstantsVO.FLAG_YES.equals(mailbagvo.getUndoArrivalFlag())) {
											unarrivedbags++;
										}
                    if (MailConstantsVO.FLAG_YES.equals(mailbagvo.getUndoArrivalFlag())) {
											Mailbag mailbag = null;
                        MailbagPK mailbagpk = createMailbagPK(mailbagvo.getCompanyCode(), mailbagvo);
                        try {
												mailbag = Mailbag.find(mailbagpk);
                        } catch (FinderException e) {
												log.log(Log.SEVERE, "Finder Exception Caught");
											}
											//delete mailbag history associated with arrival starts
                        mailhistories = (ArrayList<MailbagHistoryVO>) findMailbagHistories(mailbagvo.getCompanyCode(), mailbagvo.getMailbagId(), 0l);
											 log.log(Log.FINE, "mailbaghistories present (before removing) >>>>", mailhistories);
											 ArrayList<MailbagHistoryVO>		 mailbaghistories = new ArrayList<MailbagHistoryVO>();
											 ArrayList<MailbagHistoryVO>		 filteredmailbaghistories = new ArrayList<MailbagHistoryVO>();
											 ArrayList<MailbagHistoryVO>		 damagedMailbaghistories = new ArrayList<MailbagHistoryVO>();
                        for (MailbagHistoryVO mailhistoryvo : mailhistories) {
                            if ("TRA".equals(mailhistoryvo.getMailStatus()) ||
                                    "ARR".equals(mailhistoryvo.getMailStatus()) ||
                                    "ACP".equals(mailhistoryvo.getMailStatus()) ||
                                    "ASG".equals(mailhistoryvo.getMailStatus()) ||
                                    "RTN".equals(mailhistoryvo.getMailStatus()) ||
                                    "OFL".equals(mailhistoryvo.getMailStatus()) ||
														"DLV".equals(mailhistoryvo.getMailStatus())
														) {
													filteredmailbaghistories.add(mailhistoryvo);
												}
                            if ("DMG".equals(mailhistoryvo.getMailStatus())) {
													damagedMailbaghistories.add(mailhistoryvo);
												}
											 }
											 log.log(Log.FINE, "mailbaghistories present (after filtering) >>>>", mailbaghistories);
											 log.log(Log.FINE, "damagedmailbaghistories present (after removing) >>>>", damagedMailbaghistories);
                        if (filteredmailbaghistories != null && filteredmailbaghistories.size() > 0) {
                            MailbagHistoryVO presentHistory = filteredmailbaghistories.get(filteredmailbaghistories.size() - 1);
                            if (!presentHistory.getScannedPort().equals(mailbagvo.getScannedPort())) {
														//mailbag not present in current port
                                if ((presentHistory.getFlightNumber() != null && presentHistory.getFlightNumber().equals(mailbagvo.getFlightNumber())) &&
                                        (presentHistory.getFlightSequenceNumber() == mailbagvo.getFlightSequenceNumber())) {
															throw new MailTrackingBusinessException(MailTrackingBusinessException.MAILTRACKING_MAIL_UNARRIVEDBAGS);
                                } else {
														throw new MailTrackingBusinessException(MailTrackingBusinessException.MAILTRACKING_MAIL_TRANSFERRED_OR_DELIVERED);
														}
													}
                            if (presentHistory.getScannedPort().equals(mailbagvo.getScannedPort())) {
                                if ("TRA".equals(presentHistory.getMailStatus()) || "ASG".equals(presentHistory.getMailStatus()) || "DLV".equals(presentHistory.getMailStatus())) {
														//Mail already transfered	/reassigned/delivered
															throw new MailTrackingBusinessException(MailTrackingBusinessException.MAILTRACKING_MAIL_TRANSFERRED_OR_DELIVERED);
														}
                                if ("ARR".equals(presentHistory.getMailStatus()) &&
                                        !(presentHistory.getFlightNumber().equals(mailbagvo.getFlightNumber())) &&
                                        presentHistory.getFlightSequenceNumber() != mailbagvo.getFlightSequenceNumber()) {
															//Multiple times arrived at the same port
															throw new MailTrackingBusinessException(MailTrackingBusinessException.MAILTRACKING_MAIL_TRANSFERRED_OR_DELIVERED);
														}
												}
                            for (MailbagHistoryVO mailhistoryvo : mailhistories) {
                                if (mailhistoryvo.getScannedPort().equals(mailbagvo.getScannedPort()) &&
                                        ((("ARR").equals(mailhistoryvo.getMailStatus())) || (("DMG").equals(mailhistoryvo.getMailStatus()))) &&
                                        (mailhistoryvo.getFlightNumber().equals(mailbagvo.getFlightNumber()) && mailhistoryvo.getFlightSequenceNumber() == (mailbagvo.getFlightSequenceNumber()))) {
														MailbagHistory mailhistory = null;
													MailbagHistoryPK mailbaghistorypk = 	constructMailbagHistoryPK(mailhistoryvo);
                                    try {
                                        mailhistory = MailbagHistory.findMailbagHistory(mailbaghistorypk);
                                    } catch (FinderException e) {
														log.log(Log.SEVERE, "Finder Exception Caught");
													}
													mailhistory.remove();
													//Added as prt of bug ICRD-203777 by A-5526
													//Removing the history from mailbag.getHistories() also.
													//mailbag.getMailbagHistories().remove(mailhistory);IASCB-46569


                                } else if ("TRA".equals(mailhistoryvo.getMailStatus()) ||
                                        "ARR".equals(mailhistoryvo.getMailStatus()) ||
                                        "ACP".equals(mailhistoryvo.getMailStatus()) ||
                                        "ASG".equals(mailhistoryvo.getMailStatus()) ||
                                        "RTN".equals(mailhistoryvo.getMailStatus()) ||
                                        "OFL".equals(mailhistoryvo.getMailStatus()) ||
                                        "DLV".equals(mailhistoryvo.getMailStatus()) ||
                                        "DMG".equals(mailhistoryvo.getMailStatus()) ||
															"CDT".equals(mailhistoryvo.getMailStatus())) {
														mailbaghistories.add(mailhistoryvo);
													}
												}
												}
												//Mailbaghistory deletion ends
												log.log(Log.FINE, "mailbaghistories present (after removing) >>>>", mailbaghistories);
												//Modified as prt of bug ICRD-203777 by A-5526
                        if (mailbaghistories.size() == 0 && !MailConstantsVO.FLAG_YES.equals(mailbagvo.getAcceptanceFlag())) {
												log.log(Log.FINE, "Found mailbag : hence removing >>>>", mailbag);
													mailbag.remove();//found mailbag hence deleting , damage and history associated with this will get removed along with mailbag
													//Code to be checked and removed for mail revamp
												//updateDSNMaster(mailbagvo);


                        } else {
												//Update the mailmaster with latest exp operation starts

												MailbagHistoryVO latestHistory = null;
                            int historysize = mailbaghistories.size();
												//Modified as prt of bug ICRD-203777 by A-5526
													//int historysizeOld =mailhistories.size();
													//if(historysizeOld==historysize+1){

														latestHistory = mailbaghistories.get(historysize - 1);
													//}else{
														//latestHistory = mailhistories.get(historysize);
													//}


                            if (latestHistory != null) {
													//Added as prt of bug ICRD-203777 by A-5526
                                if ("TRA".equals(latestHistory.getMailStatus()) ||
                                        "ARR".equals(latestHistory.getMailStatus()) ||
                                        "ACP".equals(latestHistory.getMailStatus()) ||
                                        "ASG".equals(latestHistory.getMailStatus()) ||
                                        "RTN".equals(latestHistory.getMailStatus()) ||
                                        "OFL".equals(latestHistory.getMailStatus()) ||
                                        "DLV".equals(latestHistory.getMailStatus()) ||
                                        "DMG".equals(latestHistory.getMailStatus()) ||
                                        "CDT".equals(latestHistory.getMailStatus())) {
												mailbag.setScannedPort(latestHistory.getScannedPort());
                                    if ("CDT".equals(latestHistory.getMailStatus())) {
													mailbag.setLatestStatus(MailConstantsVO.MAIL_STATUS_NEW);
                                    } else {
												mailbag.setLatestStatus(latestHistory.getMailStatus());
												}
												mailbag.setUldNumber(latestHistory.getContainerNumber());
												mailbag.setContainerType(latestHistory.getContainerType());
												mailbag.setFlightNumber(latestHistory.getFlightNumber());
												mailbag.setFlightSequenceNumber(latestHistory.getFlightSequenceNumber());
												}
												}
												mailbag.setOperationalStatus(MailConstantsVO.OPERATION_OUTBOUND);
                            if (MailConstantsVO.BULK_TYPE.equals(mailbagvo.getContainerType())) {
													String bulkcontainernumber =	latestHistory.getContainerNumber();
													log.log(Log.FINE, "Bulk number at export side  >>>>", bulkcontainernumber);
																						 ContainerPK bulkcontainerpk = new ContainerPK();
													 bulkcontainerpk.setCarrierId(containerDetailsVO.getCarrierId());
													 bulkcontainerpk.setCompanyCode(containerDetailsVO.getCompanyCode());
													 bulkcontainerpk.setContainerNumber(bulkcontainernumber);
													 bulkcontainerpk.setFlightNumber(containerDetailsVO.getFlightNumber());
													 bulkcontainerpk.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
													 bulkcontainerpk.setAssignmentPort(containerDetailsVO.getPol());
                                if (containerDetailsVO.getLegSerialNumber() == 0) {
													 bulkcontainerpk.setLegSerialNumber(legserialnum);
                                } else {
														 bulkcontainerpk.setLegSerialNumber(containerDetailsVO.getLegSerialNumber());
													 }
                                try {
														 bulkcontainer = Container.find(bulkcontainerpk);
                                } catch (FinderException e) {
														 log.log(Log.SEVERE, "Finder Exception Caught");
													 }
													 mailbag.setUldNumber(bulkcontainernumber);
													}
												//updating mailmaster with latest exp operation ends
												//delete from MTKMALDMG if damage is captured after arrival starts
                            if (mailbagvo.getDamagedMailbags() != null && mailbagvo.getDamagedMailbags().size() > 0) {
													log.log(Log.FINE, "Damagedmailbags present (before removing) >>>>", mailbagvo.getDamagedMailbags());
                                for (DamagedMailbagVO damagedmailvo : mailbagvo.getDamagedMailbags()) {
														/* below code will check whether the damage is capture at import port. if so, it needs to be removed*/
                                    if (mailbagvo.getScannedPort().equals(damagedmailvo.getAirportCode())) {
															DamagedMailbag damagedmailbag = null;
                                        DamagedMailbagPK damagedmailpk = constructDamagedMailbagPK(damagedmailvo, mailbagvo);
                                        try {
																damagedmailbag = DamagedMailbag.find(damagedmailpk);
                                        } catch (FinderException e) {
																log.log(Log.SEVERE, "Finder Exception Caught");
															}
															mailbagvo.setDamageFlag(MailConstantsVO.FLAG_NO);
															damagedmailbag.remove();
                                    } else {
													//Damage is captured at export side , hence no need to remove
														mailbagvo.setDamageFlag(MailConstantsVO.FLAG_YES);
                                        damagedmailbags.add(damagedmailvo);//export side damage are added
														}
													}
													log.log(Log.FINE, "Damagedmailbags present (after removing) >>>>", damagedmailbags);
                                if (damagedmailbags != null && damagedmailbags.size() > 0) {
														mailbagvo.setDamagedMailbags(damagedmailbags);
													}
												}
                            if (mailbagvo.getDamageFlag() != null) {
												mailbag.setDamageFlag(mailbagvo.getDamageFlag());
                            } else {
													mailbag.setDamageFlag(MailbagVO.FLAG_NO);
												}
												//delete from MTKMALDMG if damage is captured after arrival ends
											}
												//Code to be checked and confirmed for mail revamp starts

											//Code to update data from MTKDSNSEG starts if found or accepted
											/* DSNForSegmentPK dSNForSegmentPK=new DSNForSegmentPK();
											dSNForSegmentPK.setCarrierId(mailbagvo.getCarrierId());
											dSNForSegmentPK.setCompanyCode(mailbagvo.getCompanyCode());
											dSNForSegmentPK.setDestinationOfficeOfExchange(mailbagvo.getDoe());
											dSNForSegmentPK.setDsn(mailbagvo.getDespatchSerialNumber());
											dSNForSegmentPK.setFlightNumber(mailbagvo.getFlightNumber());
											dSNForSegmentPK.setFlightSequenceNumber(mailbagvo.getFlightSequenceNumber());
											dSNForSegmentPK.setMailCategoryCode(mailbagvo.getMailCategoryCode());
											dSNForSegmentPK.setMailSubclass(mailbagvo.getMailSubclass());
											dSNForSegmentPK.setOriginOfficeOfExchange(mailbagvo.getOoe());
											dSNForSegmentPK.setSegmentSerialNumber(mailbagvo.getSegmentSerialNumber());
											dSNForSegmentPK.setYear(mailbagvo.getYear());
											DSNForSegment dSNForSegment=null;
											try {
												dSNForSegment=DSNForSegment.find(dSNForSegmentPK);
											} catch (FinderException e) {
											}
											log.log(Log.FINE, "The dSNForSegment is ", dSNForSegment);
											if(dSNForSegment!=null){
												dSNForSegment.setReceivedBags(dSNForSegment.getReceivedBags()-1);
												dSNForSegment.setReceivedWeight(dSNForSegment.getReceivedWeight()-mailbagvo.getWeight());
												if(dSNForSegment.getAcceptedBags()==0 && dSNForSegment.getReceivedBags()==0 ){
													dSNForSegment.remove();
												}
											}
											//Updating MTKDSNARP starts
											/*For every acceptance , an entry is inserted in to this table ".
											 *hence this table should be updated
											 */
										/*	DSNAtAirport dsnatAirport = null;
											DSNAtAirportPK dsnAtAirportPK = new DSNAtAirportPK();
											dsnAtAirportPK.setCompanyCode(   mailbagvo.getCompanyCode());
											dsnAtAirportPK.setDsn( mailbagvo.getDespatchSerialNumber());
											dsnAtAirportPK.setOriginOfficeOfExchange(   mailbagvo.getOoe());
											dsnAtAirportPK.setDestinationOfficeOfExchange(   mailbagvo.getDoe());
											dsnAtAirportPK.setMailCategoryCode  ( mailbagvo.getMailCategoryCode());
											dsnAtAirportPK.setMailSubclass(   mailbagvo.getMailSubclass());
											dsnAtAirportPK.setYear(   mailbagvo.getYear());
											dsnAtAirportPK.setAirportCode(   mailbagvo.getScannedPort());
											try{
												dsnatAirport = 	DSNAtAirport.find(dsnAtAirportPK);
											}catch (FinderException e){
											}
											if(dsnatAirport!= null){
												dsnatAirport.setTotalBagsArrived(dsnatAirport.getTotalBagsArrived()-1);
												dsnatAirport.setTotalWeightArrived(dsnatAirport.getTotalWeightArrived()-mailbagvo.getWeight());
											}
										//Updating MTKDSNARP ends
											//Updating MTKDSNARPULD starts
											/*For every arrival of mailbag , an entry is inserted into this table with container number as "BULK-ARR_TK".
											 *hence this should be removed
											 */
											/*DSNInULDAtAirport dsninuldAtAirpot = null;
											DSNInULDAtAirportPK dsnInULDAtAirportPk = new DSNInULDAtAirportPK();
											dsnInULDAtAirportPk.setCompanyCode(   mailbagvo.getCompanyCode());
											dsnInULDAtAirportPk.setCarrierId(   mailbagvo.getCarrierId());
										String uldnum = new StringBuilder().append("BULK").append("-").append("ARR").append("-").append(mailbagvo.getCompanyCode()).toString();
										log.log(Log.FINE, "The uldnumber for removing entry from MTKDSNARPULD is  is ", uldnum);
											dsnInULDAtAirportPk.setUldNumber(uldnum);
											dsnInULDAtAirportPk.setAirportCode(   mailbagvo.getScannedPort());
											dsnInULDAtAirportPk.setDsn( mailbagvo.getDespatchSerialNumber());
											dsnInULDAtAirportPk.setOriginExchangeOffice(
													mailbagvo.getOoe());
											dsnInULDAtAirportPk.setDestinationExchangeOffice(
													mailbagvo.getDoe());
											dsnInULDAtAirportPk.setMailCategoryCode (  mailbagvo.getMailCategoryCode());
											dsnInULDAtAirportPk.setMailSubclass(   mailbagvo.getMailSubclass());
											dsnInULDAtAirportPk.setYear(   mailbagvo.getYear());
											try{
												dsninuldAtAirpot  = DSNInULDAtAirport.find(dsnInULDAtAirportPk);
											}catch(FinderException e){
											}
											if(dsninuldAtAirpot!= null){
												dsninuldAtAirpot.setAcceptedBags(dsninuldAtAirpot.getAcceptedBags()-1)	;
												dsninuldAtAirpot.setAcceptedWeight(dsninuldAtAirpot.getAcceptedWeight()-mailbagvo.getWeight());
												if(dsninuldAtAirpot.getAcceptedBags()==0 && dsninuldAtAirpot.getAcceptedWeight()==0){
													dsninuldAtAirpot.remove();
												}
											}
											//Updating MTKDSNARPULD ends
											//Updating MTKDSNCONARP starts
											/*For every arrival of mailbag , an entry is inserted into this table with container number as "BULK-ARR_TK".
											 *hence this should be removed
											 */
											/*DSNInContainerAtAirport dsninContainerAtAirport = null;
											DSNInContainerAtAirportPK dsnInContainerAtAirportPk = new DSNInContainerAtAirportPK();
											dsnInContainerAtAirportPk.setCompanyCode(   mailbagvo.getCompanyCode());
											dsnInContainerAtAirportPk.setCarrierId(   mailbagvo.getCarrierId());
											dsnInContainerAtAirportPk.setAirportCode(   mailbagvo.getScannedPort());
											String uldnumber = new StringBuilder().append("BULK").append("-").append("ARR").append("-").append(mailbagvo.getCompanyCode()).toString();
											log.log(Log.FINE, "The uldnumber for removing entry from MTKDSNCONARP is  is ", uldnum);
											dsnInContainerAtAirportPk.setUldNumber(uldnumber);
											dsnInContainerAtAirportPk.setDsn(mailbagvo.getDespatchSerialNumber());
											dsnInContainerAtAirportPk.setOriginExchangeOffice(mailbagvo.getOoe());
											dsnInContainerAtAirportPk.setDestinationExchangeOffice(mailbagvo.getDoe());
											dsnInContainerAtAirportPk.setMailCategoryCode  (
													 mailbagvo.getMailCategoryCode());
											dsnInContainerAtAirportPk.setMailSubclass( mailbagvo.getMailSubclass());
											dsnInContainerAtAirportPk.setYear(   mailbagvo.getYear());
											dsnInContainerAtAirportPk.setContainerNumber(uldnumber);
											try{
												dsninContainerAtAirport = DSNInContainerAtAirport.find(dsnInContainerAtAirportPk);
											}catch(FinderException e){
											}
											if(dsninContainerAtAirport!= null){
												dsninContainerAtAirport.setAcceptedBags(dsninContainerAtAirport.getAcceptedBags()-1);
												dsninContainerAtAirport.setAcceptedWeight(dsninContainerAtAirport.getAcceptedWeight()-mailbagvo.getWeight());
												if(dsninContainerAtAirport.getAcceptedBags()==0 && dsninContainerAtAirport.getAcceptedWeight()== 0){
													dsninContainerAtAirport.remove();
												}
											} */
											//Updating MTKDSNCONARP ends
											//Updating MTKMALARPULD starts
												//Code to be checked and confirmed for mail revamp ends
                        MailbagInULDForSegment mailbagInULDForSegment = null;
                        MailbagInULDForSegmentPK mailbagInULDForSegmentPK = new MailbagInULDForSegmentPK();
											mailbagInULDForSegmentPK.setCompanyCode(mailbagvo.getCompanyCode());
											mailbagInULDForSegmentPK.setCarrierId(mailbagvo.getCarrierId());
											mailbagInULDForSegmentPK.setFlightNumber(mailbagvo.getFlightNumber());
											mailbagInULDForSegmentPK.setFlightSequenceNumber(mailbagvo.getFlightSequenceNumber());
                        if (mailbagvo.getUldNumber() != null) {
												mailbagInULDForSegmentPK.setUldNumber(mailbagvo.getUldNumber());
                        } else {
												mailbagInULDForSegmentPK.setUldNumber(mailbagvo.getContainerNumber());
											}
											mailbagInULDForSegmentPK.setSegmentSerialNumber(mailbagvo.getSegmentSerialNumber());

											//mailbagInULDForSegmentPK.setMailSequenceNumber(findMailSequenceNumber(mailbagvo.getMailbagId(), mailbagvo.getCompanyCode()));
											mailbagInULDForSegmentPK.setMailSequenceNumber(mailbagvo.getMailSequenceNumber()> 0 ?
													mailbagvo.getMailSequenceNumber(): findMailSequenceNumber(mailbagvo.getMailbagId(), mailbagvo.getCompanyCode()) );
                        try {
                            mailbagInULDForSegment = MailbagInULDForSegment.find(mailbagInULDForSegmentPK);
                        } catch (FinderException e) {
												log.log(Log.SEVERE, "Finder Exception Caught-mailbagInULDForSegment");
											}
                        if (mailbagInULDForSegment != null) {
                            mailbagInULDForSegment.setRecievedBags(mailbagInULDForSegment.getRecievedBags() - 1);
                            mailbagInULDForSegment.setRecievedWeight(mailbagInULDForSegment.getRecievedWeight() - mailbagvo.getWeight().getSystemValue()/* As part of correcting the Measure usage in setting value to entity classes ICRD-288684 */);//added by A-7371
												mailbagInULDForSegment.setArrivalFlag(MailConstantsVO.FLAG_NO);
                            if (mailbagInULDForSegment.getAcceptedBags() == 0 && mailbagInULDForSegment.getRecievedBags() == 0) {
													mailbagInULDForSegment.remove();
												}
											}
											MailbagInULDAtAirport mailbagInULDAtAirport = null;
                        try {
											MailbagInULDAtAirportPK	mailbagInULDAtAirportPK = new MailbagInULDAtAirportPK();
												mailbagInULDAtAirportPK.setCompanyCode(mailbagvo.getCompanyCode());
												mailbagInULDAtAirportPK.setCarrierId(mailbagvo.getCarrierId());
												mailbagInULDAtAirportPK.setAirportCode(mailbagvo.getScannedPort());
												mailbagInULDAtAirportPK.setMailSequenceNumber(mailbagvo.getMailSequenceNumber());
												mailbagInULDAtAirportPK.setUldNumber(mailbagvo.getContainerNumber());
												mailbagInULDAtAirport = MailbagInULDAtAirport.find(mailbagInULDAtAirportPK);
												mailbagInULDAtAirport.remove();
                        } catch (Exception e) {
												 log.log(Log.INFO, "mailbagInULDAtAirport is not available",
															e.getMessage());
											}
											MailbagInULDAtAirportPK	mailbagInULDAtAirportPK = new MailbagInULDAtAirportPK();
                        mailbagInULDAtAirportPK.setCompanyCode(mailbagvo.getCompanyCode());
                        mailbagInULDAtAirportPK.setCarrierId(mailbagvo.getCarrierId());
                        mailbagInULDAtAirportPK.setAirportCode(mailbagvo.getScannedPort());
                        if (mailbagvo.getUldNumber() == null) {
											mailbagInULDAtAirportPK.setUldNumber(new StringBuilder().append("BULK").append("-").append("ARR").append("-").append(mailbagvo.getCompanyCode()).toString());
                        } else {
												mailbagInULDAtAirportPK.setUldNumber(mailbagvo.getUldNumber());
											}
											//mailbagInULDAtAirportPK.setMailSequenceNumber(Mailbag.findMailBagSequenceNumberFromMailIdr(mailbagvo.getMailbagId(), mailbagvo.getCompanyCode()));
											mailbagInULDAtAirportPK.setMailSequenceNumber(mailbagvo.getMailSequenceNumber());
                        try {
                            mailbagInULDAtAirport = MailbagInULDAtAirport.find(mailbagInULDAtAirportPK);
                        } catch (FinderException e) {
												log.log(Log.SEVERE, "Finder Exception Caught");
											}
                        if (mailbagInULDAtAirport != null) {
                            mailbagInULDAtAirport.setAcceptedBags(mailbagInULDAtAirport.getAcceptedBags() - 1);
                            mailbagInULDAtAirport.setAcceptedWeight(mailbagInULDAtAirport.getAcceptedWeight() - mailbagvo.getWeight().getSystemValue()/* As part of correcting the Measure usage in setting value to entity classes ICRD-288684 */);
                            if (mailbagInULDAtAirport.getAcceptedBags() == 0 && mailbagInULDAtAirport.getAcceptedWeight() == 0) {
												mailbagInULDAtAirport.remove();
											}
											}
											//Updating MTKMALARPULD ends
											//Updating MTKARPULD starts
											/*For every arrival at import side whether it is manifested or found
											 * whether it is in BULK/ULD , no of bags and weight gets updated
											 *
											 */
											/*ULDAtAirport uldAtAirport = null;
											ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();
											uldAtAirportPK.setCompanyCode(   mailbagvo.getCompanyCode());
											String uldatarpULDnumber = new StringBuilder().append("BULK").append("-").append("ARR").append("-").append(mailbagvo.getCompanyCode()).toString();
											uldAtAirportPK.setUldNumber( uldatarpULDnumber);
											uldAtAirportPK.setCarrierId(   mailbagvo.getCarrierId());
											uldAtAirportPK.setAirportCode(   mailbagvo.getScannedPort());
											try{
												uldAtAirport= 	ULDAtAirport.find(uldAtAirportPK);
										}catch (FinderException e){
											log.log(Log.SEVERE, "Finder Exception Caught");
										}
											if(uldAtAirport!=null){
												uldAtAirport.setNumberOfBags(uldAtAirport.getNumberOfBags() -1)		;
												uldAtAirport.setTotalWeight(uldAtAirport.getTotalWeight()-mailbagvo.getWeight());
												}*/
										//Updating MTKARPULD ends
											//Updating MTKMALRDT starts
											MailResdit mailresdit = null;
											long sequenceNumber = 0;
											MailResditVO mailResditVO = new MailResditVO();
											mailResditVO.setCompanyCode(mailbagvo.getCompanyCode());
											mailResditVO.setEventCode(MailConstantsVO.RESDIT_ARRIVED);
											mailResditVO.setMailId(mailbagvo.getMailbagId());
											mailResditVO.setEventAirport(mailbagvo.getScannedPort());
											mailResditVO.setMailSequenceNumber(mailbagvo.getMailSequenceNumber());
                        try {
                            sequenceNumber = constructDAO().findResditSequenceNumber(mailResditVO);
											} catch (PersistenceException exception) {
												throw new SystemException(exception.getMessage(), exception);
											}
											MailResditPK mailresditPK  = new MailResditPK();
											mailresditPK.setCompanyCode(mailbagvo.getCompanyCode());
											//mailresditPK.setMailSequenceNumber(findMailSequenceNumber(mailbagvo.getMailbagId(), mailbagvo.getCompanyCode()));
											mailresditPK.setMailSequenceNumber(mailbagvo.getMailSequenceNumber());
											mailresditPK.setEventCode(MailConstantsVO.RESDIT_ARRIVED);
											mailresditPK.setSequenceNumber(sequenceNumber);
                        try {
                            mailresdit = MailResdit.find(mailresditPK);
                        } catch (FinderException e) {
												log.log(Log.SEVERE, "Finder Exception Caught");
											}
                        if (mailresdit != null) {
												mailresdit.remove();
											}
											//Updating MTKMALRDT ends
										mailbagforundoarrival++;
										}
									}
                if (mailbagforundoarrival + unarrivedbags == mailbagcount) {
                    if (container != null && MailConstantsVO.ULD_TYPE.equals(container.getContainerType())) {
									container.setTransactionCode("ASG");
									container.setArrivedStatus(MailConstantsVO.FLAG_NO);//Full mailbags unarrived
                    } else if (bulkcontainer != null && MailConstantsVO.BULK_TYPE.equals(bulkcontainer.getContainerType())) {
										bulkcontainer.setArrivedStatus(MailConstantsVO.FLAG_NO);
								}

								}
								}
							}
							}


						/**
						 * Added A-5945
     *
						 * @param ContainerDetailsVO
     * @return ContainerPK
     */
    private ContainerPK constructContainerPKfromContainerDetailVO(ContainerDetailsVO containerDetailsVO) {
							ContainerPK containerpk = new ContainerPK();
							containerpk.setCarrierId(containerDetailsVO.getCarrierId());
							containerpk.setCompanyCode(containerDetailsVO.getCompanyCode());
							containerpk.setContainerNumber(containerDetailsVO.getContainerNumber());
							containerpk.setFlightNumber(containerDetailsVO.getFlightNumber());
							containerpk.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
						containerpk.setAssignmentPort(containerDetailsVO.getPol());
						 containerpk.setLegSerialNumber(containerDetailsVO.getLegSerialNumber());

							return containerpk;
						}


						/**
						 * Added A-5945
     *
						 * @param MailbagVO
						 * @param DamagedMailbagVO
						 * @return DamagedMailbagPK
     */
    private DamagedMailbagPK constructDamagedMailbagPK(DamagedMailbagVO damagedmailvo, MailbagVO mailbagvo) {
							DamagedMailbagPK damagedMailbagPK = new DamagedMailbagPK();
        damagedMailbagPK.setCompanyCode(mailbagvo.getCompanyCode());
        damagedMailbagPK.setAirportCode(damagedmailvo.getAirportCode());
        damagedMailbagPK.setDamageCode(damagedmailvo.getDamageCode());
							damagedMailbagPK.setMailSequenceNumber(mailbagvo.getMailSequenceNumber());
							return damagedMailbagPK;
						}


						private static MailTrackingDefaultsDAO constructDAO()
						    	throws SystemException {
						    		try {
						    			EntityManager em = PersistenceController.getEntityManager();
						    			return MailTrackingDefaultsDAO.class.cast(em.getQueryDAO(MODULENAME));
        } catch (PersistenceException persistenceException) {
						    			throw new SystemException(persistenceException.getErrorCode());
						    		}
						    	}

						//Updating MTKDSNMST starts
						/**
						 * Added A-5945
						 * @param MailbagVO
						 * @throws SystemException
						 */
					/*	private void updateDSNMaster(MailbagVO mailbagvo) throws SystemException{
							DSN dsn = null;
							DSNPK dsnPk = new DSNPK();
							dsnPk.setCompanyCode(   mailbagvo.getCompanyCode());
							dsnPk.setDsn(  mailbagvo.getDespatchSerialNumber());
							dsnPk.setOriginExchangeOffice(   mailbagvo.getOoe());
							dsnPk.setDestinationExchangeOffice(   mailbagvo.getDoe());
							dsnPk.setMailSubclass(   mailbagvo.getMailSubclass());
							dsnPk.setMailCategoryCode  ( mailbagvo.getMailCategoryCode());
							dsnPk.setYear(   mailbagvo.getYear());
								try {
									dsn = DSN.find(dsnPk)	;
								} catch (FinderException e) {
								}catch(SystemException s){
								}
								if(dsn != null){
									dsn.setBagCount(dsn.getBagCount()-1);
									dsn.setWeight(dsn.getWeight()-mailbagvo.getWeight());
								}
							/*if(dsn.getBagCount()==0){
								dsn.remove();
							}*/
						//}
						//Updating MTKDSNMST ends
				//Added by A-5945 for ICRD-118205 ends

						/**
						 * Added A-5945
						 *  * @return MailbagHistoryPK
     *
						 * @param MailbagHistoryVO
						 * @throws SystemException
     */
    private MailbagHistoryPK constructMailbagHistoryPK(MailbagHistoryVO mailhistoryvo) throws SystemException {
							MailbagHistoryPK mailbagHistoryPK = new MailbagHistoryPK();
							 mailbagHistoryPK.setCompanyCode(mailhistoryvo.getCompanyCode());
						     mailbagHistoryPK.setHistorySequenceNumber(mailhistoryvo.getHistorySequenceNumber());

								mailbagHistoryPK.setMailSequenceNumber(mailhistoryvo.getMailSequenceNumber()> 0 ?
										mailhistoryvo.getMailSequenceNumber(): findMailSequenceNumber(mailhistoryvo.getMailbagId(), mailhistoryvo.getCompanyCode()) );

							return  mailbagHistoryPK;
							}


						/**
     * @param mailArrivalVO This method is to check and update post data capturing like MailCompanyCOde /Seal Number/Arrival Seal number etc to a transferred bag in its arrived flight
     * @throws SystemException
     * @author A-5526
						 */
					private void checkForPostDataCaptureAndSaveDetails(
							MailArrivalVO mailArrivalVO) throws SystemException {
						log.entering(CLASS, "checkForPostDataCaptureAndSaveDetails");
						Collection<ContainerDetailsVO> arrivedContainers = mailArrivalVO
								.getContainerDetails();
						//Added as part of bug ICRD-130734 by A-5526
        String POST_DATA_CAPTURE = "PDC";
        if (arrivedContainers != null && arrivedContainers.size() > 0) {
						for (ContainerDetailsVO containerDetailsVO : arrivedContainers) {
							Collection<MailbagVO> mailbags = containerDetailsVO
									.getMailDetails();
                if (mailbags != null && mailbags.size() > 0) {
							for (MailbagVO mailbagVO : mailbags) {
								if ("U".equals(mailbagVO.getOperationalFlag())) {
									if (isPostDataCaptureOfMailbag(mailbagVO)) {
										mailbagVO.setOperationalFlag(null);
										//Added as part of bug ICRD-130734 by A-5526
										mailbagVO.setActionMode(POST_DATA_CAPTURE);
										performPostDataCapture(mailbagVO);

									}
								}

								}
							}
							}
						}

					}


    /**
     * @param mailbagVO This method is to identify post data capturing
     * @return
     * @throws SystemException
     * @author A-5526
					 */
							private boolean isPostDataCaptureOfMailbag(MailbagVO mailbagVO) throws SystemException {
								 log.entering(CLASS, "findCurrentStatusOfMailbag");
								 MailbagPK mailbagPk = new MailbagPK();
        Mailbag mailbag = null;
        boolean postDataCapture = false;

        String mailbagId = mailbagVO.getMailbagId();
									mailbagPk.setCompanyCode(mailbagVO.getCompanyCode());
        mailbagPk.setMailSequenceNumber(mailbagVO.getMailSequenceNumber() > 0 ? mailbagVO.getMailSequenceNumber() : findMailSequenceNumber(mailbagId, mailbagVO.getCompanyCode()));
        try {
            mailbag = Mailbag.find(mailbagPk);
        } catch (SystemException e) {
            log.log(Log.SEVERE, "System Exception Caught");
        } catch (FinderException e) {
            log.log(Log.SEVERE, "Finder Exception Caught");
        }

        if (mailbag != null) {
										/*If scanned port is different.
										 * case 1:Manifested bags
										 * case 2:Found arrival in another port
										*/
            if (!mailbag.getScannedPort().equals(mailbagVO.getScannedPort())) {
											//If manifested peices it is consider as normal arrival.So not a postCaptureData
                if ("O".equals(mailbag.getOperationalStatus()) && (mailbag.getFlightNumber() != null && mailbag.getFlightNumber().equals(mailbagVO.getFlightNumber())) &&
                        (mailbag.getFlightSequenceNumber() == mailbagVO.getFlightSequenceNumber())) {
                    postDataCapture = false;
                } else {
												//Added for bug ICRD-155261 by A-5526 starts
												Collection<MailbagHistoryVO>  mailhistories = new  ArrayList<MailbagHistoryVO>();
                    mailhistories = (mailbagVO.getMailbagHistories() != null && !mailbagVO.getMailbagHistories().isEmpty()) ?
                            mailbagVO.getMailbagHistories() : (ArrayList<MailbagHistoryVO>) Mailbag.findMailbagHistories(mailbagVO.getCompanyCode(), mailbagVO.getMailbagId(), 0l);
                    if (mailhistories != null && mailhistories.size() > 0) {
                        for (MailbagHistoryVO mailbaghistoryvo : mailhistories) {
                            if (MailConstantsVO.MAIL_STATUS_ARRIVED.equals(mailbaghistoryvo.getMailStatus()) &&
                                    mailbaghistoryvo.getScannedPort().equals(mailbagVO.getScannedPort())) {
                                if ((mailbaghistoryvo.getFlightNumber() != null && mailbaghistoryvo.getFlightNumber().equals(mailbagVO.getFlightNumber())) ||
                                        mailbaghistoryvo.getFlightSequenceNumber() == mailbagVO.getFlightSequenceNumber()) {
                                    postDataCapture = true;
															 }


														 }

													 }
												 }
												//Added for bug ICRD-155261 by A-5526 ends
											}
										}
										/* If scaned port is same
										 * case 1: Updation on arrived bag
										 * case 2: Updation on transferred bag*/
            else if (mailbag.getScannedPort().equals(mailbagVO.getScannedPort())) {
											//If flight number and flight sequence number is same it is consider as case 1.So not a post capturedata
											//Else consider as transferred bag.So no need to update master data.Update only required fields like MailCompanyCode/SealNumber /Arrival SealNumber
                if (!mailbagVO.getFlightNumber().equals(mailbag.getFlightNumber()) ||
                        mailbagVO.getFlightSequenceNumber() != mailbag.getFlightSequenceNumber()) {

                    postDataCapture = true;
											}
										}
									}
								return postDataCapture;
							}


							/**
							 * A-1739
							 *
							 * @param pou
							 * @return
							 */
    public String constructBulkULDNumber(String airport, String carrierCode) {
								/*
								 * This "airport" can be the POU / Destination
								 */
        if (airport != null && airport.trim().length() > 0) {
									return new StringBuilder().append(MailConstantsVO.CONST_BULK).append(
											MailConstantsVO.SEPARATOR).append(airport).toString();
								} else {
									return MailConstantsVO.CONST_BULK_ARR_ARP.concat(MailConstantsVO.SEPARATOR).concat(carrierCode);
								}
							}

							/**
							 * Added By karthick V as the part of the NCA Mail Tracking CR This method
							 * provides the Functionality to remove all the MailBags in the Inventory
							 * List..
     * <p>
							 * 1. Iterate the mails in the inventory and fetch all the mailBags and
							 * Remove them from the Destination .. 2. Iterate the mails and fetch all
							 * the flight assigned mails .. 3.then group the mailbags from the assigned
							 * Flight Segment till DSNuldseg and then find and Update the Flag Also
							 * Update the Bag Count and the Weight in the DSNULDSEG 4.flagresdits 5.
							 * history and master updates for delivery...
							 *
							 * @param mailbagsInInventory
							 * @throws SystemException
							 */
							public void deliverMailBagsFromInventory(
									Collection<MailInInventoryListVO> mailbagsInInventory)
									throws SystemException {
								log.entering(CLASS, "deliverMailBagsFromInventory");
								new MailArrival().deliverMailBagsFromInventory(mailbagsInInventory);
								log.exiting(CLASS, "deliverMailBagsFromInventory");
							}


    /**
							 * @param containerInInventory
							 * @return
							 * @throws SystemException
							 * @throws RemoteException
     * @author a-2553
							 */
							public void deliverContainersFromInventory(
									Collection<ContainerInInventoryListVO> containerInInventory)
									throws SystemException {
								Collection<MailInInventoryListVO> mailbagsforDeliverFrmInventory = new ArrayList<MailInInventoryListVO>();
								for (ContainerInInventoryListVO contInvListVO : containerInInventory) {
									Collection<MailInInventoryListVO> mailbagsInInventory = null;
									Collection<ContainerDetailsVO> containerDetailsVOs = new ArrayList<ContainerDetailsVO>();
									if (ContainerDetailsVO.FLAG_YES.equals(contInvListVO.getPaBuiltFlag())) {
										ContainerVO containerVO = new ContainerVO();
										Container container = null;
										containerVO.setCompanyCode(contInvListVO.getCompanyCode());
										containerVO.setAssignedPort(contInvListVO.getCurrentAirport());
										containerVO.setContainerNumber(contInvListVO.getUldNumber());
										ContainerAssignmentVO conAsgVO = Container
												.findArrivalDetailsForULD(containerVO);
										ContainerPK containerPK = new ContainerPK();
										containerPK.setAssignmentPort(conAsgVO.getAirportCode());
										containerPK.setCarrierId(conAsgVO.getCarrierId());
										containerPK.setCompanyCode(contInvListVO.getCompanyCode());
										containerPK.setContainerNumber(conAsgVO.getContainerNumber());
										containerPK.setFlightNumber(conAsgVO.getFlightNumber());
										containerPK.setFlightSequenceNumber(conAsgVO
												.getFlightSequenceNumber());
										containerPK.setLegSerialNumber(conAsgVO.getLegSerialNumber());
										try {
											container = Container.find(containerPK);
										} catch (FinderException ex) {
											throw new SystemException(ex.getMessage(), ex);
										}
                if (contInvListVO.getPaBuiltFlag() != null) {
										container.setDeliveredFlag(contInvListVO.getPaBuiltFlag());
										}

										ContainerDetailsVO condetVO = new ContainerDetailsVO();
										condetVO.setCompanyCode(contInvListVO.getCompanyCode());
										condetVO.setContainerNumber(contInvListVO.getUldNumber());
										condetVO.setContainerType(contInvListVO.getContainerType());
										condetVO.setCarrierId(contInvListVO.getCarrierID());
										condetVO.setPol(contInvListVO.getCurrentAirport());
										condetVO.setCarrierCode(conAsgVO.getCarrierCode());
										condetVO.setFlightNumber(String
												.valueOf(MailConstantsVO.DESTN_FLT));
										condetVO.setFlightSequenceNumber(MailConstantsVO.DESTN_FLT);
										condetVO.setSegmentSerialNumber(MailConstantsVO.DESTN_FLT);
										containerDetailsVOs.add(condetVO);
										if (contInvListVO.getMailInInventoryList() != null
												&& contInvListVO.getMailInInventoryList().size() > 0) {
											for (MailInInventoryListVO mailInventory : contInvListVO
													.getMailInInventoryList()) {
												mailInventory.setPaBuiltFlag(contInvListVO
														.getPaBuiltFlag());
											}
										}
									}
									mailbagsInInventory = contInvListVO.getMailInInventoryList();
									if (mailbagsInInventory != null && mailbagsInInventory.size() > 0) {
										mailbagsforDeliverFrmInventory.addAll(mailbagsInInventory);
									} else {
										if (ContainerDetailsVO.FLAG_YES.equals(contInvListVO.getPaBuiltFlag())) {
											log.log(Log.FINE, "#########$$$$$$$containerDetailsVOs",
													containerDetailsVOs);
											unassignEmptyULDs(containerDetailsVOs);
										}
									}
								}
								if (mailbagsforDeliverFrmInventory != null
										&& mailbagsforDeliverFrmInventory.size() > 0) {
									log.log(Log.FINE, "#########mailbagsforDeliverFrmInventory",
											mailbagsforDeliverFrmInventory);
									deliverMailBagsFromInventory(mailbagsforDeliverFrmInventory);
								}
								Collection<MailbagVO> mail = new ArrayList<MailbagVO>();
        MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
								mailController.flagResditsForInventoryDelivery(
										containerInInventory, mail);
								/*String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
								if(MailConstantsVO.FLAG_YES .equals(resditEnabled)){
									log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
								new ResditController().flagResditsForInventoryDelivery(
										containerInInventory, mail);
							}*/
							}


    /**
     * @param containerDetailsVOs
     * @throws SystemException
     * @author A-1936
							 */
							@Raise(module = "mail", submodule = "operations", event = "SAVE_DWS_EVENT", methodId = "mail.operations.unassignEmptyULDs", enablecontext="true")	
							public void unassignEmptyULDs(
									Collection<ContainerDetailsVO> containerDetailsVOs)
									throws SystemException {
								log.entering(CLASS, "unassignEmptyULDs");
								if (containerDetailsVOs != null && containerDetailsVOs.size() > 0) {
									for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {

                if ((!ContainerDetailsVO.FLAG_NO.equals(containerDetailsVO.getAcceptedFlag()))
												&& (MailConstantsVO.ULD_TYPE.equals(containerDetailsVO.getContainerType()))) {
											if (containerDetailsVO.getFlightSequenceNumber() > 0) {
												consrtuctAndRemoveULDForSegment(containerDetailsVO);
											} else {
												consrtuctAndRemoveULDForAirport(containerDetailsVO);
											}
										}

										consrtuctAndRemoveContainer(containerDetailsVO);
									}
								}
							}


							/**
     * @param containerDetailsVO
     * @return
							 * @author a-1936 This method is used to Create the ContainerVO
							 */
							private ContainerVO constructContainerVO(
									ContainerDetailsVO containerDetailsVO) {
								log.entering(CLASS, "constructContainerVO");
								ContainerVO containerVO = new ContainerVO();
								containerVO.setCompanyCode(containerDetailsVO.getCompanyCode());
								containerVO.setContainerNumber(containerDetailsVO.getContainerNumber());
								containerVO.setAssignedPort(containerDetailsVO.getPol());
								containerVO.setCarrierId(containerDetailsVO.getCarrierId());
								containerVO.setFlightNumber(containerDetailsVO.getFlightNumber());
								containerVO.setFlightSequenceNumber(containerDetailsVO
										.getFlightSequenceNumber());
								return containerVO;
							}


							/**
     * @param containerDetailsVO
     * @return
     * @throws SystemException
							 * @author a-1936 This method is used to find and remove Container.
							 */
							private void consrtuctAndRemoveContainer(
									ContainerDetailsVO containerDetailsVO) throws SystemException {
								log.entering(CLASS, "consrtuctContainerPK");
								ContainerPK containerPK = new ContainerPK();
								containerPK.setCompanyCode(containerDetailsVO.getCompanyCode());
								containerPK.setContainerNumber(containerDetailsVO.getContainerNumber());
								containerPK.setAssignmentPort(containerDetailsVO.getPol());
								containerPK.setCarrierId(containerDetailsVO.getCarrierId());
								containerPK.setFlightNumber(containerDetailsVO.getFlightNumber());
								containerPK.setFlightSequenceNumber(containerDetailsVO
										.getFlightSequenceNumber());
								containerPK
										.setLegSerialNumber(Container
												.findFlightLegSerialNumber(constructContainerVO(containerDetailsVO)));

								Container emptyContainer = null;
								try {
									emptyContainer = Container.find(containerPK);
								} catch (FinderException ex) {
									throw new SystemException(ex.getMessage(), ex);
								}

								UldInFlightVO uldInFlightVO = new UldInFlightVO();
								uldInFlightVO.setCompanyCode(containerPK.getCompanyCode());
								uldInFlightVO.setUldNumber(containerPK.getContainerNumber());
								uldInFlightVO.setPou(emptyContainer.getPou());
								uldInFlightVO.setAirportCode(containerPK.getAssignmentPort());
								uldInFlightVO.setCarrierId(containerPK.getCarrierId());
								if (containerPK.getFlightSequenceNumber() > 0) {
									uldInFlightVO.setFlightNumber(containerPK.getFlightNumber());
									uldInFlightVO.setFlightSequenceNumber(containerPK
											.getFlightSequenceNumber());
									uldInFlightVO.setLegSerialNumber(containerPK.getLegSerialNumber());
								}
								uldInFlightVO.setFlightDirection(MailConstantsVO.OPERATION_INBOUND);

								emptyContainer.remove();

								Collection<UldInFlightVO> operationalUlds = new ArrayList<>();
								operationalUlds.add(uldInFlightVO);

								boolean isOprUldEnabled = MailConstantsVO.FLAG_YES
										.equals(findSystemParameterValue(MailConstantsVO.FLAG_UPD_OPRULD));

								if (isOprUldEnabled &&
									 (!MailConstantsVO.BULK_TYPE.equals(containerDetailsVO
											.getContainerType()))) {

											Proxy.getInstance().get(OperationsFltHandlingProxy.class)
													.saveOperationalULDsInFlight(operationalUlds);

										}
		containerDetailsVO.setCarrierCode(emptyContainer.getCarrierCode());
		LocalDate date = new LocalDate(emptyContainer.getContainerPK().getAssignmentPort(), Location.ARP, true);
		containerDetailsVO.setAssignedDate(date);
		containerDetailsVO.setAssignedPort(emptyContainer.getContainerPK().getAssignmentPort());
		containerDetailsVO.setPou(emptyContainer.getPou());
		MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
		mailController.flagContainerAuditForUnassignment(containerDetailsVO);
									}


							/**
							 * This method is used to consrtuctULDForSegmentPK and remove . A-1936
							 *
							 * @param containerDetailsVO
							 * @throws SystemException
							 */
							private void consrtuctAndRemoveULDForSegment(
									ContainerDetailsVO containerDetailsVO) throws SystemException {
								log.entering(CLASS, "consrtuctULDForSegmentPK");
								log.log(Log.FINE, "The ContainerDetails Vo is ", containerDetailsVO);
								ULDForSegmentPK uldForSegmentPK = new ULDForSegmentPK();
								uldForSegmentPK.setCompanyCode(containerDetailsVO.getCompanyCode());
								uldForSegmentPK.setCarrierId(containerDetailsVO.getCarrierId());
								uldForSegmentPK.setFlightNumber(containerDetailsVO.getFlightNumber());
								uldForSegmentPK.setFlightSequenceNumber(containerDetailsVO
										.getFlightSequenceNumber());
								uldForSegmentPK.setSegmentSerialNumber(containerDetailsVO
										.getSegmentSerialNumber());
								uldForSegmentPK.setUldNumber(containerDetailsVO.getContainerNumber());
								try {
									ULDForSegment.find(uldForSegmentPK).remove();
								} catch (FinderException ex) {
									throw new SystemException(ex.getErrorCode(), ex);
								}

							}


							/**
							 * This method is used to consrtuctAndRemoveULDForAirport and remove .
							 * A-2883
							 *
							 * @param containerDetailsVO
							 * @throws SystemException
							 */
							private void consrtuctAndRemoveULDForAirport(
									ContainerDetailsVO containerDetailsVO) throws SystemException {
								log.entering(CLASS, "consrtuctULDForSegmentPK");
								log.log(Log.FINE, "The ContainerDetails Vo is ", containerDetailsVO);
								ULDAtAirportPK uldAtAirportPK = new ULDAtAirportPK();

								uldAtAirportPK.setCompanyCode(containerDetailsVO.getCompanyCode());
								uldAtAirportPK.setCarrierId(containerDetailsVO.getCarrierId());
								uldAtAirportPK.setAirportCode(containerDetailsVO.getPol());
								uldAtAirportPK.setUldNumber(containerDetailsVO.getContainerNumber());

								try {
									ULDAtAirport.find(uldAtAirportPK).remove();
								} catch (FinderException ex) {
									throw new SystemException(ex.getErrorCode(), ex);
								}

							}


							/**
							 * This method checks to see if any of the mailbags being returned were
							 * actually returned already. If so it throws MailbagAlreadyReturneException
							 * If the mailbag does not belong to a partner carrier, ReturnNotPossible is
							 * thrown A-1739
							 *
							 * @param mailbagsToReturn
     * @param isScanned        TODO
							 * @return
							 * @throws MailbagAlreadyReturnedException
							 * @throws SystemException
							 * @throws ReturnNotPossibleException
							 */
							private Collection<MailbagVO> checkForReturnedMailbags(
									Collection<MailbagVO> mailbagsToReturn, boolean isScanned)
									throws MailbagAlreadyReturnedException, SystemException,
									ReturnNotPossibleException {

								Collection<MailbagVO> returnedMails = new ArrayList<MailbagVO>();

								Collection<MailbagVO> exceptionMails = new ArrayList<MailbagVO>();

								/*
								 * Checks Whether the MailBag is Associated with a Carrier tat is not
								 * the Partner and Owner If it is it cannot be returned
								 */
								Collection<MailbagVO> invalidMails = validatePartnerForReturnMailBags(mailbagsToReturn);
								if (invalidMails != null && invalidMails.size() > 0) {
									if (isScanned) {
										for (MailbagVO invalidMailVO : invalidMails) {
											invalidMailVO.setErrorType(MailConstantsVO.EXCEPT_FATAL);
											invalidMailVO
													.setErrorDescription(MailConstantsVO.ERMSG_HANDOVER_RETURN);
										}
										exceptionMails.addAll(invalidMails);
										/*
										 * Since save must continue with remaining mails go to remove
										 * errmails
										 */
										mailbagsToReturn.removeAll(invalidMails);
			} else {
				throw new ReturnNotPossibleException(ReturnNotPossibleException.INVALID_MAILBAGS_FORRETURN,
						new Object[] { constructMailbagErrorData(invalidMails) });
									}
								}
								for (MailbagVO mailbagVO : mailbagsToReturn) {
									if (MailConstantsVO.MAIL_STATUS_RETURNED.equals(mailbagVO
											.getLatestStatus())) {
										returnedMails.add(mailbagVO);
										if (isScanned) {
											mailbagVO.setErrorType(MailConstantsVO.EXCEPT_FATAL);
											mailbagVO
													.setErrorDescription(MailConstantsVO.ERR_MSG_DUPLICATE_RETURN);
										}
									}
								}
								if (returnedMails != null && returnedMails.size() > 0) {
									if (isScanned) {
										exceptionMails.addAll(returnedMails);
										mailbagsToReturn.removeAll(returnedMails);
									} else {
										throw new MailbagAlreadyReturnedException(
                        new Object[]{constructMailbagErrorData(returnedMails)});
									}
								}
								return exceptionMails;
							}

							/**
							 * A-1739
							 *
							 * @param mailBags
							 * @return
							 */
							private String constructMailbagErrorData(Collection<MailbagVO> mailBags) {
								StringBuilder errMailbags = new StringBuilder();
								for (MailbagVO duplicateBag : mailBags) {
									errMailbags.append(duplicateBag.getMailbagId()).append(", ");
								}
								return errMailbags.substring(0, errMailbags.length() - 2).toString();
							}

							/**
							 * If the mailbag is not with the ownairline's then it cannot be returned
							 * Oct 10, 2006, a-1739
							 *
							 * @param mailbagsToReturn
							 * @return
							 * @throws SystemException
							 */
							private Collection<MailbagVO> validatePartnerForReturnMailBags(
									Collection<MailbagVO> mailbagsToReturn) throws SystemException {
								Collection<MailbagVO> invalidMails = new ArrayList<MailbagVO>();
								String carrierCode = null;
								MailbagVO mailBagVo = new ArrayList<MailbagVO>(mailbagsToReturn).get(0);
								log.log(Log.FINE, "The Mailbag Vo is ", mailBagVo);
								Collection<PartnerCarrierVO> partnerCarierVos = PartnerCarrier
										.findAllPartnerCarriers(mailBagVo.getCompanyCode(), mailBagVo
												.getOwnAirlineCode(), mailBagVo.getScannedPort());
								for (MailbagVO mailBag : mailbagsToReturn) {
									carrierCode = mailBag.getCarrierCode();
									//Added code by A-8527 for /IASCB-53407
									if (carrierCode!=null &&!(mailBag.getOwnAirlineCode().equals(carrierCode))
											&& !(validateCarrierCodeFromPartner(partnerCarierVos,
													carrierCode)) &&!mailBag.isGHAUser()) {
										invalidMails.add(mailBag);
									}
								}

								return invalidMails;

							}

							/**
							 * This method is used to Check whether the CarrierCode is Present in one
							 * amongst the Partners if Present return true else false A-1936
							 *
							 * @param partnerCarierVos
							 * @param carrierCode
							 * @return true, if valid carrier
							 */
							private boolean validateCarrierCodeFromPartner(
									Collection<PartnerCarrierVO> partnerCarierVos, String carrierCode) {
								boolean isValid = false;
								if (partnerCarierVos != null && partnerCarierVos.size() > 0) {
									for (PartnerCarrierVO partnerCarrierVO : partnerCarierVos) {
										log.log(Log.FINE, "The Carrier Code is ", carrierCode);
										log.log(Log.FINE, "The  Partner Carrier Code is ",
												partnerCarrierVO.getPartnerCarrierCode());
										if (carrierCode
												.equals(partnerCarrierVO.getPartnerCarrierCode())) {
											isValid = true;
											break;
										}
									}
								}
								log.log(Log.FINE, "<<<<Is PartnerPresent>>>>", isValid);
								return isValid;
							}


							/**
							 * This method saves the damaged details of a collection of mailbags A-1739
							 *
							 * @param mailbags
							 * @throws SystemException
							 */
							public void saveDamageDetailsForMailbag(Collection<MailbagVO> mailbags)
									throws SystemException {
								/*
								 *
								 * Modified By Karthick V
								 */
								if (mailbags != null && mailbags.size() > 0) {
									updateDamagedMailbags(mailbags);
								}
								Collection<MailbagVO> flightAssignedMailbagVOs = new ArrayList<MailbagVO>();
								Collection<MailbagVO> destAssignedMailbagVOs = new ArrayList<MailbagVO>();

								groupDestFlightMailbags(mailbags, flightAssignedMailbagVOs,
										destAssignedMailbagVOs);

								if (flightAssignedMailbagVOs.size() > 0) {
									log.log(Log.INFO, "<<<<Calling Save Damages For Flight >>>>>");
									new AssignedFlightSegment()
											.saveDamageDetailsForMailbags(flightAssignedMailbagVOs);
								}

								if (destAssignedMailbagVOs.size() > 0) {
									log.log(Log.INFO, "<<<<Calling Save Damages For Destination >>>>>");
									new ULDAtAirport()
											.saveDamageDetailsForMailbags(destAssignedMailbagVOs);
								}
							}

							/***************************************************************************
							 * @author A-1936 Added By Karthick V to Update all the Damaged Mail Bags..
							 * @param damagedMailBags
							 * @return
							 */
							public void updateDamagedMailbags(Collection<MailbagVO> damagedMailBags)
									throws SystemException {
								log.entering(CLASS, "updateDamagedMailbags");
								for (MailbagVO mailbagVO : damagedMailBags) {
									try {
                Mailbag mailbag = Mailbag.findMailbag(createMailbagPK(mailbagVO.getCompanyCode(), mailbagVO));
										/*
										 * Added By Karthick V as the part of the Optimistic Locking
										 *
										 *
										 */
										mailbag.setLastUpdateTime(mailbagVO.getLastUpdateTime());
										mailbag.updateDamageDetails(mailbagVO);
									} catch (FinderException exception) {
										mailbagVO.setLatestStatus(MailConstantsVO.MAIL_STATUS_NEW);
										Mailbag mailbag =	new Mailbag(mailbagVO);
										mailbagVO.setMailSequenceNumber(mailbag.getMailbagPK().getMailSequenceNumber());
										mailbag.updateDamageDetails(mailbagVO);
									}
									
									if(mailbagVO.getAttachments()!=null && !mailbagVO.getAttachments().isEmpty()){
										   uploadDocumentsToRepository(mailbagVO);
								}
								}
        MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
								mailController.flagHistoryForDamagedMailbags(damagedMailBags);
								mailController.flagAuditForDamagedMailbags(damagedMailBags);
							}

							/**
							 * A-1739
							 *
							 * @param mailbags
							 * @param destAssignedMailbagVOs
							 * @param flightAssignedMailbagVOs
							 */
							private void groupDestFlightMailbags(Collection<MailbagVO> mailbags,
									Collection<MailbagVO> flightAssignedMailbagVOs,
									Collection<MailbagVO> destAssignedMailbagVOs) {
								for (MailbagVO mailbagVO : mailbags) {
									if (mailbagVO.getFlightSequenceNumber() == MailConstantsVO.DESTN_FLT && !MailConstantsVO.MAIL_STATUS_NEW.equals(mailbagVO.getLatestStatus())) {
										destAssignedMailbagVOs.add(mailbagVO);
									} else if(!MailConstantsVO.MAIL_STATUS_NEW.equals(mailbagVO.getLatestStatus())){
										flightAssignedMailbagVOs.add(mailbagVO);
									}
								}
							}

							/**
							 * Method to do offloading of scanned mailbags
							 *
     * @param scannedMailbagsToOffload made a colln for future
							 * @return
							 * @throws SystemException
							 * @throws ReturnNotPossibleException
							 * @throws MailbagAlreadyReturnedException
							 * @throws ReassignmentException
							 * @throws FlightClosedException
						 * @throws MailBookingException
							 */
							public Collection<ScannedMailDetailsVO> offloadScannedMailbags(
									Collection<MailbagVO> scannedMailbagsToOffload)
									throws MailbagAlreadyReturnedException, ReturnNotPossibleException,
            SystemException, FlightClosedException, ReassignmentException, FlightDepartedException,
            ULDDefaultsProxyException, CapacityBookingProxyException, MailBookingException {
								log.entering(CLASS, "offloadScannedMailbags");
								Collection<ScannedMailDetailsVO> exceptionDetails = new ArrayList<ScannedMailDetailsVO>();
								Collection<MailbagVO> expMailbags = new ArrayList<MailbagVO>();
								ScannedMailDetailsVO scannedMailDetailsVO = new ScannedMailDetailsVO();
        if (scannedMailbagsToOffload != null && scannedMailbagsToOffload.size() > 0) {
									expMailbags.addAll(validateOffloadMailBags(scannedMailbagsToOffload));
									if (expMailbags != null && expMailbags.size() > 0) {
										scannedMailbagsToOffload.removeAll(expMailbags);
									}
								}
        if (scannedMailbagsToOffload != null && scannedMailbagsToOffload.size() > 0) {
            for (MailbagVO mailbagvoforoffload : scannedMailbagsToOffload) {
										OffloadVO offloadVO = updateMailbagOffloadDetails(mailbagvoforoffload);
                if (offloadVO != null) {
											Collection<ContainerDetailsVO> emptyULDs = offloadMails(offloadVO);
										}
									}
								}
								scannedMailDetailsVO.setMailDetails(expMailbags);
								exceptionDetails.add(scannedMailDetailsVO);
								log.exiting(CLASS, "offloadScannedMailbags");
								return exceptionDetails;
							}

    /**
							 * @param scannedMailbagsToOffload
							 * @return
     * @throws SystemException Validating offloaded mailbags
     * @author a-2107
							 */


							private Collection<MailbagVO> validateOffloadMailBags
    (Collection<MailbagVO> scannedMailbagsToOffload) throws SystemException {
        log.entering(CLASS, "validateOffloadMailBags");
							/**
							 * Validation 1 :- Get details from db if existing.
							 * Validation 3 :- Check Presence of Flight is Closed
							 */
							Collection<MailbagVO> exceptionMails = new ArrayList<MailbagVO>();
							for (MailbagVO clientmailbagvo : scannedMailbagsToOffload) {
								MailbagVO mailbagvofrmdb = Mailbag
										.findMailbagDetailsForUpload(clientmailbagvo);
								log.log(Log.FINE, "mailbagvofrmdb-->", mailbagvofrmdb);
            if (mailbagvofrmdb != null) {
                updateExistingMailBagVO(clientmailbagvo, mailbagvofrmdb, true);
									log.log(Log.FINE, "clientmailbagvo-->", clientmailbagvo);
                isFlightClosed(clientmailbagvo, true);
                if (MailConstantsVO.EXCEPT_FATAL.equalsIgnoreCase(clientmailbagvo.getErrorType())) {
										exceptionMails.add(clientmailbagvo);
									}
            } else {
									clientmailbagvo.setErrorType(MailConstantsVO.EXCEPT_FATAL);
									clientmailbagvo.setErrorDescription("Mail Bag does not exists");
									exceptionMails.add(clientmailbagvo);
								}
							}
        log.exiting(CLASS, "validateOffloadMailBags");
							return exceptionMails;
							}


							/**
							 * @throws SystemException
     */

    private void isFlightClosed(MailbagVO mailbagvo, boolean isoffload) throws SystemException {
								LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
														.getLogonAttributesVO();
								boolean isFlightClosed = false;
								OperationalFlightVO operationalFlightVO = new OperationalFlightVO();
						    	operationalFlightVO.setCarrierCode(mailbagvo.getCarrierCode());
						    	operationalFlightVO.setCarrierId(mailbagvo.getCarrierId());
						    	operationalFlightVO.setCompanyCode(logonAttributes.getCompanyCode());
						    	operationalFlightVO.setDirection("O");
						    	operationalFlightVO.setFlightDate(mailbagvo.getFlightDate());
						    	operationalFlightVO.setFlightNumber(mailbagvo.getFlightNumber());
						    	operationalFlightVO.setFlightSequenceNumber(mailbagvo.getFlightSequenceNumber());
						    	operationalFlightVO.setLegSerialNumber(mailbagvo.getLegSerialNumber());
						    	operationalFlightVO.setPol(logonAttributes.getAirportCode());
						    	OperationalFlightVO flightVO = 	validateAssignedFlight(operationalFlightVO);
        if (flightVO != null) {
						    		isFlightClosed = isFlightClosedForOperations(operationalFlightVO);
            if (isFlightClosed) {
						    			FlightValidationVO flightValidationVO = validateOperationalFlight(
												flightVO, true);
										if (flightValidationVO.getAtd() != null) {
											mailbagvo.setErrorType(MailConstantsVO.EXCEPT_FATAL);
											mailbagvo.setErrorDescription("Flight Departed.");
                } else {
                    if (!isoffload) {
								    			mailbagvo.setErrorType(MailConstantsVO.EXCEPT_FATAL);
								    			mailbagvo.setErrorDescription("Flight is  closed for operations.");
							    			}
							    		}
						    		}
        } else {
						    		mailbagvo.setErrorType(MailConstantsVO.EXCEPT_FATAL);
						    		mailbagvo.setErrorDescription("Flight not avaliable for mail operation.");
						    	}
							}

							/**
							 * Validates an assignedFlight
							 *
							 * @param flightVO
							 * @return the operationalflightVO
							 * @throws SystemException
							 */
							public OperationalFlightVO validateAssignedFlight(
									OperationalFlightVO flightVO) throws SystemException {
								log.entering(CLASS, "validateAssignedFlight");
								AssignedFlightPK flightPK = constructAssignedFlightPK(flightVO);
								try {
									AssignedFlight.find(flightPK);
									return flightVO;
								} catch (FinderException ex) {
									log.log(Log.FINE, "no assignedflight");
								}
								log.exiting(CLASS, "validateAssignedFlight");
								return null;
							}


							/**
							 * A-2107
     *
							 * @param mailbagsToReturn
							 * @param isScanned
     * @throws SystemException OffloadVO is constructed
							 */
							private OffloadVO updateMailbagOffloadDetails(
									MailbagVO mailbagsToOffload)
									throws SystemException {
								LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
										.getLogonAttributesVO();
        Page<MailbagVO> newMailbagVOs = new Page<MailbagVO>(new ArrayList<MailbagVO>(), 0, 0, 0, 0, 0, false);
								OffloadVO offloadVO = new OffloadVO();
								newMailbagVOs.add(mailbagsToOffload);
								offloadVO.setOffloadMailbags(newMailbagVOs);
								offloadVO.setOffloadType(MailConstantsVO.OFFLOAD_MAILBAG);
								offloadVO.setCarrierCode(mailbagsToOffload.getCarrierCode());
								offloadVO.setCompanyCode(logonAttributes.getCompanyCode());
								offloadVO.setCarrierId(mailbagsToOffload.getCarrierId());
								offloadVO.setFlightNumber(mailbagsToOffload.getFlightNumber());
								offloadVO.setFlightSequenceNumber(mailbagsToOffload.getFlightSequenceNumber());
								offloadVO.setPol(mailbagsToOffload.getPol());
								offloadVO.setLegSerialNumber(mailbagsToOffload.getLegSerialNumber());
								offloadVO.setFlightDate(mailbagsToOffload.getFlightDate());
								offloadVO.setUserCode(logonAttributes.getUserId());
								return offloadVO;

							}

							/**
							 * This method marks all the mailbags as returned. It removes their
							 * assignment and removes all flight and container details from its master
							 * data, but the mailbags are not removed from the master It also returns
							 * the ULDs which becomes empty because of the return A-1739
							 *
							 * @param mailbagsToReturn
							 * @return the empty ULDs
							 * @throws MailbagAlreadyReturnedException
							 * @throws FlightClosedException
							 * @throws SystemException
							 * @throws ReturnNotPossibleException
							 * @throws ReassignmentException
							 * @throws CapacityBookingProxyException
							 * @throws CapacityBookingProxyException
							 * @throws MailBookingException
     * @throws DuplicateMailBagsException
							 */
							public Collection<ContainerDetailsVO> returnMailbags(
									Collection<MailbagVO> mailbagsToReturn)
									throws MailbagAlreadyReturnedException, FlightClosedException,
									SystemException, ReturnNotPossibleException, ReassignmentException,
            CapacityBookingProxyException, MailBookingException, DuplicateMailBagsException {

								log.entering(CLASS, "returnMailbags");

								checkForReturnedMailbags(mailbagsToReturn, false);
								String airportCode = getLogonAirport();
								Collection<MailbagVO> flightAssignedMails = new ArrayList<MailbagVO>();
								Collection<MailbagVO> destAssignedMails = new ArrayList<MailbagVO>();
								Collection<ContainerDetailsVO> unassignSBULDs = new ArrayList<ContainerDetailsVO>();
								Collection<ContainerDetailsVO> returnEmptyULDs = new ArrayList<ContainerDetailsVO>();
								Collection<ContainerDetailsVO> emptyULDs = null;
								if (new ReassignController().isReassignableMailbags(mailbagsToReturn,
										flightAssignedMails, destAssignedMails)) {

									/*
									 * Updating Booking
									 * Here only Mail bag is considered ,
									 * so pass "NULL" to the second parameter of
									 * updateBookingFromFlight(Collection<MailbagVO> mailbagVOs, Collection<DespatchDetailsVO> despatchDetailsVOs),
									 * as it takes the despatch details.
									 */
//									updateBookingFromFlight(flightAssignedMails,null);

            try {
                emptyULDs = new ReassignController()
											.reassignMailFromFlight(flightAssignedMails);
									new ReassignController()
											.reassignMailFromDestination(destAssignedMails);
            } catch (SystemException e) {
                if (e.getError() != null && e.getError().getErrorCode().contains("NO DSN ULD FOR SEG")) {
                    throw new ReturnNotPossibleException(
                            MailTrackingBusinessException.MAILTRACKING_MAILBAGNOTAVAILABLE);
                } else {
                    throw new SystemException(e.getMessage(), e);
											}
									}

								}
								if (emptyULDs != null && emptyULDs.size() > 0) {
									for (ContainerDetailsVO containerDetailsVO : emptyULDs) {
										if (ContainerDetailsVO.FLAG_YES.equals(containerDetailsVO.getFlagPAULDResidit())) {
											unassignSBULDs.add(containerDetailsVO);
										} else {
											returnEmptyULDs.add(containerDetailsVO);
										}
									}
								}
        try {
								updateMailbagReturnDetails(airportCode, mailbagsToReturn, false);
        } catch (SystemException e) {
            if ((e.getMessage() != null && (e.getMessage().contains("No such persistent instance Mailbag with id MailbagPK ")))) {
										throw new  ReturnNotPossibleException(
												MailTrackingBusinessException.MAILTRACKING_MAILBAGNOTAVAILABLE);
            } else {
                throw new SystemException(e.getMessage(), e);
										}
								}
        //Added by A-7794 as part of ICRD-232299
        String importEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
        if (importEnabled != null && importEnabled.contains("D")) {
            Collection<RateAuditVO> rateAuditVOs = createRateAuditVOsForReturn(emptyULDs, mailbagsToReturn, MailConstantsVO.MAIL_STATUS_RETURNED);
            if (rateAuditVOs != null && !rateAuditVOs.isEmpty()) {
                try {
                    new MailOperationsMRAProxy().importMRAData(rateAuditVOs);
                } catch (ProxyException e) {
                    throw new SystemException(e.getMessage(), e);
                }
            }
        }
        // import Provisonal rate Data to malmraproratint for upront rate Calculation
		String provisionalRateimportEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRA_PROVISIONAL_RATE_IMPORT);
		if(MailConstantsVO.FLAG_YES.equals(provisionalRateimportEnabled)){
      	Collection<RateAuditVO> provisionalRateAuditVOs = new MailController().createRateAuditVOsForReturn(emptyULDs, mailbagsToReturn, MailConstantsVO.MAIL_STATUS_RETURNED);
      	if(provisionalRateAuditVOs!=null && !provisionalRateAuditVOs.isEmpty()){
        try {
        	Proxy.getInstance().get(MailOperationsMRAProxy.class).importMailProvisionalRateData(provisionalRateAuditVOs);
			} catch (ProxyException e) {      
				throw new SystemException(e.getMessage(), e);     
        }
        }
	}
        for(MailbagVO mailbagVO:mailbagsToReturn){
        if(mailbagVO.getAttachments()!=null && !mailbagVO.getAttachments().isEmpty()){
			   uploadDocumentsToRepository(mailbagVO);
			   }
        }
								unassignEmptyULDs(unassignSBULDs);

								if (unassignSBULDs != null && unassignSBULDs.size() > 0) {
            MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
									mailController.flagReturnedResditForULDs(unassignSBULDs);
									/*String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
									if(MailConstantsVO.FLAG_YES .equals(resditEnabled)){
										log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
									new ResditController().flagReturnedResditForULDs(unassignSBULDs);
								}*/
								}

								log.exiting(CLASS, "returnMailbags");
								return returnEmptyULDs;
							}


							/**
     * @param flightFilterVO
     * @return
     * @throws SystemException
							 * @author a-5160 This method is used to
							 *         validate the FlightForMail
							 */
							public Collection<FlightValidationVO> validateMailFlight(
									FlightFilterVO flightFilterVO) throws SystemException {
								log.entering(CLASS, "validateFlight");

								return AssignedFlight.validateMailFlight(flightFilterVO);
							 }

							/**
     * @param operationalFlightVO
     * @return MailAcceptanceVO
     * @throws SystemException
							 * @author A-2037 The method is used to find the mail acceptance details.
							 */
							public MailAcceptanceVO findFlightAcceptanceDetails(
									OperationalFlightVO operationalFlightVO) throws SystemException {
								log.entering(CLASS, "findMailbags");

								MailAcceptanceVO mailAcceptanceVO = MailAcceptance
										.findFlightAcceptanceDetails(operationalFlightVO);

								/*
								 * Added by RENO K ABRAHAM
								 * for CR : AirNZ865 on 11 August 2008
								 * This CR is to check, whether any
								 * mailbag or despatch is not associated with an onward routing info.
								 * This is implemented to cooperate with MRA module.
								 * START
								 */
								log.log(Log.FINE, "checkRoutingsForMails");
								int legSerialNumber = 0;
        if (mailAcceptanceVO.getContainerDetails() != null && mailAcceptanceVO.getContainerDetails().size() > 0) {
            for (ContainerDetailsVO containerDetailsVO : mailAcceptanceVO.getContainerDetails()) {
										// Added by A-5153 for BUG_ICRD-90623
                if (MailConstantsVO.FLIGHT_STATUS_TBA.equals(operationalFlightVO.getFlightStatus())) {
											legSerialNumber = containerDetailsVO.getLegSerialNumber();
										}
                if (containerDetailsVO.getDsnVOs() != null && containerDetailsVO.getDsnVOs().size() > 0) {
                    for (DSNVO dSNVO : containerDetailsVO.getDsnVOs()) {
                        String type = "";
                        if (dSNVO != null) {
												dSNVO.setContainerType(containerDetailsVO.getContainerType());
                            if (MailConstantsVO.BULK_TYPE.equals(dSNVO.getContainerType())) {
													dSNVO.setContainerNumber(
															constructBulkULDNumber(
																	containerDetailsVO.getPou(),
																	containerDetailsVO.getCarrierCode()));
                            } else {
													dSNVO.setContainerNumber(containerDetailsVO.getContainerNumber());
												}
                            if (MailConstantsVO.FLAG_YES.equals(dSNVO.getPltEnableFlag())) {
                                type = "MAILBAG";
                            } else if ((MailConstantsVO.FLAG_NO.equals(dSNVO.getPltEnableFlag()))
                                    && (MailConstantsVO.ULD_TYPE.equals(dSNVO.getContainerType()))) {
                                type = "DESPATCH_IN_ULD";
                            } else if ((MailConstantsVO.FLAG_NO.equals(dSNVO.getPltEnableFlag()))
                                    && (MailConstantsVO.BULK_TYPE.equals(dSNVO.getContainerType()))) {
                                type = "DESPATCH_IN_AXP_BULK";
                            }
                            if (operationalFlightVO != null && dSNVO != null && type.trim().length() > 0) {
								/*					if(AssignedFlight.checkRoutingsForMails(operationalFlightVO,dSNVO,type)){
														dSNVO.setRoutingAvl(MailConstantsVO.FLAG_YES);
													}else{
														dSNVO.setRoutingAvl(MailConstantsVO.FLAG_NO);
													}*/
													dSNVO.setRoutingAvl(MailConstantsVO.FLAG_YES);
													dSNVO.setContainerNumber(null);
													dSNVO.setContainerType(null);
												}
											 }
											}
										}
									}
								}
								// Added by A-5153 for BUG_ICRD-90543
        if (legSerialNumber > 0) {
									operationalFlightVO.setLegSerialNumber(legSerialNumber);
									mailAcceptanceVO.setLegSerialNumber(legSerialNumber);
								}

								try {
									AssignedFlight assignedFlight = AssignedFlight
											.find(constructAssignedFlightPK(operationalFlightVO));
									mailAcceptanceVO.setFlightStatus(assignedFlight.getExportClosingFlag());
								} catch (FinderException exception) {
            if (mailAcceptanceVO.getContainerDetails() != null && mailAcceptanceVO.getContainerDetails().size() > 0) {
                ContainerDetailsVO containerDetailsVO = mailAcceptanceVO.getContainerDetails().iterator().next();
										operationalFlightVO.setLegSerialNumber(containerDetailsVO.getLegSerialNumber());

										try {
											AssignedFlight	assignedFlight = AssignedFlight
											.find(constructAssignedFlightPK(operationalFlightVO));
											mailAcceptanceVO.setFlightStatus(assignedFlight.getExportClosingFlag());
										} catch (FinderException e) {
											//actually not accepted
										}

									}
								}
								return mailAcceptanceVO;
							}

		/**
		 * THis method is used to get the warehouse details for the accept mail
		 *
		 * @param companyCode
		 * @param airportCode
		 * @param warehouseCode
		 * @param transactionCodes
		 * @return
		 * @throws SystemException
		 */
		public Map<String, Collection<String>> findWarehouseTransactionLocations(
				LocationEnquiryFilterVO filterVO) throws SystemException {
			log.entering(CLASS, "findWarehouseTransactionLocations");
			return MailAcceptance.findWarehouseTransactionLocations(filterVO
					.getCompanyCode(), filterVO.getAirportCode(), filterVO
					.getWarehouseCode(), filterVO.getTransactionCodes());
		}


		/**
     * @param companyCode
     * @param airportCode
     * @return
     * @throws SystemException
		 * @author a-1936 This method is used to find all the WareHouses for the
		 *         Given Airport
		 */
		public Collection<WarehouseVO> findAllWarehouses(String companyCode,
				String airportCode) throws SystemException {

			return MailAcceptance.findAllWarehouses(companyCode, airportCode);
		}

		/**
		 * Need 2 checks: call the findContainerAssignment to retrieve the
		 * ContainerAssignmentDetails if 1.ContainerAssignmentVo is null (i.e)
		 * Container is not already Assigned to a Flight or Carrier/Destination we
		 * can allow the Container For new Assignments
     * <p>
		 * else
     * <p>
		 * 1.If Flight Assigned Option : Find FlightSegments. From that find segment
		 * details for the POL-POU of the container. If current flight details and
		 * DB details are same, throw exception saying assigned to same flight. IF
		 * currently assigned to a carrier , Throw exception , Show message for
		 * Reassign. IF currently assigned to another flight, check the staus of
		 * that flight. 1. If it is open throw Exception saying that it can be
		 * reassigned.Warning mesasage shown in the client. else if (i).closed and
		 * departed(Take the Leg status from Flight Validation VO returned from
		 * FlightProduct) check if currentDate>=flightDeparture and currentDate <=
		 * flightDeparture+configuredPeriod(SystemParameters) else throw
		 * exception(Client shows a Warning asking for a new Ass)
     * <p>
		 * (ii).if closed and not departed then check if
		 * currentdate>=flightdeparture-configured and currentDate<=flightDeparture
		 * else throw exception (check ValidateFlightForStatus method)
     * <p>
		 * If Destn Assigned Option is selected: IF currently assigned to a carrier ,
		 * Throw exception If currently assigned to the Flight 1. If it is open
		 * throw Exception saying that it can be reassigned.Warning mesasage shown
		 * in the client. else if (i).closed and departed(Take the Leg status from
		 * Flight Validation VO returned from ValidateFlight) check if
		 * currentDate>=flightDeparture and currentDate <=
		 * flightDeparture+configuredPeriod(SystemParameters) else throw exception
     * <p>
		 * (ii).if closed and not departed then check if
		 * currentdate>=flightdeparture-configured and currentDate<=flightDeparture
		 * else throw exception (check ValidateFlightForStatus method)
     * <p>
     * <p>
     * <p>
		 * 2.If the ULD final destination does not match with the last POU in onward
		 * flight routing then throw exception
     * <p>
		 * ************** Changed: Validate all ULDs with OPRULDDTL
		 * ******************* Validate all the Bulk Containers with above
		 * validation
		 *
		 * @param containerVO
		 * @return
		 * @throws SystemException
		 * @throws ContainerAssignmentException
		 * @throws ULDDefaultsProxyException
		 */
		public ContainerVO validateContainer(String airportCode, ContainerVO containerVO)
				throws SystemException, ContainerAssignmentException,
				ULDDefaultsProxyException {
			log.entering(CLASS, "validateContainer");
			FlightDetailsVO flightDetails = null;
			Collection<ULDInFlightVO> uldInFlightVos = null;
			ULDInFlightVO uldInFlightVo = null;
			if (CONTAINER_ASSIGNEDFORFLIGHT.equals(containerVO.getAssignmentFlag())) {
            log.log(Log.FINEST, "Container is Requested For Flight*------>>>>>>>");
            log.log(Log.FINEST, "-------Trying to assign the Container to the Flight----");
				try {
					containerVO.setSegmentSerialNumber(findContainerSegment(containerVO));
					throw new ContainerAssignmentException(
							ContainerAssignmentException.INVALID_FLIGHT_SEGMENT);
				}catch (Exception exception) {
                    log.log(Log.FINE, "Exception in MailController at initiateArrivalForFlights for Offline *Flight* ");
				}
			}

			if (MailConstantsVO.ULD_TYPE.equals(containerVO.getType())) {

					validateContainerAssignment(airportCode, containerVO);
					validateContainerReusability(containerVO);

			



} else if (MailConstantsVO.BULK_TYPE.equals(containerVO.getType())) {
				validateContainerAssignment(airportCode, containerVO);
			}

			if (!containerVO.isOverrideUMSFlag() && isULDIntegrationEnabled()) {

				if (containerVO.getContainerNumber().length() > 0) {
					boolean isULDType = false;
					isULDType = MailConstantsVO.ULD_TYPE.equals(containerVO.getType());
//					Collection<String> uldTypes = new ArrayList<String>();
//					if(containerVO.getContainerNumber().trim().length()>=3) {
//						uldTypes.add(containerVO.getContainerNumber().substring(0, 3));
//						ULDValidationVO uldValidationVO=null;
//						try {
//							uldValidationVO = new SharedULDProxy().validateULD(containerVO
//									.getCompanyCode(), containerVO.getContainerNumber());
//							if(uldValidationVO!=null) {
//								isULDType = true;
//							}else {
//								isULDType = false;
//							}
//						} catch (SharedProxyException e) {
//							isULDType = false;
//						}
//					}
					if (isULDType) {
						flightDetails = new FlightDetailsVO();
						flightDetails.setCompanyCode(containerVO.getCompanyCode());
						flightDetails.setCurrentAirport(containerVO
								.getAssignedPort());
						if (containerVO.getFlightSequenceNumber() > 0) {
							flightDetails.setFlightNumber(containerVO
									.getFlightNumber());
							flightDetails.setFlightSequenceNumber(containerVO
									.getFlightSequenceNumber());
							flightDetails.setFlightCarrierIdentifier(containerVO
									.getCarrierId());
						}
						uldInFlightVos = new ArrayList<ULDInFlightVO>();
						uldInFlightVo = new ULDInFlightVO();
						uldInFlightVo
								.setUldNumber(containerVO.getContainerNumber());
						uldInFlightVo.setPointOfLading(containerVO
								.getAssignedPort());
						uldInFlightVos.add(uldInFlightVo);
						flightDetails.setUldInFlightVOs(uldInFlightVos);
						log.log(Log.FINE, "THE Flight Details Vos ", flightDetails);
                    Collection<String> uldNumbers = new ArrayList<String>();
						uldNumbers.add(containerVO.getContainerNumber());
//						new ULDDefaultsProxy()
//								.validateULDs(flightDetails.getCompanyCode(),flightDetails.getCurrentAirport(),uldNumbers);
						new ULDDefaultsProxy().validateULDsForOperation(flightDetails);
					}
				}
			}

			/*
			 * if
			 * (CONTAINER_ASSIGNEDFORFLIGHT.equals(containerVO.getAssignmentFlag()) &&
			 * CONTAINER_TYPE_ULD.equals(containerVO.getType())) { log.log(Log.INFO,
			 * "validateUldFinalDestination");
			 * validateUldOnwardRouting(containerVO); }
			 */
			return containerVO;
		}

		private void validateContainerAssignment(String airportCode, ContainerVO containerVO)
				throws SystemException, ContainerAssignmentException {
					log.entering(CLASS, "validateContainerAssignment");
					ContainerAssignmentVO latestContainerAssignmentVO = findLatestContainerAssignment(containerVO.getContainerNumber());
					/*
					 *  % latestContainerAssignmentVO != null  >> This contianer info is available in the Mail System
					 *  % latestContainerAssignmentVO == null >> This conta	iner is new to the Mail System
					 *
					 *   ^ latestContainerAssignmentVO >> This VO will contain the latest Assignment details
					 *   of the container irrespective of the port.
					 */
        if (latestContainerAssignmentVO != null) {
            if ((airportCode.equals(latestContainerAssignmentVO.getAirportCode()) &&
								MailConstantsVO.FLAG_NO.equals(latestContainerAssignmentVO.getReleasedFlag())) ||
                    (airportCode.equals(latestContainerAssignmentVO.getAirportCode()) &&
										MailConstantsVO.DESTN_FLT == latestContainerAssignmentVO.getFlightSequenceNumber() &&
										String.valueOf(MailConstantsVO.DESTN_FLT).equals(latestContainerAssignmentVO.getFlightNumber())) ||
										(MailConstantsVO.BULK_TYPE.equals(containerVO.getType())) ||
                    (airportCode.equals(latestContainerAssignmentVO.getAirportCode()) &&
												MailConstantsVO.BULK_TYPE.equals(latestContainerAssignmentVO.getContainerType()) &&
                            MailConstantsVO.FLAG_YES.equals(latestContainerAssignmentVO.getTransitFlag()))) {
							//If the container is now present in this port, proceed further.
							ContainerAssignmentVO containerAssignmentVO = findContainerAssignment(containerVO);
							if (containerAssignmentVO != null) {
								if (containerAssignmentVO.getFlightSequenceNumber() > 0) {
									/*
									 * Current assignemnt to flight
									 */

										validateContainerForFlight(containerAssignmentVO, containerVO);

								} else {
									/*
									 * CUrrent assignet to destiatnion
									 */
									if (CONTAINER_ASSIGNEDFORFLIGHT.equals(containerVO.getAssignmentFlag())) {
										/*
										 * New asignment to flight..no prob..if the destination is same.
										 */
                            if (containerVO.getFinalDestination().equalsIgnoreCase(containerAssignmentVO.getDestination())) {
											throw new ContainerAssignmentException(
													ContainerAssignmentException.CARRIER_CONTAINER_REASSIGN,

                                        new Object[]{
															containerAssignmentVO.getContainerNumber(),
															containerAssignmentVO.getCarrierCode(),
                                                containerAssignmentVO});
                            } else {
											/*
											 * Assigned to another Destination.
											 */
											throw new ContainerAssignmentException(
													ContainerAssignmentException.FINALDESTINATION_POU_INVALID);
										}
									} else {
										/*
										 * New assignemnt to another destination..not allowed..
										 */
										throw new ContainerAssignmentException(
												ContainerAssignmentException.CARRIER_ALREADY_ASSIGNED);
									}
								}
                } else {
                    if (MailConstantsVO.BULK_TYPE.equals(containerVO.getType())) {
                        if (latestContainerAssignmentVO.getFlightSequenceNumber() > 0 &&
											MailConstantsVO.ULD_TYPE.equals(latestContainerAssignmentVO.getContainerType()) &&
                                MailConstantsVO.FLAG_NO.equals(latestContainerAssignmentVO.getReleasedFlag())) {
										/*
										 * The arrived flight is not Closed for Inbound Operations.
										 * So the ULD cannot be reused
										 */
										throw new ContainerAssignmentException(
												ContainerAssignmentException.ULD_NOT_RELEASED_FROM_INB_FLIGHT,
                                    new Object[]{
														latestContainerAssignmentVO.getCarrierCode(),
														latestContainerAssignmentVO.getFlightNumber(),
														latestContainerAssignmentVO.getFlightDate() != null ?
														latestContainerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat() : " ",
														latestContainerAssignmentVO.getAirportCode(),
														containerVO.getFlightNumber(),
														latestContainerAssignmentVO});


									}
								}
							}
            } else {
							/*
							 * This case occurs when :
							 * 1. Container is in the Mail System, but currently
							 * 	  this is not available in the current port
							 * 2. Container can be in different port, but this cotainer
							 *    is bound to be released from the arrived flight
							 */
							if (latestContainerAssignmentVO.getFlightSequenceNumber() > 0) {
								//Modified by as part of bug ICRD-141447 by A-5526 starts
                    if (MailConstantsVO.FLAG_YES.equals(latestContainerAssignmentVO.getReleasedFlag()) || MailConstantsVO.FLAG_NO.equals(latestContainerAssignmentVO.getTransitFlag())) {
									// NO EXCEPTION NEEDS TO BE THROWN, AS THE DUMMY MOVEMENT SHOULD HAPPEN HERE
                    } else { 
								/*
									 * Container is in current airport and
									 * the arrived flight is not Closed for Inbound Operations.
									 * So the ULD cannot be reused
									 */
                        if (MailConstantsVO.ULD_TYPE.equals(latestContainerAssignmentVO.getContainerType())) {
                        	 if(MailConstantsVO.FLIGHT_STATUS_OPEN.equals(latestContainerAssignmentVO.getFlightStatus())){
										throw new ContainerAssignmentException(
											ContainerAssignmentException.ULD_NOT_RELEASED_FROM_INB_FLIGHT,
                                    new Object[]{
													latestContainerAssignmentVO.getCarrierCode(),
													latestContainerAssignmentVO.getFlightNumber(),
													latestContainerAssignmentVO.getFlightDate() != null ?
													latestContainerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat() : " ",
													latestContainerAssignmentVO.getAirportCode(),
													containerVO.getFlightNumber(),
													latestContainerAssignmentVO});
											}
                        	 else { 
										throw new ContainerAssignmentException(
											ContainerAssignmentException.ULD_NOT_RELEASED_FROM_INB_FLIGHT,
                                    new Object[]{
													latestContainerAssignmentVO.getCarrierCode(),
													latestContainerAssignmentVO.getFlightNumber(),
													latestContainerAssignmentVO.getFlightDate() != null ?
													latestContainerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat() : " ",
													latestContainerAssignmentVO.getPou(),
													containerVO.getFlightNumber(),
													latestContainerAssignmentVO});
									}
								}
								}
                } else {
								/*
								 * Container is not in current airport.
								 * Assigned to a carrier at another port
								 */
                	// To check reusaility of empty container IASCB-70298
                	boolean canReuseContainer = false;
                	if(MailConstantsVO.DESTN_FLT_STR.equals(latestContainerAssignmentVO.getFlightNumber()) &&
                			MailConstantsVO.ULD_TYPE.equals(containerVO.getType())) {
        				canReuseContainer = canReuseEmptyContainer(latestContainerAssignmentVO);
        			}
        			if(canReuseContainer) {
        				if(containerVO.isDeleteEmptyContainer()) {
        					deleteCarrierEmptyContainer(latestContainerAssignmentVO);
        				}
        				return;
        			}
								throw new ContainerAssignmentException(
										ContainerAssignmentException.ULD_ALREADY_IN_USE_AT_ANOTHER_PORT,
                            new Object[]{latestContainerAssignmentVO.getAirportCode()});

							}
						}
					}
					log.exiting(CLASS, "validateContainerAssignment");
				}

		

		/**
		 * @param containerAssignmentVO
		 * @param containerVO
		 * @return
		 * @throws SystemException
		 * @throws ContainerAssignmentException
     * @author a-1936 This method is used to check whether the Container already
     * assigned to a Fight and we are trying to assign currently are
     * same if same throw exception else return true for other
     * validations like the status of the Flight to be checked.
		 */
		private void validateContainerForFlight(
				ContainerAssignmentVO containerAssignmentVO, ContainerVO containerVO)
				throws SystemException, ContainerAssignmentException {
			log.entering(CLASS, "validateFlightForContainer");

			if (CONTAINER_ASSIGNEDFORFLIGHT.equals(containerVO.getAssignmentFlag())) {
				/*
				 * New assignment to flight
				 */
				if (containerAssignmentVO.getFlightNumber().equals(containerVO.getFlightNumber()) &&
						containerAssignmentVO.getFlightSequenceNumber() == containerVO.getFlightSequenceNumber() &&
						containerAssignmentVO.getCarrierId() == containerVO.getCarrierId() &&
						containerAssignmentVO.getSegmentSerialNumber() == containerVO.getSegmentSerialNumber()) {
					/*
					 * Same flight....exception
					 */
                log.log(Log.FINEST, "The Container is already assigned to the Same Flight");
                log.log(Log.FINEST, "Container Assigned to SameFlightException is Thrown");

                //Added by A-7540 for ICRD-307735

                if (containerAssignmentVO.getContainerNumber().equalsIgnoreCase(containerVO.getContainerNumber()) &&
                        containerAssignmentVO.getContainerType().equalsIgnoreCase(containerVO.getType())) {

					throw new ContainerAssignmentException(
							ContainerAssignmentException.ALREADY_ASSIGNED_TOSAMEFLIGHT);
                } else {
                    throw new ContainerAssignmentException(
                            ContainerAssignmentException.DIFF_CONTAINER_TYPE);
                }
            } else {
                if (MailConstantsVO.BULK_TYPE.equals(containerVO.getType())) {
                    if (MailConstantsVO.FLAG_YES.equalsIgnoreCase(containerAssignmentVO.getTransitFlag())) {
//							throw new ContainerAssignmentException(
//									ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,
//									new String[] { new StringBuilder()
//									.append(containerAssignmentVO.getCarrierCode()).append(SPACE)
//									.append(containerAssignmentVO.getFlightNumber()).append(SPACE)
//									.append(containerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat()).toString() });

							throw new ContainerAssignmentException(
									ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,
                                new Object[]{new StringBuilder().append(
											containerAssignmentVO.getCarrierCode()).append(" ").append(
												containerAssignmentVO.getFlightNumber()).append(" ")
												.append(containerAssignmentVO.getFlightDate() != null ?
													containerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat() : " ")
													.toString(),
                                        containerAssignmentVO});
						}
                } else {
//						throw new ContainerAssignmentException(
//								ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,
//								new String[] { new StringBuilder()
//								.append(containerAssignmentVO.getCarrierCode()).append(SPACE)
//								.append(containerAssignmentVO.getFlightNumber()).append(SPACE)
//								.append(containerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat()).toString() });

						throw new ContainerAssignmentException(
								ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,
                            new Object[]{new StringBuilder().append(
										containerAssignmentVO.getCarrierCode()).append(" ").append(
											containerAssignmentVO.getFlightNumber()).append(" ")
											.append(containerAssignmentVO.getFlightDate() != null ?
												containerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat() : " ")
												.toString(),
                                    containerAssignmentVO});
					}
				}
        } else {
            if (MailConstantsVO.BULK_TYPE.equals(containerVO.getType())) {
                if (MailConstantsVO.FLAG_YES.equalsIgnoreCase(containerAssignmentVO.getTransitFlag())) {
//						throw new ContainerAssignmentException(
//								ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,
//								new String[] { new StringBuilder()
//								.append(containerAssignmentVO.getCarrierCode()).append(SPACE)
//								.append(containerAssignmentVO.getFlightNumber()).append(SPACE)
//								.append(containerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat()).toString() });

						throw new ContainerAssignmentException(
								ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,
                            new Object[]{new StringBuilder().append(
										containerAssignmentVO.getCarrierCode()).append(" ").append(
											containerAssignmentVO.getFlightNumber()).append(" ")
											.append(containerAssignmentVO.getFlightDate() != null ?
												containerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat() : " ")
												.toString(),
                                    containerAssignmentVO});
					}
            } else {
//					throw new ContainerAssignmentException(
//							ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,
//							new String[] { new StringBuilder()
//							.append(containerAssignmentVO.getCarrierCode()).append(SPACE)
//							.append(containerAssignmentVO.getFlightNumber()).append(SPACE)
//							.append(containerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat()).toString() });

					throw new ContainerAssignmentException(
							ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,
                        new Object[]{new StringBuilder().append(
									containerAssignmentVO.getCarrierCode()).append(" ").append(
										containerAssignmentVO.getFlightNumber()).append(" ")
										.append(containerAssignmentVO.getFlightDate() != null ?
											containerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat() : " ")
											.toString(),
                                containerAssignmentVO});
				}
				/*
				 * New Destination..no prob..going for Open Flight checks...
					validateFlightStatus(containerAssignmentVO, containerVO.getAssignedPort());
				 */
			}
		}

    /**
     * @param containerVO
     * @throws SystemException
     * @throws ContainerAssignmentException
     * @throws InvalidFlightSegmentException
		 * @author a-1936 This method is used to validate the container if intended
		 *         For Flight
		 */
		private int findContainerSegment(ContainerVO containerVO)
				throws SystemException, InvalidFlightSegmentException {
			Collection<FlightSegmentSummaryVO> segmentSummaryVos = null;
			int segmentSerialNumber = 0;
			String pol = containerVO.getAssignedPort();
			String pou = containerVO.getPou();
			log.log(Log.INFO, "Validate the Container For the Flight");

			segmentSummaryVos = new FlightOperationsProxy().findFlightSegments(
					containerVO.getCompanyCode(), containerVO.getCarrierId(),
					containerVO.getFlightNumber(), (int) containerVO
							.getFlightSequenceNumber());
			log.log(Log.INFO, "segmentSummaryVos", segmentSummaryVos);
			log.log(Log.INFO, "pol = ", pol, "pou = ", pou);
			if (segmentSummaryVos != null && segmentSummaryVos.size() > 0) {
				for (FlightSegmentSummaryVO segmentVo : segmentSummaryVos) {
					if (segmentVo.getSegmentOrigin() != null
							&& segmentVo.getSegmentDestination() != null) {
						if (segmentVo.getSegmentOrigin().equals(pol)
								&& segmentVo.getSegmentDestination().equals(pou)) {
							segmentSerialNumber = segmentVo
									.getSegmentSerialNumber();
							log.log(Log.FINE, "THE POL IS", pol);
							log.log(Log.FINE, "THE POU IS", pou);
							log.log(Log.FINE, "THE SEGSERNUM FOR THE POL-POU",
									segmentSerialNumber);
							break;
						}
					}
				}
			}

			if (segmentSerialNumber == 0) {
				throw new InvalidFlightSegmentException(
                    new String[]{new StringBuilder().append(pou).append("-")
                            .append(pol).toString()});
			}
			return segmentSerialNumber;
		}

    /**
     * @param companyCode
     * @param code
     * @param description
     * @param pageNumber
     * @return
     * @throws SystemException
		 * @author A-2037 Method for OfficeOfExchangeLOV containing code and
		 *         description
		 */
		public Page<OfficeOfExchangeVO> findOfficeOfExchangeLov(OfficeOfExchangeVO officeofExchangeVO, int pageNumber, int defaultSize)
				throws SystemException {
			log.entering(CLASS, "findOfficeOfExchangeLov");
			return OfficeOfExchange.findOfficeOfExchangeLov(officeofExchangeVO, pageNumber, defaultSize);
		}

		/**
     * @param companyCode
     * @param code
     * @param description
     * @param pageNumber
     * @return
     * @throws SystemException
		 * @author A-2037 Method for MailSubClassLOV containing code and description
		 */
		public Page<MailSubClassVO> findMailSubClassCodeLov(String companyCode,
                                                        String code, String description, int pageNumber, int defaultSize)
				throws SystemException {
			log.entering(CLASS, "findMailSubClassCodeLov");
			return MailSubClass.findMailSubClassCodeLov(companyCode, code,
                description, pageNumber, defaultSize);

		}

		/**
		 * @param companyCode
		 * @param paCode
		 * @return PostalAdministrationVO
		 * @throws SystemException
     * @author A-2037 This method is used to find Postal Administration Code
     * Details
		 */
		public PostalAdministrationVO findPACode(String companyCode, String paCode)
				throws SystemException {
			log.entering(CLASS, "findPACode");
    			CacheFactory factory = CacheFactory.getInstance();
    			PostalAdministrationCache cache = factory
    				.getCache(PostalAdministrationCache.ENTITY_NAME);
    			return cache.findPACode(companyCode,paCode);
		}

		/**
		 * This method is used to validate the Location A-1739
		 *
		 * @param companyCode
		 * @param airportCode
		 * @param warehouseCode
		 * @param locationCode
		 * @return the locationvalidationVO
		 * @throws SystemException
		 */
		public LocationValidationVO validateLocation(String companyCode,
				String airportCode, String warehouseCode, String locationCode)
				throws SystemException {
			log.entering(CLASS, "validateLocation");
			return MailAcceptance.validateLocation(companyCode, airportCode,
					warehouseCode, locationCode);
		}

    /**
	 	    * @param companyCode
	 	    * @param despatchDetailsVOs
	 	    * @return
	 	    * @throws SystemException
     * @author A-3227  - FEB 10, 2009
     */
    public Collection<DespatchDetailsVO> validateConsignmentDetails(String companyCode, Collection<DespatchDetailsVO> despatchDetailsVOs)
            throws SystemException {
			   log.entering(CLASS, "validateConsignmentDetails");
        return new DocumentController().validateConsignmentDetails(companyCode, despatchDetailsVOs);
    }

	 		/**
	 		 * This method is used to validate the DSNs say DOE,OOE A-1936
	 		 *
	 		 * @param dsnVos
	 		 * @return true if all dsns are valid
	 		 * @throws SystemException
	 		 * @throws InvalidMailTagFormatException
	 		 */
	 		public boolean validateDSNs(Collection<DSNVO> dsnVos)
	 				throws SystemException, InvalidMailTagFormatException {
	 			log.entering(CLASS, "validateDSNs");

	 			HashMap<String, Collection<String>> hashMap = null;
	 			Map<String, Map<String, CityVO>> cityMaps = new HashMap<String, Map<String, CityVO>>();
	 			String originOfficeExchange = null;
	 			String destinationOfficeExchange = null;
	 			Log logger = LogFactory.getLogger("MailTrackingDefaults");
	 			if (dsnVos != null && dsnVos.size() > 0) {
	 				for (DSNVO dsnVo : dsnVos) {
	 					logger.log(Log.FINE,
	 							"The Operational Flag is " + dsnVo.getOperationFlag());
	 					if (DSNVO.OPERATION_FLAG_INSERT
	 							.equals(dsnVo.getOperationFlag())) {
	 						if (hashMap == null) {
	 							hashMap = new HashMap<String, Collection<String>>();
	 							hashMap.put(COUNTRY_CACHE, new ArrayList<String>());
	 							hashMap.put(CITY_CACHE, new ArrayList<String>());
	 							hashMap.put(EXCHANGE_CACHE, new ArrayList<String>());
	 							hashMap.put(SUBCLS_CACHE, new ArrayList<String>());
	 							hashMap.put(ERROR_CACHE, new ArrayList<String>());
	 							hashMap.put(CITYPAIR_CACHE, new ArrayList<String>());
	 						}
	 						originOfficeExchange = dsnVo.getOriginExchangeOffice();
	 						destinationOfficeExchange = dsnVo
	 								.getDestinationExchangeOffice();
	 						logger.log(Log.FINE, "THE OOE IS " + originOfficeExchange);
	 						logger.log(Log.FINE, "THE DOE IS "
	 								+ destinationOfficeExchange);

	 						if (originOfficeExchange != null
	 								&& !hashMap.get(EXCHANGE_CACHE).contains(
	 										originOfficeExchange)) {
	 							logger.log(Log.INFO, "A valid OOE is not there in Map");
	 							new Mailbag().validateOfficeExchange(
	 									dsnVo.getCompanyCode(), originOfficeExchange,
	 									hashMap, cityMaps, true);
	 						}

	 						if (destinationOfficeExchange != null
	 								&& !hashMap.get(EXCHANGE_CACHE).contains(
	 										destinationOfficeExchange)) {
	 							logger.log(Log.INFO, "A valid DOE is not there in Map");
	 							new Mailbag().validateOfficeExchange(
	 									dsnVo.getCompanyCode(),
	 									destinationOfficeExchange, hashMap, cityMaps,
	 									false);
	 						}

	 						String mailSubClass = dsnVo.getMailSubclass();
	 						if (mailSubClass != null
	 								&& !mailSubClass
	 										.contains(MailConstantsVO.DUMMY_SUBCLS)) {
	 							validateSubClass(dsnVo.getCompanyCode(), mailSubClass,
	 									hashMap);
	 						}

	 						if (!(hashMap.get(ERROR_CACHE).size() == 0)) {
	 							String str = createErrorsForDSN(dsnVo,
	 									hashMap.get(ERROR_CACHE));
	 							throw new InvalidMailTagFormatException(
	 									InvalidMailTagFormatException.INVALID_MAILFORMAT,
                                new Object[]{str});

	 						}
	 					}
	 				}
	 			}
	 			return true;

	 		}

    /**
	 		 * @param dsnVo
	 		 * @param errors
	 		 * @return
	 		 * @throws SystemException
     * @author a-1936 This method is used to collect the erros in case of
     * Validation of DSNs
	 		 */
	 		private String createErrorsForDSN(DSNVO dsnVo, Collection<String> errors) throws SystemException {
	 			log.entering("INSIDE THE CREATE ERRORS", "createErrors");
	 			StringBuilder builder = null;
	 			String error = "";
	 			HashMap<String, String> cityOEMap = null;
	 			Collection<String> officeOfExchanges = new ArrayList<String>();
	 			String cityOrigin = null;
	 			String cityDestination = null;
        if (!officeOfExchanges.contains(dsnVo.getOriginExchangeOffice())) {
	 				officeOfExchanges.add(dsnVo.getOriginExchangeOffice());
	 			}
        if (!officeOfExchanges.contains(dsnVo.getDestinationExchangeOffice())) {
	 				officeOfExchanges.add(dsnVo.getDestinationExchangeOffice());
	 			}
        cityOEMap = new MailController().findCityForOfficeOfExchange(dsnVo.getCompanyCode(), officeOfExchanges);
	 			String countryOrigin = dsnVo.getOriginExchangeOffice().substring(0, 2);
        String countryDestination = null;
        if (dsnVo.getDestinationExchangeOffice() != null) {
            countryDestination = dsnVo.getDestinationExchangeOffice().substring(0, 2);
        }
        if (cityOEMap != null && cityOEMap.size() > 0) {
	 				cityOrigin = cityOEMap.get(dsnVo.getOriginExchangeOffice());
	 				cityDestination = cityOEMap.get(dsnVo.getDestinationExchangeOffice());
	 			}
	 			if (errors != null && errors.size() > 0) {
	 				builder = new StringBuilder();
	 				for (String str : errors) {
	 					if (str.equals(CITY_ORIGIN)) {
	 						builder.append("City Code ").append(cityOrigin)
	 								.append("\n");
	 					} else if (str.equals(CITY_DESTINATION)) {
	 						builder.append("City Code ").append(cityDestination)
	 								.append("\n");
	 					} else if (str.equals(COUNTRY_ORIGIN)) {
	 						builder.append("Country Code ").append(countryOrigin)
	 								.append("\n");
	 					} else if (str.equals(COUNTRY_DESTINATION)) {
	 						builder.append("Country Code ").append(countryDestination)
	 								.append("\n");
	 					} else if (str.equals(ORIGINEXCHANGE)) {
	 						builder.append(ORIGINEXCHANGE).append(" ").append(
	 								dsnVo.getOriginExchangeOffice()).append("\n");
	 					} else if (str.equals(DESTINATIONEXCHANGE)) {
	 						builder.append(DESTINATIONEXCHANGE).append(" ").append(
	 								dsnVo.getDestinationExchangeOffice()).append("\n");
	 					} else if (str.equals(PAIR_ORIGIN)) {
	 						builder.append("City-Country Pair").append(" ").append(
	 								dsnVo.getOriginExchangeOffice()).append("\n");
	 					} else if (str.equals(PAIR_DESTINATION)) {
	 						builder.append("City-Country Pair").append(" ").append(
	 								dsnVo.getDestinationExchangeOffice()).append("\n");
                } else if (str.equals(SUBCLS_CACHE)) {
                    builder.append(SUBCLS_CACHE).append(" ").append(dsnVo.getMailSubclass()).append("\n");
	 			       }
	 				}
	 				error = builder.append(" is invalid ").append(" for ").append(
	 						dsnVo.getCompanyCode()).append("-").append(
	 						dsnVo.getOriginExchangeOffice()).append("-").append(
	 						dsnVo.getDestinationExchangeOffice()).append("-").append(
	 						dsnVo.getMailSubclass()).append("-").append(dsnVo.getYear())
	 						.toString();
	 				log.log(Log.FINE, "THE ERROR CREATED IS ", error);
	 			}
	 			return error;
	 		}

    /**
	 		  * @param companyCode
	 		  * @param subclass
	 		  * @param hashMap
	 		  * @throws SystemException
     * @author a-1936
     * This method is used to validate the MailSubClass
     */
    private void validateSubClass(String companyCode, String subclass,
                                  HashMap<String, Collection<String>> hashMap)
            throws SystemException {
        log.entering("DSN", "validateSubClass");
        boolean isValidSubClass = false;
        if (hashMap.get(SUBCLS_CACHE).contains(subclass)) {
	 		    		 isValidSubClass = true;
	 		    	 } else {
            isValidSubClass = MailSubClass.validateMailSubClass(companyCode, subclass);
            if (isValidSubClass) {
                if (!hashMap.get(SUBCLS_CACHE).contains(subclass)) {
	 		    				 hashMap.get(SUBCLS_CACHE).add(subclass);
	 		    			 }
            } else {
	 		    			 hashMap.get(ERROR_CACHE).add(SUBCLS_CACHE);
	 		    		 }
	 		    	 }
	 		     }

				/**
				 * Method to find all ulds in flight
				 * Added as part of ICRD-115893
     *
				 * @param reassignedFlightValidationVO
				 * @return
				 * @throws SystemException
				 */
				public  Collection<ContainerVO> findAllULDsInAssignedFlight(
            FlightValidationVO reassignedFlightValidationVO) throws SystemException {
					   log.entering("MailTrackingDefaultsServicesEJB", "findAllULDsInAssignedFlight");
        OperationalFlightVO operationalFlightVO = new OperationalFlightVO();
					   operationalFlightVO.setCompanyCode(reassignedFlightValidationVO.getCompanyCode());
					   operationalFlightVO.setFlightNumber(reassignedFlightValidationVO.getFlightNumber());
					   operationalFlightVO.setFlightSequenceNumber(reassignedFlightValidationVO.getFlightSequenceNumber());
					   operationalFlightVO.setCarrierId(reassignedFlightValidationVO.getFlightCarrierId());
					   operationalFlightVO.setPol(reassignedFlightValidationVO.getAirportCode());
					   return AssignedFlight.findULDsInAssignedFlight(operationalFlightVO);
				}

    /**
     * @param operationalFlightVO
     * @return MailAcceptanceVO
     * @throws SystemException
				 * @author A-2037 The method is used to find the mail acceptance details for
				 *         destination Assigned.
				 */
				public MailAcceptanceVO findDestinationAcceptanceDetails(
						OperationalFlightVO operationalFlightVO) throws SystemException {
					log.entering(CLASS, "findDestinationAcceptanceDetails");
					return MailAcceptance
							.findDestinationAcceptanceDetails(operationalFlightVO);

				}

				/**
     * @param operationalFlightVO
     * @return
     * @throws SystemException
				 * @author A-2037 This method is used to find Preadvice for outbound mail
				 *         and it gives the details of the ULDs and the receptacles based on
				 *         CARDIT
				 */
				public PreAdviceVO findPreAdvice(OperationalFlightVO operationalFlightVO)
						throws SystemException {
					log.entering(CLASS, "findPreAdvice");
					return Cardit.findPreAdvice(operationalFlightVO);
				}


				/**
				    * @param tranferManifestFilterVo
				    * @return
				    * @throws SystemException
				    * @throws RemoteException
     * @author a-1936
     * This method is used to find the Transfer Manifest for the Different Transactions
				    */
				   public Page<TransferManifestVO> findTransferManifest(TransferManifestFilterVO tranferManifestFilterVo)
            throws SystemException {
					   return  new MailTransfer().findTransferManifest(tranferManifestFilterVo);

				   }

				   /**
     * @param operationalFlightVo
     * @return
					 * @author a-2553
					 * Added By Paulson as the  part of  the Air NewZealand CR...
     */
    public Map<String, Object> generateTransferManifestReport(ReportSpec reportSpec)
            throws SystemException {
        log.entering(CLASS, GENERATE_TRANSFER_MANIFEST_REPORT);
						String companyCode = String.class
						.cast(reportSpec.getFilterValues().get(0));
						String transferManifestId = String.class
						.cast(reportSpec.getFilterValues().get(1));
						 TransferManifestVO transferManifestVO = null;
						 try {
						transferManifestVO = Proxy.getInstance().get(MailOperationsProxy.class).generateTransferManifestReportDetails(companyCode, transferManifestId);
												} catch (ProxyException e) {
													throw new SystemException(e.getMessage(),e);
												}
				        transferManifestVO=MailtrackingDefaultsVOConverter.constructDSNLevelVOs(transferManifestVO);

						AirlineValidationVO airlineValidationVO = null;

						try {
							airlineValidationVO = findAirlineDescription(companyCode, transferManifestVO.getTransferredToCarrierCode());
						} catch (SharedProxyException e) {
							e.getMessage();
						}
						transferManifestVO.setToCarCodeDesc(airlineValidationVO
								.getAirlineName());

						try {
            airlineValidationVO = findAirlineDescription(companyCode, transferManifestVO.getTransferredFromCarCode());
						} catch (SharedProxyException e) {
							e.getMessage();
						}
						transferManifestVO.setFromCarCodeDesc(airlineValidationVO
								.getAirlineName());
						log.log(Log.FINE, "transferManifestVO", transferManifestVO);
						reportSpec.addParameter(transferManifestVO);
						reportSpec.setData(transferManifestVO.getDsnVOs());
				        log.exiting(CLASS, GENERATE_TRANSFER_MANIFEST_REPORT);
						return ReportAgent.generateReport(reportSpec);
					}


    /**
     *
     * 	Method		:	MailController.generateTransferManifestMailbagLevelReport
     *	Added by 	:	A-8061 on 09-Nov-2020
     * 	Used for 	:
     *	Parameters	:	@param reportSpec
     *	Parameters	:	@return
     *	Parameters	:	@throws SystemException
     *	Return type	: 	Map<String,Object>
     */
    public Map<String, Object> generateTransferManifestMailbagLevelReport(ReportSpec reportSpec)
            throws SystemException {
        log.entering(CLASS, GENERATE_TRANSFER_MANIFEST_REPORT);
						String companyCode = String.class
						.cast(reportSpec.getFilterValues().get(0));
						String transferManifestId = String.class
						.cast(reportSpec.getFilterValues().get(1));
				        TransferManifestVO transferManifestVO = null;
 try {
				        	transferManifestVO = Proxy.getInstance().get(MailOperationsProxy.class).generateTransferManifestReportDetails(companyCode, transferManifestId);
						} catch (ProxyException e) {
							throw new SystemException(e.getMessage(),e);
						}

						AirlineValidationVO airlineValidationVO = null;

						try {
							airlineValidationVO = findAirlineDescription(companyCode, transferManifestVO.getTransferredToCarrierCode());
						} catch (SharedProxyException e) {
							e.getMessage();
						}
						if(airlineValidationVO!=null){
						transferManifestVO.setToCarCodeDesc(airlineValidationVO
								.getAirlineName());
						}

						try {
            airlineValidationVO = findAirlineDescription(companyCode, transferManifestVO.getTransferredFromCarCode());
						} catch (SharedProxyException e) {
							e.getMessage();
						}
						transferManifestVO.setFromCarCodeDesc(airlineValidationVO
								.getAirlineName());
						log.log(Log.FINE, "transferManifestVO", transferManifestVO);
						reportSpec.addParameter(transferManifestVO);
						reportSpec.setData(transferManifestVO.getDsnVOs());
				        log.exiting(CLASS, GENERATE_TRANSFER_MANIFEST_REPORT);
						return ReportAgent.generateReport(reportSpec);
					}

    /**
					 * @param companyCode
					 * @param carrierCode
					 * @return AirlineValidationVO
     * @author a-2553
					 */
					public AirlineValidationVO findAirlineDescription(String companyCode,
							String carrierCode) throws SharedProxyException, SystemException {
						AirlineValidationVO airlineValidationVO = new SharedAirlineProxy()
								.validateAlphaCode(companyCode, carrierCode);
						log.log(Log.FINE, "@@@@@@@airlineValidationVO.getAirlineName()",
								airlineValidationVO.getAirlineName());
						return airlineValidationVO;

					}


				/**
				 * findContainersInFlightForManifest
     *
				 * @param operationalFlightVo
				 * @return
				 * @throws SystemException
				 */
				public MailManifestVO findContainersInFlightForManifest(
						OperationalFlightVO operationalFlightVo) throws SystemException {
					log.entering(CLASS, "findContainersInFlightForManifest");
					MailManifestVO mailManifestVO = AssignedFlightSegment
							.findContainersInFlightForManifest(operationalFlightVo);
					/**
					 * Commenting the call as route check is not needed post MRA Revamp
 					 */
        			//checkRoutingAvailabilityForManifest(operationalFlightVo, mailManifestVO);
					try {
						AssignedFlight assignedFlight = AssignedFlight
								.find(constructAssignedFlightPK(operationalFlightVo));
						mailManifestVO.setFlightStatus(assignedFlight.getExportClosingFlag());
					} catch (FinderException exception) {
						// ignore flight maynot be accepted
					}

					//Added by A-7540 for ICRD-197379 starts
					//method to make dsn's in a sorted order based on destination office of exchange
					updateManifestVOWithSortedDSNVos(mailManifestVO);
					log.exiting(CLASS, "findContainersInFlightForManifest");
					return mailManifestVO;
				}

				/**
				 * method definition for sorting dsn's based on dest offc of exchange
				 * Added by ICRD-197379
     *
     * @param mailManifestVO
     * @author a-7540
				 */
				private void updateManifestVOWithSortedDSNVos(
						MailManifestVO mailManifestVO) {
        if (mailManifestVO != null) {
				Collection<ContainerDetailsVO> containerDetails = mailManifestVO.getContainerDetails();
					// TODO Auto-generated method stub
            for (ContainerDetailsVO containerDetailsVO : containerDetails) {
                Collection<DSNVO> dsnVOs = containerDetailsVO.getDsnVOs();
                if (dsnVOs != null && dsnVOs.size() > 0) {
                    Collections.sort((List<DSNVO>) dsnVOs, new DestinationExchangeOfficeComparator());
                }
            }
        }
    }

    /**
				 * overriding compare method and passing objects by reference
				 * Added for ICRD-197379
     *
				 * @author a-7540
				 * @return
				 */
    class DestinationExchangeOfficeComparator implements Comparator {
					public int compare(Object object, Object obj) {
            if (object instanceof DSNVO && obj instanceof DSNVO) {
						DSNVO firstDsnVO = (DSNVO) object;
						DSNVO secondDsnVO = (DSNVO) obj;
                return (firstDsnVO.getDestinationExchangeOffice()).compareTo(secondDsnVO.getDestinationExchangeOffice());
					}

					 return 0;
					  }
					}


				/**
				 * checkRoutingAvailabilityForManifest
     *
				 * @param operationalFlightVo
				 * @param mailManifestVO
				 * @throws SystemException
				 */
				private void checkRoutingAvailabilityForManifest(
            OperationalFlightVO operationalFlightVo, MailManifestVO mailManifestVO)
            throws SystemException {
					/*
					 * Added by RENO K ABRAHAM
					 * for CR : AirNZ865 on 11 August 2008
					 * This CR is to check, whether any
					 * mailbag or despatch is not associated with an onward routing info.
					 * This is implemented to cooperate with MRA module.
					 */
					log.log(Log.FINE, "checkRoutingsForMails");
        if (mailManifestVO.getContainerDetails() != null && mailManifestVO.getContainerDetails().size() > 0) {
            for (ContainerDetailsVO containerDetailsVO : mailManifestVO.getContainerDetails()) {
                if (containerDetailsVO.getDsnVOs() != null && containerDetailsVO.getDsnVOs().size() > 0) {
                    for (DSNVO dSNVO : containerDetailsVO.getDsnVOs()) {
                        String type = "";
                        if (dSNVO != null) {
                            if (ContainerDetailsVO.FLAG_YES.equals(dSNVO.getPltEnableFlag())) {
                                type = "MAILBAG";
                                dSNVO.setContainerNumber(containerDetailsVO.getContainerNumber());

                            } else if (((ContainerDetailsVO.FLAG_NO).equals(dSNVO.getPltEnableFlag()))
                                    && ((ContainerDetailsVO.OPERATION_FLAG_UPDATE).equals(dSNVO.getContainerType()))) {
                                type = "DESPATCH_IN_ULD";
                            } else if (((ContainerDetailsVO.FLAG_NO).equals(dSNVO.getPltEnableFlag()))
                                    && (("B").equals(dSNVO.getContainerType()))) {
                                type = "DESPATCH_IN_MFT_BULK";
                                dSNVO.setContainerNumber(containerDetailsVO.getContainerNumber());
                            }
                            if (dSNVO.getRoutingAvl() == null || dSNVO.getRoutingAvl().trim().length() == 0) {
                                if (operationalFlightVo != null && type.trim().length() > 0) {
                                    if (AssignedFlight.checkRoutingsForMails(operationalFlightVo, dSNVO, type)) {
                                        dSNVO.setRoutingAvl(ContainerDetailsVO.FLAG_YES);
                                    } else {
                                        dSNVO.setRoutingAvl(ContainerDetailsVO.FLAG_NO);
                                    }
                                    //dSNVO.setRoutingAvl(ContainerDetailsVO.FLAG_YES);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * @param containers
     * @return
     * @throws SystemException
     * @author a-1936 This method is used to find out the Mail Bags and the
     * Despacthes in a Container of a Manifested Flight.
				 */
				public Collection<ContainerDetailsVO> findMailbagsInContainerForManifest(
						Collection<ContainerDetailsVO> containers) throws SystemException {
					return AssignedFlightSegment
							.findMailbagsInContainerForManifest(containers);
				}

				/**
				 * @param companyCode
				 * @param airportCode
				 * @param isGHA
				 * @return
				 * @throws SystemException
     * @author a-1883
				 */
				public String findStockHolderForMail(String companyCode,
						String airportCode, boolean isGHA) throws SystemException {
					log.entering(CLASS, "findStockHolderForMail");
					log.log(Log.INFO, "isGHAUser :", isGHA);
					String stockHolder = null;
					Collection<String> parameterCodes = new ArrayList<String>();
					if (isGHA) {
						parameterCodes.add(MailConstantsVO.STOCK_HOLDER_PARAMETER);
						Map<String, String> paramMap = new SharedAreaProxy()
								.findAirportParametersByCode(companyCode, airportCode,
										parameterCodes);
						if (paramMap != null) {
							stockHolder = paramMap
									.get(MailConstantsVO.STOCK_HOLDER_PARAMETER);
						}
					} else {
						parameterCodes.add(MailConstantsVO.STATION_STOCK_HOLDER_PARAMETER);
						Map<String, String> paramMap = new SharedAreaProxy()
								.findAirportParametersByCode(companyCode, airportCode,
										parameterCodes);
						if (paramMap != null) {
							stockHolder = paramMap
									.get(MailConstantsVO.STATION_STOCK_HOLDER_PARAMETER);
						}
						log.log(Log.INFO, "Stock Holder For Station :", stockHolder);
						if (stockHolder == null) {
							stockHolder = findSystemParameterValue(MailConstantsVO.DEFAULT_STOCK_HOLDER_PARAMETER);
						}
					}
					log.log(Log.INFO, "Stock Holder :", stockHolder);
					return stockHolder;
				}

				/**
				 * @param aWBFilterVO
				 * @return AWBDetailVO
				 * @throws SystemException
				 * @throws AttachAWBException
     * @author a-1883
				 */
				public AWBDetailVO findAWBDetails(AWBFilterVO aWBFilterVO)
						throws SystemException, AttachAWBException {
					log.entering(CLASS, "findAWBDetails");
					OperationsShipmentProxy shipmentProxy = new OperationsShipmentProxy();
					AWBDetailVO awbDetailVO = null;
        ShipmentDetailVO shipmentDetailsVO = null;
					// MailAcceptance.findAWBDetails(aWBFilterVO);

					Collection<ShipmentVO> shipments = shipmentProxy
							.findShipments(constructShipmentFilterVO(aWBFilterVO));
					// log.log(Log.FINE, "AWBDetailVO Before Proxy call : " + aWBDetailVO);
					// if (aWBDetailVO != null) {

					String mailSccCode = findSystemParameterValue(MailConstantsVO.ATTACH_AWB_SCC_CODE);

					boolean hasShipment = false;
					boolean isDiffScc = false;
					boolean isDifferentOrgDst = false;
					if (shipments != null && shipments.size() > 0) {
						hasShipment = true;
						for (ShipmentVO shipmentVO : shipments) {
							if (mailSccCode != null
									&& !((shipmentVO.getScc()).contains(mailSccCode))) {
								isDiffScc = true;
								break;
							}
							if (!(aWBFilterVO.getOrigin().equals(shipmentVO.getOrigin()))
									|| (!aWBFilterVO.getDestination().equals(
											shipmentVO.getDestination()))) {
								isDifferentOrgDst = true;
								break;
							}
							ShipmentDetailFilterVO shipmentDetailFilterVO = new ShipmentDetailFilterVO();
							shipmentDetailFilterVO.setCompanyCode(shipmentVO
									.getCompanyCode());
							shipmentDetailFilterVO.setOwnerId(shipmentVO.getOwnerId());
							shipmentDetailFilterVO.setMasterDocumentNumber(shipmentVO
									.getMasterDocumentNumber());
							shipmentDetailFilterVO.setDuplicateNumber(shipmentVO
									.getDuplicateNumber());
							shipmentDetailFilterVO.setSequenceNumber(shipmentVO
									.getSequenceNumber());
							shipmentDetailsVO = new OperationsShipmentProxy()
									.findShipmentDetails(shipmentDetailFilterVO);
							log.log(Log.FINE, "shipmentDetailsVO  : ", shipmentDetailsVO);
							awbDetailVO = constructAWBDetailVO(shipmentDetailsVO);

						}
					}
					// }
					if (isDifferentOrgDst) {
						throw new AttachAWBException(AttachAWBException.AWB_ORG_DST_DIFF);
					}
					if (hasShipment && isDiffScc) {
						throw new AttachAWBException(
								AttachAWBException.AWB_ATTACHED_DIFF_SCC);
					}
					log.log(Log.FINE, "AWBDetailVO  : ", awbDetailVO);
					return awbDetailVO;
				}

				/**
				 * TODO Purpose Mar 23, 2007, A-1739
				 *
				 * @param filterVO
				 * @return
				 */
				private ShipmentFilterVO constructShipmentFilterVO(AWBFilterVO filterVO) {
					ShipmentFilterVO shipmentFilterVO = new ShipmentFilterVO();
					shipmentFilterVO.setCompanyCode(filterVO.getCompanyCode());
					shipmentFilterVO.setOwnerId(filterVO.getDocumentOwnerIdentifier());
					shipmentFilterVO.setMasterDocumentNumber(filterVO
							.getMasterDocumentNumber());
					shipmentFilterVO.setDocumentNumber(filterVO.getMasterDocumentNumber());
					return shipmentFilterVO;
				}


				/**
				 * TODO Purpose Mar 23, 2007, A-1739
				 *
				 * @param shipmentDetailsVO
				 * @return
				 */
				private AWBDetailVO constructAWBDetailVO(ShipmentDetailVO shipmentDetailsVO) {
					AWBDetailVO awbDetailVO = new AWBDetailVO();
					awbDetailVO.setCompanyCode(shipmentDetailsVO.getCompanyCode());
					awbDetailVO.setOwnerId(shipmentDetailsVO.getOwnerId());
					awbDetailVO.setMasterDocumentNumber(shipmentDetailsVO
							.getMasterDocumentNumber());
					awbDetailVO.setDuplicateNumber(shipmentDetailsVO.getDuplicateNumber());
					awbDetailVO.setSequenceNumber(shipmentDetailsVO.getSequenceNumber());
					awbDetailVO.setDestination(shipmentDetailsVO.getDestination());
					awbDetailVO.setOrigin(shipmentDetailsVO.getOrigin());
					awbDetailVO.setShipmentDescription(shipmentDetailsVO
							.getShipmentDescription());
					awbDetailVO.setStatedPieces(shipmentDetailsVO.getStatedPieces());
					awbDetailVO.setStatedWeight(shipmentDetailsVO.getStatedWeight());
        if (awbDetailVO.getStatedWeight() != null) {
						awbDetailVO.getStatedWeight().setUnitType(UnitConstants.MAIL_WGT);
					}
					return awbDetailVO;
				}

				/**
				 * @param operationalFlightVO
				 * @param mailManifestVO
				 * @throws SystemException
			     * @throws ULDDefaultsProxyException
     * @author a-3251 SREEJITH P.C.
     */
    //Modified by A-7540
    @Raise(module = "mail", submodule = "operations", event = "FLIGHT_CLOSE_EVENT", methodId = "mail.operations.closeFlightManifest")
    public void closeFlightManifest(OperationalFlightVO operationalFlightVO, MailManifestVO mailManifestVO)
            throws SystemException, ULDDefaultsProxyException, CloseFlightException {

					log.entering(CLASS, "closeFlightManifest");
					/*
					 * Added by RENO K ABRAHAM
					 * for CR : AirNZ865 on 11 August 2008
					 * This CR is to check, whether any
					 * mailbag or despatch is not associated with an onward routing info.
					 * If any such found, exception should be thrown.
					 * This is implemented to cooperate with MRA module.
					 * START
					 */
					Collection<String> sysParameters = new ArrayList<String>();
					sysParameters.add(MailConstantsVO.CONSIGNMENT_ROUTING_NEEDED_FOR_EXPORT_CLOSEFLIGHT);
					HashMap<String, String> sysParameterMap = null;
					sysParameterMap = new SharedDefaultsProxy().findSystemParameterByCodes(sysParameters);
					log.log(Log.FINE, " systemParameterMap ", sysParameterMap);
					if (sysParameterMap != null
							&& OperationalFlightVO.FLAG_YES.equals(sysParameterMap
									.get(MailConstantsVO.CONSIGNMENT_ROUTING_NEEDED_FOR_EXPORT_CLOSEFLIGHT))) {
            Collection<ContainerDetailsVO> containerDetails = mailManifestVO.getContainerDetails();
            boolean canCloseFlight = true;
            if (containerDetails != null && containerDetails.size() > 0) {
                for (ContainerDetailsVO containerDtls : containerDetails) {
                    if (containerDtls.getDsnVOs() != null && containerDtls.getDsnVOs().size() > 0) {
                        for (DSNVO dSNVO : containerDtls.getDsnVOs()) {
                            if (DSNVO.FLAG_NO.equals(dSNVO.getRoutingAvl())) {
                                canCloseFlight = false;
                                break;
                            }
                        }
                    }
                    if (!canCloseFlight) {
                        break;
                    }
                }
            }
            if (!canCloseFlight) {
							throw new CloseFlightException(
									CloseFlightException.ROUTING_UNAVAILABLE);
						}
					}
					//END OF CR : AirNZ865

					//closing flight
					   closeFlight(operationalFlightVO);
					//Creating messageVO from mailManifestVO and operationalFlightVO
					   MailAlertMessageVO mailAlertMessageVO = new MailAlertMessageVO();
					   mailAlertMessageVO.setCompanyCode(mailManifestVO.getCompanyCode());
				       mailAlertMessageVO.setCondatails(mailManifestVO.getContainerDetails());
				       mailAlertMessageVO.setDepartureDate(mailManifestVO.getDepDate());
				       mailAlertMessageVO.setDeptport(mailManifestVO.getDepPort());
        mailAlertMessageVO.setFlightnum(mailManifestVO.getFlightCarrierCode() + SPACE + mailManifestVO.getFlightNumber());
				       mailAlertMessageVO.setRoute(operationalFlightVO.getFlightRoute());
				       mailAlertMessageVO.setAirlinecode(operationalFlightVO.getOwnAirlineCode());

				    //creating stations form route
        String st[] = operationalFlightVO.getFlightRoute().split("-");
				       Collection<String> stations = new ArrayList<String>();
        for (int i = 0; i < st.length; i++) {
				    	    stations.add(st[i]);
				       }
				       mailAlertMessageVO.setStations(stations);
				       log
							.log(
									Log.FINE,
									"\n*******Stations to which the message is to be send are -------->\n",
									stations);
					//Commneted temporarily because of messaging issue by A-2521
				       // sendMailAlertMessage(mailAlertMessageVO,(ArrayList<String>)stations);
				     log.exiting(CLASS, "closeFlightManifest");

					}

				/**
     * @param operationalFlightVO
     * @throws SystemException
     * @throws ULDDefaultsProxyException
				 * @author a-1936 This method is used to close the Flight
     */
    //Modified by A-7540
    @Raise(module = "mail", submodule = "operations", event = "FLIGHT_CLOSE_EVENT", methodId = "mail.operations.closeFlight")
				public void closeFlight(OperationalFlightVO operationalFlightVO)
            throws SystemException, ULDDefaultsProxyException, CloseFlightException {
					log.entering(CLASS, "closeFlight");
        Collection<OperationalFlightVO> operationalFlightVOs = new ArrayList<OperationalFlightVO>();
					boolean isSendFWBEnabled = false;
					Collection<String> systemParameters = new ArrayList<String>();
					systemParameters.add(MailConstantsVO.SEND_FWB_NEEDED);
					// Added By Karthick V For Monitoring the Service Level Activity Starts
					boolean canMonitorSLA = false;
					Collection<String> mailIds = null;
					systemParameters.add(MailConstantsVO.MAILTRACKING_MONITORSLA);
					LocalDate manifestedDate = null;
					// Added By Karthick V For Monitoring the Service Level Activity Starts
					HashMap<String, String> systemParameterMap = null;
					systemParameterMap = new SharedDefaultsProxy()
							.findSystemParameterByCodes(systemParameters);
					log.log(Log.FINE, " systemParameterMap ", systemParameterMap);
					if (systemParameterMap != null
							&& OperationalFlightVO.FLAG_YES.equals(systemParameterMap
									.get(MailConstantsVO.SEND_FWB_NEEDED))) {
						isSendFWBEnabled = true;
					}
					if (systemParameterMap != null
							&& OperationalFlightVO.FLAG_YES.equals(systemParameterMap
									.get(MailConstantsVO.MAILTRACKING_MONITORSLA))) {
						canMonitorSLA = true;
					}
					log.log(Log.FINE, "Can Monitor the SLA For the Closed Flights",
							canMonitorSLA);
					AssignedFlight assignedFlight = null;
					AssignedFlightVO assignedFlightVO;
					AssignedFlightPK assignedFlightPk = new AssignedFlightPK();
					assignedFlightPk.setAirportCode(operationalFlightVO.getPol());
					assignedFlightPk.setCompanyCode(operationalFlightVO.getCompanyCode());
					assignedFlightPk.setFlightNumber(operationalFlightVO.getFlightNumber());
					assignedFlightPk.setFlightSequenceNumber(operationalFlightVO
							.getFlightSequenceNumber());
					assignedFlightPk.setLegSerialNumber(operationalFlightVO
							.getLegSerialNumber());
					assignedFlightPk.setCarrierId(operationalFlightVO.getCarrierId());
					try {
						assignedFlight = AssignedFlight.find(assignedFlightPk);
					} catch (FinderException ex) {
						assignedFlightVO = new AssignedFlightVO();
						assignedFlightVO.setAirportCode(operationalFlightVO.getPol());   
						assignedFlightVO.setCarrierId(operationalFlightVO.getCarrierId());
						assignedFlightVO.setCompanyCode(operationalFlightVO.getCompanyCode());
						assignedFlightVO.setCarrierCode(operationalFlightVO.getCarrierCode());      
						assignedFlightVO.setFlightDate(operationalFlightVO.getFlightDate());
						assignedFlightVO.setFlightNumber(operationalFlightVO.getFlightNumber());
						assignedFlightVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
						assignedFlightVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
						assignedFlight = new AssignedFlight(assignedFlightVO);

					}
					AssignedFlightAuditVO assignedFlightAuditVO = new AssignedFlightAuditVO(
							AssignedFlightVO.MODULE, AssignedFlightVO.SUBMODULE,
							AssignedFlightVO.ENTITY);
					assignedFlightAuditVO = (AssignedFlightAuditVO) AuditUtils
							.populateAuditDetails(assignedFlightAuditVO, assignedFlight);

					if (assignedFlight != null) {
						assignedFlight
								.setExportClosingFlag(MailConstantsVO.FLIGHT_STATUS_CLOSED);
						assignedFlight.setExportClosingFlag(MailConstantsVO.FLIGHT_STATUS_CLOSED);
						/*
						 * Find BULK Containers In an Assigned Flight.
						 * and change the TRANSIT FLAG TO "N"
						 * Starts
						 */
						Collection<ContainerVO> bulkContainersInFlight =
							AssignedFlight.findContainersInAssignedFlight(operationalFlightVO);

            if (bulkContainersInFlight != null && bulkContainersInFlight.size() > 0) {
                for (ContainerVO bulkContainerVO : bulkContainersInFlight) {
								try {
									Container bulkContainer = findContainer(bulkContainerVO);
                        if (bulkContainer != null) {
										bulkContainer.setTransitFlag(MailConstantsVO.FLAG_NO);
									}
								} catch (FinderException ex) {
									// NO need to throw exception. This case wont come.
									log.log(Log.SEVERE, "BULK CONTAINER NOT FOUND !!!!!!");
								}
							}
						}
						//bulk contianer update ENDS

						if (canMonitorSLA) {
							manifestedDate = new LocalDate(operationalFlightVO.getPol(),
									Location.ARP, true);
						}
						boolean isUldIntegrationEnbled = isULDIntegrationEnabled();
						if (isUldIntegrationEnbled) {
							Collection<ContainerVO> containerVOs = AssignedFlight
									.findULDsInAssignedFlight(operationalFlightVO);
							log.log(Log.FINE, " ContainerVOs :", containerVOs);
							if (containerVOs != null && containerVOs.size() > 0) {
								FlightDetailsVO flightDetailsVO = new FlightDetailsVO();
								ULDInFlightVO uldInFlightVO = null;
								Collection<ULDInFlightVO> uldInFlightVOs = new ArrayList<ULDInFlightVO>();
								flightDetailsVO.setCompanyCode(operationalFlightVO
										.getCompanyCode());
								for (ContainerVO containerVO : containerVOs) {
									uldInFlightVO = new ULDInFlightVO();
									uldInFlightVO.setUldNumber(containerVO
											.getContainerNumber());
									uldInFlightVO.setPointOfLading(containerVO
											.getAssignedPort());
									uldInFlightVO.setPointOfUnLading(containerVO.getPou());
									 //uldInFlightVO.setRemark("Finalisation");
									uldInFlightVOs.add(uldInFlightVO);
								}
								flightDetailsVO.setUldInFlightVOs(uldInFlightVOs);
								flightDetailsVO
										.setFlightCarrierIdentifier(operationalFlightVO
												.getCarrierId());
								flightDetailsVO.setCarrierCode(operationalFlightVO
										.getCarrierCode());
								flightDetailsVO.setFlightNumber(operationalFlightVO
										.getFlightNumber());
								flightDetailsVO.setFlightDate(operationalFlightVO
										.getFlightDate());
								flightDetailsVO.setFlightSequenceNumber(operationalFlightVO
										.getFlightSequenceNumber());
								flightDetailsVO.setCurrentAirport(operationalFlightVO.getPol());
								flightDetailsVO.setLegSerialNumber(operationalFlightVO
										.getLegSerialNumber());
								flightDetailsVO.setDirection(MailConstantsVO.EXPORT);
								flightDetailsVO.setAction(FlightDetailsVO.FINALISATION);

							//Added by A-6991 for ICRD-77772
								flightDetailsVO.setSubSystem("MAIL");

					new ULDDefaultsProxy()
							.updateULDForOperations(flightDetailsVO);

				}
							//Added by A-6991 for ICRD-77772 Ends...Nil UCM Ends..check how to send it.
						}
					}
					
					Collection<ContainerVO> containerVOs = AssignedFlight
							.findULDsInAssignedFlight(operationalFlightVO);
					Collection<String> mailbagIds = findMailBagsInClosedFlight(operationalFlightVO);
					Collection<ContainerVO> bulkContainers = AssignedFlight.findContainersInAssignedFlight(operationalFlightVO);
					operationalFlightVO.setRequireAllLegs(true);
					Collection<FlightValidationVO> flightValidationVOs = new MailController().validateOperationalFlights(
							operationalFlightVO, false);
					FlightValidationVO flightValidationVO = updateFlightValidationVO(operationalFlightVO, flightValidationVOs);
					if(flightValidationVO!=null &&flightValidationVO.getSta()!=null){
						operationalFlightVO.setArrivaltime(flightValidationVO.getSta());
					}
					doSecurityAndScreeningValidations(operationalFlightVO, containerVOs, bulkContainers,flightValidationVOs);
					int finalContainerCount =0;
					int mailbagCount = 0;
					int uldCount =0 ;
					int bulkCount =0; 
					String departureAirport= operationalFlightVO.getAirportCode()!=null?operationalFlightVO.getAirportCode():operationalFlightVO.getPol();
					
					if(!bulkContainers.isEmpty()){
						Set<String> bulks = new HashSet<>();
						for(ContainerVO bulk : bulkContainers){
							bulks.add(bulk.getContainerNumber());
						}
						bulkCount= bulks.size();
					}
					 
					
					if(!containerVOs.isEmpty()){
						uldCount = containerVOs.size();
					}
					
					finalContainerCount = uldCount + bulkCount;
					
					if(!mailbagIds.isEmpty()){
						Set<String> mailbags = new HashSet<>();
						for(String mailbag : mailbagIds){
							mailbags.add(mailbag);
						}
						mailbagCount = mailbags.size();
					}
						
					StringBuilder additInfo = new StringBuilder();
					additInfo.append("Departure Airport: " + departureAirport);
					additInfo.append(", No of Containers : " + finalContainerCount + ", No of Mailbags : " + mailbagCount);
					
					assignedFlightAuditVO.setAdditionalInformation(additInfo.toString());
					String triggeringPoint = ContextUtils.getRequestContext().getParameter(MailConstantsVO.REQ_TRIGGERPOINT);
					assignedFlightAuditVO.setTriggerPoint(triggeringPoint);
					performAssignedFlightAudit(assignedFlightAuditVO, assignedFlight,MailConstantsVO.EXPORT_FLIGHT_CLOSED);

					if (isSendFWBEnabled) {
						sendFWBForFlight(operationalFlightVO);
					}

					/*
					 * 120507 Added By Karthick V Based on the System Paramter check whether
					 * the MailBag has to be Monitored For the Service Level Activity
					 */
					if (canMonitorSLA) {
						mailIds = findMailBagsInClosedFlight(operationalFlightVO);
						if (mailIds != null && mailIds.size() > 0) {
							log.log(Log.FINE, "The Mail IDS ", mailIds.size());
							log.log(Log.FINE, "The Mail IDS ", mailIds);
							monitorMailSLAActivity(createMonitorSLAVosForManifest(mailIds,
									operationalFlightVO, manifestedDate));
						}
					}
					//Added as part of CRQ ICRD-93584 by A-5526 starts
					//Going to save MLD-UPL related info.

					

        if (flightValidationVO != null && flightValidationVO.getAtd() != null) {
					operationalFlightVOs.add(operationalFlightVO);
					//Added by A-8527 for IASCB-34446 start
					String enableMLDSend= findSystemParameterValue(MailConstantsVO.MAIL_MLD_ENABLED_SEND);
					if(MailConstantsVO.FLAG_YES.equals(enableMLDSend)){
					//Added by A-8527 for IASCB-34446 Ends
            MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
					mailController.flagMLDForUpliftedMailbags(operationalFlightVOs);
					}
					}
					//new MLDController().flagMLDForUpliftedMailbags(operationalFlightVOs);
					//Added as part of CRQ ICRD-93584 by A-5526 starts
				}

				/**
				 * TODO Purpose Jan 31, 2007, A-1739
				 *
				 * @param operationalFlightVO
				 * @throws SystemException
				 */
				private void sendFWBForFlight(OperationalFlightVO operationalFlightVO)
						throws SystemException {
					log.entering(CLASS, "sendFWBForFlight");
					Collection<AWBDetailVO> awbDetails = AssignedFlight
							.findAWBDetails(operationalFlightVO);
					if (awbDetails != null && awbDetails.size() > 0) {
						new OperationsShipmentProxy()
								.sendFWB(constructShipmentValidationVOs(awbDetails,
										operationalFlightVO));
					}
					log.exiting(CLASS, "sendFWBForFlight");

				}

				/**
				 * TODO Purpose Jan 31, 2007, A-1739
				 *
				 * @param awbDetails
				 * @param operationalFlightVO
				 * @return
				 */
				private Collection<ShipmentValidationVO> constructShipmentValidationVOs(
						Collection<AWBDetailVO> awbDetails, OperationalFlightVO opFlightVO) {
					Collection<ShipmentValidationVO> shipmentValidationVOs = new ArrayList<ShipmentValidationVO>();
					for (AWBDetailVO awbDetailVO : awbDetails) {
						ShipmentValidationVO shipmentValidationVO = new ShipmentValidationVO();
						shipmentValidationVO.setCompanyCode(opFlightVO.getCompanyCode());
						shipmentValidationVO.setOwnerCode(awbDetailVO.getOwnerCode());
						shipmentValidationVO.setOwnerId(awbDetailVO.getOwnerId());
						shipmentValidationVO.setDocumentNumber(awbDetailVO
								.getMasterDocumentNumber());
						shipmentValidationVO.setDuplicateNumber(awbDetailVO
								.getDuplicateNumber());
						shipmentValidationVO.setSequenceNumber(awbDetailVO
								.getSequenceNumber());
						shipmentValidationVOs.add(shipmentValidationVO);
					}
					return shipmentValidationVOs;
				}

    /**
     * @param operationalFlightVO
     * @return
     * @throws SystemException
				 * @author a-1936 This method is used to find the MailBags in the Closed
				 *         Flight.. Required For Monitoring the Service Level Activity of
				 *         the Mail Bags..
				 */
				private Collection<String> findMailBagsInClosedFlight(
						OperationalFlightVO operationalFlightVO) throws SystemException {
					log.entering(CLASS, "findMailBagsInClosedFlight");
					return Mailbag.findMailBagsInClosedFlight(operationalFlightVO);
				}

				/**
				 * 120507
				 *
				 * @param mailBagsForMonitorSLA
				 * @param mailAcceptanceVO
				 * @return
				 * @throws SystemException
     * @author a-1936 This method is used to construct the MonitorSLAVos From
     * the MailBagVos
				 */
				private Collection<MonitorMailSLAVO> createMonitorSLAVosForManifest(
						Collection<String> mailBagsForMonitorSLA,
						OperationalFlightVO operationalFlightVO, LocalDate manifestedDate)
						throws SystemException {
					log.entering(CLASS, "createMonitorSLAVosForManifest");
					MonitorMailSLAVO monitorSLAVo = null;
					Collection<MonitorMailSLAVO> monitorSLAVos = new ArrayList<MonitorMailSLAVO>();
					for (String mailBagForMonitorSLA : mailBagsForMonitorSLA) {
						monitorSLAVo = new MonitorMailSLAVO();
						monitorSLAVo.setCompanyCode(operationalFlightVO.getCompanyCode());
						monitorSLAVo.setActivity(MonitorMailSLAVO.MAILSTATUS_MANIFESTED);
						monitorSLAVo.setMailBagNumber(mailBagForMonitorSLA);
						monitorSLAVo
								.setOperationFlag(MonitorMailSLAVO.OPERATION_FLAG_UPDATE);
						monitorSLAVo.setScanTime(manifestedDate);
						monitorSLAVos.add(monitorSLAVo);
					}
					log.entering(CLASS, "createMonitorSLAVosForManifest");
					return monitorSLAVos;
				}


				/**
				 * @param offloadFilterVO
				 * @return
				 * @throws SystemException
     * @author a-1936 This method is used to find the containers,DSNS,MailBags
     * that Can be Offloaded for a ParticularFlight..
				 */
				public OffloadVO findOffloadDetails(OffloadFilterVO offloadFilterVO)
						throws SystemException {
					log.entering(CLASS, "findOffloadDetails");
					return MailAcceptance.findOffloadDetails(offloadFilterVO);
				}

				/**
     * @param operationalFlightVO
     * @throws SystemException
				 * @author a-1936 This method is used to reopen the Flight
				 */
				public void reopenFlight(OperationalFlightVO operationalFlightVO)
						throws SystemException {
					log.entering(CLASS, "reopenFlight");
					//Collection<OperationalFlightVO> operationalFlightVOs=new ArrayList<OperationalFlightVO>();
					AssignedFlight assignedFlight = null;
					AssignedFlightVO assignedFlightVO;
					AssignedFlightPK assignedFlightPk = new AssignedFlightPK();
					assignedFlightPk.setAirportCode(operationalFlightVO.getPol());
					assignedFlightPk.setCompanyCode(operationalFlightVO.getCompanyCode());
					assignedFlightPk.setFlightNumber(operationalFlightVO.getFlightNumber());
					assignedFlightPk.setFlightSequenceNumber(operationalFlightVO
							.getFlightSequenceNumber());
					assignedFlightPk.setLegSerialNumber(operationalFlightVO
							.getLegSerialNumber());
					assignedFlightPk.setCarrierId(operationalFlightVO.getCarrierId());
					try {
						assignedFlight = AssignedFlight.find(assignedFlightPk);
					} catch (FinderException ex) {
						assignedFlightVO = new AssignedFlightVO();
						assignedFlightVO.setAirportCode(operationalFlightVO.getPol());
						assignedFlightVO.setCarrierId(operationalFlightVO.getCarrierId());
						assignedFlightVO.setCompanyCode(operationalFlightVO.getCompanyCode());
						assignedFlightVO.setFlightDate(operationalFlightVO.getFlightDate());
						assignedFlightVO.setFlightNumber(operationalFlightVO.getFlightNumber());
						assignedFlightVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
						assignedFlightVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
						assignedFlight = new AssignedFlight(assignedFlightVO);

					}
					
					if(MailConstantsVO.FLIGHT_STATUS_CLOSED.equals(assignedFlight.getExportClosingFlag())){
						
					assignedFlight.setExportClosingFlag(MailConstantsVO.FLIGHT_STATUS_OPEN);
						
					AssignedFlightAuditVO assignedFlightAuditVO = new AssignedFlightAuditVO(
							AssignedFlightVO.MODULE, AssignedFlightVO.SUBMODULE,
							AssignedFlightVO.ENTITY);
					assignedFlightAuditVO = (AssignedFlightAuditVO) AuditUtils
							.populateAuditDetails(assignedFlightAuditVO, assignedFlight);
					
					Collection<ContainerVO> containerVOs = AssignedFlight
							.findULDsInAssignedFlight(operationalFlightVO);
					Collection<String> mailbagIds = findMailBagsInClosedFlight(operationalFlightVO);
					Collection<ContainerVO> bulkContainers = AssignedFlight.findContainersInAssignedFlight(operationalFlightVO);
					int finalContainerCount =0;
					int mailbagCount = 0; 
					int uldCount =0 ;
					int bulkCount =0; 
					
					if(!bulkContainers.isEmpty()){
						Set<String> bulks = new HashSet<>();
						for(ContainerVO bulk : bulkContainers){
							bulks.add(bulk.getContainerNumber());
						}
						bulkCount= bulks.size();
					}
					
					if(!containerVOs.isEmpty()){
						uldCount = containerVOs.size();
					}
					
					finalContainerCount = uldCount + bulkCount;
					
					if(!mailbagIds.isEmpty()){
						Set<String> mailbags = new HashSet<>();
						for(String mailbag : mailbagIds){
							mailbags.add(mailbag);
						}
						mailbagCount = mailbags.size();
					}
						
					StringBuilder additInfo = new StringBuilder();
					additInfo.append("Departure Airport: " + operationalFlightVO.getAirportCode());
					additInfo.append(", No of Containers: " + finalContainerCount + ", No of Mailbags: " + mailbagCount);
					
					assignedFlightAuditVO.setAdditionalInformation(additInfo.toString());
					String triggeringPoint = ContextUtils.getRequestContext().getParameter(MailConstantsVO.REQ_TRIGGERPOINT);
					assignedFlightAuditVO.setTriggerPoint(triggeringPoint);
					performAssignedFlightAudit(assignedFlightAuditVO, assignedFlight,MailConstantsVO.EXPORT_FLIGHT_REOPEN);
						
					}	
					
					//Added as part of CRQ ICRD-93584 by A-5526 starts
					//Going to save MLD-UPL related info.
							/*operationalFlightVOs.add(operationalFlightVO);
					MailController mailController = (MailController)SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
					mailController.flagMLDForUpliftedMailbags(operationalFlightVOs);*/
					//new MLDController().flagMLDForUpliftedMailbags(operationalFlightVOs);
					//Added as part of CRQ ICRD-93584 by A-5526 ends
				}

				 /**
				 * @param operationalFlightVO
				 * @param mailAcceptanceVO
				 * @throws SystemException
			     * @throws ULDDefaultsProxyException
     * @author a-3251 SREEJITH P.C.
     */
    //Modified by A-7540
    @Raise(module = "mail", submodule = "operations", event = "FLIGHT_CLOSE_EVENT", methodId = "mail.operations.closeFlightAcceptance")
    public void closeFlightAcceptance(OperationalFlightVO operationalFlightVO, MailAcceptanceVO mailAcceptanceVO)
            throws SystemException, ULDDefaultsProxyException, CloseFlightException {

					log.entering(CLASS, "closeFlightAcceptance");

					/*
					 * Added by RENO K ABRAHAM
					 * Added for CR : AirNZ865 on 11 August 2008
					 * This CR is to check, whether any
					 * mailbag or despatch is not associated with an onward routing info.
					 * If any such found, exception should be thrown.
					 * This is implemented to cooperate with MRA module.
					 * START
					 */

					Collection<String> sysParameters = new ArrayList<String>();
					sysParameters.add(MailConstantsVO.CONSIGNMENT_ROUTING_NEEDED_FOR_EXPORT_CLOSEFLIGHT);
					HashMap<String, String> sysParameterMap = null;
					sysParameterMap = new SharedDefaultsProxy()
							.findSystemParameterByCodes(sysParameters);
					log.log(Log.FINE, " systemParameterMap ", sysParameterMap);
					if (sysParameterMap != null
							&& OperationalFlightVO.FLAG_YES.equals(sysParameterMap
									.get(MailConstantsVO.CONSIGNMENT_ROUTING_NEEDED_FOR_EXPORT_CLOSEFLIGHT))) {

            Collection<ContainerDetailsVO> containerDetails = mailAcceptanceVO.getContainerDetails();
            boolean canCloseFlight = true;
            if (containerDetails != null && containerDetails.size() > 0) {
                for (ContainerDetailsVO containerDtls : containerDetails) {
                    if (containerDtls.getDsnVOs() != null && containerDtls.getDsnVOs().size() > 0) {
                        for (DSNVO dSNVO : containerDtls.getDsnVOs()) {
                            if (DSNVO.FLAG_NO.equals(dSNVO.getRoutingAvl())) {
                                canCloseFlight = false;
											break;
										}
									}
								}
								/*if(containerDtls.getMailDetails()!=null && containerDtls.getMailDetails().size()>0){
									for(MailbagVO mailbagVO : containerDtls.getMailDetails()){
										if(mailbagVO.getConsignmentNumber()==null){
											canCloseFlight=false;
											break;
										}
									}
								}*/
                    if (!canCloseFlight) {
									break;
								}
							}
						}

            if (!canCloseFlight) {
							throw new CloseFlightException(
									CloseFlightException.ROUTING_UNAVAILABLE);
						}
					}
					//END OF CR : AirNZ865
					//closing flight
					closeFlight(operationalFlightVO);

					//Creating messageVO from mailAcceptanceVO and operationalFlightVO
					MailAlertMessageVO mailAlertMessageVO = new MailAlertMessageVO();
					mailAlertMessageVO.setCompanyCode(mailAcceptanceVO.getCompanyCode());
					mailAlertMessageVO.setCondatails(mailAcceptanceVO.getContainerDetails());
					mailAlertMessageVO.setDepartureDate(mailAcceptanceVO.getFlightDate());
					mailAlertMessageVO.setDeptport(mailAcceptanceVO.getPol());
        mailAlertMessageVO.setFlightnum(mailAcceptanceVO.getFlightCarrierCode() + SPACE + mailAcceptanceVO.getFlightNumber());
					mailAlertMessageVO.setRoute(operationalFlightVO.getFlightRoute());
					mailAlertMessageVO.setAirlinecode(operationalFlightVO.getOwnAirlineCode());

					//creating stations form route
        String st[] = operationalFlightVO.getFlightRoute().split("-");
					Collection<String> stations = new ArrayList<String>();
        for (int i = 0; i < st.length; i++) {
						stations.add(st[i]);
					}
					log
							.log(
									Log.FINE,
									"\n*******Stations to which the message is to be send are -------->\n",
									stations);
					mailAlertMessageVO.setStations(stations);
					log.log(Log.FINE, "\n*******Mail Alert Message VO -------->\n",
							mailAlertMessageVO);
					//		sendMailAlertMessage(mailAlertMessageVO,(ArrayList<String>)stations);
					log.exiting(CLASS, "closeFlightAcceptance");

				}

				/**
				 * @param mailbagEnquiryFilterVO
				 * @param pageNumber
				 * @return
				 * @throws SystemException
				 * @author a-1936 This method is used to find the MailBags
				 */
				public Page<MailbagVO> findMailbags(
						MailbagEnquiryFilterVO mailbagEnquiryFilterVO, int pageNumber)
						throws SystemException {
					log.entering(CLASS, "findMailbags");

					return Mailbag.findMailbags(mailbagEnquiryFilterVO, pageNumber);

				}

    /**
				 * @param despatchDetailsVOs
				 * @param mailbagVOs
				 * @param containerVO
				 * @param toPrintTransferManifest
				 * @return
				 * @throws SystemException
				 * @throws CapacityBookingProxyException
				 * @throws MailBookingException
     * @author a-2553
				 */
				public TransferManifestVO transferMail(Collection<DespatchDetailsVO> despatchDetailsVOs,
			Collection<MailbagVO> mailbagVOs, ContainerVO toContainerVO, String toPrintTransferManifest)
			throws SystemException, InvalidFlightSegmentException, CapacityBookingProxyException, MailBookingException,
			MailTrackingBusinessException {
					log.entering(CLASS, "transferMail");
		LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
					Collection<MailbagVO> mailbagVOsToTransfer =  new ArrayList<MailbagVO>();
					Collection<MailbagVO> mailbagVOsToTransferInSameCarrier =  new ArrayList<MailbagVO>();
        TransferManifestVO transferManifestVO = null;
					Collection<DespatchDetailsVO> despatchDetailsVOsToTransfer =  new ArrayList<DespatchDetailsVO>();
		if (mailbagVOs != null && !mailbagVOs.isEmpty()) {
            for (MailbagVO mailVO : mailbagVOs) {
							MailbagVO mailbagVO = new MailbagVO();
							BeanHelper.copyProperties(mailbagVO, mailVO);
							// "mailbagVOsToTransfer" is used for Transfer Manifest Print
							Mailbag mailbag=null;
							 try {
					                mailbag = Mailbag.findMailbag(constructMailbagPK(mailbagVO));
					            } catch (FinderException e) {
					                mailbag = null;
					            }
				if (mailbag != null
						&& ("MTK009".equals(mailVO.getMailSource()) || "MAIL ENQ".equals(mailVO.getMailSource()))
						&& mailbag.getScannedPort() != null
						&& !mailbag.getScannedPort().equals(logonAttributes.getAirportCode())) {
					throw new MailTrackingBusinessException(
							MailTrackingBusinessException.MAILTRACKING_MAILBAGNOTAVAILABLE);
							 }else {
					if (mailbag != null && (LIST_TRANSFER_MANIFEST_SCREENID.equals(mailVO.getMailSource())
							|| TRANSFER_END_FROM_OPS.equals(mailVO.getMailSource()))) {
						if (mailbagVOsToTransferInSameCarrier.stream().noneMatch(mail->mail.getMailSequenceNumber()==mailVO.getMailSequenceNumber())) {
									 	mailbagVOsToTransferInSameCarrier.add(mailbagVO);
								}
					} else if ("TRA_OUT"
							.equals(checkForMailBagTransferStatus(mailbagVO, toContainerVO, logonAttributes))
							&& ("MLD".equals(mailVO.getMailSource())
									|| MailConstantsVO.WS.equals(mailVO.getMailSource())|| mailOperationsTransferTransaction())) {
						if (mailbagVOsToTransfer.stream().noneMatch(mail->mail.getMailSequenceNumber()==mailVO.getMailSequenceNumber())) {
									 mailbagVOsToTransfer.add(mailbagVO);
						}
						if (mailbagVOsToTransferInSameCarrier.stream().noneMatch(mail->mail.getMailSequenceNumber()==mailVO.getMailSequenceNumber())) {
									 mailbagVOsToTransferInSameCarrier.add(mailbagVO);
								 }
						toContainerVO.setTransStatus(true);
					} else if ("TRA_OUT"
							.equals(checkForMailBagTransferStatus(mailbagVO, toContainerVO, logonAttributes))) {
						if (mailbagVOsToTransfer.stream().noneMatch(mail->mail.getMailSequenceNumber()==mailVO.getMailSequenceNumber())) {
									  mailbagVOsToTransfer.add(mailbagVO);
								       }
					} else {
						if (mailbagVOsToTransferInSameCarrier.stream().noneMatch(mail->mail.getMailSequenceNumber()==mailVO.getMailSequenceNumber())) {
								    	mailbagVOsToTransferInSameCarrier.add(mailbagVO);
						}
								    }
							 }
						}
						/*
						 * Transferring Mailbags
						 */
            if(mailbagVOsToTransferInSameCarrier!=null &&!mailbagVOsToTransferInSameCarrier.isEmpty()){
            try {
					MailController mailController = (MailController) SpringAdapter.getInstance()
							.getBean(MAIL_CONTROLLER_BEAN);
                mailController.transferMailbags(mailbagVOsToTransferInSameCarrier, toContainerVO);
            } catch (SystemException e) {
                if ((e.getMessage().contains("No such persistent instance"))) {
						throw new MailTrackingBusinessException(
								MailTrackingBusinessException.MAILTRACKING_MAILBAGNOTAVAILABLE);
                } else {
                    throw new SystemException(e.getMessage(), e);
                }
              }
            }
        }
        if (despatchDetailsVOs != null && despatchDetailsVOs.size() > 0) {
            for (DespatchDetailsVO despatchDetailsVO : despatchDetailsVOs) {
							DespatchDetailsVO dsespatchDtlsVO = new DespatchDetailsVO();
							BeanHelper.copyProperties(dsespatchDtlsVO, despatchDetailsVO);
				// "despatchDetailsVOsToTransfer" is used for Transfer Manifest
				// Print
							despatchDetailsVOsToTransfer.add(dsespatchDtlsVO);
						}
						/*
						 * Transferring Despatches
						 */
						//transferDespatches(despatchDetailsVOs, toContainerVO);
					}
					/*
					 * Transfer Manifest Preparation
					 */

		if ((MailConstantsVO.FLAG_YES.equals(toPrintTransferManifest)
				|| MailConstantsVO.FLAG_SCANNED.equals(toPrintTransferManifest))
						&&((mailbagVOsToTransfer != null && mailbagVOsToTransfer.size() > 0)
								|| (despatchDetailsVOsToTransfer != null && despatchDetailsVOsToTransfer.size() > 0))) {

							/*
			 * Code Logic : 1. Group the Mailbag(s)/Despatch(es) according to
			 * the Incoming Flight details and keep in MAP with flight details
			 * as Key . 2. Capture the Flight details to a SET so that flight
			 * details wont repeat, this is used as the key in MAP 3. Take each
			 * key from the SET and get corresponding Mailbag(s)/Despatch(es)
			 * from MAP 4. Group Mailbag(s)/Despatch(es) as DSNVOs 5. Generate
			 * Manifest.
							 */
                Map<String, Collection<MailbagVO>> groupedMailbagDetails = new HashMap<String, Collection<MailbagVO>>();
                Map<String, Collection<DespatchDetailsVO>> groupedDespatchDetailsVO = new HashMap<String, Collection<DespatchDetailsVO>>();
							Set<String> flightKeySet = new HashSet<String>();

			if (mailbagVOsToTransfer != null && !mailbagVOsToTransfer.isEmpty()) {
								String flightKey = null;
                    for (MailbagVO mailVO : mailbagVOsToTransfer) {
					
						flightKey = new StringBuilder().append(mailVO.getCarrierCode()).append(ID_SEP)
								.append(mailVO.getFlightNumber()).append(ID_SEP)
								.append(mailVO.getFlightDate() != null
										? mailVO.getFlightDate().toDisplayDateOnlyFormat() : "")
												.append(ID_SEP)
												.append(mailVO.getFlightSequenceNumber()>0?mailVO.getFlightSequenceNumber():"")
												.append(ID_SEP)
								.append(mailVO.getSegmentSerialNumber() > 0 ? mailVO.getSegmentSerialNumber() : "")
								.toString();
                        if (!groupedMailbagDetails.containsKey(flightKey)) {
										flightKeySet.add(flightKey);
										Collection<MailbagVO> mailCollection = new ArrayList<MailbagVO>();
										mailCollection.add(mailVO);
										groupedMailbagDetails.put(flightKey, mailCollection);
                        } else {
										Collection<MailbagVO> mailbagCollection = groupedMailbagDetails.get(flightKey);
										mailbagCollection.add(mailVO);
									}
					
				}
			}
			if (despatchDetailsVOsToTransfer != null && !despatchDetailsVOsToTransfer.isEmpty()) {
								String flightKey = null;
                    for (DespatchDetailsVO despatchDtlsVO : despatchDetailsVOsToTransfer) {
					flightKey = new StringBuilder().append(despatchDtlsVO.getCarrierCode()).append(ID_SEP)
							.append(despatchDtlsVO.getFlightNumber()).append(ID_SEP)
												.append(despatchDtlsVO.getFlightDate().toDisplayDateOnlyFormat()).toString();
                        if (!groupedDespatchDetailsVO.containsKey(flightKey)) {
										flightKeySet.add(flightKey);
										Collection<DespatchDetailsVO> despatchCollection = new ArrayList<DespatchDetailsVO>();
										despatchCollection.add(despatchDtlsVO);
										groupedDespatchDetailsVO.put(flightKey, despatchCollection);
                        } else {
										Collection<DespatchDetailsVO> despatchDtlsCollection = groupedDespatchDetailsVO.get(flightKey);
										despatchDtlsCollection.add(despatchDtlsVO);
									}
								}
							}
							/*
							 * Generating Transfer Manifest for Each Incomming Flight.
							 */
                if (flightKeySet != null && flightKeySet.size() > 0) {
                    for (String flightKey : flightKeySet) {
									String[] keys = flightKey.split(ID_SEP);
									String carrierCode = null;
									String flightNumber = null;
									String flightDate = null;
									String flightSeqNum=null;
									String segSerNum=null;
                        if (keys != null && keys.length > 0) {
										carrierCode = keys[0];
										flightNumber = keys[1];
										if(keys.length>2){
										flightDate = keys[2];
											flightSeqNum=keys[3];
											if(keys.length >4){
											segSerNum=keys[4];
											}
											}
										toContainerVO.setFromCarrier(carrierCode);
										toContainerVO.setFromFltNum(flightNumber);
											toContainerVO.setFrmFltSeqNum(flightSeqNum!=null && flightSeqNum.length() > 0?Long.parseLong(flightSeqNum):-1);
											toContainerVO.setFrmSegSerNum(segSerNum!=null && segSerNum.length() > 0?Integer.parseInt(segSerNum):-1);
								   if (flightDate!=null && flightDate.trim().length()>0){
							toContainerVO.setFromFltDat(
									new LocalDate(LocalDate.NO_STATION, Location.NONE, false).setDate(flightDate));
								   }
									}
									Collection<MailbagVO> mailbags = null;
									Collection<DespatchDetailsVO> despatchDetails = null;
                        if (groupedMailbagDetails != null && groupedMailbagDetails.size() > 0) {
										mailbags = groupedMailbagDetails.get(flightKey);
									}
                        if (groupedDespatchDetailsVO != null && groupedDespatchDetailsVO.size() > 0) {
										despatchDetails = groupedDespatchDetailsVO.get(flightKey);
									}
									/*
					 * Generating Transfer Maifest If coming from the webscreens
					 * for transfermanifestgeneration :isPrintingNeeded - true
					 * If coming from the Upload Mail Details Screen for
					 * transferring to otherAirline : isPrintingNeeded - false
									 */

									 boolean isPrintingNeeded = true;
                        if (MailConstantsVO.FLAG_SCANNED.equals(toPrintTransferManifest)) {
										 isPrintingNeeded = false;
									 }
                      //partial transfer
                        if(mailbags!=null && !mailbags.isEmpty()){
                        	for (MailbagVO mailbagVO:mailbags){
                        	  if(mailbagVO.getMailSequenceNumber()>0){
                        		 String transferManifestId =null;
                        		 try {
									transferManifestId = constructDAO().findTransferManifestId(
											mailbagVO.getCompanyCode(), mailbagVO.getMailSequenceNumber());
								} catch (PersistenceException e) {
									e.getMessage();
								}
                        		if (transferManifestId!=null && transferManifestId.trim().length()>0){
                        			  TransferManifestDSN transferManifestDSN=null;
                        			  TransferManifestDSNPK transferManifestDSNPK=new TransferManifestDSNPK();
                        			  transferManifestDSNPK.setCompanyCode(mailbagVO.getCompanyCode());
                        			  transferManifestDSNPK.setTransferManifestId(transferManifestId);
                        			  transferManifestDSNPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                        			  try {
										transferManifestDSN=TransferManifestDSN.find(transferManifestDSNPK);
									} catch (FinderException e) {
										e.getMessage();
									}
                        			if (transferManifestDSN!=null){
                        				transferManifestDSN.setTransferStatus(TRANSER_STATUS_REJECT);
                        			}
                        		}
                        	  }
                        	}
                        }//partial transfer
					transferManifestVO = generateTransferManifest(despatchDetails, mailbags, toContainerVO,
							isPrintingNeeded);
					try {
					PersistenceController.getEntityManager().flush();
					} catch (PersistenceException e) {
						throw new SystemException(e.getMessage(),e);	
					}
					MailController mailController = (MailController) SpringAdapter.getInstance()
							.getBean(MAIL_CONTROLLER_BEAN);
					if(!mailOperationsTransferTransaction())
					{
                        mailController.flagHistoryforTransferInitiation(mailbags);
                    }
								}
							}

						}
						if (mailbagVOs != null && mailbagVOs.size() > 0) {
				            for (MailbagVO mailVO : mailbagVOs) {
				if ("TRA_OUT".equals(checkForMailBagTransferStatus(mailVO, toContainerVO, logonAttributes))
						&& ("MLD".equals(mailVO.getMailSource()) || MailConstantsVO.WS.equals(mailVO.getMailSource())
								|| TRANSFER_END_FROM_OPS.equals(mailVO.getMailSource())||mailOperationsTransferTransaction())) {
				            		 String transferManifestId =null;
				             		 try {
						transferManifestId = constructDAO().findTransferManifestId(mailVO.getCompanyCode(),
								mailVO.getMailSequenceNumber());
				            			} catch (PersistenceException e) {
				            				e.getMessage();
				            			}
				             		if (transferManifestId!=null && transferManifestId.trim().length()>0){
				             			  TransferManifestDSN transferManifestDSN=null;
				             			  TransferManifestDSNPK transferManifestDSNPK=new TransferManifestDSNPK();
				             			  transferManifestDSNPK.setCompanyCode(mailVO.getCompanyCode());
				             			  transferManifestDSNPK.setTransferManifestId(transferManifestId);
				             			  transferManifestDSNPK.setMailSequenceNumber(mailVO.getMailSequenceNumber());
				             			  try {
				            					transferManifestDSN=TransferManifestDSN.find(transferManifestDSNPK);
				            				} catch (FinderException e) {
				            					e.getMessage();
				            				}
				             			if (transferManifestDSN!=null){
				             				transferManifestDSN.setTransferStatus("TRFEND");
				             			}
				            	  TransferManifestPK transferManifestPK=new TransferManifestPK();
					transferManifestPK.setCompanyCode(mailVO.getCompanyCode());
					transferManifestPK.setTransferManifestId(transferManifestId);
				            	  TransferManifest trasferManifest=new TransferManifest();
				            	  try {
				            			 trasferManifest=TransferManifest.find(transferManifestPK);
				            		} catch (FinderException e) {
				            			log.log(Log.INFO,e.getMessage());
				            		}
				            		trasferManifest.setTransferStatus("TRFEND");
				            		LocalDate trfDate = new LocalDate(transferManifestVO.getAirPort(), Location.ARP, true);
				            		trasferManifest.setTransferDate(trfDate);
				             		}
						 }
                        	}
						}

					
					log.exiting(CLASS, "transferMail");
					return transferManifestVO;
				}



				/**
				 * @param mailbagVOs
				 * @param containerVO
				 * @throws SystemException
				 * @throws InvalidFlightSegmentException
				 * @throws CapacityBookingProxyException
				 * @throws MailBookingException
				 */
                @Raise(module = "mail", submodule = "operations", event = "ASSIGNED_TOFLIGHT_EVENT", methodId = "mail.operations.transferMailbags", enablecontext="true")
				public void transferMailbags(Collection<MailbagVO> mailbagVOs,
						ContainerVO containerVO) throws SystemException,
						InvalidFlightSegmentException, CapacityBookingProxyException, MailBookingException {
					log.entering(CLASS, "transferMailbags");
					new MailTransfer().transferMailbags(mailbagVOs, containerVO);
					if (containerVO.getContainerNumber() != null) {
						OperationalFlightVO toFlightVO = constructOperationalFlightVO(containerVO);
						Collection<ContainerVO> containerVOs=new ArrayList<>();
						containerVOs.add(containerVO);
						calculateContentID(containerVOs, toFlightVO);
						updateContainerAcceptance(containerVO,mailbagVOs);
					}

					log.exiting(CLASS, "transferMailbags");
				}

				private void updateContainerAcceptance(ContainerVO toContainerVO,Collection<MailbagVO> mailbagVOs)
						throws SystemException {
					log.entering(CLASS, "updateContainerAcceptance");
					LogonAttributes logon = ContextUtils.getSecurityContext()
							.getLogonAttributesVO();

					ContainerPK containerPk = new ContainerPK();
					containerPk.setCompanyCode(toContainerVO.getCompanyCode());
					containerPk.setContainerNumber(toContainerVO.getContainerNumber());
					containerPk.setAssignmentPort(toContainerVO.getAssignedPort());
					containerPk.setFlightNumber(toContainerVO.getFlightNumber());
					containerPk.setCarrierId(toContainerVO.getCarrierId());
					containerPk.setFlightSequenceNumber(toContainerVO
							.getFlightSequenceNumber());
					containerPk.setLegSerialNumber(toContainerVO.getLegSerialNumber());

					Container container = null;
					try {
						container = Container.find(containerPk);
					} catch (FinderException ex) {
						throw new SystemException(ex.getMessage(), ex);
					}

					// flag resdist
					String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
        if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
						log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
					if (MailConstantsVO.FLAG_YES.equals(container.getPaBuiltFlag())
							&& MailConstantsVO.FLAG_NO
									.equals(container.getAcceptanceFlag())) {
						Collection<ContainerVO> containers = new ArrayList<ContainerVO>();
						containers.add(toContainerVO);
						Collection<ContainerDetailsVO> conts = constructConDetailsVOsForResdit(containers);
                MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
						mailController.flagResditsForULDAcceptance(conts, toContainerVO
								.getAssignedPort());
						/*new ResditController().flagResditsForULDAcceptance(conts, toContainerVO
										.getAssignedPort());*/
					}
					}
        			//Added for IASCB-44488 starts
                    String syncActualWeightToDWS = findSystemParameterValue(MailConstantsVO.SYNC_ACTUAL_WEIGHT_TO_DWS_FUNCTION_POINTS);
                    if (isNotNullAndEmpty(syncActualWeightToDWS) && syncActualWeightToDWS.contains(MailConstantsVO.MAIL_STATUS_TRANSFERRED)) {
                        Measure actualWeight = getContainerActualWeight(toContainerVO, mailbagVOs,container.getActualWeight());
                        if (actualWeight != null) {
                            container.setActualWeight(actualWeight.getSystemValue());
                            container.setActualWeightDisplayValue(actualWeight.getDisplayValue());
                            container.setActualWeightDisplayUnit(actualWeight.getDisplayUnit());
                            toContainerVO.setActualWeight(actualWeight);
                        }
                    }
                    //Added for IASCB-44488 ends

					container.setAcceptanceFlag(MailConstantsVO.FLAG_YES);
					if (logon.getOwnAirlineIdentifier() != container.getContainerPK().getCarrierId()
							&& MailConstantsVO.DESTN_FLT_STR.equals(container.getContainerPK().getFlightNumber())) {
						container.setTransitFlag(MailConstantsVO.FLAG_NO);	//ICRD-356336
					}
					if(container.getFirstMalbagAsgDat()==null){
					container.setFirstMalbagAsgDat(new LocalDate(toContainerVO.getAssignedPort(),
							Location.ARP, true));    
					}
                    container.setContentId(toContainerVO.getContentId());
					ContainerAuditVO containerAuditVO = new ContainerAuditVO(
							ContainerVO.MODULE, ContainerVO.SUBMODULE, ContainerVO.ENTITY);
					containerAuditVO.setActionCode(MailConstantsVO.AUDIT_CONACP);
					collectContainerAuditDetails(container, containerAuditVO);
					AuditUtils.performAudit(containerAuditVO);

					log.exiting(CLASS, "updateContainerAcceptance");
				}


				/**
     * @param dsns
     * @param toContainerVO
     * @throws SystemException
     * @author A-3227 RENO K ABRAHAM
				 */
				private TransferManifestVO generateTransferManifest(Collection<DespatchDetailsVO> despatchDetailsVOs,
                                                        Collection<MailbagVO> mailbagVOs, ContainerVO toContainerVO, boolean isPrintingNeeded)
				throws SystemException {
					log.entering(CLASS, "generateTransferManifest");
					/*
					 * Generating Transfer Manifest ID
					 */
					String id = new StringBuilder()
								.append(toContainerVO.getOwnAirlineCode())
								.append(toContainerVO.getCarrierCode()).toString();
					int transferManifestId =
						generateTransferManifestSeqNumber(toContainerVO.getCompanyCode(), id);
					log.log(Log.FINE, "!!!!!!!!!!!!!!!11id", id);
					log
							.log(Log.FINE, "!!!!!!!!!!!11transferManifestId",
									transferManifestId);
					/*
					 * Creating TransferManifestVO
					 */
					TransferManifestVO transferManifestVO = new TransferManifestVO();
					transferManifestVO.setCompanyCode(toContainerVO.getCompanyCode());
					transferManifestVO.setAirPort(toContainerVO.getAssignedPort());
					transferManifestVO.setTransferManifestId(new StringBuilder()
															.append(id)
															.append(String.valueOf(transferManifestId)).toString());
					log.log(Log.FINE, "TransferManifestId--->>>", transferManifestVO.getTransferManifestId());
					transferManifestVO.setTransferredFromCarCode(toContainerVO.getFromCarrier());
					transferManifestVO.setTransferredFromFltNum(toContainerVO.getFromFltNum());
					transferManifestVO.setToFltDat(toContainerVO.getFlightDate());
					transferManifestVO.setFromFltDat(toContainerVO.getFromFltDat());
					LocalDate trfDate = new LocalDate(transferManifestVO.getAirPort(), Location.ARP, true);
					transferManifestVO.setTransferredDate(trfDate);
					transferManifestVO.setTransferredToCarrierCode(toContainerVO.getCarrierCode());
					transferManifestVO.setTransferredToFltNumber(toContainerVO.getFlightNumber());
					transferManifestVO.setTransferredfrmFltSeqNum(toContainerVO.getFrmFltSeqNum());
					transferManifestVO.setTransferredfrmSegSerNum(toContainerVO.getFrmSegSerNum());

					/*
					 * Grouping DSNVOs
					 */
        Collection<DSNVO> dsns = makeDSNVOs(mailbagVOs, despatchDetailsVOs, toContainerVO);
					transferManifestVO.setDsnVOs(dsns);

					log.log(Log.FINE, "transferManifestVO--->>>", transferManifestVO);
					/*
					 * Populating Transfer Manifest Details
					 */
					if(toContainerVO.isTransStatus()){
						transferManifestVO.setStatus(MAIL_OPS_TRAEND);
					}
					new TransferManifest(transferManifestVO);
					AirlineValidationVO airlineValidationVO = null;

					try {
						airlineValidationVO = findAirlineDescription(toContainerVO
								.getCompanyCode(), toContainerVO.getCarrierCode());
					} catch (SharedProxyException e) {
						e.getMessage();
					}
					transferManifestVO.setToCarCodeDesc(airlineValidationVO.getAirlineName());

					try {
						airlineValidationVO = findAirlineDescription(toContainerVO
								.getCompanyCode(), toContainerVO.getFromCarrier());
					} catch (SharedProxyException e) {
						e.getMessage();
					}
					transferManifestVO.setFromCarCodeDesc(airlineValidationVO.getAirlineName());


			       /* if(isPrintingNeeded){
					ReportSpec reportSpec = new ReportSpec();
					reportSpec.addParameter(transferManifestVO);
					reportSpec.setData(transferManifestVO.getDsnVOs());
					reportSpec.setProductCode(PRODUCTCODE);
					reportSpec.setSubProductCode(SUBPRODUCTCODE);
					reportSpec.setPreview(true);
					reportSpec.setReportId(TRFMFT_REPORT_ID);
					ReportAgent.generateReport(reportSpec);
			        }*/
					log.exiting(CLASS, "generateTransferManifest");
			       return transferManifestVO;
				}

				/**
     * @param mailbagVOs
     * @param despatchDetailsVOs
     * @param toContainerVO
     * @return Collection<ContainerDetailsVO>
				 * @author a-2553 Mehtod to make DSN VOs
				 */
				private Collection<DSNVO> makeDSNVOs(Collection<MailbagVO> mailbagVOs,
						Collection<DespatchDetailsVO> despatchDetailsVOs,
						ContainerVO toContainerVO) {

					HashMap<String, DSNVO> dsnMap = new HashMap<String, DSNVO>();
					if (despatchDetailsVOs != null && despatchDetailsVOs.size() > 0) {
						for (DespatchDetailsVO despatchVO : despatchDetailsVOs) {
							int numBags = 0;
							double bagWgt = 0;
							int stdNumBags = 0;
							double stdBagWgt = 0;
							String outerpk = despatchVO.getOriginOfficeOfExchange()
									+ despatchVO.getDestinationOfficeOfExchange()
									// +despatchVO.getMailClass()
									// added by anitha for change in pk
									+ despatchVO.getMailCategoryCode()
									+ despatchVO.getMailSubclass() + despatchVO.getDsn()
									+ despatchVO.getYear();
							if (dsnMap.get(outerpk) == null) {
								DSNVO dsnVO = new DSNVO();
								dsnVO.setCompanyCode(toContainerVO.getCompanyCode());
								dsnVO.setDsn(despatchVO.getDsn());
								dsnVO.setOriginExchangeOffice(despatchVO
										.getOriginOfficeOfExchange());
								dsnVO.setDestinationExchangeOffice(despatchVO
										.getDestinationOfficeOfExchange());
								dsnVO.setMailClass(despatchVO.getMailClass());
								// added by anitha for change in pk
								dsnVO.setMailCategoryCode(despatchVO.getMailCategoryCode());
								dsnVO.setMailSubclass(despatchVO.getMailSubclass());
								dsnVO.setYear(despatchVO.getYear());
								dsnVO.setPltEnableFlag(DSNVO.FLAG_NO);
								for (DespatchDetailsVO innerVO : despatchDetailsVOs) {
									String innerpk = innerVO.getOriginOfficeOfExchange()
											+ innerVO.getDestinationOfficeOfExchange()
											// +innerVO.getMailClass()
											// added by anitha for change in pk
											+ innerVO.getMailCategoryCode()
											+ innerVO.getMailSubclass() + innerVO.getDsn()
											+ innerVO.getYear();
									if (outerpk.equals(innerpk)) {
										numBags = numBags + innerVO.getAcceptedBags();
										//bagWgt = bagWgt + innerVO.getAcceptedWeight();
                            if (innerVO.getAcceptedWeight() != null) {
										bagWgt = bagWgt + innerVO.getAcceptedWeight().getRoundedSystemValue();//added by A-7371
										}

										stdNumBags = stdNumBags + innerVO.getStatedBags();
										//stdBagWgt = stdBagWgt + innerVO.getStatedWeight();
                            if (innerVO.getStatedWeight() != null) {
										stdBagWgt = stdBagWgt + innerVO.getStatedWeight().getRoundedSystemValue();//added by A-7371
										}

									}
								}
								dsnVO.setBags(numBags);
								//dsnVO.setWeight(bagWgt);
                    dsnVO.setWeight(new Measure(UnitConstants.MAIL_WGT, bagWgt));//added by A-7371
								dsnVO.setStatedBags(stdNumBags);
								//dsnVO.setStatedWeight(stdBagWgt);
                    dsnVO.setStatedWeight(new Measure(UnitConstants.MAIL_WGT, stdBagWgt));//added by A-7371
								dsnMap.put(outerpk, dsnVO);
								numBags = 0;
								bagWgt = 0;
								stdNumBags = 0;
								stdBagWgt = 0;
							}
						}
					}
					if (mailbagVOs != null && mailbagVOs.size() > 0) {
						Collection<DSNVO> newDSNVOs = new ArrayList<DSNVO>();
						for (MailbagVO mailbagVO : mailbagVOs) {
							/*int numBags = 0;
							double bagWgt = 0;
							String outerpk = mailbagVO.getOoe() + mailbagVO.getDoe()
									+ (mailbagVO.getMailCategoryCode())
									+ mailbagVO.getMailSubclass()
									+ mailbagVO.getDespatchSerialNumber()
									+ mailbagVO.getYear();
							if (dsnMap.get(outerpk) == null) {*/
								DSNVO dsnVO = new DSNVO();
								dsnVO.setCompanyCode(toContainerVO.getCompanyCode());
								dsnVO.setDsn(mailbagVO.getDespatchSerialNumber());
								dsnVO.setOriginExchangeOffice(mailbagVO.getOoe());
								dsnVO.setDestinationExchangeOffice(mailbagVO.getDoe());
								dsnVO.setMailClass(mailbagVO.getMailSubclass().substring(0,
										1));
								dsnVO.setMailSubclass(mailbagVO.getMailSubclass());
								dsnVO.setMailCategoryCode(mailbagVO.getMailCategoryCode());
								dsnVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
								dsnVO.setYear(mailbagVO.getYear());
								dsnVO.setContainerNumber(toContainerVO.getContainerNumber());
								dsnVO.setPltEnableFlag(DSNVO.FLAG_YES);
								dsnVO.setBags(1);
								dsnVO.setWeight(mailbagVO.getWeight());
								newDSNVOs.add(dsnVO);
								/*for (MailbagVO innerVO : mailbagVOs) {
									String innerpk = innerVO.getOoe() + innerVO.getDoe()
											+ innerVO.getMailCategoryCode()
											+ (innerVO.getMailSubclass())
											+ innerVO.getDespatchSerialNumber()
											+ innerVO.getYear();
									if (outerpk.equals(innerpk)) {
										numBags = numBags + 1;
                            if (innerVO.getWeight() != null) {
										bagWgt = bagWgt + innerVO.getWeight().getRoundedSystemValue();//added by A-7371

									}
									}
								}
								dsnVO.setBags(numBags);
								//dsnVO.setWeight(bagWgt);
                    dsnVO.setWeight(new Measure(UnitConstants.MAIL_WGT, bagWgt));//added by A-7371
								dsnMap.put(outerpk, dsnVO);
								numBags = 0;
								bagWgt = 0;
							}*/
						}
						return	newDSNVOs;
					}

					Collection<DSNVO> newDSNVOs = new ArrayList<DSNVO>();
					for (String key : dsnMap.keySet()) {
						DSNVO dsnVO = dsnMap.get(key);
						newDSNVOs.add(dsnVO);
					}
					return newDSNVOs;
				}

				/**
				 * @param companyCode
				 * @param mailId
				 * @return
				 * @throws SystemException
				 */
				private int generateTransferManifestSeqNumber(String companyCode, String id)
						throws SystemException {
					log.entering(CLASS, "generateSerialNumber");
					Criterion criterion = KeyUtils.getCriterion(companyCode,
							TRANSFER_MANIFEST_KEY, id);
					criterion.setStartAt("1");
					criterion.setName(TRFMFT_KEYTABLE);
					return Integer.parseInt(KeyUtils.getKey(criterion));
				}


				/**
				 * This method is called during Transfer directly from Flight
				 *
				 * @param containerVOs
				 * @param operationalFlightVO
				 * @throws SystemException
				 * @throws ContainerAssignmentException
				 * @throws InvalidFlightSegmentException
				 * @throws ULDDefaultsProxyException
				 * @throws CapacityBookingProxyException
				 * @throws MailBookingException
				 */
                /**
                 * @param containerVOs
                 * @param operationalFlightVO
                 * @param printFlag
                 * @return
                 * @throws SystemException
                 * @throws ContainerAssignmentException
                 * @throws InvalidFlightSegmentException
                 * @throws ULDDefaultsProxyException
                 * @throws CapacityBookingProxyException
                 * @throws MailBookingException
                 */
                @Raise(module = "mail", submodule = "operations", event = "ASSIGNED_TOFLIGHT_EVENT", methodId = "mail.operations.transferContainers",enablecontext="true")
				public TransferManifestVO transferContainers(Collection<ContainerVO> containerVOs,
						OperationalFlightVO operationalFlightVO, String printFlag)
						throws SystemException, ContainerAssignmentException,
						InvalidFlightSegmentException, ULDDefaultsProxyException,
						CapacityBookingProxyException, MailBookingException, RemoteException {
					log.entering(CLASS, "transferContainers");
					Collection<ContainerDetailsVO> containerDetailsCollection = null;
					ContainerVO  containerVo = null;
					TransferManifestVO transferManifestVO = new TransferManifestVO();
					 Map<String, Object> transferOutMap=null;
					 Map<String, Object> contTransferMap=null;
					/**
					 * This method removes the inventory containers if any, before
					 * proceeding to perform transfer. Container can be in inventory if
					 * transfer happens after performing the arrival
					 */
        if (containerVOs != null && containerVOs.size() > 0) {
            containerVo = new ArrayList<ContainerVO>(containerVOs).get(0);
					}
        validateContainersForTransfer(containerVOs, operationalFlightVO);
        if (checkForContainerTransferOutStatus(operationalFlightVO.getCarrierCode())&&( mailOperationsTransferTransaction())){
        		operationalFlightVO.setTransferStatus(true);
			  transferManifestVO.setStatus(MAIL_OPS_TRAEND);
        	new MailTransfer().saveArrivalBeforeTransferOut(containerVOs, operationalFlightVO);
        	transferOutMap=new MailTransfer().transferContainers(
                    containerVOs, operationalFlightVO, printFlag);
			contTransferMap=transferOutMap;
        }else if (checkForContainerTransferOutStatus(operationalFlightVO.getCarrierCode())){
        	  transferOutMap= new MailTransfer().saveArrivalBeforeTransferOut(
                      containerVOs, operationalFlightVO);
           }
             else   	{
            	 contTransferMap=new MailTransfer().transferContainers(
                        containerVOs, operationalFlightVO, printFlag);
             }
        	if(Objects.nonNull(contTransferMap)) {
			saveScreeningConsginorDetails(contTransferMap);
             }
					/*
					 * FOR TRANSFER MANIFEST PRINT
					 */
					AirlineValidationVO fromAirlineValidationVo = null;
					AirlineValidationVO toAirlineValidationVo = null;
					//Modified as part of bug IASCB-71597 by A-5526
					if (transferOutMap!=null && transferOutMap.get(MailConstantsVO.CONST_CONTAINER_DETAILS) != null) {
						containerDetailsCollection = (Collection<ContainerDetailsVO>) transferOutMap
								.get(MailConstantsVO.CONST_CONTAINER_DETAILS);

						transferManifestVO.setDsnVOs(new ArrayList<DSNVO>());
						for (ContainerDetailsVO container : containerDetailsCollection) {
							if (container.getDsnVOs() != null
									&& !container.getDsnVOs().isEmpty()) {
								transferManifestVO.getDsnVOs()
										.addAll(container.getDsnVOs());
								//partial transfer
								  for(DSNVO dsnVO:container.getDsnVOs() ){
									  if(dsnVO.getMailSequenceNumber()>0){
			                        		 String transferManifestId =null;
			                        		 try {
												transferManifestId= constructDAO().findTransferManifestId(dsnVO.getCompanyCode(), dsnVO.getMailSequenceNumber());
											} catch (PersistenceException e) {
												e.getMessage();
											}
			                        		if (transferManifestId!=null && transferManifestId.trim().length()>0){
			                        			  TransferManifestDSN transferManifestDSN=null;
			                        			  TransferManifestDSNPK transferManifestDSNPK=new TransferManifestDSNPK();
			                        			  transferManifestDSNPK.setCompanyCode(dsnVO.getCompanyCode());
			                        			  transferManifestDSNPK.setTransferManifestId(transferManifestId);
			                        			  transferManifestDSNPK.setMailSequenceNumber(dsnVO.getMailSequenceNumber());
			                        			  try {
													transferManifestDSN=TransferManifestDSN.find(transferManifestDSNPK);
												} catch (FinderException e) {
													e.getMessage();
												}
			                        			if (transferManifestDSN!=null){
			                        				transferManifestDSN.setTransferStatus(TRANSER_STATUS_REJECT);
			                        			}
			                        		}
			                        	}

						           }//partial transfer
							}
						}
						transferManifestVO.setCompanyCode(operationalFlightVO
								.getCompanyCode());
						transferManifestVO.setAirPort(operationalFlightVO.getPol());
						/*
						 *	Generate the Key
						 */
            String key = new StringBuilder(
										operationalFlightVO.getOwnAirlineCode()).append(
										operationalFlightVO.getCarrierCode()).toString();
						int transferManifestId = generateTransferManifestSeqNumber(
                    operationalFlightVO.getCompanyCode(), key);
						// Set the other Fields Required ..
            transferManifestVO.setTransferManifestId(key + String.valueOf(transferManifestId));
						//Modified as part of ICRD-325757
                        if(containerVo.getCarrierCode()!=null){
						transferManifestVO.setTransferredFromCarCode(containerVo.getCarrierCode());
                        }
                        else{
                        	if(containerVo.getCarrierId()>0){
                        		AirlineValidationVO airlineValidationVO = null;
                            	    try{
                             	        	airlineValidationVO= new SharedAirlineProxy()
                        		     .findAirline(containerVo.getCompanyCode(), containerVo.getCarrierId());
                             	  }catch (SharedProxyException sharedProxyException) {
                             		 log.log(Log.INFO,sharedProxyException);
                             		sharedProxyException.getMessage();
                        		   } catch (SystemException ex) {
                        			   log.log(Log.INFO, ex);	  
                        			ex.getMessage();     
                        		   }
                            	    transferManifestVO.setTransferredFromCarCode(airlineValidationVO.getAlphaCode());
                        	}
                        	else{
                        		 transferManifestVO.setTransferredFromCarCode(operationalFlightVO.getOwnAirlineCode());
                        	}
                        }
						LocalDate date = new LocalDate(
								transferManifestVO.getAirPort(), Location.ARP, true);
						transferManifestVO.setTransferredDate(date);
						transferManifestVO.setTransferredToCarrierCode(operationalFlightVO
								.getCarrierCode());
						transferManifestVO.setTransferredToFltNumber(operationalFlightVO
								.getFlightNumber());
						transferManifestVO.setTransferredFromFltNum(containerVo.getFlightNumber());
						if(containerVo.getFlightNumber()!=null&& containerVo.getFlightSequenceNumber()>0){
					    	   FlightFilterVO flightFilterVO = new FlightFilterVO();
								 flightFilterVO.setCompanyCode(containerVo.getCompanyCode());
								 flightFilterVO.setFlightCarrierId(containerVo.getCarrierId());
								 flightFilterVO.setFlightNumber(containerVo.getFlightNumber());
								 flightFilterVO.setFlightSequenceNumber(containerVo.getFlightSequenceNumber());
					            Collection<FlightValidationVO> flightValidationVOs = validateFlight(flightFilterVO);
					           for(FlightValidationVO flightValidation : flightValidationVOs ){
					        	   containerVo.setFlightDate(flightValidation.getFlightDate());
					    		   }
						}
						transferManifestVO.setFromFltDat(containerVo.getFlightDate());
						transferManifestVO.setToFltDat(operationalFlightVO.getFlightDate());
						transferManifestVO.setLastUpdateUser(operationalFlightVO.getOperator());
						transferManifestVO.setLastUpdateTime(date);
						transferManifestVO.setTransferredfrmFltSeqNum(containerVo.getFlightSequenceNumber());
						transferManifestVO.setTransferredfrmSegSerNum(containerVo.getSegmentSerialNumber());
						try {
							fromAirlineValidationVo = findAirlineDescription(
									operationalFlightVO.getCompanyCode(),
									operationalFlightVO.getOwnAirlineCode());
						} catch (SharedProxyException e) {
							e.getMessage();
						}
						transferManifestVO.setFromCarCodeDesc(fromAirlineValidationVo
								.getAirlineName());
						try {
							toAirlineValidationVo = findAirlineDescription(
									operationalFlightVO.getCompanyCode(),
									operationalFlightVO.getCarrierCode());
						} catch (SharedProxyException e) {
							e.getMessage();
						}
						transferManifestVO.setToCarCodeDesc(toAirlineValidationVo
								.getAirlineName());
			            new TransferManifest(transferManifestVO);
						/*ReportSpec reportSpec = new ReportSpec();
						reportSpec.addParameter(transferManifestVO);
						reportSpec.setData(transferManifestVO.getDsnVOs());
						reportSpec.setProductCode(PRODUCTCODE);
						reportSpec.setSubProductCode(SUBPRODUCTCODE);
						reportSpec.setPreview(true);
						reportSpec.setReportId(TRFMFT_REPORT_ID);
						ReportAgent.generateReport(reportSpec);*/
			            for (ContainerDetailsVO container : containerDetailsCollection) {
				            Collection<MailbagVO> mailbagVOs=new ArrayList<>();
			            for(DSNVO dsnVO:container.getDsnVOs() ){
			            	 MailbagPK mailbagPK =new MailbagPK();
			         	    mailbagPK.setCompanyCode(transferManifestVO.getCompanyCode());
			         	    mailbagPK.setMailSequenceNumber(dsnVO.getMailSequenceNumber());
			         	   Mailbag mailbag=new Mailbag();
			         	   try {
			         		mailbag =Mailbag.find(mailbagPK);
			         	} catch (FinderException e) {
			         		log.log(Log.INFO,e.getMessage());
			         	}
			         	  MailbagVO mailbagvo=populateMailbagVofromMailbag(mailbag,transferManifestVO);
			         	 updateTransferOutDetailsForHistory(mailbagvo, transferManifestVO);
			         	 if(operationalFlightVO.getPou()!=null) {
			         		mailbagvo.setPou(operationalFlightVO.getPou()); 
			         	 }
			         	mailbagVOs.add(mailbagvo);

			            }
			            MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
			            if(!operationalFlightVO.isTransferStatus()) {
                        mailController.flagHistoryforTransferInitiation(mailbagVOs);
			            }
			            }
					}
					return transferManifestVO;
				}

				/**
				 * This method validates the container assignment at this port. Also it
				 * removes any destn assigned Containers so tht they'll be moved out of this
				 * airport Revision 2 12-Sep-2007 Oct 12, 2006, a-1739
				 *
				 * @param containerVOs
				 * @param operationalFlightVO
				 * @throws SystemException
				 * @throws ContainerAssignmentException
				 */
				private void validateContainersForTransfer(
						Collection<ContainerVO> containerVOs,
						OperationalFlightVO operationalFlightVO) throws SystemException,
						ContainerAssignmentException {
					log.entering(CLASS, "validateContainersForTransfer");

					Collection<ContainerVO> containersToRemove = new ArrayList<ContainerVO>();

					for (ContainerVO containerVO : containerVOs) {
						ContainerAssignmentVO containerAssignmentVO = Container
								.findContainerAssignment(containerVO.getCompanyCode(),
										containerVO.getContainerNumber(),
										operationalFlightVO.getPol());
						if (containerAssignmentVO != null) {
							if (containerAssignmentVO.getFlightSequenceNumber() > 0) {
								if (operationalFlightVO.getFlightSequenceNumber() > 0) {
									if (containerAssignmentVO.getCarrierId() != operationalFlightVO
											.getCarrierId()
											|| containerAssignmentVO
													.getFlightSequenceNumber() != operationalFlightVO
													.getFlightSequenceNumber()
											|| !containerAssignmentVO.getFlightNumber()
													.equals(
															operationalFlightVO
																	.getFlightNumber())) {
                            if (containerAssignmentVO.getTransitFlag() != null) {
                                if (!MailConstantsVO.FLAG_NO.equals(containerAssignmentVO.getTransitFlag())) {
										// diff flight -> this flight
										throw new ContainerAssignmentException(
												ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,
                                            new String[]{new StringBuilder().append(
														containerAssignmentVO
																.getCarrierCode()).append(
																		SPACE).append(
														containerAssignmentVO
																.getFlightNumber()).append(
																		SPACE).append(
														containerAssignmentVO
																.getFlightDate()
																.toDisplayDateOnlyFormat())
                                                    .toString()});
                                }
                            }
									}
								} else {
									// diff flight -> this destn
                        if (containerAssignmentVO.getTransitFlag() != null) {
                            if (!MailConstantsVO.FLAG_NO.equals(containerAssignmentVO.getTransitFlag())) {
									throw new ContainerAssignmentException(
											ContainerAssignmentException.CON_ASSIGNEDTO_DIFFFLT,

                                        new String[]{new StringBuilder()
													.append(
															containerAssignmentVO
																	.getCarrierCode())
													.append(SPACE)
													.append(
															containerAssignmentVO
																	.getFlightNumber())
													.append(SPACE)
													.append(
															containerAssignmentVO
																	.getFlightDate()
																	.toDisplayDateOnlyFormat())
                                                .toString()});
                            }
                        }
                    }
							} else {
								// container exists in ARP
								ContainerVO containerToRem = new ContainerVO();
								BeanHelper.copyProperties(containerToRem, containerVO);
								containerToRem
										.setFlightSequenceNumber(containerAssignmentVO
												.getFlightSequenceNumber());
								containerToRem.setFlightNumber(containerAssignmentVO
										.getFlightNumber());
								containerToRem.setLegSerialNumber(containerAssignmentVO
										.getLegSerialNumber());
								containerToRem.setAcceptanceFlag(containerAssignmentVO
										.getAcceptanceFlag());
								containerToRem.setPou(containerAssignmentVO.getPou());
								containerToRem.setFinalDestination(containerAssignmentVO
										.getDestination());
								containerToRem.setAssignedPort(containerAssignmentVO
										.getAirportCode());
								//Added by A-8527 for IASCB-56563
								if(containerAssignmentVO.getFlightDate()!=null){
								containerToRem.setFlightDate(containerAssignmentVO.getFlightDate());
								}
								containersToRemove.add(containerToRem);

								// if(operationalFlightVO.getFlightSequenceNumber() ==
								// MailConstantsVO.DESTN_FLT) {
								// //diff destn -> this destn
								// if(containerAssignmentVO.getCarrierId() !=
								// operationalFlightVO.getCarrierId()) {
								// throw new ContainerAssignmentException(
								// ContainerAssignmentException.
								// CON_ASSIGNEDTO_DIFFDESTN,
								// new String[] {containerAssignmentVO.
								// getCarrierCode()});
								// }
								// } else {
								// //diff detn-> this lfight
								// throw new ContainerAssignmentException(
								// ContainerAssignmentException.
								// CON_ASSIGNEDTO_DIFFDESTN,
								// new String[] {containerAssignmentVO.getCarrierCode()}
								// );
								// }
							}
						}
					}

					if (containersToRemove != null && containersToRemove.size() > 0) {
						log
								.log(Log.FINEST, "containers to be removed ",
										containersToRemove);
						new ReassignController().reassignContainerFromDestToDest(
								containersToRemove, null);
					}
					log.exiting(CLASS, "validateContainersForTransfer");
				}


					/**
					 * @param reportSpec
					 * @return
					 * @throws SystemException
					 * @throws ReportGenerationException
					 */
					public Map<String, Object> generateFindMailbagHistoriesReport(
							ReportSpec reportSpec) throws SystemException,
							ReportGenerationException {
						log.entering(CLASS, "generateFindMailbagHistoriesReport");
						OneTimeVO oneTimeVO = (OneTimeVO) reportSpec.getFilterValues()
								.iterator().next();
						//reportSpec.addParameter(oneTimeVO);
					 Long mailSeqNum = Long.parseLong(oneTimeVO.getFieldValue()); /*added by A-8149 for ICRD-248207*/
						MailbagHistoryVO VO = new MailbagHistoryVO();//Added by a-7871 for ICRD-227460
					try{
							Collection<MailbagHistoryVO> mailBagHistoryVOs=Proxy.getInstance().get(MailOperationsProxy.class).findMailbagHistories(oneTimeVO.getCompanyCode(), oneTimeVO.getFieldType(), mailSeqNum);
						reportSpec.setData(mailBagHistoryVOs);
							//Added by a-7871 for ICRD-227460 inorder to fetch malbagHistoryVO when mailstatus is Cardit and else wise.
        if (mailBagHistoryVOs.size() > 1) {
            for (MailbagHistoryVO mailbaghisVO : mailBagHistoryVOs) {
                if (!(mailbaghisVO.getMailStatus().equals(MailConstantsVO.CARDIT_EVENT))) {
                    VO = mailbaghisVO;
                    break;
                }
            }

        } else {
            VO = mailBagHistoryVOs.iterator().next();
						}

					} catch (ProxyException e) {
						throw new SystemException(e.getMessage(),e);
						}
						reportSpec.addParameter(VO);//Added by a-7871 for ICRD-227460

						LogonAttributes logon = ContextUtils.getSecurityContext()
								.getLogonAttributesVO();
						String companyCode = logon.getCompanyCode().toUpperCase();
						Map hashMap = null;

						Collection<String> oneTimeList = new ArrayList<String>();

						oneTimeList.add(MAIL_STATUS);
						try {

							hashMap = new SharedDefaultsProxy().findOneTimeValues(companyCode,
									oneTimeList);
							log.log(Log.FINEST, "\n hash map******************", hashMap);

						} catch (ProxyException proxyException) {
							throw new SystemException(proxyException.getMessage());
						}
						reportSpec.addExtraInfo(hashMap);
						reportSpec.addExtraInfo(logon.getAirportCode());
						return ReportAgent.generateReport(reportSpec);
					}

	/**
	 * @param postalAdministrationVO
	 * @throws SystemException
	 * @throws SharedProxyException
	 */
	public void savePACode(PostalAdministrationVO postalAdministrationVO)
			throws SystemException, SharedProxyException {
		PostalAdministration postalAdministration = null;
        String STATUS_NEW = "NEW";

		if (postalAdministrationVO.getOperationFlag() != null
				&& !OPERATION_FLAG_DELETE.equals(postalAdministrationVO
						.getOperationFlag())) {
			String countryCode = postalAdministrationVO.getCountryCode();
			Collection<String> countryCodes = new ArrayList<String>();
			countryCodes.add(countryCode);

			//new SharedAreaProxy().validateCountryCodes(postalAdministrationVO
			//		.getCompanyCode(), countryCodes);
		}

		if (PostalAdministrationVO.OPERATION_FLAG_INSERT
				.equals(postalAdministrationVO.getOperationFlag())) {
			log.log(Log.INFO, "!!!!   INSERT   !!!!!!!!!!!!!!!!!!!");
			postalAdministrationVO.setStatus(STATUS_NEW);
			new PostalAdministration(postalAdministrationVO);
		}
		if (PostalAdministrationVO.OPERATION_FLAG_UPDATE
				.equals(postalAdministrationVO.getOperationFlag())) {
			log.log(Log.INFO, "!!!!   UPDATE   !!!!!!!!!!!!!!!!!!!");

			try {
				postalAdministration = PostalAdministration.find(
						postalAdministrationVO.getCompanyCode(),
						postalAdministrationVO.getPaCode());
				postalAdministration.update(postalAdministrationVO);
			} catch (FinderException ex) {
				throw new SystemException(ex.getErrorCode(), ex);
			}

		}
		if (PostalAdministrationVO.OPERATION_FLAG_DELETE
				.equals(postalAdministrationVO.getOperationFlag())) {
			log.log(Log.INFO, "!!!!   DELETE   !!!!!!!!!!!!!!!!!!!");
			try {
				postalAdministration = PostalAdministration.find(
						postalAdministrationVO.getCompanyCode(),
						postalAdministrationVO.getPaCode());
				postalAdministration.setLastUpdateTime(postalAdministrationVO
						.getLastUpdateTime());
			} catch (FinderException ex) {
				throw new SystemException(ex.getErrorCode(), ex);
			}
			try {
				postalAdministration.remove();
			} catch (RemoveException ex) {
				throw new SystemException(ex.getMessage(), ex);
			}
		}
	}

	/**
	 * This method is used to save office of Exchange Code A-1739
     *
	 * @param officeOfExchangeVOs
	 * @throws SystemException
	 * @throws RemoveException
	 * @throws OfficeOfExchangeException
	 */
	public void saveOfficeOfExchange(
			Collection<OfficeOfExchangeVO> officeOfExchangeVOs)
			throws SystemException, RemoveException, OfficeOfExchangeException {
		OfficeOfExchange officeOfExchange = null;
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		StringBuilder code = new StringBuilder();
		for (OfficeOfExchangeVO officeOfExchangeVO : officeOfExchangeVOs) {
			if (OfficeOfExchangeVO.OPERATION_FLAG_INSERT
					.equals(officeOfExchangeVO.getOperationFlag())) {
				log.log(Log.INFO, "!!!!   INSERT   !!!!!!!!!!!!!!!!!!!");
				try {
					officeOfExchange = OfficeOfExchange.find(officeOfExchangeVO
							.getCompanyCode(), officeOfExchangeVO.getCode());
					if (officeOfExchange != null) {
						if (code.length() == 0) {
							code = new StringBuilder(String
									.valueOf(officeOfExchangeVO.getCode()));
						} else {
							code = code.append(",").append(
									officeOfExchangeVO.getCode());
						}

					}
				} catch (FinderException finderException) {
					// validate city and country
					new OfficeOfExchange()
							.validateNewOfficeOfExchange(officeOfExchangeVO);

					log.log(Log.INFO,
							"!!!!   INSERT  inside catch..CREATE !!!!!!!");
					new OfficeOfExchange(officeOfExchangeVO);
				}

			} else if (OfficeOfExchangeVO.OPERATION_FLAG_UPDATE
					.equals(officeOfExchangeVO.getOperationFlag())) {
				log.log(Log.INFO, "!!!!   UPDATE   !!!!!!!!!!!!!!!!!!!");

				try {
					officeOfExchange = OfficeOfExchange.find(officeOfExchangeVO
							.getCompanyCode(), officeOfExchangeVO.getCode());
				} catch (FinderException ex) {
					throw new SystemException(ex.getErrorCode(), ex);
				}
				// validate city and country
				new OfficeOfExchange()
						.validateNewOfficeOfExchange(officeOfExchangeVO);
				officeOfExchange.update(officeOfExchangeVO);
			} else if (OfficeOfExchangeVO.OPERATION_FLAG_DELETE
					.equals(officeOfExchangeVO.getOperationFlag())) {
				try {
					officeOfExchange = OfficeOfExchange.find(officeOfExchangeVO
							.getCompanyCode(), officeOfExchangeVO.getCode());
					officeOfExchange.setLastUpdateTime(officeOfExchangeVO
							.getLastUpdateTime());
				} catch (FinderException ex) {
					throw new SystemException(ex.getErrorCode(), ex);
				}
				officeOfExchange.remove();

			}
		}
		if (code.length() > 0) {
			log.log(Log.INFO, "!!!!!!!!!!ERRORDATA!!!!!!!!!!!!!!", code.toString());
            throw new OfficeOfExchangeException(OfficeOfExchangeException.OFFICEOFEXCHANGE_ALREADY_EXISTS, new String[]{code.toString()});

		}

	}

	/**
	 * This method is used to save Mail sub class codes A-2037
	 *
	 * @param mailSubClassVOs
	 * @throws SystemException
	 * @throws RemoveException
	 * @throws MailSubClassException
	 */
	public void saveMailSubClassCodes(Collection<MailSubClassVO> mailSubClassVOs)
			throws SystemException, RemoveException, MailSubClassException {
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		StringBuilder code = new StringBuilder();
		MailSubClass mailSubClass = null;
		for (MailSubClassVO mailSubClassVO : mailSubClassVOs) {
			if (MailSubClassVO.OPERATION_FLAG_INSERT.equals(mailSubClassVO
					.getOperationFlag())) {
				log.log(Log.INFO, "!!!!   INSERT   !!!!!!!!!!!!!!!!!!!");
				try {
					mailSubClass = MailSubClass.find(mailSubClassVO
							.getCompanyCode(), mailSubClassVO.getCode());
					if (mailSubClass != null) {
						if (code.length() == 0) {
							code = new StringBuilder(String
									.valueOf(mailSubClassVO.getCode()));
						} else {
							code = code.append(",").append(
									mailSubClassVO.getCode());
						}
					}
				} catch (FinderException finderexception) {
					log.log(Log.INFO,
							"!!!!   INSERT  inside catch..CREATE !!!!!!!");
					new MailSubClass(mailSubClassVO);

				}

			} else if (MailSubClassVO.OPERATION_FLAG_UPDATE
					.equals(mailSubClassVO.getOperationFlag())) {
				log.log(Log.INFO, "!!!!   UPDATE   !!!!!!!!!!!!!!!!!!!");
				try {
					mailSubClass = MailSubClass.find(mailSubClassVO
							.getCompanyCode(), mailSubClassVO.getCode());
				} catch (FinderException ex) {
					throw new SystemException(ex.getErrorCode(), ex);
				}
				mailSubClass.update(mailSubClassVO);
				log.log(Log.INFO, "!!!!   AFTER UPDATE   !!!!!!!!!!!!!!!!!!!");

			} else if (MailSubClassVO.OPERATION_FLAG_DELETE
					.equals(mailSubClassVO.getOperationFlag())) {
				log.log(Log.INFO, "!!!!   DELETE   !!!!!!!!!!!!!!!!!!!");
				try {
					mailSubClass = MailSubClass.find(mailSubClassVO
							.getCompanyCode(), mailSubClassVO.getCode());
					mailSubClass.setLastUpdateTime(mailSubClassVO
							.getLastUpdateTime());
				} catch (FinderException ex) {
					throw new SystemException(ex.getErrorCode(), ex);
				}
				mailSubClass.remove();
				log.log(Log.INFO, "!!!!   AFTER DELETE   !!!!!!!!!!!!!!!!!!!");

			}
		}

		if (code.length() > 0) {
			ErrorVO error = ErrorUtils.getError(
					MailSubClassException.MAILSUBCLASS_ALREADY_EXISTS, code
							.toString());
			log.log(Log.INFO, "!!!!!!!!!!ERRORDATA!!!!!!!!!!!!!!", code.toString());
			errors.add(error);
		}

		if (errors.size() > 0) {
			MailSubClassException exception = new MailSubClassException();
			exception.addErrors(errors);
			throw exception;
		}

	}

    /**
	 * @param reportSpec
	 * @throws SystemException
     * @author A-2107
	 */
	public Map<String, Object> generateMailTag(ReportSpec reportSpec)
			throws SystemException {
		log.entering(CLASS, "generateMailTag");

		LogonAttributes logonVO = ContextUtils.getSecurityContext().getLogonAttributesVO();
        int no_of_copies = retrieveCopyValueForReport(logonVO.getCompanyCode(), reportSpec.getReportId());


		ArrayList<MailbagVO> mailbagVOs = (ArrayList<MailbagVO>) reportSpec
				.getFilterValues().iterator().next();

		if (mailbagVOs != null && mailbagVOs.size() > 0) {
			//new DSN();
			try {
				mailbagVOs = (ArrayList<MailbagVO>) Proxy.getInstance().get(MailOperationsProxy.class).generateMailTagDetails(mailbagVOs);
			} catch (ProxyException e) {
                throw new SystemException(e.getMessage(),e);
			}
		}

		log.log(Log.FINE, "mailbagVOs :", mailbagVOs);
		log.exiting(CLASS, "generateMailTag");

			ReportMetaData reportMetaData = new ReportMetaData();
        reportMetaData.setColumnNames(new String[]{"MALIDR", "OPRORG", "EXGCODDES", "OPRDST", "DSTEXGCOD", "POANAM", "DSTPOANAM", "MALCTG", "DSN", "CSGDAT", "RCPTYP", "RSN", "ORGEXGOFC", "DSTEXGOFC", "SELNUM", "MALSUBCLS", "WGT", "FLTCARCOD", "FLTNUM", "FLTDAT", "POU", "POL"});
        reportMetaData.setFieldNames(new String[]{"mailbagId", "operatorOrigin", "orgCityDesc", "operatorDestination", "destCityDesc", "orgPaName", "dstPaName", "mailCategoryCode", "despatchSerialNumber", "consignmentDate", "receptacleType", "receptacleSerialNumber", "ooe", "doe", "sealNumber", "mailSubclass", "weight", "carrierCode", "flightNumber", "flightNumber", "pou", "pol"});

		reportSpec.addParameterMetaData(reportMetaData);
		//reportSpec.addParameter(mailbagVOs);
		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(mailbagVOs);

        log.log(Log.FINE, "parameter value", reportSpec.getParameters());

		//Added for ICRD-107518
		if (mailbagVOs != null && mailbagVOs.size() > 0) {
			ArrayList<String> strList = null;
			int count = 0;
            for (MailbagVO mailbagVO : mailbagVOs) {
				count++;
				strList = new ArrayList<String>();
                StringBuilder mailbagID = new StringBuilder();//added by a-7871 for ICRD-262887

				ArrayList<String> images = new ArrayList<String>();
		        images.add("G001");
		        //Added for ICRD-108366(extra fields) by a-7871
		        //V00 - Barcode
				strList.add(mailbagVO.getMailbagId());

				//V01 - Origin Exchange Office
                if ((mailbagVO.getOoe() != null) && (mailbagVO.getOoe().trim().length() > 0)) {
					 strList.add(mailbagVO.getOoe());
                } else {
			        	strList.add(SPACE);
			        }
				//V02 - Origin Exchange Code
                if ((mailbagVO.getOrgCityDesc() != null) && (mailbagVO.getOrgCityDesc().trim().length() > 0)) {
						 strList.add(mailbagVO.getOrgCityDesc());
                } else {
				        	strList.add(SPACE);
				        }
					//V03 -origin pa name
                if ((mailbagVO.getOrgPaName() != null) && (mailbagVO.getOrgPaName().trim().length() > 0)) {
						 strList.add(mailbagVO.getOrgPaName());
                } else {
				        	strList.add(SPACE);
				        }
					//V04 - Mail Category
                if ((mailbagVO.getMailCategoryCode() != null) && (mailbagVO.getMailCategoryCode().trim().length() > 0)) {
						 strList.add(mailbagVO.getMailCategoryCode());
                } else {
				        	strList.add(SPACE);
				        }
					//V05 - Mal subcls
                if ((mailbagVO.getMailSubclass() != null) && (mailbagVO.getMailSubclass().trim().length() > 0)) {
						 strList.add(mailbagVO.getMailSubclass());
                } else {
				        	strList.add(SPACE);
				        }
						//V06 - Consignment date
                if (mailbagVO.getConsignmentDate() != null) {
						 strList.add(mailbagVO.getConsignmentDate().toDisplayFormat("yyyy-MM-dd").toString());
                } else {
				        	strList.add(SPACE);
				        }
						//V07 - Rec. Type
                if ((mailbagVO.getReceptacleType() != null) && (mailbagVO.getReceptacleType().trim().length() > 0)) {
						 strList.add(mailbagVO.getReceptacleType());
                } else {
				        	strList.add(SPACE);
				        }
					//V08 - rsn
                if ((mailbagVO.getReceptacleSerialNumber() != null) && (mailbagVO.getReceptacleSerialNumber().trim().length() > 0)) {
						 strList.add(mailbagVO.getReceptacleSerialNumber());
                } else {
				        	strList.add(SPACE);
				        }
					//V09 - sealnum
                if ((mailbagVO.getSealNumber() != null) && (mailbagVO.getSealNumber().trim().length() > 0)) {
						 strList.add(mailbagVO.getSealNumber());
                } else {
				        	strList.add(SPACE);
				        }
					//V10 -weight
                if (mailbagVO.getWeight() != null) {
						 strList.add(String.valueOf(mailbagVO.getWeight().getRoundedDisplayValue()));
                } else {
				        	strList.add(SPACE);
				        }
					//V11 -Destination Exchange Office
                if ((mailbagVO.getDoe() != null) && (mailbagVO.getDoe().trim().length() > 0)) {
						 strList.add(mailbagVO.getDoe());
                } else {
				        	strList.add(SPACE);
				        }
					//V12 -Destination Exchange code
                if ((mailbagVO.getDestCityDesc() != null) && (mailbagVO.getDestCityDesc().trim().length() > 0)) {
						 strList.add(mailbagVO.getDestCityDesc());
                } else {
				        	strList.add(SPACE);
				        }
					//V13 -destination pa name
                if ((mailbagVO.getDstPaName() != null) && (mailbagVO.getDstPaName().trim().length() > 0)) {
						 strList.add(mailbagVO.getDstPaName());
                } else {
				        	strList.add(SPACE);
				        }
					//V14 -MAilbag ID
                if ((mailbagVO.getMailbagId() != null) && (mailbagVO.getMailbagId().trim().length() > 0)) {
                	     String weight;
                	     if(mailbagVO.getMailbagId().length()==29){
                	      weight = mailbagVO.getMailbagId().substring(25,29);
						 mailbagID.append(mailbagVO.getOoe()).append(SPACE).append(mailbagVO.getDoe()).append(SPACE).append(mailbagVO.getMailCategoryCode()).append(mailbagVO.getMailSubclass()).append(SPACE).append(mailbagVO.getYear()).append(SPACE).append(mailbagVO.getDespatchSerialNumber()).append(SPACE).append(mailbagVO.getReceptacleSerialNumber()).append(SPACE).append(mailbagVO.getHighestNumberedReceptacle()).append(mailbagVO.getRegisteredOrInsuredIndicator()).append(SPACE).append(weight);
						 strList.add(mailbagID.toString());
                	     }else if(mailbagVO.getMailbagId().length()==12){
                  	      strList.add(mailbagVO.getMailbagId());
                  	     }
                } else {
				        	strList.add(SPACE);
				        }
					//V15 -Flight Date
                if (mailbagVO.getFlightDate() != null) {
						 strList.add(mailbagVO.getFlightDate().toDisplayFormat("dd").toString());
                } else {
				        	strList.add(SPACE);
				        }
					//V16 -POL
                if ((mailbagVO.getPol() != null) && (mailbagVO.getPol().trim().length() > 0)) {
						 strList.add(mailbagVO.getPol());
                } else {
				        	strList.add(SPACE);
				        }
					//V17 -carrier code
                if ((mailbagVO.getCarrierCode() != null) && (mailbagVO.getCarrierCode().trim().length() > 0)) {
						 strList.add(mailbagVO.getCarrierCode());
                } else {
				        	strList.add(SPACE);
				        }
					//V18 -pou
                if ((mailbagVO.getPou() != null) && (mailbagVO.getPou().trim().length() > 0)) {
						 strList.add(mailbagVO.getPou());
                } else {
				        	strList.add(SPACE);
				        }
					//V19 -dsn
                if ((mailbagVO.getDespatchSerialNumber() != null) && (mailbagVO.getDespatchSerialNumber().trim().length() > 0)) {
						 strList.add(mailbagVO.getDespatchSerialNumber());
                } else {
				        	strList.add(SPACE);
				        }
					//V20 -flight num
                if ((mailbagVO.getFlightNumber() != null) && (mailbagVO.getFlightNumber().trim().length() > 0)) {
						 strList.add(mailbagVO.getFlightNumber());
                } else {
				        	strList.add(SPACE);
				        }
					//V21 -Origin Upu code
                if ((mailbagVO.getOperatorOrigin() != null) && (mailbagVO.getOperatorOrigin().trim().length() > 0)) {
						 strList.add(mailbagVO.getOperatorOrigin());
                } else {
				        	strList.add(SPACE);
				        }
					//V22 -Destination Upu code
                if ((mailbagVO.getOperatorDestination() != null) && (mailbagVO.getOperatorDestination().trim().length() > 0)) {
						 strList.add(mailbagVO.getOperatorDestination());
                } else {
				        	strList.add(SPACE);
				        }


				reportSpec.setImageParameters(images);
				reportSpec.addBarcodeData(mailbagVO.getMailbagId());
				reportSpec.addParameter(strList);
				reportSpec.setUserProvidedPrintCount(no_of_copies);


                if (count == (mailbagVOs.size())) {
					return ReportAgent.generateReport(reportSpec);
                } else {
					ReportAgent.generateReport(reportSpec);
				}
			}
		}
		return ReportAgent.generateReport(reportSpec);
	}

	private String weightFormatter(Double weight) {
		String weightString = String.valueOf(weight);
        String weights[] = weightString.split("[.]");
        StringBuilder flatWeight = new StringBuilder(weights[0]);
        if (!"0".equals(weights[1])) {
        	flatWeight.append(weights[1]);
        }
        if (flatWeight.length() >= 4) {
            return flatWeight.substring(0, 4);
        }
            StringBuilder zeros = new StringBuilder();
            int zerosRequired = 4 - flatWeight.length();
        for (int i = 0; i < zerosRequired; i++) {
                zeros.append("0");
            }
            return zeros.append(flatWeight).toString();
    }

    /**
	 * @param companyCode
	 * @param reportID
	 * @return
	 * @throws SystemException
     * @author a-5500
     */
    public Integer retrieveCopyValueForReport(String companyCode, String reportID)
	throws SystemException {
		int noOfCopies = 0;
		Collection<PrinterAssignmentMasterVO> printerAssignmentMasterVOs = new ArrayList<PrinterAssignmentMasterVO>();
		log.entering(CLASS, "retrieveCopyValueForReport");
        try {
            printerAssignmentMasterVOs = new AdminReportProxy().findPrinterDetailsForReport(companyCode, reportID);
        } catch (ProxyException proxyException) {
			throw new SystemException((proxyException.getErrors()));
		}
        if (printerAssignmentMasterVOs != null && printerAssignmentMasterVOs.size() > 0) {
            noOfCopies = Integer.parseInt(((ArrayList<PrinterAssignmentMasterVO>) printerAssignmentMasterVOs).get(0).getNumberOfCopy());
		}
		log.entering("ShipmentController", "retrieveCopyValueForReport");
		return noOfCopies;
	}

				/**
				 * @param carditEnquiryFilterVO
				 * @param pageNumber
				 * @return
				 * @throws SystemException
				 */
				public Page<MailbagVO> findConsignmentDetails(
						CarditEnquiryFilterVO carditEnquiryFilterVO, int pageNumber)
						throws SystemException {
					return ConsignmentDocument.findConsignmentDetails(
								carditEnquiryFilterVO, pageNumber);
						}

    /**
				 * @param carditEnquiryFilterVO
				 * @param pageNumber
				 * @return
				 * @throws SystemException
     * @author a-2553
				 */
				public Page<MailbagVO> findCarditMails(
						CarditEnquiryFilterVO carditEnquiryFilterVO, int pageNumber)
						throws SystemException {
					log.entering(CLASS, "findCarditMails");
					LogonAttributes logonAttributes = null;
					try {
						logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
					} catch (SystemException e1) {
						e1.getMessage();
					}
					Page<MailbagVO> carditMails = Cardit.findCarditMails(
							carditEnquiryFilterVO, pageNumber);
        HashMap<String, MailbagVO> mailBagMap = new HashMap<String, MailbagVO>();
        Collection<MailbagVO> mailbags = new ArrayList<MailbagVO>();
        String key = null;


					/*
					 * Calculating the Volume For each Mailbag
					 */
      //added by A-8353 for ICRD-274933 starts
		Map stationParameters = null;
		String stationCode = logonAttributes.getStationCode();
		Collection<String> parameterCodes = new ArrayList<String>();
		parameterCodes.add(STNPAR_DEFUNIT_VOL);
		stationParameters =new SharedAreaProxy().findStationParametersByCode(logonAttributes.getCompanyCode(), stationCode, parameterCodes);
		String stationVolumeUnit = (String)stationParameters.get(STNPAR_DEFUNIT_VOL);
		//added by A-8353 for ICRD-274933 starts
        if (carditMails != null && carditMails.size() > 0) {
						 for (MailbagVO mailbagVO : carditMails) {

							//A-8061 Added for ICRD-82434 starts
							 Collection<MailbagHistoryVO>  mailbagResditEvents = new ArrayList<MailbagHistoryVO>();

                try {

                    mailbagResditEvents.addAll(constructDAO().findMailbagResditEvents(mailbagVO.getCompanyCode(), mailbagVO.getMailbagId()));
                } catch (PersistenceException persistenceException) {
						    		throw new SystemException(persistenceException.getErrorCode());
						    	}

						    	mailbagVO.setMailbagHistories(mailbagResditEvents);

							UnitConversionNewVO unitConversionVO= null;
							String fromUnit = stationVolumeUnit;
							if(mailbagVO.getVolUnit()!=null){
								fromUnit = mailbagVO.getVolUnit();
							}
					        try {
					               unitConversionVO=UnitFormatter.getUnitConversionForToUnit(UnitConstants.VOLUME, fromUnit, stationVolumeUnit, mailbagVO.getVol());
					        } catch (UnitException e) {
					              // TODO Auto-generated catch block
					              e.getMessage();
					        }
					        double convertedValue = Math.round(unitConversionVO.getToValue() * 100.0) / 100.0;
					        if (MailConstantsVO.MINIMUM_VOLUME > convertedValue) {
					        	convertedValue = MailConstantsVO.MINIMUM_VOLUME;
							}
					        if(mailbagVO.getVolUnit()!=null && mailbagVO.getVol()!=0){
					        	mailbagVO.setVolume(new Measure(UnitConstants.VOLUME,0.0,convertedValue,stationVolumeUnit));
					        }
					      //added by A-8353 for ICRD-274933 ends
							//mailbgVO.setVolume(volume);
                //mailbagVO.setVolume(new Measure(UnitConstants.VOLUME, volume));//added by A-7371
							//Removing duplicates If a consignment has multiple routes.
							//Need to display the routr info with early departure date & own flight info
                key = String.valueOf(mailbagVO.getMailSequenceNumber());//added by A-8353 for ICRD-338598
							LocalDate existingDepartureDate = null;
							LocalDate DepartureDate = null;
                if (mailBagMap.containsKey(key)) {
                    MailbagVO existingMailbagVO = mailBagMap.get(key);
								FlightFilterVO existingFlightFilterVO = new FlightFilterVO();
								FlightFilterVO flightFilterVO = new FlightFilterVO();
                    Collection<FlightValidationVO> existingFlightVOs = null;
                    Collection<FlightValidationVO> flightVOs = null;
								existingFlightFilterVO.setCompanyCode(existingMailbagVO.getCompanyCode());
								existingFlightFilterVO.setFlightNumber(existingMailbagVO.getFlightNumber());
								existingFlightFilterVO.setFlightDate(existingMailbagVO.getFlightDate());
								existingFlightFilterVO.setFlightSequenceNumber(existingMailbagVO.getFlightSequenceNumber());
								existingFlightFilterVO.setDirection(FlightFilterVO.OUTBOUND);
								existingFlightVOs = validateFlight(existingFlightFilterVO);
								if(existingFlightVOs!=null && !existingFlightVOs.isEmpty()){

									existingDepartureDate = existingFlightVOs.iterator().next().getStd();
								}
								flightFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
								flightFilterVO.setFlightNumber(mailbagVO.getFlightNumber());
								flightFilterVO.setFlightDate(mailbagVO.getFlightDate());
								flightFilterVO.setFlightSequenceNumber(mailbagVO.getFlightSequenceNumber());
								flightFilterVO.setDirection(FlightFilterVO.OUTBOUND);
								flightVOs = validateFlight(flightFilterVO);
								if(flightVOs!=null && !flightVOs.isEmpty()){

									DepartureDate = flightVOs.iterator().next().getStd();
								}
								if(existingDepartureDate!=null && DepartureDate!=null && existingMailbagVO.getCarrierCode()!=null && existingMailbagVO.getCarrierCode().equals(mailbagVO.getCarrierCode())){
									/*modified by A-8149 for ICRD-269245*/
                        if (existingMailbagVO.getFlightDate() != null) {
                            if (existingDepartureDate.isGreaterThan(DepartureDate)) {
										mailBagMap.put(key, mailbagVO);
										}
									}

                    } else if (mailbagVO.getCarrierCode() != null && mailbagVO.getCarrierCode().equals(logonAttributes.getOwnAirlineCode())) {
                        mailBagMap.put(key, mailbagVO);



                    } else {
                        /*modified by A-8149 for ICRD-269245*/
                        if (existingMailbagVO.getFlightDate() != null && existingDepartureDate!=null && DepartureDate!=null && existingDepartureDate.isGreaterThan(DepartureDate)) {
                                mailBagMap.put(key, mailbagVO);
                        }

                    }


                } else {


								mailBagMap.put(key, mailbagVO);
							}
						}
					}
					if(carditMails!=null){
					carditMails.removeAll(carditMails);
					carditMails.addAll(mailBagMap.values());
					}
        return carditMails;


				}



				/**
				 * This method is used to find all the mail subclass codes A-2037
				 *
				 * @param companyCode
				 * @param officeOfExchange
				 * @param pageNumber
				 * @return Page of officeExchangeVOs
				 * @throws SystemException
				 */
				public Page<OfficeOfExchangeVO> findOfficeOfExchange(String companyCode,
						String officeOfExchange, int pageNumber) throws SystemException {
					log.entering(CLASS, "findOfficeOfExchange");
					CacheFactory factory = CacheFactory.getInstance();
					OfficeOfExchangeCache cache = factory
	    				.getCache(OfficeOfExchangeCache.ENTITY_NAME);  
	    			return cache.findOfficeOfExchange(companyCode,officeOfExchange,pageNumber);
				}

    /**
				 * @param companyCode
				 * @param mailboxCode
				 * @param mailboxDesc
				 * @param pageNumber
				 * @return
				 * @throws SystemException
     * @author A-5931 Method for MailboxId containing mailboxCode and mailboxDesc
				 */
				public Page<MailBoxIdLovVO> findMailBoxIdLov(String companyCode,
						String mailboxCode, String mailboxDesc, int pageNumber, int defaultSize)
						throws SystemException {
					log.entering(CLASS, "findMailBoxIdLov");
					try {
						return constructDAO().findMailBoxIdLov(companyCode, mailboxCode, mailboxDesc,
								pageNumber, defaultSize);
					} catch (PersistenceException persistenceException) {
						persistenceException.getErrorCode();
						throw new SystemException(persistenceException.getErrorCode());
					}
				}

    /**
				 * @param mailBoxIdVOs
				 * @param pageNumber
				 * @return
				 * @throws SystemException
     * @author A-5931 Method for saving MailBox IDs
     */
    public void saveMailboxIDs(Collection<MailBoxIdLovVO> mailBoxIdVOs)
						throws SystemException {
					log.entering(CLASS, "saveMailboxIDs");
					LogonAttributes logonVO = ContextUtils.getSecurityContext().getLogonAttributesVO();
        for (MailBoxIdLovVO mailBoxIdLovVO : mailBoxIdVOs) {
            MailBoxId mailBoxId = null;
            MailBoxIdPk mailBoxIdPk = new MailBoxIdPk();
						mailBoxIdLovVO.setCompanyCode(logonVO.getCompanyCode());
						mailBoxIdPk.setCompanyCode(logonVO.getCompanyCode());
						mailBoxIdPk.setMailboxCode(mailBoxIdLovVO.getMailboxCode());

						try {
							mailBoxId = MailBoxId.find(mailBoxIdPk);
						} catch (FinderException e) {
							new MailBoxId(mailBoxIdLovVO);
						}

					}
				}

				/**
				 * @param dsnVO
				 * @param mode
				 * @return
				 * @throws SystemException
     * @author A-2553
				 */
				public Collection<DespatchDetailsVO> findDespatchesOnDSN(DSNVO dsnVO, String mode)
						throws SystemException {
					return Mailbag.findDespatchesOnDSN(dsnVO, mode);
				}


				/**
     * @param operationalFlightVO
     * @return Collection<ContainerVO>
     * @throws SystemException
				 * @author a-1936 This method returns all the ULDs assigned to a particular
				 *         flight from the given airport are returned
				 */
				public Collection<ContainerVO> findFlightAssignedContainers(
						OperationalFlightVO operationalFlightVO) throws SystemException {
					log.entering(CLASS, "findFlightAssignedContainers");
					return Container.findFlightAssignedContainers(operationalFlightVO);
				}

    /**
					 * @param companyCode
					 * @param mailbagId
					 * @return
					 * @throws SystemException
     * @author A-2037 This method is used to find the Damaged Mailbag Details
					 */
					public Collection<DamagedMailbagVO> findMailbagDamages(String companyCode,
							String mailbagId) throws SystemException {
						log.entering(CLASS, "findMailbagDamages");
						Collection<DamagedMailbagVO> damagedMailbagVOs=  Mailbag.findMailbagDamages(companyCode, mailbagId);
						 Collection<DocumentRepositoryMasterVO> documentRepositoryMasterVOs = new ArrayList<>();
						   DocumentRepositoryFilterVO documentRepositoryFilterVO = new DocumentRepositoryFilterVO();
						    documentRepositoryFilterVO.setCompanyCode(companyCode);
						    documentRepositoryFilterVO.setDocumentType("MAL");
						    documentRepositoryFilterVO.setPurpose("DMG");
						    documentRepositoryFilterVO.setDocumentValue(mailbagId);
						    try {
						      documentRepositoryMasterVOs =Proxy.getInstance().get(DocumentRepositoryProxy.class).getDocumentsfromRepository(documentRepositoryFilterVO);
						    } catch (ProxyException proxyException) {
						      this.log.log(3, PROXYEXCEPTION,proxyException);
					}
						    for(DamagedMailbagVO damagedMailbagVO:damagedMailbagVOs){
						    	damagedMailbagVO.setMailbagId(mailbagId);
							   	if(!documentRepositoryMasterVOs.isEmpty()){
							   		for(DocumentRepositoryMasterVO documentRepositoryMasterVO:documentRepositoryMasterVOs){
							    		List<DocumentRepositoryAttachmentVO> documentRepositoryAttachmentVOs =documentRepositoryMasterVO.getAttachments();
							    		for(DocumentRepositoryAttachmentVO documentRepositoryAttachmentVO:documentRepositoryAttachmentVOs){
				                         populatedamagemailbagvowithfiledata(damagedMailbagVO,documentRepositoryAttachmentVO);
							    		}
							   		}
							   	
							   	}
						    }
						 return damagedMailbagVOs;
					}
					
					
					private DamagedMailbagVO populatedamagemailbagvowithfiledata(DamagedMailbagVO damagedMailbagVO,DocumentRepositoryAttachmentVO documentRepositoryAttachmentVO){
						if(damagedMailbagVO.getDamageCode().equals(documentRepositoryAttachmentVO.getTransactionDataRef2())){
				                        	   if(damagedMailbagVO.getFileName()!=null){
				                        		   damagedMailbagVO.setFileName(damagedMailbagVO.getFileName()+"-DMG-"+documentRepositoryAttachmentVO.getFileName()); 
				                        	   }
				                        	   else{
				                        		   damagedMailbagVO.setFileName(documentRepositoryAttachmentVO.getFileName());
				                        	   }
				                           }
						return damagedMailbagVO;
					}


					/**
					 * @param searchContainerFilterVO
					 * @param pageNumber
					 * @return
					 * @throws SystemException
     * @author a-1936 This method is used to find the containerDetails
					 */
					public Page<ContainerVO> findContainers(
							SearchContainerFilterVO searchContainerFilterVO, int pageNumber)
							throws SystemException {
						log.entering(CLASS, "findContainers");
						//Added by A-5945 for ICRD-96261 starts
        LogonAttributes logonAttributes = getLogonAttributes();
						Collection<PartnerCarrierVO> partnerCarrierVOs = null;
						ArrayList<String> partnerCarriers = new ArrayList<String>();
        String companyCode = logonAttributes.getCompanyCode();
						String ownCarrierCode = logonAttributes.getOwnAirlineCode();
						String airportCode = logonAttributes.getAirportCode();
						try {
            MailTrackingDefaultsDAO mailTrackingDefaultsDAO = getEntityManagerForDAO();
            partnerCarrierVOs = mailTrackingDefaultsDAO
                    .findAllPartnerCarriers(companyCode, ownCarrierCode, airportCode);

						} catch (PersistenceException ex) {
							ex.getErrorCode();
							throw new SystemException(ex.getErrorCode());
						}
						log.log(Log.FINE, " partnerCarriers ", partnerCarrierVOs);
        if (partnerCarrierVOs != null && partnerCarrierVOs.size() > 0) {
            for (PartnerCarrierVO partner : partnerCarrierVOs) {
							String partnerCarrier =	 partner.getPartnerCarrierCode();
							partnerCarriers.add(partnerCarrier);
							}
							partnerCarriers.add(ownCarrierCode);
							searchContainerFilterVO.setPartnerCarriers(partnerCarriers);
						}

						//Added by A-5945 for ICRD-96261 ends
						return Container.findContainers(searchContainerFilterVO, pageNumber);
					}

    /**
     * @param reportSpec
     * @return
     * @throws SystemException
     * @throws ReportGenerationException
     * @author A-2553
					 */
					public Map<String, Object> generateMailStatusReport(ReportSpec reportSpec)
							throws SystemException, ReportGenerationException {
						log.entering(CLASS, "generateMailStatusReport");

						MailStatusFilterVO mailStatusFilterVO = MailStatusFilterVO.class
								.cast(reportSpec.getFilterValues().get(0));
                        Collection<MailStatusVO> mailStatusVOs = null;
						try {	
							 mailStatusVOs=Proxy.getInstance().get(MailOperationsProxy.class).generateMailStatusRT(mailStatusFilterVO);
                            } catch (ProxyException e) {
								throw new SystemException(e.getMessage(),e);}
						reportSpec.addParameter(mailStatusFilterVO);
						reportSpec.setData(mailStatusVOs);

						log.exiting(CLASS, "generateMailStatusReport");
						return ReportAgent.generateReport(reportSpec);

					}
					
					public  Collection<MailStatusVO> generateMailStatusRT(MailStatusFilterVO mailStatusFilterVO)
						throws SystemException{
						return Mailbag.generateMailStatusReport(mailStatusFilterVO);
					}
    /**
				 * @param destinationFilterVO
				 * @return Collection<ContainerVO>
				 * @throws SystemException
     * @author a-1936 This method returns all the ULDs that are assigned to
     * destination from the given airport are returned
				 */
				public Collection<ContainerVO> findDestinationAssignedContainers(
						DestinationFilterVO destinationFilterVO) throws SystemException {
					log.entering(CLASS, "findDestinationAssignedContainers");
					return Container.findDestinationAssignedContainers(destinationFilterVO);
				}

				/**
				 * returns data for displaying manifest level Jan 19, 2007, A-1739
				 *
				 * @param reportSpec
				 * @return
				 * @throws SystemException
				 */
				public Map<String, Object> generateMailManifest(ReportSpec reportSpec)
						throws SystemException {
					log.entering(CLASS, "generateMailManifest");
					String manifestType = String.class.cast(reportSpec.getFilterValues()
							.get(0));
					OperationalFlightVO flightVO = OperationalFlightVO.class
							.cast(reportSpec.getFilterValues().get(1));
					MailManifestVO manifestVO = null;
					Collection<MailSummaryVO> summaryManifestVOs = null;
					if (MailConstantsVO.MANIFEST_MAILBAG.equals(manifestType)) {
						try {	
					manifestVO=Proxy.getInstance().get(MailOperationsProxy.class).findMailbagManifest(flightVO);
					} catch (ProxyException e) {
						throw new SystemException(e.getMessage(),e);}
					} else if (MailConstantsVO.MANIFEST_AWB.equals(manifestType)) {
						try {
							manifestVO=Proxy.getInstance().get(MailOperationsProxy.class).findMailAWBManifest(flightVO);
						} catch (ProxyException e) {throw new SystemException(e.getMessage(),e);}	
        } else if (MailConstantsVO.MANIFEST_DSN_MAILBAG.equals(manifestType)) {
        	try {
				manifestVO=Proxy.getInstance().get(MailOperationsProxy.class).findDSNMailbagManifest(flightVO);
			} catch (ProxyException e) {throw new SystemException(e.getMessage(),e);}
					
        } else {
        	try {
				manifestVO=Proxy.getInstance().get(MailOperationsProxy.class).findDestnCatManifest(flightVO);
			} catch (ProxyException e) {throw new SystemException(e.getMessage(),e);}
						summaryManifestVOs = MailAcceptance
								.findDestnCatManifestSummary(flightVO);
						reportSpec.addSubReportData(summaryManifestVOs);
					}
					manifestVO.setFlightNumber(flightVO.getFlightNumber());
					manifestVO.setDepDate(flightVO.getFlightDate());
					manifestVO.setFlightCarrierCode(flightVO.getCarrierCode());
					manifestVO.setFlightRoute(flightVO.getFlightRoute());
					manifestVO.setDepPort(flightVO.getPol());
					reportSpec.addParameter(manifestVO);
					Collection<MailManifestVO> reportData = new ArrayList<MailManifestVO>();
					reportData.add(manifestVO);
					reportSpec.setData(reportData);
					Map hashMap = null;
					Collection<String> oneTimeList = new ArrayList<String>();
					oneTimeList.add(MAIL_CATEGORY);
					try {
						hashMap = new SharedDefaultsProxy().findOneTimeValues(manifestVO.getCompanyCode(),
								oneTimeList);
					} catch (ProxyException proxyException) {
						throw new SystemException(proxyException.getMessage());
					}
					reportSpec.addExtraInfo(hashMap);
					log.exiting(CLASS, "generateMailManifest");
					return ReportAgent.generateReport(reportSpec);
				}

				/**
				 * THIS METHOD WILL RETURN THE DAMAGED MAIL DETAILS BASED ON THE FILTER
				 * CRITERIA
				 *
				 * @param reportSpec
				 * @return
				 * @throws SystemException
				 * @throws ReportGenerationException
     * @author A-3227 RENO K ABRAHAM
				 */
				public Map<String, Object> generateFindDamageMailReport(
						ReportSpec reportSpec) throws SystemException,
						ReportGenerationException {
					log.entering(CLASS, "generateFindDamageMailReport");

					DamageMailFilterVO damageMailReportFilterVO = DamageMailFilterVO.class
							.cast(reportSpec.getFilterValues().get(0));
						
					Collection<DamagedMailbagVO> damagedMailbagVOs =null;
					try {    
						damagedMailbagVOs=Proxy.getInstance().get(MailOperationsProxy.class).findDamageMailReport(damageMailReportFilterVO);
                       } catch (ProxyException e) {
                         throw new SystemException(e.getMessage(),e);}
					reportSpec.addParameter(damageMailReportFilterVO);
					reportSpec.setData(damagedMailbagVOs);
					reportSpec.addExtraInfo(damagedMailbagVOs);

					log.exiting(CLASS, "generateFindDamageMailReport");
					return ReportAgent.generateReport(reportSpec);

				}	
 public Collection<DamagedMailbagVO> findDamageMailReport(DamageMailFilterVO damageMailReportFilterVO)
						   throws SystemException, ReportGenerationException{
					 return Mailbag.findDamageMailReport(damageMailReportFilterVO);
				 }

				/**
				 * deletes the assigned Containers A-1739
				 *
				 * @param containerVOs
				 * @throws SystemException
				 * @throws ContainerAssignmentException
				 */
				@Raise(module = "mail", submodule = "operations", event = "SAVE_DWS_EVENT", methodId = "mail.operations.deleteContainers", enablecontext="true")
				public void deleteContainers(Collection<ContainerVO> containerVOs)
						throws SystemException, ContainerAssignmentException {
					Collection<String> flightCollection = null;
					OperationalFlightVO operationalFlightVO = null;
					String flightPK = "";
					boolean canDeleted = false;
					if (containerVOs != null && containerVOs.size() > 0) {
						log.entering(CLASS, "deleteContainers");
						for (ContainerVO containerVO : containerVOs) {
							if (containerVO.isFlightClosureCheckNeeded()) {
								if (containerVO.getLegSerialNumber() > 0
										&& containerVO.getFlightSequenceNumber() > 0) {
									log.log(Log.INFO, "THE FLIGHT PRESENT");
									log.log(Log.INFO,

									"Calling <<-------getFlightOfContainer ---------->>>>");
									operationalFlightVO = constructFlightVOForContainer(containerVO);
									flightPK = new StringBuilder(operationalFlightVO
											.getCompanyCode()).append(
											operationalFlightVO.getCarrierId()).append(
											operationalFlightVO.getFlightNumber()).append(
											operationalFlightVO.getFlightSequenceNumber())
											.append(
													operationalFlightVO
															.getLegSerialNumber()).append(
													operationalFlightVO.getPol())
											.toString();
									log.log(Log.FINE, "THE FLIGHTPK IS >>>>>>>", flightPK);
									if (flightCollection != null
											&& flightCollection.size() > 0) {
										canDeleted = flightCollection.contains(flightPK);
										log
												.log(Log.INFO, "THE FLAG IS >>>>>>>",
														canDeleted);
									}

									if (!canDeleted) {
										if (isFlightClosedForOperations(operationalFlightVO)) {
											String flightDetails = new StringBuilder(
													containerVO.getCarrierCode()).append(
															SPACE).append(
													containerVO.getFlightNumber()).append(
													" on ").append(
													containerVO.getFlightDate().toString()
															.substring(0, 11)).toString();
											log.log(Log.FINE, "THE flightdetails is ",
													flightDetails);
											throw new ContainerAssignmentException(
													ContainerAssignmentException.FLIGHT_STATUS_CLOSED,
                                        new Object[]{
															containerVO
																	.getContainerNumber(),
                                                flightDetails});
										}
										if (flightCollection == null) {
											flightCollection = new ArrayList<String>();
										}
										flightCollection.add(flightPK);
										deleteContainer(containerVO);

									} else {
										deleteContainer(containerVO);
									}
								} else {
									deleteContainer(containerVO);
								}
							} else {
								deleteContainer(containerVO);
							}
						}
					}
				}

				private OperationalFlightVO constructFlightVOForContainer(
						ContainerVO containerToReassign) {
					OperationalFlightVO operationalFlightVO = new OperationalFlightVO();
					operationalFlightVO
							.setCompanyCode(containerToReassign.getCompanyCode());
					operationalFlightVO
							.setCarrierCode(containerToReassign.getCarrierCode());
					operationalFlightVO.setCarrierId(containerToReassign.getCarrierId());
					operationalFlightVO.setFlightNumber(containerToReassign
							.getFlightNumber());
					operationalFlightVO.setFlightSequenceNumber(containerToReassign
							.getFlightSequenceNumber());
					operationalFlightVO.setLegSerialNumber(containerToReassign
							.getLegSerialNumber());
					operationalFlightVO.setPol(containerToReassign.getAssignedPort());
					operationalFlightVO.setFlightDate(containerToReassign.getFlightDate());
					return operationalFlightVO;
				}

				/**
				 * Returns the arrival details for a flight at the arrival airport A-1739
				 * Filters by Term or Tranship as well
				 *
				 * @param mailArrivalFilterVO
				 * @return
				 * @throws SystemException
				 */
				public MailArrivalVO findArrivalDetails(
						MailArrivalFilterVO mailArrivalFilterVO) throws SystemException {
					MailArrivalVO mailArrivalVO = AssignedFlightSegment
							.findArrivalDetails(mailArrivalFilterVO);

					/*
					 * Added by RENO K ABRAHAM on 29 December 2009
					 * This is to check, whether any
					 * mailbag or despatch is not associated with an onward routing info.
					 * This is implemented to cooperate with MRA module.
					 * START
					 */
					//Route availablity check of each mail bag is made obtained as part of above code, hence the below statment commented by A-5219
					//checkRoutingAvailabilityForImportManifest(mailArrivalVO);
					//END

					try {
						OperationalFlightVO opFlightVO = constructOpFlightVOFromFilter(mailArrivalFilterVO);

						AssignedFlight inboundFlight = AssignedFlight
								.find(constructInboundFlightPK(opFlightVO));
						mailArrivalVO.setFlightStatus(inboundFlight.getImportClosingFlag());
					} catch (FinderException exception) {
						// ignore flight maynot be arrived
					}
					return mailArrivalVO;
				}


				/**
				 * checkRoutingAvailabilityForManifest
     *
				 * @param operationalFlightVo
				 * @param mailManifestVO
				 * @throws SystemException
				 */
				private void checkRoutingAvailabilityForImportManifest(MailArrivalVO mailArrivalVO)
            throws SystemException {
					OperationalFlightVO operationalFlightVO = new OperationalFlightVO();
					operationalFlightVO.setCompanyCode(mailArrivalVO.getCompanyCode());
					operationalFlightVO.setCarrierId(mailArrivalVO.getCarrierId());
					operationalFlightVO.setFlightNumber(mailArrivalVO.getFlightNumber());
					operationalFlightVO.setFlightSequenceNumber(mailArrivalVO.getFlightSequenceNumber());
					/*
					 * Added by RENO K ABRAHAM on 29 December 2009
					 * This is to check, whether any
					 * mailbag or despatch is not associated with an onward routing info.
					 * This is implemented to cooperate with MRA module.
					 */
					log.log(Log.FINE, "checkRoutingsForMails");
        if (mailArrivalVO.getContainerDetails() != null && mailArrivalVO.getContainerDetails().size() > 0) {
            for (ContainerDetailsVO containerDetailsVO : mailArrivalVO.getContainerDetails()) {
                if (containerDetailsVO.getDsnVOs() != null && containerDetailsVO.getDsnVOs().size() > 0) {
                    for (DSNVO dSNVO : containerDetailsVO.getDsnVOs()) {
                        if (dSNVO != null) {
                            dSNVO.setContainerNumber(containerDetailsVO.getContainerNumber());
                            String type = "";
                            if (DSNVO.FLAG_YES.equals(dSNVO.getPltEnableFlag())) {
                                type = "MAILBAG";
                            } else if (((DSNVO.FLAG_NO).equals(dSNVO.getPltEnableFlag()))
                                    && ((DSNVO.OPERATION_FLAG_UPDATE).equals(containerDetailsVO.getContainerType()))) {
                                type = "DESPATCH_IN_ULD";
                            } else if (((DSNVO.FLAG_NO).equals(dSNVO.getPltEnableFlag()))
                                    && (("B").equals(containerDetailsVO.getContainerType()))) {
                                type = "DESPATCH_IN_MFT_BULK";
                            }
                            if (operationalFlightVO != null && type.trim().length() > 0) {
                                if (AssignedFlight.checkRoutingsForMails(operationalFlightVO, dSNVO, type)) {
													dSNVO.setRoutingAvl(DSNVO.FLAG_YES);
                                } else {
													dSNVO.setRoutingAvl(DSNVO.FLAG_NO);
												}
											}

									}
								}
							}
						}
					}
				}

				/**
				 * TODO Purpose Jan 22, 2007, A-1739
				 *
				 * @param mailArrivalFilterVO
				 * @return
				 */
				private OperationalFlightVO constructOpFlightVOFromFilter(
						MailArrivalFilterVO mailArrivalFilterVO) {
					OperationalFlightVO flightVO = new OperationalFlightVO();
					flightVO.setCompanyCode(mailArrivalFilterVO.getCompanyCode());
					flightVO.setCarrierId(mailArrivalFilterVO.getCarrierId());
					flightVO.setFlightNumber(mailArrivalFilterVO.getFlightNumber());
					flightVO.setFlightSequenceNumber(mailArrivalFilterVO
							.getFlightSequenceNumber());
					flightVO.setLegSerialNumber(mailArrivalFilterVO.getLegSerialNumber());
					flightVO.setPou(mailArrivalFilterVO.getPou());
					return flightVO;
				}

				/**
     * @param flightVO
     * @return
     * @author A-5991
				 */
				private AssignedFlightPK constructInboundFlightPK(
						OperationalFlightVO flightVO) {
					AssignedFlightPK inboundFlightPK = new AssignedFlightPK();
					inboundFlightPK.setCompanyCode(flightVO.getCompanyCode());
					inboundFlightPK.setCarrierId(flightVO.getCarrierId());
					inboundFlightPK.setFlightNumber(flightVO.getFlightNumber());
					inboundFlightPK.setFlightSequenceNumber(flightVO
							.getFlightSequenceNumber());
					inboundFlightPK.setLegSerialNumber(flightVO.getLegSerialNumber());
					inboundFlightPK.setAirportCode(flightVO.getPou());
					return inboundFlightPK;
				}

				/**
				 * TODO Purpose Oct 6, 2006, a-1739
				 *
				 * @param flightVO
				 * @return
				 * @throws SystemException
				 */
				public OperationalFlightVO validateInboundFlight(
						OperationalFlightVO flightVO) throws SystemException {
					log.entering(CLASS, "validateInboundFlight");
					AssignedFlightPK flightPK = constructInboundFlightPK(flightVO);
					try {
						AssignedFlight.find(flightPK);
						return flightVO;
					} catch (FinderException ex) {
						log.log(Log.FINE, "no inboundflight");
					}
					log.exiting(CLASS, "validateInboundFlight");
					return null;
				}


				/**
     * @param operationalFlightVO
     * @throws SystemException
     * @throws ULDDefaultsProxyException
     * @throws CloseFlightException
				 * @author a-1936 This method is used to close the Ibound Flight
     */
    //Modified by A-7540
    @Raise(module = "mail", submodule = "operations", event = "FLIGHT_CLOSE_EVENT", methodId = "mail.operations.closeInboundFlight")
    @Advice(name = "mail.operations.importMailToMRA", phase = Phase.POST_INVOKE)
				public void closeInboundFlight(OperationalFlightVO operationalFlightVO)
						throws SystemException, ULDDefaultsProxyException {
					log.entering(CLASS, "closeInboundFlight");
					LogonAttributes logon = ContextUtils.getSecurityContext()
					.getLogonAttributesVO();
					if(Objects.isNull(operationalFlightVO.getCarrierCode())){
						AirlineValidationVO airlineValidationVO = findAirlineValidationVO(logon.getCompanyCode(),operationalFlightVO.getCarrierId());
						operationalFlightVO.setCarrierCode(Objects.nonNull(airlineValidationVO)?airlineValidationVO.getAlphaCode():operationalFlightVO.getCarrierCode());
					}
					AssignedFlight inboundFlight = null;
        AssignedFlightVO inboundFlightVO = null;
					AssignedFlightPK inboundFlightPk = new AssignedFlightPK();
					inboundFlightPk.setAirportCode(operationalFlightVO.getPou());
					inboundFlightPk.setCompanyCode(operationalFlightVO.getCompanyCode());
					inboundFlightPk.setFlightNumber(operationalFlightVO.getFlightNumber());
					inboundFlightPk.setFlightSequenceNumber(operationalFlightVO
							.getFlightSequenceNumber());
					inboundFlightPk.setLegSerialNumber(operationalFlightVO
							.getLegSerialNumber());
					inboundFlightPk.setCarrierId(operationalFlightVO.getCarrierId());
					try {
						inboundFlight = AssignedFlight.find(inboundFlightPk);
					} catch (FinderException ex) {
						log.log(Log.INFO, FINDEREXCEPTIO_STRING);
						log.log(Log.INFO, "DATA INCONSISTENT");
						inboundFlightVO = new AssignedFlightVO();
						inboundFlightVO.setAirportCode(operationalFlightVO.getPou());
						inboundFlightVO.setCarrierId(operationalFlightVO.getCarrierId());
						inboundFlightVO.setCarrierCode(operationalFlightVO.getCarrierCode());//Added as part of ICRD-132568
						inboundFlightVO.setCompanyCode(operationalFlightVO.getCompanyCode());
						inboundFlightVO.setFlightDate(operationalFlightVO.getFlightDate());
						inboundFlightVO.setFlightNumber(operationalFlightVO.getFlightNumber());
						inboundFlightVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
						inboundFlightVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
						//Added by A-5945  for ICRD-118205 starts
						inboundFlightVO.setImportFlightStatus(MailConstantsVO.FLIGHT_STATUS_CLOSED);
            inboundFlightVO.setLastUpdateTime(new LocalDate(logon.getAirportCode(), ARP, true));
						inboundFlightVO.setLastUpdateUser(logon.getUserId());
						inboundFlightVO.setFlightStatus("N");
						//Added by A-5945 for ICRD-118205 ends
						inboundFlight = new AssignedFlight(inboundFlightVO);

					}

					if (inboundFlight != null) {
						inboundFlight.setImportClosingFlag(MailConstantsVO.FLIGHT_STATUS_CLOSED);
						inboundFlight.setCarrierCode(operationalFlightVO.getCarrierCode());//Added as part of ICRD-132568

						/*
						 * Below code is written to introduce the acquittal logic
						 * to ULDs during Inbound Flight Closure
						 * START
						 */

						Collection<ContainerVO> containerVOs = AssignedFlight
						.findULDsInInboundFlight(operationalFlightVO);
            if (containerVOs != null && containerVOs.size() > 0) {
                int segNo = 0;
                for (ContainerVO container : containerVOs) {
								ULDForSegmentPK uLDForSegmentPK = new ULDForSegmentPK();
								ContainerVO containerVO = new ContainerVO();
								uLDForSegmentPK.setCompanyCode(operationalFlightVO.getCompanyCode());
								uLDForSegmentPK.setCarrierId(operationalFlightVO.getCarrierId());
								uLDForSegmentPK.setFlightNumber(operationalFlightVO.getFlightNumber());
								uLDForSegmentPK.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
								uLDForSegmentPK.setUldNumber(container.getContainerNumber());
								try {
									BeanHelper.copyProperties(containerVO, container);
									containerVO.setCompanyCode(operationalFlightVO.getCompanyCode());
									containerVO.setCarrierId(operationalFlightVO.getCarrierId());
									containerVO.setFlightNumber(operationalFlightVO.getFlightNumber());
									containerVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
									segNo = findContainerSegment(containerVO);

								} catch (InvalidFlightSegmentException e) {
									e.getMessage();
								}
									ContainerPK containerPK = new ContainerPK();
								containerPK.setCompanyCode(containerVO.getCompanyCode());
								containerPK.setCarrierId(containerVO.getCarrierId());
								containerPK.setFlightNumber(containerVO.getFlightNumber());
                    containerPK.setFlightSequenceNumber(containerVO.getFlightSequenceNumber());
								containerPK.setLegSerialNumber(containerVO.getLegSerialNumber());
								containerPK.setAssignmentPort(containerVO.getAssignedPort());
								containerPK.setContainerNumber(containerVO.getContainerNumber());
								Container containerToUpdate = null;
                    try {
								containerToUpdate = Container.find(containerPK);
								//Added	for IASCB-98714 starts
								if(containerToUpdate != null ){
							  if (!containerToUpdate.getRetainFlag().equalsIgnoreCase("Y")) {
							   containerToUpdate.setTransitFlag(MailConstantsVO.FLAG_NO);
						      } else {
							    containerToUpdate.setTransitFlag(MailConstantsVO.FLAG_YES);
					        	}
									//Added by A-5945	for ICRD-118493 starts
									containerToUpdate.setArrivedStatus(MailConstantsVO.FLAG_YES);
								}
								//Added	for IASCB-98714 ENDS
                    } catch (FinderException finderException) {
									log.log(Log.FINE,  "FinderException ");
								}
								uLDForSegmentPK.setSegmentSerialNumber(segNo);
								try {
									ULDForSegment uLDForSegment = null;
									uLDForSegment = ULDForSegment.find(uLDForSegmentPK);
									//Added	for IASCB-98714 starts
								    if (containerToUpdate != null && !containerToUpdate.getRetainFlag().equalsIgnoreCase("Y")) {
							         uLDForSegment.setReleasedFlag(MailConstantsVO.FLAG_YES);
						            } else {
						         	uLDForSegment.setReleasedFlag(MailConstantsVO.FLAG_NO);
						            }
										//Added	for IASCB-98714 ENDS
								} catch (FinderException e) {
									e.getErrorCode();
								}
							
							}
						}
						 //END
            
            		AssignedFlightAuditVO assignedFlightAuditVO = new AssignedFlightAuditVO(AssignedFlightVO.MODULE, AssignedFlightVO.SUBMODULE,AssignedFlightVO.ENTITY);
            		assignedFlightAuditVO = (AssignedFlightAuditVO) AuditUtils.populateAuditDetails(assignedFlightAuditVO, inboundFlight);
            		
            		Collection<ContainerDetailsVO> containerDetailsVO = findArrivalDetailsForReleasingMails(operationalFlightVO);
					int containerCount =0;
					int mailbagCount = 0;
					HashSet<String> containers = new HashSet<>();
					
					if(containerDetailsVO!=null){
						for(ContainerDetailsVO containerDetailsVo : containerDetailsVO){
							for(MailbagVO mailbags : containerDetailsVo.getMailDetails()){
								if(MailConstantsVO.FLAG_YES.equals(mailbags.getArrivedFlag()) &&
										mailbags.getMailbagId()!=null){
									containers.add(containerDetailsVo.getContainerNumber());
									mailbagCount++;
								}
							}
						}
					}
					
					if(!containers.isEmpty()){
						containerCount = containers.size();
					}
						
					StringBuilder additInfo = new StringBuilder();
					additInfo.append("Arrival Airport: " + inboundFlight.getAssignedFlightPk().getAirportCode());
					additInfo.append(", No of Containers : " + containerCount + ", No of Mailbags : " + mailbagCount);
					
					assignedFlightAuditVO.setAdditionalInformation(additInfo.toString());
					String triggeringPoint = ContextUtils.getRequestContext().getParameter(MailConstantsVO.REQ_TRIGGERPOINT);
					assignedFlightAuditVO.setTriggerPoint(triggeringPoint);
					performAssignedFlightAudit(assignedFlightAuditVO, inboundFlight,MailConstantsVO.IMPORT_FLIGHT_CLOSED);

						boolean isUldIntegrationEnbled = isULDIntegrationEnabled();
						if (isUldIntegrationEnbled) {
							log.log(Log.FINE, " ContainerVOs :", containerVOs);
							if (containerVOs != null && containerVOs.size() > 0) {
								FlightDetailsVO flightDetailsVO = new FlightDetailsVO();
								ULDInFlightVO uldInFlightVO = null;
								Collection<ULDInFlightVO> uldInFlightVOs = new ArrayList<ULDInFlightVO>();
								flightDetailsVO.setCompanyCode(operationalFlightVO
										.getCompanyCode());
								for (ContainerVO containerVO : containerVOs) {
									uldInFlightVO = new ULDInFlightVO();
									uldInFlightVO.setUldNumber(containerVO
											.getContainerNumber());
									uldInFlightVO.setPointOfLading(containerVO
											.getAssignedPort());
									uldInFlightVO.setPointOfUnLading(containerVO.getPou());
									uldInFlightVO.setRemark(MailConstantsVO.FLT_CLOSED);
									uldInFlightVOs.add(uldInFlightVO);
								}
								flightDetailsVO.setUldInFlightVOs(uldInFlightVOs);
								flightDetailsVO
										.setFlightCarrierIdentifier(operationalFlightVO
												.getCarrierId());
								flightDetailsVO.setCarrierCode(operationalFlightVO
										.getCarrierCode());
								flightDetailsVO.setFlightNumber(operationalFlightVO
										.getFlightNumber());
								flightDetailsVO.setFlightDate(operationalFlightVO
										.getFlightDate());
								flightDetailsVO.setFlightSequenceNumber(operationalFlightVO
										.getFlightSequenceNumber());
								flightDetailsVO.setLegSerialNumber(operationalFlightVO
										.getLegSerialNumber());
								flightDetailsVO.setDirection(MailConstantsVO.IMPORT);
								flightDetailsVO.setAction(FlightDetailsVO.CLOSURE);

								//Added by A-6991 for ICRD-77772 Starts
								flightDetailsVO.setSubSystem("MAIL");
								flightDetailsVO.setCurrentAirport(operationalFlightVO.getPou());
								new ULDDefaultsProxy()
										.updateULDForOperations(flightDetailsVO);

							}
						}
						}
					log.exiting(CLASS, "closeInboundFlight");
				}


				/**
				 * 	@importMailsToMRA
				 *  This Method will be called for Importing Mails to MRA Module
				 *  based on a system parameter("mailtracking.defaults.importmailstomra").
				 *
				 * @throws SystemException
				 *//*
				public void importMailsToMRA(OperationalFlightVO operationalFlightVO)
				throws SystemException{
					log.entering(CLASS, "importMailsToMRA");
					Collection<String> sysParameters = new ArrayList<String>();
					sysParameters.add(MailConstantsVO.IMPORTMAILS_TO_MRA_SYSPAR);
					HashMap<String, String> sysParameterMap = null;
					sysParameterMap = new SharedDefaultsProxy()
					.findSystemParameterByCodes(sysParameters);
					log.log(Log.FINE, " systemParameterMap ", sysParameterMap);
					if (sysParameterMap != null
							&& OperationalFlightVO.FLAG_YES.equals(sysParameterMap
									.get(MailConstantsVO.IMPORTMAILS_TO_MRA_SYSPAR))) {
						FlownMailFilterVO filterVO = new FlownMailFilterVO();
						filterVO.setFlightCarrierCode(operationalFlightVO.getCarrierCode());
						filterVO.setFlightNumber(operationalFlightVO.getFlightNumber());
						filterVO.setFlightDate(operationalFlightVO.getFlightDate());
						filterVO.setFlightCarrierId(operationalFlightVO.getCarrierId());
						filterVO.setFlightSequenceNumber((int)operationalFlightVO.getFlightSequenceNumber());
						filterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
						log.log(Log.FINE, " MailtrackingMRAProxy--- findFlightDetails---");
						Collection<FlownMailSegmentVO> flownMailSegmentVOs;
						try {
							flownMailSegmentVOs = new MailtrackingMRAProxy().findFlightDetails(filterVO);
						} catch (ProxyException ex) {
							throw new SystemException(ex.getMessage(), ex);
						}
						log.log(Log.FINE,
								" MailtrackingMRAProxy--- flownMailSegmentVOs--->",
								flownMailSegmentVOs);
						if(flownMailSegmentVOs!=null && flownMailSegmentVOs.size()>0){
							FlightValidationVO flightValidationVO = new FlightValidationVO();
							flightValidationVO.setCompanyCode(operationalFlightVO.getCompanyCode());
							flightValidationVO.setFlightCarrierId(operationalFlightVO.getCarrierId());
							flightValidationVO.setFlightNumber(operationalFlightVO.getFlightNumber());
							flightValidationVO.setCarrierCode(operationalFlightVO.getCarrierCode());
							flightValidationVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
							flightValidationVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
							flightValidationVO.setFlightRoute(operationalFlightVO.getFlightRoute());
							flightValidationVO.setDirection(operationalFlightVO.getDirection());
							log.log(Log.FINE, " MailtrackingMRAProxy--- importFlownMails---");
							try {
								new MailtrackingMRAProxy().importFlownMails(flightValidationVO, flownMailSegmentVOs);
							} catch (ProxyException ex) {
								throw new SystemException(ex.getMessage(), ex);
							}
						}
					}
					log.exiting(CLASS, "importMailsToMRA");
				}
*/

				/**
     * @param operationalFlightVO
     * @return
     * @throws SystemException
     * @author a-1883
				 */
				public Collection<MailDiscrepancyVO> findMailDiscrepancies(
						OperationalFlightVO operationalFlightVO) throws SystemException {
					log.entering(CLASS, "findMailDiscrepancies");
					return AssignedFlight.findMailDiscrepancies(operationalFlightVO);
				}


				/**
				 * @param conatinerstoAcquit
				 * @throws SystemException
				 */
				public  void autoAcquitContainers(Collection<ContainerDetailsVO> conatinerstoAcquit)
				throws SystemException {
					log.entering(CLASS, "autoAcquitContainers");
        if (conatinerstoAcquit != null && conatinerstoAcquit.size() > 0) {
						 /**
						  * for status updation in MTKULDSEG
						  */
            for (ContainerDetailsVO containerDetailsVO : conatinerstoAcquit) {
                if (!"B".equals(containerDetailsVO.getContainerType())) {
							 ContainerPK containerPK = new ContainerPK();
							 containerPK.setCompanyCode(containerDetailsVO.getCompanyCode());
							 containerPK.setCarrierId(containerDetailsVO.getCarrierId());
							 containerPK.setFlightNumber(containerDetailsVO.getFlightNumber());
                    containerPK.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
							 containerPK.setAssignmentPort(containerDetailsVO.getPol());
							 containerPK.setContainerNumber(containerDetailsVO.getContainerNumber());
							 containerPK.setLegSerialNumber(Container
									 .findFlightLegSerialNumber(constructContainerVO(containerDetailsVO)));
							 Container containerToUpdate = null;
                    try {
								 containerToUpdate = Container.find(containerPK);
								} catch (FinderException finderException) {
									log.log(Log.FINE,  "FinderException ");
								}
								if((containerToUpdate!=null && containerToUpdate.getRetainFlag().equals(MailConstantsVO.FLAG_NO)) || containerDetailsVO.isAquitULDFlag()){
								 containerToUpdate.setTransitFlag(MailConstantsVO.FLAG_NO);

									ULDForSegmentPK uldForSegmentPK = new ULDForSegmentPK();
									uldForSegmentPK.setCompanyCode(containerDetailsVO.getCompanyCode());
									uldForSegmentPK.setCarrierId(containerDetailsVO.getCarrierId());
									uldForSegmentPK.setFlightNumber(containerDetailsVO.getFlightNumber());
									uldForSegmentPK.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
									uldForSegmentPK.setUldNumber(containerDetailsVO.getContainerNumber());
									uldForSegmentPK.setSegmentSerialNumber(containerDetailsVO.getSegmentSerialNumber());
					containerDetailsVO.setCarrierCode(containerToUpdate.getCarrierCode());
									ULDForSegment uldForSegment = null;
									try {
										uldForSegment = ULDForSegment.find(uldForSegmentPK);
										//Updated by U-1532 as part of STLDTA fix
										if (uldForSegment != null && (!MailConstantsVO.FLAG_YES.equals(uldForSegment.getReleasedFlag()))) {
											uldForSegment.setReleasedFlag(MailConstantsVO.FLAG_YES);
										}
                   } catch (FinderException finderException) {
								 log.log(Log.FINE,  "FinderException ");
									}
							 }
						 }
				MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
				mailController.flagContainerAuditForAcquital(containerDetailsVO);	
						 }
						 /**
						  * For uld module integration
						  */
						 boolean isUldIntegrationEnbled = isULDIntegrationEnabled();
            if (isUldIntegrationEnbled) {
							 FlightDetailsVO flightDetailsVO = new FlightDetailsVO();
							 ULDInFlightVO uldInFlightVO = null;
							 Collection<ULDInFlightVO> uldInFlightVOs = new ArrayList<ULDInFlightVO>();

                ContainerDetailsVO containerDetailsVO = (ContainerDetailsVO) ((ArrayList<ContainerDetailsVO>) conatinerstoAcquit).get(0);

							 flightDetailsVO.setCompanyCode(containerDetailsVO.getCompanyCode());
							 flightDetailsVO.setFlightCarrierIdentifier(containerDetailsVO.getCarrierId());
							 flightDetailsVO.setCarrierCode(containerDetailsVO.getCarrierCode());
							 flightDetailsVO.setFlightNumber(containerDetailsVO.getFlightNumber());
							 flightDetailsVO.setFlightDate(containerDetailsVO.getFlightDate());
							 flightDetailsVO.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
							 flightDetailsVO.setLegSerialNumber(containerDetailsVO.getLegSerialNumber());
							 flightDetailsVO.setDirection(MailConstantsVO.IMPORT);

							 for (ContainerDetailsVO containerVO : conatinerstoAcquit) {

								 uldInFlightVO = new ULDInFlightVO();
								 uldInFlightVO
								 .setUldNumber(containerVO.getContainerNumber());

								 uldInFlightVO.setPointOfLading(containerVO.getPol());
								 uldInFlightVO.setPointOfUnLading(containerVO.getPou());
								 uldInFlightVO.setRemark(MailConstantsVO.FLT_CLOSED);
								 uldInFlightVOs.add(uldInFlightVO);
							 }
							 flightDetailsVO.setUldInFlightVOs(uldInFlightVOs);
							 flightDetailsVO.setAction(FlightDetailsVO.CLOSURE);
							 try {
					Proxy.getInstance().get(ULDDefaultsProxy.class)
								 .updateULDForOperations(flightDetailsVO);
							 } catch (ULDDefaultsProxyException ex) {
								 log.log(Log.FINE,  "ULDDefaultsProxyException ");
							 }
						 }
					 }
				}

				/***
				 * @author a-6245
				 * @param mailArrivalVOs
				 * @throws ContainerAssignmentException
				 * @throws SystemException
				 * @throws DuplicateMailBagsException
				 * @throws MailbagIncorrectlyDeliveredException
				 * @throws InvalidFlightSegmentException
				 * @throws FlightClosedException
				 * @throws InventoryForArrivalFailedException
				 * @throws ULDDefaultsProxyException
				 * @throws DuplicateDSNException
				 * @throws CapacityBookingProxyException
				 * @throws MailBookingException
				 * @throws MailTrackingBusinessException
				 */
				public void saveChangeFlightDetails(Collection<MailArrivalVO> mailArrivalVOs)
			throws SystemException, MailTrackingBusinessException {
        log.entering(CLASS, "saveChangeFlightDetails");
        if (mailArrivalVOs != null && mailArrivalVOs.size() > 0) {
            for (MailArrivalVO mailArrivalVO : mailArrivalVOs) {
						mailArrivalVO.setFlightChange(true);
                if (MailConstantsVO.FLAG_NO.equals(mailArrivalVO.getChangeFlightFlag())) {
							//Modified by A-7794 as part of ICRD-224613.
							try {
								new MailtrackingDefaultsProxy().undoArriveContainer(mailArrivalVO);
							} catch (ProxyException e) {
								// TODO Auto-generated catch block
								e.getMessage();
							}
                } else {
							saveArrivalDetails(mailArrivalVO);
							}
						}
					}
        log.exiting(CLASS, "saveChangeFlightDetails");
				}


				/**
     * @param operationalFlightVO
     * @throws SystemException
				 * @author a-1883 This method is used to reopen the InboundFlight
				 */
				public void reopenInboundFlight(OperationalFlightVO operationalFlightVO)
						throws SystemException {
					log.entering(CLASS, "reopenInboundFlight");
					AssignedFlight inboundFlight = null;
					AssignedFlightPK inboundFlightPk = new AssignedFlightPK();
					inboundFlightPk.setAirportCode(operationalFlightVO.getPou());
					inboundFlightPk.setCompanyCode(operationalFlightVO.getCompanyCode());
					inboundFlightPk.setFlightNumber(operationalFlightVO.getFlightNumber());
					inboundFlightPk.setFlightSequenceNumber(operationalFlightVO
							.getFlightSequenceNumber());
					inboundFlightPk.setLegSerialNumber(operationalFlightVO
							.getLegSerialNumber());
					inboundFlightPk.setCarrierId(operationalFlightVO.getCarrierId());
					try {
						inboundFlight = AssignedFlight.find(inboundFlightPk);
					} catch (FinderException ex) {
						log.log(Log.INFO, FINDEREXCEPTIO_STRING);
						log.log(Log.INFO, "DATA INCONSISTENT");
						throw new SystemException(ex.getErrorCode(), ex);

					}
					/*
					 * AssignedFlightAuditVO assignedFlightAuditVO = new
					 * AssignedFlightAuditVO( AssignedFlightVO.MODULE,
					 * AssignedFlightVO.SUBMODULE, AssignedFlightVO.ENTITY);
					 * assignedFlightAuditVO = (AssignedFlightAuditVO) AuditUtils
					 * .populateAuditDetails(assignedFlightAuditVO, assignedFlight);
					 */
					if (inboundFlight != null) {
						inboundFlight.setImportClosingFlag(MailConstantsVO.FLIGHT_STATUS_OPEN);
					}
					/*
					 * assignedFlightAuditVO.setAdditionalInformation( "Flight Reopened,
					 * Flight Status : " + assignedFlight.getFlightStatus());
					 * performAssignedFlightAudit(assignedFlightAuditVO, assignedFlight,
					 * MailConstantsVO.AUDIT_FLIGHT_OPENED);
					 */
				}


    /**
				 * @param carditEnquiryFilterVO
				 * @return
				 * @throws SystemException
				 */
				public CarditEnquiryVO findCarditDetails(
						CarditEnquiryFilterVO carditEnquiryFilterVO) throws SystemException {
					log.entering(CLASS, "findCarditDetailsForMail");
						if (MailConstantsVO.FLIGHT_TYP_CARDIT.equals(carditEnquiryFilterVO
								.getFlightType())) {
							return Cardit.findCarditDetails(carditEnquiryFilterVO);
						} else if (MailConstantsVO.FLIGHT_TYP_OPR.equals(carditEnquiryFilterVO
								.getFlightType())) {
							return MailAcceptance.findCarditDetails(carditEnquiryFilterVO);
						}
						return null;
						}


				/**
				 * This method manually sends the currently unsent event Feb 13, 2007,
				 * a-1739
				 *
				 * @param carditEnquiryVO
				 * @throws SystemException
				 * @throws ContainerAssignmentException
				 */
				public void sendResdit(CarditEnquiryVO carditEnquiryVO)
						throws SystemException, ContainerAssignmentException {
					log.entering(CLASS, "sendResdit");
						String searchMode = carditEnquiryVO.getSearchMode();
						Collection<MailbagVO> mailbagVOs = carditEnquiryVO.getMailbagVos();
        Collection<MailbagVO> mailbagVOsTmp = new ArrayList<MailbagVO>();
						String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
        if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
							log.log(Log.FINE, "Resdit Enabled ", resditEnabled);

							//A-8061 Added for ICRD-82434 starts
							Collection<ConsignmentDocumentVO> consignmentDocumentVOs = new ArrayList<ConsignmentDocumentVO>();
            ConsignmentDocumentVO consignmentDocumentVO = null;
            HashMap<String, String> consignmentDocuments = new HashMap<String, String>();

            if (mailbagVOs != null && mailbagVOs.size() > 0) {
                for (MailbagVO mailbagVO : mailbagVOs) {
                    if (mailbagVO.getConsignmentNumber() != null && !"".equals(mailbagVO.getConsignmentNumber())) {
                        if (consignmentDocuments.get(mailbagVO.getConsignmentNumber()) == null) {
											consignmentDocuments.put(mailbagVO.getConsignmentNumber(), mailbagVO.getConsignmentNumber());
										}
									}
								}
							}

            if (consignmentDocuments != null && consignmentDocuments.size() > 0) {
                for (Map.Entry<String, String> entry : consignmentDocuments.entrySet()) {
                    consignmentDocumentVO = new ConsignmentDocumentVO();
									consignmentDocumentVO.setConsignmentNumber(entry.getKey());
									consignmentDocumentVOs.add(consignmentDocumentVO);
								}
							}
							carditEnquiryVO.setConsignmentDocumentVos(consignmentDocumentVOs);
							/**
							 * If user selects more than one mail bags of different consignment document No. and click on send Resdit,
							 *  it would send pending resdits of all the mail bags of the consignments.
							 */
							mailbagVOs = findMailbagsForUnsentResdit(carditEnquiryVO);

            mailbagVOsTmp = mailbagVOs;
            if (mailbagVOs != null && mailbagVOs.size() > 0) {
                for (MailbagVO mailbagVO : mailbagVOs) {
                    ArrayList<MailbagVO> mailbagVOsToSend = new ArrayList<MailbagVO>();
                    for (MailbagVO mailbagVOTmp : mailbagVOsTmp) {
                        if (mailbagVO.getResditEventString() != null && mailbagVO.getResditEventString().equals(mailbagVOTmp.getResditEventString())
                                && mailbagVO.getResditEventSeqNum() != 0 && mailbagVO.getResditEventSeqNum() == mailbagVOTmp.getResditEventSeqNum()) {
											if (!MailConstantsVO.FLAG_YES.equals(mailbagVOTmp.getMailStatus())) {
                                if (mailbagVOsToSend.size() == 0) {
												mailbagVOsToSend.add(mailbagVOTmp);
												}
												mailbagVOTmp.setMailStatus(MailConstantsVO.FLAG_YES);
											}
										}
									}

                    if (mailbagVOsToSend != null && mailbagVOsToSend.size() > 0) {

										carditEnquiryVO.setUnsendResditEvent(mailbagVOsToSend.get(0).getResditEventString());
										carditEnquiryVO.setMailbagVos(mailbagVOsToSend);
										new ResditController().sendResditMessages(carditEnquiryVO);
									}
								}
							}
						//A-8061 Added for ICRD-82434 ends

						/*if (mailbagVOs != null
								&& mailbagVOs.size() > 0
								|| (carditEnquiryVO.getContainerVos() != null && carditEnquiryVO
										.getContainerVos().size() > 0)) {
							carditEnquiryVO.setMailbagVos(mailbagVOs);
							new ResditController().sendResditMessages(carditEnquiryVO);



						}*/
						}
						log.exiting(CLASS, "sendResdit");
						}


				/**
				 * @author a-1936 ADDED AS THE PART OF NCA-CR This method is used to find
				 *         the Mail Details for all the Unsent Resdits ..
				 */
				private Collection<MailbagVO> findMailbagsForUnsentResdit(
            CarditEnquiryVO carditEnquiryVo) throws SystemException {
        Collection<MailbagVO> mailBagVos = null;
						if (MailConstantsVO.CARDITENQ_MODE_DOC.equals(carditEnquiryVo
								.getSearchMode())
								&& carditEnquiryVo.getConsignmentDocumentVos() != null
								&& carditEnquiryVo.getConsignmentDocumentVos().size() > 0) {
							mailBagVos = findMailDetailsForDocument(carditEnquiryVo
									.getConsignmentDocumentVos(), carditEnquiryVo
									.getUnsendResditEvent());
						} else if (MailConstantsVO.CARDITENQ_MODE_DESP.equals(carditEnquiryVo
								.getSearchMode())
								&& carditEnquiryVo.getDespatchDetailVos() != null
								&& carditEnquiryVo.getDespatchDetailVos().size() > 0) {
							mailBagVos = findMailDetailsForDespatches(carditEnquiryVo
									.getDespatchDetailVos(), carditEnquiryVo
									.getUnsendResditEvent());
						}
						return mailBagVos;
						}


				/**
				 * This method is used to find the MailDetails for all UnsentResdits in case
				 * of the Search Mode Being Despatch
				 *
				 * @param despatchDetailVos
				 * @param unsentResditEvent
				 * @return
				 */
				private Collection<MailbagVO> findMailDetailsForDespatches(
						Collection<DespatchDetailsVO> despatchDetailVos,
						String unsentResditEvent) throws SystemException {
					return Mailbag.findMailDetailsForDespatches(despatchDetailVos,
							unsentResditEvent);
				}

				/**
				 * @param consignmentDocumentVos
				 * @param unsentResditEvent
				 * @return
     * @author a-1936 ADDED AS THE PART OF NCA-CR This method is used to find
     * out all the MailDetail for which the Resdits has not been sent
     * Also the Search Mode is For The Documents..
				 */
				private Collection<MailbagVO> findMailDetailsForDocument(
						Collection<ConsignmentDocumentVO> consignmentDocumentVos,
						String unsentResditEvent) throws SystemException {
					return Mailbag.findMailDetailsForDocument(consignmentDocumentVos,
							unsentResditEvent);

				}

				/**
     * @param containers
     * @return
     * @throws SystemException
     * @throws PersistenceException
				 * @author A-3251 SREEJITH P.C. This method is used to find the details of
				 *         ulds and bulk to generate a report for Daily Mail Station
				 */
				public Map<String, Object> generateDailyMailStationReport(
						ReportSpec reportspec) throws SystemException,
						ReportGenerationException {
					log.log(Log.FINE, "Inside DailyMailStation controller>>>>>>> ");
					log
							.log(
									Log.FINE,
									"Going to call Entity class method generateDailyMailStationReport(filterVO) from  DailyMailStationController controller>>>>>>> ");
					DailyMailStationFilterVO filterVO = DailyMailStationFilterVO.class
							.cast(reportspec.getFilterValues().get(0));
				
				Collection<DailyMailStationReportVO> dmsReportVOs = null;	
				try {    
						dmsReportVOs=Proxy.getInstance().get(MailOperationsProxy.class).generateDailyMailStationRT(filterVO);
                       } catch (ProxyException e) {
                         throw new SystemException(e.getMessage(),e);}
					reportspec.addParameter(filterVO);
					reportspec.setData(dmsReportVOs);
					return ReportAgent.generateReport(reportspec);
				}
				
                public Collection<DailyMailStationReportVO> generateDailyMailStationRT(      DailyMailStationFilterVO filterVO)
						   throws SystemException, ReportGenerationException{
					 return AssignedFlightSegment.generateDailyMailStationReport(filterVO);
				 }

				/**
				 * @param companyCode
				 * @param paCode
				 * @param paName
				 * @param pageNumber
				 * @return
				 * @throws SystemException
     * @author A-2037 Method for PALov containing PACode and PADescription
				 */
				public Page<PostalAdministrationVO> findPALov(String companyCode,
                                                  String paCode, String paName, int pageNumber, int defaultSize)
						throws SystemException {
					log.entering(CLASS, "findPALov");
					return PostalAdministration.findPALov(companyCode, paCode, paName,
                pageNumber, defaultSize);
				}

				 /**
     * @param consignmentFilterVO
     * @throws SystemException
     * @throws RemoteException *
     * @author A-2107
				 */
			   public Collection<MailbagVO> findCartIds(ConsignmentFilterVO consignmentFilterVO)
            throws SystemException {
        return constructDAO().findCartIdsMailbags(consignmentFilterVO);

				 // return null;

			   }

				/**
				 * @param dsnVO
				 * @return
				 * @throws SystemException
				 */
				public Collection<MailbagVO> findDSNMailbags(DSNVO dsnVO)
            throws SystemException {
					return Mailbag.findDSNMailbags(dsnVO);
			   }

			   /**
     * Added for icrd-95515
     *
                * @param companyCode
                * @param airportCode
                * @return
                * @throws SystemException
                */
			public  Collection<String> findOfficeOfExchangesForAirport(
            String companyCode, String airportCode) throws SystemException {
				   log.entering("MailTrackingDefaultsServicesEJB", "findCityAndAirportForOE");
				   CacheFactory factory = CacheFactory.getInstance();
					OfficeOfExchangeCache cache = factory
	    				.getCache(OfficeOfExchangeCache.ENTITY_NAME);
	    			return cache.findOfficeOfExchangesForAirport(companyCode,airportCode);
			 }

			/**
			 * @param companyCode
			 * @param officeOfExchange
			 * @return
			 * @throws SystemException
			 */
			public PostalAdministrationVO findPADetails(String companyCode,
					String officeOfExchange) throws SystemException {
				log.entering(CLASS, "findPADetails");
				PostalAdministrationVO postalAdministrationVO = PostalAdministration
						.findPADetails(companyCode, officeOfExchange);
				log.exiting(CLASS, "findPADetails");
				return postalAdministrationVO;
			}

    /**
			 * @param postalAdministrationDetailsVO
			 * @throws SystemException
			 * @throws RemoteException	 *
     * @author A-3251
			 */
		   public PostalAdministrationDetailsVO validatePoaDetails(PostalAdministrationDetailsVO postalAdministrationDetailsVO)
            throws SystemException {
			  return PostalAdministrationDetails.validatePoaDetails(postalAdministrationDetailsVO);
		   }

			/**
			 * 	Method		:	MailController.findAllPACodes
			 *	Added by 	:	A-4809 on 08-Jan-2014
			 * 	Used for 	:	ICRD-42160
			 *	Parameters	:	@param generateInvoiceFilterVO
			 *	Parameters	:	@return
			 *	Parameters	:	@throws SystemException
			 *	Return type	: 	Collection<PostalAdministrationVO>
			 */
			public Collection<PostalAdministrationVO> findAllPACodes(GenerateInvoiceFilterVO generateInvoiceFilterVO)
            throws SystemException {
				log.entering(MODULE, "findAllPACodes");
				log.exiting(MODULE, "findAllPACodes");
				return PostalAdministration.findAllPACodes(generateInvoiceFilterVO);
			}
			/**
			 *
			 * 	Method		:	MailController.auditMailbagsForMRA
			 *	Added by 	:	a-4809 on Apr 3, 2014
			 * 	Used for 	:
			 *	Parameters	:	@param dsnAuditVOs
			 *	Parameters	:	@throws SystemException
			 *	Return type	: 	void
			 */
			/* Commented the method as part of ICRD-153078
			public void auditMailbagsForMRA(Collection<MailbagAuditVO> mailbagAuditVOs)
			throws SystemException {
				log.entering(CLASS, "auditMailbagsForMRA");
				if (mailbagAuditVOs == null || mailbagAuditVOs.size() == 0){
					return;
				}
				for (MailbagAuditVO mailbagAuditVO : mailbagAuditVOs){
					new MailbagAudit(mailbagAuditVO);
				}
				log.exiting(CLASS, "auditMailbagsForMRA");
			}*/

    /**
     * @param reportSpec
     * @return
     * @throws SystemException
     * @throws ReportGenerationException
     * @author A-3227 RENO K ABRAHAM
			 */
			public Map<String, Object> generateMailHandedOverReport(
					ReportSpec reportSpec) throws SystemException,
					ReportGenerationException {
				log.entering(CLASS, "generateMailHandedOverReport");
				MailHandedOverFilterVO mailHandedOverFilterVO = MailHandedOverFilterVO.class
						.cast(reportSpec.getFilterValues().get(0));
				
				Collection<MailHandedOverVO> mailHandedOverVOs = null;
                try {    
                	mailHandedOverVOs=Proxy.getInstance().get(MailOperationsProxy.class).generateMailHandedOverRT(mailHandedOverFilterVO);
                   } catch (ProxyException e) {
                       throw new SystemException(e.getMessage(),e);}
				reportSpec.addParameter(mailHandedOverFilterVO);
				reportSpec.setData(mailHandedOverVOs);
				log.exiting(CLASS, "generateMailHandedOverReport");
				return ReportAgent.generateReport(reportSpec);
			}
			public Collection<MailHandedOverVO> generateMailHandedOverRT(MailHandedOverFilterVO mailHandedOverFilterVO) throws SystemException {
				return Mailbag.generateMailHandedOverReport(mailHandedOverFilterVO);
			}

			/**
			 * This method is used to save the PartnerCarriers A-1936
			 *
			 * @param partnerCarrierVOs
			 * @throws SystemException
			 * @throws RemoveException
			 * @throws InvalidPartnerException
			 */
			public void savePartnerCarriers(
					Collection<PartnerCarrierVO> partnerCarrierVOs)
					throws SystemException, RemoveException, InvalidPartnerException {
				log.entering(CLASS, "savePartnerCarriers");
				PartnerCarrier partnerCarrier = null;
				PartnerCarrierPK partnerCarrierPk = null;
				StringBuilder errors = null;
				StringBuilder duplicatePartners = null;
				if (partnerCarrierVOs != null && partnerCarrierVOs.size() > 0) {
					for (PartnerCarrierVO partnerCarrierVO : partnerCarrierVOs) {
						if (PartnerCarrierVO.OPERATION_FLAG_INSERT
								.equals(partnerCarrierVO.getOperationFlag())) {
							boolean isValid = validatePartnerCarrier(partnerCarrierVO);
							if (isValid) {
								partnerCarrierPk = constructPartnerCarrierPK(partnerCarrierVO);
								try {
									partnerCarrier = PartnerCarrier
											.find(partnerCarrierPk);
									if (partnerCarrier != null) {
										if (duplicatePartners == null) {
											duplicatePartners = new StringBuilder();
										}
										duplicatePartners.append(
												partnerCarrierVO
														.getPartnerCarrierCode())
												.append(",");
									}
								} catch (FinderException ex) {
									new PartnerCarrier(partnerCarrierVO);
								}
							} else {
								if (errors == null) {
									errors = new StringBuilder();
								}
								errors.append(partnerCarrierVO.getPartnerCarrierCode())
										.append(",");
							}
						} else if (PartnerCarrierVO.OPERATION_FLAG_UPDATE
								.equals(partnerCarrierVO.getOperationFlag())) {
							partnerCarrierPk = constructPartnerCarrierPK(partnerCarrierVO);
							try {
								partnerCarrier = PartnerCarrier.find(partnerCarrierPk);
							} catch (FinderException ex) {
								throw new SystemException(ex.getErrorCode(), ex);
							}
							partnerCarrier.update(partnerCarrierVO);
						} else if (PartnerCarrierVO.OPERATION_FLAG_DELETE
								.equals(partnerCarrierVO.getOperationFlag())) {
							partnerCarrierPk = constructPartnerCarrierPK(partnerCarrierVO);
							try {
								partnerCarrier = PartnerCarrier.find(partnerCarrierPk);
							} catch (FinderException ex) {
								partnerCarrier.setLastUpdateTime(partnerCarrierVO
										.getLastUpdateTime());
								throw new SystemException(ex.getErrorCode(), ex);
							}
							partnerCarrier.remove();
						}
					}

					/*
					 * The block checks if any invalid Partner CarrierCodes are
					 * Collected Throw the Exception
					 */
					if (duplicatePartners != null && duplicatePartners.length() > 0) {
						log.log(Log.FINE, "The Invalid PartnerCarrierCodes are",
								duplicatePartners);
						throw new InvalidPartnerException(
								InvalidPartnerException.DUPLICATE_PARTNER,
                        new Object[]{duplicatePartners.deleteCharAt(
                                duplicatePartners.length() - 1).toString()});
					}

					/*
					 * The block checks if any invalid Partner CarrierCodes are
					 * Collected Throw the Exception
					 */
					if (errors != null && errors.length() > 0) {
						String error = errors.deleteCharAt(errors.length() - 1)
								.toString();
						log.log(Log.FINE, "The Invalid PartnerCarrierCodes are", error);
						throw new InvalidPartnerException(
								InvalidPartnerException.INVALID_PARTNER,
                        new Object[]{error});
					}

				}

			}

    /**
			 * @param partnerCarrierVO
     * @author A-1936 This method is used to construct the PartnerCarrierPK
			 */
			private PartnerCarrierPK constructPartnerCarrierPK(
					PartnerCarrierVO partnerCarrierVO) {
				PartnerCarrierPK partnerCarrierPk = new PartnerCarrierPK();
				partnerCarrierPk.setCompanyCode(partnerCarrierVO.getCompanyCode());
				partnerCarrierPk.setAirportCode(partnerCarrierVO.getAirportCode());
				partnerCarrierPk
						.setOwnCarrierCode(partnerCarrierVO.getOwnCarrierCode());
				partnerCarrierPk.setPartnerCarrierCode(partnerCarrierVO
						.getPartnerCarrierCode());
				return partnerCarrierPk;
			}

			/**
     * @param partnerCarrierVO
     * @throws SystemException
			 * @author A-1936 This method is used to validate whether the
			 *         PartnersCarrierCode is Valid.If Valid Set the Airline Identifier
			 *         in the partnerCarrierVO
			 */
			private boolean validatePartnerCarrier(PartnerCarrierVO partnerCarrierVO)
					throws SystemException {
				boolean isValid = false;
				AirlineValidationVO airlineValidationVo = new PartnerCarrier()
						.validatePartnerCarrier(partnerCarrierVO.getCompanyCode(),
								partnerCarrierVO.getPartnerCarrierCode());
				if (airlineValidationVo != null) {
					log.log(Log.FINE, "The Airline Identifier is ", airlineValidationVo.getAirlineIdentifier());
					partnerCarrierVO.setPartnerCarrierId(String
							.valueOf(airlineValidationVo.getAirlineIdentifier()));
					isValid = true;
				}
				return isValid;
			}

    public boolean validateCoterminusairports(String actualAirport, String eventAirport, String eventCode, String paCode,LocalDate dspDate) throws SystemException {
				String isCoterminusConfigured = findSystemParameterValue(MailConstantsVO.IS_COTERMINUS_CONFIGURED);
				log.log(Log.FINE, "isCoterminusConfigured? : ", isCoterminusConfigured);
				boolean validateCoterminusairports = false;
        if (MailConstantsVO.FLAG_YES.equals(isCoterminusConfigured) && actualAirport != null && eventAirport != null && eventCode != null && paCode != null) {
        	validateCoterminusairports =  new CoterminusAirport().validateCoterminusairports(actualAirport, eventAirport, eventCode, paCode,dspDate);
		}
        if(!validateCoterminusairports)	{
			//check whether PACode is applicable to by bass destination check while delivery, IASCB-55964
			if(MailConstantsVO.RESDIT_DELIVERED.equals(eventCode) || MailConstantsVO.RESDIT_READYFOR_DELIVERY.equals(eventCode) ) {
				String paCodeForDestinationByPass = findSystemParameterValue("mail.operations.pacodeforvalidationbypass");
				if(paCodeForDestinationByPass!=null && paCodeForDestinationByPass.trim().length()>0) {
					if(paCodeForDestinationByPass.contains(paCode) ||(isValidDestForCarditMissingDomesticMailbag(actualAirport))) {
						validateCoterminusairports = true;
					}
				} 
			}
		 }  
           return validateCoterminusairports;
        }
			public void saveCoterminusDetails(
					Collection<CoTerminusVO> coterminusVOs)
					throws SystemException, RemoveException {
				log.entering(CLASS, "saveCoterminusDetails");
				CoterminusAirport coterminus = null;
				CoterminusAirportPK coterminusPK = null;
				StringBuilder duplicateCoTerminus = null;
				log.log(Log.FINE, "The coterminusVOs  are ", coterminusVOs);
				log.log(Log.FINE, "The number of coterminusVOs  are ", coterminusVOs.size());
				if (coterminusVOs != null && coterminusVOs.size() > 0) {
					for (CoTerminusVO coterminusVO : coterminusVOs) {
						log.log(Log.FINE, "The coterminusVO  are ", coterminusVO);
						if (CoTerminusVO.OPERATION_FLAG_INSERT
								.equals(coterminusVO.getCoOperationFlag())) {

								coterminusPK = constructCoterminusAirportPK(coterminusVO);
								log.log(Log.FINE, "if: The coterminusPK  are ", coterminusPK);
								try {
									coterminus = CoterminusAirport
											.find(coterminusPK);
									if (coterminus != null) {
										if (duplicateCoTerminus == null) {
											duplicateCoTerminus = new StringBuilder();
										}
										duplicateCoTerminus.append(
												coterminusVO
														.getCoAirportCodes())
												.append(",");
										new CoterminusAirport(coterminusVO);
									}
								} catch (FinderException ex) {
									new CoterminusAirport(coterminusVO);
								}

						} else if (CoTerminusVO.OPERATION_FLAG_UPDATE
								.equals(coterminusVO.getCoOperationFlag())) {
							coterminusPK = constructCoterminusAirportPK(coterminusVO);
							log.log(Log.FINE, "else if1: The coterminusPK  are ", coterminusPK);
							try {
								coterminus = CoterminusAirport.find(coterminusPK);
							} catch (FinderException ex) {
								throw new SystemException(ex.getErrorCode(), ex);
							}
							coterminus.update(coterminusVO);
						} else if (CoTerminusVO.OPERATION_FLAG_DELETE
								.equals(coterminusVO.getCoOperationFlag())) {

							log.log(Log.FINE, "else if2: The coterminusPK  are ", coterminusPK);
							try {
                        CoTerminusFilterVO filterVO = new CoTerminusFilterVO();
								filterVO.setAirportCodes(coterminusVO.getCoAirportCodes());
						    	filterVO.setCompanyCode(coterminusVO.getCompanyCode());
						    	filterVO.setGpaCode(coterminusVO.getGpaCode());
						    	filterVO.setResditModes(coterminusVO.getResditModes());
                        Collection<CoTerminusVO> coTerminusVOsFronDb = findAllCoTerminusAirports(filterVO);
                        if (coTerminusVOsFronDb != null && coTerminusVOsFronDb.size() > 0) {
                            for (CoTerminusVO coTerminusVO : coTerminusVOsFronDb)
									coterminusPK = constructCoterminusAirportPK(coTerminusVO);
								coterminus = CoterminusAirport.find(coterminusPK);
									coterminus.remove();

								}

							} catch (FinderException ex) {
								coterminus.setLastUpdateTime(coterminusVO
										.getLastUpdateTime());
								throw new SystemException(ex.getErrorCode(), ex);
							}

						}
					}
				}
			}

    public void saveRdtMasterDetails(
            Collection<MailRdtMasterVO> mailRdtMasterVOs)
            throws SystemException, RemoveException {
        log.entering(CLASS, "saveCoterminusDetails");
        MailRdtMaster rdtDetails = null;
        MailRdtMasterPK rdtmasterPK = null;
        StringBuilder duplicateRdt = null;
        log.log(Log.FINE, "The coterminusVOs  are ", mailRdtMasterVOs);
        log.log(Log.FINE, "The number of coterminusVOs  are ", mailRdtMasterVOs.size());
        if (mailRdtMasterVOs != null && mailRdtMasterVOs.size() > 0) {
            for (MailRdtMasterVO mailRdtMasterVO : mailRdtMasterVOs) {
                log.log(Log.FINE, "The coterminusVO  are ", mailRdtMasterVOs);
                if (MailRdtMasterVO.OPERATION_FLAG_INSERT
                        .equals(mailRdtMasterVO.getOperationFlag())) {

                    rdtmasterPK = constructRdtMasterPK(mailRdtMasterVO);
                    log.log(Log.FINE, "if: The coterminusPK  are ", rdtmasterPK);
                    try {
                        rdtDetails = MailRdtMaster
                                .find(rdtmasterPK);
                        if (rdtDetails != null) {
                            if (duplicateRdt == null) {
                                duplicateRdt = new StringBuilder();
                            }
                            duplicateRdt.append(
                                    mailRdtMasterVO
                                            .getAirportCodes())
                                    .append(",");
                        }
                    } catch (FinderException ex) {
                        new MailRdtMaster(mailRdtMasterVO);
                    }

                } else if (CoTerminusVO.OPERATION_FLAG_DELETE
                        .equals(mailRdtMasterVO.getOperationFlag())) {
                    rdtmasterPK = constructRdtMasterPK(mailRdtMasterVO);
                    log.log(Log.FINE, "else if2: The coterminusPK  are ", rdtmasterPK);
                    try {
                        rdtDetails = MailRdtMaster.find(rdtmasterPK);
                    } catch (FinderException ex) {
                        rdtDetails.setLastUpdateTime(mailRdtMasterVO
                                .getLastUpdateTime());
                        throw new SystemException(ex.getErrorCode(), ex);
                    }
                    rdtDetails.remove();
                } else {
                    rdtmasterPK = constructRdtMasterPK(mailRdtMasterVO);
                    log.log(Log.FINE, "else if1: The coterminusPK  are ", rdtmasterPK);
                    try {
                        rdtDetails = MailRdtMaster.find(rdtmasterPK);
                    } catch (FinderException ex) {
                        throw new SystemException(ex.getErrorCode(), ex);
                    }
                    rdtDetails.update(mailRdtMasterVO);
                }
            }
        }
    }

    /**
     * Method		:	MailController.saveRdtMasterDetailsXls
     * Added by 	:	A-6991 on 23-Jul-2018
     * Used for 	:   ICRD-212544
     * Parameters	:	@param mailRdtMasterVOs
     * Parameters	:	@return
     * Parameters	:	@throws SystemException
     * Parameters	:	@throws RemoveException
     * Return type	: 	Collection<ErrorVO>
     */
    public Collection<ErrorVO> saveRdtMasterDetailsXls(
            Collection<MailRdtMasterVO> mailRdtMasterVOs)
            throws SystemException {
        log.entering(CLASS, "saveCoterminusDetails");

        log.log(Log.FINE, "The coterminusVOs  are ", mailRdtMasterVOs);
        log.log(Log.FINE, "The number of coterminusVOs  are ", mailRdtMasterVOs.size());

        ErrorVO error = null;
        Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
        LocalDate currentDate = new LocalDate(LocalDate.NO_STATION, Location.NONE, false);
        LogonAttributes logonAtributes = getLogonAttributes();
        Collection<MailRdtMasterVO> prevmailRdtMasterVOs = null;
        String companyCode = getLogonAttributes().getCompanyCode();
        RdtMasterFilterVO filterVO = new RdtMasterFilterVO();
        filterVO.setCompanyCode(companyCode);
        filterVO.setMailType("D");
        try {

            prevmailRdtMasterVOs = findRdtMasterDetails(filterVO);

        } catch (SystemException e) {
            throw new SystemException(e.getMessage(), e);
        }
        if (prevmailRdtMasterVOs != null && prevmailRdtMasterVOs.size() > 0) {

            for (MailRdtMasterVO mailRdtMasterVO : prevmailRdtMasterVOs) {
                MailRdtMasterPK mailRdtMasterPK = constructRdtMasterPK(mailRdtMasterVO);
                MailRdtMaster mailRdtMaster = null;
                try {
                    mailRdtMaster = MailRdtMaster.find(mailRdtMasterPK);
                } catch (FinderException e) {
                    mailRdtMaster = null;
                }
                if (mailRdtMaster != null)
                    mailRdtMaster.remove();
            }
        }

        if (mailRdtMasterVOs != null && mailRdtMasterVOs.size() > 0) {
            for (MailRdtMasterVO mailRdtMasterVO : mailRdtMasterVOs) {
                log.log(Log.FINE, "The coterminusVO  are ", mailRdtMasterVOs);

                mailRdtMasterVO.setCompanyCode(logonAtributes.getCompanyCode());
                mailRdtMasterVO.setLastUpdateUser(logonAtributes.getUserId());
                mailRdtMasterVO.setLastUpdateTime(currentDate);
                mailRdtMasterVO.setMailType("D");
                String paCode_dom = findSystemParameterValue(USPS_DOMESTIC_PA);
                mailRdtMasterVO.setGpaCode(paCode_dom);
                if (mailRdtMasterVO.getRdtRule() != null && mailRdtMasterVO.getRdtRule().trim().length() > 0) {


                    String[] ruleDetails = mailRdtMasterVO.getRdtRule().split("\\s+");
                    int timeInMinutes = 0;
                    String rule = mailRdtMasterVO.getRdtRule();
                    String subString = new String("Day");
                    int index = rule.indexOf(subString);
                    if(index==9){
                    String amOrPm = ruleDetails[1];
                    if ("AM".endsWith(amOrPm)) {
                   if(!ruleDetails[0].startsWith("0")){
                	   ruleDetails[0] = "0" + ruleDetails[0] ;
                	   }
                        timeInMinutes = (Integer.parseInt(ruleDetails[0].substring(0, 2)) * 60) + (Integer.parseInt(ruleDetails[2].substring(3, 5)));
                    } else {
                        timeInMinutes = ((Integer.parseInt(ruleDetails[0].substring(0, 2)) + 12) * 60) + (Integer.parseInt(ruleDetails[2].substring(3, 5)));
                    }
                    int day = (Integer.parseInt(ruleDetails[3]));
                    mailRdtMasterVO.setRdtOffset(timeInMinutes);
                    mailRdtMasterVO.setRdtDay(day);
                    }
                    else if(index==0){
                    	String amOrPm = ruleDetails[3];
                    	if(!ruleDetails[2].startsWith("0")){
                     	   ruleDetails[2] = "0" + ruleDetails[2] ;
                     	   }
                    	if ("AM".endsWith(amOrPm)) {
                            timeInMinutes = (Integer.parseInt(ruleDetails[2].substring(0, 2)) * 60) + (Integer.parseInt(ruleDetails[2].substring(3, 5)));
                        } else {
                            timeInMinutes = ((Integer.parseInt(ruleDetails[2].substring(0, 2)) + 12) * 60) + (Integer.parseInt(ruleDetails[2].substring(3, 5)));
                        }
                        int day = (Integer.parseInt(ruleDetails[1]));
                        mailRdtMasterVO.setRdtOffset(timeInMinutes);
                        mailRdtMasterVO.setRdtDay(day);
                    }
                }

                if (mailRdtMasterVO.getMailServiceLevel().length() > 2) {

                    Map<String, Collection<OneTimeVO>> oneTimes = null;

                    oneTimes = findOneTimeDescription(companyCode,
                            MAILSERVICELEVELS);
                    log.log(Log.FINEST, "\n oneTimes******************" + oneTimes);

                    Collection<OneTimeVO> oneTimeVOs = new ArrayList<>();

                    oneTimeVOs = oneTimes.get(MAILSERVICELEVELS);

                    for (OneTimeVO oneTimeVO : oneTimeVOs) {

                        if (mailRdtMasterVO.getMailServiceLevel().equals(oneTimeVO.getFieldDescription())) {
                            mailRdtMasterVO.setMailServiceLevel(oneTimeVO.getFieldValue());
                            break;
                        }
                    }
                }

                if (mailRdtMasterVO.getMailClass().length() > 1) {

                    Map<String, Collection<OneTimeVO>> oneTimes = null;

                    oneTimes = findOneTimeDescription(companyCode,
                            MAILCLASS);
                    log.log(Log.FINEST, "\n oneTimes******************" + oneTimes);

                    Collection<OneTimeVO> oneTimeVOs = new ArrayList<>();

                    oneTimeVOs = oneTimes.get(MAILCLASS);

                    for (OneTimeVO oneTimeVO : oneTimeVOs) {

                        if (mailRdtMasterVO.getMailClass().equals(oneTimeVO.getFieldDescription())) {
                            mailRdtMasterVO.setMailClass(oneTimeVO.getFieldValue());
                            break;
                        }
                    }
                }
                try {
                    new MailRdtMaster(mailRdtMasterVO);
                } catch (SystemException e) {
                    error = new ErrorVO(e.getMessage());
                }

            }

        }

        errors.add(error);
        return errors;
    }

    private MailRdtMasterPK constructRdtMasterPK(MailRdtMasterVO mailRdtMasterVO) {
        MailRdtMasterPK mailRdtMasterPK = new MailRdtMasterPK();
        mailRdtMasterPK.setCompanyCode(mailRdtMasterVO.getCompanyCode());
        if (mailRdtMasterVO.getSeqnum() != 0)
            mailRdtMasterPK.setSERNUM(mailRdtMasterVO.getSeqnum());
        return mailRdtMasterPK;
    }

			/*added by A-8149 for ICRD-243386 starts*/
			public void saveServiceStandardDetails(
					Collection<MailServiceStandardVO> mailServiceStandardVOs, Collection<MailServiceStandardVO> mailServiceStandardVOstodelete)
							throws SystemException, RemoveException {

				log.entering(CLASS, "saveServiceStandardDetails");
				MailServiceStandard mailServiceStandard = null;
				MailServiceStandardPK mailServiceStandardPK = null;
				MailServiceStandardPK mailServiceStandardPKTodelete = null;
				MailServiceStandard mailServiceStandardTodelete = null;
				log.log(Log.FINE, "The mailServiceStandardVOs  are ", mailServiceStandardVOs);
				log.log(Log.FINE, "The number of mailServiceStandardVOs  are ", mailServiceStandardVOs.size());
				if (mailServiceStandardVOs != null && mailServiceStandardVOs.size() > 0) {

					for (MailServiceStandardVO mailServiceStandardVO : mailServiceStandardVOs) {
						log.log(Log.FINE, "The mailServiceStandardVO  is ", mailServiceStandardVO);

						if (mailServiceStandardVO.OPERATION_FLAG_INSERT
								.equals(mailServiceStandardVO.getOperationFlag())) {

							mailServiceStandardPK = constructMailServiceStandardPK(mailServiceStandardVO);
							log.log(Log.FINE, "Insert: The mailServiceStandardPK  is ", mailServiceStandardPK);
							try {
								mailServiceStandard = MailServiceStandard
										.find(mailServiceStandardPK);
							} catch (FinderException ex) {
								new MailServiceStandard(mailServiceStandardVO);
							}

                } else if (mailServiceStandardVO.OPERATION_FLAG_UPDATE
								.equals(mailServiceStandardVO.getOperationFlag())) {
							mailServiceStandardPK = constructMailServiceStandardPK(mailServiceStandardVO);
							log.log(Log.FINE, "Update: The mailServiceStandardPK  is ", mailServiceStandardPK);
							try {
								mailServiceStandard = MailServiceStandard.find(mailServiceStandardPK);
							} catch (FinderException ex) {
                        int index = ((ArrayList<MailServiceStandardVO>) mailServiceStandardVOs).lastIndexOf(mailServiceStandardVO);

								MailServiceStandardVO mailServiceStandardVOTodelete = null;
                        if (mailServiceStandardVOstodelete.size() >= index + 1)      //Modified as part of ICRD-304434
                                {

                            mailServiceStandardVOTodelete = ((ArrayList<MailServiceStandardVO>) mailServiceStandardVOstodelete).get(index);

								mailServiceStandardPKTodelete = constructMailServiceStandardPK(mailServiceStandardVOTodelete);

								try {
									mailServiceStandardTodelete = MailServiceStandard.find(mailServiceStandardPKTodelete);
								} catch (FinderException finderException) {
									throw new SystemException(finderException.getErrorCode(), finderException);
								}

								mailServiceStandardTodelete.remove();
								}


								new MailServiceStandard(mailServiceStandardVO);
							}
                    if (mailServiceStandard != null) {
								mailServiceStandard.update(mailServiceStandardVO);
							}

                } else if (mailServiceStandardVO.OPERATION_FLAG_DELETE
								.equals(mailServiceStandardVO.getOperationFlag())) {
							mailServiceStandardPK = constructMailServiceStandardPK(mailServiceStandardVO);
							log.log(Log.FINE, "Delete: The mailServiceStandardPK  is ", mailServiceStandardPK);
							try {
								mailServiceStandard = MailServiceStandard.find(mailServiceStandardPK);
							} catch (FinderException ex) {
								throw new SystemException(ex.getErrorCode(), ex);
							}
							mailServiceStandard.remove();
						}
					}
				}
			}

			private MailServiceStandardPK constructMailServiceStandardPK(MailServiceStandardVO mailServiceStandardVO) {
				MailServiceStandardPK mailServiceStandardPK = new MailServiceStandardPK();
				mailServiceStandardPK.setCompanyCode(mailServiceStandardVO.getCompanyCode());
				mailServiceStandardPK.setGpaCode(mailServiceStandardVO.getGpaCode());
				mailServiceStandardPK.setOriginCode(mailServiceStandardVO.getOriginCode());
				mailServiceStandardPK.setDestCode(mailServiceStandardVO.getDestinationCode());
				mailServiceStandardPK.setServiceLevel(mailServiceStandardVO.getServicelevel());
				return mailServiceStandardPK;
			}
			/*added by A-8149 for ICRD-243386 ends*/

			private CoterminusAirportPK constructCoterminusAirportPK(CoTerminusVO coterminusVO) {
				CoterminusAirportPK cotermuAirportPK = new CoterminusAirportPK();
				cotermuAirportPK.setCompanyCode(coterminusVO.getCompanyCode());
				cotermuAirportPK.setGpaCode(coterminusVO.getGpaCode());
        if (coterminusVO.getSeqnum() != 0)
					cotermuAirportPK.setSERNUM(coterminusVO.getSeqnum());
				return cotermuAirportPK;
			}


			/**
			 * TODO Purpose Feb 2, 2007, A-1739
			 *
			 * @param resditConfigVO
			 * @throws SystemException
			 */
			public void saveResditConfiguration(ResditConfigurationVO resditConfigVO)
					throws SystemException {
				log.entering(CLASS, "saveResditConfiguration");
				String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
        if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
				 log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
				new ResditController().saveResditConfiguration(resditConfigVO);
				}
				log.exiting(CLASS, "saveResditConfiguration");
		}

			/**
			 * TODO Purpose Feb 2, 2007, A-1739
			 *
			 * @param companyCode
			 * @param carrierId
			 * @return
			 * @throws SystemException
			 */
			public ResditConfigurationVO findResditConfigurationForAirline(
					String companyCode, int carrierId) throws SystemException {
				log.entering(CLASS, "findResditConfigurationForAirline");
				String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
        if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
				log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
				return new ResditController().findResditConfigurationForAirline(
						companyCode, carrierId);
        } else {
					return null;
					}
			}


			/**
     * @param reportSpec
     * @return
     * @throws SystemException
			 * @author a-1936
			 * Added By Karthick V as the part of the AirNewZealand Mail Tracking CR
			 * This method is used to  generate the Import Manifest Report ..
     */
    public Map<String, Object> generateImportManifestReport(ReportSpec reportSpec)
					throws SystemException {
				log.entering(CLASS, "generateImportManifestReport");
				OperationalFlightVO operationalFlightVo = OperationalFlightVO.class
						.cast(reportSpec.getFilterValues().get(0));
        MailManifestVO manifestVO = null;
        try {
            manifestVO = Proxy.getInstance().get(MailOperationsProxy.class).findImportManifestDetails(operationalFlightVo);
        } catch (ProxyException ex) {
            throw new SystemException(ex.getMessage(), ex);
        }
        //TODO  the Report related Stuffs if no records are returned...
        if (manifestVO == null) {
            manifestVO = new MailManifestVO();
			    }
			    manifestVO.setCompanyCode(operationalFlightVo.getCompanyCode());
			    manifestVO.setFlightNumber(operationalFlightVo.getFlightNumber());
				manifestVO.setFlightCarrierCode(operationalFlightVo.getCarrierCode());
				manifestVO.setDepDate(operationalFlightVo.getFlightDate());
				manifestVO.setFlightRoute(operationalFlightVo.getFlightRoute());
				manifestVO.setDepPort(operationalFlightVo.getPol());
				reportSpec.addParameter(manifestVO);
				Collection<MailManifestVO> reportData = new ArrayList<MailManifestVO>();
				reportData.add(manifestVO);
				reportSpec.setData(reportData);
		        log.exiting(CLASS, "generateImportManifestReport");
				return ReportAgent.generateReport(reportSpec);
			}


			/**
     * @param operationalFlightVo
     * @return
			 * @author a-1936
			 * Added By Karthick V as the  part of  the Air NewZealand CR...
			 * This method is used to find all  the DSNs and the mail bags Required For the Impport Manifest Report..
			 */
			public MailManifestVO findImportManifestDetails(OperationalFlightVO operationalFlightVo)
            throws SystemException {
        log.entering(CLASS, "findDSNsForImportManifestReport");
				return  AssignedFlightSegment.findImportManifestDetails(operationalFlightVo);
			}

			/**
			 * @param reportSpec
			 * @return
			 * @throws SystemException
			 * @throws ReportGenerationException
     * @author A-5526
			 */
			public Map<String, Object> generateTransferManifestReportForMail(
					ReportSpec reportSpec) throws SystemException,
					ReportGenerationException {
				log.entering(CLASS, "generateMailHandedOverReport");
				TransferManifestVO transferManifestVO = TransferManifestVO.class
				.cast(reportSpec.getFilterValues().get(0));
				reportSpec.addParameter(transferManifestVO);
				reportSpec.setData(transferManifestVO.getDsnVOs());
						log.exiting(CLASS, "generateMailHandedOverReport");
				return ReportAgent.generateReport(reportSpec);

			}

			   /**
			 * @param reportSpec
			 * @return
			 * @throws SystemException
			 * @throws ReportGenerationException
     * @author A-5526
			 */
			public Map<String, Object> generateTransferManifestReportForContainer(
					ReportSpec reportSpec) throws SystemException,
					ReportGenerationException {
				log.entering(CLASS, "generateMailHandedOverReport");
				TransferManifestVO transferManifestVO = TransferManifestVO.class
				.cast(reportSpec.getFilterValues().get(0));
				reportSpec.addParameter(transferManifestVO);
				reportSpec.setData(transferManifestVO.getDsnVOs());
						log.exiting(CLASS, "generateMailHandedOverReport");
				return ReportAgent.generateReport(reportSpec);
			}

			   /**
				 * This method does the ULD Acquittal at Non Mechanized port
				 * This will release the ULD by delivering/transferring
				 * the mailbags/despatches at non scannable ports.
     *
     * @param operationalFlightVO
     * @throws SystemException
				 * @author A-3227  RENO K ABRAHAM - 09/09/2009
     */
    public void initiateULDAcquittance(OperationalFlightVO operationalFlightVO) throws SystemException {
        log.entering(CLASS, "initiateULDAcquittance");
        if (operationalFlightVO != null) {
						log.log(Log.FINE,
								"initiateULDAcquittance--operationalFlightVO---",
								operationalFlightVO);
						releaseULDFromFlight(operationalFlightVO);
					}
        log.exiting(CLASS, "initiateULDAcquittance");
				}

    /**
				 * @param operationalFlightVO
				 * @throws SystemException
     * @author A-3227 RENO K ABRAHAM
				 */
				private void releaseULDFromFlight(
						OperationalFlightVO operationalFlightVO)
            throws SystemException {
        log.entering(CLASS, "releaseULDFromFlight");
					/*
					 * Fetch Arrival details for the flight.
					 */
					MailArrivalVO mailArrivalVO = findArrivalDetailsForULDAcquittance(operationalFlightVO);
					/*
					 * releasingMailsForULDAcquittance will do the following :
					 *  1. Transfer Transitting Mailbags/Despatches
					 *  2. Deliver Terminatting Mailbags/Despatches
					 *
					 *
					 * TODO
					 * Suppressing all Exceptions, becoz there is no point
					 * in carry forwarding these Exception. Need to disscuss
					 * and change this at later point of time.
					 */
					try {
            releasingMailsForULDAcquittance(mailArrivalVO, operationalFlightVO);
					} catch (InvalidFlightSegmentException exception) {
						exception.getMessage();
					} catch (CapacityBookingProxyException exception) {
						exception.getMessage();
					} catch (MailBookingException exception) {
						exception.getMessage();
					} catch (ContainerAssignmentException exception) {
						exception.getMessage();
					} catch (DuplicateMailBagsException exception) {
						exception.getMessage();
					} catch (MailbagIncorrectlyDeliveredException exception) {
						exception.getMessage();
					} catch (FlightClosedException exception) {
						exception.getMessage();
					} catch (ULDDefaultsProxyException exception) {
						exception.getMessage();
					} catch (MailTrackingBusinessException exception) {
						exception.getMessage();
					}
					/*
					 * Closing Inbound FLight
					 *
					 * TODO
					 * Suppressing all Exceptions, becoz there is no point
					 * in carry forwarding these Exception. Need to disscuss
					 * and change this at later point of time.
					 */
					try {
            closeFlightDuringAutoAcquittal(mailArrivalVO, operationalFlightVO);
					} catch (ULDDefaultsProxyException exception) {
						exception.getMessage();
        } catch (CloseFlightException closeFlightException) {
						closeFlightException.getMessage();
					}
        log.exiting(CLASS, "releaseULDFromFlight");
				}

    /**
				 * @param companyCode
				 * @param nonMechanizedAirports
				 * @return
				 * @throws SystemException
     * @author A-3227 RENO K ABRAHAM
				 */
				private MailArrivalVO findArrivalDetailsForULDAcquittance(
						OperationalFlightVO operationalFlightVO)
            throws SystemException {
        log.entering(CLASS, "findFlightsForULDAcquittance");
					String carrierCode = null;
					try {
						AirlineValidationVO airlineValidationVO =
							new SharedAirlineProxy().findAirline(operationalFlightVO.getCompanyCode(),
									operationalFlightVO.getCarrierId());
						carrierCode = airlineValidationVO.getAlphaCode();
					} catch (SharedProxyException e) {
						e.getMessage();
					}
					MailArrivalFilterVO filterVO = new MailArrivalFilterVO();
					filterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
					filterVO.setCarrierId(operationalFlightVO.getCarrierId());
					filterVO.setCarrierCode(carrierCode);
					filterVO.setFlightNumber(operationalFlightVO.getFlightNumber());
					filterVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
					filterVO.setFlightDate(operationalFlightVO.getFlightDate());
					filterVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
					filterVO.setPou(operationalFlightVO.getPou());
					filterVO.setMailStatus(MailConstantsVO.MAIL_STATUS_ALL);
					return findArrivalDetails(filterVO);
				}

    /**
				 * @param mailArrivalVO
				 * @throws SystemException
				 * @throws MailBookingException
				 * @throws CapacityBookingProxyException
				 * @throws InvalidFlightSegmentException
				 * @throws ULDDefaultsProxyException
				 * @throws FlightClosedException
				 * @throws MailbagIncorrectlyDeliveredException
				 * @throws DuplicateMailBagsException
				 * @throws ContainerAssignmentException
				 * @throws DuplicateDSNException
				 * @throws InventoryForArrivalFailedException
     * @author A-3227 RENO K ABRAHAM
				 */
				public void releasingMailsForULDAcquittance(MailArrivalVO mailArrivalVO,
						OperationalFlightVO operationalFlightVO)
				throws SystemException, InvalidFlightSegmentException, CapacityBookingProxyException,
				MailBookingException, ContainerAssignmentException, DuplicateMailBagsException,
				MailbagIncorrectlyDeliveredException, FlightClosedException, ULDDefaultsProxyException,
				 MailTrackingBusinessException {
        log.entering(CLASS, "releasingMailsForULDAcquittance");
				LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
				mailArrivalVO.setArrivedUser(logonAttributes.getUserId().toUpperCase());
				mailArrivalVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
				/*
				 * Retrieving Container Details From MailArrivalVO
				 */
				Collection<ContainerDetailsVO> containerDetailsVOs =  mailArrivalVO.getContainerDetails();
        if (containerDetailsVOs != null && containerDetailsVOs.size() > 0) {
					//Added for icrd-110909
            Collection<String> nearbyOEToCurrentAirport = (ArrayList<String>) findOfficeOfExchangesForAirport(mailArrivalVO.getCompanyCode(), operationalFlightVO.getAirportCode());
					Collection<DespatchDetailsVO> transittingDespatches = new ArrayList<DespatchDetailsVO>();
					Collection<MailbagVO> transittingMailbags = new ArrayList<MailbagVO>();
            HashMap<String, Collection<DespatchDetailsVO>> transittingDespatchesMap = new HashMap<String, Collection<DespatchDetailsVO>>();
            HashMap<String, Collection<MailbagVO>> transittingMailbagsMap = new HashMap<String, Collection<MailbagVO>>();
					Collection<String> transittingOEs = new ArrayList<String>();
					boolean isdeliveryRequired  = false;
					boolean isAnyContianerOccupied = false;
            for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
						/*
						 * Done as a hotfix for SAA BUG 84727.
						 * START
						 */
                Collection<MailbagVO> terminatingmailbagVOs = new ArrayList<MailbagVO>();
                if (MailConstantsVO.BULK_TYPE.equals(containerDetailsVO.getContainerType())) {
							containerDetailsVO.setLegSerialNumber(mailArrivalVO.getLegSerialNumber());
						}
						//END 84727
						int totalNumberOfDSNVOs = 0;
						int totalReceivedBags = 0;
						double totalReceivedWgt = 0;
                if (containerDetailsVO.getDsnVOs() != null && containerDetailsVO.getDsnVOs().size() > 0) {
							//Total Number Of DSNVOs
							totalNumberOfDSNVOs = containerDetailsVO.getDsnVOs().size();
							isAnyContianerOccupied = true;
						}
                ArrayList<DSNVO> mainDSNVOs = (ArrayList<DSNVO>) containerDetailsVO.getDsnVOs();
                HashMap<String, DSNVO> terminatingDSNMap = new HashMap<String, DSNVO>();
                HashMap<String, DSNVO> transittingDSNMap = new HashMap<String, DSNVO>();
						/*
						 * Creating a HashMap<String,DSNVO>
						 * where the KEY corresponds to the DSN key
						 */
                for (int dsnIdx = 0; dsnIdx < totalNumberOfDSNVOs; dsnIdx++) {
							DSNVO dsnVO = mainDSNVOs.get(dsnIdx);
                    String dsnpk = dsnVO.getOriginExchangeOffice() + ID_SEP
                            + dsnVO.getDestinationExchangeOffice() + ID_SEP
                            + dsnVO.getMailCategoryCode() + ID_SEP
                            + dsnVO.getMailSubclass() + ID_SEP
                            + dsnVO.getDsn() + ID_SEP
                            + dsnVO.getYear();
                    if (isTerminating(nearbyOEToCurrentAirport, dsnVO)) {
                        terminatingDSNMap.put(dsnpk, dsnVO);
                    } else {
                        transittingDSNMap.put(dsnpk, dsnVO);
								transittingOEs.add(dsnVO.getDestinationExchangeOffice());
							}
						}
						/*
						 * Updating the DSN Map, if DesptachDetailsVOs are present.
						 * Also updating the DesptachDetailsVOs
						 */
						Collection<DespatchDetailsVO> despatchDetailsVOs = containerDetailsVO.getDesptachDetailsVOs();
                if (despatchDetailsVOs != null && despatchDetailsVOs.size() > 0) {
                    for (DespatchDetailsVO despatchVO : despatchDetailsVOs) {
                        String despatchpk = despatchVO.getOriginOfficeOfExchange() + ID_SEP
                                + despatchVO.getDestinationOfficeOfExchange() + ID_SEP
                                + despatchVO.getMailCategoryCode() + ID_SEP
                                + despatchVO.getMailSubclass() + ID_SEP
                                + despatchVO.getDsn() + ID_SEP
								+ despatchVO.getYear();
								DSNVO terminattingDSNVO = terminatingDSNMap.get(despatchpk);
								DSNVO transittingDSNVO = transittingDSNMap.get(despatchpk);
                        if (terminattingDSNVO != null) {
                            if (despatchVO.getReceivedBags() == 0) {
										despatchVO.setOperationalFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
										terminattingDSNVO.setOperationFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
										terminattingDSNVO.setReceivedBags(terminattingDSNVO.getReceivedBags()
												+ (despatchVO.getAcceptedBags() - despatchVO.getReceivedBags()));
										/*terminattingDSNVO.setReceivedWeight(terminattingDSNVO.getReceivedWeight()
												+ (despatchVO.getAcceptedWeight() - despatchVO.getReceivedWeight()));*/
										Measure despAccWt;
										try {
											despAccWt = Measure.subtractMeasureValues(despatchVO.getAcceptedWeight(), despatchVO.getReceivedWeight());
											try {
												terminattingDSNVO.setReceivedWeight(Measure.addMeasureValues(terminattingDSNVO.getReceivedWeight(), despAccWt));
											} catch (UnitException e) {
												// TODO Auto-generated catch block
												throw new SystemException(e.getErrorCode());
											}//added by A-7371
										} catch (UnitException e) {
											// TODO Auto-generated catch block
											throw new SystemException(e.getErrorCode());
										}//added by A-7371
										despatchVO.setReceivedBags(despatchVO.getAcceptedBags());
										despatchVO.setReceivedWeight(despatchVO.getAcceptedWeight());
                                despatchVO.setReceivedDate(new LocalDate(operationalFlightVO.getAirportCode(), Location.ARP, true));
									}
                            terminatingDSNMap.put(despatchpk, terminattingDSNVO);
								}
                        if (transittingDSNVO != null) {
									despatchVO.setOperationalFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
									despatchVO.setCompanyCode(containerDetailsVO.getCompanyCode());
									despatchVO.setCarrierId(containerDetailsVO.getCarrierId());
									despatchVO.setFlightNumber(containerDetailsVO.getFlightNumber());
									despatchVO.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
									despatchVO.setLegSerialNumber(containerDetailsVO.getLegSerialNumber());
									despatchVO.setSegmentSerialNumber(containerDetailsVO.getSegmentSerialNumber());
									despatchVO.setContainerType(containerDetailsVO.getContainerType());
									despatchVO.setCarrierCode(mailArrivalVO.getFlightCarrierCode());
									despatchVO.setUbrNumber(transittingDSNVO.getUbrNumber());
									despatchVO.setBookingLastUpdateTime(transittingDSNVO.getBookingLastUpdateTime());
									despatchVO.setBookingFlightDetailLastUpdTime(transittingDSNVO.getBookingFlightDetailLastUpdTime());
									transittingDSNVO.setReceivedBags(transittingDSNVO.getReceivedBags()
											+ (despatchVO.getAcceptedBags() - despatchVO.getReceivedBags()));
									/*transittingDSNVO.setReceivedWeight(transittingDSNVO.getReceivedWeight()
											+ (despatchVO.getAcceptedWeight() - despatchVO.getReceivedWeight()));*/
									Measure despRecWt;
									try {
										despRecWt = Measure.subtractMeasureValues(despatchVO.getAcceptedWeight(), despatchVO.getReceivedWeight());
										try {
											transittingDSNVO.setReceivedWeight(Measure.addMeasureValues(transittingDSNVO.getReceivedWeight(), despRecWt));
										} catch (UnitException e) {
											// TODO Auto-generated catch block
											throw new SystemException(e.getErrorCode());
										}//added by A-7371
									} catch (UnitException e) {
										// TODO Auto-generated catch block
										throw new SystemException(e.getErrorCode());
									}//added by A-7371
									transittingDespatches.add(despatchVO);
                            transittingDSNMap.put(despatchpk, transittingDSNVO);
                            if (transittingDespatchesMap.get(despatchpk) != null) {
										transittingDespatchesMap.get(despatchpk).add(despatchVO);
                            } else {
										Collection<DespatchDetailsVO> newDespatchVOs = new ArrayList<DespatchDetailsVO>();
										newDespatchVOs.add(despatchVO);
                                transittingDespatchesMap.put(despatchpk, newDespatchVOs);
									}
								}
							}
						}
						/*
						 * Updating the DSN Map, if MailDetails are present.
						 * Also updating the MailDetails
						 */
						Collection<MailbagVO> mailbagVOs = containerDetailsVO.getMailDetails();
                if (mailbagVOs != null && mailbagVOs.size() > 0) {
                    for (MailbagVO mailbagVO : mailbagVOs) {
                        String mailDSNPk = mailbagVO.getOoe() + ID_SEP
                                + mailbagVO.getDoe() + ID_SEP
                                + mailbagVO.getMailCategoryCode() + ID_SEP
                                + mailbagVO.getMailSubclass() + ID_SEP
                                + mailbagVO.getDespatchSerialNumber() + ID_SEP
								+ mailbagVO.getYear();
								DSNVO terminattingDSNVO = terminatingDSNMap.get(mailDSNPk);
								DSNVO transittingDSNVO = transittingDSNMap.get(mailDSNPk);
                        if (terminattingDSNVO != null) {
                            if (!DSNVO.FLAG_YES.equals(mailbagVO.getArrivedFlag())) {
										mailbagVO.setOperationalFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
										terminattingDSNVO.setOperationFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
										mailbagVO.setArrivedFlag(MailConstantsVO.FLAG_YES);
										mailbagVO.setScannedPort(operationalFlightVO.getAirportCode());
										mailbagVO.setScannedUser(logonAttributes.getUserId().toUpperCase());
                                mailbagVO.setScannedDate(new LocalDate(operationalFlightVO.getAirportCode(), Location.ARP, true));
										mailbagVO.setFlightDate(mailArrivalVO.getArrivalDate());
										//Added for ICRD-156218 starts
                                if (mailArrivalVO.isOfflineJob()) {
											mailbagVO.setMailSource(MTK_IMP_FLT);
                                } else {
											mailbagVO.setMailSource(MTK_INB_ONLINEFLT_CLOSURE);
										}
										//Added for ICRD-156218 ends
										terminattingDSNVO.setReceivedBags(terminattingDSNVO.getReceivedBags() + 1);
										//terminattingDSNVO.setReceivedWeight(terminattingDSNVO.getReceivedWeight() + mailbagVO.getWeight());
										try {
											terminattingDSNVO.setReceivedWeight(Measure.addMeasureValues(terminattingDSNVO.getReceivedWeight(), mailbagVO.getWeight()));
										} catch (UnitException e) {
											// TODO Auto-generated catch block
											throw new SystemException(e.getErrorCode());
										}//added by A-7371
										terminatingmailbagVOs.add(mailbagVO);
									} else if (DSNVO.FLAG_YES.equals(mailbagVO.getArrivedFlag()) &&  DSNVO.FLAG_NO.equals(mailbagVO.getDeliveredFlag())) {
										mailbagVO.setOperationalFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
										terminattingDSNVO.setOperationFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
										mailbagVO.setArrivedFlag(MailConstantsVO.FLAG_YES);
										mailbagVO.setScannedPort(operationalFlightVO.getAirportCode());
										mailbagVO.setScannedUser(logonAttributes.getUserId().toUpperCase());
										mailbagVO.setScannedDate(new LocalDate(operationalFlightVO.getAirportCode(),Location.ARP,true));
								mailbagVO.setFlightDate(mailArrivalVO.getArrivalDate());
								if (mailArrivalVO.isOfflineJob()) {
									mailbagVO.setMailSource(MTK_IMP_FLT);
								} else {
									mailbagVO.setMailSource(MTK_INB_ONLINEFLT_CLOSURE);
									}

								terminatingmailbagVOs.add(mailbagVO);
									}
                            terminatingDSNMap.put(mailDSNPk, terminattingDSNVO);
								}
                        if (transittingDSNVO != null) {
							if (!("TRA".equals(mailbagVO.getMailStatus()) && mailbagVO.getArrivedFlag().equals("Y")
									&& "I".equals(mailbagVO.getMraStatus()))) {
										//if(!"TRA".equals(mailbagVO.getMailStatus())){
									mailbagVO.setOperationalFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
									mailbagVO.setCompanyCode(logonAttributes.getCompanyCode());
									mailbagVO.setAcceptanceFlag(containerDetailsVO.getAcceptedFlag());
									mailbagVO.setScannedPort(operationalFlightVO.getAirportCode());
									mailbagVO.setScannedUser(logonAttributes.getUserId().toUpperCase());
                                mailbagVO.setScannedDate(new LocalDate(operationalFlightVO.getAirportCode(), Location.ARP, true));
									mailbagVO.setCarrierCode(mailArrivalVO.getFlightCarrierCode());
									mailbagVO.setUldNumber(containerDetailsVO.getContainerNumber());
									mailbagVO.setFlightDate(containerDetailsVO.getFlightDate());
									mailbagVO.setLegSerialNumber(containerDetailsVO.getLegSerialNumber());
									mailbagVO.setUbrNumber(transittingDSNVO.getUbrNumber());
									mailbagVO.setBookingLastUpdateTime(transittingDSNVO.getBookingLastUpdateTime());
									//Added for ICRD-156218 starts
                                if (mailArrivalVO.isOfflineJob()) {
										mailbagVO.setMailSource(MTK_IMP_FLT);
                                } else {
										mailbagVO.setMailSource(MTK_INB_ONLINEFLT_CLOSURE);
									}
									//Added for ICRD-156218 ends
									mailbagVO.setFlightDate(operationalFlightVO.getFlightDate());
									double volume = 0.0;
									String commodityCode = "";
									commodityCode = findSystemParameterValue(DEFAULTCOMMODITYCODE_SYSPARAM);
									CommodityValidationVO commodityValidationVO = validateCommodity(
											mailbagVO.getCompanyCode(), commodityCode,mailbagVO.getPaCode());
                                if (commodityValidationVO != null &&
                                        commodityValidationVO.getDensityFactor() != 0) {
										double actualVolume = mailbagVO.getWeight().getRoundedSystemValue()
										/ commodityValidationVO.getDensityFactor();//added by A-7371
                                    if (actualVolume < 0.01) {
											volume = 0.01;
                                    } else {
											/*try{
												volume=UnitFormatter.getRoundedValue(UnitConstants.VOLUME, UnitConstants.VOLUME_UNIT_CUBIC_CENTIMETERS, actualVolume);
												}catch(UnitException unitException) {
													unitException.getErrorCode();
											   }*/
											//volume = getScaledValue(actualVolume, 2);
                                        volume = actualVolume;//added by A-7371
										}
									}
									log.log(Log.FINE, "VOLUME IN MAIL CONTROLLER", volume);
									//mailbagVO.setVolume(volume);
                                mailbagVO.setVolume(new Measure(UnitConstants.VOLUME, volume));//added by A-7371
									mailbagVO.setBookingFlightDetailLastUpdTime(transittingDSNVO.getBookingFlightDetailLastUpdTime());
									transittingDSNVO.setReceivedBags(transittingDSNVO.getReceivedBags() + 1);
									//transittingDSNVO.setReceivedWeight(transittingDSNVO.getReceivedWeight() + mailbagVO.getWeight());//added by A-7371
									try {
										transittingDSNVO.setReceivedWeight(Measure.addMeasureValues(transittingDSNVO.getReceivedWeight(), mailbagVO.getWeight()));
									} catch (UnitException e) {
										// TODO Auto-generated catch block
										throw new SystemException(e.getErrorCode());
									}//added by A-7371
									transittingMailbags.add(mailbagVO);
                                transittingDSNMap.put(mailDSNPk, transittingDSNVO);
                                if (transittingMailbagsMap.get(mailDSNPk) != null) {
										transittingMailbagsMap.get(mailDSNPk).add(mailbagVO);
                                } else {
										Collection<MailbagVO> newTransittingMailbags = new ArrayList<MailbagVO>();
										newTransittingMailbags.add(mailbagVO);
                                    transittingMailbagsMap.put(mailDSNPk, newTransittingMailbags);
									}
								}
							}
						}
						}
                if (terminatingDSNMap != null && terminatingDSNMap.size() > 0) {
							isdeliveryRequired = true;
						}
                for (DSNVO dsnVO : mainDSNVOs) {
                    if (dsnVO.getReceivedBags() > 0) {
								totalReceivedBags += dsnVO.getReceivedBags();
								//totalReceivedWgt += dsnVO.getReceivedWeight();
								totalReceivedWgt += dsnVO.getReceivedWeight().getRoundedSystemValue();//added by A-7371
							}
						}
						containerDetailsVO.setReceivedBags(totalReceivedBags);
						//containerDetailsVO.setReceivedWeight(totalReceivedWgt);
                containerDetailsVO.setReceivedWeight(new Measure(UnitConstants.MAIL_WGT, totalReceivedWgt));//added by A-7371
						containerDetailsVO.setOperationFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
						containerDetailsVO.setCarrierCode(mailArrivalVO.getFlightCarrierCode());
						containerDetailsVO.setMailDetails(terminatingmailbagVOs);
					}
					mailArrivalVO.setPartialDelivery(true);
					mailArrivalVO.setAirportCode(operationalFlightVO.getAirportCode());
					/*
					 * Transferring Mails/Despatches To Carrier
					 */
            if (transittingOEs.size() > 0) {
						 updatebulkDetails(transittingMailbags);
                transferMailForULDAcquittal(transittingOEs, operationalFlightVO, transittingDespatchesMap, transittingMailbagsMap);
					}
            


					/*
					 * Delivering - Terminatting Mailbags/Despatches
					 */
            if (isdeliveryRequired) {
						deliverMailbags(mailArrivalVO);
					}
					/*
					 * If Only Empty ULDS are present in the Flight.
					 * If Any of the ULD is empty then no need to
					 * Excecute the below method.
					 */
            if (!isAnyContianerOccupied) {
						saveArrivalDetails(mailArrivalVO);
					}

        } else {
					saveArrivalDetails(mailArrivalVO);
				}
        try {
			PersistenceController.getEntityManager().flush();
			PersistenceController.getEntityManager().clear();
		} catch (PersistenceException e) {
			e.getMessage();
				}
        log.exiting(CLASS, "releasingMailsForULDAcquittance");
			}

    /**
				 * @param nearbyOEToCurrentAirport
				 * @param despatchVO
				 * @param mailbagVO
				 * @return
     * @author A-3227 RENO K ABRAHAM
				 */
				private boolean isTerminating(Collection<String> nearbyOEToCurrentAirport,
                                  DSNVO dsnVO) {
        log.entering(CLASS, "break;");
					boolean isTerminating = false;
        if (nearbyOEToCurrentAirport != null && nearbyOEToCurrentAirport.size() > 0) {
            for (String officeOfExchange : nearbyOEToCurrentAirport) {
                if (dsnVO != null) {
								isTerminating = officeOfExchange.equals(dsnVO.getDestinationExchangeOffice()) ? true : false;
                    if (isTerminating) {
									break;
								}
							}
						}
					}
        log.exiting(CLASS, "break;");
					return isTerminating;
				}

    private void updatebulkDetails(Collection<MailbagVO> mailBagVOinConatiners) throws SystemException {
				//	LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
							log.log(Log.FINE, "Inside UpDATEBULK>>>>");
        if (mailBagVOinConatiners != null) {
            for (MailbagVO mailbagvo : mailBagVOinConatiners) {
                if (MailConstantsVO.BULK_TYPE.equals(mailbagvo.getContainerType())) {
                    if (mailbagvo.getOperationalFlag() != null && (mailbagvo.getOperationalFlag().equals(MailConstantsVO.OPERATION_FLAG_UPDATE))) {
						//	String mailbagID= mailbagvo.getMailbagId()	;
							Mailbag mailbag = null;
							MailbagPK mailbagPk = new MailbagPK();
							mailbagPk.setCompanyCode(mailbagvo.getCompanyCode());
							mailbagPk.setMailSequenceNumber(mailbagvo.getMailSequenceNumber());
/*							mailbagPk.setDestinationExchangeOffice(mailbagID.substring(6, 12));
							mailbagPk.setDsn(mailbagID.substring(
									16, 20));
							mailbagPk.setMailbagId(mailbagID);
							mailbagPk.setMailSubclass(mailbagID.substring(13, 15));
							mailbagPk.setMailCategoryCode(mailbagID.substring(12, 13));
							mailbagPk
									.setOriginExchangeOffice(mailbagID.substring(0, 6));
							mailbagPk.setYear(Integer.parseInt(mailbagID.substring(15, 16)));*/
							try {
								mailbag = Mailbag.find(mailbagPk);
							} catch (SystemException e) {
								log.log(Log.SEVERE, "System Exception Caught");
							} catch (FinderException e) {
								log.log(Log.SEVERE, "Finder Exception Caught");
							}
                        if (mailbag != null) {
								log.log(Log.FINE, "mailbag not null>>>>");
                            String containernum = mailbag.getUldNumber();
								 Container container = null;
							   ContainerPK containerPK = new ContainerPK();
                            containerPK.setCompanyCode(mailbagvo.getCompanyCode());
                            containerPK.setCarrierId(mailbagvo.getCarrierId());
					        containerPK.setContainerNumber(containernum);
					        containerPK.setAssignmentPort(mailbagvo.getPol());
					        containerPK.setFlightNumber(mailbag.getFlightNumber());
					        containerPK.setFlightSequenceNumber(mailbag.getFlightSequenceNumber());
                            if (mailbagvo.getLegSerialNumber() == 0) {
					    	  FlightValidationVO flightValidationVO = new FlightValidationVO();
                                try {
					               flightValidationVO = validateFlightForBulk(mailbagvo);
                                } catch (SystemException s) {
                                    log.log(Log.SEVERE, "Finder Exception Caught");
                                }
                                if (flightValidationVO != null) {
					              containerPK.setLegSerialNumber(
					                  flightValidationVO.getLegSerialNumber());
					    	  }
                            } else {
					        	   containerPK.setLegSerialNumber(
					        			   mailbagvo.getLegSerialNumber());
					            }
                            try {
                                container = Container.find(containerPK);
                            } catch (SystemException systemException) {
				        		/* NO NEED TO THROW THIS EXCEPTION TO CLIENT*/
				        	} catch (FinderException e) {
								// TODO Auto-generated catch block
							}
                            if (container != null) {
				        		log.log(Log.FINE, "container not null>>>>");
				        	container.setArrivedStatus(MailConstantsVO.FLAG_YES);
				        	}
							}
							}
							}
							}
						}
				}

				  public FlightValidationVO validateFlightForBulk(MailbagVO
						  mailbagvo) throws SystemException {
				        Collection<FlightValidationVO> flightValidationVOs = null;
				        flightValidationVOs = new FlightOperationsProxy()
				        .validateFlightForAirport(MailtrackingDefaultsVOConverter.constructFlightFilterVOForContainer(mailbagvo));
				        if(flightValidationVOs!=null && flightValidationVOs.size()>0) {
				        for (FlightValidationVO flightValidationVO : flightValidationVOs) {
				            if (flightValidationVO.getFlightSequenceNumber() == mailbagvo
				                    .getFlightSequenceNumber()) {
				                return flightValidationVO;
				            }
				        }
						}
				        return null;
				    }

    /**
					 * @param transittingOEs
					 * @param operationalFlightVO
					 * @param transittingDespatchesMap
					 * @param transittingMailbagsMap
					 * @throws SystemException
					 * @throws InvalidFlightSegmentException
					 * @throws CapacityBookingProxyException
					 * @throws MailBookingException
     * @author A-3227 RENO K ABRAHAM
					 */
					private void transferMailForULDAcquittal(Collection<String> transittingOEs,
							OperationalFlightVO operationalFlightVO,
                                             HashMap<String, Collection<DespatchDetailsVO>> transittingDespatchesMap,
                                             HashMap<String, Collection<MailbagVO>> transittingMailbagsMap)
					throws SystemException, InvalidFlightSegmentException,
            CapacityBookingProxyException, MailBookingException, MailTrackingBusinessException {
        log.entering(CLASS, "transferMailForULDAcquittal");
						LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
//						HashMap<String,MailCarrierVO> defaultCarrierDOEMap = new HashMap<String, MailCarrierVO>();
						Collection<String> finalDSNKeys = new ArrayList<String>();
        if (transittingMailbagsMap != null && transittingMailbagsMap.size() > 0) {
							finalDSNKeys.addAll(transittingMailbagsMap.keySet());
						}
        if (transittingDespatchesMap != null && transittingDespatchesMap.size() > 0) {
							Collection<String> despatchDSNKeys = transittingDespatchesMap.keySet();
            for (String dsnKey : despatchDSNKeys) {
                if (!finalDSNKeys.contains(dsnKey)) {
									finalDSNKeys.add(dsnKey);
								}
							}
						}
						/*
						 * Mapping Default Carrier to the Destination OE
//						 */
//						if(transittingOEs != null && transittingOEs.size() > 0){
//							for(String transittingOE : transittingOEs){
//								MailCarrierVO mailCarrierVO = new MailCarrier().findDefaultCarrierForDOE(
//										operationalFlightVO.getCompanyCode(), operationalFlightVO.getAirportCode(),
//										transittingOE,MailConstantsVO.OPERATION_OUTBOUND);
//								if(mailCarrierVO == null){
//									mailCarrierVO = new MailCarrierVO();
//									mailCarrierVO.setCompanyCode(logonAttributes.getCompanyCode());
//									mailCarrierVO.setDefaultCarrier(logonAttributes.getOwnAirlineCode());
//									mailCarrierVO.setDefCarrierIdentifier(logonAttributes.getOwnAirlineIdentifier());
//								}
//								defaultCarrierDOEMap.put(transittingOE, mailCarrierVO);
//							}
//						}
        if (finalDSNKeys.size() > 0) {
            for (String key : finalDSNKeys) {
								Collection<DespatchDetailsVO> transittingDespatches = new ArrayList<DespatchDetailsVO>();
								Collection<MailbagVO> transittingMailbags = new ArrayList<MailbagVO>();
                if (transittingMailbagsMap != null && transittingMailbagsMap.size() > 0 &&
                        transittingMailbagsMap.get(key) != null && transittingMailbagsMap.get(key).size() > 0) {
									transittingMailbags.addAll(transittingMailbagsMap.get(key));
								}
                if (transittingDespatchesMap != null && transittingDespatchesMap.size() > 0 &&
                        transittingDespatchesMap.get(key) != null && transittingDespatchesMap.get(key).size() > 0) {
									transittingDespatches.addAll(transittingDespatchesMap.get(key));
								}
								ContainerVO toContainerVO = new ContainerVO();
								String[] tokens = key.split(ID_SEP);
								String transittingOE = tokens[1]; // DOE
//								MailCarrierVO mailCarrierVO = defaultCarrierDOEMap.get(transittingOE);
//								if(mailCarrierVO != null ){
									toContainerVO.setCarrierId(logonAttributes.getAirlineIdentifier());
									toContainerVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
									log.log(Log.FINE, "Transferring [ ", key,
											" ] to Carrier===>", logonAttributes.getOwnAirlineIdentifier());
									toContainerVO.setOwnAirlineId(logonAttributes.getOwnAirlineIdentifier());
									toContainerVO.setOwnAirlineCode(logonAttributes.getOwnAirlineCode());
                toContainerVO.setOperationTime(new LocalDate(operationalFlightVO.getAirportCode(), Location.ARP, true));
									toContainerVO.setAssignedPort(operationalFlightVO.getAirportCode());
									toContainerVO.setCompanyCode(logonAttributes.getCompanyCode());
									/*
									 * Transferring Mails/Despatches To Carrier
									 */
									transferMail(transittingDespatches, transittingMailbags, toContainerVO, MailConstantsVO.FLAG_NO);
//								}
							}
						}
        log.exiting(CLASS, "transferMailForULDAcquittal");
					}

					/**
					 * closeFlightDuringAutoAcquittal
     *
					 * @param mailArrivalVO
					 * @param operationalFlightVO
					 * @throws SystemException
					 * @throws CloseFlightException
					 * @throws ULDDefaultsProxyException
					 */
    private void closeFlightDuringAutoAcquittal(MailArrivalVO mailArrivalVO, OperationalFlightVO operationalFlightVO)
            throws SystemException, CloseFlightException, ULDDefaultsProxyException {
        log.entering(CLASS, "closeFlightDuringAutoAcquittal");
						/*
						 * Added by RENO K ABRAHAM  on 11 August 2008
						 * This is to check, whether any
						 * mailbag or despatch is not associated with an onward routing info.
						 * If any such found, exception should be thrown.
						 * This is implemented to cooperate with MRA module.
						 * START
						 */
						Collection<String> sysParameters = new ArrayList<String>();
						sysParameters.add(MailConstantsVO.CONSIGNMENTROUTING_NEEDED_FOR_IMPORT_CLOSEFLIGHT);
						HashMap<String, String> sysParameterMap = null;
						sysParameterMap = new SharedDefaultsProxy().findSystemParameterByCodes(sysParameters);
						log.log(Log.FINE, " systemParameterMap ", sysParameterMap);
						if (sysParameterMap != null
								&& OperationalFlightVO.FLAG_YES.equals(sysParameterMap
										.get(MailConstantsVO.CONSIGNMENTROUTING_NEEDED_FOR_IMPORT_CLOSEFLIGHT))) {
            Collection<ContainerDetailsVO> containerDetails = mailArrivalVO.getContainerDetails();
            boolean canCloseFlight = true;
            if (containerDetails != null && containerDetails.size() > 0) {
                for (ContainerDetailsVO containerDtls : containerDetails) {
                    if (containerDtls.getDsnVOs() != null && containerDtls.getDsnVOs().size() > 0) {
                        for (DSNVO dSNVO : containerDtls.getDsnVOs()) {
                            if (DSNVO.FLAG_NO.equals(dSNVO.getRoutingAvl())) {
                                canCloseFlight = false;
                                break;
                            }
                        }
                    }
                    if (!canCloseFlight) {
                        break;
                    }
                }
            }
            if (!canCloseFlight) {
								throw new CloseFlightException(
										CloseFlightException.ROUTING_UNAVAILABLE);
							}
						}
						//END
						//CLOSING FLIGHT AT IMPORT SIDE
						closeInboundFlight(operationalFlightVO);
        log.exiting(CLASS, "closeFlightDuringAutoAcquittal");
					}

					/**
					 * Close inbound flight for mail operation.
					 *
					 * @param companyCode the company code
					 * @param time the time
					 * @param airportCode the airport code
					 * @throws SystemException the system exception
					 */
					public void closeInboundFlightForMailOperation(String companyCode)
            throws SystemException {
						/*Code modified by A-4809 as part of performance issue
						 * */
						log.entering(CLASS, "closeInboundFlightForMailOperation");
        HashMap<String, String> systemParameterMap = findSystemParameter(MailConstantsVO.MAIL_ARRIVAL_NEEDED, MailConstantsVO.FLIGHT_CLOSURE_ENABLED);
						boolean mailArrivalNeeded = false;
						boolean flightClosureNeeded = false;
						if (systemParameterMap != null) {
            if (ContainerVO.FLAG_YES.equals(systemParameterMap
                    .get(MailConstantsVO.MAIL_ARRIVAL_NEEDED))) {
							mailArrivalNeeded = true;
							}
            if (ContainerVO.FLAG_YES.equals(systemParameterMap
                    .get(MailConstantsVO.FLIGHT_CLOSURE_ENABLED))) {
							flightClosureNeeded = true;
							}
						}
		/*				Collection<OperationalFlightVO> flights =
							 Mailbag.findInboundFlightForMailOperation(companyCode);*/
						//if(flights!=null && flights.size()>0){
							//boolean mailArrivalNeeded = isMailArrivalNeeded();
							//boolean flightClosureNeeded = isFlightClosureEnabled();
							//for(OperationalFlightVO flightVo : flights){
        if (!mailArrivalNeeded) {
            try {
									//MailArrivalVO mailArrivalVO =findOnlineFlightsULDAcquittance(flightVo);
									Collection<MailArrivalVO> mailArrivalVOs = Mailbag.findOnlineFlightsAndConatiners(companyCode);
                if (mailArrivalVOs != null && !mailArrivalVOs.isEmpty()) {
                    for (MailArrivalVO mailArrivalVO : mailArrivalVOs) {
                        try {
											
                            if (flightClosureNeeded) {
													OperationalFlightVO flightVO = new OperationalFlightVO();
													flightVO.setCompanyCode(mailArrivalVO.getCompanyCode());
													flightVO.setFlightNumber(mailArrivalVO.getFlightNumber());
													flightVO.setPou(mailArrivalVO.getPou());
													flightVO.setFlightSequenceNumber(mailArrivalVO.getFlightSequenceNumber());
													flightVO.setLegSerialNumber(mailArrivalVO.getLegSerialNumber());
													flightVO.setCarrierId(mailArrivalVO.getCarrierId());
													flightVO.setFlightDate(mailArrivalVO.getFlightDate());
													/*Removed the method as consignment routing is not checked now*/
													//closeFlightDuringAutoAcquittal(mailArrivalVO,flightVo);
													closeMailInboundFlight(flightVO);
												}
                        } catch (Exception e) {
                            log.log(Log.FINE, "Exception in MailController at closeInboundFlightForMailOperation for Online *Flight* " + mailArrivalVO);
											 continue;
										 }
										 }
								}
            } catch (Exception e) {
                log.log(Log.FINE, "Exception in MailController at closeInboundFlightForMailOperation for Online *Flight* ");
            }
        } else {
									Collection<OperationalFlightVO> flightVOs = Mailbag.findFlightsForArrival(companyCode);
            if (flightVOs != null && !flightVOs.isEmpty()) {
                for (OperationalFlightVO flightVo : flightVOs) {
										//MailArrivalVO mailArrivalVO =findArrivalDetailsForULDAcquittance(flightVo);
										Collection<ContainerDetailsVO> containerDetailsVO = Mailbag.findArrivalDetailsForReleasingMails(flightVo);
								        MailArrivalVO arrivalVO = new MailArrivalVO();
								        arrivalVO.setCompanyCode(flightVo.getCompanyCode());
								        arrivalVO.setCarrierId(flightVo.getCarrierId());
								        arrivalVO.setFlightNumber(flightVo.getFlightNumber());
								        arrivalVO.setFlightSequenceNumber(flightVo.getFlightSequenceNumber());
								        arrivalVO.setArrivalDate(flightVo.getFlightDate());
								        arrivalVO.setAirportCode(flightVo.getPou());
								        arrivalVO.setLegSerialNumber(flightVo.getLegSerialNumber());
                    if (containerDetailsVO != null && containerDetailsVO.size() > 0) {
								        	arrivalVO.setFlightStatus(containerDetailsVO.iterator().next().getFlightStatus());
								        	 arrivalVO.setFlightCarrierCode(containerDetailsVO.iterator().next().getCarrierCode());
								        	arrivalVO.setContainerDetails(containerDetailsVO);
								        }
                    if (arrivalVO != null) {
										try {
                            releasingMailsForULDAcquittanceForProxy(arrivalVO, flightVo);
                        } catch (Exception exception) {
                            log.log(Log.FINE, "Exception in MailController at closeInboundFlightForMailOperation for Online *Flight* " + flightVo);
                            continue;
                        }
                        if (flightClosureNeeded) {
                            //closeFlightDuringAutoAcquittal(arrivalVO,flightVo);
                            try {
												closeMailInboundFlight(flightVo);
											//closeInboundFlightAfterULDAcquital(flightVo);
                            } catch (Exception exception) {
                                log.log(Log.FINE, "Exception in MailController at closeInboundFlightForMailOperation for Online *Flight* " + flightVo);
												continue;
											}
									 }
								 }
								}
								}
						       }
							//}
						//}
								log.exiting(CLASS, "closeInboundFlightForMailOperation");
					 }

					/**
					 * 	Method		:	MailController.findSystemParameter
					 *	Added by 	:	A-4809 on Sep 29, 2015
					 * 	Used for 	:
					 *	Parameters	:	@param MAIL_ARRIVAL_NEEDED
					 *	Parameters	:	@param FLIGHT_CLOSURE_ENABLED
					 *	Parameters	:	@return
					 *	Parameters	:	@throws SystemException
					 *	Return type	: 	HashMap<String,String>
					 */
						public HashMap<String, String>  findSystemParameter
    (String MAIL_ARRIVAL_NEEDED, String FLIGHT_CLOSURE_ENABLED) throws SystemException {
						ArrayList<String> systemParameters = new ArrayList<String>();
						systemParameters.add(MAIL_ARRIVAL_NEEDED);
						systemParameters.add(FLIGHT_CLOSURE_ENABLED);
						HashMap<String, String> systemParameterMap = null;
						systemParameterMap = new SharedDefaultsProxy()
						.findSystemParameterByCodes(systemParameters);
							log.log(Log.FINE, " systemParameterMap ", systemParameterMap);
							return systemParameterMap;
					}

    /**
						 * 	Method		:	MailController.closeInboundFlightAfterULDAcquital
						 *	Added by 	:	A-4809 on Oct 6, 2015
						 * 	Used for 	:
						 *	Parameters	:	@param operationalFlightVO
						 *	Return type	: 	void
						 */
    @Raise(module = "mail", submodule = "operations", event = "FLIGHT_CLOSE_EVENT", methodId = "mail.operations.closeInboundFlightAfterULDAcquital")
    @Advice(name = "mail.operations.importMailToMRA", phase = Phase.POST_INVOKE)
						public void closeInboundFlightAfterULDAcquital(OperationalFlightVO operationalFlightVO)
            throws SystemException {
							log.entering(CLASS, "closeInboundFlight");
							LogonAttributes logon = ContextUtils.getSecurityContext().getLogonAttributesVO();
							AssignedFlight assignedFlight = null;
							AssignedFlightVO assignedFlightVO = null;
							//String jobRequired = "";
							//boolean isMRAJobRequired = false;
							AssignedFlightPK assignedFlightPK = new AssignedFlightPK();
							assignedFlightPK.setCompanyCode(operationalFlightVO.getCompanyCode());
							assignedFlightPK.setAirportCode(operationalFlightVO.getPou());
							assignedFlightPK.setFlightNumber(operationalFlightVO.getFlightNumber());
							assignedFlightPK.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
							assignedFlightPK.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
							assignedFlightPK.setCarrierId(operationalFlightVO.getCarrierId());

							try {
								assignedFlight = AssignedFlight.find(assignedFlightPK);
							} catch (FinderException e) {
								log.log(Log.INFO, FINDEREXCEPTIO_STRING);
								log.log(Log.INFO, "DATA INCONSISTENT");
								assignedFlightVO = new AssignedFlightVO();
								assignedFlightVO.setAirportCode(operationalFlightVO.getPou());
								assignedFlightVO.setCarrierId(operationalFlightVO.getCarrierId());
								assignedFlightVO.setCompanyCode(operationalFlightVO.getCompanyCode());
								assignedFlightVO.setFlightDate(operationalFlightVO.getFlightDate());
								assignedFlightVO.setFlightNumber(operationalFlightVO.getFlightNumber());
								assignedFlightVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
								assignedFlightVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
            assignedFlightVO.setLastUpdateTime(new LocalDate(logon.getAirportCode(), ARP, true));
								assignedFlightVO.setLastUpdateUser(logon.getUserId());
								assignedFlight = new AssignedFlight(assignedFlightVO);
							}
							if (assignedFlight != null) {
								assignedFlight.setImportClosingFlag(MailConstantsVO.FLIGHT_STATUS_CLOSED);
							}
							Collection<ContainerVO> containerVOs = AssignedFlight
									.findULDsInInboundFlight(operationalFlightVO);
        if (containerVOs != null && containerVOs.size() > 0) {
            int segNo = 0;
            for (ContainerVO container : containerVOs) {
											ULDForSegmentPK uLDForSegmentPK = new ULDForSegmentPK();
											ContainerVO containerVO = new ContainerVO();
											uLDForSegmentPK.setCompanyCode(operationalFlightVO.getCompanyCode());
											uLDForSegmentPK.setCarrierId(operationalFlightVO.getCarrierId());
											uLDForSegmentPK.setFlightNumber(operationalFlightVO.getFlightNumber());
											uLDForSegmentPK.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
											uLDForSegmentPK.setUldNumber(container.getContainerNumber());
											try {
												BeanHelper.copyProperties(containerVO, container);
												containerVO.setCompanyCode(operationalFlightVO.getCompanyCode());
												containerVO.setCarrierId(operationalFlightVO.getCarrierId());
												containerVO.setFlightNumber(operationalFlightVO.getFlightNumber());
												containerVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
												segNo = findContainerSegment(containerVO);

											} catch (InvalidFlightSegmentException e) {
												e.getMessage();
											}
											uLDForSegmentPK.setSegmentSerialNumber(segNo);
											try {
												ULDForSegment uLDForSegment = null;
												uLDForSegment = ULDForSegment.find(uLDForSegmentPK);
												//Updated by U-1532 as part of STLDTA fix
												if(!MailConstantsVO.FLAG_YES.equals(uLDForSegment.getReleasedFlag())){
												uLDForSegment.setReleasedFlag(MailConstantsVO.FLAG_YES);
												}
} catch (FinderException e) {
												e.getErrorCode();
											}
											ContainerPK containerPK = new ContainerPK();
											containerPK.setCompanyCode(containerVO.getCompanyCode());
											containerPK.setCarrierId(containerVO.getCarrierId());
											containerPK.setFlightNumber(containerVO.getFlightNumber());
                containerPK.setFlightSequenceNumber(containerVO.getFlightSequenceNumber());
											containerPK.setLegSerialNumber(containerVO.getLegSerialNumber());
											containerPK.setAssignmentPort(containerVO.getAssignedPort());
											containerPK.setContainerNumber(containerVO.getContainerNumber());
											Container containerToUpdate = null;
                try {
												containerToUpdate = Container.find(containerPK);
												containerToUpdate.setTransitFlag(MailConstantsVO.FLAG_NO);
												//Added by A-5945	for ICRD-118493 starts
												containerToUpdate.setArrivedStatus(MailConstantsVO.FLAG_YES);
                } catch (FinderException finderException) {
												log.log(Log.FINE,  "FinderException ");
											}
										}
									}
							/**
							 * As part of splitting Mail and MRA job
							 * a new system parameter is added.
							 * If the system parameter value is Y then separate job is required for MRA
							 * else the same job will do both mail arrival and MRA import
							 */
							/*jobRequired = findSystemParameterValue(MRA_JOB_REQUIRED);
							if (InboundFlightVO.FLAG_YES.equals(jobRequired)){
								isMRAJobRequired = true;
							}else {
								isMRAJobRequired = false;
							}
							if(!isMRAJobRequired){
								if (MailConstantsVO.FLAG_YES.equals(findSystemParameterValue(IMPORTMRA_REQUIRED))) {
							importMailsToMRA(operationalFlightVO);
								}
							}*/
							 }

    /**
						 * @param companyCode
						 * @param time
						 * @throws SystemException
     * @author A-1885
     */
    public void closeFlightForMailOperation(String companyCode, int time, String airportCode)
            throws SystemException {
							Collection<OperationalFlightVO> flights =
								 Mailbag.findFlightForMailOperationClosure(companyCode, time, airportCode);
        if (flights != null && flights.size() > 0) {
            for (OperationalFlightVO flightVo : flights) {
                try {

                	MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
                	mailController.closeFlightForOperations(flightVo);
                } catch (CloseFlightException e) {
                    for (ErrorVO errVo : e.getErrors()) {
											throw new SystemException(errVo.getErrorCode());
										}
									}
								}
							}
					}

    /**
						 * @param operationalFlightVO
						 * @throws SystemException
					     * @throws CloseFlightException
     * @author a-3251 SREEJITH P.C.
						 */
    					@Raise(module = "mail", submodule = "operations", event = "FLIGHT_CLOSE_EVENT", methodId = "mail.operations.closeFlightForMailOperation")
						public void  closeFlightForOperations(OperationalFlightVO operationalFlightVO)
            throws SystemException, CloseFlightException {
							log.entering(CLASS, "closeFlightForOperations");
							AssignedFlight assignedFlight = null;
							AssignedFlightPK assignedFlightPk = constructAssignedFlightPK(operationalFlightVO);
							boolean isClosed;
							try {
								assignedFlight = AssignedFlight.find(assignedFlightPk);
							} catch (FinderException ex) {
								log.log(Log.INFO, FINDEREXCEPTIO_STRING);
							}
							if (assignedFlight != null) {
								log.log(Log.FINE, "The Flight is assigned for mail operations... ");
								isClosed = isFlightClosedForOperations(operationalFlightVO);
            if (isClosed) {
									log.log(Log.FINE, "The Flight is already closed");
									return;
            } else {
									String containersAssigned = AssignedFlight.findAnyContainerInAssignedFlight(operationalFlightVO);
                if (containersAssigned == null) {
										log.log(Log.FINE, "Is flight assigned but not loaded");
										//change status to close
                    try {
                        closeFlightWithoutMails(operationalFlightVO);
                    } catch (ULDDefaultsProxyException e) {
                        log.log(Log.FINE, "ULDDefaultsProxyException");
                    }
                } else {
                    if (operationalFlightVO.isScanned()) {
										 //call is from HHT
                        try {
											MailManifestVO  mailManifestVO = findContainersInFlightForManifest(operationalFlightVO);
											mailManifestVO.setCompanyCode(operationalFlightVO.getCarrierCode());
											mailManifestVO.setDepDate(operationalFlightVO.getFlightDate());
											mailManifestVO.setDepPort(operationalFlightVO.getPol());
											mailManifestVO.setFlightCarrierCode(operationalFlightVO.getCarrierCode());
											mailManifestVO.setFlightNumber(operationalFlightVO.getFlightNumber());
							/**
							 * Commenting the call as route check is not needed post MRA Revamp
							 */
							//checkRoutingAvailabilityForManifest(operationalFlightVO, mailManifestVO);
											closeFlightManifest(operationalFlightVO, mailManifestVO);
                        } catch (ULDDefaultsProxyException e) {
                            log.log(Log.FINE, "ULDDefaultsProxyException");
                        }
                    } else {
										//call is from operations
                        if ("1".equals(containersAssigned)) {
									    	 log.log(Log.FINE, "Is flight loaded ");
									    	 //throw exception of operations
										     	throw new CloseFlightException(
												    CloseFlightException.CLOSEFLIGHT_EXCEPTION,
                                    new Object[]{operationalFlightVO.getFlightNumber()});
									    }
									}
								  }
								}
        } else {
								log.log(Log.FINE, "The Flight not assigned for mail operations... ");
								//insert new row
								AssignedFlightVO assignedFlightVO = new AssignedFlightVO();
								assignedFlightVO.setCompanyCode(operationalFlightVO.getCompanyCode());
								assignedFlightVO.setAirportCode(operationalFlightVO.getPol());
								assignedFlightVO.setCarrierId(operationalFlightVO.getCarrierId());
								assignedFlightVO.setFlightNumber(operationalFlightVO.getFlightNumber());
								assignedFlightVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
								assignedFlightVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
								assignedFlightVO.setCarrierCode(operationalFlightVO.getCarrierCode());
								assignedFlightVO.setFlightDate(operationalFlightVO.getFlightDate());
								assignedFlightVO.setFlightStatus("O");
								LogonAttributes logonVO = ContextUtils.getSecurityContext()
								.getLogonAttributesVO();
            assignedFlightVO.setLastUpdateTime(new LocalDate(logonVO.getAirportCode(), ARP, true));
								assignedFlightVO.setLastUpdateUser(logonVO.getUserId());
								AssignedFlight assignedFlightnew = new AssignedFlight(assignedFlightVO);
            try {
                closeFlightWithoutMails(operationalFlightVO);
            } catch (ULDDefaultsProxyException e) {
										log.log(Log.FINE, "ULDDefaultsProxyException");
								}
							}
						    log.exiting(CLASS, "closeFlightForOperations");
							}

    /**
						 * @param operationalFlightVO
						 * @throws SystemException
					     * @throws ULDDefaultsProxyException
     * @author a-3251 SREEJITH P.C.
						 */
						public void  closeFlightWithoutMails(OperationalFlightVO operationalFlightVO)
            throws SystemException, ULDDefaultsProxyException, CloseFlightException {
							log.entering(CLASS, "closeFlightWithoutMails");
							   //closing flight
							   closeFlight(operationalFlightVO);
        if (operationalFlightVO.getFlightRoute() != null) {
							   //Creating messageVO from mailAcceptanceVO and operationalFlightVO
							    MailAlertMessageVO mailAlertMessageVO = new MailAlertMessageVO();
							    mailAlertMessageVO.setCompanyCode(operationalFlightVO.getCompanyCode());
						        mailAlertMessageVO.setCondatails(new ArrayList<ContainerDetailsVO>());
						        mailAlertMessageVO.setDepartureDate(operationalFlightVO.getFlightDate());
						        mailAlertMessageVO.setDeptport(operationalFlightVO.getPol());
            mailAlertMessageVO.setFlightnum(operationalFlightVO.getCarrierCode() + SPACE + operationalFlightVO.getFlightNumber());
						        mailAlertMessageVO.setRoute(operationalFlightVO.getFlightRoute());
						        mailAlertMessageVO.setAirlinecode(operationalFlightVO.getOwnAirlineCode());
						        //creating stations form route
            String st[] = operationalFlightVO.getFlightRoute().split("-");
							       Collection<String> stations = new ArrayList<String>();
            for (int i = 0; i < st.length; i++) {
							    	    stations.add(st[i]);
							       }
							       log
										.log(
												Log.FINE,
												"\n*******Stations to which the message is to be send are -------->\n",
												stations);
								mailAlertMessageVO.setStations(stations);
							     log.log(Log.FINE, "\n*******Mail Alert Message VO -------->\n",
										mailAlertMessageVO);
								//		       sendMailAlertMessage(mailAlertMessageVO,(ArrayList<String>)stations);
							     log.exiting(CLASS, "closeFlightWithoutMails");
							}
						}

    /**
     * @param companyCode
     * @throws SystemException
						 * @author A-5166
						 * Added for ICRD-17262 on 07-Mar-2013
						 */
						public void initiateArrivalForFlights(ArriveAndImportMailVO arriveAndImportMailVO)
            throws SystemException {
							log.entering(MODULE, "initiateArrivalForFlights");
							/**
							 * To fetch the flights which are not arrived/closed or closed flights having
							 * mailbags/dsns not imported to MRA
							 */
							Collection<OperationalFlightVO> operationalFlightVOs = findImportFlghtsForArrival(arriveAndImportMailVO.getCompanyCode());
        if (operationalFlightVOs != null && operationalFlightVOs.size() > 0) {
            for (OperationalFlightVO flightVo : operationalFlightVOs) {
                try {
										Collection<ContainerDetailsVO> containerDetailsVO = Mailbag.findArrivalDetailsForReleasingMails(flightVo);
										MailArrivalVO arrivalVO = new MailArrivalVO();
										arrivalVO.setCompanyCode(flightVo.getCompanyCode());
										arrivalVO.setFlightCarrierCode(flightVo.getCarrierCode());
										arrivalVO.setCarrierId(flightVo.getCarrierId());
										arrivalVO.setFlightNumber(flightVo.getFlightNumber());
										arrivalVO.setFlightSequenceNumber(flightVo.getFlightSequenceNumber());
										arrivalVO.setArrivalDate(flightVo.getFlightDate());
										arrivalVO.setAirportCode(flightVo.getPou());
										arrivalVO.setLegSerialNumber(flightVo.getLegSerialNumber());
										arrivalVO.setOfflineJob(true);
                    if (containerDetailsVO != null && containerDetailsVO.size() > 0) {
											arrivalVO.setFlightStatus(containerDetailsVO.iterator().next().getFlightStatus());
											arrivalVO.setContainerDetails(containerDetailsVO);
										}
                    					//added by a-8952 as part of CR ICRD-327979 start
					arrivalVO.setOffset(arriveAndImportMailVO.getOffset());
										arrivalVO.setArrivalAndDeliveryMarkedTogether(arriveAndImportMailVO.isArrivalAndDeliveryMarkedTogether());
					arrivalVO.setActualArrivalTime(flightVo.getActualArrivalTime());
					arrivalVO.setLegDestination(flightVo.getLegDestination());

										//added by a-8952 as part of CR ICRD-327979 end

										try {

                        releasingMailsForULDAcquittance(arrivalVO, flightVo);
										} catch (InvalidFlightSegmentException exception) {
											exception.getMessage();
										} catch (CapacityBookingProxyException exception) {
											exception.getMessage();
										} catch (MailBookingException exception) {
											exception.getMessage();
										} catch (ContainerAssignmentException exception) {
											exception.getMessage();
										} catch (DuplicateMailBagsException exception) {
											exception.getMessage();
										} catch (MailbagIncorrectlyDeliveredException exception) {
											exception.getMessage();
										} catch (FlightClosedException exception) {
											exception.getMessage();
										} catch (ULDDefaultsProxyException exception) {
											exception.getMessage();
										} catch (MailTrackingBusinessException exception) {
											exception.getMessage();
										}

                    MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
										mailController.closeInboundFlightAfterULDAcquital(flightVo);
                           
                    
                 
							}catch (Exception exception) {
                    log.log(Log.FINE, "Exception in MailController at initiateArrivalForFlights for Offline *Flight* ");
									}
							log.exiting(MODULE, "initiateArrivalForFlights");
						}
        }}

    /**
						 * @param companyCode
						 * @return
						 * @throws SystemException
     * @author A-5166
						 */
						public Collection<OperationalFlightVO> findImportFlghtsForArrival(String companyCode)
            throws SystemException {
							log.entering(MODULE, "findImportFlghtsForArrival");
        return AssignedFlight.findImportFlghtsForArrival(companyCode);
					}

    /**
						 * @param dSNEnquiryFilterVO
						 * @param pageNumber
						 * @return
						 * @throws SystemException
						 */
						public Page<DespatchDetailsVO> findDSNs(
								DSNEnquiryFilterVO dSNEnquiryFilterVO, int pageNumber)
								throws SystemException {
							log.entering(CLASS, "findDSNs");
							Page<DespatchDetailsVO> despatchDetailsVOs = null;


							return Mailbag.findDSNs(dSNEnquiryFilterVO, pageNumber);
						}

						/**
						 * This method saves the details of a CARDIT received from a PA This method
						 * is invoked from MessageBroker A-1739
						 *
     * @param ediInterchangeVO the VO for edi Interchange which can contain multiple CARDITs
     * @throws SystemException
     * @throws DuplicateMailBagsException
						 * @throws InvocationTargetException 
						 * @throws IllegalAccessException 
     */
    public Collection<ErrorVO> saveCarditMessages(com.ibsplc.icargo.business.mail.operations.vo.EDIInterchangeVO ediInterchangeVO) throws SystemException, MailTrackingBusinessException, DuplicateMailBagsException, IllegalAccessException, InvocationTargetException {
							log.entering(CLASS, "saveCarditMessages");
							// Method updated with QF code
							//EDIInterchangeVO ediInterchangeVO=MailtrackingDefaultsVOConverter.convertToediInterchangeVO(oldEdiInterchangeVO);
//							com.ibsplc.icargo.business.mail.operations.vo.EDIInterchangeVO ediInterchangeVO = new com.ibsplc.icargo.business.mail.operations.vo.EDIInterchangeVO();
//
//								BeanHelper.copyProperties(ediInterchangeVO, ediInterchangeVoOld);
//
							Collection<ErrorVO> errors = new ArrayList<>();
							boolean isAutoProcessEnabled = false;
							boolean canFailAttachedAWBs = false;
							ConsignmentDocumentVO consignmentDocumentVO = null;
							ConsignmentDocumentVO existingMailBagsInConsignment = new ConsignmentDocumentVO() ;
							String autoProcessEnabled = MailConstantsVO.AUTO_PROCESS_NEEDED;
							String failAlreadyAttached=MailConstantsVO.SYSPAR_FAIL_ATTACHEDA_AWB;
							ArrayList<String> systemParameters = new ArrayList<String>();
							systemParameters.add(autoProcessEnabled);
							systemParameters.add(failAlreadyAttached);
							HashMap<String, String> systemParameterMap = null;
							systemParameterMap = Proxy.getInstance().get(SharedDefaultsProxy.class).findSystemParameterByCodes(systemParameters);
							Map<String, String> mailInCarditMap=new HashMap<String,String>();
							log.log(Log.FINE, " systemParameterMap " + systemParameterMap);
							if (systemParameterMap != null &&
							    EDIInterchangeVO.FLAG_YES.equals(systemParameterMap.get(autoProcessEnabled))) {
								isAutoProcessEnabled = true;
							}
							if (systemParameterMap != null &&
									EDIInterchangeVO.FLAG_YES.equals(systemParameterMap.get(failAlreadyAttached))) {
								canFailAttachedAWBs = true;
							}
							Collection<com.ibsplc.icargo.business.mail.operations.vo.CarditVO> cardits = ediInterchangeVO.getCarditMessages();
							for (com.ibsplc.icargo.business.mail.operations.vo.CarditVO carditVO : cardits) {
								updateCarditSender(carditVO);
                            //Added by A-7540

								setTransportInformation(carditVO);

								if(carditVO.getReceptacleInformation()!=null && !carditVO.getReceptacleInformation().isEmpty())
									for (CarditReceptacleVO receptacleVO : carditVO.getReceptacleInformation()) {
										if (receptacleVO.getReceptacleId() != null) {
                                            //Modified as part of IASCB-47544 starts
											Mailbag mailbag=null;
                                            MailbagPK mailbagPk = null;
                                            long mailSequenceNumber = findMailSequenceNumber(receptacleVO.getReceptacleId(), carditVO.getCompanyCode());
                                            if (mailSequenceNumber > 0) {
                                                mailbagPk = new MailbagPK();
                                                mailbagPk.setCompanyCode(carditVO.getCompanyCode());
                                                mailbagPk.setMailSequenceNumber(mailSequenceNumber);
                                                try {
												mailbag = Mailbag.find(mailbagPk);
												receptacleVO.setMasterDocumentNumber(mailbag.getMasterDocumentNumber());
												receptacleVO.setDuplicateNumber(mailbag.getDupliacteNumber());
												receptacleVO.setOwnerId(mailbag.getDocumentOwnerId());
												receptacleVO.setSequenceNumber(mailbag.getSequenceNumber());

												} catch (FinderException finderException) {
													mailbag=null;
												}
                                            }
                                            receptacleVO.setCarditType(receptacleVO.getCarditType()!=null?receptacleVO.getCarditType():"N");
                                            //Modified as part of IASCB-47544 ends
										    if(canFailAttachedAWBs && mailbag!=null && mailbag.getMasterDocumentNumber()!=null && !mailbag.getMasterDocumentNumber().isEmpty()){
										    	throw new MailTrackingBusinessException(MailConstantsVO.MAILBAG_IS_AWB_ATTACHED);
											}
										}
									}

								if(carditVO.getReceptacleInformation()!=null && !carditVO.getReceptacleInformation().isEmpty()){
									mailInCarditMap=carditVO.getReceptacleInformation().stream().collect(Collectors.toMap(CarditReceptacleVO::getReceptacleId, CarditReceptacleVO::getCarditType));
								}


								try {
									CarditVO cdtVO =Cardit.findCarditDetailsForResdit(ediInterchangeVO.getCompanyCode(),carditVO.getConsignmentNumber());//ICRD-321917
									Cardit cardit=null;

									if(cdtVO!=null && cdtVO.getSenderId()!=null && !cdtVO.getSenderId().equals(carditVO.getSenderId())){//ICRD-321917
										carditVO.setSenderIdChanged(true);
										CarditPK carditPK= new CarditPK();
										carditPK.setCompanyCode(ediInterchangeVO.getCompanyCode());
										carditPK.setCarditKey(cdtVO.getCarditKey());
										cardit = Cardit.find(carditPK);
										cardit.remove();
										cardit= new Cardit(carditVO);

									}else{
									 cardit = Cardit.find(constructCarditPK(ediInterchangeVO,carditVO));
									}


               /*Cardit cardit = Cardit.find(constructCarditPK(ediInterchangeVO, carditVO));*/
                log.log(Log.FINE, "cardit already exists,  update " + carditVO.getCarditKey());
									if (carditVO.getCarditType() != null && carditVO.getCarditType().trim().length() > 0) {
                    if (MailConstantsVO.CDT_TYP_CANCEL.equalsIgnoreCase(carditVO.getCarditType())
                            && (!"CARDITDOM".equalsIgnoreCase(carditVO.getMessageTypeId()))) {
											// cancellation cardit will not have receptacles
												cardit.setCarditType(carditVO.getCarditType());
											//Added by A-5945 for ICRD-135116
									//updateReceptacleDetailsForCancellationCardit(cardit,carditVO);
                        updateReceptacleDetailsForCancellation(cardit, carditVO);
                        populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_CANCELLATION);
											if (isAutoProcessEnabled) {
												ConsignmentFilterVO consignmentFilterVO = new ConsignmentFilterVO();
												consignmentFilterVO.setCompanyCode(carditVO.getCompanyCode());
												consignmentFilterVO.setPaCode(carditVO.getSenderId());
												consignmentFilterVO.setConsignmentNumber(carditVO.getConsignmentNumber());
												if(carditVO.getReceptacleInformation() != null && carditVO.getReceptacleInformation().size()>0){
												consignmentFilterVO.setScannedOnline(MailConstantsVO.FLAG_YES);
												}else{
													// added as part of ICRD-346494
													consignmentFilterVO.setScannedOnline(MailConstantsVO.FLAG_NO);
													consignmentFilterVO.setPageNumber(1);
													consignmentFilterVO.setTotalRecords(-1);
												}
												// fetching using query to get the sequence number
												ConsignmentDocumentVO consignmentDocumentVOTofind  = new DocumentController().findConsignmentDocumentDetails(consignmentFilterVO);
												Collection<MailInConsignmentVO> mailInConsignmentVOs = new ArrayList<>();
												Collection<MailInConsignmentVO> existingMailInConsignmentVOs =null;
													existingMailInConsignmentVOs =findMailInConsignment(consignmentFilterVO);
												
                            if (consignmentDocumentVOTofind != null) {
                            	mailInConsignmentVOs = consignmentDocumentVOTofind.getMailInConsignmentVOs();
                            	BeanUtils.copyProperties(existingMailBagsInConsignment, consignmentDocumentVOTofind);
								existingMailBagsInConsignment.setMailInConsignmentcollVOs(existingMailInConsignmentVOs);
												ConsignmentDocument consignmentDocument = ConsignmentDocument.find(consignmentDocumentVOTofind);
												consignmentDocument.remove();
												}

												Collection<CarditReceptacleVO> receptacleVOs = carditVO.getReceptacleInformation();

										if (receptacleVOs != null && receptacleVOs.size() > 0) {
											log.log(Log.FINE, " Going to create MailInConsignment ==>> ");

											for (CarditReceptacleVO receptacleVO : receptacleVOs) {
												if (receptacleVO.getReceptacleId() != null) {
                                                    //Modified as part of IASCB-47544 starts
													Mailbag mailbag = null;
                                                    MailbagPK mailbagPk = null;
                                                    boolean isMailInMRA = false;
                                                    long mailSequenceNumber = findMailSequenceNumber(receptacleVO.getReceptacleId(), carditVO.getCompanyCode());
                                                    if (mailSequenceNumber > 0) {
                                                        mailbagPk = new MailbagPK();
                                                        mailbagPk.setCompanyCode(carditVO.getCompanyCode());
                                                        mailbagPk.setMailSequenceNumber(mailSequenceNumber);
														try {
															mailbag = Mailbag.find(mailbagPk);
															receptacleVO.setMailSeqNum(mailbagPk.getMailSequenceNumber());
															receptacleVO.setMasterDocumentNumber(mailbag.getMasterDocumentNumber());
															receptacleVO.setDuplicateNumber(mailbag.getDupliacteNumber());
															receptacleVO.setOwnerId(mailbag.getDocumentOwnerId());
															receptacleVO.setSequenceNumber(mailbag.getSequenceNumber());
														} catch (FinderException finderException) {
															mailbag = null;
														}
														if(mailbag != null){
	                                                    	try{
	                                                    		isMailInMRA = new MailtrackingMRAProxy().isMailbagInMRA(mailbagPk.getCompanyCode(), mailbagPk.getMailSequenceNumber());
	                                                    	}catch(Exception e){
	                                                    		isMailInMRA = false;
	                                                    	}
	                                                    }
                                                    }
                                                    //Modified as part of IASCB-47544 ends
													if (mailbag != null && "NEW".equals(mailbag.getLatestStatus()) && !MailConstantsVO.FLAG_YES.equals(mailbag.getScanWavedFlag()) && !isMailInMRA){

														mailbag.remove();


                                        }else if (mailbag != null){//IASCB-44989
														mailbag.setConsignmentNumber(null);
														mailbag.setConsignmentSequenceNumber(0);
											Collection<MailbagHistoryVO>  mailbagHistoryVOs =Mailbag.findMailbagHistories(mailbag.getMailbagPK().getCompanyCode(),"", mailbag.getMailbagPK().getMailSequenceNumber());
											if(mailbagHistoryVOs!=null && !mailbagHistoryVOs.isEmpty()){
												for(MailbagHistoryVO mailbagHistoryVO :mailbagHistoryVOs){
													if(!MailConstantsVO.CARDIT_EVENT.equals(mailbagHistoryVO.getMailStatus())){
														mailbag.setDespatchDate(mailbagHistoryVO.getScanDate());
														break;
													}
												}
											}
										}

											}
										}
									}else if (mailInConsignmentVOs != null && mailInConsignmentVOs.size() > 0) {
										// else part added as part of ICRD-346494
										log.log(Log.FINE, " Going to create MailInConsignment ==>> ");
										for (MailInConsignmentVO mailInConsignmentVO : mailInConsignmentVOs) {
                                    Mailbag mailbag = null;
                                    boolean isMailInMRA = false;
												MailbagPK mailbagPk = new MailbagPK();
												mailbagPk.setCompanyCode(carditVO.getCompanyCode());
												mailbagPk.setMailSequenceNumber(mailInConsignmentVO.getMailSequenceNumber());
												try {
													mailbag = Mailbag.find(mailbagPk);
													//mailInConsignmentVO.setMailSeqNum(mailbagPk.getMailSequenceNumber());
												} catch (FinderException finderException) {
                                        mailbag = null;
												}
												if(mailbag != null){
	                                            	try{
	                                                	isMailInMRA = new MailtrackingMRAProxy().isMailbagInMRA(mailbagPk.getCompanyCode(), mailbagPk.getMailSequenceNumber());
	                                                }catch(Exception e){
	                                                	isMailInMRA = false;
	                                                }
                                                }
												if (mailbag != null && "NEW".equals(mailbag.getLatestStatus()) && !MailConstantsVO.FLAG_YES.equals(mailbag.getScanWavedFlag()) && !isMailInMRA){
													mailbag.remove();
                                    } 	else if (mailbag != null){//IASCB-44989
													mailbag.setConsignmentNumber(null);
													mailbag.setConsignmentSequenceNumber(0);
										Collection<MailbagHistoryVO>  mailbagHistoryVOs =Mailbag.findMailbagHistories(mailbag.getMailbagPK().getCompanyCode(),"", mailbag.getMailbagPK().getMailSequenceNumber());
										if(mailbagHistoryVOs!=null && !mailbagHistoryVOs.isEmpty()){
											for(MailbagHistoryVO mailbagHistoryVO :mailbagHistoryVOs){
												if(!MailConstantsVO.CARDIT_EVENT.equals(mailbagHistoryVO.getMailStatus())){
													mailbag.setDespatchDate(mailbagHistoryVO.getScanDate());
													break; 
												}
											}
										}
									}

										}

									}
											}
                    } else if (MailConstantsVO.CDT_TYP_UPDATE.equalsIgnoreCase(carditVO.getCarditType()) ||
                            MailConstantsVO.CDT_TYP_FINAL.equalsIgnoreCase(carditVO.getCarditType()) ||
                            MailConstantsVO.CDT_TYP_CORRECTION.equalsIgnoreCase(carditVO.getCarditType()) ||
												   (MailConstantsVO.CDT_TYP_ORIGINAL.equalsIgnoreCase(carditVO.getCarditType())) ||
												   (MailConstantsVO.CDT_TYP_CONFIRM.equalsIgnoreCase(carditVO.getCarditType()))) {

											     /*   if(MailConstantsVO.CDT_TYP_CANCEL.equals(cardit.getCarditType()))   {
                        if (MailConstantsVO.CDT_TYP_CANCEL.equals(cardit.getCarditType())) {
											        	//checking whether this was in cancelled status.If yes then system should not allow the same consignment number
											        	throw new MailTrackingBusinessException(MailConstantsVO.CARDIT_ONCE_CANCELLED);
											        }*/
											 	//!MailConstantsVO.CDT_TYP_CANCEL.equalsIgnoreCase(cardit.getCarditType()) &&

												if ( !carditVO.isSenderIdChanged()) {
														cardit.setCarditType(carditVO.getCarditType());
														cardit.updateReceptacleDetailsForUpdation(carditVO);
											    }
														//Added as part of  ICRD-80713
														if (isAutoProcessEnabled) {
                            if (carditVO.getReceptacleInformation() != null && carditVO.getReceptacleInformation().size() > 0) {
																ConsignmentFilterVO consignmentFilterVO = new ConsignmentFilterVO();
																consignmentFilterVO.setCompanyCode(carditVO.getCompanyCode());
																if(carditVO.isSenderIdChanged()){
																	consignmentFilterVO.setPaCode(cdtVO.getSenderId());
																	}else{
																consignmentFilterVO.setPaCode(carditVO.getSenderId());
																}
																consignmentFilterVO.setConsignmentNumber(carditVO.getConsignmentNumber());
																consignmentFilterVO.setScannedOnline(MailConstantsVO.FLAG_YES);
																// fetching using query to get the sequence number
																ConsignmentDocumentVO consignmentDocumentVOTofind = new DocumentController().findConsignmentDocumentDetails(consignmentFilterVO);
																//Delete insert is applied for avoiding performance issue iterating mail bags and removing and updating others
                                if (consignmentDocumentVOTofind != null && (!"CARDITDOM".equalsIgnoreCase(carditVO.getMessageTypeId()))) {
                                	//fix starts for bug ICRD-334393 by A-5526
									consignmentFilterVO.setScannedOnline(MailConstantsVO.FLAG_NO);
									consignmentFilterVO.setPageNumber(0);
									consignmentDocumentVOTofind = new DocumentController()
											.findConsignmentDocumentDetails(consignmentFilterVO);
									BeanUtils.copyProperties(existingMailBagsInConsignment, consignmentDocumentVOTofind);
									Collection<MailInConsignmentVO> existingMailInConsignmentVOs = findMailInConsignment(consignmentFilterVO);
									existingMailBagsInConsignment.setMailInConsignmentcollVOs(existingMailInConsignmentVOs);
									if ( !carditVO.isSenderIdChanged()) {
										cardit.setCarditType(carditVO.getCarditType());
										cardit.updateReceptacleDetailsForUpdation(carditVO);
							    }

									//Fix ends for bug ICRD-334393 by A-5526


																	ConsignmentDocument consignmentDocument = ConsignmentDocument.find(consignmentDocumentVOTofind);
																	consignmentDocument.remove();

//Added by A-7540 starts

																	Collection<MailInConsignmentVO> mailInConsignmentVOs = consignmentDocumentVOTofind.getMailInConsignmentVOs();
																	Mailbag mailbag=null;
																	boolean isMailInMRA = false;
																	MailbagPK mailbagPk = new MailbagPK();
																	for(MailInConsignmentVO mailInConsignmentVO : mailInConsignmentVOs){
																		mailbagPk.setCompanyCode(mailInConsignmentVO.getCompanyCode());
																		mailbagPk.setMailSequenceNumber(mailInConsignmentVO.getMailSequenceNumber());
																				try {
																					mailbag = Mailbag.find(mailbagPk);
																					//receptacleVO.setMailSeqNum(mailbagPk.getMailSequenceNumber());
																				} catch (FinderException finderException) {
																					mailbag=null;
																				}
																				if(mailbag != null){
							                                                    	try{
							                                                    		isMailInMRA = new MailtrackingMRAProxy().isMailbagInMRA(mailbagPk.getCompanyCode(), mailbagPk.getMailSequenceNumber());
							                                                    	}catch(Exception e){
							                                                    		isMailInMRA = false;
							                                                    	}
							                                                    }
																				if (mailbag != null && "NEW".equals(mailbag.getLatestStatus()) && !MailConstantsVO.FLAG_YES.equals(mailbag.getScanWavedFlag()) && !isMailInMRA){

																					mailbag.remove();
																				}
																				else if (mailbag != null && !mailInCarditMap.containsKey(mailbag.getMailIdr())){//IASCB-44989
																					mailbag.setConsignmentNumber(null);
																					mailbag.setConsignmentSequenceNumber(0);
																					Collection<MailbagHistoryVO>  mailbagHistoryVOs =Mailbag.findMailbagHistories(mailbag.getMailbagPK().getCompanyCode(),"", mailbag.getMailbagPK().getMailSequenceNumber());
																					if(mailbagHistoryVOs!=null && !mailbagHistoryVOs.isEmpty()){
																						for(MailbagHistoryVO mailbagHistoryVO :mailbagHistoryVOs){
																							if(!MailConstantsVO.CARDIT_EVENT.equals(mailbagHistoryVO.getMailStatus())){
																								mailbag.setDespatchDate(mailbagHistoryVO.getScanDate());
																								break;
																							}
																						}
																					}
																				}
																				try {
																					PersistenceController.getEntityManager().flush();
																					PersistenceController.getEntityManager().clear();
																				} catch (PersistenceException e) {

																					e.getMessage();
																				}
																		}
																	//Added by A-7540 ends

																	//fix starts for bug ICRD-334393 by A-5526 
																	consignmentFilterVO.setScannedOnline(MailConstantsVO.FLAG_NO);
																	consignmentFilterVO.setPageNumber(0);
																	consignmentDocumentVOTofind= new DocumentController().findConsignmentDocumentDetails(consignmentFilterVO);  
																	//fix ends
																	if(Objects.nonNull(consignmentDocumentVOTofind)&&consignmentDocumentVOTofind.getMailInConsignmentVOs()!=null && !consignmentDocumentVOTofind.getMailInConsignmentVOs().isEmpty()){
																		for(MailInConsignmentVO mailInConsignmentVO:consignmentDocumentVOTofind.getMailInConsignmentVOs()){
																			if(mailInConsignmentVO.isAwbAttached()){
																				boolean isMailAsAWB=false;
																				MailbagVO mailbagVO=new MailbagVO();
																		    	mailbagVO.setCompanyCode(mailInConsignmentVO.getCompanyCode());
																		    	mailbagVO.setMailSequenceNumber(mailInConsignmentVO.getMailSequenceNumber());
																		    	isMailAsAWB=constructDAO().isMailAsAwb(mailbagVO);
																		    	if(isMailAsAWB)
																				throw new MailTrackingBusinessException(MailConstantsVO.CONSIGNMENT_HAVING_AWB_ATTACHED_MAILBAGS); 
																			}        
																		}        
																	}
																  }//A-8061 modified , if consignment deleted after cardit processing then consignmentDocumentVOTofind will be null
																	//Delete insert is applied for avoiding performance issue iterating mail bags and removing and updating others
																	consignmentDocumentVO = createConsignmentDocVO(carditVO);
																	try {
                                        if ("CARDITDOM".equalsIgnoreCase(carditVO.getMessageTypeId())) {
                                            consignmentDocumentVO.setOperationFlag(ConsignmentDocumentVO.OPERATION_FLAG_UPDATE);
                                            new DocumentController().updateConsignmentDocument(consignmentDocumentVO);
                                        }else {
																		new DocumentController().saveConsignmentDocument(consignmentDocumentVO);
                                        }
																	} catch (MailbagAlreadyAcceptedException ex) {
																		// do nothing
																		} catch (InvalidMailTagFormatException invalidMailTagFormatException) {
																			// do nothing
                                } catch (DuplicateDSNException duplicateDSNException) {
																			//do nothing
																			}
                            } else {
                                log.log(Log.FINE, "NOT SAVING CONSIGNMENT DETAILS AS NO RECEPTACLE VO IS NULL " + carditVO);
															}
														}

											/*
											 * The below method is added by Manish to update
											 * recepticleVO with mailseqnum
											*/
                        if (consignmentDocumentVO != null && carditVO != null) {
                            updateRecpVOwithMalSeq(consignmentDocumentVO, carditVO);
                        }
                        if (MailConstantsVO.CDT_TYP_UPDATE.equalsIgnoreCase(carditVO.getCarditType())) {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_UPDATE);
                        } else if (MailConstantsVO.CARDIT_STATUS_FINAL.equalsIgnoreCase(carditVO.getCarditType())) {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_FINAL);
                        } else if (MailConstantsVO.CDT_TYP_ORIGINAL.equalsIgnoreCase(carditVO.getCarditType())) {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_ORIGINAL);
                        } else if (MailConstantsVO.CDT_TYP_CONFIRM.equalsIgnoreCase(carditVO.getCarditType())) {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_CONFIRMATION);
												cardit.updateReceptacleDetailsForConfirmation(carditVO);
                        } else {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CDT_TYP_CORRECTION);
                        }


                    } else if (MailConstantsVO.CDT_TYP_CANCEL.equalsIgnoreCase(carditVO.getCarditType())
                            && ("CARDITDOM".equalsIgnoreCase(carditVO.getMessageTypeId()))) {

                        if (carditVO.getReceptacleInformation() != null
                                && carditVO.getReceptacleInformation().size() > 0) {

                        	updateReceptacleDetailsForCancellationDOM(cardit, carditVO);

                            ConsignmentFilterVO consignmentFilterVO = new ConsignmentFilterVO();
                            consignmentFilterVO.setCompanyCode(carditVO.getCompanyCode());
                            consignmentFilterVO.setPaCode(cdtVO.getSenderId());
                            consignmentFilterVO.setConsignmentNumber(carditVO.getConsignmentNumber());
                            consignmentFilterVO.setScannedOnline(MailConstantsVO.FLAG_YES);
                            ConsignmentDocumentVO consignmentDocumentVOTofind = new DocumentController()
                                    .findConsignmentDocumentDetails(consignmentFilterVO);
                            Collection<MailInConsignmentVO> existingMailInConsignmentVOs = findMailInConsignment(consignmentFilterVO);                          
                            if (consignmentDocumentVOTofind != null) {
                                consignmentFilterVO.setScannedOnline(MailConstantsVO.FLAG_NO);
                                consignmentFilterVO.setPageNumber(0);
                                consignmentDocumentVOTofind = new DocumentController()
                                        .findConsignmentDocumentDetails(consignmentFilterVO);
                                BeanUtils.copyProperties(existingMailBagsInConsignment, consignmentDocumentVOTofind);
    							existingMailBagsInConsignment.setMailInConsignmentcollVOs(existingMailInConsignmentVOs);
                                ConsignmentDocument consignmentDocument = ConsignmentDocument
                                        .find(consignmentDocumentVOTofind); 


                                Mailbag mailbag = null;
                                long tempMailSeq = 0;

                                for (CarditReceptacleVO receptacleVO : carditVO.getReceptacleInformation()) {
                                    if (receptacleVO.getReceptacleId() != null) {

                                        mailbag = null;
                                        boolean isMailInMRA = false;
                                        MailbagPK mailbagPk = new MailbagPK();
                                        tempMailSeq = findMailSequenceNumber(receptacleVO.getReceptacleId(),
                                                carditVO.getCompanyCode());
                                        mailbagPk.setCompanyCode(carditVO.getCompanyCode());

                                        mailbagPk.setMailSequenceNumber(tempMailSeq);

                                        if (mailbagPk.getMailSequenceNumber() != 0) {

                                            try {
                                                mailbag = Mailbag.find(mailbagPk);
                                                // receptacleVO.setMailSeqNum(mailbagPk.getMailSequenceNumber());
                                                receptacleVO.setMasterDocumentNumber(mailbag.getMasterDocumentNumber());
												receptacleVO.setDuplicateNumber(mailbag.getDupliacteNumber());
												receptacleVO.setOwnerId(mailbag.getDocumentOwnerId());
												receptacleVO.setSequenceNumber(mailbag.getSequenceNumber());
                                            } catch (FinderException finderException) {
                                                mailbag = null;
                                            }
                                        }

                                        if (mailbag != null) {
                                            	try{
                                            		isMailInMRA = new MailtrackingMRAProxy().isMailbagInMRA(mailbagPk.getCompanyCode(), mailbagPk.getMailSequenceNumber());
                                            	}catch(Exception e){
                                            		isMailInMRA = false;
                                            	}


                                            Collection<MailInConsignment> mailToRemove = new ArrayList<MailInConsignment>();
                                            if (consignmentDocument != null
                                                    && consignmentDocument.getMailsInConsignments() != null
                                                    && consignmentDocument.getMailsInConsignments().size() > 0) {

                                                consignmentDocument.getMailsInConsignments().stream()
                                                        .filter(csgmail -> (csgmail.getMailInConsignmentPK()
                                                                .getMailSequenceNumber() == mailbagPk
                                                                .getMailSequenceNumber()))
                                                        .forEach(mailToRemove::add);


                                            }

                                            if ("NEW".equals(mailbag.getLatestStatus()) && !MailConstantsVO.FLAG_YES.equals(mailbag.getScanWavedFlag()) && !isMailInMRA){

                                                mailbag.remove();
                                            }else{
                                            	mailbag.setConsignmentNumber(null);
												mailbag.setConsignmentSequenceNumber(0);

                                    		Collection<MailbagHistoryVO>  mailbagHistoryVOs =Mailbag.findMailbagHistories(mailbag.getMailbagPK().getCompanyCode(),"", mailbag.getMailbagPK().getMailSequenceNumber());
											if(mailbagHistoryVOs!=null && !mailbagHistoryVOs.isEmpty()){
												for(MailbagHistoryVO mailbagHistoryVO :mailbagHistoryVOs){
													if(!MailConstantsVO.CARDIT_EVENT.equals(mailbagHistoryVO.getMailStatus())){
														mailbag.setDespatchDate(mailbagHistoryVO.getScanDate());
														break;
													}
												}
											}

                                            }

                                			if (mailToRemove != null && mailToRemove.size() > 0) {
                                				for (MailInConsignment mailInConsignment : mailToRemove) {
                                					mailInConsignment.remove();
                                				}
                                				 consignmentDocument.getMailsInConsignments().removeAll(mailToRemove);
                                            }


                                			}

                                    }
                                }

                            }
                        }

                    }

										 /*else if (MailConstantsVO.CDT_TYP_CONFIRM.equalsIgnoreCase(carditVO.getCarditType())) {
											 if (MailConstantsVO.CDT_TYP_CANCEL.equalsIgnoreCase(cardit.getCarditType())) {
												populateCarditReceptacleHistory(carditVO,MailConstantsVO.CARDIT_STATUS_CONFIRMATION);
											} */
                } else {
										cardit.setCarditType("N");
										cardit.update(carditVO);
										//Start 102975
                    populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_CARDIT_V20_V11);
										//End 102975
									}

                log.log(Log.FINE, "cardit -- carditVO **********" + carditVO);


								} catch (FinderException exception) {

                if (carditVO.getCarditType() != null && MailConstantsVO.CDT_TYP_CANCEL.equals(carditVO.getCarditType())) {
										log.log(Log.FINE, "CHECK ---->>> \n\t\tCancel cardit uploading method not correct !!!!! +carditVO");

										/*The Cancelaltion CARDIT may not bear the
										mailbag information, so in this case alone we may not be able to populate the
										CARDIT history as we dont have any mailbag details. But we do process this
										message and populate in MTKCDTMST and the CDTTYP will be "1"(ie, Cancelled
										type).*/

										throw new MailTrackingBusinessException(MailConstantsVO.MAILBAG_CSG_DOESNOT_EXIST);//IASCB-30551
										//new Cardit(carditVO);
                } else {
										log.log(Log.FINE, "persisting cardit ");
                    int initialCount = carditVO.getReceptacleInformation().size();
									Collection<CarditReceptacleVO> receptacleVOsBeforeRemove = new ArrayList(carditVO.getReceptacleInformation());
									
									
										new Cardit(carditVO);
										log.log(Log.FINE, " isAutoProcessEnabled : "
												+ isAutoProcessEnabled);
									int countAfterRemoval = carditVO.getReceptacleInformation().size();
                   //Commented for ICRD-33005
									/* if (initialCount != countAfterRemoval) {
										//throw new MailTrackingBusinessException(MailConstantsVO.MAILBAG_ACTIVE_UNDER_ANOTHERCONSIGNMENT);
										Object[] errArr=new Cardit().findDuplicateCarditReceptacle(receptacleVOsBeforeRemove,carditVO.getCompanyCode());//ICRD-346447
										throw new MailTrackingBusinessException(MailConstantsVO.MAILBAG_ACTIVE_UNDER_ANOTHERCONSIGNMENT,errArr);
									}*/



										if (isAutoProcessEnabled) {
                        if (carditVO.getReceptacleInformation() != null && carditVO.getReceptacleInformation().size() > 0) {
                            try {
                                consignmentDocumentVO = createConsignmentDocVO(carditVO);
                            } catch (SystemException sysExp) {
                                if ("shared.airline.invalidairline".equals(((ArrayList<ErrorVO>) sysExp.getErrors()).get(0).getErrorCode())) {
														throw new MailTrackingBusinessException(MailTrackingBusinessException.
																returnErrorMapping(MailHHTBusniessException.INVALID_CARRIERCODE_EXCEPTION));
                                } else  if ("mailtracking.defaults.mailinbound.msg.err.uldincompatileforaircrafttype".equals(((ArrayList<ErrorVO>) sysExp.getErrors()).get(0).getErrorCode())) {
                                	throw new MailTrackingBusinessException("mailtracking.defaults.mailinbound.msg.err.uldincompatileforaircrafttype");
            }

                                else {
                                    throw new SystemException(((ArrayList<ErrorVO>) sysExp.getErrors()).get(0).getErrorCode(), sysExp);
													}
												}
												try {
													new DocumentController()
													.saveConsignmentDocument(consignmentDocumentVO);
												} catch (MailbagAlreadyAcceptedException ex) {
													// do nothing
												} catch (InvalidMailTagFormatException invalidMailTagFormatException) {
													// do nothing
                            } catch (DuplicateDSNException duplicateDSNException) {
                                //do nothing
                            }
                        } else {
                            log.log(Log.FINE, "NOT SAVING CONSIGNMENT DETAILS AS NO RECEPTACLE VO IS NULL " + carditVO);
                        }
                    }
                    /*
                     * The below method is added by Manish to update
                     * recepticleVO with mailseqnum
                     */
                    if (consignmentDocumentVO != null && carditVO != null) {
                        updateRecpVOwithMalSeq(consignmentDocumentVO, carditVO);
											}
										if (carditVO.getCarditType() != null && carditVO.getCarditType().trim().length() > 0) {
											if (MailConstantsVO.CDT_TYP_ORIGINAL.equalsIgnoreCase(carditVO.getCarditType())) {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_ORIGINAL);
                        } else if (MailConstantsVO.CDT_TYP_UPDATE.equalsIgnoreCase(carditVO.getCarditType())) {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_UPDATE);
                        } else if (MailConstantsVO.CDT_TYP_FINAL.equalsIgnoreCase(carditVO.getCarditType())) {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_FINAL);
                        } else if (MailConstantsVO.CDT_TYP_CORRECTION.equalsIgnoreCase(carditVO.getCarditType())) {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_CORRECTION_ADDED);
                        } else if (MailConstantsVO.CDT_TYP_CONFIRM.equalsIgnoreCase(carditVO.getCarditType())) {
                            populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_CONFIRMATION);

                        }
                    } else {
											//Added for 102975
                        populateCarditReceptacleHistory(carditVO, MailConstantsVO.CARDIT_STATUS_CARDIT_V20_V11);
										}

									}
								}
								errors =savePAWBDetailsFromCardit(carditVO,consignmentDocumentVO,existingMailBagsInConsignment);
							}
							log.exiting(CLASS, "saveCarditMessages");
							return errors;
							}

						/**
						 * A-3429
						 *
						 * @param masterVO
						 * @throws SystemException
						 */
    public void populateCarditReceptacleHistory(CarditVO carditVO, String status)
								throws SystemException {
							log.entering(CLASS, "populateCarditReceptacleHistory");
							if (carditVO.getReceptacleInformation() != null
									&& carditVO.getReceptacleInformation().size() > 0) {
								for (CarditReceptacleVO carditReceptacleVO : carditVO
										.getReceptacleInformation()) {
									if (carditReceptacleVO.getReceptacleStatus() == null
                        || (carditReceptacleVO.getReceptacleStatus() != null && carditReceptacleVO.getReceptacleStatus().trim()
													.length() <= 0)) {
										carditReceptacleVO.setReceptacleStatus(status);
									}
									carditReceptacleVO.setUpdatedTime(new LocalDate(LocalDate.NO_STATION, Location.NONE, true));
									new CarditReceptacleHistory(carditVO, carditReceptacleVO);
								}
								//Added as part of IASCB-36803 starts
								MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
								if (!(MailConstantsVO.CDT_TYP_CANCEL.equalsIgnoreCase(carditVO.getCarditType()))) {
									mailController.insertOrUpdateHistoryDetailsForCardit(carditVO);
									mailController.insertOrUpdateAuditDetailsForCardit(carditVO);
								} else {
									mailController.auditCarditCancellation(carditVO, MailbagAuditVO.MAILBAG_DELETED);
								}
								//Added as part of IASCB-36803 ends
							}
							}

						/**
						 * @param carditVO
						 * @return
						 * @throws SystemException
						 */
						public ConsignmentDocumentVO createConsignmentDocVO(CarditVO carditVO) throws SystemException {


							ConsignmentDocumentVO consignmentDocumentVO = new ConsignmentDocumentVO();
							Page<MailInConsignmentVO> mailInConsignmentPageVOs = new Page<MailInConsignmentVO>(
                new ArrayList<MailInConsignmentVO>(), 0, 0, 0, 0, 0, false);
							String serviceLevel = null;
        final String comma = ",";
							String companyCode = getLogonAttributes().getCompanyCode();
							Map<String, Collection<OneTimeVO>> oneTimeValues = null;
        boolean paCodeExists = false;
        List<String> uspsPaCodeList = new ArrayList<>();
        String syspar = null;
        String originExchangeOffice = null;

							consignmentDocumentVO.setCompanyCode(carditVO.getCompanyCode());
							consignmentDocumentVO.setConsignmentNumber(carditVO
									.getConsignmentNumber());
							consignmentDocumentVO.setPaCode(carditVO.getSenderId());
							 Collection<CarditTotalVO> totals = carditVO.getTotalsInformation();
							if (carditVO.getConsignmentDate() == null) {
								consignmentDocumentVO.setConsignmentDate(new LocalDate(
										LocalDate.NO_STATION, Location.NONE, true));
							} else {
								consignmentDocumentVO.setConsignmentDate(carditVO
										.getConsignmentDate());
							}
        Collection<MailInConsignmentVO> maildetailsFromCardit = collectMailDetailsFromCardit(carditVO);


								syspar = findSystemParameterValue(USPS_INTERNATIONAL_PA);

        if (syspar != null && syspar.length() > 0) {
									String[] sysparList = syspar.split(comma);
            if (sysparList.length > 0) {
										uspsPaCodeList = Arrays.asList(sysparList);
									}
								}

        if (!carditVO.getReceptacleInformation().isEmpty()) {
            originExchangeOffice = ((ArrayList<CarditReceptacleVO>) carditVO.getReceptacleInformation()).get(0).getOriginExchangeOffice();
								}

							String paCode = findPAForOfficeOfExchange(companyCode, originExchangeOffice);

							if(!(null==(consignmentDocumentVO.getPaCode()))){
        if (uspsPaCodeList.contains(consignmentDocumentVO.getPaCode())) {
									paCodeExists = true;
								}}
							else
							{
								 if (uspsPaCodeList.contains(paCode)) {
										paCodeExists = true;
									}
							}

        for (MailInConsignmentVO mailInConsignmentVO : maildetailsFromCardit) {

								//Added as part of ICRD-212235 starts
            if (paCodeExists) {

									MailbagVO mailBagVO = new MailbagVO();
									mailBagVO.setCompanyCode(carditVO.getCompanyCode());
									mailBagVO.setMailCategoryCode(mailInConsignmentVO.getMailCategoryCode());
									mailBagVO.setMailClass(mailInConsignmentVO.getMailClass());
									mailBagVO.setMailSubclass(mailInConsignmentVO.getMailSubclass());
									mailBagVO.setPaCode(mailInConsignmentVO.getPaCode());

                if (serviceLevel == null) {
										serviceLevel = findMailServiceLevel(mailBagVO);
                } else {
										serviceLevel.concat(",").concat(findMailServiceLevel(mailBagVO));
									}
								}
								//Added as part of ICRD-212235 ends
            mailInConsignmentVO.setMailSource(MailConstantsVO.CARDIT_PROCESS);
            //Added by A-7929 as part of IASCB-28260 starts
            if(carditVO.getReferenceInformation() != null && !carditVO.getReferenceInformation().isEmpty()){
    			ArrayList<CarditReferenceInformationVO> referenceVO = (ArrayList<CarditReferenceInformationVO>) carditVO.getReferenceInformation() ;
				if (referenceVO != null && referenceVO.size() > 0) {
					CarditReferenceInformationVO vo = referenceVO.get(0);
					mailInConsignmentVO.setContractIDNumber(vo != null ? vo.getConsignmentContractReferenceNumber() : null);
					if(mailInConsignmentVO.getMailDestination()==null || mailInConsignmentVO.getMailDestination().isEmpty()){
						updateAirportDetails(mailInConsignmentVO,referenceVO,"AWN");
					}
					if(mailInConsignmentVO.getMailOrigin()==null || mailInConsignmentVO.getMailOrigin().isEmpty()){
						updateAirportDetails(mailInConsignmentVO,referenceVO,"ERN");
					}
				}

    		}

          





//Added by A-7929 as part of IASCB-28260 ends
								mailInConsignmentPageVOs.add(mailInConsignmentVO);
							}
							//Added as part of ICRD-212235 starts

        if (paCodeExists && serviceLevel != null && (serviceLevel.contains("MD") || serviceLevel.contains("MP")
                || serviceLevel.contains("ME"))) {
									consignmentDocumentVO
									.setType(MailConstantsVO.CONSIGNMENT_TYPE_AV7);
        } else {
							//Added as part of ICRD-212235 ends

							if (MailConstantsVO.CN38_CATEGORY.equals(carditVO.getMailCategoryCode())) {

								consignmentDocumentVO
								.setType(MailConstantsVO.CONSIGNMENT_TYPE_CN38);
							} else if (MailConstantsVO.CN41_CATEGORY.equals(carditVO.getMailCategoryCode())
									) {
								consignmentDocumentVO
								.setType(MailConstantsVO.CONSIGNMENT_TYPE_CN41);
							}
							//Added as part of ICRD-103713 by A-5526 starts
							else if (MailConstantsVO.CN37_CATEGORY_C.equals(carditVO.getMailCategoryCode())
									  || MailConstantsVO.CN37_CATEGORY_D.equals(carditVO.getMailCategoryCode())
											) {
								consignmentDocumentVO
								.setType(MailConstantsVO.CONSIGNMENT_TYPE_CN37);
							}
							//Added as part of ICRD-103713 by A-5526 ends
            if (totals != null && !totals.isEmpty()) {
                CarditTotalVO carditTotalVO = totals.iterator().next();
                if ("T".equals(carditTotalVO.getMailClassCode())) {
		consignmentDocumentVO
		.setType(MailConstantsVO.CONSIGNMENT_TYPE_CN47);
	}
}
							}

        					String mailOriginFromResdit = carditVO.getReceptacleInformation().iterator().next().getMailOrigin();
							consignmentDocumentVO.setAirportCode((carditVO.getReceptacleInformation()!=null&&!carditVO.getReceptacleInformation().isEmpty() && mailOriginFromResdit != null && mailOriginFromResdit.length() <= 3)
									?carditVO.getReceptacleInformation().iterator().next().getMailOrigin():getLogonAirport());
                            if(consignmentDocumentVO.getAirportCode()==null||consignmentDocumentVO.getAirportCode().trim().isEmpty()){
                                if(consignmentDocumentVO.getRoutingInConsignmentVOs()!=null&&consignmentDocumentVO.getRoutingInConsignmentVOs().size()>0){
                                    consignmentDocumentVO.setAirportCode(consignmentDocumentVO.getRoutingInConsignmentVOs().iterator().next().getPol());
                                }else {
                                    consignmentDocumentVO.setAirportCode(getLogonAirport());
                                }
                            }
							consignmentDocumentVO.setOperation(MailConstantsVO.OPERATION_OUTBOUND);
							consignmentDocumentVO.setLastUpdateUser(carditVO.getLastUpdateUser());


							consignmentDocumentVO
							.setMailInConsignmentVOs(mailInConsignmentPageVOs);
							consignmentDocumentVO
							.setRoutingInConsignmentVOs(collectRoutingInfo(carditVO));
							consignmentDocumentVO
							.setOperationFlag(ConsignmentDocumentVO.OPERATION_FLAG_INSERT);
							/*
							 * Added By Karthick V to set the flag so that if a Mail Bag becomes
							 * invalid in Validate Mail Bags they will still be Processed with
							 * Warnings instead of Error Message Being thrown.. Since they are the
							 * Cardit Mails
							 *
							 */
                            consignmentDocumentVO.setSecurityStatusCode(carditVO.getSecurityStatusCode());
                            consignmentDocumentVO.setSecurityStatusParty(carditVO.getSecurityStatusParty());
                            consignmentDocumentVO.setSecurityStatusDate(carditVO.getSecurityStatusDate());
                            consignmentDocumentVO.setApplicableRegTransportDirection(carditVO.getApplicableRegTransportDirection());
                            consignmentDocumentVO.setApplicableRegBorderAgencyAuthority(carditVO.getApplicableRegBorderAgencyAuthority());
                            consignmentDocumentVO.setApplicableRegReferenceID(carditVO.getApplicableRegReferenceID());
                            consignmentDocumentVO.setAdditionalSecurityInfo(carditVO.getAdditionalSecurityInfo());
                            consignmentDocumentVO.setConsignementScreeningVOs(carditVO.getConsignementScreeningVOs());
                            consignmentDocumentVO.setApplicableRegFlag(carditVO.getApplicableRegFlag());

							consignmentDocumentVO.setScanned(true);
							consignmentDocumentVO.setConsignmentIssuerName(carditVO.getConsignmentIssuerName());
							//Added as part of CRQ ICRD-103713 by A-5526 starts
							saveConsignmentDetails(consignmentDocumentVO);
							//Added as part of CRQ ICRD-103713 by A-5526 ends
							// carditVO.getReceptacleInformation();
							carditVO.getTransportInformation();
							if(carditVO.getCarditPawbDetailsVO()!=null) {
							consignmentDocumentVO.setShipmentPrefix(carditVO.getCarditPawbDetailsVO().getShipmentPrefix());
							consignmentDocumentVO.setMasterDocumentNumber(carditVO.getCarditPawbDetailsVO().getMasterDocumentNumber());
							consignmentDocumentVO.setShipperUpuCode(carditVO.getCarditPawbDetailsVO().getShipperCode());
							consignmentDocumentVO.setConsigneeUpuCode(carditVO.getCarditPawbDetailsVO().getConsigneeCode());
							consignmentDocumentVO.setOriginUpuCode(carditVO.getCarditPawbDetailsVO().getConsignmentOrigin());
							consignmentDocumentVO.setDestinationUpuCode(carditVO.getCarditPawbDetailsVO().getConsignmentDestination());
							}
							return consignmentDocumentVO;
							}

						//Added by A-5945 for ICRD-135116
    public void updateReceptacleDetailsForCancellation(Cardit cardit, CarditVO carditVO) throws SystemException {
							log.entering(CLASS, "updateReceptacleDetailsForCancellation");
						Collection<CarditReceptacle> carditReceptacleDetails = cardit.getReceptacleInformation();
        if (carditReceptacleDetails != null && carditReceptacleDetails.size() > 0) {
            for (CarditReceptacle carditReceptacle : carditReceptacleDetails) {
									carditReceptacle.setCarditType(carditVO.getCarditType());
									}
							}
							log.exiting(CLASS, "updateReceptacleDetailsForCancellation");
						}
/**
 *
 * 	Method		:	MailController.updateReceptacleDetailsForCancellationDOM
 *	Added by 	:	A-8061 on 16-Mar-2020
 * 	Used for 	:	IASCB-42209
 *	Parameters	:	@param cardit
 *	Parameters	:	@param carditVO
 *	Parameters	:	@throws SystemException
 *	Return type	: 	void
 */
    public void updateReceptacleDetailsForCancellationDOM(Cardit cardit, CarditVO carditVO) throws SystemException {
        log.entering(CLASS, "updateReceptacleDetailsForCancellationDOM");
        Collection<CarditReceptacle> carditReceptacleDetails = cardit.getReceptacleInformation();
        Collection<CarditReceptacleVO> carditReceptacleVOs = carditVO.getReceptacleInformation();
        if (carditReceptacleDetails != null && carditReceptacleVOs != null) {
          Map<String, String> recMap = carditReceptacleVOs.stream().collect(Collectors.toMap(CarditReceptacleVO::getReceptacleId, CarditReceptacleVO::getCarditType));
          carditReceptacleDetails.forEach(rec -> {
                if (recMap.containsKey(rec.getCarditReceptaclePK().getReceptacleId()))
                  rec.setCarditType(recMap.get(rec.getCarditReceptaclePK().getReceptacleId()));
              });
        }
        log.exiting(CLASS, "updateReceptacleDetailsForCancellationDOM");
      }

						private void updateCarditSender(CarditVO carditVO) throws SystemException {
							log.entering(CLASS, "updateCarditSender");

        if (carditVO.getSenderId() != null && carditVO.getSenderId().trim().length() > 0) {
            log.log(Log.FINE, "\n\n\n\tCARDIT SENDER ID EXIST");
            Collection<CarditReceptacleVO> carditReceptacles = (Collection<com.ibsplc.icargo.business.mail.operations.vo.CarditReceptacleVO>) carditVO.getReceptacleInformation();
								if (carditReceptacles != null && carditReceptacles.size() > 0) {
									for (CarditReceptacleVO receptacleVO : carditReceptacles) {
										String originOE = receptacleVO.getOriginExchangeOffice();
                    if (originOE != null && originOE.trim().length() > 0) {
								//Added for bug ICRD-158989 by A_5526 starts
								/**
								 * Modified code by A-4809 as discussed
								 * Sender ID should contain the PA of OOE and Actual SenderID should contain the UPUCode
								 * Mapping of UPU code with OOE is not a mandatory mapping
								 * Currently with the code if OOE and UPU are not mapped,sender ID stamped will be UPU code
								 * MALMST PACOD will be UPU code and PA code Mapping in MRA will be wrong
								 * This causes issue in Resdit Sending and MCA listing and approval.
								 *
								 */
                    	//IASCB-45685 beg
                    	String paCode=null;

                            try {
							MailBoxId mailBoxId = MailBoxId.find(carditVO.getCompanyCode(), carditVO.getActualSenderId());
								if("ACTIVE".equals(mailBoxId.getMailboxStatus()) &&  "PA".equals(mailBoxId.getMailboxOwner())){
									paCode=mailBoxId.getOwnerCode();
                            	}
		                    }catch(FinderException finderException){
	                                log.log(Log.FINE, "Exception finding Mailbox ID as PA");
							}

                            if (paCode == null) {

	                    	if(carditVO.getActualSenderId()!=null){
	                    		paCode = findPAForMailboxID(carditVO.getCompanyCode(), carditVO.getActualSenderId(), originOE);
	                    	}
	                    	if(paCode==null){
								paCode = findPAForOfficeOfExchange(carditVO.getCompanyCode(), originOE);
	                    	}
	                    }

	                     if (paCode != null) {
							carditVO.setSenderId(paCode);
							break;
	                      }
	                  //IASCB-45685 end
										} else {
											// if mailbag invalid, incase
                        log.log(Log.FINE, "\n\n\n\t mailbag invalid");
											continue;
										}
									}
							   }
        } else {
            log.log(Log.FINE, "\n\n\n\tCARDIT SENDER ID is null so setting from receptacle OE PA");

            Collection<CarditReceptacleVO> carditReceptacles = (Collection<com.ibsplc.icargo.business.mail.operations.vo.CarditReceptacleVO>) carditVO.getReceptacleInformation();
								if (carditReceptacles != null && carditReceptacles.size() > 0) {
									for (CarditReceptacleVO receptacleVO : carditReceptacles) {
										String originOE = receptacleVO.getOriginExchangeOffice();
										if (originOE != null) {
												String paCode = findPAForOfficeOfExchange(carditVO.getCompanyCode(), originOE);
										    	carditVO.setSenderId(paCode);
										    	if(carditVO.getActualSenderId()==null  || carditVO.getActualSenderId().trim().length()<1){
										    	carditVO.setActualSenderId(paCode);
										    	}
											break;
										} else {
											// if mailbag invalid, incase
											continue;
										}
									}
							   }
							}
        log.log(Log.FINE, "\n\n\n\t Final SENDER ID :: " + carditVO.getSenderId());
							 /*if (carditVO.getActualSenderId() == null
									 || carditVO.getActualSenderId().trim().length() <= 0) {
								 carditVO.setActualSenderId(carditVO.getSenderId());
								 log.log(Log.SEVERE, "\n\n\n\t ActualSenderId resetting:" + carditVO.getActualSenderId());
							 }*/

								// 	for getting last digit of year
								LocalDate currDate = new LocalDate(carditVO.getStationCode(), Location.ARP, false);

								/*
								 * EDITING START 02/01/08 ADDED BY RENO FOR APPENDING THE
								 * LAST DIGIT OF YEAR DEPENDING ON THE CONSIGNMENT DATE.
								 */
								String year;
								if (carditVO.getConsignmentDate() != null) {
									year = carditVO.getConsignmentDate().toDisplayFormat(
											LST_DGT_OF_YEAR_FMT).substring(1, 2);
								} else {
									year = currDate.toDisplayFormat(LST_DGT_OF_YEAR_FMT)
									.substring(1, 2);
								}
								// EDITING END 02/01/08

								// setcarditkey
								StringBuilder carditKey = new StringBuilder().append(
										carditVO.getSenderId()).append(
												carditVO.getConsignmentNumber()).append(year);
								carditVO.setCarditKey(carditKey.toString());

        if (carditVO.getConsignmentNumber() == null) {
            log.log(Log.SEVERE, "\n\n\n\tConsignmentNumber null for carditVO.getMessageRefNum():: " + carditVO.getMessageRefNum());
            log.log(Log.SEVERE, "\n\n\n\tConsignmentNumber null for carditVO :: " + carditVO);
									//throw new MailTrackingBusinessException ("msgbroker.message.consignmentdocnumisnull",new Object[]{"msgbroker.message.consignmentdocnumisnull"});
								}

        log.log(Log.FINE, "\n\n\n\t CARDIT KEY Constructed :: " + carditVO.getCarditKey());
        log.exiting(CLASS, "updateCarditSender");
    }

						/**
						 * @param ediInterchangeVO
						 * @param carditVO
						 * @return
						 */
						private CarditPK constructCarditPK(com.ibsplc.icargo.business.mail.operations.vo.EDIInterchangeVO ediInterchangeVO,
								CarditVO carditVO) {
							CarditPK carditPK = new CarditPK();
							carditPK.setCarditKey(carditVO.getCarditKey());
							carditPK.setCompanyCode(ediInterchangeVO.getCompanyCode());
							return carditPK;
						}

						/**
						 * 	Method		:	MailController.saveConsignmentDetails
						 *	Added by 	:	A-5526 on 24 Jun, 2016 for CRQ-ICRD-103713
						 * 	Used for 	:	saveConsignmentDetails
						 *	Parameters	:	@param consignmentDocumentVO
						 *	Parameters	:	@throws SystemException
						 *	Return type	: 	void
						 */
    public void saveConsignmentDetails(ConsignmentDocumentVO consignmentDocumentVO)
								throws SystemException {

        if (consignmentDocumentVO.getMailInConsignmentVOs() != null && !consignmentDocumentVO.getMailInConsignmentVOs().isEmpty()) {
            MailInConsignmentVO mailInConsignmentVO = consignmentDocumentVO.getMailInConsignmentVOs().iterator().next();
            consignmentDocumentVO.setOperatorOrigin(findUpuCodeName(mailInConsignmentVO.getCompanyCode(), mailInConsignmentVO.getPaCode()));
            consignmentDocumentVO.setOperatorDestination(findUpuCodeName(mailInConsignmentVO.getCompanyCode(), findPAForOfficeOfExchange(
                    mailInConsignmentVO.getCompanyCode(), mailInConsignmentVO.getDestinationExchangeOffice())));

								consignmentDocumentVO.setOoeDescription(findOfficeOfExchangeDescription(mailInConsignmentVO.getCompanyCode(), mailInConsignmentVO.getOriginExchangeOffice()));
								consignmentDocumentVO.setDoeDescription(findOfficeOfExchangeDescription(mailInConsignmentVO.getCompanyCode(), mailInConsignmentVO.getDestinationExchangeOffice()));

            if (MailConstantsVO.MAIL_CATEGORY_AIR.equals(mailInConsignmentVO.getMailCategoryCode()) || MailConstantsVO.CN37_CATEGORY_D.equals(mailInConsignmentVO.getMailCategoryCode())) {
									consignmentDocumentVO.setConsignmentPriority(MailConstantsVO.FLAG_YES);
            } else {
                consignmentDocumentVO.setConsignmentPriority(MailConstantsVO.FLAG_NO);
            }

            if (MailConstantsVO.CONSIGNMENT_TYPE_CN38.equals(consignmentDocumentVO.getType())) {
                consignmentDocumentVO.setConsignmentPriority(MailConstantsVO.FLAG_YES);
            } else if (MailConstantsVO.CONSIGNMENT_TYPE_CN41.equals(consignmentDocumentVO.getType())) {
                consignmentDocumentVO.setConsignmentPriority(MailConstantsVO.FLAG_NO);
            }
            //Added by A-8893 for IASCB-59296 starts
            //Modified by A-8176 forIASCB-118590 starts
            MailbagVO mailbagVO = new MailbagVO();
            if(mailInConsignmentVO.getMailOrigin() ==null || mailInConsignmentVO.getMailDestination()==null) {
             mailbagVO.setCompanyCode(mailInConsignmentVO.getCompanyCode());
             mailbagVO.setOoe( mailInConsignmentVO.getOriginExchangeOffice());
             mailbagVO.setDoe(mailInConsignmentVO.getDestinationExchangeOffice());
             constructOriginDestinationDetails(mailbagVO);
            }
            //Added by A-8893 for IASCB-59296 starts
            if(mailInConsignmentVO.getMailOrigin()!=null) {
            consignmentDocumentVO.setOrgin(mailInConsignmentVO.getMailOrigin());
            }
            else {
            	 consignmentDocumentVO.setOrgin(mailbagVO.getOrigin());
            }
            if(mailInConsignmentVO.getMailDestination()!=null) {
            consignmentDocumentVO.setDestination(mailInConsignmentVO.getMailDestination());
            }else {
            	consignmentDocumentVO.setDestination(mailbagVO.getDestination());
            }
            //Added by A-8893 for IASCB-59296 ends
           //Modified by A-8176 forIASCB-118590 ends
            
        }

        if (consignmentDocumentVO.getRoutingInConsignmentVOs() != null && !consignmentDocumentVO.getRoutingInConsignmentVOs().isEmpty()) {
            RoutingInConsignmentVO routingInConsignmentVO = consignmentDocumentVO.getRoutingInConsignmentVOs().iterator().next();
								FlightFilterVO flightFilterVO = new FlightFilterVO();
								flightFilterVO.setCompanyCode(routingInConsignmentVO.getCompanyCode());
            if (routingInConsignmentVO.getOnwardCarrierId() != 0) {
								flightFilterVO.setFlightCarrierId(routingInConsignmentVO.getOnwardCarrierId());
            } else {
            	AirlineValidationVO airlineValidationVO = null;
				if (routingInConsignmentVO.getOnwardCarrierCode() != null
						&& routingInConsignmentVO.getOnwardCarrierCode().trim().length() > 0) {
					try {
						airlineValidationVO = new SharedAirlineProxy().validateAlphaCode(
								consignmentDocumentVO.getCompanyCode(), routingInConsignmentVO.getOnwardCarrierCode());
					} catch (SharedProxyException sharedProxyException) {
						log.log(Log.FINE, "Shared Exception ",sharedProxyException);
						airlineValidationVO=null;
					}
				}    
				flightFilterVO.setFlightCarrierId(
						airlineValidationVO != null && airlineValidationVO.getAirlineIdentifier() > 0
								? airlineValidationVO.getAirlineIdentifier() : 0);
					routingInConsignmentVO.setOnwardCarrierId(flightFilterVO.getFlightCarrierId());
								}
								flightFilterVO.setFlightNumber(routingInConsignmentVO.getOnwardFlightNumber());
								flightFilterVO.setFlightDate(routingInConsignmentVO.getOnwardFlightDate());
								flightFilterVO.setDirection(FlightFilterVO.OUTBOUND);
								flightFilterVO.setStation(routingInConsignmentVO.getPol());
								  if (flightFilterVO.getFlightCarrierId()>0 && flightFilterVO.getFlightDate() != null && flightFilterVO.getFlightNumber() != null) {
                Collection<FlightValidationVO> flightValidationVOs = validateFlight(flightFilterVO);
                if (flightValidationVOs != null && !flightValidationVOs.isEmpty()) {
                    FlightValidationVO flightValidationVO = flightValidationVOs.iterator().next();

									consignmentDocumentVO.setTransportationMeans(flightValidationVO.getFlightType());
									consignmentDocumentVO.setFirstFlightDepartureDate(flightValidationVO.getDepartureDateAtFirstLeg());
									consignmentDocumentVO.setFlightDetails(new StringBuilder().append(flightValidationVO.getCarrierCode()).append("-").append(flightValidationVO.getFlightNumber()).toString());

								}
            }
String polAirport = findAirportDescription(routingInConsignmentVO.getCompanyCode(), routingInConsignmentVO.getPol());
            String pouAirport = findAirportDescription(routingInConsignmentVO.getCompanyCode(), routingInConsignmentVO.getPou());

            if (polAirport != null && pouAirport != null) {
									consignmentDocumentVO.setFlightRoute(new StringBuilder().append(polAirport).append("-").append(pouAirport).toString());
								}


							}
								LogonAttributes logonVO = ContextUtils.getSecurityContext().getLogonAttributesVO();

								consignmentDocumentVO.setAirlineCode(logonVO.getOwnAirlineCode());
								PostalAdministrationVO postalAdministration = null;
									postalAdministration = findPACode(consignmentDocumentVO.getCompanyCode(), consignmentDocumentVO.getPaCode());
								if(postalAdministration!=null){
								consignmentDocumentVO.setPaName(postalAdministration.getPaName());
									}
						}

						

/**
						 * Added for bug ICRD-158989 by A_5526 starts
						 * Method to find pacode for mailbox id
     *
						 * @param companyCode
						 * @param mailboxId
						 * @return
						 * @throws SystemException
						 */
    private String findPAForMailboxID(String companyCode, String mailboxId, String originOE) throws SystemException {
    	                   CacheFactory factory = CacheFactory.getInstance();
		                    OfficeOfExchangeCache cache = factory
			                .getCache(OfficeOfExchangeCache.ENTITY_NAME);   
		                    return cache.findPAForMailboxID(companyCode,mailboxId,originOE);
							}

							/**
							 * 	Method		:	MailController.findUpuCodeName
							 *	Added by 	:	A-5526 on 24 Jun, 2016 for CRQ-ICRD-103713
							 * 	Used for 	:	findUpuCodeName
							 *	Parameters	:	@param companyCode,paCode
							 *	Parameters	:	@throws SystemException
							 *	Return type	: 	String
							 */
							public String findUpuCodeName(String companyCode, String paCode) throws SystemException {
        String upuCodeName = null;
        if (paCode != null) {
            upuCodeName = PostalAdministration.findUpuCodeNameForPA(companyCode, paCode);
								}
        if (upuCodeName != null) {
									return upuCodeName;
        } else {
								return null;
								}

							}

							/**
							 * 	Method		:	MailController.findAirportDescription
							 *	Added by 	:	A-5526 on 24 Jun, 2016 for CRQ-ICRD-103713
							 * 	Used for 	:	findAirportDescription
							 *	Parameters	:	@param companyCode,airportCode
							 *	Parameters	:	@throws SystemException
							 *	Return type	: 	String
							 */
							public String findAirportDescription(String companyCode, String airportCode) throws SystemException {
								AirportValidationVO airportValidationVO = new AirportValidationVO();
								airportValidationVO = Proxy.getInstance().get(SharedAreaProxy.class).validateAirportCode(
										companyCode,
										airportCode);
        if (airportValidationVO != null) {
									return airportValidationVO.getAirportName();
        } else {
									return null;
								}

							}

							/**
							 * 	Method		:	MailController.findOfficeOfExchangeDescription
							 *	Added by 	:	A-5526 on 24 Jun, 2016 for CRQ-ICRD-103713
							 * 	Used for 	:	findOfficeOfExchangeDescription
							 *	Parameters	:	@param companyCode,exchangeCode
							 *	Parameters	:	@throws SystemException
							 *	Return type	: 	String
							 */
							private String findOfficeOfExchangeDescription(String companyCode,
									String exchangeCode) throws  SystemException {
        OfficeOfExchange officeOfExchange = null;
        if (exchangeCode != null) {
									try {
                officeOfExchange = OfficeOfExchange.find(companyCode, exchangeCode);
									} catch (FinderException e) {
                officeOfExchange = null;
            }
        }
        if (officeOfExchange != null) {
									return officeOfExchange.getCodeDescription();
        } else {

								return null;
								}

							}

							/**
							 * @param carditVO
							 * @return
							 * @throws SystemException
							 */
							public Collection<MailInConsignmentVO> collectMailDetailsFromCardit(
									CarditVO carditVO) throws SystemException {
								// Method not changed as part of QF code migration ICRD-63167
								ArrayList<String> uldTypeCodes = new ArrayList<String>();
		                		ArrayList<String> uldNumberCodes = new ArrayList<String>();
        final String comma = ",";
								Collection<MailInConsignmentVO> mailInCondignmentVOs = null;
								MailInConsignmentVO mailInConsignmentVO = null;


								Collection<CarditReceptacleVO> receptacles = carditVO
										.getReceptacleInformation();
								Collection<CarditContainerVO> carditContainers = carditVO
										.getContainerInformation();
								/*
								 * ADDED FOR SAA SPECIFIC CARDIT CHANGE
								 */
								String consignmentFilter = findSystemParameterValue(MailConstantsVO.SYSPAR_CARDIT_CONSIGNMENT_FILTER);
								List<String> consignmentFilterList = null;
        if (consignmentFilter != null && consignmentFilter.length() > 0) {
									String[] consignmentFilters = consignmentFilter.split(comma);
            if (consignmentFilters.length > 0) {
										consignmentFilterList = Arrays.asList(consignmentFilters);
									}
								}

								//END
								if (receptacles != null && receptacles.size() > 0) {
									mailInCondignmentVOs = new ArrayList<MailInConsignmentVO>();

									for (CarditReceptacleVO receptacleVO : receptacles) {
                if ((consignmentFilterList == null) || (consignmentFilterList != null &&
												consignmentFilterList.size() > 0 &&
												(consignmentFilterList.contains(carditVO.getConsignmentNumber().substring(0, 5)) &&
												carditVO.getConsignmentNumber().substring(0, 5).equals(receptacleVO.getOriginExchangeOffice().substring(0, 5))) ||
                        !(consignmentFilterList.contains(carditVO.getConsignmentNumber().substring(0, 5))))) {
										MailInConsignmentVO assignedVO = null;
										mailInConsignmentVO = createMailInConsignmentVO(receptacleVO);
										mailInConsignmentVO.setConsignmentNumber(carditVO
												.getConsignmentNumber());
										mailInConsignmentVO.setCompanyCode(carditVO.getCompanyCode());
										mailInConsignmentVO.setPaCode(carditVO.getSenderId());
										// Added for ICRD-256684 starts
										checkForExistingMailbag(carditVO, mailInConsignmentVO, receptacleVO);
										// Added for ICRD-256684 ends
										/*
										 * For ANZ BUG : 44339
										 */
                    if (carditContainers != null && carditContainers.size() > 0) {
                        for (CarditContainerVO carditContainerVO : carditContainers) {
							if (carditContainerVO.getContainerNumber() != null && carditContainerVO.getContainerNumber()
									.trim()
									.length() > 0 /*
													 * && receptacleVO.
													 * getDespatchIdentification
													 * () != null &&
													 * receptacleVO.
													 * getDespatchIdentification
													 * ().trim().length() > 0
														*/) {
								if(carditContainerVO.getContainerJourneyIdentifier()!=null && carditContainerVO.getContainerJourneyIdentifier().equals(mailInConsignmentVO.getMailbagJrnIdr())){

													mailInConsignmentVO.setUldNumber(carditContainerVO.getContainerNumber());
								}

								mailInConsignmentVO.setSealNumber(carditContainerVO.getSealNumber());
								// Flight validation.
								if (CarditMessageVO.UNIT_LOAD_DEVICE
										.equals(carditContainerVO.getEquipmentQualifier())) {
									Collection<RoutingInConsignmentVO> routingInfoVos = collectRoutingInfo(carditVO);
									if (routingInfoVos != null && !routingInfoVos.isEmpty()) {
										for (RoutingInConsignmentVO routingInConsignmentVO : routingInfoVos) {
											FlightFilterVO flightFilterVO = new FlightFilterVO();
											//Added as part of IASCB-47544 starts
                                            AirlineValidationVO airlineVO = null;
                                            try {
                                                 airlineVO =findAirlineDescription(carditVO.getCompanyCode(),routingInConsignmentVO.getOnwardCarrierCode());
                                            } catch (SharedProxyException e) {
                                                log.log(Log.SEVERE, e.getMessage());
                                            }
                                            if(airlineVO!=null){
                                                flightFilterVO.setFlightCarrierId(airlineVO.getAirlineIdentifier());
                                            }
                                            //Added as part of IASCB-47544 ends
											flightFilterVO.setCompanyCode(carditVO.getCompanyCode());
											flightFilterVO
													.setCarrierCode(routingInConsignmentVO.getOnwardCarrierCode());
											flightFilterVO
													.setFlightNumber(routingInConsignmentVO.getOnwardFlightNumber());
											flightFilterVO.setStation(routingInConsignmentVO.getPol());
											flightFilterVO.setActiveAlone(false);
											flightFilterVO.setDirection("O");
											if (routingInConsignmentVO.getOnwardFlightDate() != null) {
												flightFilterVO.setStringFlightDate(routingInConsignmentVO
														.getOnwardFlightDate().toString().substring(0, 11));
												if (routingInConsignmentVO.getOnwardFlightDate() != null) {
													flightFilterVO.setFlightDate(
															routingInConsignmentVO.getOnwardFlightDate());
												}

											}

											Collection<FlightValidationVO> flightValidationVOs = validateFlight(
													flightFilterVO);
											FlightValidationVO flightValidationVO = new FlightValidationVO();
											if (flightValidationVOs!=null && flightValidationVOs.size() == 1) {
												log.log(Log.FINE, "flightValidationVOs has one VO");
												try {
													for (FlightValidationVO flightValidVO : flightValidationVOs) {
														BeanHelper.copyProperties(flightValidationVO, flightValidVO);
													}
												} catch (SystemException systemException) {
													systemException.getMessage();
												}

											}

										}
									}

								}
												}
											}
										}
										/*
										 * Finding Whether the mail is assigned to any other consignemt
										 */

											if (mailInConsignmentVO.getMailId() != null) {
												assignedVO = new DocumentController().findConsignmentDetailsForMailbag(
														mailInConsignmentVO.getCompanyCode(),
														mailInConsignmentVO.getMailId(), null);
											}

											//mailInConsignmentVO.setTransWindowEndTime(calculateTransportServiceWindowEndTime(mailInConsignmentVO, carditVO.getConsignmentDate()));
												mailInConsignmentVO.setTransWindowEndTime(receptacleVO.getHandoverTime());
										/*
										 * Mailbags which are assigned to any other Consignments
										 * wont be taken to the system again.
										 */
                    if (assignedVO == null) {
											mailInCondignmentVOs.add(mailInConsignmentVO);
                    } else if (assignedVO.getConsignmentNumber() != null &&
                            assignedVO.getConsignmentNumber().equalsIgnoreCase(carditVO.getConsignmentNumber()) &&
                            assignedVO.getPaCode().equalsIgnoreCase(carditVO.getSenderId())) {
											mailInCondignmentVOs.add(mailInConsignmentVO);
										}
                  //Added by A-7540 for ICRD-330056 starts
                    else if(assignedVO.getConsignmentNumber() != null &&
                    		!assignedVO.getConsignmentNumber().equalsIgnoreCase(carditVO.getConsignmentNumber())){

                    	assignedVO.setMailSequenceNumber(Mailbag.findMailBagSequenceNumberFromMailIdr(mailInConsignmentVO.getMailId(), mailInConsignmentVO.getCompanyCode()));

                    	MailInConsignment mailInConsignment = null;
                    	try {
							mailInConsignment = MailInConsignment.find(assignedVO);
						} catch (FinderException e)	{
							e.getMessage();
						}
						mailInConsignment.remove();
                    	mailInConsignmentVO.setConsignmentNumber(carditVO.getConsignmentNumber());
                    	mailInConsignmentVO.setConsignmentSequenceNumber(1);
                    	mailInConsignmentVO.setMailSequenceNumber(Mailbag.findMailBagSequenceNumberFromMailIdr(mailInConsignmentVO.getMailId(), mailInConsignmentVO.getCompanyCode()));
                    	mailInConsignmentVO.setCompanyCode(carditVO.getCompanyCode());
						mailInConsignmentVO.setPaCode(carditVO.getSenderId());
						mailInConsignmentVO.setOperation(MailConstantsVO.OPERATION_OUTBOUND);
                    	mailInCondignmentVOs.add(mailInConsignmentVO);
                    }
                  //Added by A-7540 for ICRD-330056 ends

									}
								}
								}
								return mailInCondignmentVOs;
							}

							/**
							 * @param carditVO
							 * @return
							 */
							private Collection<RoutingInConsignmentVO> collectRoutingInfo(
									CarditVO carditVO) {
								// Method changed as part of QF code migration ICRD-63167
								RoutingInConsignmentVO routingInConsignmentVO = null;
								Collection<RoutingInConsignmentVO> routingVOs = null;
								Collection<CarditTransportationVO> transportationVOs = carditVO
								.getTransportInformation();
								if (transportationVOs != null && transportationVOs.size() > 0) {
									routingVOs = new ArrayList<RoutingInConsignmentVO>();
									for (CarditTransportationVO transportationVO : transportationVOs) {

				if (transportationVO.getFlightNumber() != null) {
										routingInConsignmentVO = new RoutingInConsignmentVO();
										routingInConsignmentVO
										.setCompanyCode(carditVO.getCompanyCode());
										routingInConsignmentVO.setConsignmentNumber(carditVO
												.getConsignmentNumber());
										routingInConsignmentVO.setPaCode(carditVO.getSenderId());
										routingInConsignmentVO.setOnwardCarrierCode(transportationVO
												.getCarrierCode());
										routingInConsignmentVO.setOnwardCarrierId(transportationVO
												.getCarrierID());
										routingInConsignmentVO.setOnwardFlightDate(transportationVO
												.getDepartureTime());
										routingInConsignmentVO.setOnwardFlightNumber(transportationVO
												.getFlightNumber());
                routingInConsignmentVO.setOnwardCarrierSeqNum(transportationVO.getFlightSequenceNumber());
										routingInConsignmentVO.setPol(transportationVO
												.getDeparturePort());
										routingInConsignmentVO
										.setOperationFlag(RoutingInConsignmentVO.OPERATION_FLAG_INSERT);
										routingInConsignmentVO
										.setPou(transportationVO.getArrivalPort());
										//Added as part of IASCB-51146 by A-5526 starts
										routingInConsignmentVO.setScheduledArrivalDate(transportationVO.getArrivalDate());
										//Added as part of IASCB-51146 by A-5526 ends
										if(!MailConstantsVO.CARDITDOM.equalsIgnoreCase(carditVO.getMessageTypeId())){
										routingInConsignmentVO.setTransportStageQualifier(transportationVO.getTransportStageQualifier());
										}
										routingVOs.add(routingInConsignmentVO);
										}
									}
								}
								return routingVOs;
								}

							/**
							 * @param receptacleVO
							 * @return
							 */
							private MailInConsignmentVO createMailInConsignmentVO(
									CarditReceptacleVO receptacleVO) {
								MailInConsignmentVO mailInConsignmentVO = new MailInConsignmentVO();
								mailInConsignmentVO.setDsn(receptacleVO.getDespatchNumber());
								mailInConsignmentVO.setOriginExchangeOffice(receptacleVO
										.getOriginExchangeOffice());
								mailInConsignmentVO.setDestinationExchangeOffice(receptacleVO
										.getDestinationExchangeOffice());
								mailInConsignmentVO.setMailClass(receptacleVO.getMailSubClassCode()
										.substring(0, 1));
								mailInConsignmentVO.setMailSubclass(receptacleVO.getMailSubClassCode());
								mailInConsignmentVO.setMailCategoryCode(receptacleVO
										.getMailCategoryCode());
								mailInConsignmentVO.setYear(receptacleVO.getLastDigitOfYear());
								mailInConsignmentVO.setStatedBags(1);
								mailInConsignmentVO.setSealNumber(receptacleVO.getSealNumber());
								mailInConsignmentVO.setStatedWeight(receptacleVO.getReceptacleWeight());
								// mailInConsignmentVO.setUldNumber(receptacleVO.getUldNumber());
								mailInConsignmentVO.setReceptacleSerialNumber(receptacleVO
										.getReceptacleSerialNumber());
								mailInConsignmentVO.setMailId(receptacleVO.getReceptacleId());
								mailInConsignmentVO.setMailbagJrnIdr(receptacleVO.getDespatchIdentification());//added as part of IASCB-48353
								mailInConsignmentVO.setHighestNumberedReceptacle(receptacleVO
										.getHighestNumberReceptacleIndicator());
								mailInConsignmentVO.setRegisteredOrInsuredIndicator(receptacleVO
										.getRegdOrInsuredIndicator());
								mailInConsignmentVO.setReqDeliveryTime(receptacleVO
										.getReqDeliveryTime());
								mailInConsignmentVO
								.setOperationFlag(MailInConsignmentVO.OPERATION_FLAG_INSERT);
        String displayUnit = "";//added by A-7371 for ICRD-234919
        if (MailConstantsVO.MEASUREUNITQUALIFIER_POUND.equals(receptacleVO.getMeasureUnitQualifier())) {
            displayUnit = MailConstantsVO.WEIGHTCODE_POUND;

        } else if (MailConstantsVO.MEASUREUNITQUALIFIER_KILO.equals(receptacleVO.getMeasureUnitQualifier())) {
            displayUnit = MailConstantsVO.WEIGHTCODE_KILO;
			                      }
								mailInConsignmentVO.setDisplayUnit(displayUnit);
								//added for ICRD-255189
								if(receptacleVO.getMailOrigin()!=null && receptacleVO.getMailOrigin().length() <=3){
									mailInConsignmentVO.setMailOrigin(receptacleVO.getMailOrigin());
								}
								if(receptacleVO.getMailDestination()!=null &&receptacleVO.getMailDestination().length() <=3){
									mailInConsignmentVO.setMailDestination(receptacleVO.getMailDestination());
								}
								mailInConsignmentVO.setOperation(MailConstantsVO.OPERATION_OUTBOUND);
								return mailInConsignmentVO;
								}

							/**
							 * Invokes the EVT_RCR proc A-1739
							 *
							 * @param companyCode
							 * @throws SystemException
							 */
							public void invokeResditReceiver(String companyCode) throws SystemException {
								String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
        if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
									log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
								log.entering(CLASS, "invokeResditReceiver");
								new ResditController().invokeResditReceiver(companyCode);
								log.exiting(CLASS, "invokeResditReceiver");
							}
							}

							/**
							 * @param operationalFlightVO
							 * @param segments
							 * @return boolean
							 * @throws SystemException
     * @author A-5249
     * method: findMailbagsforFlightSegments
     * to change the assigned flight status to TBA if mailbag present
     * CR Id: ICRD-84046
							 */
						   public boolean findMailbagsforFlightSegments(OperationalFlightVO operationalFlightVO,
                                                 Collection<FlightSegmentVO> segments, String cancellation) throws SystemException {
        return Mailbag.findMailbagsforFlightSegments(operationalFlightVO, segments, cancellation);
								}

    /**
     * @param operationalFlightVOs
     * @throws SystemException
     * @author A-1936
							 */
							public void flagUpliftedResditForMailbags(
									Collection<OperationalFlightVO> operationalFlightVOs)
									throws SystemException {
								log.entering(CLASS, "flagUpliftedResditForMailbags");
								String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
        if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
									log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
								if (operationalFlightVOs != null) {
									for (OperationalFlightVO operationalFlightVO : operationalFlightVOs) {
										Collection<MailbagVO> mailBags = null;
										mailBags = MailAcceptance
												.findMailBagsForUpliftedResdit(operationalFlightVO);
										if (mailBags != null && mailBags.size() > 0) {
											for (MailbagVO mailbagVO : mailBags) {
												AirlineValidationVO airlineValidationVO = null;
										        if(mailbagVO.getCarrierCode()==null){
										    	    try{
										     	        	airlineValidationVO= new SharedAirlineProxy()
												     .findAirline(mailbagVO.getCompanyCode(), mailbagVO.getCarrierId());
										     	  }catch (SharedProxyException sharedProxyException) {
										     		sharedProxyException.getMessage();
												   } catch (SystemException ex) {
													ex.getMessage();
												   }
										    	    mailbagVO.setCarrierCode(airlineValidationVO.getAlphaCode());
										        }
												mailbagVO= constructOriginDestinationDetails(mailbagVO);
											}//added by A-8353 for ICRD-346933
										}
										Collection<ContainerDetailsVO> containerDetailsVOs = null;
										containerDetailsVOs = MailAcceptance
												.findUldsForUpliftedResdit(operationalFlightVO);
                    MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
										mailController.flagResditsForFlightDeparture(
												operationalFlightVO.getCompanyCode(),
												operationalFlightVO.getCarrierId(), mailBags,
												containerDetailsVOs, operationalFlightVO.getPol());

									}
								}
								}
								log.exiting(CLASS, "flagUpliftedResditForMailbags");
							}

    /**
							 * 	Method		:	MailController.flagTransportCompletedResditForMailbags
							 *	Added by 	:
							 * 	Used for 	:
							 *	Parameters	:	@param operationalFlightVOs
							 *	Parameters	:	@throws SystemException
							 *	Return type	: 	void
							 */
							public void flagTransportCompletedResditForMailbags(
								Collection<OperationalFlightVO> operationalFlightVOs)
								throws SystemException {
								log.entering(CLASS, "===============>>>flagTransportCompletedResditForMailbags ");
								String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
        if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
            log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
            if (operationalFlightVOs != null && operationalFlightVOs.size() > 0) {
									for (OperationalFlightVO operationalFlightVO : operationalFlightVOs) {
										Collection<MailbagVO> mailBags = null;
										mailBags = MailAcceptance
											.findMailBagsForTransportCompletedResdit(operationalFlightVO);
										Collection<ContainerDetailsVO> containerDetailsVOs = null;
										containerDetailsVOs = MailAcceptance
											.findUldsForTransportCompletedResdit(operationalFlightVO);
                    MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
										mailController.flagResditsForTransportCompleted(
												operationalFlightVO.getCompanyCode(),
												operationalFlightVO.getCarrierId(), mailBags,
												containerDetailsVOs, operationalFlightVO.getPou(),
												operationalFlightVO.getPou());
										Collection<MailbagVO> mailBagsForArrival = null;
										mailBagsForArrival = MailAcceptance
												.findMailBagsForUpliftedResdit(operationalFlightVO);
										if(mailBagsForArrival!=null && !mailBagsForArrival.isEmpty()){
								        for (MailbagVO mailbagVO : mailBagsForArrival) {
											Collection<FlightValidationVO> flightVOs=null;
											FlightFilterVO	flightFilterVO=new FlightFilterVO();
											flightFilterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
											flightFilterVO.setDirection(MailConstantsVO.OPERATION_OUTBOUND);
											flightFilterVO.setFlightCarrierId(operationalFlightVO.getCarrierId());
											flightFilterVO.setPageNumber(1);
											flightFilterVO.setFlightNumber(operationalFlightVO.getFlightNumber());
											flightFilterVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
												flightVOs=new MailController().validateFlight(flightFilterVO);
												if(flightVOs!=null && !flightVOs.isEmpty() &&mailbagVO!=null){
												mailController.flagHistoryforFlightArrival(mailbagVO,flightVOs);
												mailController.flagAuditforFlightArrival(mailbagVO,flightVOs);
											}
								        }
										}

									}


								}
								}


								log.exiting(CLASS, "===============>>>flagTransportCompletedResditForMailbags");
							}

							/**
							 * Find the assignments of colln of containers Mar 28, 2007, a-1739
							 *
							 * @param containers
							 * @return
							 * @throws SystemException
							 */
							public Map<String, ContainerAssignmentVO> findContainerAssignments(
									Collection<ContainerVO> containers) throws SystemException {
								log.entering(CLASS, "findcontainerassgns");
								Map<String, ContainerAssignmentVO> containerMap = new HashMap<String, ContainerAssignmentVO>();

								if (containers != null && containers.size() > 0) {
									ContainerAssignmentVO containerAsgn = null;
									for (ContainerVO containerVO : containers) {
										containerAsgn = findContainerAssignment(containerVO);
										if (containerAsgn != null) {
											containerMap.put(containerVO.getContainerNumber(),
													containerAsgn);
										}
									}
								}
								return containerMap;


							}

							/**
							 * @param flightDetails
							 * @author A-2572
							 */
							public void validateULDsForOperation(FlightDetailsVO flightDetails) throws SystemException {
								try {
									new ULDDefaultsProxy().validateULDsForOperation(flightDetails);
								} catch (ULDDefaultsProxyException ex) {
									throw new SystemException(ex.getMessage());
								}

							}

    public void resolveTransaction(String companyCode, String txnId, String remarks) throws SystemException {
								AdminMonitoringProxy adminMonitoringProxy = new AdminMonitoringProxy();

									try {
            adminMonitoringProxy.resolveTransaction(companyCode, txnId, remarks);
									} catch (ProxyException e) {

										//e.printStackTrace();
										log.log(Log.INFO, e.getMessage());
									}


							}

    /**
							 * @param documentFilterVO
							 * @return DocumentValidationVO
							 * @throws SystemException
     * @author a-1883
     
							 */
							public DocumentValidationVO validateDocumentInStock(
									DocumentFilterVO documentFilterVO) throws SystemException {
								log.entering(CLASS, "validateDocumentInStock");
								//Added by A-7540 starts
								String product=findSystemParameterValue(MailConstantsVO.MAIL_AWB_PRODUCT);
			                       Collection<ProductValidationVO> productVOs= new ArrayList<ProductValidationVO>();
			                       ProductVO productVO=new ProductVO();
			                       ProductValidationVO productValidationVO=new ProductValidationVO();

			                       productVOs=new ProductDefaultsProxy().findProductsByName(documentFilterVO.getCompanyCode(),product);

			                       if(productVOs!=null && !productVOs.isEmpty()){

			                    	   productValidationVO=productVOs.iterator().next();

			                    	   productVO= new ProductDefaultsProxy().findProductDetails(documentFilterVO.getCompanyCode(),productValidationVO.getProductCode());
			                       }
			                       documentFilterVO.setDocumentSubType(productVO.getDocumentSubType());
			                     //Added by A-7540 ends
								return new StockcontrolDefaultsProxy()
										.validateDocumentInStock(documentFilterVO);
							}

    /**
							 * @param awbDetailVO
							 * @param containerDetailsVO
							 * @throws SystemException
     * @author a-1883
     * @throws PersistenceException 
							 */
							
							
							public void attachAWBDetails(AWBDetailVO awbDetailVO,
									ContainerDetailsVO containerDetailsVO) throws SystemException, PersistenceException {
								log.entering(CLASS, "attachAWBDetails");
								
								RatingDetailVO ratingDetailsVO = new RatingDetailVO();
                                Collection<MailbagVO> mailbagVOs = null;
                                MailManifestDetailsVO mailManifestDetailsVO = new MailManifestDetailsVO();
								//Find mail details based on availability in containerdetailsVO during attach AWB
								//If mail details not avilable find mail details from dsnVOs in containerdetailsVO
							mailbagVOs =populateMailBagVoForAttachAWB(containerDetailsVO);
                                if(containerDetailsVO.getMailDetails()!=null && !containerDetailsVO.getMailDetails().isEmpty()) {
							    mailbagVOs = mailbagVOs.stream().filter(containerMails -> containerDetailsVO.getMailDetails().stream().anyMatch(selectedMail -> selectedMail.getMailbagId().equals(containerMails.getMailbagId()))).collect(Collectors.toList());
                                }
							ShipmentDetailVO shipmentDetailVO = constructShipmentFromAWBDetails(awbDetailVO,mailbagVOs);
								//Persist Shipment details
        if (mailbagVOs != null && !mailbagVOs.isEmpty()) {
								String shipper = mailbagVOs.iterator().next().getPaCode();
								String consignee = findPAForOfficeOfExchange(
										awbDetailVO.getCompanyCode(), mailbagVOs.iterator().next().getDoe());
            populateShipmentShipperConsignee(shipmentDetailVO, shipper, consignee,mailbagVOs);
            populateShipmentRoutingDetails(shipmentDetailVO,mailbagVOs,containerDetailsVO,mailManifestDetailsVO);
            if(MailConstantsVO.MAILOUTBOUND_SCREEN.equals(containerDetailsVO.getFromScreen())){
            	validateAndPopulateShipmentCustomsInformationVOsForACS(shipmentDetailVO);
            }
            shipmentDetailVO.setAgentCode(awbDetailVO.getAgentCode());
            String agentName = null, iataCode = null;
            Collection<CustomerLovVO> customerLovVOS = null;
            CustomerFilterVO customerFilterVO = new CustomerFilterVO();
            customerFilterVO.setCompanyCode(shipmentDetailVO.getCompanyCode());
            customerFilterVO.setCustomerCode(awbDetailVO.getAgentCode());
            customerFilterVO.setPageNumber(1);
            try {
                customerLovVOS = Proxy.getInstance().get(SharedCustomerProxy.class).findCustomers(customerFilterVO);
            } catch (ProxyException ex) {
                log.log(Log.SEVERE, ex.getMessage());
            }
            if (customerLovVOS != null && customerLovVOS.size() > 0) {
                agentName = customerLovVOS.iterator().next().getCustomerName();
                iataCode = customerLovVOS.iterator().next().getIataCode();
            }
            shipmentDetailVO.setAgentName(agentName);
            shipmentDetailVO.setIataCode(iataCode);
								ShipmentValidationVO shipmentValidationVO = Proxy.getInstance().get(OperationsShipmentProxy.class)
										.saveShipmentDetails(shipmentDetailVO);
																
													
			
			mailManifestDetailsVO.setMailbagVOs(mailbagVOs);
			mailManifestDetailsVO.setShipmentDetailVO(shipmentDetailVO);
			mailManifestDetailsVO.setShipmentValidationVO(shipmentValidationVO);
			 findManifestDetails(containerDetailsVO,mailManifestDetailsVO);
			 if(containerDetailsVO.getMailDetails() == null|| 
					 containerDetailsVO.getMailDetails().isEmpty()) {
				 containerDetailsVO.setMailDetails(mailbagVOs);
			 }  
			Collection<ContainerDetailsVO> containerDetailsVOs =new ArrayList<>();
			containerDetailsVOs.add(containerDetailsVO);
			mailManifestDetailsVO.setContainerDetailsVOs(containerDetailsVOs);
			mailManifestDetailsVO.setFromAttachAWB(true);
			AutoAttachAWBDetailsFeature autoAttachAWBDetailsFeature = (AutoAttachAWBDetailsFeature) SpringAdapter
					.getInstance().getBean("mail.operations.autoAttachAWBDetailsFeature");
			try {
				autoAttachAWBDetailsFeature.execute(mailManifestDetailsVO);
			} catch (BusinessException e) {
				throw new SystemException(e.getErrors());
			}
													}
													ratingDetailsVO.setGrossWeight(shipmentDetailVO.getStatedWeight());
													ratingDetailsVO.setGrossWeightCodeMIP(MailConstantsVO.WEIGHT_CODE);
								log.exiting(CLASS, "attachAWBDetails");
							}
		/**
		 * @author A-4809
		 * @param containerDetailsVO
		 * @param mailManifestDetailsVO
		 * @return
		 * @throws SystemException 
		 * @throws PersistenceException 
		 */
	private MailManifestDetailsVO findManifestDetails (ContainerDetailsVO containerDetailsVO,MailManifestDetailsVO mailManifestDetailsVO) 
			throws SystemException, PersistenceException{
		OperationalFlightVO flightVO = new OperationalFlightVO();
		flightVO.setCompanyCode(containerDetailsVO.getCompanyCode());
		flightVO.setCarrierId(containerDetailsVO.getCarrierId());
		flightVO.setFlightNumber(containerDetailsVO.getFlightNumber());
		flightVO.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
		flightVO.setPol(containerDetailsVO.getPol());
		MailManifestVO mailManifestVO= findContainersInFlightForManifest(flightVO);
		mailManifestDetailsVO.setFromAttachContainerVOs(mailManifestVO.getContainerDetails());
		for(ContainerDetailsVO contvo : mailManifestDetailsVO.getFromAttachContainerVOs()){ 
			if(contvo.getDsnVOs()!=null &&	 !contvo.getDsnVOs().isEmpty()) {	
			Collection<MailbagVO> mailbagVOs = constructDAO().findMailbagVOsForDsnVOs(contvo);
			contvo.setMailDetails(mailbagVOs);  
		}
		}
		return mailManifestDetailsVO;
							}

							/**
							 * constructShipmentFromAWBDetails
     *
							 * @param awbDetailVO
							 * @param mailbagVOs 
							 * @return
							 * @throws SystemException
							 */
							private ShipmentDetailVO constructShipmentFromAWBDetails(
									AWBDetailVO awbDetailVO, Collection<MailbagVO> mailbagVOs) throws SystemException {
								ShipmentDetailVO shipmentDetailVO = new ShipmentDetailVO();
								shipmentDetailVO.setCompanyCode(awbDetailVO.getCompanyCode());
								shipmentDetailVO.setOwnerId(awbDetailVO.getOwnerId());
								shipmentDetailVO.setOwnerCode(awbDetailVO.getOwnerCode());
								shipmentDetailVO.setMasterDocumentNumber(awbDetailVO.getMasterDocumentNumber());
								shipmentDetailVO.setDuplicateNumber(awbDetailVO.getDuplicateNumber());
								shipmentDetailVO.setSequenceNumber(awbDetailVO.getSequenceNumber());
								shipmentDetailVO.setOperationFlag(awbDetailVO.getOperationFlag());
								shipmentDetailVO.setOrigin(awbDetailVO.getOrigin());
								shipmentDetailVO.setDestination(awbDetailVO.getDestination());
								shipmentDetailVO.setStatedPieces(awbDetailVO.getStatedPieces());
								shipmentDetailVO.setStatedWeight(awbDetailVO.getStatedWeight());
								shipmentDetailVO.setStatedVolume(awbDetailVO.getStatedVolume());
								shipmentDetailVO.setTotalVolume(awbDetailVO.getStatedVolume());
								shipmentDetailVO.setTotalAcceptedPieces(awbDetailVO.getStatedPieces());
								shipmentDetailVO.setTotalAcceptedWeight(awbDetailVO.getStatedWeight());
								shipmentDetailVO.setDisplayedWeight(awbDetailVO.getStatedWeight());
								shipmentDetailVO.setGrossStatedVolume(awbDetailVO.getStatedVolume());
								shipmentDetailVO.setGrossStatedVolumeUnit(UnitConstants.VOLUME_UNIT_CUBIC_METERS);
								shipmentDetailVO.setGrossDisplayedVolume(awbDetailVO.getStatedVolume());
								shipmentDetailVO.setStatedWeightCode(awbDetailVO.getStatedWeightCode());
        shipmentDetailVO.setDateOfJourney(new LocalDate(LocalDate.NO_STATION, Location.NONE, true));
								log
										.log(Log.FINE, "Stated weight :", shipmentDetailVO.getStatedWeight());
								shipmentDetailVO.setShipmentDescription(awbDetailVO.getShipmentDescription());
//								shipmentDetailVO.setNatureAndQtyOfGoods(awbDetailVO.getShipmentDescription());
								shipmentDetailVO.setShipmentPrefix(awbDetailVO.getShipmentPrefix());
								 String product=findSystemParameterValue(MailConstantsVO.MAIL_AWB_PRODUCT);//modified for icrd-320542
								shipmentDetailVO.setProduct(product);//Added by a-7871 for ICRD-278369
								shipmentDetailVO.setScc(findSystemParameterValue(MailConstantsVO.ATTACH_AWB_SCC_CODE));
								shipmentDetailVO.setSourceIndicator(MailConstantsVO.MAIL_AWB_SOURCE);
								shipmentDetailVO.setServiceCargoClass(MailConstantsVO.MAIL_SERVICE_CARGO_CLASS);
								//added by a-7540 for ICRD-259780
								Collection<RatingDetailVO> ratingDetails = new ArrayList<RatingDetailVO>();
								RatingDetailVO ratingDetailsVO = new RatingDetailVO();
								String commodityCode = findSystemParameterValue(MailConstantsVO.BOOKING_MAIL_COMMODITY_PARAMETER);
								String poaCode=null;
								if(mailbagVOs!=null && !mailbagVOs.isEmpty()){
									poaCode=mailbagVOs.iterator().next().getPaCode();
								}
								log.log(Log.FINE, "pacode",poaCode);
								CommodityValidationVO commodityValidationVo =
									validateCommodity(shipmentDetailVO.getCompanyCode(), commodityCode,poaCode);
								ratingDetailsVO.setCommodityName(commodityCode);
								ratingDetailsVO.setOperationFlag(RatingDetailVO.OPERATION_FLAG_UPDATE); //Added by A-8164 for ICRD-265352
								ratingDetailsVO.setGrossWeight(awbDetailVO.getStatedWeight()); //Added by A-8164 for ICRD-259778
								ratingDetailsVO.setGrossVolume(awbDetailVO.getStatedVolume());
								ratingDetailsVO.setPieces(awbDetailVO.getStatedPieces());
								ratingDetailsVO.setRateLineSerialNumber(1);  //Added by A-8164 for ICRD-265352
        if (commodityValidationVo != null) {
									ratingDetailsVO.setDescription(commodityValidationVo.getCommodityDesc());
								}
								ratingDetails.add(ratingDetailsVO);
								shipmentDetailVO.setRatingDetails(ratingDetails);
								Collection<RoutingVO> routingDetails = new ArrayList<RoutingVO>();
								LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
								String ownCarrierCode = logonAttributes.getOwnAirlineCode();
								RoutingVO routingVO = new RoutingVO();
								String destination = awbDetailVO.getDestination();
								routingVO.setDestination(destination);
								routingVO.setCarrierCode(ownCarrierCode);
								routingVO.setAirportCode(destination);
								routingDetails.add(routingVO);
								shipmentDetailVO.setRoutingDetails(routingDetails);
								shipmentDetailVO.setOverrideCertificateValidations("N");//added by a-7871  for ICRD-262511
								shipmentDetailVO.setSciValidationToBeSkipped(true); //added by A-8527 for IASCB-28086
								shipmentDetailVO.setDocumentSubType(awbDetailVO.getDocumentSubType());
								return shipmentDetailVO;
							}

							/**
							 * populateShipmentShipperConsignee
							 * @param shipmentDetailVO
							 * @param shipper
							 * @param consignee
							 * @param mailbagVOs
							 * @throws SystemException
							 */
							private void populateShipmentShipperConsignee(
									ShipmentDetailVO shipmentDetailVO, String shipper, String consignee, Collection<MailbagVO> mailbagVOs)
									throws SystemException {
								/*PostalAdministrationVO shipperPA = findPACode(shipmentDetailVO
										.getCompanyCode(), shipper);
								PostalAdministrationVO consigneePA = findPACode(shipmentDetailVO
										.getCompanyCode(), consignee);*/
								Collection<CustomerVO> shipperCustomerDetails = null;
								Collection<CustomerVO> consigneeCustomerDetails = null;
								Collection<String> customerPreferences = new ArrayList<>();
                                customerPreferences.add(MailConstantsVO.CUSTOMS_POSTAL_AUTHORITY_CODE_PRFCOD);
								CustomerFilterVO customerFilterVO = new CustomerFilterVO();
								customerFilterVO.setCompanyCode(shipmentDetailVO.getCompanyCode());
                                customerFilterVO.setCustomerType(MailConstantsVO.CUSTOMER_TYPE_GPA);
								customerFilterVO.setStationCode(mailbagVOs.iterator().next().getOrigin());
								customerFilterVO.setPageNumber(1);
                                customerFilterVO.setCustomerPreferenceCodes(customerPreferences);
								try {
									shipperCustomerDetails = Proxy.getInstance().get(SharedCustomerProxy.class).getAllCustomerDetails(customerFilterVO);
								} catch (ProxyException ex) {
									log.log(Log.SEVERE, ex.getMessage());
								}
								customerFilterVO = new CustomerFilterVO();
								customerFilterVO.setCompanyCode(shipmentDetailVO.getCompanyCode());
                                customerFilterVO.setCustomerType(MailConstantsVO.CUSTOMER_TYPE_GPA);
								customerFilterVO.setStationCode(mailbagVOs.iterator().next().getDestination());
								customerFilterVO.setPageNumber(1);
                                customerFilterVO.setCustomerPreferenceCodes(customerPreferences);
								try {
									consigneeCustomerDetails = Proxy.getInstance().get(SharedCustomerProxy.class).getAllCustomerDetails(customerFilterVO);
								} catch (ProxyException ex) {
									log.log(Log.SEVERE, ex.getMessage());
								}
                                Collection<CustomerVO> shipperDetailsForCustoms = getCustomerForCustoms(shipper, shipperCustomerDetails);
                                if (shipperDetailsForCustoms != null && shipperDetailsForCustoms.size() > 0) {
									shipmentDetailVO.setShipperCode(shipperDetailsForCustoms.iterator().next().getCustomerCode());
									shipmentDetailVO.setShipperName(shipperDetailsForCustoms.iterator().next().getCustomerName());
									shipmentDetailVO.setShipperAddress1(shipperDetailsForCustoms.iterator().next().getAddress1());
									shipmentDetailVO.setShipperCity(shipperDetailsForCustoms.iterator().next().getCity());
									shipmentDetailVO.setShipperCountry(shipperDetailsForCustoms.iterator().next().getCountry());
									shipmentDetailVO.setShipperAccountNumber(shipperDetailsForCustoms.iterator().next().getAccountNumber());
									shipmentDetailVO.setConsigneeTelephoneNumber(shipperDetailsForCustoms.iterator().next().getTelephone());
									shipmentDetailVO.setShipperEmailId(shipperDetailsForCustoms.iterator().next().getEmail());
									shipmentDetailVO.setShipperState(shipperDetailsForCustoms.iterator().next().getState());
									shipmentDetailVO.setShipperPostalCode(shipperDetailsForCustoms.iterator().next().getZipCode());
									shipmentDetailVO.setOrigin(mailbagVOs.iterator().next().getMailOrigin());
									shipmentDetailVO.setDestination(mailbagVOs.iterator().next().getMailDestination());
								}
                                Collection<CustomerVO> consigneeDetailsForCustoms = getCustomerForCustoms(consignee, consigneeCustomerDetails);
								if (consigneeDetailsForCustoms != null && consigneeDetailsForCustoms.size() > 0) {
									shipmentDetailVO.setConsigneeCode(consigneeDetailsForCustoms.iterator().next().getCustomerCode());
									shipmentDetailVO.setConsigneeName(consigneeDetailsForCustoms.iterator().next().getCustomerName());
									shipmentDetailVO.setConsigneeAddress1(consigneeDetailsForCustoms.iterator().next().getAddress1());
									shipmentDetailVO.setConsigneeCity(consigneeDetailsForCustoms.iterator().next().getCity());
									shipmentDetailVO.setConsigneeCountry(consigneeDetailsForCustoms.iterator().next().getCountry());
									shipmentDetailVO.setConsigneeAccountNumber(consigneeDetailsForCustoms.iterator().next().getAccountNumber());
									shipmentDetailVO.setConsigneeTelephoneNumber(consigneeDetailsForCustoms.iterator().next().getTelephone());
									shipmentDetailVO.setConsigneeEmailId(consigneeDetailsForCustoms.iterator().next().getEmail());
									shipmentDetailVO.setConsigneeState(consigneeDetailsForCustoms.iterator().next().getState());
									shipmentDetailVO.setConsigneePostalCode(consigneeDetailsForCustoms.iterator().next().getZipCode());
								}
								shipmentDetailVO.setAWBDataCaptureDone(true);
    }

    /**
     * @param dsnVo
     * @param containerDetailsVO
     * @return
     * @throws SystemException
							 * @author a-1936 This method is used to find out the other DSns for the
							 *         Same AWb excluding the One passed as the Filter
							 */
							private Collection<DespatchDetailsVO> findOtherDSNsForSameAWB(DSNVO dsnVo,
									ContainerDetailsVO containerDetailsVO) throws SystemException {
								return AssignedFlightSegment.findOtherDSNsForSameAWB(dsnVo,
										containerDetailsVO);
							}

    /**
							 * @param shipmentValidationVO
							 * @param source
							 * @throws ProxyException
							 * @throws SystemException
     * @author a-1936 This method is used to delete the AWB from the System
							 */
							private void deleteAWB(ShipmentValidationVO shipmentValidationVO,
									String source) throws ProxyException, SystemException {
									new OperationsShipmentProxy().deleteAWB(shipmentValidationVO,
											source);
							}

    /**
     * @param dsnVo
     * @return
     * @throws SystemException
							 * @author a-1936 Karthick V This method is used to create the Shipment
							 *         Detail Vos from the DSNvo when there is some DSNs for a
							 *         Corresponding Category-ODPair is being attached with the AWB and
							 *         some of them not being attached...
							 */
							private ShipmentDetailVO createShipmentDetailVOForSameGroupDSNs(DSNVO dsnVo)
									throws SystemException {
								log.log(Log.FINE,
										"The DSNVO in createShipmentDetailVOForSameGroupDSNs", dsnVo);
								ShipmentDetailVO shipmentDetailVO = new ShipmentDetailVO();
								shipmentDetailVO.setCompanyCode(dsnVo.getCompanyCode());
								shipmentDetailVO.setOwnerId(dsnVo.getDocumentOwnerIdentifier());
								shipmentDetailVO.setMasterDocumentNumber(dsnVo
										.getMasterDocumentNumber());
								shipmentDetailVO.setDuplicateNumber(dsnVo.getDuplicateNumber());
								shipmentDetailVO.setSequenceNumber(dsnVo.getSequenceNumber());
								shipmentDetailVO
										.setOperationFlag(ShipmentDetailVO.OPERATION_FLAG_UPDATE);
								shipmentDetailVO.setStatedWeightCode(MailConstantsVO.WEIGHT_CODE);
								shipmentDetailVO.setDateOfJourney(new LocalDate(LocalDate.NO_STATION,
										Location.NONE, true));
								/*
								 * Added By Karthick V as the part of the AirNewZealand Mail Tracking CR
								 *
								 */
								shipmentDetailVO.setPaymentType(MailConstantsVO.PAYMENT_TYPE_AWB);
								shipmentDetailVO
										.setScc(findSystemParameterValue(MailConstantsVO.ATTACH_AWB_SCC_CODE));
								//FOR ANZ BUG 44330 - START
//								shipmentDetailVO.setShipmentDescription(findSystemParameterValue(MailConstantsVO.SHIPMENTDESCRIPTION_FORAWB));
								shipmentDetailVO.setShipmentDescription(dsnVo.getShipmentDescription());
//								shipmentDetailVO.setNatureAndQtyOfGoods(dsnVo.getShipmentDescription());
								//END 44330
								return shipmentDetailVO;
							}

   

    /**
							 * @param containerDetailsVO
							 * @param shipmentValidationVO
							 * @param aWBDetailVO
							 * @throws SystemException
     * @author a-1883
							 */
							private void performAttachAWBDetailsAudit(
									ContainerDetailsVO containerDetailsVO,
									ShipmentValidationVO shipmentValidationVO, AWBDetailVO aWBDetailVO)
									throws SystemException {
								log.entering(CLASS, "performAttachAWBDetailsAudit");
								Collection<DSNVO> dSNVOs = containerDetailsVO.getDsnVOs();
								if (dSNVOs != null && dSNVOs.size() > 0) {
									for (DSNVO dSNVO : dSNVOs) {
										DSNAuditVO dsnAuditVO = new DSNAuditVO(MODULE_NAME,
												SUBMODULE_NAME, ENTITY_NAME);
										dsnAuditVO.setCompanyCode(containerDetailsVO.getCompanyCode());
										dsnAuditVO.setDsn(dSNVO.getDsn());
										dsnAuditVO.setOriginExchangeOffice(dSNVO
												.getOriginExchangeOffice());
										dsnAuditVO.setDestinationExchangeOffice(dSNVO
												.getDestinationExchangeOffice());
										dsnAuditVO.setMailSubclass(dSNVO.getMailSubclass());
										dsnAuditVO.setMailCategoryCode(dSNVO.getMailCategoryCode());
										dsnAuditVO.setYear(dSNVO.getYear());
										dsnAuditVO.setMailClass(dSNVO.getMailClass());
										dsnAuditVO.setActionCode(MailConstantsVO.AUDIT_AWB_ATTACHED);
										// dsnAuditVO.setUserId(aWBDetailVO.getLastUpdateUser());
										StringBuilder addlInfo = new StringBuilder();
										addlInfo.append(" Document Owner ID  = ").append(
												shipmentValidationVO.getOwnerId()).append(";").append(
												" Master Document Number  = ").append(
												shipmentValidationVO.getDocumentNumber()).append(";")
												.append(" Duplicate Number  = ").append(
														shipmentValidationVO.getDuplicateNumber())
												.append(";").append(" Sequence Number = ").append(
														shipmentValidationVO.getSequenceNumber())
												.append(";").append(" Document Owner Code = ").append(
														aWBDetailVO.getShipmentPrefix()).append(";")
												.append(" Origin code = ").append(
														aWBDetailVO.getOrigin()).append(";").append(
														" Destination code = ").append(
														aWBDetailVO.getDestination()).append(";");
										if (addlInfo.length() > 0) {
											dsnAuditVO.setAdditionalInformation(addlInfo.toString());
										}
										AuditUtils.performAudit(dsnAuditVO);
									}
								}
								log.exiting(CLASS, "performAttachAWBDetailsAudit");
							}


							/**
							 * @param dsnVOs
							 * @param shipmentDetailVO
							 */
							private void collectPieceWieghtdetailsFromDespatches(
									Collection<DespatchDetailsVO> despatches,
									ShipmentDetailVO shipmentDetailVO) {
								double statedWieght = 0;
								double statedVolume = 0;
								int statedPieces = 0;
								for (DespatchDetailsVO despatchDetailVo : despatches) {
									//statedWieght += despatchDetailVo.getAcceptedWeight();
									statedWieght += despatchDetailVo.getAcceptedWeight().getRoundedSystemValue();//added by A-7371
									statedPieces += despatchDetailVo.getAcceptedBags();
									//statedVolume += despatchDetailVo.getAcceptedVolume();
									statedVolume += despatchDetailVo.getAcceptedVolume().getRoundedSystemValue();//added by A-737
								}
								shipmentDetailVO.setStatedPieces(statedPieces);
        shipmentDetailVO.setStatedWeight(new Measure(UnitConstants.WEIGHT, statedWieght));
        shipmentDetailVO.setStatedVolume(new Measure(UnitConstants.VOLUME, statedVolume));
        shipmentDetailVO.setTotalVolume(new Measure(UnitConstants.VOLUME, statedVolume));
								//shipmentDetailVO.setDisplayedWeight(statedWieght);
								shipmentDetailVO.setTotalAcceptedPieces(statedPieces);
        shipmentDetailVO.setTotalAcceptedWeight(new Measure(UnitConstants.WEIGHT, statedWieght));
        shipmentDetailVO.setGrossStatedVolume(new Measure(UnitConstants.VOLUME, statedVolume));
								//shipmentDetailVO.setGrossDisplayedVolume(statedVolume);
							}


							/**
							 * This method deletes document from stock
							 *
     * @param documentFilterVO
     * @throws SystemException
     * @author a-1883
							 */
							public void deleteDocumentFromStock(DocumentFilterVO documentFilterVO)
									throws SystemException, StockcontrolDefaultsProxyException {
								log.entering(CLASS, "deleteDocumentFromStock");
								//Added by A-7540 starts
								String product=findSystemParameterValue(MailConstantsVO.MAIL_AWB_PRODUCT);
			                       Collection<ProductValidationVO> productVOs= new ArrayList<ProductValidationVO>();
			                       ProductVO productVO=new ProductVO();
			                       ProductValidationVO productValidationVO=new ProductValidationVO();

			                       productVOs=new ProductDefaultsProxy().findProductsByName(documentFilterVO.getCompanyCode(),product);

			                       if(productVOs!=null){

			                    	   productValidationVO=productVOs.iterator().next();

			                    	   productVO= new ProductDefaultsProxy().findProductDetails(documentFilterVO.getCompanyCode(),productValidationVO.getProductCode());
			                       }
			                       documentFilterVO.setDocumentSubType(productVO.getDocumentSubType());
			                     //Added by A-7540 ends
								new StockcontrolDefaultsProxy()
										.deleteDocumentFromStock(documentFilterVO);
								log.exiting(CLASS, "deleteDocumentFromStock");
							}

    

    /**
							 * @param documentFilterVO
							 * @return DocumentValidationVO
							 * @throws SystemException
							 * @throws StockcontrolDefaultsProxyException
     * @author a-1883
							 */
							public DocumentValidationVO findNextDocumentNumber(
									DocumentFilterVO documentFilterVO) throws SystemException,
									StockcontrolDefaultsProxyException {
								log.entering(CLASS, "findNextDocumentNumber");
								return new StockcontrolDefaultsProxy()
										.findNextDocumentNumber(documentFilterVO);
							}


							
							/**
							 * @param ContainerVO
							 * @return
							 * @throws SystemException
     * @author A-5183 For ICRD-42572
							 */
							@Raise(module = "mail", submodule = "operations", event = "SAVE_DWS_EVENT", methodId = "mail.operations.updateActualWeightForMailULD", enablecontext="true")
							public void updateActualWeightForMailULD(ContainerVO containerVo)
							  throws SystemException {
								ContainerPK containerPk = new ContainerPK();
								Container container = null;
								containerPk.setContainerNumber(containerVo.getContainerNumber());
								containerPk.setAssignmentPort(containerVo.getAssignedPort());
								containerPk.setCarrierId(containerVo.getCarrierId());
								containerPk.setFlightNumber(containerVo.getFlightNumber());
								containerPk.setFlightSequenceNumber(containerVo
										.getFlightSequenceNumber());
								containerPk.setLegSerialNumber(containerVo.getLegSerialNumber());
								containerPk.setCompanyCode(containerVo.getCompanyCode());
								try {
									container = Container.find(containerPk);
            if (container != null) {
										//container.setActualWeight(containerVo.getActualWeight());
										container.setActualWeight(containerVo.getActualWeight().getSystemValue()/* As part of correcting the Measure usage in setting value to entity classes ICRD-288684 */);//added by A-7371
										//Added by A-7540 for IASCB-25432
										container.setActualWeightDisplayValue(containerVo.getActualWeight().getDisplayValue());
										container.setActualWeightDisplayUnit(containerVo.getActualWeight().getDisplayUnit());
										container.setContainerPosition(containerVo.getContainerPosition());
									}
								} catch (FinderException ex) {
									throw new SystemException(ex.getErrorCode(), ex);
								}
							}

							/**
							 * @param mailAcceptanceVO
							 * @param hasFlightDeparted
							 * @param acceptedMailbags
							 * @param acceptedUlds
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditsForAcceptance", phase = Phase.POST_INVOKE)
							public void flagResditsForAcceptance(MailAcceptanceVO mailAcceptanceVO,
									boolean hasFlightDeparted, Collection<MailbagVO> acceptedMailbags,
									Collection<ContainerDetailsVO> acceptedUlds)
            throws SystemException {
								log.entering(CLASS, "flagResditsForAcceptance");
								log.exiting(CLASS, "flagResditsForAcceptance");
							}

							/**
							 * @param mailAcceptanceVO
							 * @param mailbags
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagMLDForMailAcceptance", phase = Phase.POST_INVOKE)
							public void flagMLDForMailAcceptance(MailAcceptanceVO mailAcceptanceVO,
									Collection<MailbagVO> mailbags)
            throws SystemException {
								log.entering(CLASS, "flagMLDForMailAcceptance");
								log.exiting(CLASS, "flagMLDForMailAcceptance");
							}

							/**
							 * @param companyCode
							 * @param carrierId
							 * @param mailbagVOs
							 * @param containerDetailsVOs
							 * @param eventPort
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditsForFlightDeparture", phase = Phase.POST_INVOKE)
							public void flagResditsForFlightDeparture(String companyCode, int carrierId,
                                              Collection<MailbagVO> mailbagVOs, Collection<ContainerDetailsVO> containerDetailsVOs,
									String eventPort)
            throws SystemException {
								log.entering(CLASS, "flagResditsForFlightDeparture");
								log.exiting(CLASS, "flagResditsForFlightDeparture");
							}

							/**
							 * @param mailbagVOs
							 * @param mode
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagMLDForMailOperations", phase = Phase.POST_INVOKE)
							public void flagMLDForMailOperations(Collection<MailbagVO> mailbagVOs,
									String mode)
            throws SystemException {
								log.entering(CLASS, "flagMLDForMailOperations");
								log.exiting(CLASS, "flagMLDForMailOperations");
							}

							/**
							 * @param companyCode
							 * @param carrierId
							 * @param mailbagVOs
							 * @param containerDetailsVOs
							 * @param eventPort
							 * @param flightArrivedPort
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditsForTransportCompleted", phase = Phase.POST_INVOKE)
							public void flagResditsForTransportCompleted(String companyCode, int carrierId,
                                                 Collection<MailbagVO> mailbagVOs, Collection<ContainerDetailsVO> containerDetailsVOs,
                                                 String eventPort, String flightArrivedPort)
            throws SystemException {
								log.entering(CLASS, "flagResditsForTransportCompleted");
								log.exiting(CLASS, "flagResditsForTransportCompleted");
							}


							/**
							 * @param acceptedUlds
							 * @param pol
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagPendingResditForUlds", phase = Phase.POST_INVOKE)
							public void flagPendingResditForUlds(
									Collection<ContainerDetailsVO> acceptedUlds, String pol)
            throws SystemException {
								log.entering(CLASS, "flagPendingResditForUlds");
								log.exiting(CLASS, "flagPendingResditForUlds");
							}


							/**
							 * @param mailbagsToFlag
							 * @param eventAirport
							 * @param eventCode
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditForMailbags", phase = Phase.POST_INVOKE)
							public void flagResditForMailbags(Collection<MailbagVO> mailbagsToFlag,
									String eventAirport, String eventCode)
            throws SystemException {
								log.entering(CLASS, "flagResditForMailbags");
								log.exiting(CLASS, "flagResditForMailbags");
							}


							/**
							 * @param containerInInventoryListVOs
							 * @param mailbagVOs
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditsForInventoryDelivery", phase = Phase.POST_INVOKE)
							public void flagResditsForInventoryDelivery(
									Collection<ContainerInInventoryListVO> containerInInventoryListVOs,
									Collection<MailbagVO> mailbagVOs)
            throws SystemException {
								log.entering(CLASS, "flagResditsForInventoryDelivery");
								log.exiting(CLASS, "flagResditsForInventoryDelivery");
							}

							/**
							 * @param unassignSBULDs
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagReturnedResditForULDs", phase = Phase.POST_INVOKE)
							public void flagReturnedResditForULDs(
            Collection<ContainerDetailsVO> unassignSBULDs)
            throws SystemException {
								log.entering(CLASS, "flagReturnedResditForULDs");
								log.exiting(CLASS, "flagReturnedResditForULDs");
							}


							/**
							 * @param containerDetails
							 * @param assignedPort
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditsForULDAcceptance", phase = Phase.POST_INVOKE)
							public void flagResditsForULDAcceptance(
									Collection<ContainerDetailsVO> containerDetails,
									String assignedPort)
            throws SystemException {
								log.entering(CLASS, "flagResditsForULDAcceptance");
								log.exiting(CLASS, "flagResditsForULDAcceptance");
							}


							/**
							 * @param mailArrivalVO
							 * @param arrivedMailbags
							 * @param arrivedContainers
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditsForArrival", phase = Phase.POST_INVOKE)
							public void flagResditsForArrival(MailArrivalVO mailArrivalVO,
									Collection<MailbagVO> arrivedMailbags,
									Collection<ContainerDetailsVO> arrivedContainers)
            throws SystemException {
								log.entering(CLASS, "flagResditsForArrival");
								log.exiting(CLASS, "flagResditsForArrival");
							}

							/**
							 * @param transferredMails
							 * @param containerVOs
							 * @param operationalFlightVO
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditsForContainerTransfer", phase = Phase.POST_INVOKE)
							public void flagResditsForContainerTransfer(
									Collection<MailbagVO> transferredMails,
									Collection<ContainerVO> containerVOs,
									OperationalFlightVO operationalFlightVO)
            throws SystemException {
								log.entering(CLASS, "flagResditsForContainerTransfer");
								log.exiting(CLASS, "flagResditsForContainerTransfer");
							}


							/**
							 * @param transferredMails
							 * @param containerVO
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditsForMailbagTransfer", phase = Phase.POST_INVOKE)
							public void flagResditsForMailbagTransfer(
									Collection<MailbagVO> transferredMails, ContainerVO containerVO)
            throws SystemException {
								log.entering(CLASS, "flagResditsForMailbagTransfer");
								log.exiting(CLASS, "flagResditsForMailbagTransfer");
							}

							/**
							 * @param eventCode
							 * @param eventPort
							 * @param mailbagVOs
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditForMailbagsFromReassign", phase = Phase.POST_INVOKE)
							public void flagResditForMailbagsFromReassign(String eventCode, String eventPort,
									Collection<MailbagVO> mailbagVOs)
            throws SystemException {
								log.entering(CLASS, "flagResditForMailbagsFromReassign");
								log.exiting(CLASS, "flagResditForMailbagsFromReassign");
							}

							/**
							 * @param mailbags
							 * @param toContainerVO
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditsForMailbagReassign", phase = Phase.POST_INVOKE)
							public void flagResditsForMailbagReassign(Collection<MailbagVO> mailbags,
									ContainerVO toContainerVO)
            throws SystemException {
								log.entering(CLASS, "flagResditsForMailbagReassign");
								log.exiting(CLASS, "flagResditsForMailbagReassign");
							}

							/**
							 * @param mailbagVOs
							 * @param ulds
							 * @param toFlightVO
							 * @param hasFlightDeparted
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagResditForContainerReassign", phase = Phase.POST_INVOKE)
							public void flagResditForContainerReassign(Collection<MailbagVO> mailbagVOs,
									Collection<ContainerDetailsVO> ulds, OperationalFlightVO toFlightVO,
									boolean hasFlightDeparted)
            throws SystemException {
								log.entering(CLASS, "flagResditForContainerReassign");
								log.exiting(CLASS, "flagResditForContainerReassign");
							}

							/**
							 * @param mailbagVOs
							 * @param toContainerVO
							 * @param mode
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagMLDForMailReassignOperations", phase = Phase.POST_INVOKE)
							public void flagMLDForMailReassignOperations(
									Collection<MailbagVO> mailbagVOs, ContainerVO toContainerVO,
									String mode)
            throws SystemException {
								log.entering(CLASS, "flagMLDForMailReassignOperations");
								log.exiting(CLASS, "flagMLDForMailReassignOperations");
							}

							/**
     * @param operationalFlightVOs
     * @throws SystemException
     */
    @Advice(name = "mail.operations.flagMLDForUpliftedMailbags", phase = Phase.POST_INVOKE)
							public void flagMLDForUpliftedMailbags(
									Collection<OperationalFlightVO> operationalFlightVOs)
            throws SystemException {
								log.entering(CLASS, "flagMLDForUpliftedMailbags");
								log.exiting(CLASS, "flagMLDForUpliftedMailbags");
							}


							/**
							 * @param mailbagVOs
							 * @param containerVOs
							 * @param operationalFlightVO
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagMLDForContainerTransfer", phase = Phase.POST_INVOKE)
							public void flagMLDForContainerTransfer(Collection<MailbagVO> mailbagVOs,
									Collection<ContainerVO> containerVOs,
									OperationalFlightVO operationalFlightVO)
            throws SystemException {
								log.entering(CLASS, "flagMLDForContainerTransfer");
								log.exiting(CLASS, "flagMLDForContainerTransfer");
							}


							/**
							 * @param mailbagVOs
							 * @param containerVO
							 * @param operationalFlightVO
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.flagMLDForMailbagTransfer", phase = Phase.POST_INVOKE)
							public void flagMLDForMailbagTransfer(Collection<MailbagVO> mailbagVOs,
									ContainerVO containerVO, OperationalFlightVO operationalFlightVO)
            throws SystemException {
								log.entering(CLASS, "flagMLDForMailbagTransfer");
								log.exiting(CLASS, "flagMLDForMailbagTransfer");
							}

    /**
							 * @param mailbagVO
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.updateResditEventTimes", phase = Phase.POST_INVOKE)
							public void updateResditEventTimes(MailbagVO mailbagVO)
								throws SystemException {
								log.entering(CLASS, "updateResditEventTimes");
								log.exiting(CLASS, "updateResditEventTimes");
							}

							/**
     * @param mailbagVOs
     * @throws SystemException
     */
    public static void updateMailbagVOs(Collection<MailbagVO> mailbagVOs, boolean isFlightChange) throws SystemException {
								long[] seqNums = new long[mailbagVOs.size()];
        final Map<Long, Collection<MailbagHistoryVO>> historyMap;
        final Map<Long, MailInConsignmentVO> consignmentsMap;
        if (mailbagVOs != null && !mailbagVOs.isEmpty()) {
								String companyCode = mailbagVOs.iterator().next().getCompanyCode();
            int i = 0;
            for (MailbagVO mailVO : mailbagVOs) {

                seqNums[i++] = mailVO.getMailSequenceNumber();

								}
								historyMap = Mailbag.findMailbagHistoriesMap(companyCode, seqNums);
								consignmentsMap = Mailbag.findAllConsignmentDetailsForMailbag(companyCode, seqNums);
            for (MailbagVO mailVO : mailbagVOs) {
                if (historyMap != null && !historyMap.isEmpty()) {
                    if (historyMap.containsKey(mailVO.getMailSequenceNumber())) {
										mailVO.setMailbagHistories(historyMap.get(mailVO.getMailSequenceNumber()));
										}
									}
                if (consignmentsMap != null && !consignmentsMap.isEmpty()) {
                    if (consignmentsMap.containsKey(mailVO.getMailSequenceNumber())) {
											mailVO.setMailConsignmentVO(consignmentsMap.get(mailVO.getMailSequenceNumber()));
											}
										}
									}
								}
							}

    @Advice(name = "mail.operations.insertOrUpdateHistoryDetailsForAcceptance", phase = Phase.POST_INVOKE)
							public void insertOrUpdateHistoryDetailsForAcceptance(MailAcceptanceVO mailAcceptanceVO,
									Collection<MailbagVO> acceptedMailbags) throws SystemException {
								log.entering(CLASS, "insertOrUpdateHistoryDetailsForAcceptance");
								log.exiting(CLASS, "insertOrUpdateHistoryDetailsForAcceptance");

							}

    @Advice(name = "mail.operations.flagHistoryDetailsForMailbagsFromReassign", phase = Phase.POST_INVOKE)
							public void flagHistoryDetailsForMailbagsFromReassign(
            Collection<MailbagVO> flightAssignedMailbags, ContainerVO toDestinationContainerVO) throws SystemException {
								log.entering(CLASS, "flagHistoryDetailsForMailbagsFromReassign");
								log.exiting(CLASS, "flagHistoryDetailsForMailbagsFromReassign");

							}

    @Advice(name = "mail.operations.flagHistoryForContainerReassignment", phase = Phase.POST_INVOKE)
							public void flagHistoryForContainerReassignment(
            OperationalFlightVO toFlightVO, ContainerVO containerVO, Collection<MailbagVO> mailbagVOS) throws SystemException {
								log.entering(CLASS, "flagHistoryForContainerReassignment");
								log.exiting(CLASS, "flagHistoryForContainerReassignment");

							}

    @Advice(name = "mail.operations.flagMailbagHistoryForArrival", phase = Phase.POST_INVOKE)
    public void flagMailbagHistoryForArrival(MailArrivalVO mailArrivalVO) throws SystemException {
								log.entering(CLASS, "flagMailbagHistoryForArrival");
								log.exiting(CLASS, "flagMailbagHistoryForArrival");

							}

    @Advice(name = "mail.operations.flagMailbagHistoryForDelivery", phase = Phase.POST_INVOKE)
							public void flagMailbagHistoryForDelivery(
            Collection<MailbagVO> mailbags) throws SystemException {
								log.entering(CLASS, "flagMailbagHistoryForDelivery");
								log.exiting(CLASS, "flagMailbagHistoryForDelivery");

							}

    @Advice(name = "mail.operations.flagHistoryForReturnedMailbags", phase = Phase.POST_INVOKE)
    public void flagHistoryForReturnedMailbags(Collection<MailbagVO> mailbags) throws SystemException {
								log.entering(CLASS, "flagHistoryForReturnedMailbags");
								log.exiting(CLASS, "flagHistoryForReturnedMailbags");

							}

    @Advice(name = "mail.operations.flagHistoryForDamagedMailbags", phase = Phase.POST_INVOKE)
    public void flagHistoryForDamagedMailbags(Collection<MailbagVO> mailbags) throws SystemException {
								log.entering(CLASS, "flagHistoryForDamagedMailbags");
								log.exiting(CLASS, "flagHistoryForDamagedMailbags");

							}

    @Advice(name = "mail.operations.flagHistoryForTransfer", phase = Phase.POST_INVOKE)
							public void flagHistoryForTransfer(
            Collection<MailbagVO> mailbagVOs, ContainerVO containerVO) throws SystemException {
								log.entering(CLASS, "flagHistoryForTransfer");
								log.exiting(CLASS, "flagHistoryForTransfer");

							}

    @Advice(name = "mail.operations.flagHistoryForContainerTransfer", phase = Phase.POST_INVOKE)
							public void flagHistoryForContainerTransfer(
									OperationalFlightVO operationalFlightVO,
            int toFlightSegSerNum, Collection<MailbagVO> mailbagVOs) throws SystemException {
								log.entering(CLASS, "flagHistoryForContainerTransfer");
								log.exiting(CLASS, "flagHistoryForContainerTransfer");

							}



    @Advice(name = "mail.operations.flagHistoryforFlightDeparture", phase = Phase.POST_INVOKE)
	public void flagHistoryforFlightDeparture(
			 MailbagVO mailbagVO,Collection<FlightValidationVO> flightVOs) throws SystemException {
		log.entering(CLASS, "flagHistoryforFlightDeparture");
		log.exiting(CLASS, "flagHistoryforFlightDeparture");
	}

    @Advice(name = "mail.operations.flagHistoryforFlightArrival", phase = Phase.POST_INVOKE)
	public void flagHistoryforFlightArrival(
			 MailbagVO mailbagVO,Collection<FlightValidationVO> flightVOs) throws SystemException {
		log.entering(CLASS, "flagHistoryforFlightArrival");
		log.exiting(CLASS, "flagHistoryforFlightArrival");
	}
    @Advice(name = "mail.operations.flagHistoryforReadyForDelivery", phase = Phase.POST_INVOKE)
	public void flagHistoryforReadyForDelivery(
Collection<MailbagVO> mailbags,OperationalFlightVO operationFlightVO) throws SystemException {
		log.entering(CLASS, "flagHistoryforReadyForDelivery");
		log.exiting(CLASS, "flagHistoryforReadyForDelivery");
	}

    @Advice(name = "mail.operations.insertOrUpdateAuditDetailsForAcceptance", phase = Phase.POST_INVOKE)
   	public void insertOrUpdateAuditDetailsForAcceptance(MailAcceptanceVO mailAcceptanceVO,
   			Collection<MailbagVO> acceptedMailbags) throws SystemException {
   		log.entering(CLASS, "insertOrUpdateAuditDetailsForAcceptance");
   		log.exiting(CLASS, "insertOrUpdateAuditDetailsForAcceptance");

   	}

    @Advice(name = "mail.operations.flagAuditDetailsForMailbagsFromReassign", phase = Phase.POST_INVOKE)
   		public void flagAuditDetailsForMailbagsFromReassign(
   				Collection<MailbagVO> flightAssignedMailbags, ContainerVO toDestinationContainerVO) throws SystemException {
   		log.entering(CLASS, "flagAuditDetailsForMailbagsFromReassign");
   		log.exiting(CLASS, "flagAuditDetailsForMailbagsFromReassign");

   	}

    @Advice(name = "mail.operations.flagMailbagAuditForArrival", phase = Phase.POST_INVOKE)
    public void flagMailbagAuditForArrival(MailArrivalVO mailArrivalVO) throws SystemException {
								log.entering(CLASS, "flagMailbagAuditForArrival");
								log.exiting(CLASS, "flagMailbagAuditForArrival");

							}

    @Advice(name = "mail.operations.flagMailbagAuditForDelivery", phase = Phase.POST_INVOKE)
		public void flagMailbagAuditForDelivery(Collection<MailbagVO> mailbags) throws SystemException {
    	log.entering(CLASS, "flagMailbagAuditForDelivery");
    	log.exiting(CLASS, "flagMailbagAuditForDelivery");

}
    @Advice(name = "mail.operations.flagAuditForMailOperartions", phase = Phase.POST_INVOKE)
   	public void flagAuditForMailOperartions(Collection<MailbagVO> mailbags, String actionCode) throws SystemException {
   	log.entering(CLASS, "flagAuditForMailOperartions");
   	log.exiting(CLASS, "flagAuditForMailOperartions");
    }
    @Advice(name = "mail.operations.flagAuditForReturnedMailbags", phase = Phase.POST_INVOKE)
    public void flagAuditForReturnedMailbags(Collection<MailbagVO> mailbags) throws SystemException {
								log.entering(CLASS, "flagAuditForReturnedMailbags");
								log.exiting(CLASS, "flagAuditForReturnedMailbags");

							}

    @Advice(name = "mail.operations.flagAuditForDamagedMailbags", phase = Phase.POST_INVOKE)
    public void flagAuditForDamagedMailbags(Collection<MailbagVO> mailbags) throws SystemException {
								log.entering(CLASS, "flagAuditForDamagedMailbags");
								log.exiting(CLASS, "flagAuditForDamagedMailbags");

							}

    @Advice(name = "mail.operations.flagAuditForTransfer", phase = Phase.POST_INVOKE)
		public void flagAuditForTransfer(
				Collection<MailbagVO> mailbagVOs, ContainerVO containerVO) throws SystemException {
    	log.entering(CLASS, "flagAuditForTransfer");
    	log.exiting(CLASS, "flagAuditForTransfer");
    }

    @Advice(name = "mail.operations.flagAuditforFlightDeparture", phase = Phase.POST_INVOKE)
   	public void flagAuditforFlightDeparture(
   			 MailbagVO mailbagVO,Collection<FlightValidationVO> flightVOs) throws SystemException {
   		log.entering(CLASS, "flagAuditforFlightDeparture");
   		log.exiting(CLASS, "flagAuditforFlightDeparture");
   	}

    @Advice(name = "mail.operations.flagAuditforFlightArrival", phase = Phase.POST_INVOKE)
   	public void flagAuditforFlightArrival(
   			 MailbagVO mailbagVO,Collection<FlightValidationVO> flightVOs) throws SystemException {
   		log.entering(CLASS, "flagAuditforFlightArrival");
   		log.exiting(CLASS, "flagAuditforFlightArrival");
   	}

    @Advice(name = "mail.operations.flagAuditforReadyForDelivery", phase = Phase.POST_INVOKE)
	public void flagAuditforReadyForDelivery(
Collection<MailbagVO> mailbags,OperationalFlightVO operationFlightVO) throws SystemException {
		log.entering(CLASS, "flagAuditforReadyForDelivery");
		log.exiting(CLASS, "flagAuditforReadyForDelivery");
	}

    @Advice(name = "mail.operations.flagAuditForContainerTransfer", phase = Phase.POST_INVOKE)
		public void flagAuditForContainerTransfer(OperationalFlightVO operationalFlightVO,int toFlightSegSerNum, Collection<MailbagVO> mailbagVOs) throws SystemException {
		log.entering(CLASS, "flagAuditForContainerTransfer");
		log.exiting(CLASS, "flagAuditForContainerTransfer");

	}

    @Advice(name = "mail.operations.flagAuditForContainerReassignment", phase = Phase.POST_INVOKE)
			public void flagAuditForContainerReassignment(OperationalFlightVO toFlightVO,
			ContainerVO containerVO, Collection<MailbagVO> mailbagVOS) throws SystemException {
				log.entering(CLASS, "flagAuditForContainerReassignment");
				log.exiting(CLASS, "flagAuditForContainerReassignment");

	}

    @Advice(name = "mail.operations.flagHistoryforTransferRejection", phase = Phase.POST_INVOKE)
	public void flagHistoryforTransferRejection(
			 MailbagVO mailbagVO) throws SystemException {
		log.entering(CLASS, "flagHistoryforTransferRejection");
		log.exiting(CLASS, "flagHistoryforTransferRejection");
	}

    @Advice(name = "mail.operations.flagHistoryforTransferInitiation", phase = Phase.POST_INVOKE)
 	public void flagHistoryforTransferInitiation(
 			Collection<MailbagVO> mailbagVOs) throws SystemException {
 		log.entering(CLASS, "flagHistoryforTransferInitiation");
 		log.exiting(CLASS, "flagHistoryforTransferInitiation");
 	}
							/**
							 * @param containers
							 * @return
							 * @throws SystemException
     * @author a-1936 This method is used to find out the Mail Bags and the
     * Despacthes in a Container of a Manifested Flight.
							 */
							public Collection<ContainerDetailsVO> findMailbagsInContainerForImportManifest(
									Collection<ContainerDetailsVO> containers) throws SystemException {
								return AssignedFlightSegment
										.findMailbagsInContainerForImportManifest(containers);
							}

							 /*** This method is used to find all the mail hand list codes A-6371
							 *
							 * @param companyCode
							 * @param officeOfExchange
							 * @param pageNumber
							 * @return Page of officeExchangeVOs
							 * @throws SystemException
							 */
    public Page<MailOnHandDetailsVO> findMailOnHandDetails(SearchContainerFilterVO searchContainerFilterVO, int pageNumber) throws SystemException {
								log.entering(CLASS, "findMailOnHandDetails");
								//Added by A-5945 for ICRD-96261 starts
								LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
								Collection<PartnerCarrierVO> partnerCarrierVOs = null;
								ArrayList<String> partnerCarriers = new ArrayList<String>();
        String companyCode = logonAttributes.getCompanyCode();
								String ownCarrierCode = logonAttributes.getOwnAirlineCode();
								String airportCode = logonAttributes.getAirportCode();
								try {
									MailTrackingDefaultsDAO mailTrackingDefaultsDAO = MailTrackingDefaultsDAO.class
											.cast(PersistenceController.getEntityManager().getQueryDAO(
													MODULENAME));
									partnerCarrierVOs =  mailTrackingDefaultsDAO
                    .findAllPartnerCarriers(companyCode, ownCarrierCode, airportCode);

								} catch (PersistenceException ex) {
									ex.getErrorCode();
									throw new SystemException(ex.getErrorCode());
								}
								log.log(Log.FINE, " partnerCarriers ", partnerCarrierVOs);
        if (partnerCarrierVOs != null && partnerCarrierVOs.size() > 0) {
            for (PartnerCarrierVO partner : partnerCarrierVOs) {
									String partnerCarrier =	 partner.getPartnerCarrierCode();
									partnerCarriers.add(partnerCarrier);
									}
									partnerCarriers.add(ownCarrierCode);
									searchContainerFilterVO.setPartnerCarriers(partnerCarriers);
								}

								//Added by A-5945 ends
								try {
									MailTrackingDefaultsDAO mailTrackingDefaultsDAO = MailTrackingDefaultsDAO.class
											.cast(PersistenceController.getEntityManager().getQueryDAO(
													MODULENAME));
									return mailTrackingDefaultsDAO
                    .findMailOnHandDetails(searchContainerFilterVO, pageNumber);

								} catch (PersistenceException ex) {
									ex.getErrorCode();
									throw new SystemException(ex.getErrorCode());
								}

							}

							/**
							 * TODO Purpose Jan 30, 2007, A-1739
							 *
							 * @param operationalFlightVO
							 * @return
							 * @throws SystemException
							 */
							public MailManifestVO findMailAWBDetails(
									OperationalFlightVO operationalFlightVO) throws SystemException {
								log.entering(CLASS, "findMailAWBDetails");
								return MailAcceptance.findMailAWBManifest(operationalFlightVO);
							}


							/**
							 * @param operationalFlightVO
							 * @throws SystemException
							 * @throws CloseFlightException
							 * @throws ULDDefaultsProxyException
							 * @throws RemoteException
							 */
							public void closeMailExportFlight(OperationalFlightVO operationalFlightVO)
            throws SystemException, MailTrackingBusinessException,
            ULDDefaultsProxyException, CloseFlightException {

								log.entering(CLASS, "closeMailExportFlight");
        MailManifestVO mailManifestVO = this.findContainersInFlightForManifest(operationalFlightVO);

								AssignedFlightPK assignedFlightPk = new AssignedFlightPK();
								assignedFlightPk.setAirportCode(operationalFlightVO.getPol());
								assignedFlightPk.setCompanyCode(operationalFlightVO.getCompanyCode());
								assignedFlightPk.setFlightNumber(operationalFlightVO.getFlightNumber());
								assignedFlightPk.setFlightSequenceNumber(operationalFlightVO
										.getFlightSequenceNumber());
								assignedFlightPk.setLegSerialNumber(operationalFlightVO
										.getLegSerialNumber());
								assignedFlightPk.setCarrierId(operationalFlightVO.getCarrierId());
								try {
									AssignedFlight.find(assignedFlightPk);
								this.closeFlightManifest(operationalFlightVO, mailManifestVO);

								} catch (FinderException ex) {

									AssignedFlightVO assignedFlightVO = new AssignedFlightVO();

									assignedFlightVO.setCompanyCode(operationalFlightVO.getCompanyCode());
									assignedFlightVO.setAirportCode(operationalFlightVO.getPol());
									assignedFlightVO.setCarrierId(operationalFlightVO.getCarrierId());
									assignedFlightVO.setFlightNumber(operationalFlightVO.getFlightNumber());
									assignedFlightVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
									assignedFlightVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
									assignedFlightVO.setCarrierCode(operationalFlightVO.getCarrierCode());
									assignedFlightVO.setFlightDate(operationalFlightVO.getFlightDate());
									assignedFlightVO.setFlightStatus("O");

									LogonAttributes logonVO = ContextUtils.getSecurityContext()
									.getLogonAttributesVO();

            assignedFlightVO.setLastUpdateTime(new LocalDate(logonVO.getAirportCode(), ARP, true));
									assignedFlightVO.setLastUpdateUser(logonVO.getUserId());

									new AssignedFlight(assignedFlightVO);

									closeFlightWithoutMails(operationalFlightVO);

								}


								log.exiting(CLASS, "closeMailExportFlight");
							}

							/**
							 * @param operationalFlightVO
							 * @throws SystemException
							 * @throws CloseFlightException
							 * @throws ULDDefaultsProxyException
							 * @throws RemoteException
							 */
							public void closeMailImportFlight(OperationalFlightVO operationalFlightVO)
            throws SystemException, MailTrackingBusinessException,
            ULDDefaultsProxyException, CloseFlightException {

								log.entering(CLASS, "closeMailImportFlight");
								LogonAttributes logon = ContextUtils.getSecurityContext()
								.getLogonAttributesVO();
								Collection<String> sysParameters = new ArrayList<String>();
								sysParameters.add(MailConstantsVO.CONSIGNMENTROUTING_NEEDED_FOR_IMPORT_CLOSEFLIGHT);

								Map<String, String> sysParameterMap = null;
								sysParameterMap = new SharedDefaultsProxy().findSystemParameterByCodes(sysParameters);

        boolean canCloseFlight = true;
								if (sysParameterMap != null && OperationalFlightVO.FLAG_YES.equals(sysParameterMap
										.get(MailConstantsVO.CONSIGNMENTROUTING_NEEDED_FOR_IMPORT_CLOSEFLIGHT))) {

									MailArrivalFilterVO filterVO = InboundFlight.constructMailArrivalFilterVO(operationalFlightVO);
									MailArrivalVO mailArrivalVO = this.findArrivalDetails(filterVO);

            Collection<ContainerDetailsVO> containerDetails = mailArrivalVO.getContainerDetails();

            if (containerDetails != null && containerDetails.size() > 0) {
                for (ContainerDetailsVO containerDtls : containerDetails) {
                    if (containerDtls.getDsnVOs() != null && containerDtls.getDsnVOs().size() > 0) {
                        for (DSNVO dSNVO : containerDtls.getDsnVOs()) {
                            if (MailConstantsVO.FLAG_NO.equals(dSNVO.getRoutingAvl())) {
                                canCloseFlight = false;
                                break;
                            }
                        }
                    }
                    if (!canCloseFlight) {
                        break;
                    }
                }
            }
            if (!canCloseFlight) {
										throw new CloseFlightException(CloseFlightException.ROUTING_UNAVAILABLE);
									}
								}

								AssignedFlight inboundFlight = null;
								AssignedFlightPK inboundFlightPk = new AssignedFlightPK();
								inboundFlightPk.setAirportCode(operationalFlightVO.getPou());
								inboundFlightPk.setCompanyCode(operationalFlightVO.getCompanyCode());
								inboundFlightPk.setFlightNumber(operationalFlightVO.getFlightNumber());
								inboundFlightPk.setFlightSequenceNumber(operationalFlightVO
										.getFlightSequenceNumber());
								inboundFlightPk.setLegSerialNumber(operationalFlightVO
										.getLegSerialNumber());
								inboundFlightPk.setCarrierId(operationalFlightVO.getCarrierId());
								try {
									inboundFlight = AssignedFlight.find(inboundFlightPk);
								} catch (FinderException ex) {
									AssignedFlightVO inboundFlightVO = new AssignedFlightVO();
									inboundFlightVO.setAirportCode(operationalFlightVO.getPou());
									inboundFlightVO.setCarrierId(operationalFlightVO.getCarrierId());
									inboundFlightVO.setCarrierCode(operationalFlightVO.getCarrierCode());//Added as part of ICRD-132568
									inboundFlightVO.setCompanyCode(operationalFlightVO.getCompanyCode());
									inboundFlightVO.setFlightDate(operationalFlightVO.getFlightDate());
									inboundFlightVO.setFlightNumber(operationalFlightVO.getFlightNumber());
									inboundFlightVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
									inboundFlightVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
									//Added by A-5945  for ICRD-118205 starts
									inboundFlightVO.setImportFlightStatus(MailConstantsVO.FLIGHT_STATUS_CLOSED);
            inboundFlightVO.setLastUpdateTime(new LocalDate(logon.getAirportCode(), ARP, true));
									inboundFlightVO.setLastUpdateUser(logon.getUserId());
									inboundFlightVO.setFlightStatus("N");
									//Added by A-5945 for ICRD-118205 ends
									inboundFlight = new AssignedFlight(inboundFlightVO);
									//throw new SystemException(ex.getErrorCode(), ex);


								}

								closeInboundFlight(operationalFlightVO);

//								throw new CloseFlightException(CloseFlightException.ROUTING_UNAVAILABLE);
							}

							/**
							 * 	Method		:	MailController.findOneTimeDescription
							 *	Added by 	:	A-6991 on 14-Jul-2017
							 * 	Used for 	:   ICRD-208718
							 *	Parameters	:	@param companyCode
							 *	Parameters	:	@param oneTimeCode
							 *	Parameters	:	@return
							 *	Return type	: 	Map<String,Collection<OneTimeVO>>
							 */

							public Map<String, Collection<OneTimeVO>> findOneTimeDescription(
									String companyCode, String oneTimeCode) {
								log.entering(CLASS, "findOneTimeDescription");
								Map<String, Collection<OneTimeVO>> oneTimes = null;

								try {
									Collection<String> fieldValues = new ArrayList<String>();
									fieldValues.add(oneTimeCode);
									oneTimes = new SharedDefaultsProxy().findOneTimeValues(companyCode,
											fieldValues);
								} catch (ProxyException e) {
									log.log(Log.INFO, e.getMessage());
								} catch (SystemException e) {
									log.log(Log.INFO, e.getMessage());
								}

								log.exiting(CLASS, "findOneTimeDescription");
								return oneTimes;
							}

							/**
							 * @param mailAuditFilterVO
							 * @return
     * @throws SystemException ICRD-229934
     * @author a-7794 This method is used to list the Audit details
							 */
							public Collection<AuditDetailsVO> findCONAuditDetails(
									MailAuditFilterVO mailAuditFilterVO) throws SystemException {
								log.entering(CLASS, "findCONAuditDetails");
								return ContainerAudit.findCONAuditDetails(mailAuditFilterVO);
							}

    /**
							 * 	Method		:	MailController.findULDsInAssignedFlight
							 *	Added by 	:	A-6991 on 20-Nov-2017
							 * 	Used for 	:   ICRD-77772
							 *	Parameters	:	@param operationalFlightVO
							 *	Parameters	:	@return
							 *	Parameters	:	@throws SystemException
							 *	Parameters	:	@throws ProxyException
							 *	Return type	: 	Collection<ContainerVO>
							 */
							public Collection<ContainerVO> findULDsInAssignedFlight(
            OperationalFlightVO operationalFlightVO) throws SystemException {
								      log.entering(CLASS, "findULDsInAssignedFlight");
								 return  AssignedFlight.findULDsInAssignedFlight(operationalFlightVO);

							}

							/**
							 * 	Method		:	MailController.findMailDetailsForMailTag
							 *	Added by 	:	a-6245 on 07-Jun-2017
							 * 	Used for 	:
							 *	Parameters	:	@param companyCode
							 *	Parameters	:	@param mailId
							 *	Parameters	:	@return
							 *	Parameters	:	@throws SystemException
							 *	Return type	: 	MailbagVO
							 */
    public MailbagVO findMailDetailsForMailTag(String companyCode, String mailId)
									throws SystemException {

								log.entering(CLASS, "findMailDetailsForMailTag");
								Mailbag mailbag = null;
        MailbagVO mailbagVO = new MailbagVO();
								MailbagPK mailbagPk = new MailbagPK();
								mailbagPk.setCompanyCode(companyCode);
        mailbagPk.setMailSequenceNumber(findMailSequenceNumber(mailId, companyCode));
								try {
									mailbag = Mailbag.find(mailbagPk);
								} catch (FinderException finderException) {
									log.log(Log.FINE, " ++++  Finder Exception  +++");
									log.log(Log.FINE, " <===  Mailbag is Not accepted ===>");
								}
        if (mailbag != null) {
        	                    mailbagVO.setPaCode(mailbag.getPaCode());
								mailbagVO.setCompanyCode(companyCode);
								mailbagVO.setMailbagId(mailbag.getMailIdr());
								mailbagVO.setMailSequenceNumber(mailbagPk.getMailSequenceNumber());
								mailbagVO.setOoe(mailbag.getOrginOfficeOfExchange());
								mailbagVO.setDoe(mailbag.getDestinationOfficeOfExchange());
								mailbagVO.setMailCategoryCode(mailbag.getMailCategory());
								mailbagVO.setMailSubclass(mailbag.getMailSubClass());
								mailbagVO.setYear(mailbag.getYear());
								mailbagVO.setDespatchSerialNumber(mailbag.getDespatchSerialNumber());
								mailbagVO.setReceptacleSerialNumber(mailbag.getReceptacleSerialNumber());
								mailbagVO.setHighestNumberedReceptacle(mailbag.getHighestNumberedReceptacle());
								mailbagVO.setRegisteredOrInsuredIndicator(mailbag.getRegisteredOrInsuredIndicator());
            mailbagVO.setWeight(new Measure(UnitConstants.MAIL_WGT, mailbag.getWeight()));//added by A-7371
								//mailbagVO.setVolume(mailbag.getVolume());
            mailbagVO.setVolume(new Measure(UnitConstants.MAIL_WGT, mailbag.getVolume()));//added by A-7371
                                mailbagVO.setOrigin(mailbag.getOrigin());
								mailbagVO.setDestination(mailbag.getDestination());
								mailbagVO.setMalseqnum(mailbagPk.getMailSequenceNumber());
								}
        log.exiting(CLASS, "findMailDetailsForMailTag");
								return mailbagVO;

							}

    /**
							 * 	Method		:	MailController.findMailbagIdForMailTag
							 *	Added by 	:	a-6245 on 22-Jun-2017
							 * 	Used for 	:
							 *	Parameters	:	@param mailbagVO
							 *	Parameters	:	@return
							 *	Parameters	:	@throws SystemException
							 *	Return type	: 	MailbagVO
							 */
							public MailbagVO findMailbagIdForMailTag(MailbagVO mailbagVO)
									throws SystemException {
								return Mailbag.findMailbagIdForMailTag(mailbagVO);

							}

    /**
							 * @param mailAuditHistoryFilterVO
							 * @return
							 * @throws SystemException
							 */
    public Collection<MailBagAuditHistoryVO> findMailAuditHistoryDetails(MailAuditHistoryFilterVO mailAuditHistoryFilterVO) throws SystemException {
								return MailbagAudit.findMailAuditHistoryDetails(mailAuditHistoryFilterVO);
							}

    /**
							 * @param mailAuditHistoryFilterVO
							 * @return
							 * @throws SystemException
							 */
    public Collection<MailbagHistoryVO> findMailStatusDetails(MailbagEnquiryFilterVO mailbagEnquiryFilterVO) throws SystemException {
								return Mailbag.findMailStatusDetails(mailbagEnquiryFilterVO);
							}

							/**
							 * @param entities
							 * @param b
							 * @param companyCode
							 * @return
							 * @throws SystemException
							 */
							public HashMap<String, String> findAuditTransactionCodes(
            Collection<String> entities, boolean b, String companyCode) throws SystemException {
        log.entering(CLASS, "findAuditTransactionCodes");
        return MailbagAudit.findAuditTransactionCodes(entities, b, companyCode);
							}

							/**
							 * @param mailbagvo
							 * @param actionCode
							 * @throws SystemException
							 */
    @Advice(name = "mail.operations.auditMailBagUpdate", phase = Phase.POST_INVOKE)
    public void auditMailBagUpdate(MailbagVO mailbagvo, String actionCode)
            throws SystemException {
								log.entering(CLASS, "auditMailBagUpdate");
								log.exiting(CLASS, "auditMailBagUpdate");
							}

							public HashMap<String, Collection<FlightValidationVO>> validateFlightsForAirport(
									Collection<FlightFilterVO> flightFilterVOs) throws SystemException {
        FlightOperationsProxy flightOperationsProxy = new FlightOperationsProxy();
								return flightOperationsProxy.validateFlightsForAirport(flightFilterVOs);
							}

    private void checkDeletedMailbagDetails(Collection<MailbagVO> deletedMails) {
        for (MailbagVO mailVO : deletedMails) {
									long mailSeq = 0;
            try {
										mailSeq = findMailSequenceNumber(mailVO.getMailbagId(), mailVO.getCompanyCode());
                if (mailSeq == 0) {
											deletedMails.remove(mailVO);
                    if (!deletedMails.isEmpty()) {
                        continue;
                    } else {
                        break;
                    }
                } else {
											MailbagPK mailPK = new MailbagPK();
											mailPK.setCompanyCode(mailVO.getCompanyCode());
											mailPK.setMailSequenceNumber(mailSeq);
											Mailbag mail = Mailbag.find(mailPK);
                    if (mail != null && MailConstantsVO.MAIL_STATUS_RETURNED.equals(mail.getLatestStatus())) {
												deletedMails.remove(mailVO);
                        if (!deletedMails.isEmpty()) {
													continue;
                        } else {
                            break;
                        }
                    }
                }
            } catch (FinderException exception) {
                deletedMails.remove(mailVO);
                if (!deletedMails.isEmpty()) {
                    continue;
                } else {
                    break;
                }
            } catch (SystemException exception) {
                deletedMails.remove(mailVO);
                if (!deletedMails.isEmpty()) {
                    continue;
                } else {
                    break;
                }
            }
        }
    }

    /**
     * @param mailAcceptanceVO
     * @throws SystemException
     */
    @Advice(name = "mail.operations.auditContainer", phase = Phase.POST_INVOKE)
							public void auditContainer(MailAcceptanceVO mailAcceptanceVO)
            throws SystemException {
								log.entering(CLASS, "auditContainer");
								log.exiting(CLASS, "auditContainer");
							}

		/**
     * @param consignmentDocumentVO
     * @param carditVO
     */
    private void updateRecpVOwithMalSeq(ConsignmentDocumentVO consignmentDocumentVO, CarditVO carditVO) {
        Collection<CarditReceptacleVO> rcptVOs = carditVO.getReceptacleInformation();
			Page<MailInConsignmentVO> mailsInCSG = consignmentDocumentVO.getMailInConsignmentVOs();
        if (rcptVOs != null && mailsInCSG != null && !rcptVOs.isEmpty() && !mailsInCSG.isEmpty()) {
            for (CarditReceptacleVO rcptVO : rcptVOs) {
					String rcptId = rcptVO.getReceptacleId() != null ? rcptVO.getReceptacleId() : "";
                for (MailInConsignmentVO mailCSGVO : mailsInCSG) {
                    if (rcptId.equals(mailCSGVO.getMailId())) {
							rcptVO.setMailSeqNum(mailCSGVO.getMailSequenceNumber());
						}
					}
				}
			}

		}

							/**
		 * @param mailbagVOs
		 * @param toContainerVO
		 * @param mode
		 * @throws SystemException
		 */
    @Advice(name = "mail.operations.flagMLDForContainerReassign", phase = Phase.POST_INVOKE)
		public void flagMLDForContainerReassign(
				Collection<ContainerVO> containerVOs, OperationalFlightVO toFlightVO)
            throws SystemException {
			log.entering(CLASS, "flagMLDForMailReassignOperations");
			log.exiting(CLASS, "flagMLDForMailReassignOperations");
		}

    /**
		 * @param containerDetailsVO
		 * @throws SystemException
		 * @throws RemoteException
		 * @throws BusinessDelegateException
     * @author A-7871
     * for ICRD-257316
		 */
		public int findMailbagcountInContainer(
            ContainerVO containerVO) throws RemoteException, SystemException, PersistenceException {
			log.entering(CLASS, "findMailbagcountInContainer");
			return constructDAO().findMailbagcountInContainer(containerVO);
		}


    /**
							 * 	Method		:	MailController.findOfficeOfExchangeForPA
							 *	Added by 	:	a-6245 on 10-Jul-2017
							 * 	Used for 	:
							 *	Parameters	:	@param companyCode
							 *	Parameters	:	@param officeOfExchange
							 *	Parameters	:	@return
							 *	Parameters	:	@throws SystemException
							 *	Return type	: 	String
							 */
    public Map<String, String> findOfficeOfExchangeForPA(String companyCode,
									String paCode) throws SystemException {
								log.entering(CLASS, "findOfficeOfExchangeForAirports");
								CacheFactory factory = CacheFactory.getInstance();
			                    OfficeOfExchangeCache cache = factory
				                .getCache(OfficeOfExchangeCache.ENTITY_NAME);   
			                    return cache.findOfficeOfExchangeForPA(companyCode,paCode);
							}

    /**
			 * 	Method		:	MailController.flagHistoryForMailAwbAttachment
			 *	Added by 	:	a-7779 on 28-Aug-2017
			 * 	Used for 	:
			 *	Parameters	:	@param mailbagVOs
			 *	Return type	: 	void
			 */
    @Advice(name = "mail.operations.flagHistoryForMailAwbAttachment", phase = Phase.POST_INVOKE)
			public void flagHistoryForMailAwbAttachment(
					Collection<MailbagVO> mailbagVOs) {
				log.entering(CLASS, "flagHistoryForMailAwbAttachment");
				log.exiting(CLASS, "flagHistoryForMailAwbAttachment");
			}
			/**
			 *
			 * 	Method		:	MailController.populateBookedFlightDetailsForMail
			 *	Added by 	:	a-7779 on 28-Aug-2017
			 * 	Used for 	:
			 *	Parameters	:	@param mailBookingFlightDetailVOs
			 *	Parameters	:	@param mailbagVOs
			 *	Return type	: 	void
			 * @throws SystemException
			 */
			/*public void populateBookedFlightDetailsForMail(
					Collection<MailBookingDetailVO> mailBookingDetailVOs,
					Collection<MailbagVO> mailbagVOs) throws SystemException {
				if(mailbagVOs!=null && mailbagVOs.size()>0){
					for(MailbagVO mailbagVO : mailbagVOs){
						mailbagVO.setMailStatus(MailConstantsVO.MAIL_STATUS_AWB_BOOKED);
						Mailbag mailbag=null;
						MailbagPK mailbagPk = new MailbagPK();
						mailbagPk.setCompanyCode(mailbagVO.getCompanyCode());
						mailbagPk.setMailSequenceNumber(Mailbag.findMailBagSequenceNumberFromMailIdr(mailbagVO.getMailbagId(), mailbagVO.getCompanyCode()));
						try {
							mailbag=Mailbag.find(mailbagPk);
						} catch (FinderException e) {
							throw new SystemException(e.getMessage());
						}
						mailbag.attachAwbInMailbag(mailBookingDetailVOs,mailbagVOs);
					}
				}
			}*/

    /**
 * 	Method		:	MailController.dettachMailBookingDetails
 *	Added by 	:	a-7779 on 29-Aug-2017
 * 	Used for 	:
 *	Parameters	:	@param mailbagVOs
 *	Parameters	:	@throws SystemException
 *	Return type	: 	void
 */
	public void dettachMailBookingDetails(Collection<MailbagVO> mailbagVOs)
			throws SystemException {
		if (!mailbagVOs.isEmpty() ) {
		      for (MailbagVO mailbagVO : mailbagVOs)
		      {
		        mailbagVO.setMailStatus(MailConstantsVO.MAIL_STATUS_AWB_CANCELLED);
		        Mailbag mailbag = null;
		        MailbagPK mailbagPk = new MailbagPK();
		        mailbagPk.setCompanyCode(mailbagVO.getCompanyCode());
		        mailbagPk.setMailSequenceNumber(
		          Mailbag.findMailBagSequenceNumberFromMailIdr(
		          mailbagVO.getMailbagId(), 
		          mailbagVO.getCompanyCode()));
		        try
		        {
		          mailbag = Mailbag.find(mailbagPk);
		        }
		        catch (FinderException e)
		        {
		          throw new SystemException(e.getErrorCode(), e);
		        }
		        mailbagVO.setMailSequenceNumber(mailbagPk.getMailSequenceNumber());
		        mailbag.detachAwbInMailbag(mailbagVO);
		      }
		    }
		}
					
/**
 *
 * 	Method		:	MailController.fetchBookedFlightDetails
 *	Added by 	:	a-7779 on 29-Aug-2017
 * 	Used for 	:
 *	Parameters	:	@param companyCode
 *	Parameters	:	@param shipmentPrefix
 *	Parameters	:	@param masterDocumentNumber
 *	Parameters	:	@return
 *	Return type	: 	Collection<MailBookingFlightDetailVO>
 * @throws SystemException
 * @throws PersistenceException
 */
/*public Collection<MailBookingDetailVO> fetchBookedFlightDetails(String companyCode, String shipmentPrefix,
		String masterDocumentNumber) throws PersistenceException, SystemException {
		return new MailBookingDetail()
				.fetchBookedFlightDetails(companyCode, shipmentPrefix,
						masterDocumentNumber);
}*/

    /**
 * 	Method		:	MailController.performMailAWBTransactions
 *	Added by 	:	a-7779 on 13-Sep-2017
 * 	Used for 	:
 *	Parameters	:	@param mailFlightSummaryVO
 *	Parameters	:	@param eventCode
 *	Return type	: 	void
 */

public void performMailAWBTransactions(
		MailFlightSummaryVO mailFlightSummaryVO, String eventCode) {
	log.entering(CLASS, "performMailAWBTransactions");

	log.exiting(CLASS, "performMailAWBTransactions");
}

/**
 * 	Method		:	MailController.attachAWBForMail
 *	Added by 	:	A-7531 on 22-Sep-2017
 * 	Used for 	:
 *	Parameters	:	@param mailBookingDetailVOs
 *	Parameters	:	@param mailbagVOs
 *	Return type	: 	void
 * @throws SystemException 
 */
public void attachAWBForMail(
		Collection<MailBookingDetailVO> mailBookingDetailVOs,
		Collection<MailbagVO> mailbagVOs) throws SystemException {
        MailBookingDetailVO mailBookingDetailVO = mailBookingDetailVOs.iterator().next();
        for (MailbagVO mailbagVO : mailbagVOs) {
            MailbagPK mailbagPK = new MailbagPK();
	mailbagPK.setCompanyCode(mailbagVO.getCompanyCode());
	mailbagPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
            Mailbag mailbag = null;
            try {
                mailbag = Mailbag.find(mailbagPK);
	} catch (FinderException | SystemException e) {
                mailbag = null;
	}
if(mailbag!=null && (mailbag.getMasterDocumentNumber()==null || mailbag.getMasterDocumentNumber().isEmpty())){
			
			mailbag.attachAwbInMailbag(mailBookingDetailVO);
			/*mailbag.setMasterDocumentNumber(mailBookingDetailVO.getMasterDocumentNumber())	;
                mailbag.setMasterDocumentNumber(mailBookingDetailVO.getMasterDocumentNumber());
	mailbag.setDocumentOwnerId(mailBookingDetailVO.getOwnerId());
	mailbag.setDupliacteNumber(mailBookingDetailVO.getDuplicateNumber());
	mailbag.setShipmentPrefix(mailBookingDetailVO.getShipmentPrefix());
	mailbag.setSequenceNumber(mailBookingDetailVO.getSequenceNumber());//added by a-7779 for icrd-231589

	if(!"OFL".equals(mailbag.getLatestStatus())){//ICRD-346966
	mailbag.setLatestStatus(MailConstantsVO.MAIL_STATUS_AWB_BOOKED);
	mailbag.setFlightNumber(mailBookingDetailVO.getBookingFlightNumber());
	mailbag.setFlightSequenceNumber(mailBookingDetailVO.getBookingFlightSequenceNumber());
	mailbag.setSegmentSerialNumber(mailBookingDetailVO.getSegementserialNumber());
			mailbag.setCarrierId(mailBookingDetailVO.getBookingFlightCarrierid());*/
	}
		

	}


							}

public Collection<RateAuditVO> createRateAuditVOs(
		Collection<ContainerDetailsVO> containerDetailsVOs,String triggerPoint,boolean provisionalRateImport) throws SystemException {
        Collection<RateAuditVO> rateAuditVOs = new ArrayList<RateAuditVO>();

        Collection<RateAuditDetailsVO> rateAuditDetails = new ArrayList<RateAuditDetailsVO>();
        RateAuditDetailsVO rateAuditDetailsVO = new RateAuditDetailsVO();
        if (containerDetailsVOs != null && containerDetailsVOs.size() > 0) {
        	String triggerForImport = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
        	 LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
            for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
                Collection<MailbagVO> mailbags = containerDetailsVO.getMailDetails();
                if (mailbags != null && mailbags.size() > 0) {
                	for(MailbagVO mailbagVO : mailbags){
                		if(!provisionalRateImport && triggerForImport!=null && !triggerForImport.isEmpty() && (triggerForImport.contains("D"))){
            				try {
								Mailbag mailbag = Mailbag.find(createMailbagPK(mailbagVO.getCompanyCode(), mailbagVO));
								if (!(MailConstantsVO.MAIL_STATUS_DELIVERED.equals(mailbag.getLatestStatus())
										|| logonAttributes.getOwnAirlineIdentifier() != mailbag.getCarrierId())) {
									continue;
								}
            				} catch (FinderException e) {
            					log.log(Log.SEVERE,"exception raised", e  );
            				}
                		}

                	RateAuditVO rateAuditVO = new RateAuditVO();
                    rateAuditVO.setCompanyCode(mailbagVO.getCompanyCode());
                    rateAuditVO.setTriggerPoint(triggerPoint);
                    rateAuditDetailsVO.setSource(triggerPoint);
                    rateAuditVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                    rateAuditDetailsVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                    rateAuditVO.setScannedDate( mailbagVO.getScannedDate());
                    rateAuditDetailsVO.setCarrierid(mailbagVO.getCarrierId());
                    if(mailbagVO.getCarrierCode() != null){
                    	rateAuditDetailsVO.setCarrierCode(mailbagVO.getCarrierCode());
                    }else{
                    	rateAuditDetailsVO.setCarrierCode(containerDetailsVO.getCarrierCode());
                    }
                    if(containerDetailsVO.getFlightNumber() != null){
                    	 rateAuditDetailsVO.setFlightno(containerDetailsVO.getFlightNumber());
                    }else{
                    	 rateAuditDetailsVO.setFlightno(mailbagVO.getFlightNumber());
                    }
                    if(containerDetailsVO.getFlightSequenceNumber() != 0){
                    	rateAuditDetailsVO.setFlightseqno((int)containerDetailsVO.getFlightSequenceNumber());
                    }else{
                    	rateAuditDetailsVO.setFlightseqno((int)  mailbagVO.getFlightSequenceNumber());
                    }

                    if(containerDetailsVO.getSegmentSerialNumber() != 0){
                    	rateAuditDetailsVO.setSegSerNo( containerDetailsVO.getSegmentSerialNumber());
                    }else{
                    	rateAuditDetailsVO.setSegSerNo( mailbagVO.getSegmentSerialNumber());
                    }

				//rateAuditDetailsVO.setFlightDate(containerDetailsVO.getFlightDate());//modified by A-6991 for ICRD-259900

            //        if (mailbagVO.getFlightDate() != null && mailbagVO.getFlightSequenceNumber() <= 0) {


                    if (mailbagVO.getFlightDate() != null && mailbagVO.getFlightSequenceNumber() <= 0) {
                        rateAuditDetailsVO.setFlightno(containerDetailsVO.getFlightNumber());
                        rateAuditDetailsVO.setFlightseqno((int) containerDetailsVO.getFlightSequenceNumber());
					    rateAuditDetailsVO.setFlightDate(containerDetailsVO.getFlightDate());
					    rateAuditDetailsVO.setSegSerNo(containerDetailsVO.getSegmentSerialNumber());
				}
                    if (containerDetailsVO.getFlightDate() != null) {
    					rateAuditDetailsVO.setFlightDate(containerDetailsVO.getFlightDate());//modified by A-6991 for ICRD-259900
                        } else {
    						rateAuditDetailsVO.setFlightDate(mailbagVO.getFlightDate());
    					}

				
				if(MailConstantsVO.MAIL_STATUS_ARRIVED.equals(triggerPoint)){
				FlightFilterVO flightFilterVO = new FlightFilterVO();
				flightFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
				flightFilterVO.setFlightCarrierId(rateAuditDetailsVO.getCarrierid());
				flightFilterVO.setFlightNumber(rateAuditDetailsVO.getFlightno());
				flightFilterVO.setDirection(FlightFilterVO.INBOUND);
				flightFilterVO.setStation(containerDetailsVO.getPou());
				flightFilterVO.setFlightSequenceNumber(rateAuditDetailsVO.getFlightseqno());
				Collection<FlightValidationVO> flightValidationVOs = validateFlight(flightFilterVO);
				if(flightValidationVOs!=null && !flightValidationVOs.isEmpty()){
					rateAuditDetailsVO.setFlightDate(flightValidationVOs.iterator().next().getStd());
				}
				}

				rateAuditDetails.add(rateAuditDetailsVO);
				rateAuditVO.setRateAuditDetails(rateAuditDetails);
				rateAuditVOs.add(rateAuditVO);
                	}
				//Commented as part of flight level import changes
			/*for(MailbagVO mailbagVO:mailbags){
if(mailbagVO.getOperationalFlag()!=null && !mailbagVO.getOperationalFlag().isEmpty()){
				RateAuditVO rateAuditVO=new RateAuditVO();
				 try
			      {
			        PersistenceController.getEntityManager().flush();
			        rateAuditVO.setMailSequenceNumber(findMailSequenceNumber(mailbagVO.getMailbagId(),mailbagVO.getCompanyCode()));

			      }
			      catch (PersistenceException pe) {
			        throw new SystemException(pe.getMessage());
			      }






				rateAuditVO.setCompanyCode(mailbagVO.getCompanyCode());
				rateAuditVO.setTriggerPoint(triggerPoint);
				rateAuditVO.setBillingBasis(mailbagVO.getMailbagId());
				rateAuditVO.setMailbagId(mailbagVO.getMailbagId());
				rateAuditVO.setOperationFlag(mailbagVO.getOperationalFlag());
				rateAuditVO.setPcs("1");
				OfficeOfExchangeVO officeOfExchangeVOForOOE=validateOfficeOfExchange(mailbagVO.getCompanyCode(),mailbagVO.getOoe());
				if(mailbagVO.getPaCode()!=null){
				rateAuditVO.setGpaCode(mailbagVO.getPaCode())	;
				}else{
					rateAuditVO.setGpaCode(officeOfExchangeVOForOOE.getPoaCode())	;
				}
				rateAuditVO.setOriginCityCode(officeOfExchangeVOForOOE.getCityCode());
				OfficeOfExchangeVO officeOfExchangeVOForDOE=validateOfficeOfExchange(mailbagVO.getCompanyCode(),mailbagVO.getDoe());
				rateAuditVO.setDestinationCityCode(officeOfExchangeVOForDOE.getCityCode());

				rateAuditVO.setOrigin(findNearestAirportOfCity(mailbagVO.getCompanyCode(),mailbagVO.getOoe()));
				rateAuditVO.setDestination(findNearestAirportOfCity(mailbagVO.getCompanyCode(),mailbagVO.getDoe()));


				rateAuditVO.setConDocNum(mailbagVO.getConsignmentNumber());
				rateAuditVO.setConSerNum(mailbagVO.getConsignmentSequenceNumber());
				rateAuditVO.setOriginOE(mailbagVO.getOoe());
				rateAuditVO.setDestinationOE(mailbagVO.getDoe());
				rateAuditVO.setCategory(mailbagVO.getMailCategoryCode());
				rateAuditVO.setSubClass(mailbagVO.getMailSubclass());
				rateAuditVO.setYear(mailbagVO.getYear());
				rateAuditVO.setDsn(mailbagVO.getDespatchSerialNumber());
				rateAuditVO.setRsn(mailbagVO.getReceptacleSerialNumber());
				rateAuditVO.setHsn(mailbagVO.getHighestNumberedReceptacle());
				rateAuditVO.setRegInd(mailbagVO.getRegisteredOrInsuredIndicator());
				if(mailbagVO.getWeight()!=null)
				rateAuditVO.setGrossWt(mailbagVO.getWeight().getSystemValue());
				if(mailbagVO.getScannedDate()!=null){
					rateAuditVO.setReceivedDate(mailbagVO.getScannedDate());
					}else{
						rateAuditVO.setReceivedDate( new LocalDate(mailbagVO.getScannedPort(), Location.ARP,true));
					}
				rateAuditVO.setTransfercarcode(mailbagVO.getTransferFromCarrier());
				rateAuditVO.setMailCompanyCode(mailbagVO.getMailCompanyCode());
				Collection<RateAuditDetailsVO> rateAuditDetails=new ArrayList<RateAuditDetailsVO>();
				RateAuditDetailsVO rateAuditDetailsVO=new RateAuditDetailsVO();
				rateAuditDetailsVO.setBillingBasis(rateAuditVO.getMailbagId());
				rateAuditDetailsVO.setMailbagId(rateAuditVO.getMailbagId());
				rateAuditDetailsVO.setMailSequenceNumber(rateAuditVO.getMailSequenceNumber());
				rateAuditDetailsVO.setCarrierid(mailbagVO.getCarrierId());
				rateAuditDetailsVO.setCarrierCode(mailbagVO.getCarrierCode());
				rateAuditDetailsVO.setFlightno(mailbagVO.getFlightNumber());
				rateAuditDetailsVO.setFlightseqno((int)mailbagVO.getFlightSequenceNumber());
				rateAuditDetailsVO.setFlightDate(mailbagVO.getFlightDate());
				rateAuditDetailsVO.setSegSerNo(mailbagVO.getSegmentSerialNumber());
				if(mailbagVO.getFlightDate()!=null && mailbagVO.getFlightSequenceNumber()<=0 ){
					rateAuditDetailsVO.setFlightno(containerDetailsVO.getFlightNumber());
					rateAuditDetailsVO.setFlightseqno((int)containerDetailsVO.getFlightSequenceNumber());
					rateAuditDetailsVO.setFlightDate(containerDetailsVO.getFlightDate());
					rateAuditDetailsVO.setSegSerNo(containerDetailsVO.getSegmentSerialNumber());
				}
				rateAuditDetailsVO.setContainerNumber(containerDetailsVO.getContainerNumber());
				rateAuditDetailsVO.setContainerType(containerDetailsVO.getContainerType());
				rateAuditDetailsVO.setPaBuiltFlag(containerDetailsVO.getPaBuiltFlag());
				rateAuditDetailsVO.setUldno(containerDetailsVO.getContainerNumber());
				rateAuditDetailsVO.setSecFrom(containerDetailsVO.getPol());
				rateAuditDetailsVO.setSecTo(containerDetailsVO.getPou());
				rateAuditDetails.add(rateAuditDetailsVO);
				rateAuditVO.setRateAuditDetails(rateAuditDetails);
				rateAuditVOs.add(rateAuditVO);
			}
			}*/
			}

		}
	}


	return rateAuditVOs;

}

public String findNearestAirportOfCity(String companyCode, String exchangeCode) throws SystemException {
	Collection<String> officeOfExchanges = new ArrayList<String>();
	officeOfExchanges.add(exchangeCode);
	Collection<ArrayList<String>> groupedOECityArpCodes = findCityAndAirportForOE(companyCode, officeOfExchanges);
        if (groupedOECityArpCodes != null && groupedOECityArpCodes.size() > 0) {
            for (ArrayList<String> cityAndArpForOE : groupedOECityArpCodes) {
                if (cityAndArpForOE.size() == 3) {
                    if (exchangeCode != null && exchangeCode.length() > 0 && exchangeCode.equals(cityAndArpForOE.get(0))) {
					return cityAndArpForOE.get(2);

				}
			}
		}
	}
	return null;
}

public Collection<RateAuditVO> createRateAuditVOs(OperationalFlightVO toFlightVO,
		ContainerVO containerVO, Collection<MailbagVO> mailbags, String triggerPoint,boolean provisionalRateImport) throws SystemException {

        Collection<RateAuditVO> rateAuditVOs = new ArrayList<RateAuditVO>();
        Collection<RateAuditDetailsVO> rateAuditDetails = new ArrayList<RateAuditDetailsVO>();
        RateAuditVO rateAuditVO = new RateAuditVO();
        RateAuditDetailsVO rateAuditDetailsVO = new RateAuditDetailsVO();
        MailbagVO mailbagVO = null;
        //Added by A-7794 as part of ICRD-232299
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        String importEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
        if (!provisionalRateImport && importEnabled != null &&((importEnabled.contains("D")  && !logonAttributes.getOwnAirlineCode().equals(toFlightVO.getCarrierCode())) || importEnabled.contains("M"))) {
            if (!mailbags.isEmpty()) {
                	for(MailbagVO mailbagVo : mailbags){//IASCB-35658
                	rateAuditVO = new RateAuditVO();
                    rateAuditVO.setCompanyCode(toFlightVO.getCompanyCode());
                    rateAuditVO.setTriggerPoint(triggerPoint);
                    rateAuditDetailsVO.setCarrierCode(toFlightVO.getCarrierCode());
                    rateAuditDetailsVO.setCarrierid(toFlightVO.getCarrierId());
                    rateAuditVO.setMailSequenceNumber(mailbagVo.getMailSequenceNumber());
                    rateAuditDetailsVO.setMailSequenceNumber(mailbagVo.getMailSequenceNumber());
                    if (MailConstantsVO.MAIL_STATUS_REASSIGNMAIL.equals(triggerPoint) && toFlightVO.getSegSerNum() > 0) {
                        rateAuditDetailsVO.setSegSerNo(toFlightVO.getSegSerNum());
                    } else {
                        rateAuditDetailsVO.setSegSerNo(containerVO.getSegmentSerialNumber());
                    }
                    if(!toFlightVO.getCarrierCode().equals(toFlightVO.getOwnAirlineCode()) && toFlightVO.getFlightNumber().equals("-1") && toFlightVO.getFlightSequenceNumber() == -1 && containerVO!= null && containerVO.getFlightDate() != null){
                    	rateAuditDetailsVO.setCarrierCode(toFlightVO.getOwnAirlineCode());
                    	rateAuditDetailsVO.setFlightno(containerVO.getFlightNumber());
                        rateAuditDetailsVO.setFlightseqno((int) containerVO.getFlightSequenceNumber());
                        rateAuditDetailsVO.setFlightDate(new LocalDate(containerVO.getFlightDate(), true));
                        rateAuditDetailsVO.setSegSerNo(containerVO.getSegmentSerialNumber());
                        rateAuditDetailsVO.setCarrierid(toFlightVO.getOwnAirlineId());
                    }else{
                    	rateAuditDetailsVO.setFlightno(toFlightVO.getFlightNumber());
                        rateAuditDetailsVO.setFlightseqno((int) toFlightVO.getFlightSequenceNumber());
                        rateAuditDetailsVO.setFlightDate(toFlightVO.getFlightDate());
                    }
                    rateAuditDetails.add(rateAuditDetailsVO);
                    rateAuditVO.setRateAuditDetails(rateAuditDetails);
                    rateAuditVOs.add(rateAuditVO);
                }

            }
        } else {
            if (mailbags != null && mailbags.size() > 0) {
                mailbagVO = ((ArrayList<MailbagVO>) mailbags).get(0);
                rateAuditVO.setCompanyCode(toFlightVO.getCompanyCode());
                rateAuditVO.setTriggerPoint(triggerPoint);
                rateAuditVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                rateAuditDetailsVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                rateAuditDetailsVO.setCarrierCode(toFlightVO.getCarrierCode());
                rateAuditDetailsVO.setCarrierid(toFlightVO.getCarrierId());
                rateAuditDetailsVO.setFlightno(toFlightVO.getFlightNumber());
                rateAuditDetailsVO.setFlightseqno((int) toFlightVO.getFlightSequenceNumber());
				rateAuditDetailsVO.setFlightDate(toFlightVO.getFlightDate());
				rateAuditDetailsVO.setSource(triggerPoint);
				rateAuditVO.setScannedDate(mailbagVO.getScannedDate());
				//ICRD-304364
                if (MailConstantsVO.MAIL_STATUS_REASSIGNMAIL.equals(triggerPoint) && toFlightVO.getSegSerNum() > 0) {
				rateAuditDetailsVO.setSegSerNo(toFlightVO.getSegSerNum());
                } else {
				rateAuditDetailsVO.setSegSerNo(mailbagVO.getSegmentSerialNumber());
				}

				rateAuditDetails.add(rateAuditDetailsVO);
				rateAuditVO.setRateAuditDetails(rateAuditDetails);
				rateAuditVOs.add(rateAuditVO);
			/*for(MailbagVO mailbagVO:mailbags){




				RateAuditVO rateAuditVO=new RateAuditVO();
				Mailbag mailbag = null;
				try {
					mailbag = Mailbag.find(createMailbagPK(
							mailbagVO.getCompanyCode(), mailbagVO));
				} catch (FinderException e) {
					mailbag = null;
				}
				if(mailbag!=null){
					rateAuditVO.setCompanyCode(mailbagVO.getCompanyCode());
					rateAuditVO.setTriggerPoint(triggerPoint);
					rateAuditVO.setBillingBasis(mailbag.getMailIdr());
					rateAuditVO.setMailbagId(mailbag.getMailIdr());
					rateAuditVO.setOperationFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
					rateAuditVO.setPcs("1");
					rateAuditVO.setMailSequenceNumber(mailbag.getMailbagPK().getMailSequenceNumber());
					OfficeOfExchangeVO officeOfExchangeVOForOOE=validateOfficeOfExchange(mailbagVO.getCompanyCode(),mailbag.getOrginOfficeOfExchange());
					rateAuditVO.setGpaCode(officeOfExchangeVOForOOE.getPoaCode())	;
					rateAuditVO.setOriginCityCode(officeOfExchangeVOForOOE.getCityCode());
					OfficeOfExchangeVO officeOfExchangeVOForDOE=validateOfficeOfExchange(mailbagVO.getCompanyCode(),mailbag.getDestinationOfficeOfExchange());
					rateAuditVO.setDestinationCityCode(officeOfExchangeVOForDOE.getCityCode());
					rateAuditVO.setOrigin(findNearestAirportOfCity(mailbagVO.getCompanyCode(),mailbag.getOrginOfficeOfExchange()));
					rateAuditVO.setDestination(findNearestAirportOfCity(mailbagVO.getCompanyCode(),mailbag.getDestinationOfficeOfExchange()));
					rateAuditVO.setConDocNum(mailbag.getConsignmentNumber());
					rateAuditVO.setConSerNum(mailbag.getConsignmentSequenceNumber());
					rateAuditVO.setOriginOE(mailbag.getOrginOfficeOfExchange());
					rateAuditVO.setDestinationOE(mailbag.getDestinationOfficeOfExchange());
					rateAuditVO.setCategory(mailbag.getMailCategory());
					rateAuditVO.setSubClass(mailbag.getMailSubClass());
					rateAuditVO.setYear(mailbag.getYear());
					rateAuditVO.setDsn(mailbag.getDespatchSerialNumber());
					rateAuditVO.setRsn(mailbag.getReceptacleSerialNumber());
					rateAuditVO.setHsn(mailbag.getHighestNumberedReceptacle());
					rateAuditVO.setRegInd(mailbag.getRegisteredOrInsuredIndicator());
					rateAuditVO.setGrossWt(mailbag.getWeight());
					if(mailbagVO.getScannedDate()!=null){
						rateAuditVO.setReceivedDate(mailbagVO.getScannedDate());
						}else{
							rateAuditVO.setReceivedDate( new LocalDate(containerVO.getAssignedPort(), Location.ARP,true));
						}
					rateAuditVO.setTransfercarcode(mailbagVO.getTransferFromCarrier());




				if(toFlightVO!=null){
				RateAuditDetailsVO rateAuditDetailsVO=new RateAuditDetailsVO();
				rateAuditDetailsVO.setBillingBasis(rateAuditVO.getBillingBasis());
				rateAuditDetailsVO.setMailbagId(rateAuditVO.getMailbagId());
				rateAuditDetailsVO.setMailSequenceNumber(rateAuditVO.getMailSequenceNumber());
								ConsignmentDocumentVO consignmentDocumentVOTofind = <<< merge needed >>>
								// Delete insert is applied for avoiding
								// performance issue iterating mail bags and
				rateAuditDetailsVO.setFlightseqno((int)toFlightVO.getFlightSequenceNumber());
ng others
				if(containerVO!=null){
				rateAuditDetailsVO.setContainerNumber(containerVO.getContainerNumber());
				rateAuditDetailsVO.setContainerType(containerVO.getType());
				rateAuditDetailsVO.setPaBuiltFlag(containerVO.getPaBuiltFlag());
				rateAuditDetailsVO.setUldno(containerVO.getContainerNumber());
				rateAuditDetailsVO.setSecFrom(containerVO.getAssignedPort());
				rateAuditDetailsVO.setSecTo(containerVO.getPou());
				}else{
					rateAuditDetailsVO.setContainerNumber(mailbagVO.getUldNumber());
					rateAuditDetailsVO.setContainerType(mailbagVO.getContainerType());
					rateAuditDetailsVO.setPaBuiltFlag(mailbagVO.getPaBuiltFlag());
					rateAuditDetailsVO.setUldno(mailbagVO.getUldNumber());
					rateAuditDetailsVO.setSecFrom(mailbagVO.getScannedPort());
					rateAuditDetailsVO.setSecTo(mailbagVO.getPou());
				}
				rateAuditDetails.add(rateAuditDetailsVO);
				}
				}

				rateAuditVO.setRateAuditDetails(rateAuditDetails);
				rateAuditVOs.add(rateAuditVO);
			}*/
			}
        }


	return rateAuditVOs;


}

public Collection<RateAuditVO> createRateAuditVOs(
		ContainerVO containerVO,
            Collection<MailbagVO> mailbags, String triggerPoint,boolean provisionalRateImport) throws SystemException {

        Collection<RateAuditVO> rateAuditVOs = new ArrayList<RateAuditVO>();
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        Collection<RateAuditDetailsVO> rateAuditDetails = new ArrayList<RateAuditDetailsVO>();
        RateAuditDetailsVO rateAuditDetailsVO = new RateAuditDetailsVO();
        RateAuditVO rateAuditVO = new RateAuditVO();
        //Added by A-7794 as part of ICRD-232299
        String importEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
        if (!provisionalRateImport && importEnabled != null &&(importEnabled.contains("D")  && !logonAttributes.getOwnAirlineCode().equals(containerVO.getCarrierCode())) ) {
            if (mailbags != null && mailbags.size() > 0) {
                if (!logonAttributes.getOwnAirlineCode().equals(containerVO.getCarrierCode()) ) {
                	for(MailbagVO mailbagVO:mailbags){//IASCB-35658
                	rateAuditVO = new RateAuditVO();
                    rateAuditVO.setCompanyCode(containerVO.getCompanyCode());
                    rateAuditVO.setTriggerPoint(triggerPoint);
                    rateAuditVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                    rateAuditDetailsVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                    rateAuditDetailsVO.setCarrierCode(mailbagVO.getCarrierCode());
                    rateAuditDetailsVO.setCarrierid(mailbagVO.getCarrierId());
                    rateAuditDetailsVO.setFlightno(mailbagVO.getFlightNumber());
                    rateAuditDetailsVO.setFlightseqno((int) mailbagVO.getFlightSequenceNumber());
                    rateAuditDetailsVO.setFlightDate(mailbagVO.getFlightDate());
                    rateAuditDetailsVO.setSegSerNo(mailbagVO.getSegmentSerialNumber());
                    rateAuditDetails.add(rateAuditDetailsVO);
                    rateAuditVO.setRateAuditDetails(rateAuditDetails);
                    rateAuditVOs.add(rateAuditVO);
                	}
                } else if(containerVO.isFromDeviationList()) {
                	for(MailbagVO mailbagVO:mailbags){//IASCB-60028
                    	rateAuditVO = new RateAuditVO();
                        rateAuditVO.setCompanyCode(containerVO.getCompanyCode());
                        rateAuditVO.setTriggerPoint("DEV");
                        rateAuditVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                        rateAuditDetailsVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                        rateAuditDetailsVO.setCarrierCode(mailbagVO.getCarrierCode());
                        rateAuditDetailsVO.setCarrierid(mailbagVO.getCarrierId());
                        rateAuditDetailsVO.setFlightno(mailbagVO.getFlightNumber());
                        rateAuditDetailsVO.setFlightseqno((int) mailbagVO.getFlightSequenceNumber());
                        rateAuditDetailsVO.setFlightDate(mailbagVO.getFlightDate());
                        rateAuditDetailsVO.setSegSerNo(mailbagVO.getSegmentSerialNumber());
                        rateAuditDetails.add(rateAuditDetailsVO);
                        rateAuditVO.setRateAuditDetails(rateAuditDetails);
                        rateAuditVOs.add(rateAuditVO);
                    	}
                }else if(containerVO.isHandoverReceived()){
                	for(MailbagVO mailbagVO:mailbags){//IASCB-60028
                		if(MailConstantsVO.MAIL_STATUS_DELIVERED.equals(mailbagVO.getLatestStatus())||MailConstantsVO.MAIL_STATUS_TRANSFERRED.equals(mailbagVO.getLatestStatus())){
                    	rateAuditVO = new RateAuditVO();
                        rateAuditVO.setCompanyCode(containerVO.getCompanyCode());
                        rateAuditVO.setTriggerPoint("DEV");
                        rateAuditVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                        rateAuditDetailsVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                        rateAuditDetailsVO.setCarrierCode(mailbagVO.getCarrierCode());
                        rateAuditDetailsVO.setCarrierid(mailbagVO.getCarrierId());
                        rateAuditDetailsVO.setFlightno(mailbagVO.getFlightNumber());
                        rateAuditDetailsVO.setFlightseqno((int) mailbagVO.getFlightSequenceNumber());
                        rateAuditDetailsVO.setFlightDate(mailbagVO.getFlightDate());
                        rateAuditDetailsVO.setSegSerNo(mailbagVO.getSegmentSerialNumber());
                        rateAuditDetails.add(rateAuditDetailsVO);
                        rateAuditVO.setRateAuditDetails(rateAuditDetails);
                        rateAuditVOs.add(rateAuditVO);
                		}
                    }

                }
            }
        }  
        else {
if(provisionalRateImport || (importEnabled != null && importEnabled.contains("M") && mailbags != null && mailbags.size() > 0)) {
           
            	
				for (MailbagVO mailbagVo : mailbags) {
					rateAuditVO = new RateAuditVO();
					Collection<RateAuditDetailsVO> rateAuditDetailsVos = new ArrayList<>(); 
                rateAuditVO.setCompanyCode(containerVO.getCompanyCode());
                rateAuditVO.setTriggerPoint(triggerPoint);
                rateAuditDetailsVO.setSource(triggerPoint);
                rateAuditVO.setScannedDate(mailbagVo.getScannedDate());
                rateAuditVO.setMailSequenceNumber(mailbagVo.getMailSequenceNumber());
                rateAuditDetailsVO.setCarrierCode(containerVO.getCarrierCode());
                rateAuditDetailsVO.setCarrierid(containerVO.getCarrierId());
                rateAuditDetailsVO.setFlightno(containerVO.getFlightNumber());
                rateAuditDetailsVO.setFlightseqno((int) containerVO.getFlightSequenceNumber());
				rateAuditDetailsVO.setFlightDate(containerVO.getFlightDate());
				rateAuditDetailsVO.setSegSerNo(containerVO.getSegmentSerialNumber());	
				rateAuditDetailsVos.add(rateAuditDetailsVO);
				rateAuditVO.setRateAuditDetails(rateAuditDetailsVos);
				rateAuditVOs.add(rateAuditVO);
            	}
			/*for(MailbagVO mailbagVO:mailbags){




				RateAuditVO rateAuditVO=new RateAuditVO();

				Mailbag mailbag = null;
				try {
					mailbag = Mailbag.find(createMailbagPK(
							mailbagVO.getCompanyCode(), mailbagVO));
				} catch (FinderException e) {
					mailbag = null;
				}
				if(mailbag!=null){
					rateAuditVO.setCompanyCode(mailbagVO.getCompanyCode());
					rateAuditVO.setTriggerPoint(triggerPoint);
					rateAuditVO.setBillingBasis(mailbag.getMailIdr());
					rateAuditVO.setMailbagId(mailbag.getMailIdr());
					rateAuditVO.setOperationFlag(MailConstantsVO.OPERATION_FLAG_UPDATE);
					rateAuditVO.setPcs("1");
					rateAuditVO.setMailSequenceNumber(mailbag.getMailbagPK().getMailSequenceNumber());
					OfficeOfExchangeVO officeOfExchangeVOForOOE=validateOfficeOfExchange(mailbagVO.getCompanyCode(),mailbag.getOrginOfficeOfExchange());
					rateAuditVO.setGpaCode(officeOfExchangeVOForOOE.getPoaCode())	;
					rateAuditVO.setOriginCityCode(officeOfExchangeVOForOOE.getCityCode());
					OfficeOfExchangeVO officeOfExchangeVOForDOE=validateOfficeOfExchange(mailbagVO.getCompanyCode(),mailbag.getDestinationOfficeOfExchange());
					rateAuditVO.setDestinationCityCode(officeOfExchangeVOForDOE.getCityCode());
					rateAuditVO.setOrigin(findNearestAirportOfCity(mailbagVO.getCompanyCode(),mailbag.getOrginOfficeOfExchange()));
					rateAuditVO.setDestination(findNearestAirportOfCity(mailbagVO.getCompanyCode(),mailbag.getDestinationOfficeOfExchange()));
					rateAuditVO.setConDocNum(mailbag.getConsignmentNumber());
					rateAuditVO.setConSerNum(mailbag.getConsignmentSequenceNumber());
					rateAuditVO.setOriginOE(mailbag.getOrginOfficeOfExchange());
					rateAuditVO.setDestinationOE(mailbag.getDestinationOfficeOfExchange());
					rateAuditVO.setCategory(mailbag.getMailCategory());
					rateAuditVO.setSubClass(mailbag.getMailSubClass());
					rateAuditVO.setYear(mailbag.getYear());
					rateAuditVO.setDsn(mailbag.getDespatchSerialNumber());
					rateAuditVO.setRsn(mailbag.getReceptacleSerialNumber());
					rateAuditVO.setHsn(mailbag.getHighestNumberedReceptacle());
					rateAuditVO.setRegInd(mailbag.getRegisteredOrInsuredIndicator());
					rateAuditVO.setGrossWt(mailbag.getWeight());
					if(mailbagVO.getScannedDate()!=null){
						rateAuditVO.setReceivedDate(mailbagVO.getScannedDate());
						}else{
							rateAuditVO.setReceivedDate( new LocalDate(mailbagVO.getScannedPort(), Location.ARP,true));
						}
					rateAuditVO.setTransfercarcode(mailbagVO.getTransferFromCarrier());
				}
				Collection<RateAuditDetailsVO> rateAuditDetails=new ArrayList<RateAuditDetailsVO>();
				RateAuditDetailsVO rateAuditDetailsVO=new RateAuditDetailsVO();
				rateAuditDetailsVO.setBillingBasis(rateAuditVO.getBillingBasis());
				rateAuditDetailsVO.setMailbagId(rateAuditVO.getMailbagId());
				rateAuditDetailsVO.setMailSequenceNumber(rateAuditVO.getMailSequenceNumber());
				rateAuditDetailsVO.setContainerNumber(containerVO.getContainerNumber());
				rateAuditDetailsVO.setContainerType(containerVO.getType());
				rateAuditDetailsVO.setPaBuiltFlag(containerVO.getPaBuiltFlag());
				rateAuditDetailsVO.setUldno(containerVO.getContainerNumber());
				rateAuditDetailsVO.setSecFrom(containerVO.getAssignedPort());
				rateAuditDetailsVO.setSecTo(containerVO.getPou());
				rateAuditDetails.add(rateAuditDetailsVO);
				rateAuditVO.setRateAuditDetails(rateAuditDetails);
				rateAuditVOs.add(rateAuditVO);
			}*/
			
        }
        	
        }


	return rateAuditVOs;


}

public void closeInboundFlightAfterULDAcquitalForProxy(OperationalFlightVO operationalFlightVO)
            throws SystemException {
        try {
		new MailtrackingDefaultsProxy().closeInboundFlightAfterULDAcquitalForProxy(operationalFlightVO);
        } catch (Exception ex) {
		ex.getMessage();
}
}

	public void releasingMailsForULDAcquittanceForProxy(MailArrivalVO mailArrivalVO,
                                                        OperationalFlightVO operationalFlightVO) throws SystemException {
        try {
            new MailtrackingDefaultsProxy().releasingMailsForULDAcquittance(mailArrivalVO, operationalFlightVO);
        } catch (Exception ex) {
			ex.getMessage();
		}
	}

			/**
			 * 	Method		:	MailController.createMailbagsMap
			 *	Added by 	:	U-1267 on Nov 1, 2017
			 * 	Used for 	:	ICRD-211205
			 *	Parameters	:	@param containerDetailsVOs
			 *	Parameters	:	@param operationalFlightVO
			 *	Parameters	:	@return
			 *	Return type	: 	HashMap<String,Collection<MailbagVO>>
			 */
				private HashMap<String, Collection<MailbagVO>> createMailbagsMap(
            Collection<ContainerDetailsVO> containerDetailsVOs, OperationalFlightVO operationalFlightVO)
            throws SystemException {
					HashMap<String, Collection<MailbagVO>> mailbagsMap = null;
					HashMap<String, Collection<MailbagVO>> newMailbagsMap = new HashMap<>();
					for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
						Collection<MailbagVO> mailbagVOs = containerDetailsVO
								.getMailDetails();
						Collection<DSNVO> dsnVOs = containerDetailsVO
								.getDsnVOs();
						if (mailbagVOs != null && mailbagVOs.size() > 0) {
                mailbagsMap = groupMailbagVOsForAutoAttach(mailbagVOs, operationalFlightVO);
							for (Map.Entry<String, Collection<MailbagVO>> entry : mailbagsMap
									.entrySet()) {
								if (!newMailbagsMap.containsKey(entry.getKey())) {
									newMailbagsMap.put(entry.getKey(), entry.getValue());
								} else {
									newMailbagsMap.get(entry.getKey()).addAll(entry.getValue());
								}
							}
            } else if (dsnVOs != null && dsnVOs.size() > 0) {
                try {
                    mailbagVOs = constructDAO().findMailbagVOsForDsnVOs(containerDetailsVO);
							} catch (PersistenceException exception) {
								throw new SystemException(exception.getMessage(), exception);
							}
							if (mailbagVOs != null && mailbagVOs.size() > 0) {
                    mailbagsMap = groupMailbagVOsForAutoAttach(mailbagVOs, operationalFlightVO);
								//newMailbagsMap.putAll(mailbagsMap);
								for (Map.Entry<String, Collection<MailbagVO>> entry : mailbagsMap   //Modified by A-8164 for ICRD-259659
										.entrySet()) {
									if (!newMailbagsMap.containsKey(entry.getKey())) {
										newMailbagsMap.put(entry.getKey(), entry.getValue());
									} else {
										newMailbagsMap.get(entry.getKey()).addAll(entry.getValue());
									}
								}
							}
							containerDetailsVO.setMailDetails(mailbagVOs);
							
						}
}
					return newMailbagsMap;
				}

    /**
			 * 	Method		:	MailController.findAgentCodeForPA
			 *	Added by 	:	U-1267 on Nov 1, 2017
			 * 	Used for 	:	ICRD-211205
			 *	Parameters	:	@param companyCode
			 *	Parameters	:	@param officeOfExchange
			 *	Parameters	:	@return
			 *	Return type	: 	String
			 */
			public String findAgentCodeForPA(String companyCode, String officeOfExchange)
					throws SystemException {
				log.entering(CLASS, "findAgentCodeOfPA");
				return OfficeOfExchange.findAgentCodeForPA(companyCode,
						officeOfExchange);
			}

    /**
			 * 	Method		:	MailController.performAttachAWBDetailsForMailbag
			 *	Added by 	:	U-1267 on Nov 2, 2017
			 * 	Used for 	:	ICRD-211205
			 *	Parameters	:	@param mailbagVOs
			 *	Parameters	:	@param shipmentValidationVO
			 *	Parameters	:	@throws SystemException
			 *	Return type	: 	void
			 */
			public void performAttachAWBDetailsForMailbag(
					Collection<MailbagVO> mailbagVOs,
					ShipmentValidationVO shipmentValidationVO) throws SystemException {
				if (mailbagVOs != null && mailbagVOs.size() > 0) {
					for (MailbagVO mailbagVO : mailbagVOs) {
						Mailbag mailbag = null;
						MailbagPK mailbagPK = new MailbagPK();
						mailbagPK.setCompanyCode(mailbagVO.getCompanyCode());
						try {
							mailbagPK.setMailSequenceNumber(Mailbag
									.findMailBagSequenceNumberFromMailIdr(
											mailbagVO.getMailbagId(),
											mailbagVO.getCompanyCode()));
						} catch (SystemException e) {
							throw new SystemException(e.getMessage());
						}
						try {
							mailbag = Mailbag.find(mailbagPK);
						} catch (FinderException e) {
							throw new SystemException(e.getMessage());
						}
						mailbagVO.setMailSequenceNumber(mailbagPK.getMailSequenceNumber());
						mailbag.performAttachAWBDetailsForMailbag(mailbagVO,
								shipmentValidationVO);
					}
				}
			}

    /**
			 * 	Method		:	MailController.groupMailbagVOsForAutoAttach
			 *	Added by 	:	U-1267 on 08-Nov-2017
			 * 	Used for 	:	ICRD-211205
			 *	Parameters	:	@param mailbagVOs
			 *	Parameters	:	@param operationalFlightVO
			 *	Parameters	:	@return
			 *	Return type	: 	HashMap<String,Collection<MailbagVO>>
			 */
			private HashMap<String, Collection<MailbagVO>> groupMailbagVOsForAutoAttach(
					Collection<MailbagVO> mailbagVOs,
					OperationalFlightVO operationalFlightVO) {
				HashMap<String, Collection<MailbagVO>> mailbagsMap = new HashMap<>();
				Collection<MailbagVO> newMailbagVOs = null;
				String key = null;
				for (MailbagVO mailbagVO : mailbagVOs) {
					StringBuilder sb = new StringBuilder();
					if (!MailConstantsVO.OPERATION_OUTBOUND.equals(operationalFlightVO
							.getDirection())) {
						key = sb.append(mailbagVO.getOoe()).append(HYPHEN)
								.append(mailbagVO.getDoe()).append(HYPHEN)
                                .append(isNotNullAndEmpty(mailbagVO.getConsignmentNumber())?mailbagVO.getConsignmentNumber():"").append(HYPHEN)
                                .append(mailbagVO.getConsignmentSequenceNumber())
                                .toString().trim();
					} else {
						key = sb.append(mailbagVO.getOoe()).append(HYPHEN)
								.append(mailbagVO.getDoe()).append(HYPHEN)
								.append(mailbagVO.getPou()).append(HYPHEN)
                                .append(isNotNullAndEmpty(mailbagVO.getConsignmentNumber())?mailbagVO.getConsignmentNumber():"").append(HYPHEN)
                                .append(mailbagVO.getConsignmentSequenceNumber())
                                .toString().trim();
					}
            if ((!mailbagsMap.containsKey(key)) && (mailbagVO.getDocumentNumber() == null)) { //Modified by A-8164 for ICRD-259659
                newMailbagVOs = new ArrayList<MailbagVO>();
						newMailbagVOs.add(mailbagVO);
						mailbagsMap.put(key, newMailbagVOs);
            } else if (mailbagVO.getDocumentNumber() == null) { //Modified by A-8164 for ICRD-259659
						mailbagsMap.get(key).add(mailbagVO);
					}
				}
				return mailbagsMap;
			}

    /**
			 * 	Method		:	MailController.detachAWBDetails
			 *	Added by 	:	U-1267 on 09-Nov-2017
			 * 	Used for 	:	ICRD-211205
			 *	Parameters	:	@param containerDetailsVO
			 *	Parameters	:	@throws SystemException
			 *	Return type	: 	void
			 */
			public void detachAWBDetails(ContainerDetailsVO containerDetailsVO)
						throws SystemException {
					Collection<MailbagVO> mailbagVOs = null;
					Boolean isMailAsAWB=false;
					if (containerDetailsVO != null) {
						// mailbagVOs = containerDetailsVO.getMailDetails();
						// if (mailbagVOs == null || mailbagVOs.size() == 0) {
						try {
							mailbagVOs = constructDAO().findMailbagVOsForDsnVOs(
									containerDetailsVO);
						} catch (PersistenceException exception) {
							throw new SystemException(exception.getMessage(), exception);
						}
						// }
						if (mailbagVOs != null && mailbagVOs.size() > 0) {
							isMailAsAWB=constructDAO().isMailAsAwb(mailbagVOs.iterator().next());
							if(isMailAsAWB){
							throw new SystemException(MAILAWB_STATUS_DETACH);
							}
							try {
								dettachMailBookingDetails(mailbagVOs);
							} catch (SystemException ex) {
								log.log(Log.FINE,
										"SystemException while detaching" + ex.getMessage());
							}
						Iterator<MailbagVO> iterator = mailbagVOs.iterator();
					    while(iterator.hasNext())	{
							MailbagVO mailbagVOsForDetach = iterator.next();
							String documentNumber =mailbagVOsForDetach.getDocumentNumber();
							if (documentNumber == null || documentNumber.trim().isEmpty()) {
								iterator.remove();

							}
						}
						}
						//added by a-7779 for ICRD-342886 starts
						//Operations Update
						//During Detach AWB, the no of pieces and weight should be deducted from cargo ops module based on
						//the detached mailbags and updated in various screens including capture AWB, Customs flight listing screen etc.
						LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
								.getLogonAttributesVO();
						OperationsShipmentProxy operationsShipmentProxy = new OperationsShipmentProxy();
						MailbagVO  mailbagVO = ((ArrayList<MailbagVO>) mailbagVOs).get(0);
						ShipmentDetailFilterVO shipmentDetailFilterVO = new ShipmentDetailFilterVO();
						shipmentDetailFilterVO.setCompanyCode(mailbagVO
								.getCompanyCode());
						shipmentDetailFilterVO.setOwnerId(mailbagVO.getDocumentOwnerIdr());
						shipmentDetailFilterVO.setMasterDocumentNumber(mailbagVO
								.getDocumentNumber());
						shipmentDetailFilterVO.setDuplicateNumber(mailbagVO
								.getDuplicateNumber());
						shipmentDetailFilterVO.setSequenceNumber(mailbagVO
								.getSequenceNumber());
						ShipmentDetailVO shipmentDetailVO = operationsShipmentProxy
								.findShipmentDetails(shipmentDetailFilterVO);
						int shipmentPcs = shipmentDetailVO.getStatedPieces();
						int dettachedPcs = mailbagVOs.size();
						int remainingPcs = shipmentPcs-dettachedPcs;
						if(remainingPcs==0){//Detaching all mailbags from AWB should ideally delete the AWB and return AWB to stock.
							ShipmentValidationVO shipmentValidationVO = new ShipmentValidationVO();
						    shipmentValidationVO.setCompanyCode(shipmentDetailVO.getCompanyCode());
						    shipmentValidationVO.setAirportCode(logonAttributes.getAirportCode());
						    shipmentValidationVO.setOrigin(shipmentDetailVO.getOrigin());
						    shipmentValidationVO.setDocumentNumber(shipmentDetailVO
						      .getMasterDocumentNumber());
						    shipmentValidationVO.setDuplicateNumber(shipmentDetailVO
						      .getDuplicateNumber());
						    shipmentValidationVO.setMasterDocumentNumber(shipmentDetailVO.getMasterDocumentNumber());
						    shipmentValidationVO.setOwnerId(shipmentDetailVO.getOwnerId());
						    shipmentValidationVO.setSequenceNumber(shipmentDetailVO
						      .getSequenceNumber());
						    shipmentValidationVO.setShipmentPrefix(shipmentDetailVO
						      .getShipmentPrefix());
						    shipmentValidationVO.setShipmentStatus(shipmentDetailVO.getShipmentStatus());
						    this.log.log(3, new Object[] { "shipmentValidationVO ---> ", shipmentValidationVO });
						    try {
								operationsShipmentProxy.deleteAWB(shipmentValidationVO, "AWB");
							} catch (ProxyException e) {
								log.log(Log.FINE, "deleteAWB Exception"+e.getMessage());
							}//we have one delete awb and void functionalitywhcih one need to pick should analyse.
						}else{
						shipmentDetailVO.setStatedPieces(remainingPcs);
						double shipmentWeight = shipmentDetailVO.getStatedWeight().getDisplayValue();
						double dettachedWeight = 0;

						for(MailbagVO  vo : mailbagVOs){
							dettachedWeight = dettachedWeight + vo.getWeight().getDisplayValue();
						}
						double remainingWgt = shipmentWeight-dettachedWeight;
						Measure remainingWgtMeasure = new Measure(UnitConstants.WEIGHT, 0,
								remainingWgt,shipmentDetailVO.getStatedWeight().getDisplayUnit());
						shipmentDetailVO.setStatedWeight(remainingWgtMeasure);
						shipmentDetailVO.setOperationFlag(ShipmentDetailVO.OPERATION_FLAG_UPDATE);
						operationsShipmentProxy.saveShipmentDetails(shipmentDetailVO);
						}
						//added by a-7779 for ICRD-342886 ends
					}
				}

			/**
			 * Method		:	MailController.transferContainersAtExport
			 * Added by 	:	A-7371 on 05-Jan-2018
			 * Used for 	:	ICRD-133987
     *
			 * @param containerVOs
			 * @param operationalFlightVO
			 * @param printFlag
			 * @return
			 * @throws SystemException
			 * @throws ContainerAssignmentException
			 * @throws InvalidFlightSegmentException
			 * @throws ULDDefaultsProxyException
			 * @throws CapacityBookingProxyException
			 * @throws MailBookingException
			 * @throws MailDefaultStorageUnitException
			 * @throws FlightClosedException

			 */
			public TransferManifestVO transferContainersAtExport(Collection<ContainerVO> containerVOs,
					OperationalFlightVO operationalFlightVO, String printFlag)
					throws SystemException, ContainerAssignmentException,
					InvalidFlightSegmentException, ULDDefaultsProxyException,
					CapacityBookingProxyException, MailBookingException, FlightClosedException, MailDefaultStorageUnitException {
				log.entering(CLASS, "transferContainers");
				Collection<ContainerDetailsVO> containerDetailsCollection = null;
				ContainerVO  containerVo = null;
				TransferManifestVO transferManifestVO = new TransferManifestVO();
				/**
				 * This method removes the inventory containers if any, before
				 * proceeding to perform transfer. Container can be in inventory if
				 * transfer happens after performing the arrival
				 */
				 Map<String, Object> transferMap =null;
        if (containerVOs != null && containerVOs.size() > 0) {
            containerVo = new ArrayList<ContainerVO>(containerVOs).get(0);
				}

			
        Collection<ContainerVO> containerVOsForTransferOut= new ArrayList<>();  

        Collection<ContainerVO> containerVOsForTransfer= new ArrayList<>();
        updateContainerForTransfer(containerVOs, operationalFlightVO,containerVOsForTransferOut,containerVOsForTransfer);
       // validateContainersForTransferAtExport(containerVOs, operationalFlightVO);
         if (!containerVOsForTransferOut.isEmpty()){
        	 transferMap= new HashMap<>();
        	 transferMap.put(MailConstantsVO.CONST_CONTAINER_DETAILS,
						createContainerDtlsForTransfermanifest(containerVOsForTransferOut));
         }
         if (checkForContainerTransferOutStatus(operationalFlightVO.getCarrierCode())&&( mailOperationsTransferTransaction())){
        	 operationalFlightVO.setTransferStatus(true);
        	 transferManifestVO.setStatus(MAIL_OPS_TRAEND);
        	 operationalFlightVO.setCstatus(true);
        	 reassignContainers(
        			 containerVOsForTransferOut, operationalFlightVO);
         }
         if(!containerVOsForTransfer.isEmpty()){
        	 reassignContainers(
        			 containerVOsForTransfer, operationalFlightVO);
         }
				
				/*
				 * FOR TRANSFER MANIFEST PRINT
				 */
				AirlineValidationVO fromAirlineValidationVo = null;
				AirlineValidationVO toAirlineValidationVo = null;
				if (transferMap!=null&&transferMap.get(MailConstantsVO.CONST_CONTAINER_DETAILS) != null) {
					containerDetailsCollection = (Collection<ContainerDetailsVO>) transferMap
							.get(MailConstantsVO.CONST_CONTAINER_DETAILS);

					transferManifestVO.setDsnVOs(new ArrayList<DSNVO>());
					for (ContainerDetailsVO container : containerDetailsCollection) {
						if (container.getDsnVOs() != null
								&& !container.getDsnVOs().isEmpty()) {
							transferManifestVO.getDsnVOs()
									.addAll(container.getDsnVOs());
							//partial transfer
							for(DSNVO dsnVO:container.getDsnVOs() ){
								  if(dsnVO.getMailSequenceNumber()>0){
		                        		 String transferManifestId =null;
		                        		 try {
											transferManifestId= constructDAO().findTransferManifestId(dsnVO.getCompanyCode(), dsnVO.getMailSequenceNumber());
										} catch (PersistenceException e) {
											e.getMessage();
										}
		                        		if (transferManifestId!=null && transferManifestId.trim().length()>0){
		                        			  TransferManifestDSN transferManifestDSN=null;
		                        			  TransferManifestDSNPK transferManifestDSNPK=new TransferManifestDSNPK();
		                        			  transferManifestDSNPK.setCompanyCode(dsnVO.getCompanyCode());
		                        			  transferManifestDSNPK.setTransferManifestId(transferManifestId);
		                        			  transferManifestDSNPK.setMailSequenceNumber(dsnVO.getMailSequenceNumber());
		                        			  try {
												transferManifestDSN=TransferManifestDSN.find(transferManifestDSNPK);
											} catch (FinderException e) {
												e.getMessage();
											}
		                        			if (transferManifestDSN!=null){
		                        				transferManifestDSN.setTransferStatus(TRANSER_STATUS_REJECT);
		                        			}
		                        		}
		                        	}

					           }//partial transfer
						}
					}
					transferManifestVO.setCompanyCode(operationalFlightVO
							.getCompanyCode());
					transferManifestVO.setAirPort(operationalFlightVO.getPol());
					/*
					 *	Generate the Key
					 */
            String key = new StringBuilder(
									operationalFlightVO.getOwnAirlineCode()).append(
									operationalFlightVO.getCarrierCode()).toString();
					int transferManifestId = generateTransferManifestSeqNumber(
                    operationalFlightVO.getCompanyCode(), key);
					// Set the other Fields Required ..
            transferManifestVO.setTransferManifestId(key + String.valueOf(transferManifestId));

            transferManifestVO.setTransferredFromCarCode(containerVo
					.getCarrierCode());
					LocalDate date = new LocalDate(
							transferManifestVO.getAirPort(), Location.ARP, true);
					transferManifestVO.setTransferredDate(date);
					transferManifestVO.setTransferredToCarrierCode(operationalFlightVO
							.getCarrierCode());
					transferManifestVO.setTransferredToFltNumber(operationalFlightVO
							.getFlightNumber());
					transferManifestVO.setTransferredFromFltNum(containerVo.getFlightNumber());
					if(containerVo.getFlightNumber()!=null&& containerVo.getFlightSequenceNumber()>0){
				    	   FlightFilterVO flightFilterVO = new FlightFilterVO();
							 flightFilterVO.setCompanyCode(containerVo.getCompanyCode());
							 flightFilterVO.setFlightCarrierId(containerVo.getCarrierId());
							 flightFilterVO.setFlightNumber(containerVo.getFlightNumber());
							 flightFilterVO.setFlightSequenceNumber(containerVo.getFlightSequenceNumber());
				            Collection<FlightValidationVO> flightValidationVOs = validateFlight(flightFilterVO);
				           for(FlightValidationVO flightValidation : flightValidationVOs ){
				        	   containerVo.setFlightDate(flightValidation.getFlightDate());
				    		   }
					}
					transferManifestVO.setFromFltDat(containerVo.getFlightDate());
					transferManifestVO.setTransferredfrmFltSeqNum(containerVo.getFlightSequenceNumber());
					transferManifestVO.setTransferredfrmSegSerNum(containerVo.getSegmentSerialNumber());
					transferManifestVO.setToFltDat(operationalFlightVO.getFlightDate());
					transferManifestVO.setLastUpdateUser(operationalFlightVO.getOperator());
					transferManifestVO.setLastUpdateTime(date);

					try {
						fromAirlineValidationVo = findAirlineDescription(
								operationalFlightVO.getCompanyCode(),
								operationalFlightVO.getOwnAirlineCode());
					} catch (SharedProxyException e) {
						e.getMessage();
					}
					transferManifestVO.setFromCarCodeDesc(fromAirlineValidationVo
							.getAirlineName());
					try {
						toAirlineValidationVo = findAirlineDescription(
								operationalFlightVO.getCompanyCode(),
								operationalFlightVO.getCarrierCode());
					} catch (SharedProxyException e) {
						e.getMessage();
					}
					transferManifestVO.setToCarCodeDesc(toAirlineValidationVo
							.getAirlineName());
		            new TransferManifest(transferManifestVO);

		            for (ContainerDetailsVO container : containerDetailsCollection) {
			            Collection<MailbagVO> mailbagVOs=new ArrayList<>();
		            for(DSNVO dsnVO:container.getDsnVOs() ){
		            	 MailbagPK mailbagPK =new MailbagPK();
		         	    mailbagPK.setCompanyCode(transferManifestVO.getCompanyCode());
		         	    mailbagPK.setMailSequenceNumber(dsnVO.getMailSequenceNumber());
		         	   Mailbag mailbag=new Mailbag();
		         	   try {
		         		mailbag =Mailbag.find(mailbagPK);
		         	} catch (FinderException e) {
		         		log.log(Log.INFO,e.getMessage());
		         	}
		         	  MailbagVO mailbagvo= populateMailbagVofromMailbag(mailbag,transferManifestVO);
		         	  updateTransferOutDetailsForHistory(mailbagvo, transferManifestVO);
		         	mailbagVOs.add(mailbagvo);

		            }
		            MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
		            if(operationalFlightVO.isTransferStatus()) {
		            	mailController.flagHistoryForContainerTransferAtExport( operationalFlightVO,1,mailbagVOs);
		            }else { 
		            	mailController.flagHistoryforTransferInitiation(mailbagVOs);
		            }
		            }
				}
				return transferManifestVO;
			}

			/**
			 * Method		:	MailController.flagHistoryForContainerTransferAtExport
			 * Added by 	:	A-7371 on 05-Jan-2018
			 * Used for 	:	ICRD-133987
     *
			 * @param operationalFlightVO
			 * @param toFlightSegSerNum
			 * @param mailbagVOs
			 * @throws SystemException
			 */
    @Advice(name = "mail.operations.flagHistoryForContainerTransferAtExport", phase = Phase.POST_INVOKE)
			public void flagHistoryForContainerTransferAtExport(
					OperationalFlightVO operationalFlightVO,
            int toFlightSegSerNum, Collection<MailbagVO> mailbagVOs) throws SystemException {
				log.entering(CLASS, "flagHistoryForContainerTransferAtExport");
				log.exiting(CLASS, "flagHistoryForContainerTransferAtExport");

			}
    @Advice(name = "mail.operations.flagAuditForContainerTransferAtExport", phase = Phase.POST_INVOKE)
			public void flagAuditForContainerTransferAtExport(
					OperationalFlightVO operationalFlightVO,
			int toFlightSegSerNum, Collection<MailbagVO> mailbagVOs) throws SystemException {
				log.entering(CLASS, "flagAuditForContainerTransferAtExport");
				log.exiting(CLASS, "flagAuditForContainerTransferAtExport");

	}

			/**
			 * This method validates the container assignment at this port. Also it
			 * removes any destn assigned Containers so tht they'll be moved out of this
     * <p>
     * <p>
     * Method		:	MailController.flagHistoryForContainerTransferAtExport
			 * Added by 	:	A-7371 on 05-Jan-2018
			 * Used for 	:	ICRD-133987
     *
			 * @param containerVOs
			 * @param operationalFlightVO
			 * @throws SystemException
			 * @throws ContainerAssignmentException
			 */
			private void validateContainersForTransferAtExport(
					Collection<ContainerVO> containerVOs,
					OperationalFlightVO operationalFlightVO) throws SystemException,
					ContainerAssignmentException {
				log.entering(CLASS, "validateContainersForTransferAtExport");

				Collection<ContainerVO> containersToRemove = new ArrayList<ContainerVO>();

				for (ContainerVO containerVO : containerVOs) {
					ContainerAssignmentVO containerAssignmentVO = Container
							.findContainerAssignment(containerVO.getCompanyCode(),
									containerVO.getContainerNumber(),
									operationalFlightVO.getPol());
					if (containerAssignmentVO != null) {
							// container exists in ARP
							ContainerVO containerToRem = new ContainerVO();
							BeanHelper.copyProperties(containerToRem, containerVO);
							containerToRem
									.setFlightSequenceNumber(containerAssignmentVO
											.getFlightSequenceNumber());
							containerToRem.setFlightNumber(containerAssignmentVO
									.getFlightNumber());
							containerToRem.setLegSerialNumber(containerAssignmentVO
									.getLegSerialNumber());
							containerToRem.setAcceptanceFlag(containerAssignmentVO
									.getAcceptanceFlag());
							containerToRem.setPou(containerAssignmentVO.getPou());
							containerToRem.setFinalDestination(containerAssignmentVO
									.getDestination());
							containerToRem.setAssignedPort(containerAssignmentVO
									.getAirportCode());
							//Added by A-8527 for IASCB-56563 starts
							if(containerAssignmentVO.getFlightDate()!=null){
							containerToRem.setFlightDate(containerAssignmentVO.getFlightDate());
							}
							//Added by A-8527 for IASCB-56563 Ends
							containersToRemove.add(containerToRem);
					}
				}

				if (containersToRemove != null && containersToRemove.size() > 0) {
					log
							.log(Log.FINEST, "containers to be removed ",
									containersToRemove);
					new ReassignController().reassignContainerFromDestToDest(
							containersToRemove, null);
				}
				log.exiting(CLASS, "validateContainersForTransferAtExport");
			}

			/**
			 * Method		:	MailController.transferMailAtExport
			 * Added by 	:	A-7371 on 05-Jan-2018
			 * Used for 	:	ICRD-133987
     *
			 * @param mailbagVOs
			 * @param toContainerVO
			 * @param toPrintTransferManifest
			 * @return
			 * @throws SystemException
			 * @throws MailBookingException
			 * @throws CapacityBookingProxyException
			 * @throws InvalidFlightSegmentException
			 * @throws MailTrackingBusinessException
			 * @throws FlightClosedException
			 */
			public TransferManifestVO transferMailAtExport(Collection<MailbagVO> mailbagVOs,
					ContainerVO toContainerVO, String toPrintTransferManifest) throws SystemException, InvalidFlightSegmentException, CapacityBookingProxyException, MailBookingException, MailTrackingBusinessException, FlightClosedException {
				// TODO Auto-generated method stub

				log.entering(CLASS, "transferMailAtExport");
				LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
						.getLogonAttributesVO();
				Collection<MailbagVO> mailbagVOsToTransferOutToOtherCarrier =  new ArrayList<MailbagVO>();
				Collection<MailbagVO> mailbagVOsToTransfer =  new ArrayList<MailbagVO>();
        TransferManifestVO transferManifestVO = null;
				Collection<DespatchDetailsVO> despatchDetailsVOsToTransfer =  new ArrayList<DespatchDetailsVO>();

				if (mailbagVOs != null && mailbagVOs.size() > 0) {
            for (MailbagVO mailVO : mailbagVOs) {
						MailbagVO mailbagVO = new MailbagVO();
						BeanHelper.copyProperties(mailbagVO, mailVO);
						// "mailbagVOsToTransfer" is used for Transfer Manifest Print
						Mailbag mailbag=null;
						 try {
				                mailbag = Mailbag.findMailbag(constructMailbagPK(mailbagVO));
				            } catch (FinderException e) {
				                mailbag = null;
				            }
						 if(mailbag!=null && ("MTK009".equals(mailVO.getMailSource()) || "MAIL ENQ".equals(mailVO.getMailSource())) && mailbag.getScannedPort()!=null && !mailbag.getScannedPort().equals(logonAttributes.getAirportCode())){
							 throw new MailTrackingBusinessException(MailTrackingBusinessException.MAILTRACKING_MAILBAGNOTAVAILABLE);
						 }
						 else if(mailbag!=null && (LIST_TRANSFER_MANIFEST_SCREENID.equals(mailVO.getMailSource()))){
							 mailbagVOsToTransfer.add(mailbagVO);
						 }
						 else if ("TRA_OUT"
									.equals(checkForMailBagTransferStatus(mailbagVO, toContainerVO, logonAttributes))&&
									mailOperationsTransferTransaction()) {
						if (mailbagVOsToTransfer.stream().noneMatch(mail->mail.getMailSequenceNumber()==mailVO.getMailSequenceNumber())) {
							mailbagVOsToTransfer.add(mailbagVO);
						}
						if (mailbagVOsToTransferOutToOtherCarrier.stream().noneMatch(mail->mail.getMailSequenceNumber()==mailVO.getMailSequenceNumber())) {
							mailbagVOsToTransferOutToOtherCarrier.add(mailbagVO);
								 }
						toContainerVO.setTransStatus(true);
						 }else if("TRA_OUT".equals(checkForMailBagTransferStatus(mailbagVO,toContainerVO,logonAttributes))){
					    	mailbagVOsToTransferOutToOtherCarrier.add(mailbagVO);
					       }
					    else{
					    if(!"D".equals(mailbagVO.getAcknowledge())){
						mailbagVOsToTransfer.add(mailbagVO);
						 }
					    }
					}
					/*
					 * Transferring Mailbags at export
					 */
            if(!mailbagVOsToTransfer.isEmpty()){
            try {
						transferMailbagsAtExport(mailbagVOsToTransfer, toContainerVO);
            } catch (SystemException e) {
                if ((e.getMessage().contains("No such persistent instance"))) {
						throw new MailTrackingBusinessException(MailTrackingBusinessException.MAILTRACKING_MAILBAGNOTAVAILABLE);
                } else {
                    throw new SystemException(e.getMessage(), e);
						}
            }

					}
				}

				/*
				 * Transfer Manifest Preparation
				 */
						/*
						 * Code Logic :
						 * 1. Group the Mailbag(s)/Despatch(es) according to the Incoming Flight details
						 * 		and keep in MAP with flight details as Key .
						 * 2. Capture the Flight details to a SET so that flight
						 * 		details wont repeat, this is used as the key in MAP
						 * 3. Take each key from the SET and get corresponding Mailbag(s)/Despatch(es) from MAP
						 * 4. Group Mailbag(s)/Despatch(es) as DSNVOs
						 * 5. Generate Manifest.
						 */
			 if (mailbagVOsToTransferOutToOtherCarrier != null &&! mailbagVOsToTransferOutToOtherCarrier.isEmpty()) {
                Map<String, Collection<MailbagVO>> groupedMailbagDetails = new HashMap<String, Collection<MailbagVO>>();
						Set<String> flightKeySet = new HashSet<String>();

                if (mailbagVOsToTransferOutToOtherCarrier != null &&! mailbagVOsToTransferOutToOtherCarrier.isEmpty()) {
							String flightKey = null;
                    for (MailbagVO mailVO : mailbagVOsToTransferOutToOtherCarrier) {
								flightKey = new StringBuilder()
											.append(mailVO.getCarrierCode())
											.append(ID_SEP)
											.append(mailVO.getFlightNumber())
											.append(ID_SEP)
											.append(mailVO.getFlightDate()!=null?mailVO.getFlightDate().toDisplayDateOnlyFormat():"")
											.append(ID_SEP)
											.append(mailVO.getFlightSequenceNumber()>0?mailVO.getFlightSequenceNumber():"")
											.append(ID_SEP)
											.append(mailVO.getSegmentSerialNumber()>0?mailVO.getSegmentSerialNumber():"").toString();
                        if (!groupedMailbagDetails.containsKey(flightKey)) {
									flightKeySet.add(flightKey);
									Collection<MailbagVO> mailCollection = new ArrayList<MailbagVO>();
									mailCollection.add(mailVO);
									groupedMailbagDetails.put(flightKey, mailCollection);
                        } else {
									Collection<MailbagVO> mailbagCollection = groupedMailbagDetails.get(flightKey);
									mailbagCollection.add(mailVO);
								}
							}
						}

						/*
						 * Generating Transfer Manifest for Each Incomming Flight.
						 */
                if (flightKeySet != null && flightKeySet.size() > 0) {
                    for (String flightKey : flightKeySet) {
								String[] keys = flightKey.split(ID_SEP);
								String carrierCode = null;
								String flightNumber = null;
								String flightDate = null;
								String flightSeqNum=null;
								String segSerNum=null;
                        if (keys != null && keys.length > 0) {
									carrierCode = keys[0];
									flightNumber = keys[1];
									if(keys.length>2){
									flightDate = keys[2];
									flightSeqNum=keys[3];
									segSerNum=keys[4];
									}
									toContainerVO.setFromCarrier(carrierCode);
									toContainerVO.setFromFltNum(flightNumber);
									toContainerVO.setFrmFltSeqNum(flightSeqNum!=null && flightSeqNum.length() > 0?Long.parseLong(flightSeqNum):-1);
									toContainerVO.setFrmSegSerNum(segSerNum!=null && segSerNum.length() > 0?Integer.parseInt(segSerNum):-1);
						   if (flightDate!=null && flightDate.trim().length()>0){
                            toContainerVO.setFromFltDat(new LocalDate(LocalDate.NO_STATION, Location.NONE, false).setDate(flightDate));
								}
								}
								Collection<MailbagVO> mailbags = null;
                        if (groupedMailbagDetails != null && groupedMailbagDetails.size() > 0) {
									mailbags = groupedMailbagDetails.get(flightKey);
								}
								/*
								 * Generating Transfer Maifest
								 * If coming from the webscreens for transfermanifestgeneration :isPrintingNeeded - true
								 * If coming from the Upload Mail Details Screen for transferring to otherAirline : isPrintingNeeded - false
								 */

								 boolean isPrintingNeeded =false ;
                        if (MailConstantsVO.FLAG_YES.equals(toPrintTransferManifest)) {
									 isPrintingNeeded = true;
								 }
                      //partial transfer
                        if(mailbags!=null && !mailbags.isEmpty()){
                        	for (MailbagVO mailbagVO:mailbags){
                        	  if(mailbagVO.getMailSequenceNumber()>0){
                        		 String transferManifestId =null;
                        		 try {
									transferManifestId= constructDAO().findTransferManifestId(mailbagVO.getCompanyCode(), mailbagVO.getMailSequenceNumber());
								} catch (PersistenceException e) {
									e.getMessage();
								}
                        		if (transferManifestId!=null && transferManifestId.trim().length()>0){
                        			  TransferManifestDSN transferManifestDSN=null;
                        			  TransferManifestDSNPK transferManifestDSNPK=new TransferManifestDSNPK() ;
                        			  transferManifestDSNPK.setCompanyCode(mailbagVO.getCompanyCode());
                        			  transferManifestDSNPK.setTransferManifestId(transferManifestId);
                        			  transferManifestDSNPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
                        			  try {
										transferManifestDSN=TransferManifestDSN.find(transferManifestDSNPK);
									} catch (FinderException e) {
										e.getMessage();
									}
                        			if (transferManifestDSN!=null){
                        				transferManifestDSN.setTransferStatus(TRANSER_STATUS_REJECT);
                        			}
                        		}
                        	  }
                        	}
                        }//partial transfer
                        transferManifestVO = generateTransferManifestAtExport(mailbags, toContainerVO, isPrintingNeeded);
                        if(!toContainerVO.isTransStatus()) {
 MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);

                        mailController.flagHistoryforTransferInitiation(mailbags);
                        }
                    }
						}
			        }

				log.exiting(CLASS, "transferMailAtExport");
				return transferManifestVO;

			}


			/**
			 * Method		:	MailController.transferMailbagsAtExport
			 * Added by 	:	A-7371 on 05-Jan-2018
			 * Used for 	:	ICRD-133987
     *
			 * @param mailbagVOs
			 * @param containerVO
			 * @throws SystemException
			 * @throws InvalidFlightSegmentException
			 * @throws CapacityBookingProxyException
			 * @throws MailBookingException
			 * @throws FlightClosedException
			 */
			public void transferMailbagsAtExport(Collection<MailbagVO> mailbagVOs,
					ContainerVO containerVO) throws SystemException,
					InvalidFlightSegmentException, CapacityBookingProxyException, MailBookingException, FlightClosedException {
				log.entering(CLASS, "transferMailbagsAtExport");
				new MailTransfer().transferMailbagsAtExport(mailbagVOs, containerVO);
				if (containerVO.getContainerNumber() != null) {
					updateContainerAcceptance(containerVO,mailbagVOs);
				}

				log.exiting(CLASS, "transferMailbagsAtExport");
			}

    /**
     * Method		:	MailController.flagHistoryForMailTransferAtExport
			 * Added by 	:	A-7371 on 05-Jan-2018
			 * Used for 	:	ICRD-133987
			 *
			 * @param mailbagVOs
			 * @param containerVO
			 * @throws SystemException
			 */
    @Advice(name = "mail.operations.flagHistoryForMailTransferAtExport", phase = Phase.POST_INVOKE)
			public void flagHistoryForMailTransferAtExport(
            Collection<MailbagVO> mailbagVOs, ContainerVO containerVO) throws SystemException {
				log.entering(CLASS, "flagHistoryForMailTransferAtExport");
				log.exiting(CLASS, "flagHistoryForMailTransferAtExport");

			}
    @Advice(name = "mail.operations.flagAuditForMailTransferAtExport", phase = Phase.POST_INVOKE)
			public void flagAuditForMailTransferAtExport(
			Collection<MailbagVO> mailbagVOs, ContainerVO containerVO) throws SystemException {
				log.entering(CLASS, "flagAuditForMailTransferAtExport");
				log.exiting(CLASS, "flagAuditForMailTransferAtExport");

	}

			/**
     * @param dsns
     * @param toContainerVO
     * @throws SystemException
			 * @author A-7371
			 */
			private TransferManifestVO generateTransferManifestAtExport(
            Collection<MailbagVO> mailbagVOs, ContainerVO toContainerVO, boolean isPrintingNeeded)
			throws SystemException {
				log.entering(CLASS, "generateTransferManifest");
				/*
				 * Generating Transfer Manifest ID
				 */
				String id = new StringBuilder()
							.append(toContainerVO.getOwnAirlineCode())
							.append(toContainerVO.getCarrierCode()).toString();
				int transferManifestId =
					generateTransferManifestSeqNumber(toContainerVO.getCompanyCode(), id);
				log.log(Log.FINE, "!!!!!!!!!!!!!!!11id", id);
				log
						.log(Log.FINE, "!!!!!!!!!!!11transferManifestId",
								transferManifestId);
				/*
				 * Creating TransferManifestVO
				 */
				TransferManifestVO transferManifestVO = new TransferManifestVO();
				transferManifestVO.setCompanyCode(toContainerVO.getCompanyCode());
				transferManifestVO.setAirPort(toContainerVO.getAssignedPort());
				transferManifestVO.setTransferManifestId(new StringBuilder()
														.append(id)
														.append(String.valueOf(transferManifestId)).toString());
				log.log(Log.FINE, "TransferManifestId--->>>", transferManifestVO.getTransferManifestId());
				transferManifestVO.setTransferredFromCarCode(toContainerVO.getFromCarrier());
				transferManifestVO.setTransferredFromFltNum(toContainerVO.getFromFltNum());
				transferManifestVO.setToFltDat(toContainerVO.getFlightDate());
				transferManifestVO.setFromFltDat(toContainerVO.getFromFltDat());
				LocalDate trfDate = new LocalDate(transferManifestVO.getAirPort(), Location.ARP, true);
				transferManifestVO.setTransferredDate(trfDate);
				transferManifestVO.setTransferredToCarrierCode(toContainerVO.getCarrierCode());
				transferManifestVO.setTransferredToFltNumber(toContainerVO.getFlightNumber());
				transferManifestVO.setTransferredfrmFltSeqNum(toContainerVO.getFrmFltSeqNum());
				transferManifestVO.setTransferredfrmSegSerNum(toContainerVO.getFrmSegSerNum());
				Collection<DespatchDetailsVO> despatchDetailsVOs =  new ArrayList<>();
				  Collection<DSNVO> dsns = makeDSNVOs(mailbagVOs, despatchDetailsVOs, toContainerVO);
					transferManifestVO.setDsnVOs(dsns);
				log.log(Log.FINE, "transferManifestVO--->>>", transferManifestVO);
				/*
				 * Populating Transfer Manifest Details
				 */
				if (toContainerVO.isTransStatus()){
					transferManifestVO.setStatus(MAIL_OPS_TRAEND);
				}
				new TransferManifest(transferManifestVO);
				AirlineValidationVO airlineValidationVO = null;

				try {
					airlineValidationVO = findAirlineDescription(toContainerVO
							.getCompanyCode(), toContainerVO.getCarrierCode());
				} catch (SharedProxyException e) {
					e.getMessage();
				}
				transferManifestVO.setToCarCodeDesc(airlineValidationVO.getAirlineName());

				try {
					airlineValidationVO = findAirlineDescription(toContainerVO
							.getCompanyCode(), toContainerVO.getFromCarrier());
				} catch (SharedProxyException e) {
					e.getMessage();
				}
				transferManifestVO.setFromCarCodeDesc(airlineValidationVO.getAirlineName());


				log.exiting(CLASS, "generateTransferManifest");
		       return transferManifestVO;
				}

    /**
			 * @param reportPublishJobVO
			 * @return
			 * @throws SystemException
			 * @throws ProxyException
     * @author A-7540
     */
    public void generateResditPublishReport(String companyCode, String paCode, int days)
            throws SystemException, ProxyException {
				LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
						.getLogonAttributesVO();
				log.entering(CLASS, "generateResditPublishReport");
        ReportPublishJobVO reportPublishJobVO = new ReportPublishJobVO();
        ResditPublishJobScheduleVO resditPublishJobScheduleVO = new ResditPublishJobScheduleVO();
				reportPublishJobVO.setCompanyCode(companyCode);
				String airportCode = logonAttributes.getAirportCode();
				resditPublishJobScheduleVO.setAirportCode(airportCode);
				reportPublishJobVO.setAirportCode(resditPublishJobScheduleVO.getAirportCode());
				reportPublishJobVO.setReportID(ResditPublishJobScheduleVO.REPORT_ID);
				reportPublishJobVO.setScheduleId(resditPublishJobScheduleVO.getScheduleId());
				reportPublishJobVO.setParameterFive(paCode);
				reportPublishJobVO.setParameterNine(String.valueOf(days));
				reportPublishJobVO.setFileName(ResditPublishJobScheduleVO.REPORT_NAME);
				try {
					new AdminReportProxy().publishReport(reportPublishJobVO);
				} catch (SystemException e) {
					log.log(Log.SEVERE, "System Exception Caught" + e.getMessage());
				}
				}

			/**
		 * Added for ICRD-266032
     *
		 * @param companyCode
		 * @param shipperAgentCode
		 * @return
		 * @throws SystemException
		 */
		public CustomerVO findCustomerDetails(String companyCode, String shipperAgentCode)
				throws SystemException {
			CustomerFilterVO customerFilterVO = new CustomerFilterVO();
			SharedCustomerProxy customerProxy = new SharedCustomerProxy();
			CustomerVO customerVO = null;
		    customerFilterVO.setCompanyCode(companyCode);
		    customerFilterVO.setCustomerCode(shipperAgentCode);
		    try {
		    	customerVO = customerProxy.findCustomerDetails(customerFilterVO);
        } catch (ProxyException ex) {
		    	log.log(Log.SEVERE, ex.getMessage());
		    }
			return customerVO;
				}

    /**
			 * @param carditEnquiryFilterVO
			 * @return
     * @author A-8061
			 */
			public String[] findGrandTotals(CarditEnquiryFilterVO carditEnquiryFilterVO) throws SystemException {
				log.entering(CLASS, "findGrandTotals");
				 return Mailbag.findGrandTotals(carditEnquiryFilterVO);
			}

			/**
			 * @param mailServiceLevelVOs
			 * @return
			 * @throws SystemException
			 * @throws PersistenceException
			 * @throws RemoveException
     * @author A-6986
     */
    public Collection<ErrorVO> saveMailServiceLevelDtls(Collection<MailServiceLevelVO> mailServiceLevelVOs) throws SystemException {
				log.entering(CLASS, "saveMailServiceLevelDtls");

        ErrorVO error = null;
				Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
        LocalDate currentDate = new LocalDate(LocalDate.NO_STATION, Location.NONE, false);
				LogonAttributes logonAtributes = getLogonAttributes();
				Collection<MailServiceLevel> mailServiceLevels = null;
				String companyCode = getLogonAttributes().getCompanyCode();


				try {

            mailServiceLevels = getEntityManagerForObjectDAO().findServiceLevelDtls(getLogonAttributes().getCompanyCode());

				} catch (PersistenceException e) {
            throw new SystemException(e.getMessage(), e);
				}

        if (mailServiceLevels != null && mailServiceLevels.size() > 0) {

            for (MailServiceLevel serviceLevel : mailServiceLevels) {

							removeMailServiceLevel(serviceLevel);
					}
				}

        if (mailServiceLevelVOs != null && mailServiceLevelVOs.size() > 0) {

            for (MailServiceLevelVO mailServiceLevelVO : mailServiceLevelVOs) {


						mailServiceLevelVO.setCompanyCode(logonAtributes.getCompanyCode());
						mailServiceLevelVO.setLastUpdatedUser(logonAtributes.getUserId());
						mailServiceLevelVO.setLastUpdatedTime(currentDate);

                if (mailServiceLevelVO.getMailCategory().equals("")
                        && mailServiceLevelVO.getMailCategory().length() == 0) {
							mailServiceLevelVO.setMailCategory(HYPHEN);
						}
                if (mailServiceLevelVO.getMailClass().equals("")
                        && mailServiceLevelVO.getMailClass().length() == 0) {
							mailServiceLevelVO.setMailClass(HYPHEN);
						}
                if (mailServiceLevelVO.getMailSubClass().equals("")
                        && mailServiceLevelVO.getMailSubClass().length() == 0) {
							mailServiceLevelVO.setMailSubClass(HYPHEN);
						}
                if (mailServiceLevelVO.getMailServiceLevel().length() > 2) {

							Map<String, Collection<OneTimeVO>> oneTimes = null;

								oneTimes = findOneTimeDescription(companyCode,
										MAILSERVICELEVELS);
                    log.log(Log.FINEST, "\n oneTimes******************" + oneTimes);

							Collection<OneTimeVO> oneTimeVOs = new ArrayList<>();

                    oneTimeVOs = oneTimes.get(MAILSERVICELEVELS);

                    for (OneTimeVO oneTimeVO : oneTimeVOs) {

                        if (mailServiceLevelVO.getMailServiceLevel().equals(oneTimeVO.getFieldDescription())) {
									mailServiceLevelVO.setMailServiceLevel(oneTimeVO.getFieldValue());
									break;
								}
							}
						}
                try {
							saveMailServiceLevel(mailServiceLevelVO);
                } catch (CreateException e) {
							 error = new ErrorVO(e.getMessage());
						}

					}

				}
				errors.add(error);
				return errors;

			}

			/**
     * @param mailServiceLevelVO
     * @return
     * @throws SystemException
     * @author A-6986
			 */
			private MailServiceLevel findServiceLevelDtls(MailServiceLevelVO mailServiceLevelVO) throws SystemException {
        log.entering("MailAcceptance", "findServiceLevelDtls");
 				MailServiceLevel mailServiceLevel = new MailServiceLevel();
        try {
 					mailServiceLevel =  MailServiceLevel.find(mailServiceLevelVO);
        } catch (FinderException finderException) {

 					log.log(Log.FINE, " ++++  Finder Exception  +++");
 				}
				return mailServiceLevel;
 			}

    /**
			 * @param
			 * @return
			 * @throws SystemException
     * @author A-6986
			 */
			public LogonAttributes getLogonAttributes() throws SystemException {
				return ContextUtils.getSecurityContext().getLogonAttributesVO();
			}

    /**
			 * @param
			 * @return
			 * @throws SystemException
     * @author A-6986
			 */
			public MailtrackingDefaultsObjectInterface getEntityManagerForObjectDAO() throws PersistenceException, SystemException {
				return PersistenceController
						.getEntityManager().getObjectQueryDAO(MODULENAME);
			}

    /**
     * @return
     * @throws SystemException
     * @author A-7779
     */
    public MailTrackingDefaultsDAO getEntityManagerForDAO() throws SystemException {
        try {
            EntityManager em = PersistenceController.getEntityManager();
            return MailTrackingDefaultsDAO.class.cast(em.getQueryDAO(MODULENAME));
        } catch (PersistenceException persistenceException) {
            throw new SystemException(persistenceException.getErrorCode());
        }
    }

    /**
			 * @param mailServiceLevel
			 * @return
			 * @throws SystemException
     * @author A-6986
     */
    public void removeMailServiceLevel(MailServiceLevel mailServiceLevel) throws SystemException {
        try {
					mailServiceLevel.remove();
        } catch (RemoveException e) {
            throw new SystemException(e.getMessage(), e);
        }
    }

    /**
			 * @param newMailServiceLevelVO
			 * @return
			 * @throws SystemException
			 * @throws CreateException
     * @author A-6986
			 */
			public void saveMailServiceLevel(MailServiceLevelVO newMailServiceLevelVO) throws CreateException, SystemException {
				new MailServiceLevel(newMailServiceLevelVO);
			}

    /**
			 * @param mailServiceLevelVO
			 * @return
			 * @throws SystemException
     * @author A-6986
			 */
			public String findMailServiceLevel(MailbagVO mailBagVO) throws SystemException {

				String serviceLevel = null;

        String paCode_int = null;
        String paCode_dom = null;

				paCode_int = findSystemParameterValue(USPS_INTERNATIONAL_PA);
				paCode_dom = findSystemParameterValue(USPS_DOMESTIC_PA);

				MailServiceLevelVO mailServiceLevelVO = new MailServiceLevelVO();
				mailServiceLevelVO.setCompanyCode(mailBagVO.getCompanyCode());
				mailServiceLevelVO.setPoaCode(mailBagVO.getPaCode());

				//Modified for ICRD-270630 starts
        if (paCode_int != null && paCode_int.equals(mailBagVO.getPaCode())) {

					mailServiceLevelVO.setMailCategory(mailBagVO.getMailCategoryCode());

            if (mailBagVO.getMailClass() != null && mailBagVO.getMailClass().length() > 0)

						mailServiceLevelVO.setMailClass(mailBagVO.getMailClass());
					else
						mailServiceLevelVO.setMailClass(HYPHEN);

            if (mailBagVO.getMailSubclass() != null && mailBagVO.getMailSubclass().length() > 0)
						mailServiceLevelVO.setMailSubClass(mailBagVO.getMailSubclass());
					else
						mailServiceLevelVO.setMailSubClass(HYPHEN);


        } else if (paCode_dom != null && paCode_dom.equals(mailBagVO.getPaCode())) {

					mailServiceLevelVO.setMailClass(mailBagVO.getMailClass());

					if (mailBagVO.getMailCategoryCode() != null)
						mailServiceLevelVO.setMailCategory(mailBagVO.getMailCategoryCode());
					else
						mailServiceLevelVO.setMailCategory(HYPHEN);

					if (mailBagVO.getMailSubclass() != null)
						mailServiceLevelVO.setMailSubClass(mailBagVO.getMailSubclass());
					else
						mailServiceLevelVO.setMailSubClass(HYPHEN);

        } else {
					return serviceLevel;
				}
        try {
            if (paCode_int != null && paCode_int.equals(mailBagVO.getPaCode())) {
						serviceLevel = constructDAO().findMailServiceLevelForIntPA(mailServiceLevelVO);
            } else if (paCode_dom != null && paCode_dom.equals(mailBagVO.getPaCode())) {
						serviceLevel = constructDAO().findMailServiceLevelForDomPA(mailServiceLevelVO);
            } else {
						return serviceLevel;
					}
					//Modified for ICRD-270630 ends
        } catch (PersistenceException ex) {
					log.log(Log.FINE, " ++++  Mail Service Level Not Found  +++");
        } catch (SystemException e) {
					log.log(Log.FINE, " ++++  Mail Service Level Not Found  +++");
				}
				return serviceLevel;

			}

    /**
			 * 	Method		:	MailController.listPostalCalendarDetails
			 *	Added by 	:	A-8164 on 04-Jul-2018
			 * 	Used for 	:	ICRD-236925
			 *	Parameters	:	@param uSPSPostalCalendarFilterVO
			 *	Parameters	:	@return
			 *	Parameters	:	@throws SystemException
			 *	Return type	: 	Collection<USPSPostalCalendarVO>
			 */
			public Collection<USPSPostalCalendarVO> listPostalCalendarDetails(
					USPSPostalCalendarFilterVO uSPSPostalCalendarFilterVO) throws SystemException {
				log.entering(CLASS, "listPostalCalendarDetails");
				return USPSPostalCalendar.listPostalCalendarDetails(uSPSPostalCalendarFilterVO);
			}

    /**
			 * 	Method		:	MailController.savePostalCalendar
			 *	Added by 	:	A-8164 on 04-Jul-2018
			 * 	Used for 	:	ICRD-236925
			 *	Parameters	:	@param uSPSPostalCalendarVOs
			 *	Parameters	:	@throws SystemException
			 *	Parameters	:	@throws RemoveException
			 *	Return type	: 	void
			 */
			@Advice(name = "mail.operations.savePostalCalendar", phase = Phase.POST_INVOKE)
			public void savePostalCalendar(
					Collection<USPSPostalCalendarVO> uSPSPostalCalendarVOs)
					throws SystemException, RemoveException {
				log.entering(CLASS, "savePostalCalendar");
				USPSPostalCalendar uSPSPostalCalendar = null;
				USPSPostalCalendarPK uSPSPostalCalendarPK = null;
				LogonAttributes logonAttributes = null;
				PostalCalendarAuditVO auditVO = null;
				log.log(Log.FINE, "The uSPSPostalCalendarVOs  are ", uSPSPostalCalendarVOs);
				log.log(Log.FINE, "The number of uSPSPostalCalendarVOs  are ", uSPSPostalCalendarVOs.size());
				if (uSPSPostalCalendarVOs != null && !uSPSPostalCalendarVOs.isEmpty()) {
					for (USPSPostalCalendarVO uSPSPostalCalendarVO : uSPSPostalCalendarVOs) {
						log.log(Log.FINE, "The uSPSPostalCalendarVO  are ", uSPSPostalCalendarVO);
						if (USPSPostalCalendarVO.OPERATION_FLAG_INSERT
								.equals(uSPSPostalCalendarVO.getCalOperationFlags())) {
							uSPSPostalCalendarPK = constructUSPSPostalCalendarPK(uSPSPostalCalendarVO);
								log.log(Log.FINE, "if: The uSPSPostalCalendarPK  are ", uSPSPostalCalendarPK);
								try {
									uSPSPostalCalendar = USPSPostalCalendar
											.find(uSPSPostalCalendarPK);
								} catch (FinderException ex) {
									new USPSPostalCalendar(uSPSPostalCalendarVO);
								}
						} else if (USPSPostalCalendarVO.OPERATION_FLAG_UPDATE
								.equals(uSPSPostalCalendarVO.getCalOperationFlags())) {
							uSPSPostalCalendarPK = constructUSPSPostalCalendarPK(uSPSPostalCalendarVO);
							log.log(Log.FINE, "else if1: The uSPSPostalCalendarPK  are ", uSPSPostalCalendarPK);
							try {
								uSPSPostalCalendar = USPSPostalCalendar.
										find(uSPSPostalCalendarPK);
							} catch (FinderException ex) {
								throw new SystemException(ex.getErrorCode(), ex);
							}
							if("I".equals(uSPSPostalCalendarVO.getFilterCalender())){
								auditVO = new PostalCalendarAuditVO(PostalCalendarAuditVO.AUDIT_MODULENAME,PostalCalendarAuditVO.AUDIT_SUBMODULENAME,PostalCalendarAuditVO.AUDIT_ENTITY);
							auditVO = (PostalCalendarAuditVO)AuditUtils.populateAuditDetails(auditVO, uSPSPostalCalendar, false);
							}
							uSPSPostalCalendar.update(uSPSPostalCalendarVO);
							if("I".equals(uSPSPostalCalendarVO.getFilterCalender())){
							auditVO = (PostalCalendarAuditVO)AuditUtils.populateAuditDetails(auditVO, uSPSPostalCalendar, false);
							auditVO.setCompanyCode(uSPSPostalCalendarVO.getCompanyCode());
							auditVO.setActionCode(PostalCalendarAuditVO.POSTAL_CALENDAR_UPDATED);
							auditVO.setPostalCode(uSPSPostalCalendarVO.getGpacod());
							auditVO.setPeriod(uSPSPostalCalendarVO.getPeriods());
							if(auditVO != null && auditVO.getAuditFields() != null
									&& !auditVO.getAuditFields().isEmpty()){
								updatePostalCalendarAuditHisotry(auditVO,uSPSPostalCalendarVO);
							}
							if(auditVO.getAdditionalInformation() == null){
								auditVO.setAdditionalInformation(new StringBuilder("Postal Calendar updated for the period ").append(uSPSPostalCalendarVO.getPeriods()).toString());
							}
							logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
							auditVO.setStationCode(logonAttributes.getStationCode());
							auditVO.setUserId(uSPSPostalCalendarVO.getLstUpdUsr());
							AuditUtils.performAudit(auditVO);
							}
						} else if (USPSPostalCalendarVO.OPERATION_FLAG_DELETE
								.equals(uSPSPostalCalendarVO.getCalOperationFlags())) {
							uSPSPostalCalendarPK = constructUSPSPostalCalendarPK(uSPSPostalCalendarVO);
							log.log(Log.FINE, "else if2: The uSPSPostalCalendarPK  are ", uSPSPostalCalendarPK);
							try {
								uSPSPostalCalendar = USPSPostalCalendar.find(uSPSPostalCalendarPK);
							} catch (FinderException ex) {
								uSPSPostalCalendar.setLstUpdTime(uSPSPostalCalendarVO
										.getLstUpdTime());
								throw new SystemException(ex.getErrorCode(), ex);
							}
							uSPSPostalCalendar.remove();
						}
					}
				}
			}

    /**
			 * 	Method		:	MailController.constructUSPSPostalCalendarPK
			 *	Added by 	:	A-8164 on 04-Jul-2018
			 * 	Used for 	:	ICRD-236925
			 *	Parameters	:	@param uSPSPostalCalendarVO
			 *	Parameters	:	@return
			 *	Return type	: 	USPSPostalCalendarPK
			 */
			private USPSPostalCalendarPK constructUSPSPostalCalendarPK(USPSPostalCalendarVO uSPSPostalCalendarVO) {
				USPSPostalCalendarPK uSPSPostalCalendarPK = new USPSPostalCalendarPK();
				uSPSPostalCalendarPK.setCompanyCode(uSPSPostalCalendarVO.getCompanyCode());
				uSPSPostalCalendarPK.setGpacod(uSPSPostalCalendarVO.getGpacod());
				uSPSPostalCalendarPK.setFilterCalender(uSPSPostalCalendarVO.getFilterCalender());
        if (uSPSPostalCalendarVO.getCalSeqnum() != 0)
					uSPSPostalCalendarPK.setSerialNumber(uSPSPostalCalendarVO.getCalSeqnum());
				return uSPSPostalCalendarPK;
			}

    /**
			 * @param newMailbgVOs
			 * @param isScanned
			 * @return
			 * @throws MailHHTBusniessException
			 * @throws SystemException
     * @author A-7540
			 */
			public ScannedMailDetailsVO doLATValidation(
					Collection<MailbagVO> newMailbgVOs, boolean isScanned) throws MailHHTBusniessException, SystemException {


LogonAttributes logon = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
			  	boolean isDomesticFlight = false;
			  	String orgPaCod = null;
String paCode_int = null;
String paCode_dom = null;
boolean coterminusAvalilable = false;
             ScannedMailDetailsVO scannedMailDetailsVO = new ScannedMailDetailsVO();
				PostalAdministrationVO postalAdministrationVO = new PostalAdministrationVO();
			  	LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
			  	LocalDate flightdate = new LocalDate(LocalDate.NO_STATION,Location.NONE,false);//Added for ICRD-328335
if (newMailbgVOs != null && newMailbgVOs.size() > 0) {
            for (MailbagVO mailbagVO : newMailbgVOs) {

			  		String OOE = mailbagVO.getOoe();
                if (mailbagVO != null && mailbagVO.getPaCode() != null) {
			  			orgPaCod = mailbagVO.getPaCode();
                } else {
                    try {
                        orgPaCod = findPAForOfficeOfExchange(logonAttributes.getCompanyCode(), OOE);
					} catch (SystemException e2) {

						e2.getMessage();
					}
			  	}
					try {
                    postalAdministrationVO = findPACode(logonAttributes.getCompanyCode(), orgPaCod);
					} catch (SystemException e) {
						e.getMessage();
					}
					paCode_int = findSystemParameterValue(USPS_INTERNATIONAL_PA);
					paCode_dom = findSystemParameterValue(USPS_DOMESTIC_PA);
					String originPort = findNearestAirportOfCity(mailbagVO.getCompanyCode(), OOE);
					coterminusAvalilable= validateCoterminusairports(originPort, mailbagVO.getScannedPort(),
	 						MailConstantsVO.RESDIT_RECEIVED, orgPaCod,mailbagVO.getConsignmentDate());
					//Modified as part of bug IASCB-62063 by A-5526
			  if((originPort!=null && originPort.equals(mailbagVO.getScannedPort()) )|| (coterminusAvalilable
					  && !checkReceivedFromTruckEnabled(mailbagVO.getScannedPort(), originPort, orgPaCod,mailbagVO.getConsignmentDate()))){
			  if (postalAdministrationVO != null) {
                if (paCode_int.contains(postalAdministrationVO.getPaCode()) || paCode_dom.contains(postalAdministrationVO.getPaCode())) {

                        if ("E".equals(postalAdministrationVO.getLatValLevel()) || "W".equals(postalAdministrationVO.getLatValLevel())) {
                            MailbagHistoryVO mailbagHistoryVO = null;
                            if ("-1".equals(mailbagVO.getFlightNumber())||"".equals(mailbagVO.getFlightNumber())) {//Changed A-8164-ICRD-293138
                                Collection<CarditTransportationVO> carditTransportationVOs = null;
                                try {
                                	String carditKey=null;
                                	carditKey = Cardit.findCarditForMailbag(mailbagVO.getCompanyCode(),
                							mailbagVO.getMailbagId());
                                	if(carditKey != null){
                                	carditTransportationVOs = constructDAO().findCarditTransportationDetails(mailbagVO.getCompanyCode(),
                                			carditKey	);
                                	}
								} catch (PersistenceException e) {
									e.getMessage();
								}
                               if(carditTransportationVOs!=null && carditTransportationVOs.size() > 0){
                                for(CarditTransportationVO carditTransportationVO : carditTransportationVOs){
                                	if(mailbagVO.getScannedPort().equals(carditTransportationVO.getDeparturePort())){
                                		mailbagVO.setFlightNumber(carditTransportationVO.getFlightNumber());
    									mailbagVO.setFlightSequenceNumber(carditTransportationVO.getFlightSequenceNumber());
    									mailbagVO.setFlightDate(carditTransportationVO.getDepartureTime());
   									    mailbagVO.setCarrierId(carditTransportationVO.getCarrierID());
    									mailbagVO.setPol(carditTransportationVO.getDeparturePort());
                                	}
                                }
                               }



						 }
						     /**
						      * Validation not needed if flight details not obtained from CARDIT
						      * System finds all available flights and airport codes if flight details not given
						      */
                            if (mailbagVO.getFlightNumber() != null && !mailbagVO.getFlightNumber().isEmpty()) {
							 Collection<FlightValidationVO> flightValidationVOs = null;

						    try {
								flightValidationVOs = Proxy.getInstance().get(FlightOperationsProxy.class).validateFlightForAirport(createFlightFilterVO(mailbagVO));

							} catch (SystemException e) {
								e.getMessage();
							}

							//VALIDATING FOR DOMESTIC FLIGHT
                                Map<String, AirportValidationVO> countryCodeMap = new HashMap<String, AirportValidationVO>();
						 	AirportValidationVO orgAirportValidationVO = null;
							AirportValidationVO desAirportValidationVO = null;
                                Collection<String> airportCodes = new ArrayList<String>();
							String orgcountryCode = "";
							String destcountryCode = "";
                              if(flightValidationVOs!=null && flightValidationVOs.size() > 0){
                                for (FlightValidationVO flightValidationVO : flightValidationVOs) {

								String flightRoute = flightValidationVO.getFlightRoute();
                                    String originAirport = flightRoute.substring(0, 3);
                                    String destAirport = flightRoute.substring(flightRoute.length() - 3);


                                   flightdate =  new LocalDate(LocalDate.NO_STATION,Location.NONE,flightValidationVO.getFlightDate(), true);//Added for ICRD-328335

							airportCodes.add(originAirport);
							airportCodes.add(destAirport);


							try {
                                        countryCodeMap =Proxy.getInstance().get(SharedAreaProxy.class).validateAirportCodes(mailbagVO.getCompanyCode(), airportCodes);
							} catch (SystemException e1) {
								e1.getMessage();
							}

                                    if (countryCodeMap != null) {
								orgAirportValidationVO = countryCodeMap.get(originAirport);
								desAirportValidationVO = countryCodeMap.get(destAirport);

                                        if (orgAirportValidationVO != null) {
								orgcountryCode = orgAirportValidationVO.getCountryCode();
							}

                                        if (desAirportValidationVO != null) {
								destcountryCode = desAirportValidationVO.getCountryCode();
							}


							}


                                  //VALIDATING FOR DOMESTIC FLIGHT
		                              



	                                   flightdate =  new LocalDate(LocalDate.NO_STATION,Location.NONE,flightValidationVO.getFlightDate(), true);//Added for ICRD-328335

								airportCodes.add(originAirport);
								airportCodes.add(destAirport);


                                String ownAirlineCountry = "";
							ownAirlineCountry = findSystemParameterValue(COUNTRY);

                                if (orgcountryCode.equals(destcountryCode) && orgcountryCode.equals(ownAirlineCountry) && destcountryCode.equals(ownAirlineCountry)) {
                                    isDomesticFlight = true;
                                    log.log(Log.FINE, "**********Domestic flight***********", orgcountryCode, destcountryCode);
							}
                                GeneralConfigurationFilterVO generalTimeMappingFilterVO = new GeneralConfigurationFilterVO();
							generalTimeMappingFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
							generalTimeMappingFilterVO.setAirportCode(mailbagVO.getScannedPort());
							generalTimeMappingFilterVO.setConfigurationType("MLT");
						//	generalTimeMappingFilterVO.setStartDate(mailbagVO.getScannedDate());
							//generalTimeMappingFilterVO.setEndDate(mailbagVO.getScannedDate());

							try {
                                countryCodeMap = Proxy.getInstance().get(SharedAreaProxy.class).validateAirportCodes(mailbagVO.getCompanyCode(), airportCodes);
					} catch (SystemException e1) {
						e1.getMessage();
					}



                            if (countryCodeMap != null) {
						orgAirportValidationVO = countryCodeMap.get(originAirport);
						desAirportValidationVO = countryCodeMap.get(destAirport);
                            }
                                if (orgAirportValidationVO != null) {
						orgcountryCode = orgAirportValidationVO.getCountryCode();
					}
							Collection<GeneralConfigParameterVO> parameterDetailsFilterVO = new ArrayList<GeneralConfigParameterVO>();
							GeneralConfigParameterVO generalConfigParameterVO = new GeneralConfigParameterVO();
                                if (isDomesticFlight) {
							generalConfigParameterVO.setConfigurationType("MLT");
							generalConfigParameterVO.setCompanyCode(generalTimeMappingFilterVO.getCompanyCode());
                                    generalConfigParameterVO.setParameterCode("DOMFLT");
							generalConfigParameterVO.setParameterValue("yes");
                               }
                                //else {
                                    //added by A-8527 for ICRD-293128
                                   // if (!"DOMFLT".equals(generalConfigParameterVO.getParameterCode())) {
								//generalConfigParameterVO.setParameterValue("no");
							//}
							//}
							//added by A-8527 for ICRD-293128
							parameterDetailsFilterVO.add(generalConfigParameterVO);
							generalTimeMappingFilterVO.setParameterDetailsFilterVO(parameterDetailsFilterVO);

							if (desAirportValidationVO != null) {
								destcountryCode = desAirportValidationVO.getCountryCode();
							}


                                Collection<GeneralConfigurationMasterVO> generalConfigurationMasterVOs = null;
                                LocalDate STD = new LocalDate(logon.getAirportCode(), ARP, true);
                                LocalDate calculatedSTD = null;
                                //if (flightValidationVOs != null && flightValidationVOs.size() > 0) {
                                    STD = flightValidationVOs.iterator().next().getStd();
                                //}
                                try {
                                    generalConfigurationMasterVOs =  Proxy.getInstance().get(SharedDefaultsProxy.class).findGeneralConfigurationDetails(generalTimeMappingFilterVO);
                                } catch (SystemException e) {
                                    e.getMessage();
                                }

                                String parvalmin = null;
                                String parvalhr = null;
                                int min = 0;
                                int hour = 0;
                                int latOffSetValue = 0;
							//LocalDate lat = mailbagVO.getScannedDate();
                                LocalDate latestAcceptanceTime = null;
                                if(mailbagVO.isScanTimeEntered() && mailbagVO.getScannedDate()!=null){
                                	latestAcceptanceTime = mailbagVO.getScannedDate();
                                }else{
                                	latestAcceptanceTime =  new  LocalDate(mailbagVO.getScannedPort(), Location.ARP, true);
                                }

                                if (generalConfigurationMasterVOs != null && generalConfigurationMasterVOs.size() > 0) {
								for (GeneralConfigurationMasterVO genaralTimeMappingVO : generalConfigurationMasterVOs) {
									if((flightdate.isGreaterThan(genaralTimeMappingVO.getStartDate())
					                         && flightdate.isLesserThan(genaralTimeMappingVO.getEndDate()))
					                      ||flightdate.equals(genaralTimeMappingVO.getStartDate())
					                      || flightdate.equals(genaralTimeMappingVO.getEndDate()))  {//Added for ICRD-328335
										//added by A-8527 for ICRD-293128 Starts
                                        Collection<GeneralRuleConfigDetailsVO> time = getTimedetails(genaralTimeMappingVO);
                                        if (genaralTimeMappingVO.getParameterDetails() != null && genaralTimeMappingVO.getParameterDetails().size() > 0) {
										//added by A-8527 for ICRD-293128 Starts
                                            for (GeneralConfigParameterVO parameterDetailsVO : genaralTimeMappingVO.getParameterDetails()) {
                                                if (isDomesticFlight && "DOMFLT".equals(parameterDetailsVO.getParameterCode()) &&
                                                        "yes".equals(parameterDetailsVO.getParameterValue())) {
										//added by A-8527 for ICRD-293128 Ends

                                                    for (GeneralRuleConfigDetailsVO offset : time) {
                                                        if (offset.getParameterCode().equals("Min")) {
                                                            parvalmin = offset.getParameterValue();
                                                            min = Integer.parseInt(parvalmin);
														}
                                                        if (offset.getParameterCode().equals("Hrs")) {
                                                            parvalhr = offset.getParameterValue();
                                                            hour = Integer.parseInt(parvalhr);
                                                        }

                                                    }
                                                    latOffSetValue = (min + hour * 60);
                                                    calculatedSTD = STD.addMinutes(-(latOffSetValue));
                                                }
                                                else if(!isDomesticFlight && "DOMFLT".equals(parameterDetailsVO.getParameterCode()) &&
                                                        "yes".equals(parameterDetailsVO.getParameterValue())){
                                                	calculatedSTD = null;
                                                }
                                                //International Flight with parameter details
                                                else if(!isDomesticFlight && !("DOMFLT".equals(parameterDetailsVO.getParameterCode())) &&
                                                        !("yes".equals(parameterDetailsVO.getParameterValue()))){
                                            for (GeneralRuleConfigDetailsVO offset : time) {
                                                if (offset.getParameterCode().equals("Min")) {
                                                    parvalmin = offset.getParameterValue();
                                                    min = Integer.parseInt(parvalmin);
                                                }
                                                if (offset.getParameterCode().equals("Hrs")) {
                                                    parvalhr = offset.getParameterValue();
                                                    hour = Integer.parseInt(parvalhr);
                                                }

                                            }
                                            latOffSetValue = (min + hour * 60);
                                                    calculatedSTD = STD.addMinutes(-(latOffSetValue));
                                                }
                                            }
                                        }
                                      /*If parameter details are not given,then it will enter to
                                      this else condition,ideally for an international flight without
                                      any parameter details in SHR104*/
                                      else{
                                          for (GeneralRuleConfigDetailsVO offset : time) {
                                              if (offset.getParameterCode().equals("Min")) {
                                                  parvalmin = offset.getParameterValue();
                                                  min = Integer.parseInt(parvalmin);
                                              }
                                              if (offset.getParameterCode().equals("Hrs")) {
                                                  parvalhr = offset.getParameterValue();
                                                  hour = Integer.parseInt(parvalhr);
                                              }

                                          }
                                          latOffSetValue = (min + hour * 60);
                                                  calculatedSTD = STD.addMinutes(-(latOffSetValue));
                                      }
                                        //added by A-8527 for ICRD-293128

								}
							}
                         }
                                if (calculatedSTD != null) {
                                    if (latestAcceptanceTime.isGreaterThan(STD)) {
                                        if ((!isScanned || "MTK060".equals(mailbagVO.getMailSource())) && ("Y".equals(mailbagVO.getLatValidationNeeded()))) {
                                            if ("E".equals(postalAdministrationVO.getLatValLevel())) {
												    throw new MailHHTBusniessException(MailHHTBusniessException.LAT_VIOLATED_ERR);
                                            } else
											        throw new MailHHTBusniessException(MailHHTBusniessException.LAT_VIOLATED_WAR);
                                        } else {

                                            if ("E".equals(postalAdministrationVO.getLatValLevel())) {
													      scannedMailDetailsVO.setErrorDescription(MailHHTBusniessException.LAT_VIOLATED_ERR);
                                                                    mailbagVO.setLatestAcceptanceTime(STD);
                                            } else
														  scannedMailDetailsVO.setErrorDescription(MailHHTBusniessException.LAT_VIOLATED_WAR);
                                                                mailbagVO.setLatestAcceptanceTime(STD);
												 }
                                                        } else {
                                                            mailbagVO.setLatestAcceptanceTime(STD);
											 }
                                }
									      }
								       }
					}
						            }
                }
						}

				              }
				              }
				           }
                scannedMailDetailsVO.setMailDetails(newMailbgVOs);
                    return scannedMailDetailsVO;

				

				}

	private FlightFilterVO createFlightFilterVO(MailbagVO mailbagVO) {
		FlightFilterVO flightFilterVO = new FlightFilterVO();
		flightFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
		flightFilterVO.setFlightCarrierId(mailbagVO.getCarrierId());
		flightFilterVO.setFlightNumber(mailbagVO.getFlightNumber());
		flightFilterVO.setFlightSequenceNumber(mailbagVO
				.getFlightSequenceNumber());
		flightFilterVO.setFlightDate(mailbagVO.getFlightDate());        
		flightFilterVO.setStation(mailbagVO.getPol());
		flightFilterVO.setDirection(FlightFilterVO.OUTBOUND);
		return flightFilterVO;
			}

			/**
			 * @param MailHandoverVOs
			 * @return
			 * @throws SystemException
			 * @throws CreateException
     * @author A-6986
			 */
			public void saveMailHandoverDetails(Collection<MailHandoverVO> mailHandoverVOs)
            throws SystemException, RemoteException {
        log.entering(CLASS, "saveMailHandoverDetails");

        for (MailHandoverVO mailHandoverVO : mailHandoverVOs) {

					MailHandoverTime mailHandoverTime = null;
            if (MailHandoverVO.OPERATION_FLAG_INSERT.equals(mailHandoverVO.getHoOperationFlags())) {
						log.log(Log.INFO, "!!!!!!!!!!   INSERT   !!!!!!!!!!!!!");
                try {
                    mailHandoverTime = findMailHandOverTime(mailHandoverVO);

                } catch (SystemException e) {
							saveMailHandOverTime(mailHandoverVO);
						}
                if(mailHandoverTime == null){
							saveMailHandOverTime(mailHandoverVO);
						}

            } else if (MailHandoverVO.OPERATION_FLAG_UPDATE.equals(mailHandoverVO.getHoOperationFlags())) {
						log.log(Log.INFO, "!!!!   UPDATE   !!!!!!!!!!!!!!!!!!!");

                mailHandoverTime = findMailHandOverTime(mailHandoverVO);

						mailHandoverTime.update(mailHandoverVO);
            } else if (MailHandoverVO.OPERATION_FLAG_DELETE.equals(mailHandoverVO.getHoOperationFlags())) {
						log.log(Log.INFO, "!!!!   DELETE   !!!!!!!!!!!!!!!!!!!");

                mailHandoverTime = findMailHandOverTime(mailHandoverVO);

                if (mailHandoverTime != null) {
							removeMailHandOverTime(mailHandoverTime);
						}
					}

				}

			}

    /**
			 * @param mailHandoverFilterVO
			 * @throws SystemException
     * @author A-6986
			 */

    public Page<MailHandoverVO> findMailHandoverDetails(MailHandoverFilterVO mailHandoverFilterVO, int pageNumber)
            throws SystemException {
				log.entering(CLASS, "findMailHandoverDetails");
        return MailHandoverTime.findMailHandoverDetails(mailHandoverFilterVO, pageNumber);

			}

    public MailHandoverTime findMailHandOverTime(MailHandoverVO mailHandoverVO) throws SystemException {

			MailHandoverTime mailHandoverTime = new MailHandoverTime();

    	mailHandoverTime = MailHandoverTime.findMailHandoverTime(mailHandoverVO);

			return mailHandoverTime;
		}

    public void removeMailHandOverTime(MailHandoverTime mailHandoverTime) throws SystemException {
        try {
				mailHandoverTime.remove();
        } catch (RemoveException e) {
            throw new SystemException(e.getMessage(), e);
        }
    }

		public void saveMailHandOverTime(MailHandoverVO mailHandoverVO) throws SystemException {

			new MailHandoverTime(mailHandoverVO);
}

    /**
		 * @param mailbagVOs
		 * @param toContainerVO
		 * @return
		 * @throws SystemException
		 * @throws FlightClosedException
		 * @throws ReassignmentException
		 * @throws InvalidFlightSegmentException
		 * @throws CapacityBookingProxyException
		 * @throws MailBookingException
     * @author A-8236
		 */
		public Collection<ContainerDetailsVO> reassignMailbagsfromAndroid(
				Collection<MailbagVO> mailbagVOs, ContainerVO toContainerVO)
				throws SystemException, FlightClosedException,
				ReassignmentException, InvalidFlightSegmentException, CapacityBookingProxyException, MailBookingException {
			String reassignSystemPar= null;
			try {
				reassignSystemPar = findSystemParameterValue(MAIL_REASSIGN_FROM_CLOSED_FLIGHT);
			} catch (SystemException e) {
				log.log(Log.INFO,"");
		}
			Collection<MailbagVO> mailbagsToReassign = new ArrayList<MailbagVO>();
			Collection<MailbagVO> mailbagsToTsfr = new ArrayList<MailbagVO>();
			Collection<ContainerDetailsVO> conDetVO = null;
			//Added as part of bug ICRD-131902 to check whether the mailbags are assigned as part of container assignment itself.
        validateMailbagVOs(mailbagVOs, toContainerVO);
			if (toContainerVO.getFlightSequenceNumber() > 0) {
				/*removed flight closure check as we are doing it during validations*/
				groupMailbagsForReassignMailBags(mailbagVOs, mailbagsToReassign,
						mailbagsToTsfr);
				log.log(Log.FINEST, "maiblags to transfer ", mailbagsToTsfr);
				log.log(Log.FINEST, "maiblags to reassign ", mailbagsToReassign);
			} else {
				mailbagsToReassign = mailbagVOs;
			}
			if (mailbagsToReassign != null && mailbagsToReassign.size() > 0) {
            try {
				ReassignController reassignController = (ReassignController)SpringAdapter.getInstance().getBean("reassigncontroller");
				conDetVO = reassignController.reassignMailbags(
						mailbagsToReassign, toContainerVO);
				//Going to save MLD-ALL info as part of reassignment to flight
				//if(toContainerVO.getFlightSequenceNumber()>0)
				//Added by A-8527 for IASCB-34446 start
				String enableMLDSend= findSystemParameterValue(MailConstantsVO.MAIL_MLD_ENABLED_SEND);
				if(MailConstantsVO.FLAG_YES.equals(enableMLDSend)){
				//Added by A-8527 for IASCB-34446 Ends
                MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
                mailController.flagMLDForMailReassignOperations(mailbagsToReassign, toContainerVO, "ALL");
				}
				/*new MLDController().flagMLDForMailReassignOperations(mailbagsToReassign,toContainerVO,"ALL");*/
            } catch (SystemException e) {
                if ((e.getMessage() != null && (e.getMessage().contains("No such persistent instance"))) ||
                        (e.getError() != null && e.getError().getErrorCode().contains("NO DSN ULD FOR SEG"))
                        ) {
                    throw new ReassignmentException(
                            ReassignmentException.MAILBAG_REASSIGN_NOT_AVAILABLE);
                } else {
                    throw new SystemException(e.getMessage(), e);
                }
            }catch(FlightClosedException e) {
            	if(MailConstantsVO.FLAG_NO.equals(reassignSystemPar)) {
            		throw new FlightClosedException(
                            FlightClosedException.FLIGHT_STATUS_CLOSED);
            	 }	 
            	else
                performOffloadAndReassign(mailbagVOs,toContainerVO);
            }
        }
        if (mailbagsToTsfr != null && mailbagsToTsfr.size() > 0) {
            new MailTransfer().transferMailbags(mailbagsToTsfr, toContainerVO);
        }
        return conDetVO;
    }

    /**
			 * @param gpaContractVOs
			 * @throws SystemException
			 * @throws RemoteException
     * @author A-6986
			 */
			public void saveContractDetails(Collection<GPAContractVO> gpaContractVOs)
            throws SystemException, RemoveException, MailTrackingBusinessException {

				log.entering(CLASS, "\n\nsaveContractDetails");
				Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
				GPAContract gpaContract = null;
				GPAContractPK gpaContractPK = null;

        if (gpaContractVOs != null &&
                gpaContractVOs.size() > 0) {
            for (GPAContractVO gpaContractVO : gpaContractVOs) {

						log.log(Log.FINE, "\n\nGPAContractVO  : ", gpaContractVO);
						gpaContractPK = new GPAContractPK();
						gpaContractPK.setCompanyCode(gpaContractVO.getCompanyCode());
						gpaContractPK.setGpaCode(gpaContractVO.getPaCode());
                gpaContractPK.setSernum(gpaContractVO.getSernum());
                if (GPAContractVO.OPERATION_FLAG_INSERT.equals(gpaContractVO.getConOperationFlags())) {

								errors = validateContractIds(gpaContractVO);

                    if (errors == null || errors.size() == 0) {
									new GPAContract(gpaContractVO);
								}

                } else if (GPAContractVO.OPERATION_FLAG_UPDATE.equals(gpaContractVO.getConOperationFlags())) {
                    try {
                        gpaContract = gpaContract.find(gpaContractPK);
                    } catch (FinderException ex) {
								throw new SystemException(ex.getErrorCode(), ex);
							}
							gpaContract.update(gpaContractVO);
                } else if (GPAContractVO.OPERATION_FLAG_DELETE.equals(gpaContractVO.getConOperationFlags())) {
                    try {
                        gpaContract = gpaContract.find(gpaContractPK);
                    } catch (FinderException ex) {
								throw new SystemException(ex.getErrorCode(), ex);
							}
							gpaContract.remove();
						}
					}
				}


				if (errors.size() > 0) {

					MailTrackingBusinessException exception = new MailTrackingBusinessException();
					exception.addErrors(errors);
					throw exception;
				}

			}

    /**
			 * @param  gpaContractFilterVO
			 * @param pageNumber
			 * @throws SystemException
			 * @throws RemoteException
     * @author A-6986
     */
    public Collection<GPAContractVO> listContractDetails(
					GPAContractFilterVO gpaContractFilterVO)
            throws SystemException, RemoteException {
				log.entering(CLASS, "listContractDetails");
				return GPAContract.listContractdetails(gpaContractFilterVO);
			}

    private Collection<ErrorVO> validateContractIds(GPAContractVO contractVO) throws SystemException {

        ErrorVO error = null;
				Object[] errorCodes = new Object[3];
				Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
				GPAContractFilterVO filterVO = new GPAContractFilterVO();

				Collection<GPAContractVO> contractVOs = null;


				filterVO.setCompanyCode(contractVO.getCompanyCode());
				filterVO.setContractID(contractVO.getContractIDs());
				filterVO.setPaCode(contractVO.getPaCode());

				contractVOs = GPAContract.listODForContract(filterVO);
        if (contractVOs == null || contractVOs.isEmpty()) {
					filterVO = new GPAContractFilterVO();
					filterVO.setCompanyCode(contractVO.getCompanyCode());
					filterVO.setOrigin(contractVO.getOriginAirports());
					filterVO.setDestination(contractVO.getDestinationAirports());
					filterVO.setPaCode(contractVO.getPaCode());

					contractVOs = GPAContract.listODForContract(filterVO);
				}

        if (contractVOs != null && contractVOs.size() > 0) {


            for (GPAContractVO gpaContract : contractVOs) {
                if (((gpaContract.getOriginAirports().equals(contractVO.getOriginAirports()))
                        && (gpaContract.getDestinationAirports().equals(contractVO.getDestinationAirports()))
                        && gpaContract.getCidFromDates().equals(contractVO.getCidFromDates()) &&

                        gpaContract.getCidToDates().equals(contractVO.getCidToDates()) && gpaContract.getContractIDs().equals(contractVO.getContractIDs())

                )) {


							 error = new ErrorVO(CONTRACTID_ALREADY_EXISTS);
							 errorCodes[0] = gpaContract.getOriginAirports();
							 errorCodes[1] = gpaContract.getDestinationAirports();
							 error.setErrorData(errorCodes);
                    errors.add(error);
                }
                if (((gpaContract.getOriginAirports().equals(contractVO.getOriginAirports()))
                        && (gpaContract.getDestinationAirports().equals(contractVO.getDestinationAirports()))
                )

                        ) {
                    LocalDate fromDate = new LocalDate(LocalDate.NO_STATION, Location.NONE, false);
                    fromDate.setDate(contractVO.getCidFromDates());
                    LocalDate toDate = new LocalDate(LocalDate.NO_STATION, Location.NONE, false);
                    toDate.setDate(contractVO.getCidToDates());
                    LocalDate fromDateDb = new LocalDate(LocalDate.NO_STATION, Location.NONE, false);
                    fromDateDb.setDate(gpaContract.getCidFromDates());
                    LocalDate toDateDb = new LocalDate(LocalDate.NO_STATION, Location.NONE, false);
                    toDateDb.setDate(gpaContract.getCidToDates());
                    if ((fromDate.compareTo(fromDateDb) >= 0 && fromDate.compareTo(toDateDb) <= 0) ||
                            (toDate.compareTo(fromDateDb) >= 0 && toDate.compareTo(toDateDb) <= 0)) {
                        error = new ErrorVO(CONTRACTID_ALREADY_EXISTS_FOR_SAME_DATE_SPAN);
                        errorCodes[0] = gpaContract.getCidFromDates();
                        errorCodes[1] = gpaContract.getCidToDates();
                        error.setErrorData(errorCodes);
                        errors.add(error);
                        break;
                    }


                }

            }
        }
        return errors;
    }

    /**
			 * @param currentAirport
			 * @param paCode
			 * @return receiveFromTruckEnabled
			 * @throws SystemException
     * @author A-7871
     * Used for ICRD-240184
     */
    public boolean checkReceivedFromTruckEnabled(String currentAirport,String orginAirport,String paCode,LocalDate dspDate) throws SystemException {
        String receiveFromTruckEnabled = null;
        boolean receiveFromTruck = false;

        receiveFromTruckEnabled = constructDAO().checkReceivedFromTruckEnabled(currentAirport,orginAirport,paCode,dspDate);// modified by A-8353 for ICRD-336294
        if (receiveFromTruckEnabled != null)
            receiveFromTruck = true;
			return receiveFromTruck;

		}

    /**
     * Added for ICRD-255189
     *
		 * @param mailbagVOs
		 * @return
		 * @throws SystemException
		 */
    public MailbagVO constructOriginDestinationDetails(MailbagVO mailbagVO) throws SystemException {
			Collection<String> officeOfExchanges = new ArrayList<String>();
        HashMap<String, String> resultSetMap = new HashMap<String, String>();

			officeOfExchanges.add(mailbagVO.getOoe());
			officeOfExchanges.add(mailbagVO.getDoe());
			resultSetMap = findAirportForOfficeOfExchange(mailbagVO.getCompanyCode(), officeOfExchanges);


        if (resultSetMap != null) {
			if (resultSetMap.containsKey(mailbagVO.getOoe()) && resultSetMap.get(mailbagVO.getOoe())!=null) {
					mailbagVO.setOrigin(resultSetMap.get(mailbagVO.getOoe()));
				}
			if (resultSetMap.containsKey(mailbagVO.getDoe()) && resultSetMap.get(mailbagVO.getDoe())!=null) {
					mailbagVO.setDestination(resultSetMap.get(mailbagVO.getDoe()));
				}

			}
			return mailbagVO;

		}
		/**
		 * @author A-5526
		 * @param operationalFlightVO
		 * @throws SystemException
		 */
		public void unassignEmptyUldsinMailFlight(OperationalFlightVO operationalFlightVO) throws SystemException {
			Collection<ContainerVO> containerVOs=AssignedFlight.findEmptyULDsInAssignedFlight(operationalFlightVO);
			Collection<ContainerDetailsVO> containerDetailsVOs=new ArrayList<ContainerDetailsVO>();
			if(containerVOs!=null && !containerVOs.isEmpty()){
				for(ContainerVO containerVO:containerVOs){
					ContainerDetailsVO containerDetailsVO=new ContainerDetailsVO();
					containerDetailsVO.setCompanyCode(containerVO.getCompanyCode());
					containerDetailsVO.setPol(containerVO.getAssignedPort());
					containerDetailsVO.setCarrierId(containerVO.getCarrierId());
					containerDetailsVO.setFlightNumber(containerVO.getFlightNumber());
					containerDetailsVO.setFlightSequenceNumber(containerVO.getFlightSequenceNumber());
					containerDetailsVO.setSegmentSerialNumber(containerVO.getSegmentSerialNumber());
					containerDetailsVO.setContainerNumber(containerVO.getContainerNumber());
					containerDetailsVO.setAcceptedFlag(MailConstantsVO.FLAG_YES);
					containerDetailsVO.setContainerType(MailConstantsVO.ULD_TYPE);    
					containerDetailsVOs.add(containerDetailsVO);             
				}
				
			}
			if(containerDetailsVOs!=null && !containerDetailsVOs.isEmpty()){
				unassignEmptyULDs(containerDetailsVOs);
			}
			
		}

				

    public Page<MailAcceptanceVO> findOutboundFlightsDetails(OperationalFlightVO operationalFlightVO, int pageNumber) throws SystemException {
        try {
        	//added by as part of IASCB-56622
        	boolean hasPrivilege = hasPrivilege(HAS_PRIVILEGE_FOR_VIEW_ALL_MAIL_TRUCK);
        	operationalFlightVO.setIncludeAllMailTrucks(hasPrivilege);
            return constructDAO().findOutboundFlightsDetails(operationalFlightVO, pageNumber);
			} catch (PersistenceException persistenceException) {
				persistenceException.getErrorCode();
				throw new SystemException(persistenceException.getErrorCode());
			}
    }

    public boolean hasPrivilege(String privilege){
        try {
			return SecurityAgent.getInstance().checkPrivilegeForAction(privilege);
		} catch (SystemException e) {
			return false;
		}
     }

    public Page<ContainerDetailsVO> getContainersinFlight(OperationalFlightVO operationalFlightVO, int pageNumber) throws SystemException {
			log.entering(CLASS, "getContainersinFlight");
			 log.entering(MODULE, "getContainersinFlight");
			  MailAcceptanceVO mailAcceptanceVO = new MailAcceptanceVO();
        Page<ContainerDetailsVO> acceptedULDs = null;
			  try {
			   acceptedULDs =
                    constructDAO().findContainerDetails(operationalFlightVO, pageNumber);
			  } catch (PersistenceException persistenceException) {
					persistenceException.getErrorCode();
					throw new SystemException(persistenceException.getErrorCode());
				}
			    if ((acceptedULDs != null) && (acceptedULDs.size() > 0)) {
			      mailAcceptanceVO.setContainerDetails(acceptedULDs);
			    }
			    return acceptedULDs;
		 }

    public Page<MailbagVO> getMailbagsinContainer(ContainerDetailsVO containerVO, int pageNumber) throws SystemException, RemoteException {
        log.entering(CLASS, "getMailbagsinContainer");
        log.entering(MODULE, "getMailbagsinContainer");
        Page<MailbagVO> mailbags = null;
        try {
            mailbags =
                    constructDAO().findMailbagsinContainer(containerVO, pageNumber);
        } catch (PersistenceException persistenceException) {
            persistenceException.getErrorCode();
            throw new SystemException(persistenceException.getErrorCode());
        }
        return mailbags;
    }

    public Page<DSNVO> getMailbagsinContainerdsnview(ContainerDetailsVO containerVO, int pageNumber) throws SystemException, RemoteException {
        log.entering(CLASS, "getMailbagsinContainerdsnview");
        log.entering(MODULE, "getMailbagsinContainerdsnview");
        Page<DSNVO> dsnVos = null;
        try {
            dsnVos =
                    constructDAO().findMailbagsinContainerdsnview(containerVO, pageNumber);
        } catch (PersistenceException persistenceException) {
            persistenceException.getErrorCode();
            throw new SystemException(persistenceException.getErrorCode());
        }
        return dsnVos;
    }

    public MailbagVO findCarditSummaryView(CarditEnquiryFilterVO carditEnquiryFilterVO) throws SystemException, RemoteException {
        log.entering(CLASS, "findCarditSummaryView");
        MailbagVO mailbag = null;
			  try {
				  mailbag =
			    	constructDAO().findCarditSummaryView(carditEnquiryFilterVO);
			  } catch (PersistenceException persistenceException) {
					persistenceException.getErrorCode();
					throw new SystemException(persistenceException.getErrorCode());
				}
			    return mailbag;
		 }

    public Page<MailbagVO> findGroupedCarditMails(CarditEnquiryFilterVO carditEnquiryFilterVO, int pageNumber) throws SystemException, RemoteException {
        log.entering(CLASS, "findGroupedCarditMails");
        Page<MailbagVO> mailbag = null;
        try {
            mailbag =
                    constructDAO().findGroupedCarditMails(carditEnquiryFilterVO, pageNumber);
        } catch (PersistenceException persistenceException) {
            persistenceException.getErrorCode();
            throw new SystemException(persistenceException.getErrorCode());
        }
        return mailbag;
    }

    public MailbagVO findLyinglistSummaryView(MailbagEnquiryFilterVO mailbagEnquiryFilterVO) throws SystemException, RemoteException {
        log.entering(CLASS, "findCarditSummaryView");
        MailbagVO mailbag = null;
			  try {
				  mailbag =
			    	constructDAO().findLyinglistSummaryView(mailbagEnquiryFilterVO);
			  } catch (PersistenceException persistenceException) {
					persistenceException.getErrorCode();
					throw new SystemException(persistenceException.getErrorCode());
				}
			    return mailbag;
		 }

    public Page<MailbagVO> findGroupedLyingList(MailbagEnquiryFilterVO mailbagEnquiryFilterVO, int pageNumber) throws SystemException, RemoteException {
        log.entering(CLASS, "findGroupedCarditMails");
        Page<MailbagVO> mailbag = null;
        try {
            mailbag =
                    constructDAO().findGroupedLyingList(mailbagEnquiryFilterVO, pageNumber);
        } catch (PersistenceException persistenceException) {
            persistenceException.getErrorCode();
            throw new SystemException(persistenceException.getErrorCode());
        }
        return mailbag;
    }

    public Page<MailAcceptanceVO> findOutboundCarrierDetails(OperationalFlightVO operationalFlightVO, int pageNumber) throws SystemException {
        try {
            return constructDAO().findOutboundCarrierDetails(operationalFlightVO, pageNumber);
        } catch (PersistenceException persistenceException) {
            persistenceException.getErrorCode();
            throw new SystemException(persistenceException.getErrorCode());
        }
    }

    public Page<MailbagVO> getMailbagsinCarrierContainer(ContainerDetailsVO containerVO, int pageNumber) throws SystemException, RemoteException {
        log.entering(CLASS, "getMailbagsinContainer");
        log.entering(MODULE, "getMailbagsinContainer");
        Page<MailbagVO> mailbags = null;
        try {
            mailbags =
                    constructDAO().getMailbagsinCarrierContainer(containerVO, pageNumber);
        } catch (PersistenceException persistenceException) {
            persistenceException.getErrorCode();
            throw new SystemException(persistenceException.getErrorCode());
        }
        return mailbags;
    }

    public Page<DSNVO> getMailbagsinCarrierdsnview(ContainerDetailsVO containerVO, int pageNumber) throws SystemException, RemoteException {
        log.entering(CLASS, "getMailbagsinContainerdsnview");
        log.entering(MODULE, "getMailbagsinContainerdsnview");
        Page<DSNVO> dsnVos = null;
        try {
            dsnVos =
                    constructDAO().getMailbagsinCarrierContainerdsnview(containerVO, pageNumber);
        } catch (PersistenceException persistenceException) {
            persistenceException.getErrorCode();
            throw new SystemException(persistenceException.getErrorCode());
        }
        return dsnVos;
    }

    public Collection<DSNVO> getDSNsForContainer(ContainerDetailsVO containerVO) throws SystemException, RemoteException {
        log.entering(CLASS, "getMailbagsinContainerdsnview");
        Collection<DSNVO> dsnVos = null;
			  try {
				  if(containerVO.getFlightSequenceNumber()==-1){
					  dsnVos =constructDAO().getDSNsForCarrier(containerVO);
				  }
				  else{
				  dsnVos =
			    	constructDAO().getDSNsForContainer(containerVO);
				  }

				  //  checkRoutingAvailabilityForDSN(dsnVos,containerVO);
			  } catch (PersistenceException persistenceException) {
					persistenceException.getErrorCode();
					throw new SystemException(persistenceException.getErrorCode());
				}
			    return dsnVos;
		 }

    public Collection<DSNVO> getRoutingInfoforDSN(Collection<DSNVO> dsnVos, ContainerDetailsVO containerDetailsVO) throws SystemException, RemoteException {
			OperationalFlightVO operationalFlightVo = new OperationalFlightVO();
			operationalFlightVo.setCarrierId(containerDetailsVO.getCarrierId());
			operationalFlightVo.setCompanyCode(containerDetailsVO.getCompanyCode());
			operationalFlightVo.setFlightNumber(containerDetailsVO.getFlightNumber());
			operationalFlightVo.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
        for (DSNVO dSNVO : dsnVos) {
            String type = "";
            if (dSNVO != null) {
                if (ContainerDetailsVO.FLAG_YES.equals(dSNVO.getPltEnableFlag())) {
                    type = "MAILBAG";
                    dSNVO.setContainerNumber(containerDetailsVO.getContainerNumber());
                } else if (((ContainerDetailsVO.FLAG_NO).equals(dSNVO.getPltEnableFlag()))
                        && ((ContainerDetailsVO.OPERATION_FLAG_UPDATE).equals(dSNVO.getContainerType()))) {
                    type = "DESPATCH_IN_ULD";
                } else if (((ContainerDetailsVO.FLAG_NO).equals(dSNVO.getPltEnableFlag()))
                        && (("B").equals(dSNVO.getContainerType()))) {
                    type = "DESPATCH_IN_MFT_BULK";
                    dSNVO.setContainerNumber(containerDetailsVO.getContainerNumber());
                }
                if (dSNVO.getRoutingAvl() == null || dSNVO.getRoutingAvl().trim().length() == 0) {
                    if (operationalFlightVo != null && type.trim().length() > 0) {
                        if (AssignedFlight.checkRoutingsForMails(operationalFlightVo, dSNVO, type)) {
                            dSNVO.setRoutingAvl(ContainerDetailsVO.FLAG_YES);
                        } else {
                            dSNVO.setRoutingAvl(ContainerDetailsVO.FLAG_NO);
                        }
                        //dSNVO.setRoutingAvl(ContainerDetailsVO.FLAG_YES);
                    }
                }
            }
        }
        return dsnVos;
    }

    /**
		 * 	Method		:	MailController.listFlightDetails
		 *	Added by 	:	A-8164 on 25-Sep-2018
		 * 	Used for 	:	Listing flight details for mailInbound
		 *	Parameters	:	@param mailArrivalVO
		 *	Parameters	:	@return
		 *	Parameters	:	@throws SystemException
		 *	Parameters	:	@throws PersistenceException
		 *	Return type	: 	Collection<MailArrivalVO>
		 */
		public Page<MailArrivalVO> listFlightDetails(MailArrivalVO mailArrivalVO)
				throws SystemException, PersistenceException {
        Page<MailArrivalVO> flightDetailsCollection =
					AssignedFlight.listFlightDetails(mailArrivalVO);
        Collection<MailArrivalVO> manifestInfoCollection =
					AssignedFlight.listManifestDetails(mailArrivalVO);
        String flightCheck = null;
        String manifestCheck = null;
        double totalWeight, totalContainerCount, totalMailCount;
        if(flightDetailsCollection!=null&&flightDetailsCollection.size()>0) {
        for (MailArrivalVO flightDetails : flightDetailsCollection) {
            totalWeight = 0;
            totalContainerCount = 0;
            totalMailCount = 0;
            flightCheck = new StringBuffer().append(flightDetails.getFlightCarrierCode())
						.append(flightDetails.getFlightNumber()).append(flightDetails.getFlightSequenceNumber())
							.append(flightDetails.getCarrierId()).toString();
				if(manifestInfoCollection!=null && manifestInfoCollection.size()>0) {
            for (MailArrivalVO manifestDetails : manifestInfoCollection) {
                manifestCheck = new StringBuffer().append(manifestDetails.getFlightCarrierCode())
							.append(manifestDetails.getFlightNumber()).append(manifestDetails.getFlightSequenceNumber())
								.append(manifestDetails.getCarrierId()).toString();
                if (flightCheck.equals(manifestCheck)) {
                    if (manifestDetails.getTotalWeight() != null)
                        totalWeight = totalWeight + manifestDetails.getTotalWeight();
                    totalContainerCount = totalContainerCount + manifestDetails.getContainerCount();
                    totalMailCount = totalMailCount + manifestDetails.getMailCount();
                    if (flightDetails.getManifestInfo() == null) {
							flightDetails.setManifestInfo(manifestDetails.getManifestInfo());
                    } else {
                        String manifestInfo = new StringBuffer()
									.append(flightDetails.getManifestInfo()).append("|")
										.append(manifestDetails.getManifestInfo()).toString();
							flightDetails.setManifestInfo(manifestInfo);
						}
					}
				}
				}
            if (flightDetails.getManifestInfo() == null) {
					flightDetails.setManifestInfo(" -- ");
            } else {
                String manifestInfo = new StringBuffer()
							.append(flightDetails.getManifestInfo()).append("| Total:")
                        .append((int) totalMailCount).append('/')
                        .append(new Measure(UnitConstants.MAIL_WGT, totalWeight).getRoundedDisplayValue()).toString();
					flightDetails.setManifestInfo(manifestInfo);
				}
			}
		}
			return flightDetailsCollection;
		}

    /**
		 * 	Method		:	MailController.closeInboundFlights
		 *	Added by 	:	A-8164 on 11-Dec-2018
		 * 	Used for 	:	Closing multiple flights
		 *	Parameters	:	@param operationalFlightVOs
		 *	Parameters	:	@throws SystemException
		 *	Parameters	:	@throws ULDDefaultsProxyException
		 *	Parameters	:	@throws CloseFlightException
		 *	Return type	: 	void
		 */
		public void closeInboundFlights(Collection<OperationalFlightVO> operationalFlightVOs)
					throws SystemException, MailTrackingBusinessException {
			log.entering(CLASS, "closeInboundFlight");
        for (OperationalFlightVO operationalFlightVO : operationalFlightVOs) {
							try {
						closeMailInboundFlight(operationalFlightVO);
					} catch (BusinessException e) {
						throw new MailTrackingBusinessException(e);
				}
			}
			log.exiting(CLASS, "closeInboundFlight");
		}

    /**
		 * 	Method		:	MailController.reopenInboundFlights
		 *	Added by 	:	A-8164 on 11-Dec-2018
		 * 	Used for 	:	reopening multiple flights
		 *	Parameters	:	@param operationalFlightVOs
		 *	Parameters	:	@throws SystemException
		 *	Return type	: 	void
		 */
		public void reopenInboundFlights(Collection<OperationalFlightVO> operationalFlightVOs)
				throws SystemException {
			log.entering(CLASS, "reopenInboundFlight");
        for (OperationalFlightVO operationalFlightVO : operationalFlightVOs) {
				AssignedFlight inboundFlight = null;
				AssignedFlightPK inboundFlightPk = new AssignedFlightPK();
				inboundFlightPk.setAirportCode(operationalFlightVO.getPou());
				inboundFlightPk.setCompanyCode(operationalFlightVO.getCompanyCode());
				inboundFlightPk.setFlightNumber(operationalFlightVO.getFlightNumber());
				inboundFlightPk.setFlightSequenceNumber(operationalFlightVO
						.getFlightSequenceNumber());
				inboundFlightPk.setLegSerialNumber(operationalFlightVO
						.getLegSerialNumber());
				inboundFlightPk.setCarrierId(operationalFlightVO.getCarrierId());
				try {
					inboundFlight = AssignedFlight.find(inboundFlightPk);
				} catch (FinderException ex) {
					log.log(Log.INFO, FINDEREXCEPTIO_STRING);
					log.log(Log.INFO, "DATA INCONSISTENT");
					throw new SystemException(ex.getErrorCode(), ex);
				}
				if (inboundFlight != null) {
					inboundFlight.setImportClosingFlag(MailConstantsVO.FLIGHT_STATUS_OPEN);
				}
				AssignedFlightAuditVO assignedFlightAuditVO = new AssignedFlightAuditVO(
						AssignedFlightVO.MODULE, AssignedFlightVO.SUBMODULE,
						AssignedFlightVO.ENTITY);
				assignedFlightAuditVO = (AssignedFlightAuditVO) AuditUtils
						.populateAuditDetails(assignedFlightAuditVO, inboundFlight);
				
				performAuditForInboundFlightReopen(assignedFlightAuditVO,inboundFlight,operationalFlightVO);
			}
		}

	/**
		 * 	Method		:	MailController.populateMailArrivalVOForInbound
		 *	Added by 	:	A-8164 on 27-Dec-2018
		 * 	Used for 	:	For populating mailArrivalVo for inbound
		 *	Parameters	:	@param operationalFlightVO
		 *	Parameters	:	@return
		 *	Parameters	:	@throws SystemException
		 *	Return type	: 	MailArrivalVO
		 */
		public MailArrivalVO populateMailArrivalVOForInbound(OperationalFlightVO operationalFlightVO)
            throws SystemException {
			MailArrivalFilterVO mailArrivalFilterVO =
					new MailArrivalFilterVO();
			mailArrivalFilterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
			mailArrivalFilterVO.setCarrierId(operationalFlightVO.getCarrierId());
			mailArrivalFilterVO.setCarrierCode(operationalFlightVO.getCarrierCode());
			mailArrivalFilterVO.setFlightNumber(operationalFlightVO.getFlightNumber());
			mailArrivalFilterVO.setFlightSequenceNumber(
					operationalFlightVO.getFlightSequenceNumber());
			mailArrivalFilterVO.setFlightDate(operationalFlightVO.getFlightDate());
			mailArrivalFilterVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
			mailArrivalFilterVO.setPou(operationalFlightVO.getPou());
			mailArrivalFilterVO.setMailStatus(MailConstantsVO.MAIL_STATUS_ALL);
			MailArrivalVO mailArrivalVO = new MailArrivalVO();
			mailArrivalVO = findArrivalDetails(mailArrivalFilterVO);
			mailArrivalVO.setCompanyCode(operationalFlightVO.getCompanyCode());
			mailArrivalVO.setAirportCode(operationalFlightVO.getPou());
			mailArrivalVO.setFlightCarrierCode(operationalFlightVO.getCarrierCode());
			mailArrivalVO.setFlightNumber(operationalFlightVO.getFlightNumber());
			mailArrivalVO.setArrivalDate(operationalFlightVO.getFlightDate());
			mailArrivalVO.setCarrierId(operationalFlightVO.getCarrierId());
			mailArrivalVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
			mailArrivalVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
			HashMap<String, Collection<DSNVO>> dsnvoMap =
                new HashMap<String, Collection<DSNVO>>();
        if (mailArrivalVO.getContainerDetails() != null &&
                mailArrivalVO.getContainerDetails().size() > 0) {
            for (ContainerDetailsVO containerdtlsvo : mailArrivalVO.getContainerDetails()) {
					double manifestedWeight = 0;
					int manifestedBags = 0;
					double receivedWeight = 0;
					int receivedBags = 0;
					Collection<DSNVO> dSNVOs =  new ArrayList<DSNVO>();
					dSNVOs = containerdtlsvo.getDsnVOs();
                if (dSNVOs != null && dSNVOs.size() > 0) {
                    for (DSNVO dsnvo : dSNVOs) {
                        manifestedWeight = manifestedWeight + dsnvo.getWeight().getRoundedSystemValue();
                        manifestedBags = manifestedBags + dsnvo.getBags();
                        receivedWeight = receivedWeight + dsnvo.getReceivedWeight().getRoundedSystemValue();
                        receivedBags = receivedBags + dsnvo.getReceivedBags();
							Collection<DSNVO> despatchVOs = null;
                        if (dsnvo.getCsgDocNum() != null && !"".equals(dsnvo.getCsgDocNum())) {
                            if (dsnvoMap.containsKey(dsnvo.getCsgDocNum())) {
									despatchVOs = dsnvoMap.get(dsnvo.getCsgDocNum());
                            } else {
									despatchVOs = new ArrayList<DSNVO>();
								}
							    despatchVOs.add(dsnvo);
                            dsnvoMap.put(dsnvo.getCsgDocNum(), despatchVOs);
							}
						}
					}
					containerdtlsvo.setTotalBags(manifestedBags);
					containerdtlsvo.setTotalWeight(
                        new Measure(UnitConstants.MAIL_WGT, manifestedWeight));
					containerdtlsvo.setReceivedBags(receivedBags);
					containerdtlsvo.setReceivedWeight(
                        new Measure(UnitConstants.MAIL_WGT, receivedWeight));
	    		}
	    	}
			return mailArrivalVO;
		}

		public Page<ContainerDetailsVO> findArrivedContainersForInbound(MailArrivalFilterVO mailArrivalFilterVO)
            throws SystemException {
			return ULDForSegment.findArrivedContainersForInbound(mailArrivalFilterVO);
		}

		public Page<MailbagVO> findArrivedMailbagsForInbound(MailArrivalFilterVO mailArrivalFilterVO)
            throws SystemException {
			return ULDForSegment.findArrivedMailbagsForInbound(mailArrivalFilterVO);
		}

		public Page<DSNVO> findArrivedDsnsForInbound(MailArrivalFilterVO mailArrivalFilterVO)
            throws SystemException {
			return ULDForSegment.findArrivedDsnsForInbound(mailArrivalFilterVO);
		}

		public OffloadVO findOffLoadDetails(OffloadFilterVO offloadFilterVO) throws SystemException {
			log.entering(CLASS, "findOffLoadDetails");
			return MailAcceptance.findOffLoadDetails(offloadFilterVO);
		}

		public MailInConsignmentVO populatePCIDetailsforUSPS(MailInConsignmentVO mailInConsignment, String airport, String companyCode, String rcpOrg, String rcpDest, String year)
            throws SystemException {
        mailInConsignment.setMailSubclass(mailInConsignment.getMailId().substring(3, 4) + "X");
	    	mailInConsignment.setMailClass(mailInConsignment.getMailId().substring(3, 4));
//			    String lastDigitOfYear = new LocalDate(this.ediMessageVO.getStationCode(),
//			      Location.ARP, false).toDisplayFormat("yyyy").substring(3, 4);
	    	mailInConsignment.setYear(Integer.parseInt(year));
        exchangeOfficeMap = findOfficeOfExchangeForPA(companyCode, findSystemParameterValue(USPS_DOMESTIC_PA));

			    if ((this.exchangeOfficeMap != null) && (!this.exchangeOfficeMap.isEmpty()) &&
			    	      (this.exchangeOfficeMap.containsKey(rcpOrg)) &&
                (this.exchangeOfficeMap.containsKey(rcpDest))) {
            mailInConsignment.setOriginExchangeOffice((String) this.exchangeOfficeMap.get(rcpOrg));
            mailInConsignment.setDestinationExchangeOffice((String) this.exchangeOfficeMap.get(rcpDest));
			    	    }

			    mailInConsignment.setMailCategoryCode("B");



			   /* mailInConsignment.setDsn(generateDespatchSerialNumber("Y", airport, companyCode));
        if (mailInConsignment.getReceptacleSerialNumber() == null) {
			      String rsn = generateReceptacleSerialNumber(mailInConsignment.getDsn(), airport, companyCode);
            if (rsn.length() > 3) {
			        generateDespatchSerialNumber("N", airport, companyCode);
			        mailInConsignment.setDsn(generateDespatchSerialNumber("Y", airport, companyCode));
			        mailInConsignment.setReceptacleSerialNumber(generateReceptacleSerialNumber(
			        		mailInConsignment.getDsn(), airport, companyCode));
            } else {
			    	  mailInConsignment.setReceptacleSerialNumber(rsn);
			      }
			    }*/

			    mailInConsignment.setDsn(MailConstantsVO.DOM_MAILBAG_DEF_DSNVAL);
			    mailInConsignment.setReceptacleSerialNumber(MailConstantsVO.DOM_MAILBAG_DEF_RSNVAL);

			    mailInConsignment.setHighestNumberedReceptacle("9");
			    mailInConsignment.setRegisteredOrInsuredIndicator("9");
			    mailInConsignment.setStatedBags(1);
//			    mailInConsignmentVO.setOrigin(rcpOrg);
//			    mailInConsignmentVO.setDestination(rcpDest);
			    return mailInConsignment;
			  }

		private String generateDespatchSerialNumber(String currentKey, String airportCode, String companyCode)
            throws SystemException {
			    String key = null;
			    StringBuilder keyCondition = new StringBuilder();
			    keyCondition.append(new LocalDate(airportCode,
			      Location.ARP, false).toDisplayFormat("yyyy"));
			    Criterion criterion = KeyUtils.getCriterion(companyCode,
			      "DOM_USPS_DSN", keyCondition.toString());

			    key = KeyUtils.getKey(criterion);
			    if (("Y".equals(currentKey)) &&
                (!"1".equals(key))) {
			      key = String.valueOf(Long.parseLong(key) - 1L);
			      //KeyUtils.resetKey(criterion, key);
			    }
			    return checkLength(key, 4);
			  }

    private String checkLength(String key, int maxLength) {
		    String modifiedKey = null;
		    modifiedKey = key;
		    int keyLength = modifiedKey.length();
        if (modifiedKey.length() < maxLength) {
		      int diff = maxLength - keyLength;
		      String val = null;
		      for (int i = 0; i < diff; i++) {
		        val = "0";
		      }
		      modifiedKey = val + key;
		    }
		    return modifiedKey;
		  }

		  private String generateReceptacleSerialNumber(String dsn, String airportCode, String companyCode)
            throws SystemException {
				    StringBuilder keyCondition = new StringBuilder();
				    keyCondition.append(new LocalDate(airportCode,
				      Location.ARP, false).toDisplayFormat("yyyy"))
				      .append(dsn);
				    Criterion criterion = KeyUtils.getCriterion(companyCode,
				      "DOM_USPS_RSN", keyCondition.toString());
				    String rsn = checkLength(KeyUtils.getKey(criterion), 3);
				    return rsn;
				  }
		  /**
		   * 
		   * 	Method		:	MailController.findMailbagBillingStatus
		   *	Added by 	:	a-8331 on 25-Oct-2019
		   * 	Used for 	:
		   *	Parameters	:	@param mailbagvo
		   *	Parameters	:	@return
		   *	Parameters	:	@throws SystemException
		   *	Parameters	:	@throws RemoteException 
		   *	Return type	: 	Collection<DocumentBillingDetailsVO>
		   */
        public DocumentBillingDetailsVO findMailbagBillingStatus(MailbagVO mailbagvo) throws SystemException, RemoteException {
			try {
				mailbagvo.setMailSequenceNumber(mailbagvo.getMailSequenceNumber()>0?mailbagvo.getMailSequenceNumber():findMailSequenceNumber(mailbagvo.getMailbagId(), mailbagvo.getCompanyCode()));
				return new MailtrackingMRAProxy().findMailbagBillingStatus(mailbagvo);
			} catch (ProxyException e) {
				throw new SystemException(e.getMessage());
			}
			
			
			
		}
			/**
			* 
			* 	Method		:	MailController.voidMailbags
			*	Added by 	:	a-8331 on 25-Oct-2019
			* 	Used for 	:
			*	Parameters	:	@param documentBillingDetails
			*	Parameters	:	@throws RemoteException
			*	Parameters	:	@throws SystemException 
			*	Return type	: 	void
			*/
		public void voidMailbags(Collection<DocumentBillingDetailsVO> documentBillingDetails) throws RemoteException, SystemException {
			try {
				for(DocumentBillingDetailsVO documentBillingDetailsVO : documentBillingDetails){
					documentBillingDetailsVO.setMailSequenceNumber(documentBillingDetailsVO.getMailSequenceNumber()>0?documentBillingDetailsVO.getMailSequenceNumber():findMailSequenceNumber(documentBillingDetailsVO.getBillingBasis(), documentBillingDetailsVO.getCompanyCode()));
				}
				
				 new MailtrackingMRAProxy().voidMailbags(documentBillingDetails);
			} catch (ProxyException e) {
				throw new SystemException(e.getMessage());
			}
			
		}
		  
		  /**
			 * 
			 * 	Method		:	MailController.listCarditDsnDetails
			 *	Added by 	:	A-8164 on 05-Sep-2019
			 * 	Used for 	:	List Cardit DSN Details
			 *	Parameters	:	@param dsnEnquiryFilterVO
			 *	Parameters	:	@return
			 *	Parameters	:	@throws SystemException 
			 *	Return type	: 	Page<DSNVO>
			 */
			public Page<DSNVO> listCarditDsnDetails(DSNEnquiryFilterVO dsnEnquiryFilterVO)
					throws SystemException{
				log.entering("listCarditDsnDetails", "dsnEnquiryFilterVO");
				
				Page<DSNVO> dsnvos=null;
				dsnvos=Mailbag.listCarditDsnDetails(dsnEnquiryFilterVO);
				return dsnvos;
			}


    /**
     * Method		:	MailController.updateULDContentId
     * Added by 	:	A-6245 on 16-Sep-2018
     * Used for 	:	Update Content Id
     * Parameters	:	@param containerVO
     * Parameters	:	@throws SystemException
     * Return type	: 	void
     */
    public void updateULDContentId(ContainerVO containerVO) throws SystemException {
        ContainerPK containerPK = new ContainerPK();
        Container container = null;
        containerPK.setContainerNumber(containerVO.getContainerNumber());
        containerPK.setAssignmentPort(containerVO.getAssignedPort());
        containerPK.setCarrierId(containerVO.getCarrierId());
        containerPK.setFlightNumber(containerVO.getFlightNumber());
        containerPK.setFlightSequenceNumber(containerVO
                .getFlightSequenceNumber());
        containerPK.setLegSerialNumber(containerVO.getLegSerialNumber());
        containerPK.setCompanyCode(containerVO.getCompanyCode());
        try {
            container = Container.find(containerPK);
        } catch (FinderException ex) {
            log.log(Log.SEVERE, "Finder Exception");
        }
        if (container != null) {
        container.setContentId(containerVO.getContentId());
        }
    }

    /**
     * @param incentiveConfigurationFilterVO
     * @return Collection<IncentiveConfigurationVO>
     * @throws SystemException
     * @throws RemoteException
     * @author A-6986
     * Used for ICRD-232361
     */
    public Collection<IncentiveConfigurationVO> findIncentiveConfigurationDetails(IncentiveConfigurationFilterVO incentiveConfigurationFilterVO)
            throws SystemException, RemoteException {

        this.log.entering(CLASS, "findIncentiveConfigurationDetails");
        return MailIncentiveMaster.findIncentiveConfigurationDetails(incentiveConfigurationFilterVO);
    }

    /**
     * @param incentiveConfigurationVOs
     * @throws SystemException
     * @throws RemoteException
     * @throws RemoveException
     * @throws MailTrackingBusinessException
     * @author A-6986
     * Used for ICRD-232361
     */
    public void saveIncentiveConfigurationDetails(Collection<IncentiveConfigurationVO> incentiveConfigurationVOs)
            throws SystemException, RemoteException, RemoveException, MailTrackingBusinessException {

        log.entering(CLASS, "saveIncentiveConfigurationDetails");


        MailIncentiveMaster mailIncentiveMaster = null;

        MailIncentiveMasterPK mailIncentiveMasterPK = null;

        if ((incentiveConfigurationVOs != null) && (incentiveConfigurationVOs.size() > 0)) {
            for (IncentiveConfigurationVO incentiveConfigurationVO : incentiveConfigurationVOs) {
                mailIncentiveMasterPK = new MailIncentiveMasterPK();

                mailIncentiveMasterPK.setCompanyCode(incentiveConfigurationVO.getCompanyCode());
                if (incentiveConfigurationVO.getIncentiveSerialNumber() > 0) {
                    mailIncentiveMasterPK.setIncentiveSerialNumber(incentiveConfigurationVO.getIncentiveSerialNumber());
                }
                if ((IncentiveConfigurationVO.OPERATION_FLAG_INSERT.equals(incentiveConfigurationVO.getIncOperationFlags())) ||
                        (IncentiveConfigurationVO.OPERATION_FLAG_INSERT.equals(incentiveConfigurationVO.getDisIncOperationFlags()))) {

                    new MailIncentiveMaster(incentiveConfigurationVO);

                } else if ((IncentiveConfigurationVO.OPERATION_FLAG_UPDATE.equals(incentiveConfigurationVO.getIncOperationFlags())) ||
                        (IncentiveConfigurationVO.OPERATION_FLAG_UPDATE.equals(incentiveConfigurationVO.getDisIncOperationFlags()))) {

                    try {

                        mailIncentiveMaster = MailIncentiveMaster.find(mailIncentiveMasterPK);
                    } catch (FinderException e) {
                        throw new SystemException(e.getErrorCode(), e);
                    }
                    mailIncentiveMaster.update(incentiveConfigurationVO);

                } else if (IncentiveConfigurationVO.OPERATION_FLAG_DELETE.equals(incentiveConfigurationVO.getIncOperationFlags())
                        || IncentiveConfigurationVO.OPERATION_FLAG_DELETE.equals(incentiveConfigurationVO.getDisIncOperationFlags())) {

                    try {
                        mailIncentiveMaster = MailIncentiveMaster.find(mailIncentiveMasterPK);
                    } catch (FinderException e) {
                        throw new SystemException(e.getErrorCode(), e);
                    }
                    mailIncentiveMaster.remove();

                }
            }
        }
    }


    /**
     * Method		:	MailController.findRunnerFlights
     * Added by 	:	A-5526 on 12-Oct-2018
     * Used for 	:   ICRD-239811
     * Parameters	:	@param runnerFlightFilterVO
     * Parameters	:	@return
     * Parameters	:	@throws RemoteException
     * Parameters	:	@throws SystemException
     * Return type	: 	Page<RunnerFlightVO>
     *
     * @throws PersistenceException
     */
    public Page<RunnerFlightVO> findRunnerFlights(RunnerFlightFilterVO runnerFlightFilterVO)
            throws RemoteException, SystemException, PersistenceException {
        log.entering("CTOManifestController", "findRunnerFlights");
        Page<RunnerFlightVO> runnerFlightVOs = null;

        runnerFlightVOs = constructDAO().findRunnerFlights(runnerFlightFilterVO);

        if (runnerFlightVOs != null && runnerFlightVOs.size() > 0) {
            for (RunnerFlightVO runnerFlightVO : runnerFlightVOs) {
                double manifetsedWgt = 0;
                if (runnerFlightVO.getRunnerFlightULDs() != null && runnerFlightVO.getRunnerFlightULDs().size() > 0) {
                    for (RunnerFlightULDVO runnerFlightULDVO : runnerFlightVO.getRunnerFlightULDs()) {
                        ContainerVO containerDetailVO = null;
                        RunnerFlightVO runnerFlightVOForContainer = null;
                        if (RunnerFlightVO.LISTTYPE_REFUSAL.equals(runnerFlightFilterVO.getInboundListType())) {
                             runnerFlightVOForContainer = getRunnerFlightVOForContainerFilter(runnerFlightVO);
                        }
                        if(runnerFlightVOForContainer != null){
                        	 containerDetailVO = constructDAO().findContainerDetails(runnerFlightVOForContainer, runnerFlightULDVO);
                        }else{
                        containerDetailVO = constructDAO().findContainerDetails(runnerFlightVO, runnerFlightULDVO);
                        }
                        if (containerDetailVO != null) {
                            if (containerDetailVO.getWeight() != null)
                                manifetsedWgt = manifetsedWgt + containerDetailVO.getWeight().getRoundedSystemValue();
                            runnerFlightULDVO.setManifestedWeight(containerDetailVO.getWeight());
                            runnerFlightULDVO.setLocation(containerDetailVO.getLocationCode());

                        }

                    }
                    runnerFlightVO.setManifestedWeight(new Measure(UnitConstants.MAIL_WGT, manifetsedWgt));
                }
            }
        }


        return runnerFlightVOs;
    }

    /**
     * Method		:	MailController.findMailbagsForTruckFlight
     * Added by 	:	A-7929 on 23-Oct-2018
     * Added for 	:   CRQ ICRD-241437
     * Parameters	:	@param mailbagEnquiryFilterVO,pageNumber
     * Parameters	:	@return
     * Parameters	:	@throws RemoteException
     * Parameters	:	@throws SystemException
     * Return type	: 	Page<MailbagVO>
     *
     * @throws SystemException
     * @throws PersistenceException
     */
    public Page<MailbagVO> findMailbagsForTruckFlight(MailbagEnquiryFilterVO mailbagEnquiryFilterVO,
                                                      int pageNumber) throws SystemException {
        if ("N".equals(mailbagEnquiryFilterVO.getLyingList())) {
            log.entering(CLASS, "findMailbagsForTruckFlight");
            LogonAttributes logonAttributes = null;
            try {
                logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
            } catch (SystemException e1) {
                e1.getMessage();
            }

            CarditEnquiryFilterVO carditfiltervo=new CarditEnquiryFilterVO();
            carditfiltervo.setCarrierCode(mailbagEnquiryFilterVO.getCarrierCode());
            carditfiltervo.setCompanyCode(mailbagEnquiryFilterVO.getCompanyCode());
            carditfiltervo.setCarrierId(mailbagEnquiryFilterVO.getCarrierId());
            carditfiltervo.setConsignmentDocument(mailbagEnquiryFilterVO.getConsigmentNumber());
            carditfiltervo.setMailCategoryCode(mailbagEnquiryFilterVO.getMailCategoryCode());
            carditfiltervo.setMailbagId(mailbagEnquiryFilterVO.getMailbagId());
            carditfiltervo.setMailSubclass(mailbagEnquiryFilterVO.getMailSubclass());
            carditfiltervo.setDoe(mailbagEnquiryFilterVO.getDoe());
            carditfiltervo.setOoe(mailbagEnquiryFilterVO.getOoe());
            carditfiltervo.setYear(mailbagEnquiryFilterVO.getYear());
            carditfiltervo.setDespatchSerialNumber(mailbagEnquiryFilterVO.getDespatchSerialNumber());
            carditfiltervo.setReceptacleSerialNumber(mailbagEnquiryFilterVO.getReceptacleSerialNumber());
            carditfiltervo.setPaoCode(mailbagEnquiryFilterVO.getPacode());
            LocalDate fromDate = new LocalDate("***", Location.NONE, false);
            if(mailbagEnquiryFilterVO.getFromDate()!=null){
            fromDate.setDate(mailbagEnquiryFilterVO.getFromDate().toUpperCase());
            carditfiltervo.setFromDate(fromDate);
            }
            else{
            	carditfiltervo.setFromDate(new LocalDate(LocalDate.NO_STATION, Location.NONE, true));
            }
            LocalDate toDate = new LocalDate("***", Location.NONE, false);
            if(mailbagEnquiryFilterVO.getToDate()!=null){
            toDate.setDate(mailbagEnquiryFilterVO.getToDate().toUpperCase());
            carditfiltervo.setToDate(toDate);
            }
            else{
            	carditfiltervo.setToDate(new LocalDate(LocalDate.NO_STATION, Location.NONE, true));
            }
            carditfiltervo.setUldNumber(mailbagEnquiryFilterVO.getUldNumber());
            carditfiltervo.setFlightNumber(mailbagEnquiryFilterVO.getFlightNumber());
            carditfiltervo.setFlightDate(mailbagEnquiryFilterVO.getFlightDate());
            carditfiltervo.setMailOrigin(mailbagEnquiryFilterVO.getOriginAirportCode());
            carditfiltervo.setMaildestination(mailbagEnquiryFilterVO.getDestinationAirportCode());
            carditfiltervo.setMailStatus(mailbagEnquiryFilterVO.getCurrentStatus());
//            Page<MailbagVO> carditMails = Cardit.findMailbagsForTruckFlight(
//                    mailbagEnquiryFilterVO, pageNumber);
            Page<MailbagVO> carditMails = Cardit.findCarditMails(
            		carditfiltervo, pageNumber);
            HashMap<String, MailbagVO> mailBagMap = new HashMap<String, MailbagVO>();
            String key = null;


            if (carditMails != null && carditMails.size() > 0) {
               
                for (MailbagVO mailbagVO : carditMails) {

                    //Removing duplicates If a consignment has multiple routes.
                    //Need to display the routr info with early departure date & own flight info
                    key = mailbagVO.getMailbagId();
                    LocalDate existingDepartureDate = null;
                    LocalDate DepartureDate = null;
                    if (mailBagMap.containsKey(key)) {
                        MailbagVO existingMailbagVO = mailBagMap.get(key);
                        FlightFilterVO existingFlightFilterVO = new FlightFilterVO();
                        FlightFilterVO flightFilterVO = new FlightFilterVO();
                        Collection<FlightValidationVO> existingFlightVOs = null;
                        Collection<FlightValidationVO> flightVOs = null;
                        existingFlightFilterVO.setCompanyCode(existingMailbagVO.getCompanyCode());
                        existingFlightFilterVO.setFlightNumber(existingMailbagVO.getFlightNumber());
                        existingFlightFilterVO.setFlightDate(existingMailbagVO.getFlightDate());
                        existingFlightFilterVO.setFlightSequenceNumber(existingMailbagVO.getFlightSequenceNumber());
                        existingFlightVOs = validateFlight(existingFlightFilterVO);
                        if (existingFlightVOs != null) {
                            existingDepartureDate = existingFlightVOs.iterator().next().getStd();
                        }
                        flightFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
                        flightFilterVO.setFlightNumber(mailbagVO.getFlightNumber());
                        flightFilterVO.setFlightDate(mailbagVO.getFlightDate());
                        flightFilterVO.setFlightSequenceNumber(mailbagVO.getFlightSequenceNumber());
                        flightVOs = validateFlight(flightFilterVO);
                        if (flightVOs != null) {
                            DepartureDate = flightVOs.iterator().next().getStd();
                        }
                        if (existingMailbagVO.getCarrierCode() != null && existingMailbagVO.getCarrierCode().equals(mailbagVO.getCarrierCode())) {
                            if (existingMailbagVO.getFlightDate() != null) {
                                if (existingDepartureDate.isGreaterThan(DepartureDate)) {
                                    mailBagMap.put(key, mailbagVO);
                                }
                            }

                        } else if (mailbagVO.getCarrierCode() != null && mailbagVO.getCarrierCode().equals(logonAttributes.getOwnAirlineCode())) {
                            mailBagMap.put(key, mailbagVO);
                        } else if (mailbagVO.getCarrierCode() != null && mailbagVO.getCarrierCode().equals(logonAttributes.getOwnAirlineCode())) {


                            mailBagMap.put(key, mailbagVO);

                        } else {
                            if (existingMailbagVO.getFlightDate() != null) {
                                if (existingDepartureDate.isGreaterThan(DepartureDate)) {
                                    mailBagMap.put(key, mailbagVO);
                                }
                            }

                        }


                    } else {

                        mailBagMap.put(key, mailbagVO);
                    }
                }

                carditMails.removeAll(carditMails);
                carditMails.addAll(mailBagMap.values());
            }

            log.exiting(CLASS, "findMailbagsForTruckFlight");
            return carditMails;
        } else {

            log.entering(CLASS, "findAllMailbagsForTruckFlight");
            log.exiting(CLASS, "findAllMailbagsForTruckFlight");
//            return Mailbag.findAllMailbagsForTruckFlight(mailbagEnquiryFilterVO, pageNumber);

            return Mailbag.findMailbags(mailbagEnquiryFilterVO, pageNumber);
        }
    }


    /**
     * Method		:	MailController.saveRoutingIndexDetails
     * Added by 	:	A-7531 on 08-Oct-2018
     * Used for 	:
     * Parameters	:	@param routingIndexVOs
     * Return type	: 	void
     *
     * @throws FinderException
     */
    public void saveRoutingIndexDetails(Collection<RoutingIndexVO> routingIndexVOs) throws SystemException, MailTrackingBusinessException, FinderException {

        if (routingIndexVOs != null) {
            for (RoutingIndexVO routingIndexVO : routingIndexVOs) {
                new RoutingIndex(routingIndexVO);
            }

        }
    }

    /**
     * Method		:	MailController.findRoutingIndex
     * Added by 	:	A-7531 on 30-Oct-2018
     * Used for 	:
     * Parameters	:	@param routingIndexVO
     * Parameters	:	@return
     * Return type	: 	Collection<RoutingIndexVO>
     *
     * @throws SystemException
     */
    public Collection<RoutingIndexVO> findRoutingIndex(RoutingIndexVO routingIndexVO) throws SystemException {
        // TODO Auto-generated method stub
        return MailAcceptance.findRoutingIndex(routingIndexVO);
    }

    /**
     * Method		:	MailController.findDsnAndRsnForMailbag
     * Added by 	:	A-7531 on 31-Oct-2018
     * Used for 	:
     * Parameters	:	@param maibagVO
     * Parameters	:	@return
     * Return type	: 	MailbagVO
     *
     * @throws SystemException
     */
    public MailbagVO findDsnAndRsnForMailbag(MailbagVO mailbagVO) throws SystemException {
        // TODO Auto-generated method stub
        return MailAcceptance.findDsnAndRsnForMailbag(mailbagVO);
    }


    /**
     * @param filterVO
     * @param pageNumber
     * @return
     * @throws SystemException
     */
    public Page<ForceMajeureRequestVO> listForceMajeureApplicableMails(ForceMajeureRequestFilterVO filterVO, int pageNumber)
            throws SystemException {
        log.entering(CLASS, "listForceMajeureApplicableMails");
        String source = filterVO.getSource();
        Page<ForceMajeureRequestVO> forceMajeureMails = null;
        try {
            forceMajeureMails = ForceMajeureRequest.listForceMajeureApplicableMails(filterVO, pageNumber);
            if (forceMajeureMails == null || forceMajeureMails.isEmpty()) {
                filterVO.setSource(MailConstantsVO.FLIGHT_TYP_CARDIT);
                forceMajeureMails = ForceMajeureRequest.listForceMajeureApplicableMails(filterVO, pageNumber);
                filterVO.setSource(source);
            }
        } catch (SystemException exception) {
            log.log(Log.SEVERE, exception.getMessage());
        }
        log.exiting(CLASS, "listForceMajeureApplicableMails");
        return forceMajeureMails;
    }


    /**
     * @param filterVO
     * @return
     * @throws SystemException
     */
    public void saveForceMajeureRequest(ForceMajeureRequestFilterVO filterVO)
            throws SystemException {
        log.entering(CLASS, "saveForceMajeureRequest");
        String forceMajeureID = "";
        String txnRemarks = "";
        String txnStatus = "";
        try {
            forceMajeureID = ForceMajeureRequest.saveForceMajeureRequest(filterVO);
        } catch (SystemException exception) {
            log.log(Log.SEVERE, exception.getMessage());
        }
        InvoiceTransactionLogVO txnLogVO = new InvoiceTransactionLogVO();
        txnLogVO.setCompanyCode(filterVO.getCompanyCode());
        txnLogVO.setInvoiceType(MailConstantsVO.FORCE_MAJEURE_REQUEST);
        txnLogVO.setTransactionCode(filterVO.getTransactionCode());
        txnLogVO.setSerialNumber(filterVO.getTxnSerialNumber());
        if (forceMajeureID != null && forceMajeureID.startsWith(MailConstantsVO.FORCE_MAJEURE)) {
            txnStatus = MailConstantsVO.COMPLETED;
            txnRemarks = new StringBuilder(MailConstantsVO.FORCE_MAJEURE_ID).append(forceMajeureID).append(MailConstantsVO.FORCE_MAJEURE_CREATED).toString();
        } else {
            txnStatus = MailConstantsVO.FAILED;
            txnRemarks = new StringBuilder(MailConstantsVO.FORCE_MAJEURE_CANNOT_CREATE).toString();
        }
        txnLogVO.setInvoiceGenerationStatus(txnStatus);
        txnLogVO.setRemarks(txnRemarks);
        try {
            new CRADefaultsProxy().updateTransactionandRemarks(txnLogVO);
        } catch (ProxyException e) {
            throw new SystemException(e.getMessage());
        }
        log.exiting(CLASS, "saveForceMajeureRequest");
        //return forceMajeureID;
    }


    /**
     * @param invoiceTransactionLogVO
     * @return
     * @throws SystemException
     */
    public InvoiceTransactionLogVO initTxnForForceMajeure(
            InvoiceTransactionLogVO invoiceTransactionLogVO)
            throws SystemException {

        try {
            return new CRADefaultsProxy().initiateTransactionLogForInvoiceGeneration(invoiceTransactionLogVO);
        } catch (ProxyException e) {
            throw new SystemException(e.getMessage());
        }

    }

    /**
     * @param filterVO
     * @param pageNumber
     * @return
     * @throws SystemException
     */
    public Page<ForceMajeureRequestVO> listForceMajeureDetails(ForceMajeureRequestFilterVO filterVO, int pageNumber)
            throws SystemException {
        log.entering(CLASS, "listForceMajeureDetails");
        Page<ForceMajeureRequestVO> forceMajeureMails = null;
        if(pageNumber<=0){
            pageNumber=1;
        }
        try {
            forceMajeureMails = ForceMajeureRequest.listForceMajeureDetails(filterVO, pageNumber);
        } catch (SystemException exception) {
            log.log(Log.SEVERE, exception.getMessage());
        }
        log.exiting(CLASS, "listForceMajeureDetails");
        return forceMajeureMails;
    }

    /**
     * @param filterVO
     * @param pageNumber
     * @return
     * @throws SystemException
     */
    public Page<ForceMajeureRequestVO> listForceMajeureRequestIds(ForceMajeureRequestFilterVO filterVO, int pageNumber)
            throws SystemException {
        log.entering(CLASS, "listForceMajeureRequestIds");
        Page<ForceMajeureRequestVO> forceMajeureMails = null;
        try {
            forceMajeureMails = new ForceMajeureRequest().listForceMajeureRequestIds(filterVO, pageNumber);
        } catch (SystemException exception) {
            log.log(Log.SEVERE, exception.getMessage());
        }
        log.exiting(CLASS, "listForceMajeureRequestIds");
        return forceMajeureMails;
    }


    /**
     * @param requestVOs
     * @throws SystemException
     */
    public void deleteForceMajeureRequest(Collection<ForceMajeureRequestVO> requestVOs)
            throws SystemException {
        log.entering(CLASS, "deleteForceMajeureRequest");
        for (ForceMajeureRequestVO requestVO : requestVOs) {
            try {
                ForceMajeureRequest request = ForceMajeureRequest.find(requestVO.getCompanyCode(),
                        requestVO.getForceMajuereID(), requestVO.getSequenceNumber());
                if (request != null) {
                    request.remove();
                }
            } catch (RemoveException exception) {
                log.log(Log.SEVERE, exception.getMessage());
            } catch (FinderException exception) {
                log.log(Log.SEVERE, exception.getMessage());
            }
        }
        log.exiting(CLASS, "deleteForceMajeureRequest");
    }


    /**
     * @param requestVO
     * @throws SystemException
     */
    public void updateForceMajeureRequest(ForceMajeureRequestFilterVO filterVO)
            throws SystemException {
        log.entering(CLASS, "updateForceMajeureRequest");
        String txnRemarks = "";
        String txnStatus = "";
        String outPar = "";
        try {
            outPar = ForceMajeureRequest.updateForceMajeureRequest(filterVO);
        } catch (SystemException exception) {
            log.log(Log.SEVERE, exception.getMessage());
        }
        InvoiceTransactionLogVO txnLogVO = new InvoiceTransactionLogVO();
        txnLogVO.setCompanyCode(filterVO.getCompanyCode());
        txnLogVO.setInvoiceType(MailConstantsVO.FORCE_MAJEURE_REQUEST);
        txnLogVO.setTransactionCode(filterVO.getTransactionCode());
        txnLogVO.setSerialNumber(filterVO.getTxnSerialNumber());
        if (outPar != null && outPar.startsWith(MailConstantsVO.OK_STATUS)) {
            txnStatus = MailConstantsVO.COMPLETED;
            txnRemarks = new StringBuilder(MailConstantsVO.FORCE_MAJEURE_ID).append(filterVO.getForceMajeureID())
                    .append(MailConstantsVO.FORCE_MAJEURE_UPDATED).toString();
        } else {
            txnStatus = MailConstantsVO.FAILED;
            txnRemarks = new StringBuilder(MailConstantsVO.FORCE_MAJEURE_CANNOT_UPDATE).toString();
        }
        txnLogVO.setInvoiceGenerationStatus(txnStatus);
        txnLogVO.setRemarks(txnRemarks);
        try {
            new CRADefaultsProxy().updateTransactionandRemarks(txnLogVO);
        } catch (ProxyException e) {
            log.log(Log.SEVERE, e.getMessage());
        }
        log.exiting(CLASS, "updateForceMajeureRequest");
    }

    /**
     * Method to find all containers in flight
     *
     * @param reassignedFlightValidationVO
     * @return
     * @throws SystemException
     */
    public Collection<ContainerVO> findAllContainersInAssignedFlight(
            FlightValidationVO reassignedFlightValidationVO) throws SystemException {
        log.entering("MailTrackingDefaultsServicesEJB", "findAllContainersInAssignedFlight");
        OperationalFlightVO operationalFlightVO = new OperationalFlightVO();
        operationalFlightVO.setCompanyCode(reassignedFlightValidationVO.getCompanyCode());
        operationalFlightVO.setFlightNumber(reassignedFlightValidationVO.getFlightNumber());
        operationalFlightVO.setFlightSequenceNumber(reassignedFlightValidationVO.getFlightSequenceNumber());
        operationalFlightVO.setCarrierId(reassignedFlightValidationVO.getFlightCarrierId());
        operationalFlightVO.setPol(reassignedFlightValidationVO.getAirportCode());
        return AssignedFlight.findAllContainersInAssignedFlight(operationalFlightVO);
    }

    /**
     * @param mailInConsignmentVO
     * @param mailbag
     * @return
     * @throws SystemException
     * @throws DuplicateMailBagsException
     * @author A-8353
     */
    public boolean checkForDuplicateMailbag(String companyCode,String paCode, Mailbag mailbag) throws SystemException, DuplicateMailBagsException {
        PostalAdministrationVO postalAdministrationVO = findPACode(companyCode, paCode);
        LocalDate currentDate = new LocalDate(LocalDate.NO_STATION, Location.NONE, true);
        LocalDate dspDate = new LocalDate(
                LocalDate.NO_STATION, Location.NONE, mailbag.getDespatchDate(), true);
        if(postalAdministrationVO.getDupMailbagPeriod()==0){
         return false;
        }
        long seconds = currentDate.findDifference(dspDate);
        long days = seconds / 86400000;
        if ((days) <= postalAdministrationVO.getDupMailbagPeriod()) {
            return false;
        }
        return true;
    }

    /***
     * @author A-7794
     * @param fileUploadFilterVO
     * @return
     * @throws PersistenceException
     * @throws SystemException
     */
    public String processMailDataFromExcel(FileUploadFilterVO fileUploadFilterVO) throws SystemException, PersistenceException {
        return constructDAO().processMailDataFromExcel(fileUploadFilterVO);

    }

    /***
     * @author A-7794
     * @param companyCode
     * @param fileType
     * @return
     * @throws SystemException
     */
    public Collection<ConsignmentDocumentVO> fetchMailDataForOfflineUpload(String companyCode, String fileType) throws SystemException {
        return constructDAO().fetchMailDataForOfflineUpload(companyCode, fileType);
    }

    /***
     * @author A-7794
     * @param fileUploadFilterVO
     * @throws SystemException
     * @throws PersistenceException
     */
    public void removeDataFromTempTable(FileUploadFilterVO fileUploadFilterVO) throws SystemException, PersistenceException {
        constructDAO().removeDataFromTempTable(fileUploadFilterVO);
    }

    /***
     * @author A-7794
     * @param containerDetailsVOs
     * @param mailbagVOs
     * @param triggerPoint
     * @return
     * @throws SystemException
     */
    public Collection<RateAuditVO> createRateAuditVOsForReturn(
            Collection<ContainerDetailsVO> containerDetailsVOs,
            Collection<MailbagVO> mailbagVOs, String triggerPoint) throws SystemException {
        Collection<RateAuditVO> rateAuditVOs = new ArrayList<RateAuditVO>();
        if (containerDetailsVOs != null && containerDetailsVOs.size() > 0) {
            for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
                Collection<MailbagVO> mailbags = containerDetailsVO.getMailDetails();
                if (mailbags != null && mailbags.size() > 0) {
                    for (MailbagVO mailbag : mailbags) {
                        if (mailbag.getOperationalFlag() != null && !mailbag.getOperationalFlag().isEmpty()) {
                            RateAuditVO rateAuditVO = new RateAuditVO();
                            rateAuditVO.setMailSequenceNumber(mailbag.getMailSequenceNumber()> 0 ?
                           		 mailbag.getMailSequenceNumber(): findMailSequenceNumber(mailbag.getMailbagId(), mailbag.getCompanyCode()));
                            rateAuditVO.setCompanyCode(mailbag.getCompanyCode());
                            rateAuditVO.setTriggerPoint(triggerPoint);
                            rateAuditVO.setBillingBasis(mailbag.getMailbagId());
                            rateAuditVO.setMailbagId(mailbag.getMailbagId());
                            rateAuditVO.setOperationFlag(mailbag.getOperationalFlag());
                            rateAuditVO.setPcs("1");
                            OfficeOfExchangeVO officeOfExchangeVOForOOE = validateOfficeOfExchange(mailbag.getCompanyCode(), mailbag.getOoe());
                            if (mailbag.getPaCode() != null) {
                                rateAuditVO.setGpaCode(mailbag.getPaCode());
                            } else {
                                rateAuditVO.setGpaCode(officeOfExchangeVOForOOE.getPoaCode());
                            }
                            rateAuditVO.setOriginCityCode(officeOfExchangeVOForOOE.getCityCode());
                            OfficeOfExchangeVO officeOfExchangeVOForDOE = validateOfficeOfExchange(mailbag.getCompanyCode(), mailbag.getDoe());
                            rateAuditVO.setDestinationCityCode(officeOfExchangeVOForDOE.getCityCode());

                            rateAuditVO.setOrigin(findNearestAirportOfCity(mailbag.getCompanyCode(), mailbag.getOoe()));
                            rateAuditVO.setDestination(findNearestAirportOfCity(mailbag.getCompanyCode(), mailbag.getDoe()));
                            rateAuditVO.setConDocNum(mailbag.getConsignmentNumber());
                            rateAuditVO.setConSerNum(mailbag.getConsignmentSequenceNumber());
                            rateAuditVO.setOriginOE(mailbag.getOoe());
                            rateAuditVO.setDestinationOE(mailbag.getDoe());
                            rateAuditVO.setCategory(mailbag.getMailCategoryCode());
                            rateAuditVO.setSubClass(mailbag.getMailSubclass());
                            rateAuditVO.setYear(mailbag.getYear());
                            rateAuditVO.setDsn(mailbag.getDespatchSerialNumber());
                            rateAuditVO.setRsn(mailbag.getReceptacleSerialNumber());
                            rateAuditVO.setHsn(mailbag.getHighestNumberedReceptacle());
                            rateAuditVO.setRegInd(mailbag.getRegisteredOrInsuredIndicator());
                            if (mailbag.getWeight() != null)
                                rateAuditVO.setGrossWt(mailbag.getWeight().getSystemValue());
                            if (mailbag.getScannedDate() != null) {
                                rateAuditVO.setReceivedDate(mailbag.getScannedDate());
                            } else {
                                rateAuditVO.setReceivedDate(new LocalDate(mailbag.getScannedPort(), Location.ARP, true));
                            }
                            rateAuditVO.setTransfercarcode(mailbag.getTransferFromCarrier());
                            rateAuditVO.setMailCompanyCode(mailbag.getMailCompanyCode());
                            Collection<RateAuditDetailsVO> rateAuditDetails = new ArrayList<RateAuditDetailsVO>();
                            RateAuditDetailsVO rateAuditDetailsVO = new RateAuditDetailsVO();
                            rateAuditDetailsVO.setBillingBasis(rateAuditVO.getMailbagId());
                            rateAuditDetailsVO.setMailbagId(rateAuditVO.getMailbagId());
                            rateAuditDetailsVO.setMailSequenceNumber(rateAuditVO.getMailSequenceNumber());
                            rateAuditDetailsVO.setCarrierid(mailbag.getCarrierId());
                            rateAuditDetailsVO.setCarrierCode(mailbag.getCarrierCode());
                            rateAuditDetailsVO.setFlightno(mailbag.getFlightNumber());
                            rateAuditDetailsVO.setFlightseqno((int) mailbag.getFlightSequenceNumber());
                            rateAuditDetailsVO.setFlightDate(mailbag.getFlightDate());
                            rateAuditDetailsVO.setSegSerNo(mailbag.getSegmentSerialNumber());
                            if (mailbag.getFlightDate() != null && mailbag.getFlightSequenceNumber() <= 0) {
                                rateAuditDetailsVO.setFlightno(containerDetailsVO.getFlightNumber());
                                rateAuditDetailsVO.setFlightseqno((int) containerDetailsVO.getFlightSequenceNumber());
                                rateAuditDetailsVO.setFlightDate(containerDetailsVO.getFlightDate());
                                rateAuditDetailsVO.setSegSerNo(containerDetailsVO.getSegmentSerialNumber());
                            }
                            rateAuditDetailsVO.setContainerNumber(containerDetailsVO.getContainerNumber());
                            rateAuditDetailsVO.setContainerType(containerDetailsVO.getContainerType());
                            rateAuditDetailsVO.setPaBuiltFlag(containerDetailsVO.getPaBuiltFlag());
                            rateAuditDetailsVO.setUldno(containerDetailsVO.getContainerNumber());
                            rateAuditDetailsVO.setSecFrom(containerDetailsVO.getPol());
                            rateAuditDetailsVO.setSecTo(containerDetailsVO.getPou());
                            rateAuditDetailsVO.setSource(triggerPoint);
                    		rateAuditVO.setScannedDate(mailbag.getScannedDate());
                            rateAuditDetails.add(rateAuditDetailsVO);
                            rateAuditVO.setRateAuditDetails(rateAuditDetails);
                            if(rateAuditVO.getMailSequenceNumber()!=0){
                            rateAuditVOs.add(rateAuditVO);
                            }
                        }
                    }
                }
            }
        }else{


        	 if (mailbagVOs != null && mailbagVOs.size() > 0) {
                 for (MailbagVO mailbag : mailbagVOs) {
                         RateAuditVO rateAuditVO = new RateAuditVO();
                         rateAuditVO.setMailSequenceNumber(mailbag.getMailSequenceNumber()> 0 ?
                        		 mailbag.getMailSequenceNumber(): findMailSequenceNumber(mailbag.getMailbagId(), mailbag.getCompanyCode()));
                         rateAuditVO.setCompanyCode(mailbag.getCompanyCode());
                         rateAuditVO.setTriggerPoint(triggerPoint);
                         rateAuditVO.setBillingBasis(mailbag.getMailbagId());
                         rateAuditVO.setMailbagId(mailbag.getMailbagId());
                         rateAuditVO.setOperationFlag(mailbag.getOperationalFlag());
                         rateAuditVO.setPcs("1");
                         OfficeOfExchangeVO officeOfExchangeVOForOOE = validateOfficeOfExchange(mailbag.getCompanyCode(), mailbag.getOoe());
                         if (mailbag.getPaCode() != null) {
                             rateAuditVO.setGpaCode(mailbag.getPaCode());
                         } else {
                             rateAuditVO.setGpaCode(officeOfExchangeVOForOOE.getPoaCode());
                         }
                         rateAuditVO.setOriginCityCode(officeOfExchangeVOForOOE.getCityCode());
                         OfficeOfExchangeVO officeOfExchangeVOForDOE = validateOfficeOfExchange(mailbag.getCompanyCode(), mailbag.getDoe());
                         rateAuditVO.setDestinationCityCode(officeOfExchangeVOForDOE.getCityCode());

                         rateAuditVO.setOrigin(findNearestAirportOfCity(mailbag.getCompanyCode(), mailbag.getOoe()));
                         rateAuditVO.setDestination(findNearestAirportOfCity(mailbag.getCompanyCode(), mailbag.getDoe()));
                         rateAuditVO.setConDocNum(mailbag.getConsignmentNumber());
                         rateAuditVO.setConSerNum(mailbag.getConsignmentSequenceNumber());
                         rateAuditVO.setOriginOE(mailbag.getOoe());
                         rateAuditVO.setDestinationOE(mailbag.getDoe());
                         rateAuditVO.setCategory(mailbag.getMailCategoryCode());
                         rateAuditVO.setSubClass(mailbag.getMailSubclass());
                         rateAuditVO.setYear(mailbag.getYear());
                         rateAuditVO.setDsn(mailbag.getDespatchSerialNumber());
                         rateAuditVO.setRsn(mailbag.getReceptacleSerialNumber());
                         rateAuditVO.setHsn(mailbag.getHighestNumberedReceptacle());
                         rateAuditVO.setRegInd(mailbag.getRegisteredOrInsuredIndicator());
                         if (mailbag.getWeight() != null)
                             rateAuditVO.setGrossWt(mailbag.getWeight().getSystemValue());
                         if (mailbag.getScannedDate() != null) {
                             rateAuditVO.setReceivedDate(mailbag.getScannedDate());
                         } else {
                             rateAuditVO.setReceivedDate(new LocalDate(mailbag.getScannedPort(), Location.ARP, true));
                         }
                         rateAuditVO.setTransfercarcode(mailbag.getTransferFromCarrier());
                         rateAuditVO.setMailCompanyCode(mailbag.getMailCompanyCode());
                         Collection<RateAuditDetailsVO> rateAuditDetails = new ArrayList<RateAuditDetailsVO>();
                         RateAuditDetailsVO rateAuditDetailsVO = new RateAuditDetailsVO();
                         rateAuditDetailsVO.setBillingBasis(rateAuditVO.getMailbagId());
                         rateAuditDetailsVO.setMailbagId(rateAuditVO.getMailbagId());
                         rateAuditDetailsVO.setMailSequenceNumber(rateAuditVO.getMailSequenceNumber());
                         rateAuditDetailsVO.setCarrierid(mailbag.getCarrierId());
                         rateAuditDetailsVO.setCarrierCode(mailbag.getCarrierCode());
                         rateAuditDetailsVO.setFlightno(mailbag.getFlightNumber());
                         rateAuditDetailsVO.setFlightseqno((int) mailbag.getFlightSequenceNumber());
                         rateAuditDetailsVO.setFlightDate(mailbag.getFlightDate());
                         rateAuditDetailsVO.setSegSerNo(mailbag.getSegmentSerialNumber());
                         rateAuditDetailsVO.setSource(triggerPoint);
                         rateAuditDetails.add(rateAuditDetailsVO);
                 		rateAuditVO.setScannedDate(mailbag.getScannedDate());
                         rateAuditVO.setRateAuditDetails(rateAuditDetails);
                         if(rateAuditVO.getMailSequenceNumber()!=0){
                         rateAuditVOs.add(rateAuditVO);
                         }
                 }
             }


        }

        return rateAuditVOs;
    }

    /**
		mailController.flagAuditforReadyForDelivery(mailbagVOs,operationalFlightVO);
				originOfficeOfExchangeVO=validateOfficeOfExchange(mailbagVO.getCompanyCode(), mailbagVO.getOoe());
	 *
	 * 	Method		:	MailController.findMailbagResditEvents
	 *	Added by 	:	A-5526 on 28-Jan-2020
	 * 	Used for 	:	find Mailbag Resdit Events
	 *	Parameters	:	@param companyCode
	 *	Parameters	:	@param mailbagId
	 *	Parameters	:	@return Collection<MailbagHistoryVO>
	 *	Parameters	:	@throws SystemException
	 *	Return type	: 	Map<String,String>
	 * @throws SystemException
	 * @throws PersistenceException
	 */

	public Collection<MailbagHistoryVO> findMailbagResditEvents(String companyCode, String mailbagId) throws PersistenceException, SystemException {
		return constructDAO().findMailbagResditEvents(companyCode,mailbagId);
	}
	/**
	 * 	Method		:	MailController.findProductsByName
	 *	Added by 	:	A-8527 on 29-Jan-2020
	 * 	Used for 	:
	 *	Parameters	:	@param companyCode
	 *	Parameters	:	@param product
	 *	Parameters	:	@return
	 *	Return type	: 	String
	 * @throws SystemException
	 */
	public String findProductsByName(String companyCode,String product)throws SystemException {
		String documentSybtype=null;
		Collection<ProductValidationVO> productVOs= new ArrayList<ProductValidationVO>();
        ProductVO productVO=new ProductVO();
        ProductValidationVO productValidationVO=new ProductValidationVO();

        productVOs=new ProductDefaultsProxy().findProductsByName(companyCode,product);

        if(productVOs!=null){

     	   productValidationVO=productVOs.iterator().next();

     	   productVO= new ProductDefaultsProxy().findProductDetails(companyCode,productValidationVO.getProductCode());
     	  documentSybtype=productVO.getDocumentSubType();
        }
       return documentSybtype;
	}
	/**
	 *
	 * @param mailbagEnquiryFilterVO
	 * @param pageNumber
	 * @return
	 * @throws SystemException
	 */
	public Page<MailbagVO> findDeviationMailbags(MailbagEnquiryFilterVO mailbagEnquiryFilterVO, int pageNumber) throws SystemException {
		return Mailbag.findDeviationMailbags(mailbagEnquiryFilterVO, pageNumber);
	}

	/**
	 *
	 * 	Method		:	MailController.insertOrUpdateHistoryDetailsForCardit
	 *	Added by 	:	U-1467 on 18-Feb-2020
	 * 	Used for 	:	IASCB-36803
	 *	Parameters	:	@param carditVO
	 *	Return type	: 	void
	 */
	@Advice(name = "mail.operations.insertOrUpdateHistoryDetailsForCardit", phase = Phase.POST_INVOKE)
	public void insertOrUpdateHistoryDetailsForCardit(CarditVO carditVO) {
		log.entering(CLASS, "insertOrUpdateHistoryDetailsForCardit");
		log.exiting(CLASS, "insertOrUpdateHistoryDetailsForCardit");
	}
	/**
	 *
	 * 	Method		:	MailController.auditCarditCancellation
	 *	Added by 	:	U-1467 on 18-Feb-2020
	 * 	Used for 	:	IASCB-36803
	 *	Parameters	:	@param carditVO
	 *	Parameters	:	@param actionCode
	 *	Parameters	:	@throws SystemException
	 *	Return type	: 	void
	 */
	@Advice(name = "mail.operations.auditCarditCancellation", phase = Phase.POST_INVOKE)
	public void auditCarditCancellation(CarditVO carditVO, String actionCode) throws SystemException {
		log.entering(CLASS, "auditCarditCancellation");
		log.exiting(CLASS, "auditCarditCancellation");
	}

	/**
	 * 	Method		:	MailController.saveCarditMessages
	 *	Added by 	:	A-6287 on 26-Feb-2020
	 * 	Used for 	:
	 *	Parameters	:	@param carditTempMsgVOs
	 *	Return type	: 	void
	 * @throws SystemException
	 */
	public void saveCarditTempMessages(Collection<CarditTempMsgVO> carditTempMsgVOs) throws SystemException{
		log.entering(CLASS, "saveCarditTempMessages");

		if(carditTempMsgVOs !=null && carditTempMsgVOs.size()>0){
			try {
				new CarditTempDetails(carditTempMsgVOs);
			} catch (SystemException e) {
				throw new SystemException(e.getMessage());
			}
		}
		log.exiting(CLASS, "saveCarditTempMessages");

	}

	/**
	 * 	Method		:	MailController.getTempCarditMessages
	 *	Added by 	:	A-6287 on 01-Mar-2020
	 * 	Used for 	:savec
	 *	Parameters	:	@param companyCode
	 *	Parameters	:	@return
	 *	Return type	: 	Collection<CarditTempMsgVO>
	 * @throws SystemException
	 */
	public Collection<CarditTempMsgVO> getTempCarditMessages(String companyCode,
                                                             String includeMailBoxIdr,String excludeMailBoxIdr,
                                                             String includedOrigins,String excludedOrigins,
                                                             int pageSize,int noOfDays)
            throws SystemException {
		log.entering(CLASS, "getTempCarditMessages");


		return constructDAO().getTempCarditMessages(companyCode,includeMailBoxIdr,excludeMailBoxIdr,
                includedOrigins,excludedOrigins,pageSize,noOfDays);
	}

//Added by A-8893 for IASCB-34152 starts

	/**
	 *  Method: MailController.deleteEmptyContainer
	 *  Added by 	:	A-8893 on 04-Mar-2020
	 *  Used for 	:	IASCB-34152
	 *  Parameters	:   @param containerDetailsVO
	 *  Parameters	:	@throws SystemException
	 *  Return type	: 	void
	 */

	@Raise(module = "mail", submodule = "operations", event = "SAVE_DWS_EVENT", methodId = "mail.operations.deleteEmptyContainer")
	public void deleteEmptyContainer(ContainerDetailsVO containerDetailsVO) throws SystemException {
		Container container=null;
		ULDForSegment uldForSegment = null;
		ContainerPK containerPK=constructContainerPK(containerDetailsVO);

		try {
				container=Container.find(containerPK);
				// findbulkcountInFlight is used for getting bulk count .
				// if the count>1 ,means no need to delete it from  ULDForSegment/ULDAtAirport.
				// if count=1, we need to remove the bulk entry from  ULDForSegment/ULDAtAirport.
				// in both case the bulk and uld  must be deleted from MALFLTCON
				int bulkCount=constructDAO().findbulkcountInFlight(containerDetailsVO);

				if(!(("B").equals( containerDetailsVO.getContainerType()))||bulkCount==1){
				if(!containerDetailsVO.getFlightNumber().equals("-1") && containerDetailsVO.getFlightSequenceNumber()>0){      

					ULDForSegmentPK uldForSegmentPK=constructULDForSegmentPK(containerDetailsVO);
					uldForSegment=ULDForSegment.find(uldForSegmentPK);
					uldForSegment.remove();
				}else{
					removeUldAtAirport(containerDetailsVO);
					}
				}



				container.remove();
				LocalDate date =new LocalDate(containerDetailsVO.getAssignedPort(), Location.ARP, true);
				containerDetailsVO.setAssignedDate(date);
				containerDetailsVO.setPou(container.getPou());
				MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
				mailController.flagContainerAuditForDeletion(containerDetailsVO);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				log.log(Log.FINE, "Exception while deleting empty containers ", e.getMessage());
			}
		 log.exiting(CLASS, "deleteEmptyContainer");
	}

	private ULDForSegmentPK constructULDForSegmentPK(ContainerDetailsVO containerDetailsVO) {
		ULDForSegmentPK uldForSegmentPK = new ULDForSegmentPK();
		uldForSegmentPK.setCompanyCode(containerDetailsVO.getCompanyCode());
		if("B".equals(containerDetailsVO.getContainerType())){
			uldForSegmentPK.setUldNumber("BULK-"+containerDetailsVO.getPou());
		}
		else{
		uldForSegmentPK.setUldNumber(containerDetailsVO.getContainerNumber());
		}
		uldForSegmentPK.setCarrierId(containerDetailsVO.getCarrierId());
		uldForSegmentPK.setFlightNumber(containerDetailsVO.getFlightNumber());
		uldForSegmentPK.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
		uldForSegmentPK.setSegmentSerialNumber(containerDetailsVO.getSegmentSerialNumber());
		return uldForSegmentPK;
	}

	private ContainerPK constructContainerPK(ContainerDetailsVO containerDetailsVO){
		ContainerPK containerPK=new ContainerPK();
		containerPK.setContainerNumber(containerDetailsVO.getContainerNumber());
		containerPK.setCompanyCode(containerDetailsVO.getCompanyCode());
		containerPK.setAssignmentPort(containerDetailsVO.getAssignedPort());
		containerPK.setCarrierId(containerDetailsVO.getCarrierId());
		containerPK.setFlightNumber(containerDetailsVO.getFlightNumber());
		containerPK.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
		containerPK.setLegSerialNumber(containerDetailsVO.getLegSerialNumber());
		return containerPK;
	}

	private ULDAtAirportPK constructULDAtAirportPK(ContainerDetailsVO containerDetailsVO){
		ULDAtAirportPK uldAtAirportPK=new ULDAtAirportPK();
		uldAtAirportPK.setAirportCode(containerDetailsVO.getAssignedPort());
		uldAtAirportPK.setCarrierId(containerDetailsVO.getCarrierId());
		uldAtAirportPK.setCompanyCode(containerDetailsVO.getCompanyCode());
		if("B".equals(containerDetailsVO.getContainerType())){
		uldAtAirportPK.setUldNumber("BULK-"+(containerDetailsVO.getPou()!=null ?containerDetailsVO.getPou() :containerDetailsVO.getDestination()));//IASCB-47209
		}
		else{
		uldAtAirportPK.setUldNumber(containerDetailsVO.getContainerNumber());
		}
		return uldAtAirportPK;
	}
	//Added by A-8893 for IASCB-34152 ends

/**
	 * validateULDIncomatibility
	  *@author A-5526 for IASCB-34124
	 * @param addContainer
	 * @param flightValidationVO
	 * @param actionContext
	 * @throws SystemException
	 */
	private void validateULDIncomatibility(CarditContainerVO carditContainerVO, FlightValidationVO flightValidationVO) throws SystemException  {

		Collection<String> parameterCodes = new ArrayList<String>();
		// ICRD-56719

		parameterCodes.add(AIRCRAFT_COMBATIBILITY_CHECK_REQUIRED);

		Map<String, String> systemParameters = null;


			systemParameters = new SharedDefaultsProxy().findSystemParameterByCodes(parameterCodes);


		ArrayList<String> uldTypeCodes = new ArrayList<String>();
		ArrayList<String> uldNumberCodes = new ArrayList<String>();

		 if(carditContainerVO.getContainerNumber() != null &&
         		carditContainerVO.getContainerNumber().trim().length() > 0 && CarditMessageVO.UNIT_LOAD_DEVICE.equals(carditContainerVO.getEquipmentQualifier())){
				String uldType=carditContainerVO.getContainerNumber().substring(0, 3);
				if(!uldTypeCodes.contains(uldType.toUpperCase())){
					uldTypeCodes.add(uldType.toUpperCase());
				}
				uldNumberCodes.add(carditContainerVO.getContainerNumber());
         }


			Collection<ULDPositionFilterVO> filterVOs = new ArrayList<ULDPositionFilterVO>();
			if (flightValidationVO != null) {
				Collection<String> aircraftTypes = new ArrayList<String>();
				aircraftTypes.add(flightValidationVO.getAircraftType());
				ULDPositionFilterVO filterVO = null;
				Collection<String> validatedUldTypeCodes = validateAirCraftCompatibilityforUldTypes(uldTypeCodes,
						systemParameters);
				if (validatedUldTypeCodes != null && validatedUldTypeCodes.size() > 0) {
					for (String uldType : validatedUldTypeCodes) {
						filterVO = new ULDPositionFilterVO();
						filterVO.setAircraftTypes(aircraftTypes);
						filterVO.setCompanyCode(flightValidationVO.getCompanyCode());
						filterVO.setUldCode(uldType);
						filterVOs.add(filterVO);
					}
				}
			}
			if (filterVOs != null && filterVOs.size() > 0) {
				try {
					new SharedULDProxy().findULDPosition(filterVOs);
				} catch (Exception uldDefaultsException) {
					if (MailConstantsVO.ULD_INCOMPATIBLEAIRCRAFT.equals(uldDefaultsException.getMessage())) {
					/*Object[] errorData =uldDefaultsException.getMessage();
						if (errorData != null && errorData.length > 0) {
							errorDatum = (String) errorData[0];
						}
*/
						throw new SystemException("mailtracking.defaults.mailinbound.msg.err.uldincompatileforaircrafttype");



					}
				}


			}

	}

	 /**
	  * @author A-5526 for IASCB-34124
	  * validateAirCraftCompatibilityforUldTypes
	  * @param uldTypeCodes
	  * @param systemParameterMap
	  * @return
	  */
	public Collection<String> validateAirCraftCompatibilityforUldTypes(Collection<String> uldTypeCodes,
			Map<String, String> systemParameterMap) {
		log.entering("SaveAcceptanceCommand", "validateAirCraftCompatibilityforUldTypes");
		ArrayList<String> uldTypeCodesForValidation = null;
		if (systemParameterMap != null && systemParameterMap.size() > 0) {
			String configuredTypes = systemParameterMap.get(AIRCRAFT_COMBATIBILITY_CHECK_REQUIRED);
			if (configuredTypes != null && configuredTypes.length() > 0 && !"N".equals(configuredTypes)) {
				if ("*".equals(configuredTypes)) {
					for (String uldType : uldTypeCodes) {
						if (uldTypeCodesForValidation == null) {
							uldTypeCodesForValidation = new ArrayList<String>();
						}
						uldTypeCodesForValidation.add(uldType);
					}
				} else {
					List<String> configuredTypesList = Arrays.asList(configuredTypes.split(","));
					if (uldTypeCodes != null && uldTypeCodes.size() > 0) {
						for (String uldType : uldTypeCodes) {
							if (configuredTypesList.contains(uldType)) {
								if (uldTypeCodesForValidation == null) {
									uldTypeCodesForValidation = new ArrayList<String>();
								}
								uldTypeCodesForValidation.add(uldType);
							}
						}
					}
				}
			}
		}
		log.exiting("SaveAcceptanceCommand", "validateAirCraftCompatibilityforUldTypes");
		return uldTypeCodesForValidation;
	}
	/**
	 *
	 * 	Method		:	MailController.updateGateClearStatus
	 *	Added by 	:	U-1467 on 09-Mar-2020
	 *	Parameters	:	@param operationalFlightVO
	 *	Parameters	:	@param gateClearanceStatus
	 *	Parameters	:	@throws SystemException
	 *	Return type	: 	void
	 */
    public void updateGateClearStatus(com.ibsplc.icargo.business.operations.flthandling.vo.OperationalFlightVO operationalFlightVO,
                                      String gateClearanceStatus) throws SystemException {
    	/*	Gate Clear Status for Export Flight : Outbound(O), Refusal (R)
		Gate Clear Status for Import Flight : Inbound(Y) */
        AssignedFlight flight = null;
        AssignedFlightPK flightPK = new AssignedFlightPK();
        flightPK.setAirportCode(operationalFlightVO.getAirportCode());
        flightPK.setCompanyCode(operationalFlightVO.getCompanyCode());
        flightPK.setFlightNumber(operationalFlightVO.getFlightNumber());
        flightPK.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
        flightPK.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
        flightPK.setCarrierId(operationalFlightVO.getCarrierId());
        try {
        	flight = AssignedFlight.find(flightPK);
        } catch (FinderException ex) {
            log.log(Log.INFO, FINDEREXCEPTIO_STRING);
        }
        if(flight!=null){
        	if(RunnerFlightVO.RUN_DIRECTION_OUTBOUND.equals(operationalFlightVO.getRunnerFlightType()) ||
    				RunnerFlightVO.LISTTYPE_REFUSAL.equals(operationalFlightVO.getRunnerFlightType())) {
        		String runnerCompletionStatus = flight.getGateClearanceStatus();
				if(runnerCompletionStatus != null && runnerCompletionStatus.trim().length() > 0 &&  !RunnerFlightVO.FLAG_NO.equals(runnerCompletionStatus)) {
					runnerCompletionStatus = runnerCompletionStatus + "," + gateClearanceStatus;
				}
				else {
					runnerCompletionStatus = gateClearanceStatus;
				}
				flight.setGateClearanceStatus(gateClearanceStatus);
        	} else {
        		// gateClearanceStatus will be Y , ie inbound flight
        		flight.setGateClearanceStatus(gateClearanceStatus);
        			}

        } else {
        	if(RunnerFlightVO.RUN_DIRECTION_INBOUND.equals(operationalFlightVO.getRunnerFlightType())){
	        	AssignedFlightVO flightVO = new AssignedFlightVO();
	        	flightVO.setAirportCode(operationalFlightVO.getAirportCode());
	        	flightVO.setCompanyCode(operationalFlightVO.getCompanyCode());
	        	flightVO.setFlightNumber(operationalFlightVO.getFlightNumber());
	        	flightVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
	        	flightVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
	        	flightVO.setCarrierId(operationalFlightVO.getCarrierId());
	        	flightVO.setCarrierCode(operationalFlightVO.getCarrierCode());
	        	flightVO.setImportFlightStatus("O");
	        	flightVO.setFlightDate(operationalFlightVO.getFlightDate());
	        	flightVO.setLastUpdateUser(operationalFlightVO.getLastUpdateUser());
	        	flight = new AssignedFlight(flightVO);
	        	if(flight!=null) {
	        		flight.setGateClearanceStatus(gateClearanceStatus);
	        	}
        	}
        }
    }

    /**
     *
     * @param carditVO
     * @throws SystemException
     */
    private  void setTransportInformation(CarditVO carditVO) throws SystemException{
         LocalDate sta=null;
         LocalDate std=null;
         Collection<FlightValidationVO> flightVOs1 = null;
         Collection<FlightValidationVO> flightVOs2 = null;
            FlightFilterVO flightFilterVO = new FlightFilterVO();
            LocalDate firstLegStd=null;
            String paCode_dom = findSystemParameterValue(USPS_DOMESTIC_PA);
            if(carditVO.getTransportInformation()!=null && !carditVO.getTransportInformation().isEmpty()){
            	for(CarditTransportationVO carditTransportation : carditVO.getTransportInformation()){
        	           String transportDate =
					        new LocalDate(carditTransportation.getDeparturePort(), Location.ARP, true).toDisplayDateOnlyFormat();
        	           String departureTime = Objects.nonNull(carditTransportation.getDepartureTime())?carditTransportation.getDepartureTime().toDisplayDateOnlyFormat():null;

						            	flightFilterVO.setCompanyCode(carditVO.getCompanyCode());
										flightFilterVO.setFlightCarrierId(carditTransportation.getCarrierID());
						            	flightFilterVO.setFlightNumber(carditTransportation.getFlightNumber());
						            	flightFilterVO.setFlightDate(carditTransportation.getDepartureTime());
						            	flightFilterVO.setFlightSequenceNumber(carditTransportation.getFlightSequenceNumber());
						            	flightFilterVO.setDirection(FlightFilterVO.OUTBOUND);
						            	flightFilterVO.setStation(carditTransportation.getDeparturePort());
						            	try {
										     flightVOs1 = validateFlight(flightFilterVO);
									       } catch (SystemException e) {
										      e.getMessage();
									      }
						            	if(flightVOs1!=null &&  !flightVOs1.isEmpty()){
						            		carditTransportation.setArrivalDate(flightVOs1.iterator().next().getSta());
						            		if(!transportDate.equals(departureTime)){
						            		sta = flightVOs1.iterator().next().getSta();
						            		std = flightVOs1.iterator().next().getStd();
						            	}
						            	}
						            	else{
						            		if(!transportDate.equals(departureTime))
						            		firstLegStd = carditTransportation.getDepartureTime();
						            	}

        	        if(sta != null){
            	        if(transportDate.equals(departureTime)){
            	        	        FlightFilterVO flightFilterVo = new FlightFilterVO();
            	        	        flightFilterVo.setCompanyCode(carditVO.getCompanyCode());
            	        	        flightFilterVo.setFlightNumber(carditTransportation.getFlightNumber());
				                //	flightFilterVO.setFlightDate(carditTransportation.getDepartureTime());
				                //	flightFilterVO.setFlightSequenceNumber(carditTransportation.getFlightSequenceNumber());
            	        	        flightFilterVo.setDirection(FlightFilterVO.OUTBOUND);
            	        	        flightFilterVo.setStation(carditTransportation.getDeparturePort());
				                	try {
				    				     flightVOs2 = validateFlight(flightFilterVo);
				    			       } catch (SystemException e) {
				    				      e.getMessage();
				    			      }
				                	if(flightVOs2 != null && ! flightVOs2.isEmpty()){
				                		for(FlightValidationVO flightVO : flightVOs2){
								if (flightVO.getStd().isGreaterThan(sta) && paCode_dom.equals(carditVO.getSenderId())) {
				                				carditTransportation.setDepartureTime(flightVO.getStd());
				                				break;
				                			}
				                		}
				                	}
            	        }
                	}
        	        else{
        	        	if(firstLegStd!=null && paCode_dom.equals(carditVO.getSenderId())){
        	        		carditTransportation.setDepartureTime(firstLegStd);
        	        	}
        	        }
            	}
            }
    }

  /**
     * Added for /IASCB-32332
     * @param mailbagVO
     *
		 * @param mailbagVOs
		 * @return
		 * @throws SystemException
		 */
    public MailbagVO constructOriginDestinationDetailsForConsignment(MailInConsignmentVO mailInConsignmentVO, MailbagVO mailbagVO) throws SystemException {
			Collection<String> officeOfExchanges = new ArrayList<String>();
        HashMap<String, String> resultSetMap = new HashMap<String, String>();

			officeOfExchanges.add(mailbagVO.getOoe());
			officeOfExchanges.add(mailbagVO.getDoe());
			resultSetMap = findAirportForOfficeOfExchange(mailbagVO.getCompanyCode(), officeOfExchanges);
           if (resultSetMap != null) {
            if (resultSetMap.containsKey(mailbagVO.getOoe()) && (mailInConsignmentVO.getMailOrigin()==null || "".equals(mailInConsignmentVO.getMailOrigin()))) {
            	mailbagVO.setOrigin(resultSetMap.get(mailbagVO.getOoe()));
				}
            else{
            	mailbagVO.setOrigin(mailInConsignmentVO.getMailOrigin());
            }
            if (resultSetMap.containsKey(mailbagVO.getDoe())&& (mailInConsignmentVO.getMailDestination()==null || "".equals(mailInConsignmentVO.getMailDestination()))) {
            	mailbagVO.setDestination(resultSetMap.get(mailbagVO.getDoe()));
				}
            else{
            	mailbagVO.setDestination(mailInConsignmentVO.getMailDestination());
            }
			}
			return mailbagVO;

    }

    /**
     * @author-U-1439
     * @IASCB-47333
     * @param containerDetailsVO
     * @return
     * @throws SystemException
     */
    public String isValidContainerForULDlevelArrivalOrDelivery(ContainerDetailsVO containerDetailsVO) throws SystemException{
        log.entering(CLASS,"isValidContainerForULDlevelArrivalOrDelivery");
        return  constructDAO().isValidContainerForULDlevelArrivalOrDelivery(containerDetailsVO);
    }
    /**
     *
     * 	Method		:	MailController.getTotalMailWeight
     *	Added by 	:	U-1467 on 18-Apr-2020
     * 	Used for 	:	Method to get total mail weight from mailbagVOs
     *	Parameters	:	@param mailbagVOs
     *	Parameters	:	@return
     *	Return type	: 	Measure
     */
    private Measure getTotalMailWeight(Collection<MailbagVO> mailbagVOs) {
        log.entering(CLASS, "getTotalMailWeight");
        Measure totalWeight = null;
        if (mailbagVOs != null && mailbagVOs.size() > 0) {
            for (MailbagVO mailbagVO : mailbagVOs) {
                if (totalWeight == null) {
                    if (mailbagVO.getWeight() != null) {
                        totalWeight = new Measure(UnitConstants.MAIL_WGT, 0.0, 0.0, mailbagVO.getWeight().getDisplayUnit());
                    } else {
                        totalWeight = new Measure(UnitConstants.MAIL_WGT, 0.0);
                    }
                }
                try {
                    totalWeight = Measure.addMeasureValues(totalWeight, mailbagVO.getWeight());
                } catch (UnitException e) {
                    log.log(Log.SEVERE, e.getMessage());
                    totalWeight = null;
                }
            }
        }
        log.exiting(CLASS, "getTotalMailWeight");
        return totalWeight;
    }
    /**
     *
     * 	Method		:	MailController.getUldTareWeight
     *	Added by 	:	U-1467 on 18-Apr-2020
     * 	Used for 	:	Method to get Tare wt for a ULD
     *	Parameters	:	@param companyCode
     *	Parameters	:	@param uldNumber
     *	Parameters	:	@return
     *	Return type	: 	Measure
     */
    public Measure getUldTareWeight(String companyCode,String uldNumber) {
        log.entering(CLASS, "getUldTareWeight");
        Measure tareWeight = null;
        ULDValidationFilterVO uldValidationFilterVO = new ULDValidationFilterVO();
        uldValidationFilterVO.setCompanyCode(companyCode);
        uldValidationFilterVO.setUldTypeCode(uldNumber.substring(0, 3));
        uldValidationFilterVO.setSerialNumber(uldNumber.substring(3, uldNumber.length() - 2));
        uldValidationFilterVO.setUldAirlineCode(uldNumber.substring(uldNumber.length() - 2));
        uldValidationFilterVO.setUldNumber(uldNumber);
        try {
            tareWeight = new SharedULDProxy().findULDTareWeight(uldValidationFilterVO);
        } catch (SystemException e) {
            log.log(Log.SEVERE, e.getMessage());
        } catch (SharedProxyException e) {
            log.log(Log.SEVERE, e.getMessage());
        }
        log.exiting(CLASS, "getUldTareWeight");
        return tareWeight;
    }
    /**
     * For transfer mail flow, if the values need to be synced to DWS the container actual weight should be updated in Container.
     * If the container is ULD then Actual Wt = Tare wt + Selected mail Wt + Current container actual wt
     * If the container is Bulk/Barrow then Actual Wt = Total mail Wt + Current container actual wt
     * Transfer flow need not check if ULD has actual weight captured, it needs to be handled as business process as per current requirement
     * Tare wt needs to be added only the first time, the container actual weight will have the latest Tare Wt+ total mail wt
     */
    private Measure getContainerActualWeight(ContainerVO toContainerVO, Collection<MailbagVO> mailbagVOs, double containerActualWeight) {
        log.entering(CLASS, "getContainerActualWeight");
        Measure actualWeight = null;
        Measure actualTareWeight = null;
        actualWeight = getTotalMailWeight(mailbagVOs);
        if (actualWeight != null) {
            if (MailConstantsVO.ULD_TYPE.equals(toContainerVO.getType()) && containerActualWeight < 0.01) {
                actualTareWeight = getUldTareWeight(toContainerVO.getCompanyCode(), toContainerVO.getContainerNumber());
                if (actualTareWeight != null) {
                    actualWeight = new Measure(UnitConstants.MAIL_WGT, containerActualWeight + actualWeight.getSystemValue() + actualTareWeight.getSystemValue(), 0.0, actualWeight.getDisplayUnit());
                }
            } else {
                actualWeight = new Measure(UnitConstants.MAIL_WGT, containerActualWeight + actualWeight.getSystemValue(), 0.0, actualWeight.getDisplayUnit());
            }
        }
        log.exiting(CLASS, "getContainerActualWeight");
        return actualWeight;
    }

    @Advice(name = "mail.operations.insertHistoryDetailsForExcelUpload", phase = Phase.POST_INVOKE)
    public void insertHistoryDetailsForExcelUpload(Collection<ConsignmentDocumentVO> consignmentDocumentVOs) throws SystemException {
        log.entering(CLASS, "insertHistoryDetailsForExcelUpload");
        /**
         * Async call to HistoryBuilder to stamp mailbag history
         */
        log.exiting(CLASS, "insertHistoryDetailsForExcelUpload");
    }

    /**
     *
     * 	Method		:	MailController.isAutoArrivalEnabled
     *	Added by 	:	A-8061 on 21-Apr-2020
     * 	Used for 	:	IASCB-48445
     *	Parameters	:	@param functionalPoint
     *	Parameters	:	@return
     *	Return type	: 	boolean
     */
    public boolean isAutoArrivalEnabled(String functionalPoint){

    	ArrayList<String> systemParameters = new ArrayList<String>();
		systemParameters.add(AUTOARRIVALFUNCTIONPOINTS);
		boolean enableAutoArrival = false;
		String sysparfunctionpoints = null;
		Map<String, String> systemParameterMap=null;
		try {
			systemParameterMap = new SharedDefaultsProxy().findSystemParameterByCodes(systemParameters);
		} catch (SystemException systemException) {
			log.log(Log.INFO,"");
		}
		if (systemParameterMap != null) {
			sysparfunctionpoints = systemParameterMap.get(AUTOARRIVALFUNCTIONPOINTS);
		}
		if(sysparfunctionpoints!=null &&
				sysparfunctionpoints.contains(functionalPoint)
				){
			enableAutoArrival = true;
		}
		return enableAutoArrival;

    }
    /**
     * @author A-10383
     * Added for Mail Operations transfer out in one outtransaction 
     * @param functionalPoint
     * @return
     */
    public boolean mailOperationsTransferTransaction()throws SystemException{

    	ArrayList<String> systemParameters = new ArrayList<>();
		systemParameters.add(MAIL_OPERATIONS_TRANSFER_TRANSACTION);
 		boolean mailoperationstransfer = false;
		String sysparfunctionpoints = null;
		Map<String, String> systemParameterMap=null;
		try {
			systemParameterMap= Proxy.getInstance().get(SharedDefaultsProxy.class).findSystemParameterByCodes(systemParameters);
		} catch (SystemException e) {
			throw new SystemException(e.getMessage(),e);		
			}
		if (systemParameterMap != null) {
			sysparfunctionpoints = systemParameterMap.get(MAIL_OPERATIONS_TRANSFER_TRANSACTION);
		}
		if(sysparfunctionpoints!=null && MailConstantsVO.FLAG_YES.equals(sysparfunctionpoints)){
			mailoperationstransfer = true;
		}
		return mailoperationstransfer;

    }
    /**
     * @author A-5526
     * Added as part of CRQ IASCB-44518
     * @param containerNumber
     * @param companyCode
     * @return
     * @throws SystemException
     */

    public Collection<MailbagVO> findMailbagsFromOALinResditProcessing(String containerNumber,String companyCode) throws SystemException{
    	Collection<MailbagVO> mailbags=new ArrayList<MailbagVO>();
    	try {
			mailbags=constructDAO().findMailbagsFromOALinResditProcessing(containerNumber,companyCode);
		} catch (PersistenceException e) {
			throw new SystemException(e.getMessage());
		}
    	return mailbags;

    }
    /**
     *
     * 	Method		:	MailController.constructOpFlightFromContainer
     *	Added by 	:	A-8061 on 28-Apr-2020
     * 	Used for 	:	IASCB-48967
     *	Parameters	:	@param containerVO
     *	Parameters	:	@param isInbound
     *	Parameters	:	@return
     *	Return type	: 	OperationalFlightVO
     */
    public OperationalFlightVO constructOpFlightFromContainer(
    		ContainerVO containerVO,boolean isInbound) {

		OperationalFlightVO opFlightVO = new OperationalFlightVO();
		opFlightVO.setCompanyCode(containerVO.getCompanyCode());
		opFlightVO.setCarrierId(containerVO.getCarrierId());
		opFlightVO.setFlightNumber(containerVO.getFlightNumber());
		opFlightVO.setFlightSequenceNumber(containerVO
				.getFlightSequenceNumber());
		opFlightVO.setLegSerialNumber(containerVO.getLegSerialNumber());
		opFlightVO.setPol(containerVO.getPol());
		opFlightVO.setPou(containerVO.getPou());

		if(isInbound){
			opFlightVO.setDirection(MailConstantsVO.OPERATION_INBOUND);
			opFlightVO.setAirportCode(containerVO.getPou());
		}else{
			opFlightVO.setDirection(MailConstantsVO.OPERATION_OUTBOUND);
			opFlightVO.setAirportCode(containerVO.getPol());
		}
		opFlightVO.setFlightDate(containerVO.getFlightDate());
		//opFlightVO.setCarrierCode(containerVO.getFlightCarrierCode());
		opFlightVO.setOwnAirlineCode(containerVO.getOwnAirlineCode());
		opFlightVO.setOwnAirlineId(containerVO.getOwnAirlineId());
		//opFlightVO.setOperator(containerVO.getAcceptedUser());

		return opFlightVO;
	}
    /**
     *
     * 	Method		:	MailController.calculateAndUpdateLatestAcceptanceTime
     *	Added by 	:	U-1467 on 30-Apr-2020
     * 	Used for 	:	Calculate and Update Latest acceptance time to Mailbag
     *	Parameters	:	@param mailbagVO
     *	Parameters	:	@throws SystemException
     *	Return type	: 	void
     */
    public static void calculateAndUpdateLatestAcceptanceTime(MailbagVO mailbagVO) throws SystemException {
        Collection<MailbagVO> mailbagVOs = new ArrayList<>();
        MailbagVO mailbagVOForLAT = new MailbagVO();
        BeanHelper.copyProperties(mailbagVOForLAT, mailbagVO);
        boolean isLATCalculated = false;
        mailbagVOs.add(mailbagVOForLAT);
        ScannedMailDetailsVO scannedMailDetailsVO=null;
        try {
            scannedMailDetailsVO = new MailController().doLATValidation(mailbagVOs, true);
        } catch (MailHHTBusniessException e) {
          throw new SystemException(e.getMessage(), e);
        }
        if (scannedMailDetailsVO != null && scannedMailDetailsVO.getMailDetails() != null && scannedMailDetailsVO.getMailDetails().size() > 0) {
            String uspsDomesticPA = new MailController().findSystemParameterValue(MailConstantsVO.USPS_DOMESTIC_PA);
            for (MailbagVO mailbagVOWithLAT : scannedMailDetailsVO.getMailDetails()) {
                /**
                 * Check if LAT is available from LAT validation, case to handle mailbags with CARDIT and valid flight
                 */
                if (mailbagVOWithLAT.getLatestAcceptanceTime() != null) {
                    mailbagVO.setLatestAcceptanceTime(mailbagVOWithLAT.getLatestAcceptanceTime());
                    isLATCalculated = true;
                }
                /**
                 * Check if CARDIT is available, then take the STD of origin airport's flight
                 * This is to handle mailbags with CARDIT and invalid flight
                 */
                if (!isLATCalculated && isNotNullAndEmpty(mailbagVO.getPaCode())) {
                    if (!(mailbagVO.getPaCode().equals(uspsDomesticPA))) {
                        LocalDate statedTimeOfDeparture = null;
                        /**
                         * Date should be made independent of station/airport
                         */
						if (mailbagVO.getFlightDate() != null
								&& !(MailConstantsVO.MAIL_STATUS_ARRIVED.equals(mailbagVO.getLatestStatus())
										|| MailConstantsVO.MAIL_STATUS_DELIVERED.equals(mailbagVO.getLatestStatus()))) {
							statedTimeOfDeparture = getLocalDate(null, mailbagVO.getFlightDate().toDisplayFormat(),mailbagVO.getFlightDate().isTimePresent());
							GeneralConfigurationFilterVO generalTimeMappingFilterVO = new GeneralConfigurationFilterVO();
							generalTimeMappingFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
							generalTimeMappingFilterVO.setAirportCode(mailbagVO.getScannedPort());
							generalTimeMappingFilterVO.setConfigurationType(MailConstantsVO.MAIL_LAT_OFFSET_CONFIGURATION_TYPE);
							if (mailbagVO.getPaCode().equals(uspsDomesticPA)) {
								Collection<GeneralConfigParameterVO> generalConfigParameterVOS = new ArrayList<>();
								GeneralConfigParameterVO generalConfigParameterVO = new GeneralConfigParameterVO();
								generalConfigParameterVO.setCompanyCode(mailbagVO.getCompanyCode());
								generalConfigParameterVO.setConfigurationType(MailConstantsVO.MAIL_LAT_OFFSET_CONFIGURATION_TYPE);
								generalConfigParameterVO.setParameterCode(MailConstantsVO.MAIL_LAT_OFFSET_PARAMETER_CODE);
								generalConfigParameterVO.setParameterValue(MailConstantsVO.MAIL_LAT_OFFSET_PARAMETER_VALUE);
								generalConfigParameterVOS.add(generalConfigParameterVO);
								generalTimeMappingFilterVO.setParameterDetailsFilterVO(generalConfigParameterVOS);
							}
							mailbagVO.setLatestAcceptanceTime(statedTimeOfDeparture.addMinutes(-getLATConfigurationValue(generalTimeMappingFilterVO, statedTimeOfDeparture)));
							isLATCalculated = true;
						} else if (mailbagVO.getScannedDate() != null && mailbagVO.getScannedPort() != null) {
                            mailbagVO.setLatestAcceptanceTime(mailbagVO.getScannedDate());
                            isLATCalculated = true;
                        } else {
                            mailbagVO.setLatestAcceptanceTime(getLocalDate(null, "", true));
                            isLATCalculated = true;
                        }
                }
                }
                /**
                 * Check if domestic USPS PA, then calculate LAT for origin airport's flight from Planned Route Index
                 * This is to handle domestic mailbag without CARDIT
                 */
                if (!isLATCalculated && isNotNullAndEmpty(mailbagVO.getPaCode())) {
                    if (mailbagVO.getPaCode().equals(uspsDomesticPA)) {
                        mailbagVO.setLatestAcceptanceTime(getLATFromRoutingIndex(mailbagVO));
                        isLATCalculated = true;
                    }
                }
            }
        }
    }
    /**
     *
     * 	Method		:	MailController.getLATFromRoutingIndex
     *	Added by 	:	U-1467 on 30-Apr-2020
     * 	Used for 	:	IASCB-48892
     *	Parameters	:	@param mailbagVO
     *	Parameters	:	@return
     *	Parameters	:	@throws SystemException
     *	Return type	: 	LocalDate
     */
    private static LocalDate getLATFromRoutingIndex(MailbagVO mailbagVO) throws SystemException {
        if (mailbagVO.getMailbagId().length() == 12) {
            String routIndex = mailbagVO.getMailbagId().substring(4, 8);
            Collection<RoutingIndexVO> routingIndexVOs;
            RoutingIndexVO routingIndexFilterVO = new RoutingIndexVO();
            routingIndexFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
            routingIndexFilterVO.setRoutingIndex(routIndex);
            routingIndexFilterVO.setScannedDate(mailbagVO.getScannedDate());
            routingIndexVOs = new MailController().findRoutingIndex(routingIndexFilterVO);
            LocalDate statedTimeOfDeparture = null;
            if (routingIndexVOs != null && routingIndexVOs.size() > 0) {
                for (RoutingIndexVO routingIndexVO : routingIndexVOs) {
                    Collection<RoutingIndexLegVO> routingIndexLegVOs = routingIndexVO.getRoutingIndexLegVO();
                    if (routingIndexLegVOs != null && routingIndexLegVOs.size() > 0) {
                        for (RoutingIndexLegVO routingIndexLegVO : routingIndexLegVOs) {
                            if (isNotNullAndEmpty(mailbagVO.getOrigin()) && mailbagVO.getOrigin().equals(routingIndexLegVO.getLegOrg())) {
                                if (isNotNullAndEmpty(routingIndexLegVO.getLegFlight())) {
                                    FlightFilterVO flightFilterVO = new FlightFilterVO();
                                    flightFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
                                    flightFilterVO.setFlightNumber(routingIndexLegVO.getLegFlight().length() < MailConstantsVO.FLIGHT_NUMBER_LENGTH ?
                                            formatFlightNumber(routingIndexLegVO.getLegFlight()) : routingIndexLegVO.getLegFlight());
                                    flightFilterVO.setStation(routingIndexLegVO.getLegOrg());
                                    flightFilterVO.setDirection(MailConstantsVO.OPERATION_OUTBOUND);
                                    flightFilterVO.setActiveAlone(true);
                                    flightFilterVO.setFlightDate(mailbagVO.getScannedDate());
                                    flightFilterVO.setCarrierCode(routingIndexLegVO.getLegRoute());
                                    Collection<FlightValidationVO> flightValidationVOs;
                                    flightValidationVOs = new MailController().validateFlight(flightFilterVO);
                                    if (flightValidationVOs != null && flightValidationVOs.size() > 0) {
                                        LocalDate std = flightValidationVOs.iterator().next().getStd();
                                        statedTimeOfDeparture = getLocalDate(null, std.toDisplayDateOnlyFormat(), false);
                                    }
                                }
                                /**
                                 * If valid flight not available take the STD from Route Index
                                 */
                                if (statedTimeOfDeparture == null) {
                                    statedTimeOfDeparture = getLocalDate(null,
                                            appendDateTime(mailbagVO.getScannedDate().toDisplayDateOnlyFormat(), routingIndexLegVO.getLegDepTime()),
                                            true);
                                }
                                        Collection<GeneralConfigParameterVO> generalConfigParameterVOS = new ArrayList<>();
                                        GeneralConfigParameterVO generalConfigParameterVO = new GeneralConfigParameterVO();
                                        GeneralConfigurationFilterVO generalTimeMappingFilterVO = new GeneralConfigurationFilterVO();
                                        generalTimeMappingFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
                                        generalTimeMappingFilterVO.setAirportCode(mailbagVO.getScannedPort());
                                        generalTimeMappingFilterVO.setConfigurationType(MailConstantsVO.MAIL_LAT_OFFSET_CONFIGURATION_TYPE);
                                        generalConfigParameterVO.setCompanyCode(mailbagVO.getCompanyCode());
                                        generalConfigParameterVO.setConfigurationType(MailConstantsVO.MAIL_LAT_OFFSET_CONFIGURATION_TYPE);
                                        generalConfigParameterVO.setParameterCode(MailConstantsVO.MAIL_LAT_OFFSET_PARAMETER_CODE);
                                        generalConfigParameterVO.setParameterValue(MailConstantsVO.MAIL_LAT_OFFSET_PARAMETER_VALUE);
                                        generalConfigParameterVOS.add(generalConfigParameterVO);
                                        generalTimeMappingFilterVO.setParameterDetailsFilterVO(generalConfigParameterVOS);
                                return statedTimeOfDeparture.addMinutes(-getLATConfigurationValue(generalTimeMappingFilterVO, statedTimeOfDeparture));
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
    /**
     *
     * 	Method		:	MailController.getLocalDate
     *	Added by 	:	U-1467 on 30-Apr-2020
     * 	Used for 	:	Generic method to convert string date to LocalDate
     *	Parameters	:	@param airportCode
     *	Parameters	:	@param stringDate
     *	Parameters	:	@param isTimePresent
     *	Parameters	:	@return
     *	Return type	: 	LocalDate
     */
    public static LocalDate getLocalDate(String airportCode, String stringDate, boolean isTimePresent) {
        if (isNotNullAndEmpty(airportCode) && isNotNullAndEmpty(stringDate)) {
            LocalDate date = new LocalDate(airportCode, ARP, isTimePresent);
            return isTimePresent ? date.setDateAndTime(stringDate) : date.setDate(stringDate);
        }
        if (airportCode == null && isNotNullAndEmpty(stringDate)) {
            LocalDate date = new LocalDate(LocalDate.NO_STATION, Location.NONE, isTimePresent);
            return isTimePresent ? date.setDateAndTime(stringDate) : date.setDate(stringDate);
        }
        return new LocalDate(LocalDate.NO_STATION, Location.NONE, isTimePresent);
    }
    /**
     *
     * 	Method		:	MailController.appendDateTime
     *	Added by 	:	U-1467 on 30-Apr-2020
     * 	Used for 	:	Generic method to add time and date and return as string
     *	Parameters	:	@param date
     *	Parameters	:	@param time
     *	Parameters	:	@return
     *	Return type	: 	String
     */
    public static String appendDateTime(String date, String time) {
        String dateTime = null;
        if (isNotNullAndEmpty(date) && isNotNullAndEmpty(time)) {
            StringBuilder sb = new StringBuilder();
            sb.append(date).append(" ").append(time, 0, 2).append(":").append(time, 2, 4).append(":00");
            dateTime = sb.toString();
        }
        return dateTime;
    }

    private static boolean isNotNullAndEmpty(String s) {
        return s != null && !"".equals(s.trim());
    }
    /**
     *
     * 	Method		:	MailController.formatFlightNumber
     *	Added by 	:	U-1467 on 06-May-2020
     * 	Used for 	:	Generic method to format flight number
     *	Parameters	:	@param flightNumber
     *	Parameters	:	@return
     *	Return type	: 	String
     */
    public static String formatFlightNumber(String flightNumber) {
        int lastCharInAscii = flightNumber.charAt(flightNumber.length()-1);
        int flightNumberLength = MailConstantsVO.FLIGHT_NUMBER_LENGTH;
        if(!((lastCharInAscii >= 65) && (lastCharInAscii <= 90))) {
            flightNumberLength = flightNumberLength-1;
        }
        int idx = flightNumberLength - flightNumber.length();
        while(idx != 0) {
            flightNumber = MailConstantsVO.PAD_DIGIT + flightNumber;
            idx--;
        }
        return flightNumber;
    }
  /**
   * @author A-7540
   * @param ediInterchangeVO
   * @throws SystemException
   * @throws MailTrackingBusinessException
   * @throws DuplicateMailBagsException
   */
    public Collection<ErrorVO> saveCDTMessages(com.ibsplc.icargo.business.mail.operations.vo.EDIInterchangeVO ediInterchangeVO) throws
                        SystemException, MailTrackingBusinessException, DuplicateMailBagsException{
    	  log.entering(CLASS, "saveCDTMessages");
    	    Collection<ErrorVO> errorVO = new ArrayList<>();
    		try {
				errorVO=(Collection<ErrorVO>) new MailOperationsProxy().saveCarditMsgs(ediInterchangeVO);
			} catch (ProxyException e) {
				e.getMessage();
			}
    		return errorVO;
    }
	
    /**
     * @param containers
     * @return
     * @throws SystemException
     * @author a-A-9529
     */
    public Collection<ContainerDetailsVO> findMailbagsInContainerFromInboundForReact(
            Collection<ContainerDetailsVO> containers) throws SystemException {
        return MailArrival.findMailbagsInContainerFromInboundForReact(containers);
    }
    
    
    /**
     *
     * @param containerNumber
     * @param companyCode
     * @return
     * @throws SystemException
     */
	public Collection<MailbagVO> findMailbagsForPABuiltContainerSave(String containerNumber, String companyCode,
			LocalDate fromDate,LocalDate toDate) throws SystemException {
		log.entering(CLASS, "findMailbagsForPABuiltContainerSave");
		Collection<MailbagVO> mailbags=new ArrayList<MailbagVO>();
		try {
			mailbags=constructDAO().findMailbagsForPABuiltContainerSave(containerNumber,companyCode,
					 fromDate, toDate);
		} catch (PersistenceException e) {
			throw new SystemException(e.getMessage());
		}
    	return mailbags;
	}
	/**
	 *
	 * 	Method		:	MailController.getCustomerForCustoms
	 *	Added by 	:	U-1467 on 10-May-2020
	 * 	Used for 	:	Get Customer from PA code mapped in Customer Preferences
	 *	Parameters	:	@param paCode
	 *	Parameters	:	@param customerDetails
	 *	Parameters	:	@return
	 *	Return type	: 	Collection<CustomerVO>
	 */
    private Collection<CustomerVO> getCustomerForCustoms(String paCode, Collection<CustomerVO> customerDetails) {
        Collection<CustomerVO> customerForCustoms = null;
        if (customerDetails != null && customerDetails.size() > 0) {
            for (CustomerVO customer : customerDetails) {
                if (customer.getCustomerPreferences() != null && customer.getCustomerPreferences().size() > 0) {
                    for (CustomerPreferenceVO customerPreferenceVO : customer.getCustomerPreferences()) {
                        if (isNotNullAndEmpty(paCode) && customerPreferenceVO.getPreferenceValue().contains(paCode)) {
                            if (customerForCustoms == null) {
                                customerForCustoms = new ArrayList<>();
                            }
                            customerForCustoms.add(customer);
                            return customerForCustoms;
                        }
                    }
                }
            }
        }
        return null;
    }
    /**
     *
     * 	Method		:	MailController.populateShipmentRoutingDetails
     *	Added by 	:	U-1467 on 10-May-2020
     * 	Used for 	:	IASCB-51778
     *	Parameters	:	@param shipmentDetailVO
     *	Parameters	:	@param mailbagVOs
     *	Parameters	:	@param containerDetailsVO
     *	Parameters	:	@throws SystemException
     *	Return type	: 	void
     */
    private void populateShipmentRoutingDetails(ShipmentDetailVO shipmentDetailVO, Collection<MailbagVO> mailbagVOs,
                                                ContainerDetailsVO containerDetailsVO,MailManifestDetailsVO mailManifestDetailsVO) throws SystemException {
        Collection<ConsignmentRoutingVO> consignmentRoutingVOs = null;
        Collection<RoutingVO> routingVOs = new ArrayList<>();
        for (MailbagVO mailbagVO : mailbagVOs) {
            if (isNotNullAndEmpty(mailbagVO.getConsignmentNumber()) && isNotNullAndEmpty(mailbagVO.getPaCode())) {
                CarditEnquiryFilterVO carditEnquiryFilterVO = new CarditEnquiryFilterVO();
                carditEnquiryFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
                carditEnquiryFilterVO.setConsignmentDocument(mailbagVO.getConsignmentNumber());
                carditEnquiryFilterVO.setPaoCode(mailbagVO.getPaCode());
                try {
                    consignmentRoutingVOs = constructDAO().findConsignmentRoutingDetails(carditEnquiryFilterVO);
                } catch (SystemException | PersistenceException exp) {
                    log.log(Log.FINE, exp.getMessage());
                }
                int sequenceNumber = 1;
                if (consignmentRoutingVOs != null && consignmentRoutingVOs.size() > 0) {
                    String consignmentDestination = null;
                    for (ConsignmentRoutingVO consignmentRoutingVO : consignmentRoutingVOs) {
                        RoutingVO routingVO = new RoutingVO();
                        routingVO.setCompanyCode(consignmentRoutingVO.getCompanyCode());
                        routingVO.setCarrierCode(consignmentRoutingVO.getFlightCarrierCode());
                        routingVO.setCarrierId(consignmentRoutingVO.getFlightCarrierId());
                        routingVO.setOrigin(consignmentRoutingVO.getPol());
                        routingVO.setDestination(consignmentRoutingVO.getPou());
                        routingVO.setAirportCode(consignmentRoutingVO.getPou());
                        routingVO.setFlightNumber(consignmentRoutingVO.getFlightNumber());
                        routingVO.setFlightDate(consignmentRoutingVO.getFlightDate());
                        routingVO.setRoutingSequenceNumber(sequenceNumber);
                        routingVO.setOperationFlag(OPERATION_FLAG_INSERT);
                        routingVOs.add(routingVO);
                        sequenceNumber++;
                        consignmentDestination = consignmentRoutingVO.getPou();
                    }
                    shipmentDetailVO.setRoutingDetails(routingVOs);
                    shipmentDetailVO.setHandlingInfo(mailbagVO.getConsignmentNumber() + SPACE + mailbagVO.getPaCode());
                    /**
                     * If consignment destination is not the mailbag destination
                     * then additional routing info needs to be added till mailbag destination, to complete routing
                     */
                    if (isNotNullAndEmpty(mailbagVO.getDestination()) && !mailbagVO.getDestination().equals(consignmentDestination)) {
                        LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
                        RoutingVO routingVO = new RoutingVO();
                        routingVO.setCompanyCode(logonAttributes.getCompanyCode());
                        routingVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
                        routingVO.setCarrierId(logonAttributes.getOwnAirlineIdentifier());
                        routingVO.setOrigin(consignmentDestination);
                        routingVO.setDestination(mailbagVO.getDestination());
                        routingVO.setAirportCode(mailbagVO.getDestination());
                        routingVO.setFlightNumber(MailConstantsVO.DESTN_FLT_STR);
                        routingVO.setRoutingSequenceNumber(sequenceNumber);
                        routingVO.setOperationFlag(OPERATION_FLAG_INSERT);
                        shipmentDetailVO.getRoutingDetails().add(routingVO);
                    }
                }
            } else {
                /**
                 * If consignment info not present then use the current flight route
                 * If flight destination is different from mailbag destination
                 * then additional routing info needs to be added till mailbag destination, to complete routing
                 */
                Collection<FlightValidationVO> flightValidationVOs = null;
                FlightFilterVO flightFilterVO = constructFlightFilterVO(containerDetailsVO);
                try {
                    flightValidationVOs = validateFlight(flightFilterVO);
                } catch (SystemException ex) {
                    log.log(Log.SEVERE, "System Exception Caught");
                }
                if (flightValidationVOs != null && flightValidationVOs.size() > 0) {
                    int sequenceNumber = 1;
                    String flightLegDestination = flightValidationVOs.iterator().next().getLegDestination();
                    RoutingVO routingVO = new RoutingVO();
                    routingVO.setCompanyCode(flightValidationVOs.iterator().next().getCompanyCode());
                    routingVO.setCarrierCode(flightValidationVOs.iterator().next().getCarrierCode());
                    routingVO.setCarrierId(flightValidationVOs.iterator().next().getFlightCarrierId());
                    routingVO.setOrigin(flightValidationVOs.iterator().next().getLegOrigin());
                    routingVO.setDestination(flightLegDestination);
                    routingVO.setAirportCode(flightLegDestination);
                    routingVO.setFlightNumber(flightValidationVOs.iterator().next().getFlightNumber());
                    routingVO.setFlightDate(flightValidationVOs.iterator().next().getFlightDate());
                    routingVO.setRoutingSequenceNumber(sequenceNumber);
                    routingVO.setOperationFlag(OPERATION_FLAG_INSERT);
                    routingVOs.add(routingVO);
                    sequenceNumber++;
                    shipmentDetailVO.setRoutingDetails(routingVOs);
                    if (isNotNullAndEmpty(mailbagVO.getDestination()) && !mailbagVO.getDestination().equals(flightLegDestination)) {
                        LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
                        routingVO = new RoutingVO();
                        routingVO.setCompanyCode(logonAttributes.getCompanyCode());
                        routingVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
                        routingVO.setCarrierId(logonAttributes.getOwnAirlineIdentifier());
                        routingVO.setOrigin(flightLegDestination);
                        routingVO.setDestination(mailbagVO.getDestination());
                        routingVO.setAirportCode(mailbagVO.getDestination());
                        routingVO.setFlightNumber(MailConstantsVO.DESTN_FLT_STR);
                        routingVO.setRoutingSequenceNumber(sequenceNumber);
                        routingVO.setOperationFlag(OPERATION_FLAG_INSERT);
                        shipmentDetailVO.getRoutingDetails().add(routingVO);
                    }
                    mailManifestDetailsVO.setFlightValidationVO(flightValidationVOs.iterator().next());
                }
            }
            break;
        }
    }
    public ErrorVO validateContainerNumberForDeviatedMailbags(
			ContainerDetailsVO containerDetailsVO, long mailSequenceNumber)
            throws SystemException {
        log.entering(CLASS, "validateContainerNumberForDeviatedMailbags");
        ErrorVO error = null;
        String containerNumberToValidate = constructDAO().findContainerInfoForDeviatedMailbag(containerDetailsVO, mailSequenceNumber);
        if(containerNumberToValidate!=null){
        	String conNum = containerNumberToValidate.split("-")[0];
        	String conType = containerNumberToValidate.split("-")[1];
        	if("B".equals(conType) && "B".equals(containerDetailsVO.getContainerType())) {
        		error = null;
        	} else if(!conNum.equals(containerDetailsVO.getContainerNumber()) || !conType.equals(containerDetailsVO.getContainerType())){
            	error = new ErrorVO("mailtracking.defaults.containernumbernotmatching");
            }
        }
        return error;
    }


    //Added by A-8527 for IASCB-54731 starts
    public boolean checkForDepartedFlight_Atd(ContainerVO containerVO)
			throws SystemException {
		Collection<FlightValidationVO> flightValidationVOs = null;
		if(containerVO !=null){
		flightValidationVOs = new FlightOperationsProxy()
				.validateFlightForAirport(createFlightFilterVO_atd(containerVO));
		if (flightValidationVOs != null) {
			for (FlightValidationVO flightValidationVO : flightValidationVOs) {
				if (flightValidationVO.getFlightSequenceNumber() == containerVO
						.getFlightSequenceNumber()
						&& flightValidationVO.getLegSerialNumber() == containerVO
								.getLegSerialNumber()) {
					if (flightValidationVO.getAtd()!=null) {
						return true;
					}
				}
			}
		}
    }
		return false;
	}
    private FlightFilterVO createFlightFilterVO_atd(
    		ContainerVO containerVo) {
		FlightFilterVO flightFilterVO = new FlightFilterVO();
		flightFilterVO.setCompanyCode(containerVo.getCompanyCode());
		flightFilterVO.setFlightCarrierId(containerVo.getCarrierId());
		flightFilterVO.setFlightNumber(containerVo.getFlightNumber());
		flightFilterVO.setFlightSequenceNumber(containerVo
				.getFlightSequenceNumber());
		flightFilterVO.setStation(containerVo.getPol());
		flightFilterVO.setDirection(FlightFilterVO.OUTBOUND);
		return flightFilterVO;
	}
  //Added by A-8527 for IASCB-54731 starts
    /**
     *
     * 	Method		:	MailController.getLATConfigurationValue
     *	Added by 	:	U-1467 on 09-Jun-2020
     * 	Used for 	:	Getting the LAT offset value
     * 					Iteration of generalConfigurationMasterVOs will handle the ParameterDetails
     *	Parameters	:	@param generalTimeMappingFilterVO
     *	Parameters	:	@param statedTimeOfDeparture
     *	Parameters	:	@return
     *	Return type	: 	int
     */
    private static int getLATConfigurationValue(GeneralConfigurationFilterVO generalTimeMappingFilterVO, LocalDate statedTimeOfDeparture) {
        Collection<GeneralConfigurationMasterVO> generalConfigurationMasterVOs = null;
        try {
            generalConfigurationMasterVOs = new SharedDefaultsProxy().findGeneralConfigurationDetails(generalTimeMappingFilterVO);
        } catch (SystemException e) {
            e.getMessage();
        }
        int minutes = 0, hours = 0;
        if (generalConfigurationMasterVOs != null && generalConfigurationMasterVOs.size() > 0) {
            for (GeneralConfigurationMasterVO generalConfigurationMasterVO : generalConfigurationMasterVOs) {
                if ((statedTimeOfDeparture.isGreaterThan(generalConfigurationMasterVO.getStartDate())
                        && statedTimeOfDeparture.isLesserThan(generalConfigurationMasterVO.getEndDate()))
                        || statedTimeOfDeparture.toDisplayDateOnlyFormat()
                        .equals(generalConfigurationMasterVO.getStartDate().toDisplayDateOnlyFormat())
                        || statedTimeOfDeparture.toDisplayDateOnlyFormat()
                        .equals(generalConfigurationMasterVO.getEndDate().toDisplayDateOnlyFormat())) {
                    if (generalConfigurationMasterVO.getParameterDetails() != null && generalConfigurationMasterVO.getParameterDetails().size() > 0 &&
                            generalTimeMappingFilterVO.getParameterDetailsFilterVO() != null && generalTimeMappingFilterVO.getParameterDetailsFilterVO().size()>0
                            && MailConstantsVO.MAIL_LAT_OFFSET_PARAMETER_CODE.equals(generalTimeMappingFilterVO.getParameterDetailsFilterVO().iterator().next().getParameterCode())) {
                        for (GeneralRuleConfigDetailsVO generalRuleConfigDetailsVO : generalConfigurationMasterVO.getTimeDetails()) {
                            if (MailConstantsVO.MAIL_LAT_OFFSET_CONFIGURATION_RULE_MINUTES.equals(generalRuleConfigDetailsVO.getParameterCode())) {
                                minutes = Integer.parseInt(generalRuleConfigDetailsVO.getParameterValue());
                            }
                            if (MailConstantsVO.MAIL_LAT_OFFSET_CONFIGURATION_RULE_HOURS.equals(generalRuleConfigDetailsVO.getParameterCode())) {
                                hours = Integer.parseInt(generalRuleConfigDetailsVO.getParameterValue());
                            }
                        }
                    }
                    if (generalConfigurationMasterVO.getParameterDetails() == null || generalConfigurationMasterVO.getParameterDetails().size() == 0) {
                        for (GeneralRuleConfigDetailsVO generalRuleConfigDetailsVO : generalConfigurationMasterVO.getTimeDetails()) {
                            if (MailConstantsVO.MAIL_LAT_OFFSET_CONFIGURATION_RULE_MINUTES.equals(generalRuleConfigDetailsVO.getParameterCode())) {
                                minutes = Integer.parseInt(generalRuleConfigDetailsVO.getParameterValue());
                            }
                            if (MailConstantsVO.MAIL_LAT_OFFSET_CONFIGURATION_RULE_HOURS.equals(generalRuleConfigDetailsVO.getParameterCode())) {
                                hours = Integer.parseInt(generalRuleConfigDetailsVO.getParameterValue());
                            }
                        }
                    }
                }
            }
        }
        return minutes + hours * 60;
    }
    /**
     *
     * 	Method		:	MailController.performOffloadAndReassign
     *	Added by 	:	U-1467 on 11-Jun-2020
     * 	Used for 	:	IASCB-55954
     *	Parameters	:	@param mailbagVOs
     *	Parameters	:	@param toContainerVO
     *	Parameters	:	@throws SystemException
     *	Parameters	:	@throws InvalidFlightSegmentException
     *	Parameters	:	@throws ReassignmentException
     *	Parameters	:	@throws CapacityBookingProxyException
     *	Parameters	:	@throws MailBookingException
     *	Return type	: 	void
     */
    private void performOffloadAndReassign(Collection<MailbagVO> mailbagVOs, ContainerVO toContainerVO)
            throws SystemException,InvalidFlightSegmentException,
            ReassignmentException, CapacityBookingProxyException, MailBookingException {
        log.entering(CLASS, "performOffloadAndReassign");
        if (mailbagVOs != null && mailbagVOs.size() > 0) {
            /**
             * Offload the mailbags in the closed to flight,Partial Offload(PR)
             */
            Page<MailbagVO> offloadMailbags = new Page<>(new ArrayList<>(), 0, 0, 0, 0, 0, false);
            for (MailbagVO mailbagVO : mailbagVOs) {
                MailbagVO mailbagToOffload = new MailbagVO();
                BeanHelper.copyProperties(mailbagToOffload,mailbagVO);
                mailbagToOffload.setOffloadedReason("PR");
                mailbagToOffload.setIsoffload(true);
                mailbagVO.setFlightClosureCheckNotNeeded(true);
                offloadMailbags.add(mailbagToOffload);
            }
            OffloadVO offloadVO = updateMailbagOffloadDetails(mailbagVOs.iterator().next());
            offloadVO.setDepartureOverride(true);
            offloadVO.setFltClosureChkNotReq(true);
            offloadVO.setOffloadMailbags(offloadMailbags);
            try {
                offload(offloadVO);
            } catch (FlightDepartedException|ULDDefaultsProxyException|FlightClosedException e) {
                throw new SystemException(e.getMessage());
            }
            /**
             * Reassign Mailbags to new container
             * Flight Closed Exception needs to be handled explicitly to avoid endless loop
             */
            for (MailbagVO mailbagVO : mailbagVOs) {
            	mailbagVO.setFlightNumber(MailConstantsVO.DESTN_FLT_STR);
            	mailbagVO.setFlightSequenceNumber(MailConstantsVO.ZERO);
				mailbagVO.setOffloadAndReassign(true);
            	if(MailConstantsVO.ULD_TYPE.equals(mailbagVO.getContainerType())){
            		mailbagVO.setUldNumber(MailConstantsVO.CONST_BULK+MailConstantsVO.SEPARATOR+mailbagVO.getPou());
            	}
            }
            try {
                reassignMailbagsfromAndroid(mailbagVOs, toContainerVO);
            }catch (FlightClosedException e) {
                throw new SystemException(e.getMessage());
            }
        }
        log.exiting(CLASS, "performOffloadAndReassign");
    }
    //Added by A-8672 for IASCB-56964
    public LocalDate calculateTransportServiceWindowEndTime(MailbagVO mailbagVO) throws SystemException{
    	LocalDate transportServiceWindowEndTime = null;
    	MailHandoverVO mailHandoverVO = new MailHandoverVO();
    	if(mailbagVO.getConsignmentDate()!=null){
    		LocalDate consDate = new LocalDate(mailbagVO.getDestination(), ARP, true);
    		String consignmentDateString = mailbagVO.getConsignmentDate().toDisplayFormat(false);
    		if(consignmentDateString.trim().length() == 11){
    			consDate.setDate(consignmentDateString);
    		}else{
    		consDate.setDateAndTime(consignmentDateString);
    		}
    		ArrayList<String> systemParameters = new ArrayList<String>();
    		systemParameters.add("mail.operations.USPSCloseoutoffsettime");
    		HashMap<String, String> systemParameterMap = null;
    		systemParameterMap = new SharedDefaultsProxy()
    				.findSystemParameterByCodes(systemParameters);
    		log.log(Log.FINE, " systemParameterMap ", systemParameterMap);
    		if (systemParameterMap != null){
    			String closeOutTime = systemParameterMap
    					.get("mail.operations.USPSCloseoutoffsettime");
    			int timeInMinutes = Integer.parseInt(closeOutTime);
    			timeInMinutes = timeInMinutes * -1;
    			consDate.addMinutes(timeInMinutes);
    		}
    		transportServiceWindowEndTime = new LocalDate(mailbagVO.getDestination(), ARP, true);
    		String consDateString = consDate.toDisplayDateOnlyFormat();
        	transportServiceWindowEndTime.setDate(consDateString);
        	int serviceStandard = 0;
        	try {
        		if(mailbagVO.getMailServiceLevel()!=null)
        			serviceStandard = constructDAO().findServiceStandard(mailbagVO);
    		} catch (PersistenceException e1) {
    		} catch (SystemException e1) {
    		}
        	if(serviceStandard!=0){
    			transportServiceWindowEndTime.addDays(serviceStandard);
        	}
        	mailHandoverVO.setCompanyCode(mailbagVO.getCompanyCode());
        	mailHandoverVO.setGpaCode(mailbagVO.getPaCode());
        	mailHandoverVO.setHoAirportCodes(mailbagVO.getDestination());
        	boolean mailClassCharCheck = false;
        	try{
        		Integer.parseInt(mailbagVO.getMailClass());
        	}catch(NumberFormatException e){
        		mailClassCharCheck =true;
        	}
        	if(mailClassCharCheck){
        		mailHandoverVO.setMailClass(mailbagVO.getMailClass());
        	}else{
        		mailHandoverVO.setMailSubClass(mailbagVO.getMailSubclass());
        	}
        	if(mailbagVO.getDoe()!=null && mailbagVO.getDoe().length()==6){
        	mailHandoverVO.setExchangeOffice(mailbagVO.getDoe().substring(0, 5));}
        	String mailHandoverTime = null;
        	try {
        		try {
					mailHandoverTime = constructDAO().findMailHandoverDetails(mailHandoverVO);
				} catch (PersistenceException e) {
				}
    		} catch (SystemException e) {
    		}
        	if(mailHandoverTime!=null){
        		String handOverTime = mailHandoverTime;
        		int timeInMinutes = 0;
        		timeInMinutes = (Integer.parseInt(handOverTime.substring(0,2))* 60 + Integer.parseInt(handOverTime.substring(2,4)));
        		transportServiceWindowEndTime.addMinutes(timeInMinutes);
        	}
    	}
    	return transportServiceWindowEndTime;
    }


	/**
* @param companyCode
* @param mailbagId
* @return
* @throws SystemException
	 * @author A-5526 This method is used to find the details of approved Force Meajure info of a Mailbag
	 */
	public Collection<ForceMajeureRequestVO> findApprovedForceMajeureDetails(
			String companyCode, String mailBagId, long mailSequenceNumber) throws SystemException {
		log.entering(CLASS, "findMailbagHistories");
return ForceMajeureRequest.findApprovedForceMajeureDetails(companyCode, mailBagId, mailSequenceNumber);
	}


	/**
* @param companyCode
* @param Collection<MailbagVO>mailbagVOs
* @return
* @throws SystemException
	 * @author A-8176 This method is used to get create rateDetailsVO from the mailbagVO collection
	 */
public Collection<RateAuditDetailsVO> createRateAuditVOsFromMailbag(Collection<MailbagVO>mailbagVOs) throws SystemException {
		 Collection<RateAuditDetailsVO> rateAuditDetails = new ArrayList<RateAuditDetailsVO>();
		 LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
		 String triggerForImport = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
         if (mailbagVOs != null && mailbagVOs.size() > 0) {
         	for(MailbagVO mailbagVO : mailbagVOs){
         		if(triggerForImport!=null && !triggerForImport.isEmpty()&& triggerForImport.contains("D")){
         			try {
         		   Mailbag mailbag = Mailbag.find(createMailbagPK(mailbagVO.getCompanyCode(), mailbagVO));
				      if (!(MailConstantsVO.MAIL_STATUS_DELIVERED.equals(mailbag.getLatestStatus()) || logonAttributes.getOwnAirlineIdentifier() != mailbag.getCarrierId())) {
					      continue;
				       }
         		      }
         			   catch (FinderException e) {
    					log.log(Log.FINE,"Finder exc");
    				  }
         		 }
         		 RateAuditDetailsVO rateAuditDetailsVO = new RateAuditDetailsVO();
         		rateAuditDetailsVO.setCompanyCode(mailbagVO.getCompanyCode());
         		rateAuditDetailsVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
         		rateAuditDetailsVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
         		rateAuditDetailsVO.setCarrierid(mailbagVO.getCarrierId());
             if(mailbagVO.getCarrierCode() != null){
            	 rateAuditDetailsVO.setCarrierCode(mailbagVO.getCarrierCode());
             }
             if(mailbagVO.getFlightNumber() != null){
             	 rateAuditDetailsVO.setFlightno(mailbagVO.getFlightNumber());
             }
             if(mailbagVO.getFlightSequenceNumber() != 0){
             	rateAuditDetailsVO.setFlightseqno((int)mailbagVO.getFlightSequenceNumber());
             }
             if(mailbagVO.getSegmentSerialNumber() != 0){
             	rateAuditDetailsVO.setSegSerNo( mailbagVO.getSegmentSerialNumber());
             }
             if(mailbagVO.getScannedPort()!=null) {
             LocalDate date = new LocalDate(mailbagVO.getScannedPort(),Location.ARP, true);
             rateAuditDetailsVO.setLastUpdateTime(date);
             }
             rateAuditDetailsVO.setLastUpdateUser(mailbagVO.getLastUpdateUser());
             rateAuditDetailsVO.setProcessStatus("D");
             rateAuditDetailsVO.setSource("DIS");
             rateAuditDetails.add(rateAuditDetailsVO);
         	}
         }
         return rateAuditDetails;
	}
	/**
	 *
	 * 	Method		:	MailController.constructFlightFilterVO
	 *	Parameters	:	@param containerDetailsVO
	 *	Parameters	:	@return
	 *	Return type	: 	FlightFilterVO
	 */
    private FlightFilterVO constructFlightFilterVO(ContainerDetailsVO containerDetailsVO) {
        FlightFilterVO flightFilterVO = new FlightFilterVO();
        flightFilterVO.setCompanyCode(containerDetailsVO.getCompanyCode());
        flightFilterVO.setFlightCarrierId(containerDetailsVO.getCarrierId());
        flightFilterVO.setFlightNumber(containerDetailsVO.getFlightNumber());
        flightFilterVO.setFlightSequenceNumber(containerDetailsVO.getFlightSequenceNumber());
        flightFilterVO.setStation(containerDetailsVO.getPol());
        flightFilterVO.setDirection(FlightFilterVO.OUTBOUND);
        return flightFilterVO;
    }
    public boolean canReuseEmptyContainer(ContainerAssignmentVO containerAssignmentVO) {
		ArrayList<String> systemParameters = new ArrayList<String>();
		systemParameters.add("mail.operations.reuseEmptyULD");
	    boolean reuseEmptyULDEnabled = canReuseEmptyContainerCheckEnabled();
		if(!reuseEmptyULDEnabled) {
			return false;
		}
		Collection<ContainerDetailsVO> containers=new ArrayList<ContainerDetailsVO>();
		ContainerDetailsVO containerDetailsVO = new ContainerDetailsVO();
		containerDetailsVO.setCompanyCode(containerAssignmentVO.getCompanyCode());
		containerDetailsVO.setCarrierId(containerAssignmentVO.getCarrierId());
		containerDetailsVO.setFlightNumber(containerAssignmentVO.getFlightNumber());
		containerDetailsVO.setFlightSequenceNumber(containerAssignmentVO.getFlightSequenceNumber());
		containerDetailsVO.setLegSerialNumber(containerAssignmentVO.getLegSerialNumber());
		containerDetailsVO.setPol(containerAssignmentVO.getAirportCode());
		containerDetailsVO.setContainerType(containerAssignmentVO.getContainerType());
		containerDetailsVO.setAssignedPort(containerAssignmentVO.getAirportCode());
		containerDetailsVO.setCarrierCode(containerAssignmentVO.getCarrierCode());
		containerDetailsVO.setContainerNumber(containerAssignmentVO.getContainerNumber());
		containers.add(containerDetailsVO );
		Collection<ContainerDetailsVO>  containerDetailsVOs = null;
		try {
			containerDetailsVOs = new MailController().findMailbagsInContainer(containers);
		} catch (SystemException e) {
			log.log(Log.SEVERE, "SystemException caught");
		}
		if(containerDetailsVOs==null || containerDetailsVOs.size()==0)
		{
			return false;
		}
		ContainerDetailsVO containerVo = containerDetailsVOs.iterator().next();
		if(containerVo!=null && containerVo.getMailDetails()!=null
				&& containerVo.getMailDetails().size()>0) {
			return false;
		}
		return true;
	}
    public  boolean canReuseEmptyContainerCheckEnabled() {
    	ArrayList<String> systemParameters = new ArrayList<String>();
		systemParameters.add("mail.operations.reuseEmptyULD");
	    Map<String, String> systemParameterMap=null;
	    boolean reuseEmptyULDEnabled = false;
		try {
			systemParameterMap = new SharedDefaultsProxy().findSystemParameterByCodes(systemParameters);
		} catch (SystemException e) {
			log.log(Log.SEVERE, "SystemException caught");
		}
		if(systemParameterMap!=null && systemParameterMap.containsKey("mail.operations.reuseEmptyULD"))
		{
			reuseEmptyULDEnabled = "Y".equals(systemParameterMap.get("mail.operations.reuseEmptyULD"));
		}
		return reuseEmptyULDEnabled;
    }
    /**
     *  This method will delete empty container while reusing from other station
     * @param containerDetailsVO
     */
    public void deleteCarrierEmptyContainer(ContainerAssignmentVO containerDetailsVO) {
		ULDAtAirport uldAtAirport=null;
		ULDAtAirportPK uldAtAirportPK=constructULDAtAirportPK(containerDetailsVO);
		try {
			uldAtAirport=ULDAtAirport.find(uldAtAirportPK);
			uldAtAirport.remove();
		} catch (FinderException | SystemException e) {
			log.log(Log.SEVERE, "SystemException caught");
		}
		ContainerPK containerPK=constructContainerPK(containerDetailsVO);
		Container container= null;
		try {
			container = Container.find(containerPK);
			ContainerAuditVO containerAuditVO = new ContainerAuditVO(
					ContainerVO.MODULE, ContainerVO.SUBMODULE, ContainerVO.ENTITY);
			containerAuditVO = (ContainerAuditVO) AuditUtils.populateAuditDetails(
					containerAuditVO, container, false);
			collectContainerAuditDetails(container, containerAuditVO);
			LogonAttributes logonAttributes = null;
			try {
				logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
			} catch (SystemException e) {
				log.log(Log.INFO,e.getMessage());  
			}
			containerAuditVO.setCompanyCode(container.getContainerPK()
					.getCompanyCode());
			containerAuditVO.setContainerNumber(container.getContainerPK()
					.getContainerNumber());
			containerAuditVO.setAssignedPort(container.getContainerPK()
					.getAssignmentPort());
			containerAuditVO
					.setCarrierId(container.getContainerPK().getCarrierId());
			containerAuditVO.setFlightNumber(container.getContainerPK()
					.getFlightNumber());
			containerAuditVO.setFlightSequenceNumber(container.getContainerPK()
					.getFlightSequenceNumber());
			containerAuditVO.setLegSerialNumber(container.getContainerPK()
					.getLegSerialNumber());
			containerAuditVO.setStationCode(logonAttributes.getAirportCode());
			containerAuditVO.setUserId(logonAttributes.getUserId());
			containerAuditVO.setActionCode(AuditVO.DELETE_ACTION); 
			containerAuditVO.setAdditionalInformation("Empty container deleted");
			containerAuditVO.setAuditRemarks("Empty container deleted"); 
			container.remove();
			//audit
			AuditUtils.performAudit(containerAuditVO);
		} catch (FinderException | SystemException e) {
			log.log(Log.SEVERE, "SystemException caught");
		}
	}
    private ContainerPK constructContainerPK(ContainerAssignmentVO containerAssignmentVO){
		ContainerPK containerPK=new ContainerPK();
		containerPK.setContainerNumber(containerAssignmentVO.getContainerNumber());
		containerPK.setCompanyCode(containerAssignmentVO.getCompanyCode());
		containerPK.setAssignmentPort(containerAssignmentVO.getAirportCode());
		containerPK.setCarrierId(containerAssignmentVO.getCarrierId());
		containerPK.setFlightNumber(containerAssignmentVO.getFlightNumber());
		containerPK.setFlightSequenceNumber(containerAssignmentVO.getFlightSequenceNumber());
		containerPK.setLegSerialNumber(containerAssignmentVO.getLegSerialNumber());
		return containerPK;
	}
	private ULDAtAirportPK constructULDAtAirportPK(ContainerAssignmentVO containerAssignmentVO){
		ULDAtAirportPK uldAtAirportPK=new ULDAtAirportPK();
		uldAtAirportPK.setAirportCode(containerAssignmentVO.getAirportCode());
		uldAtAirportPK.setCarrierId(containerAssignmentVO.getCarrierId());
		uldAtAirportPK.setCompanyCode(containerAssignmentVO.getCompanyCode());
		if("B".equals(containerAssignmentVO.getContainerType())){
		uldAtAirportPK.setUldNumber("BULK-"+(containerAssignmentVO.getPou()!=null ?containerAssignmentVO.getPou() :containerAssignmentVO.getDestination()));//IASCB-47209
		}
		else{
		uldAtAirportPK.setUldNumber(containerAssignmentVO.getContainerNumber());
		}
		return uldAtAirportPK;
	}
    /**
 * @author A-8353
 * @param mailbagVO
 * @return
 * @throws SystemException
 * @throws PersistenceException
 */
public MailbagInULDForSegmentVO getManifestInfo(MailbagVO mailbagVO) throws PersistenceException, SystemException
         {
	 return new MailbagInULDForSegment().getManifestInfoForNextSeg(mailbagVO);
}
/**
 * @author-A-8353
 * @IASCB-47333
 * @param String
 * @param String
 * @return
 * @throws SystemException
 */
public String checkMailInULDExistForNextSeg(String containerNumber,String airpotCode,String companyCode) throws SystemException{
    log.entering(CLASS,"isValidContainerForULDlevelTransfer");
    return  constructDAO().checkMailInULDExistForNextSeg(containerNumber,airpotCode,companyCode);
}

public int findFlightSegment(String companyCode, int carrierId,
		String flightNumber, long flightSequenceNumber, String pol,
		String pou) throws SystemException {
	log.entering(CLASS, "findFlightSegment");
	Collection<FlightSegmentSummaryVO> flightSegments = null;
	flightSegments = new FlightOperationsProxy().findFlightSegments(
			companyCode, carrierId, flightNumber, flightSequenceNumber);
	String segment = new StringBuilder().append(pol).append(pou)
			.toString();
	String flightSegment = null;
	int segmentSerNum = 0;
	if(flightSegments!=null && !flightSegments.isEmpty()){
	for (FlightSegmentSummaryVO segmentSummaryVO : flightSegments) {
		flightSegment = new StringBuilder()
				.append(segmentSummaryVO.getSegmentOrigin())
				.append(segmentSummaryVO.getSegmentDestination())
				.toString();
		if (flightSegment.equals(segment)) {
			segmentSerNum = segmentSummaryVO.getSegmentSerialNumber();
		}
	}
	}
	log.exiting(CLASS, "findFlightSegment");
	return segmentSerNum;
}



public void saveMailRuleConfiguration(MailRuleConfigVO mailRuleConfigVO) throws SystemException, FinderException{
	log.entering(CLASS, "saveMailRuleConfiguration");

		new MailMessageConfiguration(mailRuleConfigVO);

	log.exiting(CLASS, "saveMailRuleConfiguration");
}

/**
 * @param ContainerVO
 * @return
 * @throws SystemException
 * @author A-8672 For IASCB-46064
 */
public void updateRetainFlagForContainer(ContainerVO containerVo)
        throws SystemException, RemoteException, FinderException {
    Container.updateRetainFlag(containerVo);
    MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
	mailController.flagContainerAuditForRetaining(containerVo);
	}
/**
	 *
	 * 	Method		:	MailController.updatePostalCalendarAuditHisotry
	 *	Added by 	:	A-5219 on 22-Aug-2020
	 * 	Used for 	:
	 *	Parameters	:	@param auditVO
	 *	Parameters	:	@param calendarVO
	 *	Return type	: 	void
	 */
	private void updatePostalCalendarAuditHisotry(PostalCalendarAuditVO auditVO, USPSPostalCalendarVO calendarVO){
		StringBuilder addInfo = new StringBuilder("Postal Calendar Updated for the period ");
		addInfo.append(calendarVO.getPeriods()).append(". ");
		for (AuditFieldVO auditField : auditVO.getAuditFields()){
			if (auditField != null){
				String oldValue=(auditField.getOldValue() != null && auditField.getOldValue().trim().length() > 0)
										? auditField.getOldValue().substring(0, 11) : "";
				String newValue=(auditField.getNewValue() != null && auditField.getNewValue().trim().length() > 0)
						? auditField.getNewValue().substring(0, 11) : "";
				if(!oldValue.equals(newValue)){
					addInfo.append(auditField.getDescription()).append(": Old Value = ").append(oldValue).append(" , ");
					addInfo.append(" New Value = ").append(newValue).append(" . ");
				}
			}
		}
		auditVO.setAdditionalInformation(addInfo.substring(0, addInfo.length()-2));
	}


	/**
	 * @param mailArrivalVO
	 * @throws SystemException
	 * @throws MailTrackingBusinessException
	 * @author A-5526 Added for CRQ ICRD-233864
	 */
	public void onStatustoReadyforDelivery(MailArrivalVO mailArrivalVO)
			throws SystemException, MailTrackingBusinessException {
		Collection<ContainerDetailsVO> containerDetailsVOs = mailArrivalVO.getContainerDetails();
		Collection<MailbagVO> mailbagVOs = new ArrayList<MailbagVO>();
		if (containerDetailsVOs != null && !containerDetailsVOs.isEmpty()) {
			for (ContainerDetailsVO contVO : containerDetailsVOs) {
				if (contVO.getMailDetails() != null && !contVO.getMailDetails().isEmpty()) {
					mailbagVOs.addAll(contVO.getMailDetails());
				}
			}
		}
		// To validate mailbags before performing ready For Delivery
		Collection<MailbagVO> tempMailbagVOs = validatemailbagforRFD(mailbagVOs);
		// To perform auto-arrival of mailbags as part of ready For Delivery
		// operation
		stampautoarrival(mailArrivalVO);
		// To stamp Ready for Delivery resdits for attempted delivered mailbags
		triggerReadyfordeliveryResdit(mailArrivalVO, tempMailbagVOs, containerDetailsVOs);
		// importMRAData ; Added by A-7794 as part of ICRD-232299
		Collection<RateAuditVO> rateAuditVOs = createRateAuditVOs(mailArrivalVO.getContainerDetails(),
				MailConstantsVO.MAIL_STATUS_ARRIVED,false);
		if (rateAuditVOs != null && !rateAuditVOs.isEmpty()) {
			String importEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);
			if (importEnabled != null && importEnabled.contains("D")) {
				try {
					new MailOperationsMRAProxy().importMRAData(rateAuditVOs);
				} catch (ProxyException e) {
					throw new SystemException(e.getMessage(), e);
				}
			}
		}
	}

	/**
	 * @param mailbagVOs
	 * @throws SystemException
	 * @throws MailTrackingBusinessException
	 * @author A-5526 Added for CRQ ICRD-233864 To validate mailbags for ready
	 *         For Delivery
	 */
	private Collection<MailbagVO> validatemailbagforRFD(Collection<MailbagVO> mailbagVOs)
			throws SystemException, MailTrackingBusinessException {
		Collection<MailbagVO> tempMailbagVOs = new ArrayList<MailbagVO>();
		for (MailbagVO mailbagVO : mailbagVOs) {
			mailbagVO.setAutoArriveMail(MailConstantsVO.FLAG_YES);
			Mailbag mailbag = null;
			// Added by A-8527 for ICRD-332101 starts
			Mailbag mailbagToFindPA = null;// Added by A-8164 for ICRD-342541
											// starts
			String poaCode = null;
			MailbagPK mailbagPk = new MailbagPK();
			mailbagPk.setCompanyCode(mailbagVO.getCompanyCode());
			mailbagPk.setMailSequenceNumber(
					findMailSequenceNumber(mailbagVO.getMailbagId(), mailbagVO.getCompanyCode()));
			try {
				mailbagToFindPA = Mailbag.find(mailbagPk);
			} catch (FinderException e) {
				e.getMessage();
			}
			if (mailbagToFindPA != null && mailbagToFindPA.getPaCode() != null) {
				poaCode = mailbagToFindPA.getPaCode();
			} else {
				OfficeOfExchangeVO originOfficeOfExchangeVO;
				originOfficeOfExchangeVO = OfficeOfExchange.validateOfficeOfExchange(mailbagVO.getCompanyCode(),
						mailbagVO.getOoe());
				poaCode = originOfficeOfExchangeVO.getPoaCode();
			} // Added by A-8164 for ICRD-342541 ends
			try {
				 new MailArrival().isValidDeliveryAirport(mailbagVO.getDoe(),
						mailbagVO.getCompanyCode(), mailbagVO.getScannedPort(), null,
						MailConstantsVO.RESDIT_READYFOR_DELIVERY, poaCode,mailbagVO.getConsignmentDate());
			} catch (MailTrackingBusinessException e) {
				ErrorVO errorVo = new ErrorVO(INVALID_READYFOR_DELIVERY_AIRPORT);
				errorVo.setErrorDisplayType(ErrorDisplayType.ERROR);
				e.addError(errorVo);
				throw e;
			}
			// Added by A-8527 for ICRD-332101 Ends
			try {
				mailbag = Mailbag.findMailbag(constructMailbagPK(mailbagVO));
			} catch (FinderException e) {
				mailbag = null;
			}
			if (mailbag != null) {
				if (/*
					 * MailConstantsVO.MAIL_STATUS_ARRIVED.equals(mailbag.
					 * getLatestStatus())
					 * ||MailConstantsVO.MAIL_STATUS_TRANSFERRED.equals(mailbag.
					 * getLatestStatus()) ||
					 */
				MailConstantsVO.MAIL_STATUS_DELIVERED.equals(mailbag.getLatestStatus())
						|| (!MailConstantsVO.MAIL_STATUS_ARRIVED.equals(mailbag.getLatestStatus())
								&& mailbag.getScannedPort().equals(mailbagVO.getScannedPort()))) {// Changed
																									// by
																									// A-8164,A-8353
																									// for
																									// ICRD-332277,ICRD-338695
					ErrorVO errorVo = new ErrorVO(ERROR_ALREADY_READY_FOR_DELIVED_MARKED);
					errorVo.setErrorDisplayType(ErrorDisplayType.ERROR);
					MailTrackingBusinessException mailTrackingBusinessException = new MailTrackingBusinessException();
					mailTrackingBusinessException.addError(errorVo);
					throw mailTrackingBusinessException;
				}
				// Added by A-7540
				if (MailConstantsVO.MAIL_STATUS_ARRIVED.equals(mailbag.getLatestStatus())
						|| MailConstantsVO.OPERATION_INBOUND.equals(mailbag.getOperationalStatus())) {
					mailbagVO.setOperationalFlag(null);
				}

				Collection<MailbagHistoryVO> resditEvents = null;
				try {
					resditEvents = constructDAO().findMailbagResditEvents(mailbagVO.getCompanyCode(),
							mailbagVO.getMailbagId());
				} catch (PersistenceException e) {
					throw new SystemException(e.getErrorCode());
				}
				for (MailbagHistoryVO mailbagHistoryVO : resditEvents) {
					if (MailConstantsVO.RESDIT_READYFOR_DELIVERY.equals(mailbagHistoryVO.getEventCode())) {
						ErrorVO errorVo = new ErrorVO(ERROR_ALREADY_READY_FOR_DELIVED_RESDIT_MARKED);
						errorVo.setErrorDisplayType(ErrorDisplayType.ERROR);
						MailTrackingBusinessException mailTrackingBusinessException = new MailTrackingBusinessException();
						mailTrackingBusinessException.addError(errorVo);
						throw mailTrackingBusinessException;
					}
				}
			}
			mailbagVO.setRfdFlag(MailConstantsVO.FLAG_YES);
			mailbag.setRfdFlag(MailConstantsVO.FLAG_YES);
			MailbagVO tempMailbagVO = new MailbagVO();
			BeanHelper.copyProperties(tempMailbagVO, mailbagVO);
			tempMailbagVOs.add(tempMailbagVO);

		}

		return tempMailbagVOs;

	}

	/**
	 * @param mailArrivalVO
	 * @throws SystemException
	 * @author A-5526 Added for CRQ ICRD-233864 To perform auto-arrival of
	 *         mailbags
	 */
	private void stampautoarrival(MailArrivalVO mailArrivalVO) throws SystemException {
		
		try {
			saveArrivalDetails(mailArrivalVO);
		} catch (MailTrackingBusinessException e) {
			throw new SystemException(e.getMessage());

		}

	}

	/**
	 * @param mailArrivalVO
	 * @param mailbagVOs
	 * @param containerDetailsVOs
	 * @throws SystemException
	 * @author A-5526 Added for CRQ ICRD-233864 To stamp ready for delivery
	 *         resdits
	 */
	private void triggerReadyfordeliveryResdit(MailArrivalVO mailArrivalVO, Collection<MailbagVO> mailbagVOs,
			Collection<ContainerDetailsVO> containerDetailsVOs) throws SystemException {
		log.entering(CLASS, "triggerReadyfordeliveryResdit");
		String resditEnabled = findSystemParameterValue(MailConstantsVO.IS_RESDITMESSAGING_ENABLED);
		log.log(Log.FINE, "Resdit Enabled ", resditEnabled);
		if (MailConstantsVO.FLAG_YES.equals(resditEnabled)) {
			new ResditController().triggerReadyfordeliveryResdit(mailArrivalVO, mailbagVOs, containerDetailsVOs);
		}
		log.exiting(CLASS, "triggerReadyfordeliveryResdit");

	}

	/**
	 * @param mailbagVO
	 * @return
	 * @throws SystemException
	 * @author A-5526 Added for CRQ ICRD-233864
	 */
	private static MailbagPK constructMailbagPK(MailbagVO mailbagVO) throws SystemException {
		MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(mailbagVO.getCompanyCode());
		if (mailbagVO.getMailSequenceNumber() > 0) {
			mailbagPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
		} else {
			mailbagPK.setMailSequenceNumber(
					Mailbag.findMailBagSequenceNumberFromMailIdr(mailbagVO.getMailbagId(), mailbagVO.getCompanyCode()));
			mailbagVO.setMailSequenceNumber(mailbagPK.getMailSequenceNumber());
		}
		return mailbagPK;
	}

	/***
	 * @author A-7929
	 * @param containerVOs
	 * @param
	 * @return
	 * @throws SystemException
	 */
	public void saveContentID(Collection<ContainerVO> containerVOs) throws SystemException {

		log.entering(CLASS, "saveContentID");
		Container.saveContentID(containerVOs);

	}

	/**
	 * @param MailbagVO
	 * @return
	 * @throws SystemException
	 * @author A-8672 For ICRD-255039
	 */
	public void updateActualWeightForMailbag(MailbagVO mailbagVO) throws SystemException, RemoteException {
		Mailbag.saveActualweight(mailbagVO);
	}

	// Added by A-8464 for ICRD-243079
	public Collection<MailMonitorSummaryVO> getPerformanceMonitorDetails(MailMonitorFilterVO filterVO)
			throws SystemException, RemoteException {
		List<MailMonitorSummaryVO> MailMonitorSummaryVOs = new ArrayList<MailMonitorSummaryVO>();
		List<MailMonitorSummaryVO> serviceFailurVOs = new ArrayList<MailMonitorSummaryVO>();
		List<MailMonitorSummaryVO> ontimeDeliveryVOs = new ArrayList<MailMonitorSummaryVO>();
		List<MailMonitorSummaryVO> forceMajeureVOs = new ArrayList<MailMonitorSummaryVO>();
		try {
			serviceFailurVOs = constructDAO().getServiceFailureDetails(filterVO);
			MailMonitorSummaryVOs.addAll(serviceFailurVOs);
			ontimeDeliveryVOs = constructDAO().getOnTimePerformanceDetails(filterVO);
			MailMonitorSummaryVOs.addAll(ontimeDeliveryVOs);
			forceMajeureVOs = constructDAO().getForceMajeureCountDetails(filterVO);
			MailMonitorSummaryVOs.addAll(forceMajeureVOs);
		} catch (PersistenceException persistenceException) {
			persistenceException.getErrorCode();
			throw new SystemException(persistenceException.getErrorCode());
		}
		return MailMonitorSummaryVOs;
	}

	// Added by A-8464 for ICRD-243079
	public Page<MailbagVO> getPerformanceMonitorMailbags(MailMonitorFilterVO filterVO, String type, int pageNumber)
			throws SystemException, RemoteException {
		log.entering(CLASS, "getPerformanceMonitorMailbags");
		Page<MailbagVO> mailbagVOs = null;
		try {
			mailbagVOs = constructDAO().getPerformanceMonitorMailbags(filterVO, type, pageNumber);
		} catch (PersistenceException persistenceException) {
			persistenceException.getErrorCode();
			throw new SystemException(persistenceException.getErrorCode());
		}
		return mailbagVOs;
	}

	/**
	 * @param operationalFlightVO
	 * @return
	 * @throws SystemException
	 * @author A-8438 Added for CRQ ICRD-303640
	 */
	public MailManifestVO findMailbagManifest(OperationalFlightVO operationalFlightVO) throws SystemException {
		this.log.entering(CLASS, "findMailbagManifest");
		return MailAcceptance.findMailbagManifest(operationalFlightVO);
	}
	public MailManifestVO findMailAWBManifest(OperationalFlightVO operationalFlightVO) throws SystemException {
		this.log.entering(CLASS, "findMailAWBManifest");
		return MailAcceptance.findMailAWBManifest(operationalFlightVO);
	}
	public MailManifestVO findDSNMailbagManifest(OperationalFlightVO operationalFlightVO) throws SystemException {
		this.log.entering(CLASS, "findDSNMailbagManifest");
		return MailAcceptance.findDSNMailbagManifest(operationalFlightVO);
	}
	public MailManifestVO findDestnCatManifest(OperationalFlightVO operationalFlightVO) throws SystemException {
		this.log.entering(CLASS, "findDestnCatManifest");
		return MailAcceptance.findDestnCatManifest(operationalFlightVO);
	}
	/***
	 * @author A-8527
	 * @param validateFrmToDateRange
	 * @param mailbagVOs
	 * @param triggerPoint
	 * @return
	 * @throws SystemException
	 */
	public Collection<USPSPostalCalendarVO> validateFrmToDateRange(
			USPSPostalCalendarFilterVO uSPSPostalCalendarFilterVO) throws SystemException {
		log.entering(CLASS, "validateFrmToDateRange");
		return USPSPostalCalendar.validateFrmToDateRange(uSPSPostalCalendarFilterVO);
	}

	/***
	 * @author A-8464
	 * @param findMailbagDetailsForMailbagEnquiryHHT
	 * @param mailbagEnquiryFilterVO
	 * @return MailbagVO
	 * @throws SystemException
	 */
	public MailbagVO findMailbagDetailsForMailbagEnquiryHHT(MailbagEnquiryFilterVO mailbagEnquiryFilterVO)
			throws SystemException, RemoteException {
		log.entering(CLASS, "findMailbagDetailsForMailbagEnquiryHHT");
		MailbagVO mailbagVO = null;
		try {
			mailbagVO = constructDAO().findMailbagDetailsForMailbagEnquiryHHT(mailbagEnquiryFilterVO);
		} catch (PersistenceException persistenceException) {
			persistenceException.getErrorCode();
			throw new SystemException(persistenceException.getErrorCode());
		}
		// added by A-8353 for ICRD-333808 starts
		if (mailbagVO != null && mailbagVO.getLatestStatus() != null
				&& mailbagVO.getLatestStatus().equals(MailConstantsVO.MAIL_STATUS_ARRIVED)) {
			if (mailbagVO.getFlightNumber() != null && mailbagVO.getFlightDate() != null
					&& mailbagVO.getFlightSequenceNumber() > 0) {
				FlightFilterVO flightFilterVO = new FlightFilterVO();
				flightFilterVO.setCompanyCode(mailbagEnquiryFilterVO.getCompanyCode());
				flightFilterVO.setFlightCarrierId(mailbagVO.getCarrierId());
				flightFilterVO.setFlightNumber(mailbagVO.getFlightNumber());
				flightFilterVO.setFlightDate(mailbagVO.getFlightDate());
				flightFilterVO.setFlightSequenceNumber(mailbagVO.getFlightSequenceNumber());
				Collection<FlightValidationVO> flightValidationVOs = validateFlight(flightFilterVO);
				for (FlightValidationVO flightValidation : flightValidationVOs) {
					mailbagVO.setFlightDate(flightValidation.getSta());
				}
			}
		}
		// added by A-8353 for ICRD-333808 ends
		return mailbagVO;
	}

	/**
	 * Update the MALMST if mail sequence number already present Handle Unique
	 * Index violation
	 * 
<<< merge needed >>>
<<< difference resolved - line(s) deleted >>>
<<< merge needed >>>
<<< difference resolved - line(s) deleted >>>
	 * @param carditVO
	 * @param mailInConsignmentVO
	 * @param receptacleVO
	 * @throws SystemException
	 */
	private void checkForExistingMailbag(CarditVO carditVO, MailInConsignmentVO mailInConsignmentVO,
			CarditReceptacleVO receptacleVO) throws SystemException {
		long mailbagSequenceNumber;
		mailbagSequenceNumber = Mailbag.findMailBagSequenceNumberFromMailIdr(receptacleVO.getReceptacleId(),
				carditVO.getCompanyCode());
		if (mailbagSequenceNumber > 0) {
			mailInConsignmentVO.setOperationFlag(MailInConsignmentVO.OPERATION_FLAG_UPDATE);
		}

		Mailbag mailbag = null;
		MailbagPK mailbagPk = new MailbagPK();
		mailbagPk.setCompanyCode(mailInConsignmentVO.getCompanyCode());
		mailbagPk.setMailSequenceNumber(
				findMailSequenceNumber(mailInConsignmentVO.getMailId(), mailInConsignmentVO.getCompanyCode()));
		try {
			mailbag = Mailbag.find(mailbagPk);
		} catch (FinderException finderException) {
			finderException.getMessage();
		}
		boolean isDuplicate = false;
		if (mailbag != null) {
			try {
				isDuplicate = checkForDuplicateMailbag(mailInConsignmentVO.getCompanyCode(),
						mailInConsignmentVO.getPaCode(), mailbag);
			} catch (DuplicateMailBagsException e) {
				e.getMessage();
			}
			if (isDuplicate) {
				mailInConsignmentVO.setOperationFlag(MailInConsignmentVO.OPERATION_FLAG_INSERT);
			}
		}

	}

	/**
	 * Fetch flight capacity details of all segments in the flight Handle Unique
	 * Index violation
	 * 
<<< merge needed >>>
<<< difference resolved - line(s) deleted >>>
	 * @param flightFilterVOs
	 * @return FlightSegmentCapacitySummaryVO
	 * @throws SystemException
	 */
	public Collection<FlightSegmentCapacitySummaryVO> fetchFlightCapacityDetails(
			Collection<FlightFilterVO> flightFilterVOs) throws SystemException, RemoteException {
		Set<String> flightkeySet = new HashSet<String>();
		StringBuilder flightKey = null;
		Collection<FlightSegmentCapacitySummaryVO> segmentCapacityVos = new FlightOperationsProxy()
				.fetchFlightCapacityDetails(flightFilterVOs);

		return segmentCapacityVos;
	}

	/**
	 * @author A-7371
	 * @param uspsPostalCalendarFilterVO
	 * @return
	 * @throws SystemException
	 */
	public USPSPostalCalendarVO findInvoicPeriodDetails(USPSPostalCalendarFilterVO uspsPostalCalendarFilterVO)
			throws SystemException {
		log.entering(CLASS, "validateFrmToDateRange");
		return USPSPostalCalendar.findInvoicPeriodDetails(uspsPostalCalendarFilterVO);
	}

	/**
	 * Method : MailController.findDuplicateMailbag Added by : A-7531 on
	 * 16-May-2019 Used for : Parameters : @param companyCode Parameters
	 * : @param mailBagId Parameters : @return Return type :
	 * Collection<MailbagHistoryVO>
	 * 
	 * @throws SystemException
	 * @throws PersistenceException
	 */
	public ArrayList<MailbagVO> findDuplicateMailbag(String companyCode, String mailBagId) throws SystemException {
		// TODO Auto-generated method stub
		log.entering(CLASS, "findDuplicateMailbag");
		return Mailbag.findDuplicateMailbag(companyCode, mailBagId);
	}

	/**
	 *
	 * Method : MailController.getRunnerFlightVOForContainerFilter Added by :
	 * A-7414 on 01-Jul-2019 Parameters : @param runnerFlightVO Parameters
	 * : @return Return type : RunnerFlightVO
	 */
	private RunnerFlightVO getRunnerFlightVOForContainerFilter(RunnerFlightVO runnerFlightVO) {
		log.entering(CLASS, "getRunnerFlightVOForContainerFilter");
		RunnerFlightVO runnerFlightVoForContainer = new RunnerFlightVO();
		runnerFlightVoForContainer.setCompanyCode(runnerFlightVO.getCompanyCode());
		runnerFlightVoForContainer.setCarrierCode(runnerFlightVO.getCarrierCode());
		runnerFlightVoForContainer.setCarrierId(runnerFlightVO.getCarrierId());
		runnerFlightVoForContainer.setFlightNumber(runnerFlightVO.getFlightNumber());
		runnerFlightVoForContainer.setFlightSequenceNumber(-1);
		runnerFlightVoForContainer.setLegSerialNumber(runnerFlightVO.getLegSerialNumber());
		runnerFlightVoForContainer.setAirportCode(runnerFlightVO.getAirportCode());
		log.exiting(CLASS, "getRunnerFlightVOForContainerFilter");
		return runnerFlightVoForContainer;
	}

	/**
	 * @author A-7540
	 * @param scannedMailDetailsVO
	 * @return
	 * @throws SystemException
	 */
	public Collection<RateAuditVO> createRateAuditVOs(ScannedMailDetailsVO scannedMailDetailsVO)
			throws SystemException {
		RateAuditVO rateAuditVO = new RateAuditVO();
		Collection<RateAuditVO> rateAuditVOs = new ArrayList<RateAuditVO>();
		MailbagVO mailbagVO = null;
		if (scannedMailDetailsVO.getMailDetails() != null && scannedMailDetailsVO.getMailDetails().size() > 0) {
			mailbagVO = scannedMailDetailsVO.getMailDetails().iterator().next();
		}
		rateAuditVO.setCompanyCode(mailbagVO.getCompanyCode());
		rateAuditVO.setAutoArrivalFlag(MailConstantsVO.FLAG_YES);
		Collection<RateAuditDetailsVO>rateAuditDetails = new ArrayList<>();
		RateAuditDetailsVO rateAuditDetailsVO = new RateAuditDetailsVO();
		rateAuditDetailsVO.setSource(MailConstantsVO.MAIL_STATUS_TRANSFERRED);
		rateAuditDetails.add(rateAuditDetailsVO);
		rateAuditVO.setRateAuditDetails(rateAuditDetails);
		rateAuditVO.setScannedDate(mailbagVO.getScannedDate());
		if (mailbagVO.isDeliveryNeeded()) {
			rateAuditVO.setMailStatus(mailbagVO.getMailbagDataSource());
		} else {
			rateAuditVO.setMailStatus(scannedMailDetailsVO.getProcessPoint());
		}

		rateAuditVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
		rateAuditVOs.add(rateAuditVO);
		return rateAuditVOs;

	}

	/**
	 *
	 * Method : MailController.isUSPSMailbag Added by : A-8061 on 08-Aug-2019
	 * Used for : ICRD-341146 Parameters : @param mailBagVO Parameters : @return
	 * Parameters : @throws SystemException Return type : Boolean
	 */
	public Boolean isUSPSMailbag(MailbagVO mailBagVO) throws SystemException {

		String paCodeInt = null;
		String paCodeDom = null;

		paCodeInt = findSystemParameterValue(USPS_INTERNATIONAL_PA);
		paCodeDom = findSystemParameterValue(USPS_DOMESTIC_PA);

		return ((paCodeInt != null && paCodeInt.equals(mailBagVO.getPaCode()))
				|| (paCodeDom != null && paCodeDom.equals(mailBagVO.getPaCode())));

	}

	/**
	 *
	 * Method : MailController.findStationParameterByCode Added by : U-1307 on
	 * 16-Aug-2019 Used for : Finding station parameters Parameters : @param
	 * companyCode Parameters : @param stationCode Parameters : @param
	 * parameterCodes Parameters : @return Parameters : @throws SystemException
	 * Return type : Map<String,String>
	 */
	public Map<String, String> findStationParametersByCode(String companyCode, String stationCode,
			Collection<String> parameterCodes) throws SystemException {
		Map<String, String> stationParameters = null;
		try {
			stationParameters = new SharedAreaProxy().findStationParametersByCode(companyCode, stationCode,
					parameterCodes);
		} catch (SystemException e) {
			log.log(Log.FINE, "Exception while finding station parameters ", e.getMessage());
		}
		return stationParameters;
	}
	
	/**
	 * 
	 * 	Method		:	MailController.updateMailULDDetailsFromMHS
	 *	Added by 	:	A-8164 on 15-Feb-2021
	 * 	Used for 	:
	 *	Parameters	:	@param storageUnitCheckinVO
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	void
	 */
	public boolean updateMailULDDetailsFromMHS(StorageUnitCheckinVO storageUnitCheckinVO)
			 throws SystemException	{
		boolean isUpdated =  false;
		ContainerAssignmentVO latestContainerAssignmentVO = 
				findLatestContainerAssignment(storageUnitCheckinVO.getStorageUnitCode());
		if(Objects.nonNull(latestContainerAssignmentVO)){
			ContainerPK containerPk = new ContainerPK();
			Container container = null;
			containerPk.setContainerNumber(storageUnitCheckinVO.getStorageUnitCode());
			containerPk.setAssignmentPort(storageUnitCheckinVO.getAirportCode());
			containerPk.setCarrierId(latestContainerAssignmentVO.getCarrierId());
			containerPk.setFlightNumber(latestContainerAssignmentVO.getFlightNumber());
			containerPk.setFlightSequenceNumber(latestContainerAssignmentVO.getFlightSequenceNumber());
			containerPk.setLegSerialNumber(latestContainerAssignmentVO.getLegSerialNumber());
			containerPk.setCompanyCode(storageUnitCheckinVO.getCompanyCode());
			try {
				container = Container.find(containerPk);
				if (container != null) {
					isUpdated = true;
					container.setActualWeight(
							new Measure(UnitConstants.WEIGHT,storageUnitCheckinVO.getWeight()).getSystemValue());
					if(Objects.nonNull(storageUnitCheckinVO.getAdditionalInfo()) && !storageUnitCheckinVO.getAdditionalInfo().isEmpty()){
						if(Objects.nonNull(storageUnitCheckinVO.getAdditionalInfo().get(StorageUnitCheckinVO.ADDITIONAL_REMARKS))){
							container.setRemarks(storageUnitCheckinVO.getAdditionalInfo()
									.get(StorageUnitCheckinVO.ADDITIONAL_REMARKS));
						}
						if(Objects.nonNull(storageUnitCheckinVO.getAdditionalInfo().get(StorageUnitCheckinVO.ULD_HEIGHT))){
							container.setUldHeight(Double.parseDouble(storageUnitCheckinVO.getAdditionalInfo()
									.get(StorageUnitCheckinVO.ULD_HEIGHT))); 
						}			
					}
				}
			} catch (FinderException ex) {
				throw new SystemException(ex.getErrorCode(), ex);
			}
		}
		return isUpdated;
	}

	public MailboxIdVO findMailBoxId(MailboxIdVO mailboxIdVO) throws SystemException, FinderException {

		log.entering(CLASS, "findMailBoxId");
		MailBoxIdPk mailboxidpk = new MailBoxIdPk();
		LogonAttributes logonattributes = new LogonAttributes();
		MailBoxId mailboxId = null;
		mailboxidpk.setMailboxCode(mailboxIdVO.getMailboxID());
		mailboxidpk.setCompanyCode(mailboxIdVO.getCompanyCode());
		MailboxIdVO mailboxidVO = new MailboxIdVO();
		MailEventPK maileventPK = new MailEventPK();
		try {
			mailboxId = MailBoxId.find(mailboxidpk);
			mailboxidVO.setMailboxName(mailboxId.getMailboxDescription());
			mailboxidVO.setOwnerCode(mailboxId.getOwnerCode());
			mailboxidVO.setResditTriggerPeriod(mailboxId.getResditTriggerPeriod());
			if(MailConstantsVO.FLAG_YES.equals(mailboxId.getMsgEventLocationNeeded())){
				mailboxidVO.setMsgEventLocationNeeded(true);
			}else{
				mailboxidVO.setMsgEventLocationNeeded(false);
			}
			if(MailConstantsVO.FLAG_YES.equals(mailboxId.getPartialResdit())){
				mailboxidVO.setPartialResdit(true);
			}
			else{
				mailboxidVO.setPartialResdit(false);
			}
			mailboxidVO.setResditversion(mailboxId.getResditversion());
			mailboxidVO.setMessagingEnabled(mailboxId.getMessagingEnabled());
			mailboxidVO.setMailboxStatus(mailboxId.getMailboxStatus());
			mailboxidVO.setMailboxOwner(mailboxId.getMailboxOwner());
			mailboxidVO.setRemarks(mailboxId.getRemarks());
			if(("P").equals(mailboxidVO.getMessagingEnabled())){
				maileventPK.setCompanyCode(mailboxIdVO.getCompanyCode());
				maileventPK.setMailboxId(mailboxIdVO.getMailboxID());
				mailboxidVO.setMailEventVOs(constructDAO().findMailEvent(maileventPK));
			}
		} catch (FinderException finderException) {
			mailboxidVO=null;
		}
		log.exiting(CLASS, "findMailBoxId");
		return mailboxidVO;
	}

	public void saveMailboxId(MailboxIdVO mailboxIdVO) throws SystemException, FinderException{
		log.entering(CLASS, "saveMailboxId");
		try {
			MailBoxId mailboxid = null;
			mailboxid = MailBoxId.find(
					mailboxIdVO.getCompanyCode(),
					mailboxIdVO.getMailboxID());
			mailboxid.update(mailboxIdVO);
		}
		catch (FinderException finderException) {
			new MailBoxId(mailboxIdVO);
		}
		log.exiting(CLASS, "saveMailboxId");
	}
	
	@Advice(name = "mail.operations.insertOrUpdateAuditDetailsForCardit", phase = Phase.POST_INVOKE)
	public void insertOrUpdateAuditDetailsForCardit(CarditVO carditVO) {
		log.entering(CLASS, "insertOrUpdateAuditDetailsForCardit");
		log.exiting(CLASS, "insertOrUpdateAuditDetailsForCardit");
	}
	@Advice(name = "mail.operations.flagMailbagAuditForResdit", phase = Phase.POST_INVOKE)
	public void flagMailbagAuditForResdit(ResditEventVO resditEventVO, ConsignmentInformationVO consignVO,
			ReceptacleInformationVO receptacleInformationVO) throws SystemException {
		log.entering(CLASS, "auditCarditCancellation");
		log.exiting(CLASS, "auditCarditCancellation");
	}

	/**
	 *
	 * 	Method		:	MailController.createAutoAttachAWBJobSchedule
	 *	Added by 	:	U-1467 on 23-Sep-2020
	 * 	Used for 	:	IASCB-72629
	 *	Parameters	:	@param autoAttachAWBJobScheduleVO
	 *	Parameters	:	@throws SystemException
	 *	Return type	: 	void
	 */
    public void createAutoAttachAWBJobSchedule(AutoAttachAWBJobScheduleVO autoAttachAWBJobScheduleVO) throws SystemException {
        if (isNotNullAndEmpty(autoAttachAWBJobScheduleVO.getActualTimeOfDeparture()) && !isScheduleExistsForAutoAttachAWB(autoAttachAWBJobScheduleVO)) {
            LocalDate actualTimeOfDeparture = getLocalDate(autoAttachAWBJobScheduleVO.getPol(), autoAttachAWBJobScheduleVO.getActualTimeOfDeparture(), true);
            LocalDate startTime = new LocalDate(autoAttachAWBJobScheduleVO.getPol(), Location.ARP, actualTimeOfDeparture, true);
            String minimumTime = "0";
            Collection<String> parameters = new ArrayList<>();
            parameters.add(MailConstantsVO.AUTO_ATTACH_AWB_MINIMUM_DURATION);
            Map<String, String> parameterMap = new SharedAreaProxy().findAirportParametersByCode(autoAttachAWBJobScheduleVO.getCompanyCode(), autoAttachAWBJobScheduleVO.getPol(), parameters);
            if (parameterMap != null && parameterMap.size() > 0) {
                minimumTime = parameterMap.get(MailConstantsVO.AUTO_ATTACH_AWB_MINIMUM_DURATION);
            }
            startTime.addMinutes(Integer.parseInt(minimumTime));
            autoAttachAWBJobScheduleVO.setStartTime(startTime);
            LocalDate endTime = new LocalDate(autoAttachAWBJobScheduleVO.getPol(), Location.ARP, actualTimeOfDeparture, true);
            endTime.addMinutes(Integer.parseInt(minimumTime)+30);
            autoAttachAWBJobScheduleVO.setEndTime(endTime);
            autoAttachAWBJobScheduleVO.setJobName(AutoAttachAWBJobScheduleVO.MAL_AUTO_ATTACH_AWB_JOB_NAME);
            autoAttachAWBJobScheduleVO.setRetryCount(2);
            autoAttachAWBJobScheduleVO.setRetryDelay(3);
            try {
                SchedulerAgent.getInstance().createScheduleForJob(autoAttachAWBJobScheduleVO);
            } catch (JobSchedulerException e) {
                throw new SystemException(e.getErrors());
            }
        }
    }
    /**
     *
     * 	Method		:	MailController.isScheduleExistsForAutoAttachAWB
     *	Added by 	:	U-1467 on 23-Sep-2020
     * 	Used for 	:	IASCB-72629
     *	Parameters	:	@param autoAttachAWBJobScheduleVO
     *	Parameters	:	@return
     *	Return type	: 	boolean
     */
    private boolean isScheduleExistsForAutoAttachAWB(AutoAttachAWBJobScheduleVO autoAttachAWBJobScheduleVO) {
        Collection<ScheduleVO> scheduleVOs = null;
        ScheduleVO scheduleVO = constructScheduleVO(autoAttachAWBJobScheduleVO);
        try {
            scheduleVOs = SchedulerAgent.getInstance().findExistingSchedulesForJob(scheduleVO);
        } catch (RemoteException | SystemException e) {
            log.log(Log.FINE, e.getMessage());
        }
        return (scheduleVOs != null && scheduleVOs.size() > 0);
    }
    /**
     *
     * 	Method		:	MailController.constructScheduleVO
     *	Added by 	:	U-1467 on 23-Sep-2020
     * 	Used for 	:	IASCB-72629
     *	Parameters	:	@param autoAttachAWBJobScheduleVO
     *	Parameters	:	@return
     *	Return type	: 	ScheduleVO
     */
    private ScheduleVO constructScheduleVO(AutoAttachAWBJobScheduleVO autoAttachAWBJobScheduleVO) {
        ScheduleVO scheduleVO = new ScheduleVO();
        scheduleVO.setOwnerId(AutoAttachAWBJobScheduleVO.MAL_AUTO_ATTACH_AWB_JOBIDR);
        scheduleVO.setCompanyCode(autoAttachAWBJobScheduleVO.getCompanyCode());
        Map<String,String> attributes = new HashMap<>();
        attributes.put(AutoAttachAWBJobScheduleVO.MAL_AUTO_ATTACH_CMPCOD, autoAttachAWBJobScheduleVO.getCompanyCode());
        attributes.put(AutoAttachAWBJobScheduleVO.MAL_AUTO_ATTACH_CARIDR, String.valueOf(autoAttachAWBJobScheduleVO.getCarrierId()));
        attributes.put(AutoAttachAWBJobScheduleVO.MAL_AUTO_ATTACH_CARCOD, autoAttachAWBJobScheduleVO.getCarrierCode());
        attributes.put(AutoAttachAWBJobScheduleVO.MAL_AUTO_ATTACH_FLTNUM, autoAttachAWBJobScheduleVO.getFlightNumber());
        attributes.put(AutoAttachAWBJobScheduleVO.MAL_AUTO_ATTACH_FLTSEQNUM, String.valueOf(autoAttachAWBJobScheduleVO.getFlightSequenceNumber()));
        attributes.put(AutoAttachAWBJobScheduleVO.MAL_AUTO_ATTACH_POL, autoAttachAWBJobScheduleVO.getPol());
        attributes.put(AutoAttachAWBJobScheduleVO.MAL_AUTO_ATTACH_ATD, autoAttachAWBJobScheduleVO.getActualTimeOfDeparture());
        scheduleVO.setAttributes(attributes);
        return scheduleVO;
    }
    /**
     *
     * @param transferManifestVO
     * @return
     * @throws SystemException
     */
    public Collection<ConsignmentDocumentVO> findTransferManifestConsignmentDetails(TransferManifestVO transferManifestVO) throws SystemException{
    	return constructDAO().findTransferManifestConsignmentDetails(transferManifestVO);

    }
/**
* @param consignmentNumber
* @param companyCode
* @return
* @throws FinderException
* @throws SystemException
* @throws PersistenceException
	 * @author A-9084
	 */
	public ConsignmentDocumentVO  findConsignmentScreeningDetails(
			String consignmentNumber, String companyCode,String poaCode) throws FinderException, SystemException, PersistenceException {
		log.entering(CLASS, "findConsignmentScreeningDetails");

		return constructDAO().findConsignmentScreeningDetails(consignmentNumber,companyCode,poaCode);

	}
	public void createMailbagAuditForResdit(ResditEventVO resditEventVO, ConsignmentInformationVO consignVO,
			ReceptacleInformationVO receptacleInformationVO) throws SystemException {
		MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
			mailController.flagMailbagAuditForResdit(resditEventVO,consignVO,receptacleInformationVO);

	}
	/**
	 * @author A-8353
	 * @param mailbagVO
	 * @param toContainerVO
	 * @param logonAttributes
	 * @return
	 * @throws SystemException
	 */
	private  String  checkForMailBagTransferStatus(MailbagVO mailbagVO,ContainerVO toContainerVO,LogonAttributes logonAttributes) throws SystemException {
	String  transferStatus=null;

	if(toContainerVO.getCarrierCode()!=null &&toContainerVO.getCarrierCode().trim().length()>0
		&&mailbagVO.getCarrierCode()!=null&&mailbagVO.getCarrierCode().trim().length()>0 ){
		 boolean isFomCarrierCodePartner=checkIfPartnerCarrier(logonAttributes.getAirportCode(),mailbagVO.getCarrierCode());
		 boolean isToCarrierCodePartner=checkIfPartnerCarrier(logonAttributes.getAirportCode(),toContainerVO.getCarrierCode());
		if(isFomCarrierCodePartner
				&&isToCarrierCodePartner){
			transferStatus=MailConstantsVO.MAIL_STATUS_ASSIGNED;
			mailbagVO.setMailStatus(MailConstantsVO.MAIL_STATUS_ASSIGNED);
		}
		else if(!isFomCarrierCodePartner
				&&isToCarrierCodePartner){
			transferStatus=MailConstantsVO.TRANSFER_IN;
			mailbagVO.setMailStatus(MailConstantsVO.MAIL_STATUS_HNDRCV);
		}
		else {
			transferStatus=MailConstantsVO.TRANSFER_OUT;
			mailbagVO.setMailStatus(MailConstantsVO.MAIL_STATUS_TRANSFERRED);
		}
		if(toContainerVO.isFoundTransfer()&&mailbagVO.getTransferFromCarrier()!=null&&mailbagVO.getTransferFromCarrier().trim().length()>0
			&&!checkIfPartnerCarrier(logonAttributes.getAirportCode(),mailbagVO.getTransferFromCarrier())){
			transferStatus=MailConstantsVO.TRANSFER_IN;
			mailbagVO.setMailStatus(MailConstantsVO.MAIL_STATUS_HNDRCV);
		}
	}
	return transferStatus;
	}
	/**
	 * @author A-8353
	 * @param toCarrierCode
	 * @return
	 */
	private boolean checkForContainerTransferOutStatus(String toCarrierCode){
		boolean isTransferOutOperation=false;
		LogonAttributes logonAttributes=null;
		try {
			 logonAttributes = ContextUtils.getSecurityContext()
					.getLogonAttributesVO();
		} catch (SystemException e) {
			log.log(Log.INFO,"");
		}
	if(toCarrierCode!=null && toCarrierCode.trim().length()>0){
		boolean isToCarrierCodePartner=true;
	 try {
		 isToCarrierCodePartner=checkIfPartnerCarrier(logonAttributes.getAirportCode(),toCarrierCode);
	} catch (SystemException e){
		e.getMessage();
	}
	 if(!isToCarrierCodePartner){
		 isTransferOutOperation=true;
		 return isTransferOutOperation;
	 }
   }
	return isTransferOutOperation;
 }
	/**
	 * @author A-8893
	 * @param TransferManifestVO
	 * @throws SystemException
	 */
	public void saveTransferFromManifest(TransferManifestVO transferManifestVO) throws SystemException, RemoteException, InvalidFlightSegmentException, CapacityBookingProxyException, MailBookingException, MailTrackingBusinessException{

		ContainerVO containerVO =constructContainerVO(transferManifestVO);
	    MailbagPK mailbagPK =new MailbagPK();
	    mailbagPK.setCompanyCode(transferManifestVO.getCompanyCode());
	    mailbagPK.setMailSequenceNumber(transferManifestVO.getMailsequenceNumber());
	   Mailbag mailbag=new Mailbag();
	   try {
		mailbag =Mailbag.find(mailbagPK);
	} catch (FinderException e) {
		log.log(Log.INFO,e.getMessage());
	}
	  MailbagVO mailbagvo= populateMailbagVofromMailbag(mailbag,transferManifestVO);
	  Collection<MailbagVO>mailbagvos=new ArrayList<>();
	  mailbagvos.add(mailbagvo);
	  if(mailbagvo.getOperationalStatus().equals("O")){
		  try {

			transferMailAtExport(mailbagvos,containerVO,"N");
		} catch (FlightClosedException e) {
			e.getMessage();
		}
	  }
	  else {
		  transferMail(null,mailbagvos,containerVO,null);
	  }
	  if(mailbagvo.getMailSequenceNumber()>0){
 		 String transferManifestId =null;
 		 try {
				transferManifestId= constructDAO().findTransferManifestId(mailbagvo.getCompanyCode(), mailbagvo.getMailSequenceNumber());
			} catch (PersistenceException e) {
				e.getMessage();
			}
 		if (transferManifestId!=null && transferManifestId.trim().length()>0){
 			  TransferManifestDSN transferManifestDSN=null;
 			  TransferManifestDSNPK transferManifestDSNPK=new TransferManifestDSNPK();
 			  transferManifestDSNPK.setCompanyCode(mailbagvo.getCompanyCode());
 			  transferManifestDSNPK.setTransferManifestId(transferManifestId);
 			  transferManifestDSNPK.setMailSequenceNumber(mailbagvo.getMailSequenceNumber());
 			  try {
					transferManifestDSN=TransferManifestDSN.find(transferManifestDSNPK);
				} catch (FinderException e) {
					e.getMessage();
				}
 			if (transferManifestDSN!=null){
 				transferManifestDSN.setTransferStatus("TRFEND");
 			}
 		}
 	}
	  TransferManifestPK transferManifestPK=new TransferManifestPK();
	  transferManifestPK.setCompanyCode(transferManifestVO.getCompanyCode());
	  transferManifestPK.setTransferManifestId(transferManifestVO.getTransferManifestId());
	  TransferManifest trasferManifest=new TransferManifest();
	  try {
			 trasferManifest=TransferManifest.find(transferManifestPK);
		} catch (FinderException e) {
			log.log(Log.INFO,e.getMessage());
		}
		trasferManifest.setTransferStatus("TRFEND");
		LocalDate trfDate = new LocalDate(transferManifestVO.getAirPort(), Location.ARP, true);
		trasferManifest.setTransferDate(trfDate);
	}
	 private void updateTransferOutDetailsForHistory(MailbagVO mailbagVO,TransferManifestVO transferManifestVO) {
		 LogonAttributes logonAttributes = null;
			try {
				logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
			} catch (SystemException e) {
				log.log(Log.INFO,e.getMessage());
			}
		 mailbagVO.setCarrierCode(transferManifestVO.getTransferredToCarrierCode());
		 if(mailbagVO.getScannedUser()==null) {
		   mailbagVO.setScannedUser(logonAttributes.getUserId());
		 }
	 }
	 private MailbagVO populateMailbagVofromMailbag(Mailbag mailbag,TransferManifestVO transferManifestVO){
			MailbagVO mailbagVO=new MailbagVO();
			mailbagVO.setMailbagId(mailbag.getMailIdr());
			mailbagVO.setMailSequenceNumber(mailbag.getMailbagPK().getMailSequenceNumber());
			mailbagVO.setCompanyCode(mailbag.getMailbagPK().getCompanyCode());
			mailbagVO.setOperationalStatus(mailbag.getOperationalStatus());
			mailbagVO.setPaCode(mailbag.getPaCode());
			LocalDate scanDate=new LocalDate(mailbag.getScannedPort(), Location.ARP, true);
			mailbagVO.setScannedDate(scanDate);
			mailbagVO.setScannedPort(mailbag.getScannedPort());
			mailbagVO.setFlightNumber(mailbag.getFlightNumber());
			mailbagVO.setFlightSequenceNumber(mailbag.getFlightSequenceNumber());
			mailbagVO.setLatestStatus(mailbag.getLatestStatus());
			mailbagVO.setSegmentSerialNumber(mailbag.getSegmentSerialNumber());
			mailbagVO.setMailbagSource(mailbag.getMailbagSource());
			mailbagVO.setMailClass(mailbag.getMailClass());
			mailbagVO.setPaBuiltFlag(mailbag.getPaBuiltFlag());
		mailbagVO.setMailSource(
				transferManifestVO.getTranferSource() != null ? transferManifestVO.getTranferSource() : "MTK027");
			mailbagVO.setCarrierId(mailbag.getCarrierId());
			mailbagVO.setContainerType(mailbag.getContainerType());
			if(mailbagVO.getOperationalStatus().equals("I")){
				mailbagVO.setArrivedFlag("Y");
			}
			else if(mailbagVO.getOperationalStatus().equals("O")){
			if(MailConstantsVO.BULK_TYPE.equalsIgnoreCase(mailbag.getContainerType())
	                &&mailbag.getUldNumber()!=null&&mailbag.getUldNumber().trim().length()>0) {
	               ContainerAssignmentVO containerAssignmentVO = null;
	               try {
					containerAssignmentVO=new MailController().findLatestContainerAssignment(mailbag.getUldNumber());
				} catch (SystemException e) {
					e.getMessage();
				}
	               if(containerAssignmentVO!=null&&containerAssignmentVO.getDestination()!=null){
	                   mailbagVO.setFinalDestination(containerAssignmentVO.getDestination());
	               }
	            }
			else{
				mailbagVO.setUldNumber(mailbag.getUldNumber());
			}
			}
			mailbagVO.setContainerNumber(mailbag.getUldNumber());
			mailbagVO.setWeight(new Measure(UnitConstants.MAIL_WGT,mailbag.getWeight()));
			mailbagVO.setCarrierCode(transferManifestVO.getTransferredFromCarCode());
			if(transferManifestVO.getTransferredfrmFltSeqNum()>0){
			mailbagVO.setFlightNumber(transferManifestVO.getTransferredFromFltNum());
			mailbagVO.setFlightSequenceNumber(transferManifestVO.getTransferredfrmFltSeqNum());
			mailbagVO.setSegmentSerialNumber(transferManifestVO.getTransferredfrmSegSerNum());

			}
			mailbagVO.setMailStatus(MailConstantsVO.MAIL_STATUS_TRANSFERRED);
			mailbagVO.setDoe(mailbag.getDestinationOfficeOfExchange());
			mailbagVO.setOoe(mailbag.getOrginOfficeOfExchange());
			mailbagVO.setDestination(mailbag.getDestination());
			mailbagVO.setOrigin(mailbag.getOrigin());
			mailbagVO.setMailSubclass(mailbag.getMailSubClass());
			mailbagVO.setMailCategoryCode(mailbag.getMailCategory());
			mailbagVO.setPou(mailbag.getPou());
			return mailbagVO;

		}

	private ContainerVO constructContainerVO(
			TransferManifestVO transferManifestVO) {
		 LogonAttributes logonAttributes = null;
		try {
			logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
		} catch (SystemException e) {
			log.log(Log.INFO,e.getMessage());
		}
		ContainerVO containerVO = new ContainerVO();
		AirlineValidationVO airlineValidationVO = null;

            try {
				airlineValidationVO = new SharedAirlineProxy()
				        .validateAlphaCode(transferManifestVO.getCompanyCode(),transferManifestVO.getTransferredToCarrierCode());
			} catch (Exception e) {
				log.log(Log.INFO,"");
			}

		String airportCode =  logonAttributes.getAirportCode();
		containerVO.setOwnAirlineCode(logonAttributes.getOwnAirlineCode());
		containerVO.setOwnAirlineId(logonAttributes.getOwnAirlineIdentifier());
		containerVO.setCompanyCode(transferManifestVO.getCompanyCode());
		containerVO.setCarrierCode(transferManifestVO.getTransferredToCarrierCode());
		containerVO.setAssignedUser(logonAttributes.getUserId());
		containerVO.setAssignedPort(airportCode);
		containerVO.setLastUpdateUser(logonAttributes.getUserId());
		containerVO.setOperationTime(transferManifestVO.getTransferredDate());
		if(airlineValidationVO!=null){
			containerVO.setCarrierId(airlineValidationVO.getAirlineIdentifier());
			}
		return containerVO;
	}

	/**
	 * @author A-8893
	 * @param TransferManifestVO
	 * @throws SystemException
	 */
	public void rejectTransferFromManifest(TransferManifestVO transferManifestVO) throws SystemException{
		 TransferManifestPK transferManifestPK=new TransferManifestPK();
		  transferManifestPK.setCompanyCode(transferManifestVO.getCompanyCode());
		  if(transferManifestVO.getTransferManifestId()!=null){
		  transferManifestPK.setTransferManifestId(transferManifestVO.getTransferManifestId());}
		  else{
			  String transferManifestId =null;
     		 try {
					transferManifestId= constructDAO().findTransferManifestId(transferManifestVO.getCompanyCode(), transferManifestVO.getMailsequenceNumber());
					 transferManifestPK.setTransferManifestId(transferManifestId);
				} catch (PersistenceException e) {
					log.log(Log.INFO,e);
				}
		  }
		  TransferManifest trasferManifest=new TransferManifest();


					try {
						trasferManifest=TransferManifest.find(transferManifestPK);
					} catch (Exception e) {
						log.log(Log.INFO,e.getMessage());

					}


			trasferManifest.setTransferStatus(TRANSER_STATUS_REJECT);
			 MailbagPK mailbagPK =new MailbagPK();
		    mailbagPK.setCompanyCode(transferManifestVO.getCompanyCode());
		    mailbagPK.setMailSequenceNumber(transferManifestVO.getMailsequenceNumber());
		   Mailbag mailbag=new Mailbag();
		   try {
			mailbag =Mailbag.find(mailbagPK);
		} catch (FinderException e) {
			log.log(Log.INFO,e.getMessage());
		}
		  MailbagVO mailbagvo= populateMailbagVofromMailbag(mailbag,transferManifestVO);
		  updateTransferOutDetailsForHistory(mailbagvo,transferManifestVO);
		  MailController mailController = (MailController) SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);

		  mailController.flagHistoryforTransferRejection(mailbagvo);

	}

	/**
	 * @author A-8893
	 * @param companyCode
	 * @param tranferManifestId
	 * @throws SystemException
	 */
	public List<TransferManifestVO> findTransferManifestDetailsForTransfer(
				String companyCode,String tranferManifestId)throws SystemException{
		   List<TransferManifestVO> transferManifestVO=new ArrayList<>();
		   try {
			   transferManifestVO= constructDAO().findTransferManifestDetailsForTransfer(companyCode, tranferManifestId);
			} catch (PersistenceException e) {
				e.getMessage();
			}
			return transferManifestVO;
		}
/**
	 * @author A-8353
	 * @param containerVOs
	 * @param operationalFlightVO
	 * @param containerVOsForTransferOut
	 * @param containerVOsForTransferSameCarrier
	 * @param containerVOsForTransferIn
	 * @throws SystemException
	 */
	 public void  updateContainerForTransfer(Collection<ContainerVO> containerVOs,OperationalFlightVO operationalFlightVO,
			 Collection<ContainerVO>containerVOsForTransferOut,Collection<ContainerVO> containerVOsForTransfer) throws SystemException{
		 if(containerVOs!=null &&!containerVOs.isEmpty()){
			 for(ContainerVO containerVO:containerVOs){
				 String transferStatus=null;
				 if(operationalFlightVO.getCarrierCode()!=null &&containerVO.getCarrierCode()!=null){
					  transferStatus=checkForContainerTransferStatus(containerVO.getCarrierCode(),operationalFlightVO.getCarrierCode());
				 }
				  if(MailConstantsVO.TRANSFER_OUT.equals(transferStatus)){
					  containerVOsForTransferOut.add(containerVO);
				  }
				  else if(MailConstantsVO.TRANSFER_IN.equals(transferStatus)){
					  containerVO.setHandoverReceived(true);
					  containerVOsForTransfer.add(containerVO);
				  }
				  else{
					  containerVOsForTransfer.add(containerVO);
				  }
			 }
		 }
	 }
	 /**
	  * @author A-8353
	  * @param fromCarrierCode
	  * @param toCarrierCode
	  * @return
	  * @throws SystemException
	  */
	 private  String  checkForContainerTransferStatus(String fromCarrierCode, String toCarrierCode) throws SystemException {
			String  transferStatus=null;
			LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
			if(fromCarrierCode!=null &&fromCarrierCode.trim().length()>0
				&&toCarrierCode!=null&&toCarrierCode.trim().length()>0 ){
				 boolean isFomCarrierCodePartner=checkIfPartnerCarrier(logonAttributes.getAirportCode(),fromCarrierCode);
				 boolean isToCarrierCodePartner=checkIfPartnerCarrier(logonAttributes.getAirportCode(),toCarrierCode);
				if(isFomCarrierCodePartner
						&&isToCarrierCodePartner){
					transferStatus=MailConstantsVO.MAIL_STATUS_ASSIGNED;
				}
				else if(!isFomCarrierCodePartner
						&&isToCarrierCodePartner){
					transferStatus=MailConstantsVO.TRANSFER_IN;
				}
				else {
					transferStatus=MailConstantsVO.TRANSFER_OUT;
				}
			}
			return transferStatus;
			}
	 /**
	  * @author A-8353
	  * @param containerVOs
	  * @return
	  * @throws SystemException
	  */
	 private Collection<ContainerDetailsVO> createContainerDtlsForTransfermanifest(
			 Collection<ContainerVO> containerVOs) throws SystemException {
			log.entering("MailTransfer", "createContainerDtlsForTransfermanifest");
			Collection<ContainerDetailsVO> containerDetailsColl = new ArrayList<>();
			ContainerDetailsVO containerDetails = null;
			if(containerVOs!=null&!containerVOs.isEmpty()){
				for(ContainerVO containerVO:containerVOs){
				Collection<DSNVO>dsnVOs=new ArrayList<>();
				containerDetails = new ContainerDetailsVO();
				Collection<ContainerDetailsVO> containerDetailVOs = new ArrayList<>();
				containerDetails.setCompanyCode(containerVO.getCompanyCode());
				containerDetails.setCarrierId(containerVO.getCarrierId());
				containerDetails.setFlightNumber(containerVO.getFlightNumber());
				containerDetails.setFlightSequenceNumber(containerVO.getFlightSequenceNumber());
				containerDetails.setLegSerialNumber(containerVO.getLegSerialNumber());
				containerDetails.setPol(containerVO.getPol());
				containerDetails.setContainerNumber(containerVO.getContainerNumber());
				containerDetails.setContainerType(containerVO.getType());
				containerDetailVOs.add(containerDetails);
				containerDetailVOs =new MailController().findMailbagsInContainer(containerDetailVOs);
			if(containerDetailVOs!=null&&!containerDetailVOs.isEmpty()
				&&containerDetailVOs.iterator().next().getMailDetails()!=null
				&&!containerDetailVOs.iterator().next().getMailDetails().isEmpty()){
				DSNVO dsnVo = null;
			for (MailbagVO mailbagVO : containerDetailVOs.iterator().next().getMailDetails()) {
						dsnVo = new DSNVO();
						dsnVo.setCompanyCode(mailbagVO.getCompanyCode());
						dsnVo.setOriginExchangeOffice(mailbagVO
								.getOoe());
						dsnVo.setDestinationExchangeOffice(mailbagVO
								.getDoe());
						dsnVo.setMailCategoryCode(mailbagVO.getMailCategoryCode());
						dsnVo.setBags(1);
						dsnVo.setWeight(mailbagVO.getWeight());
						dsnVo.setYear(mailbagVO.getYear());
						dsnVo.setDsn(mailbagVO.getDespatchSerialNumber());
						dsnVo.setMailSubclass(mailbagVO.getMailSubclass());
						dsnVo.setMailClass(mailbagVO.getMailClass());
						dsnVo.setContainerNumber(mailbagVO.getUldNumber());
						dsnVo.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
						dsnVOs.add(dsnVo);
				}
			}
			containerDetails.setDsnVOs(dsnVOs);
			containerDetails.setCompanyCode(containerVO.getCompanyCode());
			containerDetails.setContainerNumber(containerVO.getContainerNumber());
				containerDetailsColl.add(containerDetails);
				}
			}
			log
					.log(Log.FINE, "THE CONTAINER DETAILS CONSTRUCTED",
							containerDetails);
			return containerDetailsColl;
		}

	 public void removeFromInbound(OffloadVO offloadVo) throws SystemException, MailTrackingBusinessException{
	    	try {
				offload(offloadVo);
			} catch (FlightClosedException | FlightDepartedException | ReassignmentException | ULDDefaultsProxyException
					| CapacityBookingProxyException | MailBookingException e) {
				throw new MailTrackingBusinessException(e);
			}
	  }
	   /**
	* @param consignmentDocumentVO
	* @return
	* @throws FinderException
	* @throws SystemException
		 * @author A-9084
		 */

	public void saveConsignmentScreeningDetails(ConsignmentDocumentVO consignmentDocumentVO) throws SystemException, FinderException {
		log.entering(CLASS, "saveConsignmentScreeningDetails");

		ConsignmentDocument consignmentDocument = null;
		consignmentDocument = ConsignmentDocument.find(consignmentDocumentVO);
		consignmentDocument.updateScreeningDetails(consignmentDocumentVO);

		log.exiting(CLASS, "saveConsignmentScreeningDetails");

		}
	 /**
	  * @author A-8353
	  * @param mailbagVOs
	  * @param containerVO
	  * @throws SystemException
	  */
	public void flagHandoverReceivedAfterExportOpr(Collection<MailbagVO> mailbagVOs,
			ContainerVO containerVO) throws SystemException{
		LogonAttributes logonAttributes = null;
		containerVO.setHandoverReceived(true);
			logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
		for(MailbagVO mailbagVO:mailbagVOs){
			if(containerVO.getFlightSequenceNumber()>-1){
		       new MailbagInULDForSegment().updateHandoverReceivedCarrierForTransfer(mailbagVO,containerVO);
			}
			else{
				new MailbagInULDAtAirport().updateHandoverReceivedCarrierForTransfer(mailbagVO,containerVO,logonAttributes.getAirportCode());
			}
		   checkHistoryExistForMailbag( logonAttributes, mailbagVO);
	  }
		MailController mailController = (MailController)SpringAdapter.getInstance().getBean(MAIL_CONTROLLER_BEAN);
		mailController.flagHistoryForMailTransferAtExport(mailbagVOs, containerVO);
		flagResditsForMailbagTransfer(mailbagVOs, containerVO);
		Collection<RateAuditVO> rateAuditVOs = new MailController().createRateAuditVOs(containerVO,mailbagVOs,MailConstantsVO.MAIL_STATUS_TRANSFER_MAIL,false) ;
        log.log(Log.FINEST, "RateAuditVO-->", rateAuditVOs);
        if(rateAuditVOs!=null && !rateAuditVOs.isEmpty()){
        	String importEnabled = findSystemParameterValue(MailConstantsVO.SYS_PARA_TRIGGER_FOR_MRAIMPORT);//Modified by A-7794 as part of ICRD-323606
	        	if(importEnabled!=null && (importEnabled.contains("M") || importEnabled.contains("D"))){
        try {
			new MailOperationsMRAProxy().importMRAData(rateAuditVOs);
		} catch (ProxyException e) {
			throw new SystemException(e.getMessage(), e);
		}
		}
        }
	}
   /**
    * @author A-8353
    * @param logonAttributes
    * @param mailbagVO
    */
	private void checkHistoryExistForMailbag(
			LogonAttributes logonAttributes,
			MailbagVO mailbagVO) {
		Collection<MailbagHistoryVO> existingMailbagHistories=null;
		Mailbag mailBag = null;
		MailbagPK mailbagPk = new MailbagPK();
		mailbagPk.setCompanyCode(mailbagVO.getCompanyCode());
		mailbagPk.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
		try {
			mailBag = Mailbag.find(mailbagPk);
		} catch (SystemException | FinderException e) {
			log.log(Log.SEVERE, "System Exception Caught");
			e.getMessage();
			log.log(Log.SEVERE, "System Exception Caught");
		}
		mailbagVO.setLatestStatus(mailBag.getLatestStatus());
		try {
			 existingMailbagHistories = Mailbag.findMailbagHistories(mailbagVO.getCompanyCode(),"", mailbagVO.getMailSequenceNumber());
		} catch (SystemException e) {
			e.getMessage();
		}
		  if(existingMailbagHistories!=null&&!existingMailbagHistories.isEmpty()){
			  for (MailbagHistoryVO mailbagHistory : existingMailbagHistories) {
				  if (logonAttributes.getAirportCode().equals(mailbagHistory.getScannedPort()) && !MailConstantsVO.FLIGHT_ARRIVAL.equals(mailbagHistory.getMailStatus())){
					  LocalDate scanDate = mailbagHistory.getScanDate();
						 mailbagVO.setScannedDate(scanDate);
						 mailbagVO.setScannedPort(logonAttributes.getAirportCode());
				  }
			  }
		  }
		   mailbagVO.setMailStatus(MailConstantsVO.MAIL_STATUS_HNDRCV);  
		}
	public MailbagVO findMailBillingStatus(MailbagVO mailbagVO) throws SystemException {
		return constructDAO().findMailbagBillingStatus(mailbagVO);
	}
	/**
	 * @author A-8353
	 * @param companyCode
	 * @param officeOfExchanges
	 * @return
	 * @throws SystemException
	 */
	public  HashMap<String,String> findAirportForOfficeOfExchange(String companyCode, Collection<String> officeOfExchanges) throws SystemException{
		log.entering(CLASS, "findPAForOfficeOfExchange");
		CacheFactory factory = CacheFactory.getInstance();  
        OfficeOfExchangeCache cache = factory
        .getCache(OfficeOfExchangeCache.ENTITY_NAME);     
        return cache.findAirportForOfficeOfExchange(companyCode,officeOfExchanges);
		}

	/**
	 * 
	 * 	Method		:	MailController.findMailEvent
	 *	Added by 	:	A-6245 on 07-Jan-2021
	 * 	Used for 	:	IASCB-87899
	 *	Parameters	:	@param mailEventVO
	 *	Parameters	:	@return
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	Collection<MailEventVO>
	 */
	public Collection<MailEventVO> findMailEvent(MailEventVO mailEventVO) throws SystemException {
		MailEventPK mailEventPK = new MailEventPK();
		mailEventPK.setCompanyCode(mailEventVO.getCompanyCode());
		mailEventPK.setMailboxId(mailEventVO.getMailboxId());
		return MailEvent.findMailEvent(mailEventPK);
	}
	/**
	 * 
	 * 	Method		:	MailController.saveUploadedForceMajeureData
	 *	Added by 	:	A-6245 on 22-Jan-2021
	 * 	Used for 	:	IASCB-83866
	 *	Parameters	:	@param fileUploadFilterVO
	 *	Parameters	:	@return
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	String
	 */
    public String saveUploadedForceMajeureData(FileUploadFilterVO fileUploadFilterVO) throws SystemException {
        String processStatus = "PE";
        try {
            processStatus = processMailDataFromExcel(fileUploadFilterVO);
        } catch (PersistenceException e) {
            log.log(Log.SEVERE, "PersistenceException Caught");
        }
        if(MailConstantsVO.OK_STATUS.equals(processStatus)) {
            return constructDAO().saveUploadedForceMajeureData(fileUploadFilterVO);
        }
        return processStatus;
    }	
	public boolean isValidDestForCarditMissingDomesticMailbag(String airportCode){
		boolean  isDestForCdtMissingDomMail=false;
		String destForCdtMissingDomMail=null;
		try {
			destForCdtMissingDomMail=findSystemParameterValue(DEST_FOR_CDT_MISSING_DOM_MAL);
		} catch (SystemException e) {
		   e.getMessage();
		}
			if(destForCdtMissingDomMail!=null &&!"NA".equals(destForCdtMissingDomMail) && airportCode!=null && destForCdtMissingDomMail.equals(airportCode)){
				isDestForCdtMissingDomMail=true;
			}
		return isDestForCdtMissingDomMail;
		}


	public void updatemailperformanceDetails(Mailbag mailbag)     {
	
		MailbagVO mailbagVO = mailbag.retrieveVO();
		MailbagInULDForSegment mailbagInULDForSegment = null;
		try{
		if(isUSPSMailbag(mailbagVO)){

			Collection<MailbagHistoryVO> mailbagHistoryVOs=mailbag.findMailbagHistories(mailbag.getMailbagPK().getCompanyCode(), null, mailbag.getMailbagPK().getMailSequenceNumber());

			if(mailbagHistoryVOs!=null && !mailbagHistoryVOs.isEmpty()){
				for(MailbagHistoryVO mailbagHistoryVO : mailbagHistoryVOs){
					if(MailConstantsVO.MAIL_STATUS_DELIVERED.equals(mailbagHistoryVO.getMailStatus())){
						mailbagVO.setScannedPort(mailbagHistoryVO.getScannedPort());
						mailbagVO.setScannedDate(mailbagHistoryVO.getScanDate());
						MailbagInULDForSegmentPK	mailbagInULDForSegmentPK = new MailbagInULDForSegmentPK();
                        mailbagInULDForSegmentPK.setCompanyCode(mailbagHistoryVO.getCompanyCode());
                        mailbagInULDForSegmentPK.setCarrierId(mailbagHistoryVO.getCarrierId()>0?mailbagHistoryVO.getCarrierId():mailbag.getCarrierId());
						mailbagInULDForSegmentPK.setFlightNumber(mailbagHistoryVO.getFlightNumber());
						mailbagInULDForSegmentPK.setFlightSequenceNumber(mailbagHistoryVO.getFlightSequenceNumber());
						mailbagInULDForSegmentPK.setSegmentSerialNumber(mailbagHistoryVO.getSegmentSerialNumber()>0?mailbagHistoryVO.getSegmentSerialNumber():mailbag.getSegmentSerialNumber());
						if(MailConstantsVO.BULK_TYPE.equals(mailbagHistoryVO.getContainerType())){
							mailbagInULDForSegmentPK.setUldNumber("BULK-"+mailbagHistoryVO.getPou());
						}
						else{
						mailbagInULDForSegmentPK.setUldNumber(mailbagHistoryVO.getContainerNumber());
						}
						mailbagInULDForSegmentPK.setMailSequenceNumber(mailbagHistoryVO.getMailSequenceNumber());
						try{
						mailbagInULDForSegment = getMailbagInULDForSegment(mailbagInULDForSegmentPK);
						}catch(FinderException finderException){
							log.log(Log.SEVERE, finderException);
						}
						break;
					}
				}
			}

			mailbagVO.setConsignmentDate(new LocalDate(LocalDate.NO_STATION, Location.NONE, mailbag.getDespatchDate(), true));
			mailbagVO.setMailServiceLevel(mailbag.getMailServiceLevel());
			new ULDForSegment().updatemailperformanceDetails(mailbagVO, mailbagInULDForSegment, mailbag);
			
		}
		
		}catch(SystemException | PersistenceException exception){
			log.log(Log.SEVERE, exception);
		}
}
	/** 	Method		:	MailController.fetchConsignmentDetailsForUpload
	 *	Added by 	:	A-6245 on 22-Dec-2020
	 * 	Used for 	:	IASCB-81526
	 *	Parameters	:	@param fileUploadFilterVO
	 *	Parameters	:	@return
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	Collection<ConsignmentDocumentVO>
	 */
		
	public Collection<ConsignmentDocumentVO> fetchConsignmentDetailsForUpload(FileUploadFilterVO fileUploadFilterVO) throws SystemException {
		return constructDAO().fetchConsignmentDetailsForUpload(fileUploadFilterVO);
	}
	/**
	 * 
	 * 	Method		:	MailController.saveMailbagHistory
	 *	Added by 	:	A-6245 on 22-Dec-2020
	 * 	Used for 	:	IASCB-81526
	 *	Parameters	:	@param mailbagHistoryVOs
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	void
	 */
	public void saveMailbagHistory(Collection<MailbagHistoryVO> mailbagHistoryVOs) throws SystemException {
		if (Objects.nonNull(mailbagHistoryVOs) && !mailbagHistoryVOs.isEmpty()) {
			for (MailbagHistoryVO mailbagHistoryVO : mailbagHistoryVOs) {
				try {
					saveMailbagHistory(mailbagHistoryVO);
				} catch (BusinessException exception) {
					throw new SystemException(exception.getMessage(),exception);
				}
			}
		}
	}
	public void saveMailbagHistory(MailbagHistoryVO mailbagHistoryVO) throws SystemException, BusinessException {
			SaveMailbagHistoryFeature saveMailbagHistoryFeature = (SaveMailbagHistoryFeature) SpringAdapter.getInstance().getBean(SaveMailbagHistoryFeatureConstants.SAVE_MAILBAG_HISTORY_FEATURE);
			saveMailbagHistoryFeature.execute(mailbagHistoryVO);
	}
	/**
	 * 
	 * 	Method		:	MailController.flagContainerAuditForDeletion
	 *	Added by 	:	A-9084 on 26-Mar-2021
	 * 	Used for 	:	IASCB-84649
	 *	Parameters	:	@param containerDetailsVO
	 *	Return type	: 	void
	 */
	
	@Advice(name = "mail.operations.flagContainerAuditForDeletion", phase = Phase.POST_INVOKE)
	public void flagContainerAuditForDeletion(ContainerDetailsVO containerDetailsVO){
		log.entering(CLASS, "flagContainerAuditForDeletion");
		log.exiting(CLASS, "flagContainerAuditForDeletion");
	}

	/**
	 * 
	 * 	Method		:	MailController.flagContainerAuditForUnassignment
	 *	Added by 	:	A-9084 on 29-Mar-2021
	 * 	Used for 	:	IASCB-84649
	 *	Parameters	:	@param containerDetailsVO
	 *	Return type	: 	void
	 */
	@Advice(name ="mail.operations.flagContainerAuditForUnassignment", phase = Phase.POST_INVOKE)
	public void flagContainerAuditForUnassignment(ContainerDetailsVO containerDetailsVO){
		log.entering(CLASS, "flagContainerAuditForUnassignment");
		log.exiting(CLASS, "flagContainerAuditForUnassignment");
	}

	/**
	 * 
	 * 	Method		:	MailController.flagContainerAuditForUnassignment
	 *	Added by 	:	A-9084 on 30-Mar-2021
	 * 	Used for 	:	IASCB-84649
	 *	Parameters	:	@param containerDetailsVO
	 *	Return type	: 	void
	 */
	@Advice(name ="mail.operations.flagContainerAuditForArrival", phase = Phase.POST_INVOKE)
	public void flagContainerAuditForArrival(MailArrivalVO mailArrivalVO) {
		log.entering(CLASS, "flagContainerAuditForArrival");
		log.exiting(CLASS, "flagContainerAuditForArrival");
		
	}

	/**
	 * 
	 * 	Method		:	MailController.reImportPABuiltMailbagsToMRA
	 *	Added by 	:	A-6245 on 12-Mar-2021
	 * 	Used for 	:	IASCB-96008
	 *	Parameters	:	@param mailbagVOs
	 *	Parameters	:	@return
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	boolean
	 */
	public boolean reImportPABuiltMailbagsToMRA(Collection<MailbagVO> mailbagVOs)
			throws SystemException {
		boolean isReImported = false;
		if (Objects.nonNull(mailbagVOs) && !mailbagVOs.isEmpty()) {
			String paListForPABuiltRate = findSystemParameterValue(PA_LIST_FOR_PA_BUILT_RATING);
			for (MailbagVO mailbagVO : mailbagVOs) {
				if ((mailbagVO.isPaBuiltFlagUpdate() || mailbagVO.isPaContainerNumberUpdate())
						&& Objects.nonNull(paListForPABuiltRate)
						&& paListForPABuiltRate.contains(mailbagVO.getPaCode())) {
					Collection<MailbagVO> mailbagVOsForPABuiltUpdate = new MailOperationsMRAProxy()
							.findMailbagsForPABuiltUpdate(mailbagVO);
					if (Objects.nonNull(mailbagVOsForPABuiltUpdate) && !mailbagVOsForPABuiltUpdate.isEmpty()) {
						new MailOperationsMRAProxy().reImportPABuiltMailbagsToMRA(mailbagVO);
						isReImported=true;
					}
				}
			}
		}
		return isReImported;
	} 
   /**
    * @author A-8353
    * @param companyCode
    * @param airportCode
    * @return
    * @throws SystemException
    */
   public  String findOfficeOfExchangeForCarditMissingDomMail(String companyCode,String airportCode) throws SystemException {
		 exchangeOfficeMap = findOfficeOfExchangeForPA(companyCode, findSystemParameterValue(USPS_DOMESTIC_PA));
			if(exchangeOfficeMap!=null && !exchangeOfficeMap.isEmpty()&& exchangeOfficeMap.containsKey(airportCode)){
				return exchangeOfficeMap.get(airportCode);
			}
			return null;
	}
   /**
	 * @param documentFilterVO
	 * @return String
	 * @throws SystemException
	 * @throws StockcontrolDefaultsProxyException
	 * @throws ProxyException 
	 * @author U-1519
	 */
	public String findAutoPopulateSubtype(
			DocumentFilterVO documentFilterVO) throws SystemException,
			StockcontrolDefaultsProxyException, ProxyException {
		log.entering(CLASS, "findNextDocumentNumber");
		return new StockcontrolDefaultsProxy()
				.findAutoPopulateSubtype(documentFilterVO);
	}
  /**
	 * @author A-8353
	 * @param mailbagVOs
	 * @throws SystemException
	 * @throws RemoteException
	 */
	 public void updateOriginAndDestinationForMailbag(Collection<MailbagVO> mailbagVOs)
	            throws SystemException {
		 for(MailbagVO mailbagVO:mailbagVOs){
	        Mailbag.updateOriginAndDestinationForMailbag(mailbagVO);
		 }
		if (isImportToMRAEnabled()) {
					reImportMailbagsToMRA(mailbagVOs);
		}
		
	   }
	 
	 /**
		 * 
		 * 	Method		:	MailController.reImportMailbagsToMRA
		 *	Added by 	:	A-8061 on 09-Apr-2021
		 * 	Used for 	:
		 *	Parameters	:	@param mailbagVOs
		 *	Parameters	:	@throws SystemException 
		 *	Return type	: 	Collection<MailbagVO>
		 */
		private Collection<MailbagVO> reImportMailbagsToMRA(Collection<MailbagVO> mailbagVOs) throws  SystemException {
		Collection<MailbagVO> mailbagsToReimport = new ArrayList<>();
		Collection<MailbagVO> mailbagsNotImported= new ArrayList<>();
		if (Objects.nonNull(mailbagVOs) && !mailbagVOs.isEmpty()) {
			for (MailbagVO mailbagVO : mailbagVOs) {
				boolean isMailInMRA = false;
				try {
					isMailInMRA = new MailtrackingMRAProxy().isMailbagInMRA(mailbagVO.getCompanyCode(),
							mailbagVO.getMailSequenceNumber());
				} catch (ProxyException e) {
					log.log(Log.FINEST, "Exception finding mail exists in MRA " + e.getMessage());
				}
				if (isMailInMRA) {
					mailbagsToReimport.add(mailbagVO);
				}else{
					mailbagsNotImported.add(mailbagVO);
				}
			}			
			ConsignmentDocumentVO consignmentDocumentVO = constructConsignmentDocumentVO(mailbagsToReimport);
			try {
				new MailtrackingMRAProxy().importConsignmentDataToMra(consignmentDocumentVO);
			} catch (ProxyException proxyException) {
				throw new SystemException(proxyException.getErrors());
			}
		}
		return mailbagsNotImported;
	}
	/**
	 * 
	 * 	Method		:	MailController.constructConsignmentDocumentVO
	 *	Added by 	:	A-8061 on 09-Apr-2021
	 * 	Used for 	:
	 *	Parameters	:	@param mailbagVOs
	 *	Parameters	:	@return 
	 *	Return type	: 	ConsignmentDocumentVO
	 */
		private ConsignmentDocumentVO constructConsignmentDocumentVO(Collection<MailbagVO> mailbagVOs) {
		
			ConsignmentDocumentVO consignmentDocumentVO = new ConsignmentDocumentVO();
			if(mailbagVOs!=null && !mailbagVOs.isEmpty()){
				Collection<MailInConsignmentVO> mailInCondignmentVOs= new ArrayList<>();
				for(MailbagVO mailbagVO :mailbagVOs){
					MailInConsignmentVO mailInConsignmentVO = new MailInConsignmentVO();
					mailInConsignmentVO.setCompanyCode(mailbagVO.getCompanyCode());
					mailInConsignmentVO.setConsignmentNumber(mailbagVO.getConsignmentNumber()!=null?mailbagVO.getConsignmentNumber():BLANK);
					mailInConsignmentVO.setConsignmentSequenceNumber(mailbagVO.getConsignmentSequenceNumber());
					mailInConsignmentVO.setPaCode(mailbagVO.getPaCode());
					mailInConsignmentVO.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
					mailInConsignmentVO.setMailSource(isNotNullAndEmpty(mailbagVO.getTriggerForReImport())
						? mailbagVO.getTriggerForReImport() : mailbagVO.getMailSource());
					mailInCondignmentVOs.add(mailInConsignmentVO);
				}
				Page<MailInConsignmentVO> mailInConsignmentVOs = new Page<>((ArrayList<MailInConsignmentVO>)mailInCondignmentVOs,0,0,0,0,0,false);
				consignmentDocumentVO.setMailInConsignmentVOs(mailInConsignmentVOs);
				
			}
			return consignmentDocumentVO;
		}

	  public Measure calculateActualWeightForZeroWeightMailbags(MailbagVO mailbagVO) throws SystemException{
		    Measure actualWeight=null;
		    String overwriteValue=findSystemParameterValue("mailtracking.mra.defaults.overwriteweightvalue");
	    		if(mailbagVO.getWeight()!=null && mailbagVO.getMailbagId().length()==29 && Double.parseDouble(mailbagVO.getMailbagId().substring(25,29)) ==0 && overwriteValue!=null) {
					 if(mailbagVO.getWeight().getDisplayUnit().equals(overwriteValue.split(",")[0].split("=")[0])) {
						 actualWeight=new Measure(UnitConstants.WEIGHT,0.0,Double.parseDouble(overwriteValue.split(",")[0].split("=")[1]),UnitConstants.WEIGHT_UNIT_KILOGRAM);
					 }
					 if(mailbagVO.getWeight().getDisplayUnit().equals(overwriteValue.split(",")[1].split("=")[0])) {
						 actualWeight=new Measure(UnitConstants.WEIGHT,0.0,Double.parseDouble(overwriteValue.split(",")[1].split("=")[1]),UnitConstants.WEIGHT_UNIT_KILOGRAM);
					 }
				}
				if(mailbagVO.getWeight()!=null &&mailbagVO.getMailbagId().length()==12 && Double.parseDouble(mailbagVO.getMailbagId().substring(10,12)) ==0 && overwriteValue!=null) {
					 if(mailbagVO.getWeight().getDisplayUnit().equals(overwriteValue.split(",")[0].split("=")[0])) {
						 actualWeight=new Measure(UnitConstants.MAIL_WGT, Double.parseDouble(overwriteValue.split(",")[0].split("=")[1]));
					 }
					 if(mailbagVO.getWeight().getDisplayUnit().equals(overwriteValue.split(",")[1].split("=")[0])) {
						 actualWeight=new Measure(UnitConstants.MAIL_WGT, Double.parseDouble(overwriteValue.split(",")[1].split("=")[1]));
					 }
				}
	    	return actualWeight;
	    }
	  
	/**
	 * If MRA import is enabled, check if incoming mailbags can be PA Built Rated
	 * If yes, re-rate the PA Built mailbags
	 * If not, check if they exist in MRA, and re-import to MRA 
	 * Return mailbags not imported, to be imported if needed 
	 * @param mailbagVOs
	 * @return
	 * @throws SystemException
	 */
	public Collection<MailbagVO> validateAndReImportMailbagsToMRA(Collection<MailbagVO> mailbagVOs) throws SystemException {
		boolean isReImported = false;
		Collection<MailbagVO> mailbagsNotReImported = null;
		if (isImportToMRAEnabled()) {
			isReImported = reImportPABuiltMailbagsToMRA(mailbagVOs);
			if (!isReImported) {
				mailbagsNotReImported = reImportMailbagsToMRA(mailbagVOs);
			}
		}
		return mailbagsNotReImported;
	}
	
	public static boolean isImportToMRAEnabled() throws SystemException {
		String importToMRAEnabled = new MailController().findSystemParameterValue(MailConstantsVO.IMPORTMAILS_TO_MRA_SYSPAR);
		return isNotNullAndEmpty(importToMRAEnabled) && MailConstantsVO.FLAG_YES.equals(importToMRAEnabled);
	}
	
	public long insertMailbagAndHistory(MailbagVO mailbagVO)
			 throws SystemException{
		Mailbag mailbag = new Mailbag(mailbagVO);
		MailbagHistoryVO historyVO = constructMailHistoryVO(mailbagVO);
		new MailbagHistory(mailbag.getMailbagPK(),historyVO);
		return mailbag.getMailbagPK().getMailSequenceNumber();
	}
	
	
	private MailbagHistoryVO constructMailHistoryVO(MailbagVO mailbagVO) {
    	MailbagHistoryVO mailbagHistoryVO = new MailbagHistoryVO();
    	mailbagHistoryVO.setCompanyCode(mailbagVO.getCompanyCode());
    	mailbagHistoryVO.setMailStatus(mailbagVO.getLatestStatus());
    	mailbagHistoryVO.setScannedPort(mailbagVO.getScannedPort());
    	mailbagHistoryVO.setScanUser(mailbagVO.getScannedUser());
    	mailbagHistoryVO.setScanDate(mailbagVO.getScannedDate());
   		mailbagHistoryVO.setScanUser(mailbagVO.getScannedUser());
   		mailbagHistoryVO.setMailSource(mailbagVO.getMailSource());
    	mailbagHistoryVO.setMailClass(mailbagVO.getMailClass());
    	return mailbagHistoryVO;
    }

	
	@Advice(name ="mail.operations.flagContainerAuditForAcquital", phase = Phase.POST_INVOKE)
	public void flagContainerAuditForAcquital(ContainerDetailsVO containerDetailsVO) {
		log.entering(CLASS, "flagContainerAuditForAcquital");
		log.exiting(CLASS, "flagContainerAuditForAcquital");
		
	}
	
	@Advice(name ="mail.operations.flagContainerAuditForRetaining", phase = Phase.POST_INVOKE)
	public void flagContainerAuditForRetaining(ContainerVO containerVO) {
		log.entering(CLASS, "flagContainerAuditForRetaining");
		log.exiting(CLASS, "flagContainerAuditForRetaining");
		
	}  
//Added by A-8893
	public  void releaseContainers(Collection<ContainerVO> containerVOs)
			throws SystemException {

   if (containerVOs != null &&  !containerVOs.isEmpty()) {
					 
        for (ContainerVO containerVO : containerVOs) {
            
						 ContainerPK containerPK = new ContainerPK();
						 containerPK.setCompanyCode(containerVO.getCompanyCode());
						 containerPK.setCarrierId(containerVO.getCarrierId());
						 containerPK.setFlightNumber(containerVO.getFlightNumber());
                containerPK.setFlightSequenceNumber(containerVO.getFlightSequenceNumber());
						 containerPK.setAssignmentPort(containerVO.getPol());
						 containerPK.setContainerNumber(containerVO.getContainerNumber());
						 containerPK.setLegSerialNumber(Container
								 .findFlightLegSerialNumber(containerVO));
						 Container containerToUpdate = null;
                try {
							 containerToUpdate = Container.find(containerPK);
							 containerToUpdate.setTransitFlag(MailConstantsVO.FLAG_NO);
							} catch (FinderException finderException) {
								throw new SystemException(finderException.getErrorCode(), finderException);
							}
							
							
   
   }
   }
   }

	/**
	 * Added for CRQ IASCB-74722
	 * @author A-8893
	 * @param mailbagVO
	 * @throws SystemException 
	 */
	public void uploadDocumentsToRepository(MailbagVO mailbagVO) throws SystemException {
		 this.log.entering("MAILCONTROLLER CONTROLLER", "uploadDocumentsToRepository");
		    Collection<DocumentRepositoryMasterVO> documentRepositoryMasterVos =populatedocumentRepositoryMasterVO(mailbagVO);
			 try {
		    	Proxy.getInstance().get(DocumentRepositoryProxy.class)
		        .uploadMultipleDocumentsToRepository(documentRepositoryMasterVos);
		    }catch (ProxyException proxyException) {
		      this.log.log(3, PROXYEXCEPTION,proxyException);
		    }		    
	}
	
	
	private Collection<DocumentRepositoryMasterVO>  populatedocumentRepositoryMasterVO(MailbagVO mailbagVO) throws SystemException{
		DocumentRepositoryMasterVO documentRepositoryMasterVO =new DocumentRepositoryMasterVO();
	    Collection<DocumentRepositoryMasterVO> documentRepositoryMasterVos = new ArrayList<>();
		LogonAttributes logonAttributes= ContextUtils.getSecurityContext()
					.getLogonAttributesVO();
		
		String createdUser=mailbagVO.getAttachments().iterator().next().getUploadUser()!=null ? mailbagVO.getAttachments().iterator().next().getUploadUser():logonAttributes.getUserId();
		
		 documentRepositoryMasterVO.setCreatedUser(createdUser);
	      documentRepositoryMasterVO.setCreatedTime(new LocalDate("***", Location.NONE, true));
	documentRepositoryMasterVO.setCompanyCode(mailbagVO.getCompanyCode());
    documentRepositoryMasterVO.setAirportCode(logonAttributes.getAirportCode());
    documentRepositoryMasterVO.setPurpose("DMG");
	  documentRepositoryMasterVO.setDocumentType("MAL");
    documentRepositoryMasterVO.setDocumentValue(mailbagVO.getMailbagId());
    documentRepositoryMasterVO.setRemarks("Attachments for Damaged Maibag");
    documentRepositoryMasterVO.setOperationFlag("I");
    List<DocumentRepositoryAttachmentVO> documentRepositoryAttachmentVOs = null;
      documentRepositoryAttachmentVOs = convetImagesToDocumentRepositoryAttachmentVOs(mailbagVO);
      documentRepositoryMasterVO.setAttachments(documentRepositoryAttachmentVOs);
      documentRepositoryMasterVos.add(documentRepositoryMasterVO);
    return documentRepositoryMasterVos;
	}
	
		
		/**
		 * Added for CRQ IASCB-74722
		 * @author A-8893
		 * @param mailbagVO
		 * @return
		 * @throws SystemException
		 */
		public static List<DocumentRepositoryAttachmentVO> convetImagesToDocumentRepositoryAttachmentVOs(
				MailbagVO mailbagVO) throws SystemException {
			List<DocumentRepositoryAttachmentVO> documentRepositoryAttachmentVOs =new ArrayList<>();
			if(mailbagVO.getAttachments() != null && !mailbagVO.getAttachments().isEmpty()) {
				
				for(MailAttachmentVO mailAttachmentVO : mailbagVO.getAttachments()) {
						
					documentRepositoryAttachmentVOs.add(convetImagesToDocumentRepositoryAttachmentVO(mailAttachmentVO,mailbagVO));
				}
			}			
			return documentRepositoryAttachmentVOs;
		}
		
		/**
		 * Added for CRQ IASCB-74722
		 * @author A-8893
		 * @param mailAttachmentVO
		 * @param mailbagVO
		 * @return
		 * @throws SystemException
		 */
		public static DocumentRepositoryAttachmentVO convetImagesToDocumentRepositoryAttachmentVO(
				MailAttachmentVO mailAttachmentVO,MailbagVO mailbagVO) throws SystemException {
			
			LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();			
			    DocumentRepositoryAttachmentVO documentRepositoryAttachmentVO = new DocumentRepositoryAttachmentVO();
			    documentRepositoryAttachmentVO.setCompanyCode(mailAttachmentVO.getCompanyCode());
			    documentRepositoryAttachmentVO.setFileName(mailAttachmentVO.getFileName());
			    documentRepositoryAttachmentVO.setAttachmentData(mailAttachmentVO.getFileData());
			    documentRepositoryAttachmentVO.setAttachmentType(mailAttachmentVO.getAttachmentType());
			    documentRepositoryAttachmentVO.setAirportCode(logonAttributes.getAirportCode());
			    documentRepositoryAttachmentVO.setOperationFlag(mailAttachmentVO.getAttachmentOpFlag());
			    documentRepositoryAttachmentVO.setDocumentRepoSerialNumber(mailAttachmentVO.getDocSerialNumber());
			    documentRepositoryAttachmentVO.setRemarks(mailAttachmentVO.getRemarks());
			    documentRepositoryAttachmentVO.setTxnRefereceOverride(true);
			    documentRepositoryAttachmentVO.setReference1("MALIDR");
			    documentRepositoryAttachmentVO.setTransactionDataRef1(mailbagVO.getMailbagId());
			    documentRepositoryAttachmentVO.setReference2("DMGCOD");
			    documentRepositoryAttachmentVO.setTransactionDataRef2(mailAttachmentVO.getReference2());
			return documentRepositoryAttachmentVO;
			  }
		
		/**
		 * Added for CRQ IASCB-74722
		 * @author A-8893
		 * @param companyCode
		 * @param id
		 * @return
		 * @throws SystemException
		 */
		public byte[] findMailbagDamageImages(String companyCode,
				String id) throws SystemException {
			log.entering(CLASS, "findMailbagDamages");
			String[] txnInfo = id.split("-DMG-");
			String fileName=txnInfo[0];
			String damageCode=txnInfo[1];
			String mailbagid=txnInfo[2];
			byte[] imageData=null;
		    Collection<DocumentRepositoryMasterVO> documentRepositoryMasterVOs = new ArrayList<>();
		   DocumentRepositoryFilterVO documentRepositoryFilterVO = new DocumentRepositoryFilterVO();
		    documentRepositoryFilterVO.setCompanyCode(companyCode);
		    documentRepositoryFilterVO.setDocumentType("MAL");
		    documentRepositoryFilterVO.setPurpose("DMG");
		    documentRepositoryFilterVO.setDocumentValue(mailbagid);
		    try {
		      documentRepositoryMasterVOs =Proxy.getInstance().get(DocumentRepositoryProxy.class).getDocumentsfromRepository(documentRepositoryFilterVO);
		    } catch (ProxyException proxyException) {
		      this.log.log(3, PROXYEXCEPTION,proxyException);
		    }
		   	if(!documentRepositoryMasterVOs.isEmpty()){
		    		
		    		for(DocumentRepositoryMasterVO documentRepositoryMasterVO:documentRepositoryMasterVOs){
			    		List<DocumentRepositoryAttachmentVO> documentRepositoryAttachmentVOs =documentRepositoryMasterVO.getAttachments();
			    		for(DocumentRepositoryAttachmentVO documentRepositoryAttachmentVO:documentRepositoryAttachmentVOs){
                           if(damageCode.equals(documentRepositoryAttachmentVO.getTransactionDataRef2())&&fileName.equals(documentRepositoryAttachmentVO.getFileName())){
                        	   imageData=documentRepositoryAttachmentVO.getAttachmentData();
                           }
		    			}
		    		}
		    	}
		    
		    
			return imageData;
		}
		/**
		 * 
		 * 	Method		:	MailController.findContainerJourneyID
		 *	Added by 	:	A-6245 on 15-Jun-2021
		 *	Parameters	:	@param containerFilterVO
		 *	Parameters	:	@return
		 *	Parameters	:	@throws SystemException 
		 *	Return type	: 	Collection<ContainerDetailsVO>
		 */
		public Collection<ContainerDetailsVO> findContainerJourneyID(ConsignmentFilterVO consignmentFilterVO) throws SystemException {
			return constructDAO().findContainerJourneyID(consignmentFilterVO);
		}
		
	public void closeMailInboundFlight(OperationalFlightVO operationalFlightVO)
			throws SystemException, BusinessException {
		CloseMailInboundFlightFeature closeMailInboundFlightFeature = (CloseMailInboundFlightFeature) SpringAdapter
				.getInstance().getBean("mail.operations.closemailinboundflightfeature");
		closeMailInboundFlightFeature.execute(operationalFlightVO);
	}

	public void stampResdits(Collection<MailResditVO> mailResditVOs) throws SystemException, MailTrackingBusinessException {
		if (Objects.nonNull(mailResditVOs) && !mailResditVOs.isEmpty()) {
			for (MailResditVO mailResditVO : mailResditVOs) {
				try {
					stampResdit(mailResditVO);
				} catch (BusinessException exception) {
					throw new MailTrackingBusinessException(exception);
				}
			}
		}
	}

	public void stampResdit(MailResditVO mailResditVO) throws SystemException, BusinessException {
		StampResditFeature stampResditFeature = (StampResditFeature) SpringAdapter.getInstance()
				.getBean(StampResditFeatureConstants.STAMP_RESDIT_FEATURE);
		stampResditFeature.execute(mailResditVO);
	}
	
	public Collection<ContainerDetailsVO> findArrivalDetailsForReleasingMails(OperationalFlightVO operationalFlightVO) 
			throws SystemException {
		return Mailbag.findArrivalDetailsForReleasingMails(operationalFlightVO);
	}

	public String findMailboxIdFromConfig(MailbagVO mailbagVO) throws SystemException {
		return MailMessageConfiguration.findMailboxIdFromConfig(mailbagVO);
	}

/**
		 * Added for CRQ IAN-6113 changed autoAttachAWBDetails method to feature
		 * @author A-8893
		 * @param containerDetailsVOs
		 * @param operationalFlightVO
		 * @return
		 * @throws SystemException
		 */
		public Collection<ContainerDetailsVO> autoAttachAWBDetails(
				Collection<ContainerDetailsVO> containerDetailsVOs,
				OperationalFlightVO operationalFlightVO) throws SystemException {
			log.entering("mailController", "autoAttachAWBDetailsFeature");
			MailManifestDetailsVO mailManifestDetailsVO =new MailManifestDetailsVO();
			mailManifestDetailsVO.setContainerDetailsVOs(containerDetailsVOs);
			mailManifestDetailsVO.setOperationalFlightVO(operationalFlightVO);
			mailManifestDetailsVO.setCarrierCode(operationalFlightVO.getCarrierCode());
			if(containerDetailsVOs!=null && !containerDetailsVOs.isEmpty()){
			for(ContainerDetailsVO containerDetailsVO:containerDetailsVOs){
				containerDetailsVO.setFlightDate(operationalFlightVO.getFlightDate());
				if(MailConstantsVO.OPERATION_OUTBOUND.equals(operationalFlightVO.getDirection()) && containerDetailsVO.getFromScreen()==null){      
					containerDetailsVO.setFromScreen(MailConstantsVO.MAILOUTBOUND_SCREEN);
				}
			}
			}
			AirlineValidationVO airlineValidationVO = null;
			
			HashMap<String, Collection<MailbagVO>> mailbagsMap = null;
			if (containerDetailsVOs != null && !containerDetailsVOs.isEmpty()) {
				mailbagsMap = createMailbagsMap(containerDetailsVOs, operationalFlightVO);
							try {
								airlineValidationVO = new SharedAirlineProxy()
										.validateAlphaCode(operationalFlightVO.getCompanyCode(), operationalFlightVO
												.getCarrierCode());
							} catch (SharedProxyException sharedProxyException) {
								throw new SystemException(sharedProxyException.getMessage());
							}
							mailManifestDetailsVO.setAirlineValidationVO(airlineValidationVO);		
							mailManifestDetailsVO.setMailbagsMap(mailbagsMap);
							eventTriggerForAutoAttach(mailManifestDetailsVO);
							
							
								}
			return containerDetailsVOs;
			
		}
		
	private void eventTriggerForAutoAttach(MailManifestDetailsVO mailManifestDetailsVO) throws SystemException {
		Collection<MailbagVO> mailbagVOs = null;
		if (mailManifestDetailsVO.getMailbagsMap() != null && mailManifestDetailsVO.getMailbagsMap().size() > 0) {
			Iterator<Collection<MailbagVO>> iterator = mailManifestDetailsVO.getMailbagsMap().values().iterator();
			while (iterator.hasNext()) {
				mailbagVOs = iterator.next();
				if (mailbagVOs != null && !mailbagVOs.isEmpty()) {
					mailManifestDetailsVO.setMailbagVOs(mailbagVOs);

					AutoAttachAWBDetailsFeature autoAttachAWBDetailsFeature = (AutoAttachAWBDetailsFeature) SpringAdapter
							.getInstance().getBean("mail.operations.autoAttachAWBDetailsFeature");
					try {
						autoAttachAWBDetailsFeature.execute(mailManifestDetailsVO);
					} catch (BusinessException e) {
						throw new SystemException(e.getErrors());
					}
				}
			}
		}
	}
		
		public void saveArrivalDetails(MailArrivalVO mailArrivalVO) throws SystemException, MailTrackingBusinessException {
			SaveArrivalFeature saveArrivalFeature = (SaveArrivalFeature) SpringAdapter.getInstance()
					.getBean("mail.operations.savearrivalfeature");
			try {
			saveArrivalFeature.execute(mailArrivalVO);
			 } catch (BusinessException e) {
					throw new MailTrackingBusinessException(e);
				 }
		}

			
		/**
		 * @author A-9084
		 * @param mailAuditFilterVO
		 * @return
		 * @throws SystemException 
		 * @throws BusinessDelegateException
		 */
			public Collection<AuditDetailsVO> findAssignFlightAuditDetails(MailAuditFilterVO mailAuditFilterVO) throws SystemException, BusinessDelegateException {
					return constructDAO().findAssignFlightAuditDetails(mailAuditFilterVO) ;
			}
		public Collection<MailbagVO> getFoundArrivalMailBags(MailArrivalVO mailArrivalVO) throws SystemException {
			return Mailbag.getFoundArrivalMailBags(mailArrivalVO);
		}		
		
		  private void performAuditForInboundFlightReopen(AssignedFlightAuditVO assignedFlightAuditVO, AssignedFlight inboundFlight, OperationalFlightVO operationalFlightVO) throws SystemException {
			  Collection<ContainerDetailsVO> containerDetailsVO = findArrivalDetailsForReleasingMails(operationalFlightVO);
				int containerCount =0;
				int mailbagCount = 0;
				HashSet<String> containers = new HashSet<>();
				
				if(containerDetailsVO!=null){
					for(ContainerDetailsVO containerDetailsVo : containerDetailsVO){
						for(MailbagVO mailbags : containerDetailsVo.getMailDetails()){
							if(MailConstantsVO.FLAG_YES.equals(mailbags.getArrivedFlag()) &&
									mailbags.getMailbagId()!=null){
								containers.add(containerDetailsVo.getContainerNumber());
								mailbagCount++;
							}
						}
					}
				}
				
				if(!containers.isEmpty()){
					containerCount = containers.size();
				}
				
				if(inboundFlight!=null){
					StringBuilder additInfo = new StringBuilder();
					additInfo.append("Arrival Airport: " + inboundFlight.getAssignedFlightPk().getAirportCode());
					additInfo.append(", No of Containers: " + containerCount + ", No of Mailbags: " + mailbagCount);
				
					assignedFlightAuditVO.setAdditionalInformation(additInfo.toString());
					String triggeringPoint = ContextUtils.getRequestContext().getParameter(MailConstantsVO.REQ_TRIGGERPOINT);
					assignedFlightAuditVO.setTriggerPoint(triggeringPoint);
					performAssignedFlightAudit(assignedFlightAuditVO, inboundFlight,MailConstantsVO.IMPORT_FLIGHT_REOPEN);
				}
			}
		  
	private Collection<MailbagVO> populateMailBagVoForAttachAWB(ContainerDetailsVO containerDetailsVO)
			throws SystemException {
		Collection<ContainerDetailsVO> containerDetailsVOList = new ArrayList<>();
		containerDetailsVOList.add(containerDetailsVO);
		Collection<MailbagVO> mailbagVOs = null;
		if (containerDetailsVO.getDsnVOs() != null && !containerDetailsVO.getDsnVOs().isEmpty()
				&& ((MailConstantsVO.DSN_VIEW).equals(containerDetailsVO.getActiveTab()) || containerDetailsVO.isFromContainerTab())) {
			try {
				mailbagVOs = constructDAO().findMailbagVOsForDsnVOs(containerDetailsVO);
			} catch (PersistenceException exception) {
				throw new SystemException(exception.getMessage(), exception);
			}
		} else {
			try {
				containerDetailsVOList = constructDAO().findMailbagsInContainerWithoutAcceptance(containerDetailsVOList);
			} catch (PersistenceException persistenceException) {
				persistenceException.getErrorCode();
				throw new SystemException(persistenceException.getErrorCode());
			}
			containerDetailsVO = containerDetailsVOList.iterator().next();
			mailbagVOs = containerDetailsVO.getMailDetails();
		}
		return mailbagVOs;
	}
	
	public void attachAWBForMailForAddons(
			Collection<com.ibsplc.icargo.business.addons.mail.operations.vo.MailBookingDetailVO> mailBookingDetailVOs,
			Collection<MailbagVO> mailbagVOs) throws SystemException {
	        com.ibsplc.icargo.business.addons.mail.operations.vo.MailBookingDetailVO mailBookingDetailVO = mailBookingDetailVOs.iterator().next();
	        for (MailbagVO mailbagVO : mailbagVOs) {
	            MailbagPK mailbagPK = new MailbagPK();
		mailbagPK.setCompanyCode(mailbagVO.getCompanyCode());
		mailbagPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
	            Mailbag mailbag = null;
	            try {
	                mailbag = Mailbag.find(mailbagPK);
		} catch (FinderException | SystemException e) {
	                mailbag = null;
	                log.log(Log.INFO, e);
		}
	if(mailbag!=null && (mailbag.getMasterDocumentNumber()==null || mailbag.getMasterDocumentNumber().isEmpty())){
				
				mailbag.attachAwbInMailbagForAddons(mailBookingDetailVO);
			}
		}
	}
	
	public void markUnmarkUldIndicator(ContainerVO containerVo) throws SystemException {
		  try {
		 Container.markUnmarkUldIndicator(containerVo);
		  } catch (FinderException | SystemException e) {
              log.log(Log.INFO, e);
	  }
	}

	public void triggerEmailForPureTransferContainers(Collection<OperationalFlightVO> operationalFlightVOs)
			throws SystemException {
		log.entering(CLASS, "triggerEmailForPureTransferContainers");
		Collection<MailAcceptanceVO> mailAcceptanceVOs = null;
		MailAcceptanceVO mailAcceptanceVO = new MailAcceptanceVO();
		if (!operationalFlightVOs.isEmpty()) {
			for (OperationalFlightVO operationalFlightVO : operationalFlightVOs) {

				mailAcceptanceVO.setCompanyCode(operationalFlightVO.getCompanyCode());
				mailAcceptanceVO.setCarrierId(operationalFlightVO.getCarrierId());
				mailAcceptanceVO.setFlightNumber(operationalFlightVO.getFlightNumber());
				mailAcceptanceVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
				mailAcceptanceVO.setFlightDestination(operationalFlightVO.getPou());
			}
			try {
				mailAcceptanceVOs = constructDAO().findContainerVOs(mailAcceptanceVO);
			} catch (PersistenceException exception) {
				throw new SystemException(exception.getMessage(), exception);
			}
			for (MailAcceptanceVO mailAcceptanceVo : mailAcceptanceVOs) { 
				if (!mailAcceptanceVo.getContainerDetails().isEmpty()) {
					MailController mailController = (MailController) SpringAdapter.getInstance()
							.getBean(MAIL_CONTROLLER_BEAN);
					mailController.triggerMailNotification(mailAcceptanceVo);
				}
			}
		}
	}

	@Raise(module = "mail", submodule = "operations", event = "MAIL_ATD_CAPTUERE_NOTIFICATION_EVENT", methodId = "mail.operations.triggerMailNotification")
	public void triggerMailNotification(MailAcceptanceVO mailAcceptanceVO) {

		log.entering(CLASS, "triggerMailNotification"); 
	}
	private Collection<ErrorVO>  savePAWBDetailsFromCardit(CarditVO carditVO, ConsignmentDocumentVO consignmentDocumentVO,ConsignmentDocumentVO existingMailBagsInConsignment) {
		Collection<ErrorVO> errorVOs=new ArrayList<>();
		try {
			if (checkPAWBParameter(carditVO)) {
				boolean pawbCountryValidation =false;
				if(carditVO.getCarditPawbDetailsVO()!=null) {
					findFieldsOfCarditPawb(carditVO);
					if(carditVO.getCarditType().equals(MailConstantsVO.CDT_TYP_CANCEL)) {
						carditVO.getCarditPawbDetailsVO().setConsignmentDocumentVO(existingMailBagsInConsignment);	
					}else {
				carditVO.getCarditPawbDetailsVO().setConsignmentDocumentVO(consignmentDocumentVO);
				carditVO.getCarditPawbDetailsVO().setExistingMailBagsInConsignment(existingMailBagsInConsignment);
				}
			   pawbCountryValidation =findPawbCountryValidation(carditVO,carditVO.getCarditPawbDetailsVO().getConsignmentDocumentVO());
				}
				if(pawbCountryValidation) {
				SavePAWBDetailsFeature savePAWBDetailsFeature = (SavePAWBDetailsFeature) SpringAdapter.getInstance()
						.getBean("mail.operations.savepawbdetails.savePAWBDetailsFeature");
				savePAWBDetailsFeature.execute(carditVO);
			}
			}
		} catch (SystemException exce) {
			log.log(Log.INFO, exce);
		} catch (BusinessException exce) {
			log.log(Log.INFO, exce);
			 if(exce.getErrors()!=null && exce.getErrors().size()>0){
				 for(ErrorVO error :exce.getErrors()){
					 ErrorVO errorVO = new ErrorVO(error.getErrorCode(),error.getErrorData());
					 errorVO.setErrorData(error.getErrorData());
					 errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					 errorVOs.add(errorVO); 
				 }
			 }
		}
		return errorVOs;
	}
	public String findAgentFromUpucode(String cmpCode, String upuCode) throws SystemException {
		return constructDAO().findAgentCodeFromUpuCode(cmpCode, upuCode);
	}
	private boolean checkPAWBParameter(CarditVO carditVO) {
		try {
			Boolean flag = false;
			String sendeId = carditVO.getSenderId();
			PostalAdministrationVO postalAdministrationVO = null;
			postalAdministrationVO = findPACode(carditVO.getCompanyCode(), sendeId);
			if (postalAdministrationVO != null && postalAdministrationVO.getPostalAdministrationDetailsVOs()!= null && !postalAdministrationVO.getPostalAdministrationDetailsVOs().isEmpty()) {
				Collection<PostalAdministrationDetailsVO> paDetails = postalAdministrationVO
						.getPostalAdministrationDetailsVOs().get("INVINFO");
				if (paDetails!= null && !paDetails.isEmpty()) {
					for (PostalAdministrationDetailsVO paDetail : paDetails) {
						if (paDetail.getParCode().equals("PAWBASSCONENAB")
								&& paDetail.getParameterValue().equalsIgnoreCase("YES")) {
							flag = true;
						}
					}
				}
			}
			return flag;
		} catch (SystemException exce) {
			log.log(Log.INFO,exce);
		}
		return false;
	}
	/**
	 * 
	 * 	Method		:	MailController.saveSecurityDetails
	 *	Added by 	:	A-10647 on 23-Mar-2022
	 * 	Used for 	:
	 *	Parameters	:	@param consignmentScreeningVOs
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	void
	 */
	public void saveSecurityDetails(Collection<ConsignmentScreeningVO> consignmentScreeningVOs) throws SystemException {
		if (Objects.nonNull(consignmentScreeningVOs) && !consignmentScreeningVOs.isEmpty()) {
		long malseqnum = 0;
		String mailBagId = consignmentScreeningVOs.iterator().next().getMailIdr()!=null && consignmentScreeningVOs.iterator().next().getMailIdr().trim().length()>0?consignmentScreeningVOs.iterator().next().getMailIdr():null;
		String companyCode = consignmentScreeningVOs.iterator().next().getCompanyCode();
		if(mailBagId != null){
		try {
		 	 malseqnum =  Mailbag.findMailBagSequenceNumberFromMailIdr(mailBagId,companyCode);
					      
			} catch (SystemException e1) {
				LOGGER.log(Log.INFO, e1);
			}
		
		stampSecurityScreeningForNonAcceptedMailBagsFromHHTAndWeb(consignmentScreeningVOs, malseqnum, mailBagId,
				companyCode);
		}
			for (ConsignmentScreeningVO consignmentScreeningVO : consignmentScreeningVOs) {
				try {
					saveSecurityDetails(consignmentScreeningVO);
				} catch (BusinessException exception) {
					log.log(Log.SEVERE,exception);
				}
			}
			updateRegAgentForScreeningMethods(consignmentScreeningVOs);
		}
	}

	private void stampSecurityScreeningForNonAcceptedMailBagsFromHHTAndWeb(
			Collection<ConsignmentScreeningVO> consignmentScreeningVOs, long malseqnum, String mailBagId,
			String companyCode) throws SystemException {
		if(malseqnum <= 0){
			String screeningOrigin = consignmentScreeningVOs.iterator().next().getScreeningLocation();
			String countryType = "";
			OperationalFlightVO operationalFlightVO = new OperationalFlightVO();
			operationalFlightVO.setCompanyCode(companyCode);
		try {
			malseqnum= setSecurityScreeningForNonAcceptedMailBags(consignmentScreeningVOs, mailBagId, companyCode,
					operationalFlightVO, countryType,screeningOrigin);
			if(consignmentScreeningVOs.iterator().next().getSource()!= null && consignmentScreeningVOs.iterator().next().getSource().equals(MailConstantsVO.SOURCE_HHT)){
				setRAIssuingDetailsForFirstTimeScreening(consignmentScreeningVOs, mailBagId, companyCode,
						screeningOrigin, malseqnum);
			}
		} catch (MailHHTBusniessException |PersistenceException | FinderException e) {
			    LOGGER.log(Log.SEVERE, e);
				throw new SystemException(e.getMessage());
		} 
		
		}
	}

	public void saveSecurityDetails(ConsignmentScreeningVO consignmentScreeningVO) throws SystemException, BusinessException {
			SaveSecurityDetailsFeature saveSecurityDetailsFeature = (SaveSecurityDetailsFeature) SpringAdapter.getInstance().getBean(SaveSecurityDetailsFeatureConstants.SAVE_SECURITY_DETAILS_FEATURE);
			saveSecurityDetailsFeature.execute(consignmentScreeningVO);
	}
	
	public MailbagVO listmailbagSecurityDetails(MailScreeningFilterVO mailScreeningFilterVo) {

		log.entering(CLASS, "listmailbagSecurityDetails");
		MailbagVO mailbagVO = new MailbagVO();
		try {
			mailbagVO = constructDAO().listmailbagSecurityDetails(mailScreeningFilterVo);
		} catch (SystemException e) {
			log.log(Log.INFO, e);
		}
		return mailbagVO;
	}
	/**
	 * 
	 * 	Method		:	MailController.editscreeningDetails
	 *	Added by 	:	A-10383 on 21-Apr-2022
	 * 	Used for 	:
	 *	Parameters	:	@param consignmentScreeningVOs
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	void
	 */
	public void editscreeningDetails(Collection<ConsignmentScreeningVO> consignmentScreeningVOs) 
			throws SystemException {
		if (Objects.nonNull(consignmentScreeningVOs) && !consignmentScreeningVOs.isEmpty()) {
			for (ConsignmentScreeningVO consignmentScreeningVO : consignmentScreeningVOs) {

			try{
			ConsignmentScreeningDetailsPK pk = new ConsignmentScreeningDetailsPK();
			pk.setCompanyCode(consignmentScreeningVO.getCompanyCode());
			pk.setSerialNumber(consignmentScreeningVO.getSerialNumber());
			
			ConsignmentScreeningDetails screening = ConsignmentScreeningDetails.find(consignmentScreeningVO.getCompanyCode(),consignmentScreeningVO.getSerialNumber());
			screening.setRemarks(consignmentScreeningVO.getRemarks());
			screening.setScreeningRegulation(consignmentScreeningVO.getScreeningRegulation());
			screening.setScreeningLocation(consignmentScreeningVO.getScreeningLocation());
			screening.setSecurityStatusParty(consignmentScreeningVO.getSecurityStatusParty());
			screening.setScreeningMethodCode(consignmentScreeningVO.getScreeningMethodCode());
			screening.setScreenLevelValue(consignmentScreeningVO.getScreenLevelValue());
			if(consignmentScreeningVO.getSecurityReasonCode()!=null){
			screening.setScreenDetailType(consignmentScreeningVO.getSecurityReasonCode());
			}
			else{
			screening.setScreenDetailType(consignmentScreeningVO.getScreenDetailType());	
			}
			screening.setResult(consignmentScreeningVO.getResult());
			screening.setSecurityStatusDate(consignmentScreeningVO.getSecurityStatusDate());
			screening.setAgentID(consignmentScreeningVO.getAgentID());
			screening.setAgentType(consignmentScreeningVO.getAgentType());
			screening.setCountryCode(consignmentScreeningVO.getIsoCountryCode());
			screening.setExpiryDate(consignmentScreeningVO.getExpiryDate());
			screening.setAdditionalSecurityInfo(consignmentScreeningVO.getAdditionalSecurityInfo());
			screening.setScreeningAuthority(consignmentScreeningVO.getScreeningAuthority());
			screening.setSeScreeningAuthority(consignmentScreeningVO.getSeScreeningAuthority());
			screening.setSeScreeningReasonCode(consignmentScreeningVO.getSeScreeningReasonCode());
			screening.setSeScreeningRegulation(consignmentScreeningVO.getSeScreeningRegulation());
			screening.setApplicableRegTransportDirection(consignmentScreeningVO.getApplicableRegTransportDirection());
			screening.setApplicableRegBorderAgencyAuthority(consignmentScreeningVO.getApplicableRegBorderAgencyAuthority());
			screening.setApplicableRegReferenceID(consignmentScreeningVO.getApplicableRegReferenceID());
			screening.setApplicableRegFlag(consignmentScreeningVO.getApplicableRegFlag());	  
            screening.setAgentSerialNumber(consignmentScreeningVO.getAgentSerialNumber());
			} catch (FinderException e) {
				log.log(Log.SEVERE, e);
			}
			}
		}
	}
			/**
			 * 
			 * 	Method		:	MailController.editscreeningDetails
			 *	Added by 	:	A-10383 on 21-Apr-2022
			 * 	Used for 	:
			 *	Parameters	:	@param consignmentScreeningVOs
			 *	Parameters	:	@throws SystemException 
			 *	Return type	: 	void
			 */
			public void deletescreeningDetails(Collection<ConsignmentScreeningVO> consignmentScreeningVOs) 
					throws SystemException {

				if (Objects.nonNull(consignmentScreeningVOs) && !consignmentScreeningVOs.isEmpty()) {
					for (ConsignmentScreeningVO consignmentScreeningVO : consignmentScreeningVOs) {

					try{
					ConsignmentScreeningDetailsPK pk = new ConsignmentScreeningDetailsPK();
					pk.setCompanyCode(consignmentScreeningVO.getCompanyCode());
					pk.setSerialNumber(consignmentScreeningVO.getSerialNumber());
					
					ConsignmentScreeningDetails screening = ConsignmentScreeningDetails.find(consignmentScreeningVO.getCompanyCode(),consignmentScreeningVO.getSerialNumber());
					screening.remove();
					
					} catch (FinderException e) {
						log.log(Log.SEVERE, e);
					}
					}
				}
			}
			/**
			 * @author A-8353
			 * @param operationalFlightVO
			 * @param containerVOs
			 * @param bulkContainers
			 * @throws SystemException
			 * @throws ProxyException 
			 */
			Collection<ContainerDetailsVO> findContainerDetailsVOs(OperationalFlightVO operationalFlightVO,
					Collection<ContainerVO> containerVOs, Collection<ContainerVO> bulkContainers)
					throws SystemException {
			   Collection<ContainerDetailsVO> containerDetailsVOs=findContainerDetailsForULD(operationalFlightVO,containerVOs);
			   Collection<ContainerDetailsVO> containerDetailsVOsBarrow=findContainerDetailsForBarrow(operationalFlightVO,bulkContainers);
			  
			   containerDetailsVOs.addAll(containerDetailsVOsBarrow);	
			   
			   return containerDetailsVOs;
			}
			/**
			 * @author A-8353
			 * @param operationalFlightVO
			 * @param containerVOs
			 * @throws SystemException 
			 */
			 
			private Collection<ContainerDetailsVO>  findContainerDetailsForBarrow(OperationalFlightVO operationalFlightVO,
					Collection<ContainerVO> containerVOs) throws SystemException {
				Collection<ContainerDetailsVO> containerDetailsVOs= new ArrayList<>();
				if(containerVOs!=null &&!containerVOs.isEmpty() ){
					Collection<ContainerDetailsVO> containers=new ArrayList<>();
					for (ContainerVO containerVO:containerVOs){
						ContainerDetailsVO containerDetailsVO=new ContainerDetailsVO();
						containerDetailsVO.setCompanyCode(operationalFlightVO.getCompanyCode());
						containerDetailsVO.setCarrierId(operationalFlightVO.getCarrierId());
						containerDetailsVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
						containerDetailsVO.setFlightNumber(operationalFlightVO.getFlightNumber());
						containerDetailsVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
						containerDetailsVO.setPol(operationalFlightVO.getPol());
						containerDetailsVO.setContainerNumber(containerVO.getContainerNumber());
						containerDetailsVO.setContainerType(MailConstantsVO.BULK_TYPE);
						containers.add(containerDetailsVO);
					}
					  containerDetailsVOs=new MailController().findMailbagsInContainer(containers); 
				 }
				return containerDetailsVOs;
		     }
		   /**
		    * @author A-8353
		    * @param operationalFlightVO
		    * @param containerVOs
		 * @throws SystemException 
		    */
			 private Collection<ContainerDetailsVO> findContainerDetailsForULD(OperationalFlightVO operationalFlightVO,
					Collection<ContainerVO> containerVOs) throws SystemException {
				Collection<ContainerDetailsVO> containerDetailsVOs= new ArrayList<>();
				if(containerVOs!=null &&!containerVOs.isEmpty() ){
					Collection<ContainerDetailsVO> containers=new ArrayList<>();
					for (ContainerVO containerVO:containerVOs){
						ContainerDetailsVO containerDetailsVO=new ContainerDetailsVO();
						containerDetailsVO.setCompanyCode(operationalFlightVO.getCompanyCode());
						containerDetailsVO.setCarrierId(operationalFlightVO.getCarrierId());
						containerDetailsVO.setLegSerialNumber(operationalFlightVO.getLegSerialNumber());
						containerDetailsVO.setFlightNumber(operationalFlightVO.getFlightNumber());
						containerDetailsVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
						containerDetailsVO.setPol(operationalFlightVO.getPol());
						containerDetailsVO.setContainerNumber(containerVO.getContainerNumber());
						containerDetailsVO.setContainerType(MailConstantsVO.ULD_TYPE);
						containers.add(containerDetailsVO);
					}
					 containerDetailsVOs=new MailController().findMailbagsInContainer(containers); 
				 }
				return containerDetailsVOs;
			  }
			
			/**
			 * @author A-8353
			 * @param mailbagIds
			 * @param operationalFlightVO 
			 * @param pou 
			 * @param container 
			 * @param flightValidationVOs 
			 * @return 
			 * @throws SystemException 
			 * @throws EncodeFailureException 
			 */
			private Collection<MailbagVO> sendSecurityScreeningDetailsForContainer(Collection<MailbagVO> mailbagVOs, OperationalFlightVO operationalFlightVO, String container, String pou, Collection<FlightValidationVO> flightValidationVOs) throws SystemException {
				LOGGER.entering(CLASS, "sendSecurityScreeningDetailsForContainer");
					Collection <MailbagVO> mailbagVOsToSend =new ArrayList<>();
					Collection <MailbagVO> mailbagVOsToOps =new ArrayList<>();
					for (MailbagVO mailbagVO:mailbagVOs){
						MailScreeningFilterVO mailScreeningFilterVo=new MailScreeningFilterVO();
						mailScreeningFilterVo.setCompanyCode(operationalFlightVO.getCompanyCode());
						mailScreeningFilterVo.setMailBagId(mailbagVO.getMailbagId());
						MailbagVO mailVo = fetchMailSecurityDetails(mailScreeningFilterVo);
						if(mailVo!=null&& mailVo.getConsignmentScreeningVO()!=null&&!mailVo.getConsignmentScreeningVO().isEmpty()
						   &&mailVo.isSecurityDetailsPresent()&&mailVo.getSecurityStatusCode()!=null){
							MailbagVO mailbagVo=new MailbagVO();
							BeanHelper.copyProperties(mailbagVo, mailVo); 
							mailVo.setUpliftAirport(operationalFlightVO.getPol());
							List<ConsignmentScreeningVO> consignmentScreeningVOForOps = mailVo.getConsignmentScreeningVO().stream()
									.filter(value -> (mailVo.getUpliftAirport().equals(value.getScreeningLocation()))
											).collect(Collectors.toList());
							String sysParValue=findSystemParameterValue(SEND_ALL_STATION_SCREENING_STATUS);
							LOGGER.log(Log.INFO, sysParValue);	
							List<ConsignmentScreeningVO> consignmentScreeningVos=new ArrayList<>();
							if(MailConstantsVO.FLAG_YES.equals(sysParValue)){
								List<ConsignmentScreeningVO> consignmentScreeningVOs = mailVo.getConsignmentScreeningVO().stream()
										.filter(value -> (MailConstantsVO.REASON_CODE_SM.equals(value.getScreenDetailType())
												||(MailConstantsVO.REASON_CODE_CS.equals(value.getScreenDetailType())&&!MailConstantsVO.RA_ACCEPTING.equals(value.getAgentType())))
												).collect(Collectors.toList()); 
								Optional<ConsignmentScreeningVO> consignmentScreeningVORaAcp = mailVo.getConsignmentScreeningVO().stream()
										.filter(value ->MailConstantsVO.RA_ACCEPTING.equals(value.getAgentType())
												).findFirst();
								if(!consignmentScreeningVOs.isEmpty()){
									consignmentScreeningVos.addAll(consignmentScreeningVOs);
								}
								consignmentScreeningVORaAcp.ifPresent(consignmentScreeningVos::add);
								}else{
									consignmentScreeningVos = mailVo.getConsignmentScreeningVO().stream()
									.filter(value -> ((mailVo.getUpliftAirport().equals(value.getScreeningLocation()))
											&&(MailConstantsVO.REASON_CODE_SM.equals(value.getScreenDetailType())||MailConstantsVO.REASON_CODE_CS.equals(value.getScreenDetailType()))
											)).collect(Collectors.toList());
								}
						if(!consignmentScreeningVos.isEmpty()){
						mailVo.setConsignmentScreeningVO(consignmentScreeningVos);			
					    mailbagVOsToSend.add(mailVo);
					    }
							if(!consignmentScreeningVOForOps.isEmpty()){
								mailbagVo.setConsignmentScreeningVO(consignmentScreeningVOForOps);			
								mailbagVOsToOps.add(mailbagVo);
							}
					   }
					   }
					   if(mailbagVOsToSend.isEmpty()){
						   if(mailbagVOsToOps.isEmpty()){
						  return Collections.emptyList();
						   }
						   else{
							   return  mailbagVOsToOps;
						   }
					   }
					   SecurityAndScreeningMessageVO securityAndScreeningMessageVO= new SecurityAndScreeningMessageVO();
					   securityAndScreeningMessageVO.setCompanyCode(operationalFlightVO.getCompanyCode());
					   securityAndScreeningMessageVO.setMessageType(SECURITY_SCREENING_MESSGE_TYPE);
					   securityAndScreeningMessageVO.setMessageStandard(PUBLISH);
					   securityAndScreeningMessageVO.setFlightNumber(operationalFlightVO.getCarrierCode()+operationalFlightVO.getFlightNumber());
					   Optional<FlightValidationVO> flightValidationVos = flightValidationVOs.stream()
				                .filter(flightValidationVo -> pou !=null &&pou.equals(flightValidationVo.getLegDestination()))
				                .findFirst();
					   flightValidationVos.ifPresent(flightValidationVO->
						   securityAndScreeningMessageVO.setFlightDate(flightValidationVO.getSta()));
					   if(!flightValidationVos.isPresent()){
					   securityAndScreeningMessageVO.setFlightDate(operationalFlightVO.getArrivaltime());
					   }
					   securityAndScreeningMessageVO.setContainer(container);
					   securityAndScreeningMessageVO.setPou(pou);
					   securityAndScreeningMessageVO.setMailbagVOs(mailbagVOsToSend);
					   try {
						   Proxy.getInstance().get(MsgBrokerMessageProxy.class).encodeAndSaveMessageAsync(securityAndScreeningMessageVO);	
						} catch (ProxyException proxyException) {
							log.log(Log.INFO, proxyException);		
				}
						LOGGER.exiting(CLASS, "sendSecurityScreeningDetailsForContainer");    
					return mailbagVOsToOps;
				
			}
				/**
			 * 
			 * 	Method		:	MailController.generateMailSecurityReport
			 *	Added by 	:	A-9477 on 10-MAY-2022
			 * 	Used for 	:
			 *	Parameters	:	@param ReportSpec
			 *	Parameters	:	@throws SystemException, ReportGenerationException 
			 *	Return type	: 	Map<String,Object>
			 */
	public Map<String, Object> generateMailSecurityReport(ReportSpec reportSpec)
			throws SystemException, ReportGenerationException {

		Collection<MailbagVO> mailbagVOs = new ArrayList<>();
		MailScreeningFilterVO mailScreeningFilterVo = new MailScreeningFilterVO();

		mailScreeningFilterVo.setMailBagId(reportSpec.getFilterValues().get(0).toString());
		mailScreeningFilterVo.setCompanyCode(reportSpec.getFilterValues().get(1).toString());

		
		MailbagVO mailbagVO =null;
		try {
			 mailbagVO = Proxy.getInstance().get(MailOperationsProxy.class).fetchMailSecurityDetails(mailScreeningFilterVo);
			} catch (ProxyException e) {
				throw new SystemException(e.getMessage(),e);
			}
		String companyCode = mailScreeningFilterVo.getCompanyCode();
		long malseqnum = mailbagVO.getMailSequenceNumber();
		String pou =null;
		try {
		       pou = Proxy.getInstance().get(MailOperationsProxy.class).findRoutingDetails(companyCode,malseqnum);
		} catch (ProxyException e) {
			throw new SystemException(e.getMessage(),e);
		}
		mailbagVO.setPou(pou);
		mailbagVOs.add(mailbagVO);
		reportSpec.setData(mailbagVOs);
		return ReportAgentInstance.getInstance().generateReport(reportSpec);

	}

		/**
			 * 
			 * 	Method		:	MailController.findRoutingDetails
			 *	Added by 	:	A-9477 on 10-MAY-2022
			 * 	Used for 	:
			 *	Parameters	:	@param companyCode, malseqnum
			 *	Parameters	:	@throws
			 *	Return type	: 	String
			 */
	public String findRoutingDetails(String companyCode, long malseqnum) {
		String pou = null;

		try {
			pou = constructDAO().findRoutingDetails(companyCode, malseqnum);
		} catch (SystemException e) {
			log.log(Log.INFO, e);
		}
		return pou;

	}
	/**
	 * 	Method		:	MailController.saveMailSecurityStatus
	 *	Added by 	:	A-4809 on 18-May-2022
	 * 	Used for 	:
	 *	Parameters	:	@param mailbagVO
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	void
	 */
	public void saveMailSecurityStatus(MailbagVO mailbagVO) throws SystemException{
		MailbagPK mailBagPK = new MailbagPK();
   		mailBagPK.setCompanyCode(mailbagVO.getCompanyCode());
   		mailBagPK.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
   		Mailbag mailBag =null;
		try {
			mailBag = Mailbag.find(mailBagPK);
   		if (mailBag != null) {
   			mailBag.setSecurityStatusCode(mailbagVO.getSecurityStatusCode());
   		}
		} catch (FinderException e) {
			log.log(Log.SEVERE, e);
		}
	}
	/**
	 * 	Method		:	MailController.saveScreeningConsginorDetails
	 *	Added by 	:	A-4809 on 19-May-2022
	 * 	Used for 	:
	 *	Parameters	:	@param contTransferMap 
	 *	Return type	: 	void
	 * @throws SystemException 
	 * @throws RemoteException 
	 */
	public void saveScreeningConsginorDetails(Map<String, Object> contTransferMap) throws RemoteException, SystemException {
		((MailTrackingDefaultsBI)SpringAdapter.getInstance().getBean(MAIL_OPERATION_SERVICES)).saveScreeningConsginorDetails(contTransferMap);
	} 
  /**
   * 
   * @param mailbag
   * @param newDocumentNumber
   * @return
   * @throws SystemException
   */
   public Collection<MailbagVO> findAWBAttachedMailbags(MailbagVO mailbag,String consignmentNumber) throws SystemException {
		return constructDAO().findAWBAttachedMailbags(mailbag,consignmentNumber);
	}
   	public Collection<MailInConsignmentVO>findMailInConsignment(ConsignmentFilterVO consignmentFilterVO) throws SystemException{
		return constructDAO().findMailInConsignment(consignmentFilterVO);

	}
   	public void findFieldsOfCarditPawb(CarditVO carditVO) throws SystemException {
   		CarditPawbDetailsVO carditPawbDetail = carditVO.getCarditPawbDetailsVO();
		try {
			if(carditPawbDetail.getConsignmentDestination()!=null) {
			OfficeOfExchange destination = OfficeOfExchange.find(carditVO.getCompanyCode(),
					carditPawbDetail.getConsignmentDestination());
			 if(destination.getAirportCode()!=null) {
					carditPawbDetail.setConsignmentDestinationAirport(destination.getAirportCode());
			 }else {
					carditPawbDetail.setConsignmentDestinationAirport(findNearestAirportOfCity(carditVO.getCompanyCode(), carditPawbDetail.getConsignmentDestination()));
					 }
			}
			if(carditPawbDetail.getConsignmentOrigin()!=null) {
			OfficeOfExchange origin = OfficeOfExchange.find(carditVO.getCompanyCode(), carditPawbDetail.getConsignmentOrigin());
			if(origin.getAirportCode()!=null) {
			carditPawbDetail.setConsignmentOriginAirport(origin.getAirportCode());
			} else {
			carditPawbDetail.setConsignmentOriginAirport(findNearestAirportOfCity(carditVO.getCompanyCode(), carditPawbDetail.getConsignmentOrigin()));
			}
		 }
		} catch (FinderException exce) {
			log.log(Log.INFO,exce);
		}
         if (carditPawbDetail.getShipperCode() != null) {
        		String agentCode = findAgentFromUpucode(carditVO.getCompanyCode(),
						carditPawbDetail.getShipperCode());
				carditPawbDetail.setAgentCode(agentCode);
			}
         if (carditPawbDetail.getConsigneeCode() != null) {
        	 String consigneeCode = findAgentFromUpucode(carditVO.getCompanyCode(),
 					carditPawbDetail.getConsigneeCode());
			carditPawbDetail.setConsigneeAgentCode(consigneeCode);
 		}
	carditVO.setCarditPawbDetailsVO(carditPawbDetail);
	}
   	@Advice(name = "mail.operations.flagMLDForMailOperationsInULD", phase = Phase.POST_INVOKE)
   	public void flagMLDForMailOperationsInULD(
   	ContainerVO containerVo, String mode)
   	throws SystemException {
   	log.entering(CLASS, "flagMLDForMailOperationsInULD");
   	log.exiting(CLASS, "flagMLDForMailOperationsInULD");
   	}
   	/**
   	 * @author A-8353
   	 * @param containerDetailsVOs
   	 * @param operationalFlightVO
   	 * @param flightValidationVOs 
   	 * @return 
   	 * @throws SystemException
   	 */
   	Collection<MailbagVO> sendSecurityScreeningDetails(Collection<ContainerDetailsVO> containerDetailsVOs,OperationalFlightVO operationalFlightVO, Collection<FlightValidationVO> flightValidationVOs) throws SystemException {
   		LOGGER.entering(CLASS, "sendSecurityScreeningDetails");
   		Collection <MailbagVO> mailbagVOsForScreening =new ArrayList<>();
   		Collection <MailbagVO> mailbagVOTosend = null;
		 if(containerDetailsVOs!=null && !containerDetailsVOs.isEmpty()){
			    for(ContainerDetailsVO containerDetailsVO:containerDetailsVOs){
			       if(containerDetailsVO.getMailDetails()!=null&&!containerDetailsVO.getMailDetails().isEmpty()){
			    	   mailbagVOTosend = sendSecurityScreeningDetailsForContainer(containerDetailsVO.getMailDetails(),operationalFlightVO,
			        		  containerDetailsVO.getContainerNumber(),containerDetailsVO.getPou(),flightValidationVOs);
			    	   mailbagVOsForScreening.addAll(mailbagVOTosend);
			       }
			       
			     }
			 }
		LOGGER.entering(CLASS, "sendSecurityScreeningDetails");
		return mailbagVOsForScreening;
    }
    /**
     * @author A-8353
     * @param operationalFlightVO
     * @param containerVOs
     * @param bulkContainers
     * @param flightValidationVOs 
     * @throws SystemException
     */
	 void doSecurityAndScreeningValidations(OperationalFlightVO operationalFlightVO,
			Collection<ContainerVO> containerVOs, Collection<ContainerVO> bulkContainers, Collection<FlightValidationVO> flightValidationVOs)
			throws SystemException {
		 LOGGER.entering(CLASS, "doSecurityAndScreeningValidations");
		Collection<ContainerDetailsVO> containerDetailsVOs=findContainerDetailsVOs(operationalFlightVO, containerVOs, bulkContainers);
		performEUValidations(containerDetailsVOs,operationalFlightVO);
		Collection<MailbagVO> mailbagVOsForScreening = sendSecurityScreeningDetails(containerDetailsVOs,operationalFlightVO,flightValidationVOs);
		updateOciInfo(containerDetailsVOs,mailbagVOsForScreening,operationalFlightVO);
		LOGGER.entering(CLASS, "doSecurityAndScreeningValidations");
}	 

	 void updateOciInfo(Collection<ContainerDetailsVO> containerDetailsVOs,Collection<MailbagVO> mailbagVOsForScreening, OperationalFlightVO operationalFlightVO) {
		Collection<MailbagVO> findAWBMailbags = new ArrayList<>();
		findAllMailbagsInCloseFlight(containerDetailsVOs, findAWBMailbags);
		Map<String, MailbagVO> temp = getUniqueAWBMailBags(findAWBMailbags);
		Collection<MailbagVO> uniqueAWBMailBags = new ArrayList<>(temp.values());
		for(MailbagVO uniqueAWBMailBag :uniqueAWBMailBags){
			Collection<MailbagVO> mailbagsassociatedtoawb = mailbagVOsForScreening.stream().filter(value-> Objects.nonNull(value.getAwbNumber())).filter(value -> value.getAwbNumber().equals(uniqueAWBMailBag.getAwbNumber())).collect(Collectors.toList());
			if(mailbagsassociatedtoawb!= null && !mailbagsassociatedtoawb.isEmpty()){
			MailbagVO mailBagVo = mailbagsassociatedtoawb.iterator().next();
			Collection<ConsignmentScreeningVO> consignmentScreeningVOs = mailBagVo.getConsignmentScreeningVO().stream()
					.filter(value -> Objects.nonNull(value.getAgentType()))
					.filter(value -> value.getAgentType().equals(MailConstantsVO.RA_ACCEPTING))
					.filter(value -> Objects.nonNull(value.getScreeningLocation()))
					.filter(value -> value.getScreeningLocation().equals(operationalFlightVO.getPol()))
					.collect(Collectors.toList());
			if(consignmentScreeningVOs!= null && !consignmentScreeningVOs.isEmpty()){
			ConsignmentScreeningVO consignmentScreeningVO = consignmentScreeningVOs.iterator().next();	
					try {
					ShipmentDetailVO shipmentDelVO = Proxy.getInstance().get(OperationsShipmentProxy.class)
							.findShipmentDetails(createShipmentFilterVO(uniqueAWBMailBag));
					stampRAAcceptingValuesForOci(consignmentScreeningVO, shipmentDelVO);
					if(shipmentDelVO!=null){
					shipmentDelVO.setOperationFlag(ShipmentDetailVO.OPERATION_FLAG_UPDATE);
					Proxy.getInstance().get(OperationsShipmentProxy.class).saveShipmentDetailsAsync(shipmentDelVO);
					}
					
				} catch (SystemException e) {
					
					log.log(Log.INFO, e);
				}
				}
		}}
	}

	private void stampRAAcceptingValuesForOci(ConsignmentScreeningVO consignmentScreeningVO,
			ShipmentDetailVO shipmentDelVO) {
		if(shipmentDelVO !=null &&shipmentDelVO.getOtherCustomsInformationVOs()!= null && !shipmentDelVO.getOtherCustomsInformationVOs().isEmpty()) {
			   OtherCustomsInformationVO otherCustomsInformationVO = new OtherCustomsInformationVO();
			   if(consignmentScreeningVO.getIsoCountryCode()!= null){
			   otherCustomsInformationVO.setCountryCode(consignmentScreeningVO.getIsoCountryCode());
			   }
			   otherCustomsInformationVO.setInfoIdentifier("OSS");
			   otherCustomsInformationVO.setOtherCusInfoIdentifier("RA");
			   if(consignmentScreeningVO.getAgentID()!= null){
			   otherCustomsInformationVO.setCustomsInfomation(consignmentScreeningVO.getAgentID());
			   }
			   shipmentDelVO.getOtherCustomsInformationVOs().add(otherCustomsInformationVO);
		   }
	}

	private void findAllMailbagsInCloseFlight(Collection<ContainerDetailsVO> containerDetailsVOs,
			Collection<MailbagVO> findAWBMailbags) {
		if (containerDetailsVOs != null && !containerDetailsVOs.isEmpty()) {

			for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
				if (containerDetailsVO.getMailDetails() != null && !containerDetailsVO.getMailDetails().isEmpty()) {
					for (MailbagVO mailbagVO : containerDetailsVO.getMailDetails()) {
						findAWBMailbags.add(mailbagVO);
					}
					
				}
			}
			
		}
	}

	private Map<String, MailbagVO> getUniqueAWBMailBags(Collection<MailbagVO> findAWBMailbags) {
		Map<String, MailbagVO> temp = new HashMap<>();
		findAWBMailbags.forEach(x -> {
			if(x.getAwbNumber()!=null){
			MailbagVO mailBagVO = temp.get(x.getAwbNumber());
			
			if(mailBagVO == null){
				temp.put(x.getAwbNumber(), x);
			}
			}
		});
		return temp;
	}
	private ShipmentDetailFilterVO createShipmentFilterVO(MailbagVO mailbagVO) {
		ShipmentDetailFilterVO shipmentDetailFilterVO = new ShipmentDetailFilterVO();
		shipmentDetailFilterVO.setCompanyCode(mailbagVO.getCompanyCode());
		shipmentDetailFilterVO.setOwnerId(mailbagVO.getDocumentOwnerIdr());
		shipmentDetailFilterVO.setMasterDocumentNumber(mailbagVO.getDocumentNumber());
		shipmentDetailFilterVO.setDuplicateNumber(mailbagVO.getDuplicateNumber());
		shipmentDetailFilterVO.setSequenceNumber(mailbagVO.getSequenceNumber());
		shipmentDetailFilterVO.setShipmentPrefix(mailbagVO.getShipmentPrefix());
		return shipmentDetailFilterVO;
	}

   	public MailbagVO findAirportFromMailbag(MailbagVO mailbagvo) throws SystemException, FinderException{
   		  
   		MailbagPK mailbagPk = new MailbagPK(); 
   		MailbagVO mailbagVOfromDB=null;
        if(mailbagvo.getMailSequenceNumber()!=0) {
        	mailbagPk.setMailSequenceNumber(mailbagvo.getMailSequenceNumber()); 
        	mailbagPk.setCompanyCode(mailbagvo.getCompanyCode());
        	Mailbag mailbag=Mailbag.find(mailbagPk); 
        	mailbagvo.setOrigin(mailbag.getOrigin()); 
        	mailbagvo.setDestination(mailbag.getDestination());	 
        }    
        else{ 
        	mailbagVOfromDB = Mailbag.findMailbagDetails(mailbagvo.getMailbagId(),mailbagvo.getCompanyCode());
        	if(mailbagVOfromDB!=null){
        		mailbagvo.setOrigin(mailbagVOfromDB.getOrigin());
        		mailbagvo.setDestination(mailbagVOfromDB.getDestination());	 
            }
            else { 
        	findAirportForNewlyAddedMailbags(mailbagvo);
            	}
        	}
	return mailbagvo;  
   	}
	private void findAirportForNewlyAddedMailbags(MailbagVO mailbagvo) throws SystemException {
        	String ooe=mailbagvo.getMailbagId().substring(0, 6); 
        	String doe=mailbagvo.getMailbagId().substring(6, 12);
			Page<OfficeOfExchangeVO> originOfficeDetails=findOfficeOfExchange(mailbagvo.getCompanyCode(), ooe, 1);
					if(originOfficeDetails!=null && !originOfficeDetails.isEmpty()){
						OfficeOfExchangeVO orgOfficeOfExchangeVO = originOfficeDetails.iterator().next();
						if (orgOfficeOfExchangeVO != null && orgOfficeOfExchangeVO.getAirportCode() != null) {
							mailbagvo.setOrigin(orgOfficeOfExchangeVO.getAirportCode());
							}
						else {if (orgOfficeOfExchangeVO != null) {
							  String orgOfficeOfExchange = orgOfficeOfExchangeVO.getCode();
			                    String originPort=findNearestAirportOfCity(mailbagvo.getCompanyCode(),orgOfficeOfExchange);
			                    mailbagvo.setOrigin(originPort);
						}}}
					Page<OfficeOfExchangeVO> destinationOfficeDetails=findOfficeOfExchange(mailbagvo.getCompanyCode(), doe, 1);
					if(destinationOfficeDetails!=null && !destinationOfficeDetails.isEmpty()){

						OfficeOfExchangeVO destOfficeOfExchangeVO = destinationOfficeDetails.iterator().next();
						if (destOfficeOfExchangeVO != null && destOfficeOfExchangeVO.getAirportCode() != null) {
							mailbagvo.setDestination(destOfficeOfExchangeVO.getAirportCode());
						}
						else  {if (destOfficeOfExchangeVO != null){
							  String destOfficeOfExchange = destOfficeOfExchangeVO.getCode();
			                    String destinationPort=findNearestAirportOfCity(mailbagvo.getCompanyCode(),destOfficeOfExchange);
			                    mailbagvo.setDestination(destinationPort);
						}}
					}
		}

/**
	 * @author U-1532
	 * findLatestContainerAssignmentForUldDelivery
	 * @param scannedMailDetailsVO
	 * @return
	 * @throws SystemException 
	 */
	public ContainerAssignmentVO findLatestContainerAssignmentForUldDelivery(
			ScannedMailDetailsVO scannedMailDetailsVO) throws SystemException {
		ContainerAssignmentVO containerAssignmentVO = null;

		if (scannedMailDetailsVO.getContainerNumber() != null) {
			containerAssignmentVO = Container.findLatestContainerAssignmentForUldDelivery(scannedMailDetailsVO);
		}
		return containerAssignmentVO;
	}
	
	public void validateContainerReusability(ContainerVO containerVO) throws SystemException, ContainerAssignmentException {
		if ("F".equals(containerVO.getAssignmentFlag())) {
			
			
		
			ContainerAssignmentVO latestContainerAssignmentVO = findLatestContainerAssignment(containerVO.getContainerNumber());
			if (latestContainerAssignmentVO!=null) {
           
			OperationalFlightVO operationalFlightVO = createOperationalFlightVO(latestContainerAssignmentVO);

			if ((isFlightClosedForOperations(operationalFlightVO) && checkForDepartedFlightAtd(latestContainerAssignmentVO)) && MailConstantsVO.FLAG_YES.equals(latestContainerAssignmentVO.getTransitFlag())) {
					throw new ContainerAssignmentException(		
						ContainerAssignmentException.ULD_ASSIGNED_IN_A_CLOSED_FLIGHT_BUT_IMPORT_OPERATION_MISSING,
                new Object[]{new StringBuilder().append(
                		latestContainerAssignmentVO.getCarrierCode()).append(" ").append(
                				latestContainerAssignmentVO.getFlightNumber()).append(" ")
								.append(latestContainerAssignmentVO.getFlightDate() != null ?
										latestContainerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat() : " ")
									.toString(),new StringBuilder().append(
				                    		latestContainerAssignmentVO.getAirportCode()).toString(),
									latestContainerAssignmentVO});
			} else {
				FlightFilterVO flightFilterVO = createFlightFilterVO(latestContainerAssignmentVO);
				Collection<FlightValidationVO> flightValidationVOs = validateFlight(flightFilterVO);
				if (flightValidationVOs != null && flightValidationVOs.size() == 1) {
					FlightValidationVO flightValidationVO = flightValidationVOs.iterator().next();
					if (FlightValidationVO.FLT_LEG_STATUS_TBC.equals(flightValidationVO.getFlightStatus())
							|| FlightValidationVO.FLT_STATUS_CANCELLED
									.equals(flightValidationVO.getFlightStatus())) {                     

						throw new ContainerAssignmentException(		
								ContainerAssignmentException.ULD_ASSIGNED_IN_A_CLOSED_FLIGHT_BUT_IMPORT_OPERATION_MISSING,
			                    new Object[]{new StringBuilder().append(
			                    		latestContainerAssignmentVO.getCarrierCode()).append(" ").append(
			                    				latestContainerAssignmentVO.getFlightNumber()).append(" ")
												.append(latestContainerAssignmentVO.getFlightDate() != null ?
														latestContainerAssignmentVO.getFlightDate().toDisplayDateOnlyFormat() : " ")
													.toString(),new StringBuilder().append(
								                    		latestContainerAssignmentVO.getAirportCode()).toString(),
													latestContainerAssignmentVO});
					}
				}            
			}

		}
		}
	}

	public OperationalFlightVO createOperationalFlightVO(ContainerAssignmentVO containerVO) {
		OperationalFlightVO operationalFlightVo = new OperationalFlightVO();
		operationalFlightVo.setCompanyCode(containerVO.getCompanyCode());
		operationalFlightVo.setCarrierId(containerVO.getCarrierId());
		operationalFlightVo.setFlightNumber(containerVO.getFlightNumber());
		operationalFlightVo.setFlightSequenceNumber(containerVO
				.getFlightSequenceNumber());
		operationalFlightVo.setPol(containerVO.getAirportCode());
		operationalFlightVo.setLegSerialNumber(containerVO.getLegSerialNumber());
		operationalFlightVo.setFlightDate(containerVO.getFlightDate());
		operationalFlightVo.setCarrierCode(containerVO.getCarrierCode());
		return operationalFlightVo;
	}

	public FlightFilterVO createFlightFilterVO(
			ContainerAssignmentVO containerVO){
		FlightFilterVO flightFilterVO = new FlightFilterVO();
		flightFilterVO.setCompanyCode(containerVO.getCompanyCode());		
		flightFilterVO.setStation(containerVO.getAirportCode());
		flightFilterVO.setDirection(MailConstantsVO.OPERATION_OUTBOUND);
		flightFilterVO.setActiveAlone(false);
		flightFilterVO.setFlightDate(containerVO.getFlightDate());
		flightFilterVO.setCarrierCode(containerVO.getCarrierCode());
		flightFilterVO.setFlightNumber(containerVO.getFlightNumber());
		log.log(Log.FINE, " ****** flightFilterVO***** ", flightFilterVO);
		return flightFilterVO;
	}
	
	
	
	public boolean checkForDepartedFlightAtd(ContainerAssignmentVO containerAssignmentVO) throws SystemException {
		Collection<FlightValidationVO> flightValidationVOs = null;
		if(containerAssignmentVO !=null){
			ContainerVO newContainerVO=new ContainerVO();
			newContainerVO.setCompanyCode(containerAssignmentVO.getCompanyCode());
			newContainerVO.setCarrierId(containerAssignmentVO.getCarrierId());
			newContainerVO.setFlightNumber(containerAssignmentVO.getFlightNumber());
			newContainerVO.setFlightSequenceNumber(containerAssignmentVO
					.getFlightSequenceNumber());
			newContainerVO.setAssignedPort(containerAssignmentVO.getAirportCode());
		flightValidationVOs = new FlightOperationsProxy()
				.validateFlightForAirport(createFlightFilterVO_atd(newContainerVO));
		if (flightValidationVOs != null) {
			for (FlightValidationVO flightValidationVO : flightValidationVOs) {
				if (flightValidationVO.getFlightSequenceNumber() == containerAssignmentVO
						.getFlightSequenceNumber()
						&& flightValidationVO.getLegSerialNumber() == containerAssignmentVO
								.getLegSerialNumber() && flightValidationVO.getAtd()!=null) {
					
						return true;
					
				
				}
			}
		}
    }
		return false;
	}
	
	public void releaseContainer(ContainerAssignmentVO containerAssignmentVO) {
		Container con = null;
		ContainerPK containerPK = new ContainerPK();
		containerPK.setCompanyCode(containerAssignmentVO.getCompanyCode());
		containerPK.setAssignmentPort(containerAssignmentVO.getAirportCode());
		containerPK.setCarrierId(containerAssignmentVO.getCarrierId());
		containerPK.setFlightNumber(containerAssignmentVO.getFlightNumber());
		containerPK.setFlightSequenceNumber(containerAssignmentVO.getFlightSequenceNumber());
		containerPK.setLegSerialNumber(containerAssignmentVO.getLegSerialNumber());
		containerPK.setContainerNumber(containerAssignmentVO.getContainerNumber());
		try {
			con = Container.find(containerPK);
		} catch (FinderException | SystemException e) {
			log
			.log(Log.INFO,
					"Finder exception found",e);
		}
		if (con != null) {
			con.setTransitFlag(MailConstantsVO.FLAG_NO);
		}
	}
	
	private void validateAndReleasePreviousAssignment(ContainerVO containerVOToSave) throws SystemException {

		containerVOToSave.setAssignmentFlag("F");    
			try {
				new MailController().validateContainerReusability(containerVOToSave);
			} catch (ContainerAssignmentException e) {
				log.log(Log.INFO,"ContainerAssignmentException",e);
				if(e.getMessage()!=null && e.getMessage().equals(ContainerAssignmentException.ULD_ASSIGNED_IN_A_CLOSED_FLIGHT_BUT_IMPORT_OPERATION_MISSING)){
					ContainerAssignmentVO latestContainerAssignmentVO = findLatestContainerAssignment(containerVOToSave.getContainerNumber());
					releaseContainer(latestContainerAssignmentVO);      
					
				}
			}
		 
			
		}


	private void updateAirportDetails(MailInConsignmentVO mailInConsignmentVO, ArrayList<CarditReferenceInformationVO> referenceVOs,
			String transportReference) throws SystemException {
		
		if(referenceVOs!=null && !referenceVOs.isEmpty()){
			for(CarditReferenceInformationVO carditReferenceInformationVO:referenceVOs){
				if(carditReferenceInformationVO.getTransportContractReferenceQualifier()!=null && !carditReferenceInformationVO.getTransportContractReferenceQualifier().isEmpty()
						&& transportReference.equals(carditReferenceInformationVO.getTransportContractReferenceQualifier())){
					
					String consignmentContractReference= carditReferenceInformationVO.getConsignmentContractReferenceNumber();
					if(consignmentContractReference!=null && !consignmentContractReference.isEmpty() &&
						(consignmentContractReference.trim().length()==6 &&
								("ERN".contentEquals(carditReferenceInformationVO.getTransportContractReferenceQualifier())||
										"AWN".contentEquals(carditReferenceInformationVO.getTransportContractReferenceQualifier())	))){
							Collection<String> officeOfExchanges = new ArrayList<>();
								officeOfExchanges.add(carditReferenceInformationVO.getConsignmentContractReferenceNumber());
								HashMap<String, String>  resultSetMap = findAirportForOfficeOfExchange(mailInConsignmentVO.getCompanyCode(), officeOfExchanges);
								
								if (resultSetMap != null && resultSetMap.containsKey(
											carditReferenceInformationVO.getConsignmentContractReferenceNumber()))
											{
										consignmentContractReference = resultSetMap
												.get(carditReferenceInformationVO.getConsignmentContractReferenceNumber());
									

								}  
						
					}
					
					if("ERN".contentEquals(carditReferenceInformationVO.getTransportContractReferenceQualifier())
							&& (mailInConsignmentVO.getMailOrigin() == null
							|| "".equals(mailInConsignmentVO.getMailOrigin()))){
						
						mailInConsignmentVO.setMailOrigin(consignmentContractReference);
					}else if ("AWN".contentEquals(carditReferenceInformationVO.getTransportContractReferenceQualifier())
							&& (mailInConsignmentVO.getMailDestination() == null
							|| "".equals(mailInConsignmentVO.getMailDestination()))){
						mailInConsignmentVO.setMailDestination(consignmentContractReference);
					}
					else{    
						//do nothing
					}
				}
						
				
				
			}
		}
		
	}



/**
	 * 	Method		:	MailController.saveFligthLoadPlanForMail
	 *	Added by 	:	A-3429 on 01-July-2022
	 * 	Used for 	:
	 *	Parameters	:	@param flightLoanPlanContainerVOs 
	 *	Return type	: 	void
	 * @throws SystemException 
	 * @throws BusinessException 
	 */
   	public void saveFligthLoadPlanForMail(Collection<FlightLoadPlanContainerVO> flightLoadPlanContainerVOs) throws SystemException, BusinessException {
   		for(FlightLoadPlanContainerVO loanPlanContainerVO: flightLoadPlanContainerVOs){
   			SaveLoadPlanDetailsForMailFeature saveLoadPlanDetailsForMailFeature = (SaveLoadPlanDetailsForMailFeature) SpringAdapter.getInstance().getBean(SaveLoadPlanDetailsForMailFeatureConstants.SAVE_LOADPLAN_FEATURE);
   			saveLoadPlanDetailsForMailFeature.execute(loanPlanContainerVO);
   		}		
   	}  
/**
       * 
        *     Method       :      MailController.findLoadPlandetails
       *     Added by     :      A-9477 on 13-JUL-2022
       *     Used for     :
       *     Parameters   :      @param searchContainerFilterVO
       *     Parameters   :      @throws
       *     Return type  :      FlightLoanPlanContainerVO
       */
	public Collection<FlightLoadPlanContainerVO> findLoadPlandetails(SearchContainerFilterVO searchContainerFilterVO) {
		Collection<FlightLoadPlanContainerVO> flightLoadPlanContainerVOs = null;
		try {
			flightLoadPlanContainerVOs = constructDAO().findLoadPlandetails(searchContainerFilterVO);
		} catch (SystemException e) {
			log.log(Log.INFO, e);
		}
		return flightLoadPlanContainerVOs;
	}
	/**
	 * 
	 * 	Method		:	MailController.saveConsignmentDetailsMaster
	 *	Added by 	:	A-10383 on 18-July-2022
	 * 	Used for 	:
	 *	Parameters	:	@param consignmentDocumentVO
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	void
	 */
	public void saveConsignmentDetailsMaster(ConsignmentDocumentVO  consignmentDocumentVO) 
			throws SystemException {
		if (Objects.nonNull(consignmentDocumentVO)) {
			
			ConsignmentDocument consignmentDocument = ConsignmentDocument.find(consignmentDocumentVO);
			if("SM".equals(consignmentDocumentVO.getSecurityReasonCode()))
			{
				consignmentDocument.setConsignmentIssuerName(consignmentDocumentVO.getConsignmentIssuerName());
			}
			else if(null!=consignmentDocumentVO.getSecurityStatusCode())
			{
				consignmentDocument.setSecurityStatusCode(consignmentDocumentVO.getSecurityStatusCode());
			}
			else
			{
			consignmentDocument.setAdditionalSecurityInfo(consignmentDocumentVO.getAdditionalSecurityInfo());
			}
		}
	}
	
	/**
	 * @author A-8353
	 * @param containerDetailsVOs
	 * @param operationalFlightVO
	 * @throws SystemException
	 * @throws ProxyException
	 */
	void performEUValidations(Collection<ContainerDetailsVO> containerDetailsVOs,
			OperationalFlightVO operationalFlightVO) throws SystemException {
		if (containerDetailsVOs != null && !containerDetailsVOs.isEmpty()) {
			for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
				if (containerDetailsVO.getMailDetails() != null && !containerDetailsVO.getMailDetails().isEmpty()) {
					checkAndPerformEUValidation(containerDetailsVO.getMailDetails(), operationalFlightVO,
							containerDetailsVO.getPou());
				}
			}
		}

	}

	/**
	 * @author A-8353
	 * @param mailDetails
	 * @param operationalFlightVO
	 * @param containerNumber
	 * @param containerPou
	 * @throws SystemException
	 * @throws ProxyException
	 */
	private void checkAndPerformEUValidation(Collection<MailbagVO> mailDetails, OperationalFlightVO operationalFlightVO,
			String containerPou) throws SystemException {
		if (checkForEuNonEuAirport(operationalFlightVO, containerPou)) {
			updateAndSaveACC3Identifier(mailDetails, operationalFlightVO, containerPou);


		}
		saveRAIdentifierForMailbag(mailDetails, operationalFlightVO);  

	}

	/**
	 * @author A-8353
	 * @param operationalFlightVO
	 * @param containerPou
	 * @return
	 * @throws SystemException
	 */
	private boolean checkForEuNonEuAirport(OperationalFlightVO operationalFlightVO, String containerPou)
			throws SystemException {
		Collection<String> airportCodes = new ArrayList<>();
		boolean isNonEuAirport = false;
		if (operationalFlightVO != null && operationalFlightVO.getPol() != null
				&& operationalFlightVO.getFlightRoute() != null) {
			String origin = operationalFlightVO.getPol();
			String nextPOU = null;
			nextPOU = findPouFromRoute(operationalFlightVO, containerPou, airportCodes, origin, nextPOU);
			try {
				isNonEuAirport = isEuNonEuStampingRequired(operationalFlightVO, airportCodes, isNonEuAirport, origin,
						nextPOU);
			} catch (SharedProxyException proxyException) {
				log.log(Log.SEVERE, proxyException);
				throw new SystemException(proxyException.getMessage());
			}
			if (isNonEuAirport) {
				isNonEuAirport = checkForGreenCountry(operationalFlightVO, origin);
			}
		}

		return isNonEuAirport;
	}

	/**
	 * @author A-8353
	 * @param operationalFlightVO
	 * @param containerPou
	 * @return
	 * @throws SystemException
	 */
	private Collection<FlightValidationVO> validateFlightAndUpdate(OperationalFlightVO operationalFlightVO,
			String containerPou, boolean operationReferenceRequired) throws SystemException {
		Collection<FlightValidationVO> flightValidationVOs;
		FlightFilterVO flightFilterVO = new FlightFilterVO();
		flightFilterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
		flightFilterVO.setFlightCarrierId(operationalFlightVO.getCarrierId());
		flightFilterVO.setFlightNumber(operationalFlightVO.getFlightNumber());
		flightFilterVO.setFlightSequenceNumber(operationalFlightVO.getFlightSequenceNumber());
		flightFilterVO.setOrigin(operationalFlightVO.getPol());
		flightFilterVO.setDestination(containerPou);
		String stringFlightDate = TimeConvertor.toStringFormat(operationalFlightVO.getFlightDate(),
				TimeConvertor.ADVANCED_DATE_FORMAT);
		stringFlightDate = stringFlightDate.substring(0, 16);
		flightFilterVO.setStringFlightDate(stringFlightDate);
		if (operationReferenceRequired) {
			flightFilterVO.setOperationReference(true);
			try {
				flightValidationVOs = Proxy.getInstance().get(FlightOperationsProxy.class)
						.getNonReferenceFlights(flightFilterVO);
			} catch (ProxyException e) {
				log.log(Log.SEVERE, e);
				throw new SystemException(e.getMessage());
			}
		} else {
			flightFilterVO.setOperationReference(false);
			try {
				flightValidationVOs = Proxy.getInstance().get(FlightOperationsProxy.class)
						.validateFlight(flightFilterVO);
			} catch (ProxyException e) {
				log.log(Log.SEVERE, e);
				throw new SystemException(e.getMessage());
			}

		}
		return flightValidationVOs;
	}

	/**
	 * @author A-8353
	 * @param operationalFlightVO
	 * @param containerPou
	 * @param airlineFilterVO
	 * @throws SystemException
	 */
	private void findFlightOwnerIdentifier(OperationalFlightVO operationalFlightVO, String containerPou,
			AirlineFilterVO airlineFilterVO) throws SystemException {
		FlightValidationVO flightValidationVo = new FlightValidationVO();
		if (operationalFlightVO.getFltOwner() != null) {
			flightValidationVo.setFlightOwner(operationalFlightVO.getFltOwner());
		} else {
			Collection<FlightValidationVO> flightValidationVos = null;
			flightValidationVos = validateFlightAndUpdate(operationalFlightVO, containerPou, false);
			if (flightValidationVos != null && !flightValidationVos.isEmpty()) {
				flightValidationVo = flightValidationVos.iterator().next();
			}

		}

		if (flightValidationVo.getFlightOwner() != null) {
			try {
				AirlineValidationVO airlineValidationVO = Proxy.getInstance().get(SharedAirlineProxy.class)
						.validateAlphaCode(operationalFlightVO.getCompanyCode(), flightValidationVo.getFlightOwner());
				airlineFilterVO.setAirlineIdentifier(airlineValidationVO.getAirlineIdentifier());
			} catch (SharedProxyException e) {
				log.log(Log.SEVERE, e);
				throw new SystemException(e.getMessage());
			}
		}
	}

	/**
	 * @author A-8353
	 * @param operationalFlightVO
	 * @param airlineFilterVO
	 * @return
	 * @throws SystemException
	 */
	private String findAirlineParameter(OperationalFlightVO operationalFlightVO, AirlineFilterVO airlineFilterVO)
			throws SystemException {
		String parameterValue = null;
		Collection<String> airlineParameterCode = new ArrayList<>();
		Map<String, String> airlineMap;

		if ("C".equals(operationalFlightVO.getFlightType())) {
			airlineParameterCode.add("shared.airline.ACC3CarrierCodeforCargoonlyAircraft");
			try {
				airlineMap = Proxy.getInstance().get(SharedAirlineProxy.class).findAirlineParametersByCode(
						operationalFlightVO.getCompanyCode(), airlineFilterVO.getAirlineIdentifier(),
						airlineParameterCode);
			} catch (ProxyException e) {
				log.log(Log.SEVERE, e);
				throw new SystemException(e.getMessage());
			}
			if (airlineMap != null && airlineMap.size() > 0) {
				parameterValue = airlineMap.get("shared.airline.ACC3CarrierCodeforCargoonlyAircraft")
						.toUpperCase(Locale.ENGLISH);
			}
		} else {
			if ("CO".equals(operationalFlightVO.getFlightType())) {
				airlineParameterCode.add("shared.airline.ACC3CarrierCodeforPassengerAircraft");
				try {
					airlineMap = Proxy.getInstance().get(SharedAirlineProxy.class).findAirlineParametersByCode(
							operationalFlightVO.getCompanyCode(), airlineFilterVO.getAirlineIdentifier(),
							airlineParameterCode);
				} catch (ProxyException e) {
					log.log(Log.SEVERE, e);
					throw new SystemException(e.getMessage());
				}
				if (airlineMap != null && airlineMap.size() > 0) {
					parameterValue = airlineMap.get("shared.airline.ACC3CarrierCodeforPassengerAircraft")
							.toUpperCase(Locale.ENGLISH);
				}
			}
		}
		return parameterValue;
	}

	/**
	 * @author A-8353
	 * @param mailDetails
	 * @param operationalFlightVO
	 * @param parameterValue
	 * @param alternateArpcode 
	 * @param airlineVO
	 * @throws SystemException
	 */
	private void saveRcIdentifierForMailbag(Collection<MailbagVO> mailDetails, OperationalFlightVO operationalFlightVO,
			String parameterValue, AirlineFilterVO airlineFilterVO, String alternateArpCode) throws SystemException {
		if (parameterValue != null) {
			AirlineVO airlineVO = null;
			try {
				airlineVO = Proxy.getInstance().get(SharedAirlineProxy.class).findAirlineDetails(
						operationalFlightVO.getCompanyCode(), airlineFilterVO.getAirlineIdentifier());
			} catch (ProxyException e) {
				log.log(Log.SEVERE, e);
				throw new SystemException(e.getMessage());
			}
			StringBuilder certificatNumber = null;
			if (alternateArpCode!=null){
			certificatNumber = new StringBuilder().append(operationalFlightVO.getCountryCode())
					.append(alternateArpCode).append("-").append(parameterValue);
			}
			else{
				certificatNumber = new StringBuilder().append(operationalFlightVO.getCountryCode())
					.append(operationalFlightVO.getPol()).append("-").append(parameterValue);
			}
			Collection<ConsignmentScreeningVO> consignmentScreeningVosSave = new ArrayList<>();
			Collection<ConsignmentScreeningVO> consignmentScreeningVosEdit = new ArrayList<>();
			for (MailbagVO mailbagVO : mailDetails) {
				ConsignmentScreeningVO consignmentScreeningVO = new ConsignmentScreeningVO();
				ConsignmentScreeningVO consignmentScreeningVo = null;
				consignmentScreeningVo = constructDAO().findRegulatedCarrierForMailbag(
						operationalFlightVO.getCompanyCode(), mailbagVO.getMailSequenceNumber());
				consignmentScreeningVO.setScreenLevelValue(MailConstantsVO.SCREEN_LEVEL_VALUE);
				consignmentScreeningVO.setSecurityReasonCode(MailConstantsVO.SECURITY_REASON_CODE_CONSIGNOR);
				consignmentScreeningVO.setCompanyCode(operationalFlightVO.getCompanyCode());
				consignmentScreeningVO.setSource("FLTCLS");
				consignmentScreeningVO.setAgentType("RC");
				consignmentScreeningVO.setAgentID(certificatNumber.toString().toUpperCase(Locale.ENGLISH));
				consignmentScreeningVO.setIsoCountryCode(airlineVO.getBillingCountry());
				consignmentScreeningVO.setMalseqnum(mailbagVO.getMailSequenceNumber());
				consignmentScreeningVO.setScreeningLocation(operationalFlightVO.getPol());
				if (consignmentScreeningVo != null
						&& !consignmentScreeningVO.getAgentID().equals(consignmentScreeningVo.getAgentID())) {
					consignmentScreeningVO.setSerialNumber(consignmentScreeningVo.getSerialNumber());
					consignmentScreeningVosEdit.add(consignmentScreeningVO);
				} else {
					if (consignmentScreeningVo == null) {
						consignmentScreeningVosSave.add(consignmentScreeningVO);
					}
				}

			}
			if (!consignmentScreeningVosEdit.isEmpty()) {
				editscreeningDetails(consignmentScreeningVosEdit);
			}
			if (!consignmentScreeningVosSave.isEmpty()) {
				saveSecurityDetails(consignmentScreeningVosSave);
			}
		}
	}

	/**
	 * @author A-8353
	 * @param operationalFlightVO
	 * @param containerPou
	 * @param airportCodes
	 * @param origin
	 * @param nextPOU
	 * @return
	 */
	private String findPouFromRoute(OperationalFlightVO operationalFlightVO, String containerPou,
			Collection<String> airportCodes, String origin, String nextPOU) {
		String[]routes = operationalFlightVO.getFlightRoute().split("-");
		for(int i=0;i<routes.length;i++){
			if( containerPou.equals(routes[i])){  
				nextPOU= routes[i] ; 
				break;
			}
		}  
		airportCodes.add(origin);
		airportCodes.add(nextPOU);
		return nextPOU;
	}

	/**
	 * @author A-8353
	 * @param operationalFlightVO
	 * @param airportCodes
	 * @param cityCodes
	 * @param originCity
	 * @param nxtPOUCity
	 * @param isNonEuAirport
	 * @param origin
	 * @param nextPOU
	 * @return
	 * @throws SystemException
	 * @throws SharedProxyException
	 */
	private boolean isEuNonEuStampingRequired(OperationalFlightVO operationalFlightVO, Collection<String> airportCodes,
			boolean isNonEuAirport, String origin, String nextPOU) throws SystemException, SharedProxyException {
		Map<String, CityVO> cityMap;
		Set<String> cityCodes = new HashSet<>();
		CityVO originCity = null;
		CityVO nxtPOUCity = null;
		Map<String, AirportValidationVO> validAirportCodes = Proxy.getInstance().get(SharedAreaProxy.class)
				.validateAirportCodes(operationalFlightVO.getCompanyCode(), airportCodes);
		if (validAirportCodes != null && !validAirportCodes.isEmpty() && validAirportCodes.get(origin) != null) {
			cityCodes.add(validAirportCodes.get(origin).getCityCode());
			cityCodes.add(validAirportCodes.get(nextPOU).getCityCode());
		}
		if (!cityCodes.isEmpty()) {
			cityMap = Proxy.getInstance().get(SharedAreaProxy.class)
					.validateCityCodes(operationalFlightVO.getCompanyCode(), cityCodes);
			if (cityMap != null && cityMap.size() > 0 && validAirportCodes != null
					&& validAirportCodes.get(origin) != null) {
				originCity = cityMap.get(validAirportCodes.get(origin).getCityCode());
				nxtPOUCity = cityMap.get(validAirportCodes.get(nextPOU).getCityCode());
			}
		}
		if (originCity != null && MailConstantsVO.NON_EU_INDICATOR.equals(originCity.getEuNonEuIndicator())
				&& nxtPOUCity != null && MailConstantsVO.EU_INDICATOR.equals(nxtPOUCity.getEuNonEuIndicator())) {
			isNonEuAirport = true;
		}
		return isNonEuAirport;
	}

	/**
	 * @author A-8353
	 * @param shipmentDetailVO
	 * @return
	 * @throws SystemException
	 */
	private boolean checkForGreenCountry(OperationalFlightVO operationalFlightVO, String origin)
			throws SystemException {
		boolean isNotGreenCountryAirport = true;
		String countryMemberGroup = findCountryMemberGroupforAirport(operationalFlightVO, origin);
		if (countryMemberGroup != null && countryMemberGroup.trim().length() > 0) {
			String[] countryMember = countryMemberGroup.split(",");
			for (String member : countryMember) {
				if (MailConstantsVO.GREEN.equals(member)) {
					isNotGreenCountryAirport = false;
					break;
				}
			}
		}
		return isNotGreenCountryAirport;
	}

	public String findCountryMemberGroupforAirport(OperationalFlightVO operationalFlightVO, String originCode)
			throws SystemException {
		String countryMemberGroup = null;
		Collection<String> airportCodes = new ArrayList<>();
		airportCodes.add(originCode);
		Map<String, AirportValidationVO> validAirportCodes = Proxy.getInstance().get(SharedAreaProxy.class)
				.validateAirportCodes(operationalFlightVO.getCompanyCode(), airportCodes);
		if (validAirportCodes != null && validAirportCodes.size() > 0 && validAirportCodes.get(originCode) != null) {
			String cuntryCode = null;
			cuntryCode = validAirportCodes.get(originCode).getCountryCode();
			if (cuntryCode != null) {
				operationalFlightVO.setCountryCode(cuntryCode);
				try {
					countryMemberGroup = validateCountryCode(operationalFlightVO.getCompanyCode(), cuntryCode,
							countryMemberGroup);
				} catch (SharedProxyException e) {
					log.log(Log.SEVERE, e);
					throw new SystemException(e.getMessage());
				}
			}
		}
		return countryMemberGroup;
	}

	/**
	 * @author A-8353
	 * @param companyCode
	 * @param countryCode
	 * @param countryMemberGroup
	 * @return
	 * @throws SystemException
	 * @throws SharedProxyException
	 */
	private static String validateCountryCode(String companyCode, String cuntryCode, String countryMemberGroup)
			throws SystemException, SharedProxyException {
		CountryVO countryVO;
		ArrayList<String> countries;
		Map<String, CountryVO> country;
		countries = new ArrayList<>();
		countries.add(cuntryCode);
		country = Proxy.getInstance().get(SharedAreaProxy.class).validateCountryCodes(companyCode, countries);
		if (country != null) {
			countryVO = country.get(cuntryCode);
			countryMemberGroup = countryVO.getMemberGroupCode();
		}
		return countryMemberGroup;
	}
	
	/**
       * 
        *     Method       :      MailController.saveRAIdentifierForMailbag
       *     Added by     :      A-9477 on 29-JUL-2022
       *     Used for     :    Stamping the RA accept valueS during the flight closure.
       *     Parameters   :      @param mailDetails ,operationalFlightVO 
       *     Parameters   :      @throws SystemException
       *     Return type  :      
       */

	private void saveRAIdentifierForMailbag(Collection<MailbagVO> mailDetails, OperationalFlightVO operationalFlightVO)
			throws SystemException {

		if (operationalFlightVO != null) {
			Collection<AirlineAirportParameterVO> airportParameterVO = findAirlineAirportParameter(operationalFlightVO);
			String thirdPartyRaIssue = null;
			String countryAgentVal = null;
			String raAcceptanceValidationOverride = null;

			for (AirlineAirportParameterVO parvo : airportParameterVO) {
				if (parvo.getParameterCode().equals(THIRDPARTYRA_ISSUE_MAIL)) {
					thirdPartyRaIssue = parvo.getParameterValue();
				}
				if (parvo.getParameterCode().equals(REGULATED_AGENTACCEPTING_MAIL)) {
					countryAgentVal = parvo.getParameterValue();
				}
				if (parvo.getParameterCode().equals(RA_ACCEPTANCE_VALIDATION_OVERRIDE)) {
					raAcceptanceValidationOverride = parvo.getParameterValue();
				}
			}
	
			String country=null;
			String raid=null;
			if(countryAgentVal!=null){
			 country = countryAgentVal.substring(0, 2);
			 raid = countryAgentVal.substring(3);
			}
			Collection<ConsignmentScreeningVO> consignmentScreeningVosSave = new ArrayList<>();

			for (MailbagVO mailbagVO : mailDetails) {
				stampRaValues(operationalFlightVO, thirdPartyRaIssue, raAcceptanceValidationOverride, country, raid,
						consignmentScreeningVosSave, mailbagVO);
			}

			if (!consignmentScreeningVosSave.isEmpty()) {
				saveSecurityDetails(consignmentScreeningVosSave);
			}
		}
	}

	private void stampRaValues(OperationalFlightVO operationalFlightVO, String thirdPartyRaIssue,
			String raAcceptanceValidationOverride, String country, String raid,
			Collection<ConsignmentScreeningVO> consignmentScreeningVosSave, MailbagVO mailbagVO)
			throws SystemException {
		Collection<ConsignmentScreeningVO> consignmentScreeningVos = constructDAO()
				.findRAacceptingForMailbag(operationalFlightVO.getCompanyCode(), mailbagVO.getMailSequenceNumber());
		List<ConsignmentScreeningVO> raAcceptVos = findRAacceptVos(operationalFlightVO, consignmentScreeningVos);

		if (raAcceptVos.isEmpty()) {
			List<String> statusCodes = new ArrayList<>();
			statusCodes.add("SPX");
			statusCodes.add("SHR");
			statusCodes.add("SCO");
			List<ConsignmentScreeningVO> riIssueVos = findRIissueVos(consignmentScreeningVos);
				boolean isContainScc=false;
			if (mailbagVO.getSecurityStatusCode() != null) {
				isContainScc = statusCodes.stream().anyMatch(value -> value.equals(mailbagVO.getSecurityStatusCode()));
					

			}
			if (!riIssueVos.isEmpty() && isContainScc && MailConstantsVO.FLAG_YES.equals(thirdPartyRaIssue)) {

				constructConsignmentScreeningVo(operationalFlightVO, country, raid, consignmentScreeningVosSave,
						mailbagVO);
			} else {

				String previousAirport = findRoutingDetailsForMailbag(operationalFlightVO.getCompanyCode(),
						mailbagVO.getMailSequenceNumber(), operationalFlightVO.getPol());
		
				if (MailConstantsVO.FLAG_NO.equals(thirdPartyRaIssue)
						&& (!riIssueVos.isEmpty()
								&& checkRaissueInPreviousairport(riIssueVos, previousAirport, operationalFlightVO))
						&& isContainScc) {
					constructConsignmentScreeningVo(operationalFlightVO, country, raid, consignmentScreeningVosSave,
							mailbagVO);
				} else {

					boolean isNotGreenCountryAirport = checkForGreenCountry(operationalFlightVO, previousAirport);
					if (!isNotGreenCountryAirport && MailConstantsVO.FLAG_YES.equals(raAcceptanceValidationOverride)) {
						constructConsignmentScreeningVo(operationalFlightVO, country, raid, consignmentScreeningVosSave,
								mailbagVO);
					} else {
						if (!isNotGreenCountryAirport && isContainScc) {
							constructConsignmentScreeningVo(operationalFlightVO, country, raid,
									consignmentScreeningVosSave, mailbagVO);

						}
					}
				}
			}
		}
	}

	private void constructConsignmentScreeningVo(OperationalFlightVO operationalFlightVO, String country, String raid,
			Collection<ConsignmentScreeningVO> consignmentScreeningVosSave, MailbagVO mailbagVO) {
		ConsignmentScreeningVO consignmentScreeningVO = new ConsignmentScreeningVO();
		consignmentScreeningVO.setScreenLevelValue(MailConstantsVO.SCREEN_LEVEL_VALUE);
		consignmentScreeningVO.setSecurityReasonCode(MailConstantsVO.SECURITY_REASON_CODE_CONSIGNOR);
		consignmentScreeningVO.setCompanyCode(operationalFlightVO.getCompanyCode());
		consignmentScreeningVO.setSource(FLT_CLS);
		consignmentScreeningVO.setAgentType(MailConstantsVO.RA_ACCEPTING);
		consignmentScreeningVO.setAgentID(raid);
		consignmentScreeningVO.setIsoCountryCode(country);
		consignmentScreeningVO.setMalseqnum(mailbagVO.getMailSequenceNumber());
		consignmentScreeningVO.setScreeningLocation(operationalFlightVO.getPol());
		consignmentScreeningVosSave.add(consignmentScreeningVO);
	}

	private List<ConsignmentScreeningVO> findRIissueVos(
			Collection<ConsignmentScreeningVO> consignmentScreeningVos) {
		return consignmentScreeningVos.stream().filter(value -> Objects.nonNull(value.getAgentType()))
				.filter(value -> (value.getAgentType().equals(MailConstantsVO.RA_ISSUING)))
				.collect(Collectors.toList());

	}

	private List<ConsignmentScreeningVO> findRAacceptVos(OperationalFlightVO operationalFlightVO,
			Collection<ConsignmentScreeningVO> consignmentScreeningVos) {
		return consignmentScreeningVos.stream().filter(value -> Objects.nonNull(value.getAgentType()))
				.filter(value -> value.getAgentType().equals(MailConstantsVO.RA_ACCEPTING))
				.filter(value -> Objects.nonNull(value.getScreeningLocation()))
				.filter(value -> value.getScreeningLocation().equals(operationalFlightVO.getPol()))
				.collect(Collectors.toList());
	}
			
	private boolean checkRaissueInPreviousairport(Collection<ConsignmentScreeningVO> consignmentScreeningVos,
			String previousAirport, OperationalFlightVO operationalFlightVO) {
		boolean checkRaIssue = false;

		if (!consignmentScreeningVos.stream().filter(value -> value.getScreeningLocation().equals(previousAirport))
				.collect(Collectors.toList()).isEmpty()
				&& consignmentScreeningVos.stream()
						.filter(value -> value.getScreeningLocation().equals(operationalFlightVO.getPol()))
						.collect(Collectors.toList()).isEmpty()) {
			checkRaIssue = true;
		}
		return checkRaIssue;

	}

	private Collection<AirlineAirportParameterVO> findAirlineAirportParameter(OperationalFlightVO operationalFlightVO)
			throws SystemException {
		AirlineAirportParameterFilterVO airlineAirportParameterFilterVO = new AirlineAirportParameterFilterVO();

		airlineAirportParameterFilterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
		airlineAirportParameterFilterVO.setAirlineId(operationalFlightVO.getCarrierId());
		airlineAirportParameterFilterVO.setAirportCode(operationalFlightVO.getPol());

		Collection<AirlineAirportParameterVO> airportParameterVO = new ArrayList<>();
		try {
			airportParameterVO = Proxy.getInstance().get(SharedAirlineProxy.class)
					.findAirlineAirportParameters(airlineAirportParameterFilterVO);
		} catch (ProxyException e) {
			log.log(Log.SEVERE, e);
			throw new SystemException(e.getMessage());
		}
		return airportParameterVO;
	}

	private String findRoutingDetailsForMailbag(String companyCode, long malseqnum, String airportCode) {
		String previousAirport = null;

		try {
			previousAirport = constructDAO().findRoutingDetailsForMailbag(companyCode, malseqnum, airportCode);
		} catch (SystemException e) {
			log.log(Log.INFO, e);
		}
		return previousAirport; 

	}  
   /**
	  * @author A-8353	
	  * @param consignmentScreeningVOs
	 * @throws SystemException 
	  */
	 void updateRegAgentForScreeningMethods(Collection<ConsignmentScreeningVO> consignmentScreeningVOs) throws SystemException {   
		 Optional<ConsignmentScreeningVO> consignmentScreeningVo = consignmentScreeningVOs.stream().filter(screeningVO->screeningVO.getAgentType()!=null
				 &&MailConstantsVO.RA_ISSUING.equals(screeningVO.getAgentType())).findFirst();
		 if (consignmentScreeningVo.isPresent()){
			 ConsignmentScreeningVO consignmentScreeningVO=consignmentScreeningVo.get();
			  long sernum= new ConsignmentScreeningDetails().findLatestRegAgentIssuing(consignmentScreeningVO);
			 Collection<ConsignmentScreeningVO>consignmentScreeningVos=null;
			 consignmentScreeningVos=new ConsignmentScreeningDetails().findScreeningMethodsForStampingRegAgentIssueMapping(consignmentScreeningVO);
			 if(consignmentScreeningVos!=null){
				 consignmentScreeningVos.forEach(consignmentScreening->consignmentScreening.setAgentSerialNumber(sernum));
				 editscreeningDetails(consignmentScreeningVos);
				 
			 }
		 }
	 }
    /**
     * @author A-8353
     * @param mailUploadVOs
     * @return
     */
	public Map<String, ErrorVO> saveSecurityScreeningFromService(SecurityAndScreeningMessageVO securityAndScreeningMessageVO) {
		Collection<MailbagVO> mailbagVOs =securityAndScreeningMessageVO.getMailbagVOs();
		Map<String, ErrorVO> errorMap = new HashMap<>();
		long malseqnum=0  ;
		for (MailbagVO mailbagVO:mailbagVOs){
			if("M".equals(mailbagVO.getType())){
						try {
				malseqnum=findMailSequenceNumber(mailbagVO.getMailbagId(), mailbagVO.getCompanyCode());
			} catch (SystemException exception) {
				 log.log(Log.INFO, exception);	
					errorMap.put(mailbagVO.getMailbagId(), new ErrorVO(exception.getMessage()));
			}
			if (malseqnum==0){
				errorMap.put(mailbagVO.getMailbagId(), new ErrorVO("Receptacle not present in  the system"));
			}
			else
			{
				try {
					mapConsignmentScreeningVoAndSave(malseqnum, mailbagVO);
				} catch (SystemException exception) {
					    log.log(Log.INFO, exception);	
						errorMap.put(mailbagVO.getMailbagId(), new ErrorVO(exception.getMessage()));
				}
				
			}
		 }
		}
		
		
		return errorMap;
	}
    /**
     * @author A-8353
     * @param malseqnum
     * @param mailbagVO
     * @throws SystemException 
     * @throws FinderException 
     */
	private void mapConsignmentScreeningVoAndSave(long malseqnum, MailbagVO mailbagVO) throws SystemException {
		mailbagVO.setMailSequenceNumber(malseqnum);
		saveMailSecurityStatus(mailbagVO);
		Map<Integer, List<ConsignmentScreeningVO>>  consignmentScreeningVOsGroupedByRaIssuing
		       = mailbagVO.getConsignmentScreeningVO().stream()
		       .collect(Collectors.groupingBy(ConsignmentScreeningVO::getMappingId)); 
		for (Map.Entry<Integer, List<ConsignmentScreeningVO>> entry: consignmentScreeningVOsGroupedByRaIssuing.entrySet()) {
			List <ConsignmentScreeningVO>consignmentScreeningVOs=entry.getValue();
			consignmentScreeningVOs.forEach(consignmentScreeningVo->consignmentScreeningVo.setMalseqnum(malseqnum));
			saveSecurityDetails(consignmentScreeningVOs);
			
		}
	}
	public  Map<String,String> findAirportParameterCode(FlightFilterVO flightFilterVO,Collection<String> parCodes)
			throws SystemException {
		String companyCode = flightFilterVO.getCompanyCode();
		String airport = flightFilterVO.getAirportCode();
       return  Proxy.getInstance().get(SharedAreaProxy.class)
			.findAirportParametersByCode(companyCode,airport,parCodes);
			}
	
	public Collection<com.ibsplc.icargo.business.operations.flthandling.vo.OperationalFlightVO> fetchMailIndicatorForProgress(
			Collection<FlightListingFilterVO> flightListingFilterVOs) {
		Collection<com.ibsplc.icargo.business.operations.flthandling.vo.OperationalFlightVO> operationalFlightVOs = null;
		
		try {
			operationalFlightVOs = constructDAO().fetchMailIndicatorForProgress(flightListingFilterVOs);
		} catch (SystemException e) {
			log.log(Log.INFO, e);
		}
		
		return operationalFlightVOs;
	}
	public boolean findPawbCountryValidation(CarditVO carditVO,ConsignmentDocumentVO consignmentDocumentVO) throws SystemException {
	   	String countryCodeForPawb = findSystemParameterValue("mail.operations.pawbcountryvalidation");
		boolean pawbCountryValidation = false;
		Collection<RoutingInConsignmentVO>routingVos =null;
		if(consignmentDocumentVO!=null && consignmentDocumentVO.getRoutingInConsignmentVOs()!=null) {
			routingVos = consignmentDocumentVO.getRoutingInConsignmentVOs();
		}
		Set<String> airportCodes = new HashSet<>();
		Collection<String> transitAirportCodes = new ArrayList<>();
		airportCodes.add(carditVO.getCarditPawbDetailsVO().getConsignmentOriginAirport());
		airportCodes.add(carditVO.getCarditPawbDetailsVO().getConsignmentDestinationAirport());
		if(routingVos!=null) {
		routingVos.forEach(routingVO -> 
			transitAirportCodes.add(routingVO.getPou())				

		);
		}
		airportCodes.addAll(transitAirportCodes);
		Set<String> countryCodes = new HashSet<>();
		Set<String> transitCountryCodes = new HashSet<>();
		countryCodes.addAll(transitCountryCodes);
			GeneralMasterGroupFilterVO filterVO = new GeneralMasterGroupFilterVO();
			filterVO.setCompanyCode(carditVO.getCompanyCode());
			filterVO.setGroupType(GeneralMasterGroupFilterVO.COUNTRY_GROUP);
			filterVO.setGroupName(countryCodeForPawb);
			filterVO.setGroupCategory("MAL");
			GeneralMasterGroupVO groupVO;
			ArrayList<GeneralMasterGroupDetailsVO> detailVOs =	null;
			Set<String> listOfPawbCountries = new HashSet<>();
			try {
				groupVO = Proxy.getInstance().get(SharedGeneralMasterGroupingProxy.class).listGeneralMasterGroup(filterVO);
				if(groupVO!=null) {
				detailVOs = (ArrayList<GeneralMasterGroupDetailsVO>) groupVO.getGroupDetailsVOs();
				detailVOs.forEach(detailVO ->
					listOfPawbCountries.add(detailVO.getGroupedEntity())
				);
				}
				Map<String,AirportValidationVO> airportValidationVos =Proxy.getInstance().get(SharedAreaProxy.class).validateAirportCodes(carditVO.getCompanyCode(), airportCodes); 
				if (airportValidationVos != null && !airportValidationVos.isEmpty() ) {
					if(listOfPawbCountries.contains(airportValidationVos.get(carditVO.getCarditPawbDetailsVO().getConsignmentOriginAirport()).getCountryCode())) {
						return pawbCountryValidation;
					}else if(listOfPawbCountries.contains(airportValidationVos.get(carditVO.getCarditPawbDetailsVO().getConsignmentDestinationAirport()).getCountryCode())) {
						pawbCountryValidation =true;
					}else {
						if(transitAirportCodes.stream().anyMatch(airport->listOfPawbCountries.contains(airportValidationVos.get(airport).getCountryCode()))) {
							pawbCountryValidation = true;
						}
				}
				}
			} catch (ProxyException e) {
				log.log(Log.FINE,  e);
			}
			return pawbCountryValidation;
	}

    /**
     * @param mailMasterDataFilterVO
     * @throws SystemException
     * @throws RemoteException
     * @author 204082
     * Added for IASCB-159276 on 27-Sep-2022
     */
    public void publishMasterDataForMail(MailMasterDataFilterVO mailMasterDataFilterVO)
            throws SystemException, RemoteException {
        log.entering(MODULE, "publishMasterDataForMail");
        String masterType = mailMasterDataFilterVO.getMasterType();
        List<String> masterTypes = Arrays.asList(masterType.split(","));
        if (masterTypes.contains(MAIL_MASTER_DATA_TYPE_PACOD)) {
            publishGPADetails(mailMasterDataFilterVO.getCompanyCode());
        }

        if (masterTypes.contains(MAIL_MASTER_DATA_TYPE_MALBAGINF)) {
            publishMailbagDetails(mailMasterDataFilterVO);
        }

        if (masterTypes.contains(MAIL_MASTER_DATA_TYPE_SUBCLS)) {
            publishSubclassDetails(mailMasterDataFilterVO.getCompanyCode());
        }
        if (masterTypes.contains(MAIL_MASTER_DATA_TYPE_EXCHANGE_OFFICE)) {
            publishExchangeOfficeDetails(mailMasterDataFilterVO.getCompanyCode());
        }
        log.exiting(MODULE, "publishMasterDataForMail");
    }

    /**
     * @param companyCode
     * @throws SystemException
     * @throws PersistenceException
     * @author 204082
     * Added for IASCB-159276 on 27-Sep-2022
     */
    void publishGPADetails(String companyCode) throws SystemException {
        log.entering(MODULE, "publishGPADetails");
        Collection<PostalAdministrationVO> paDetails = getPADetails(companyCode);
        PostalAdministrationMessageVO postalAdministrationMessageVO = new PostalAdministrationMessageVO();
        postalAdministrationMessageVO.setCompanyCode(companyCode);
        postalAdministrationMessageVO.setMessageType("MAILMASTERDATA_GPO");
        postalAdministrationMessageVO.setMessageStandard(MessageConfigConstants.TXN_PUBLISH);
        postalAdministrationMessageVO.setPaDetails(paDetails);
        try {
            Proxy.getInstance().get(MsgBrokerMessageProxy.class).encodeAndSaveMessageAsync(postalAdministrationMessageVO);
        } catch (ProxyException proxyException) {
            log.log(Log.INFO, proxyException);
        }
        log.exiting(MODULE, "publishGPADetails");
    }

    /**
     * @param companyCode
     * @return PostalAdministrationVO
     * @throws SystemException
     * @throws PersistenceException
     * @author 204082
     * Added for IASCB-159276 on 27-Sep-2022
     */
    Collection<PostalAdministrationVO> getPADetails(String companyCode) throws SystemException {
        log.entering(MODULE, "getPADetails");
        return new Mailbag().getPADetails(companyCode);
    }
    /**
     * @param mailMasterDataFilterVO
     * @throws SystemException
     * @author 204082
     * Added for IASCB-159267 on 20-Oct-2022
     */
    void publishMailbagDetails(MailMasterDataFilterVO mailMasterDataFilterVO) throws SystemException {
        log.entering(MODULE, "publishMailbagDetails");
        Collection<MailbagDetailsVO> mailbagDetailsVOs = getMailbagDetails(mailMasterDataFilterVO);
        MailbagDetailsMessageVO mailbagDetailsMessageVO = new MailbagDetailsMessageVO();
        mailbagDetailsMessageVO.setCompanyCode(mailMasterDataFilterVO.getCompanyCode());
        mailbagDetailsMessageVO.setMessageType(MACC);
        mailbagDetailsMessageVO.setMessageStandard(PUBLISH);
        mailbagDetailsMessageVO.setMailbagDetailsVOs(mailbagDetailsVOs);
        try {
            Proxy.getInstance().get(MsgBrokerMessageProxy.class).encodeAndSaveMessageAsync(mailbagDetailsMessageVO);
        } catch (ProxyException proxyException) {
            log.log(Log.INFO, proxyException);
        }
        Collection<MailbagVO> mailBags = new ArrayList<>();
        for (MailbagDetailsVO mailbagDetailsVO : mailbagDetailsVOs) {
            MailbagVO mailbagVO = new MailbagVO();
            mailbagVO.setCompanyCode(mailMasterDataFilterVO.getCompanyCode());
            mailbagVO.setMailSequenceNumber(mailbagDetailsVO.getMailSequenceNumber());
            mailBags.add(mailbagVO);
        }
        updateInterfaceFlag(mailBags, "Y");
        log.exiting(MODULE, "publishMailbagDetails");
    }

    /**
     * @param mailMasterDataFilterVO
     * @return MailbagDetailsVO
     * @throws SystemException
     * @author 204082
     * Added for IASCB-159276 on 20-Oct-2022
     */
    Collection<MailbagDetailsVO> getMailbagDetails(MailMasterDataFilterVO mailMasterDataFilterVO) throws SystemException {
        return new Mailbag().getMailbagDetails(mailMasterDataFilterVO);
    }


    /**
     * @param companyCode
     * @throws SystemException
     * @author 204083
     * Added for IASCB-172488
     */
    void publishExchangeOfficeDetails(String companyCode) throws SystemException {
        log.entering(MODULE, "publishExchangeOfficeDetails");

        Collection<OfficeOfExchangeVO> officeOfExchangeDetails = getOfficeOfExchangeDetails(companyCode);
        OfficeOfExchangeMessageVO officeOfExchangeMessageVO = new OfficeOfExchangeMessageVO();
        officeOfExchangeMessageVO.setCompanyCode(companyCode);
        officeOfExchangeMessageVO.setMessageType("EXCHANGEOFFICE");
        officeOfExchangeMessageVO.setMessageStandard(PUBLISH);
        officeOfExchangeMessageVO.setOfficeOfExchangeDetails(officeOfExchangeDetails);

        try {
            Proxy.getInstance().get(MsgBrokerMessageProxy.class).encodeAndSaveMessageAsync(officeOfExchangeMessageVO);
        } catch (ProxyException proxyException) {
            log.log(Log.INFO, proxyException);
        }
        log.exiting(MODULE, "publishExchangeOfficeDetails");
    }

    /**
     * @param companyCode
     * @return OfficeOfExchangeVO
     * @throws SystemException
     * @throws PersistenceException
     * @author 204083
     * Added for IASCB-172488
     */
    public Collection<OfficeOfExchangeVO> getOfficeOfExchangeDetails(String companyCode) throws SystemException {
        log.entering(MODULE, "getOfficeOfExchangeDetails");
        return new Mailbag().getOfficeOfExchangeDetails(companyCode);
    }

	 /**
    * @author A-8353
    * @param securityScreeningValidationFilterVO
    * @return
    * @throws SystemException
    * @throws ProxyException 
    */
	public Collection<SecurityScreeningValidationVO> checkForSecurityScreeningValidation(
			SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO) throws SystemException, ProxyException {

		if (securityScreeningValidationFilterVO.getOriginCountry()!=null){
			findGeneralMasterGroup(securityScreeningValidationFilterVO.getOriginCountry(),securityScreeningValidationFilterVO,MailConstantsVO.ORG_COUNTRY);

		}
		if (securityScreeningValidationFilterVO.getDestinationCountry()!=null){
			findGeneralMasterGroup(securityScreeningValidationFilterVO.getDestinationCountry(),securityScreeningValidationFilterVO,MailConstantsVO.DEST_COUNTRY);

		}
		if (securityScreeningValidationFilterVO.getTransactionCountry()!=null){
			findGeneralMasterGroup(securityScreeningValidationFilterVO.getTransactionCountry(),securityScreeningValidationFilterVO,MailConstantsVO.TXN_COUNTRY);

		}
		if (securityScreeningValidationFilterVO.getTransactionAirport()!=null){
			findGeneralMasterGroup(securityScreeningValidationFilterVO.getTransactionAirport(),securityScreeningValidationFilterVO,MailConstantsVO.TXN_ARP);

		}
		if (securityScreeningValidationFilterVO.getSecurityStatusCode()!=null){
			findGeneralMasterGroup(securityScreeningValidationFilterVO.getSecurityStatusCode(),securityScreeningValidationFilterVO,MailConstantsVO.SCC_GRP);

		}
		CacheFactory factory = CacheFactory.getInstance();
		SecurityScreeningValidationCache cache = factory
				.getCache(SecurityScreeningValidationCache.ENTITY_NAME);
		return cache.checkForSecurityScreeningValidation(securityScreeningValidationFilterVO);

	}
	/**
	 * @author A-8353
	 * @param groupEntities
	 * @param securityScreeningValidationFilterVO
	 * @param group
	 * @throws ProxyException
	 * @throws SystemException
	 */
	private void findGeneralMasterGroup(String groupEntities,
			SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO, String group) throws ProxyException, SystemException {
		String groupCategorty="MALSECSCRN";
		String countryType="CNTGRP";
		String arpType="ARPGRP";
		String sccGroup=MailConstantsVO.SCC_GRP;
		Collection<String> groupNames = null;
		GeneralMasterGroupFilterVO generalMasterGroupFilterVO=new GeneralMasterGroupFilterVO ();
		if(MailConstantsVO.ORG_COUNTRY.equals(group)||MailConstantsVO.DEST_COUNTRY.equals(group)||MailConstantsVO.TXN_COUNTRY.equals(group)){
			populateGeneralMasterGroupFilterVO(generalMasterGroupFilterVO,securityScreeningValidationFilterVO.getCompanyCode(),
					groupCategorty,countryType,groupEntities);
			groupNames =
					Proxy.getInstance().get(SharedGeneralMasterGroupingProxy.class)
					.findGroupNamesOfEntity(generalMasterGroupFilterVO);
			if (groupNames != null){
				if(MailConstantsVO.ORG_COUNTRY.equals(group)){
					securityScreeningValidationFilterVO.setOriginAirportCountryGroup(groupNames.stream()
							.filter("ORGARPCNTGRP"::equals)
							.findAny()
							.orElse(null));
				}
				else if(MailConstantsVO.DEST_COUNTRY.equals(group)){
					securityScreeningValidationFilterVO.setDestAirportCountryGroup(groupNames.stream()
							.filter(DSTARPCNTGRP::equals)
							.findAny()
							.orElse(null));
				}
				else {
					securityScreeningValidationFilterVO.setTxnAirportCountryGroup(groupNames.stream()
							.filter("TXNARPCNTGRP"::equals)
							.findAny()
							.orElse(null));


				}
			}
		}
		else if (MailConstantsVO.TXN_ARP.equals(group)){
			populateGeneralMasterGroupFilterVO(generalMasterGroupFilterVO,securityScreeningValidationFilterVO.getCompanyCode(),
					groupCategorty,arpType,groupEntities);
			groupNames =
					Proxy.getInstance().get(SharedGeneralMasterGroupingProxy.class)
					.findGroupNamesOfEntity(generalMasterGroupFilterVO);
			if(groupNames != null){ 
				securityScreeningValidationFilterVO.setTxnAirportGroup(groupNames.stream()
						.filter("TXNARPGRP"::equals)
						.findAny()
						.orElse(null));
			}

		}

		else{
			populateGeneralMasterGroupFilterVO(generalMasterGroupFilterVO,securityScreeningValidationFilterVO.getCompanyCode(),
					groupCategorty,sccGroup,groupEntities);
			groupNames =
					Proxy.getInstance().get(SharedGeneralMasterGroupingProxy.class)
					.findGroupNamesOfEntity(generalMasterGroupFilterVO);
			if(groupNames != null){ 
				securityScreeningValidationFilterVO.setSecurityStatusCodeGroup(groupNames.stream()
						.filter("SCCGRP"::equals)
						.findAny()
						.orElse(null));
			}

		}


}

	/**
	 * @author A-8353
	 * @param generalMasterGroupFilterVO
	 * @param companyCode
	 * @param groupCategory
	 * @param groupType
	 * @param groupEntity
	 */
	private void populateGeneralMasterGroupFilterVO(
    		GeneralMasterGroupFilterVO generalMasterGroupFilterVO,
    		String companyCode,String groupCategory,String groupType,String groupEntity) {
    	 generalMasterGroupFilterVO.setCompanyCode(companyCode);
    	 generalMasterGroupFilterVO.setGroupCategory(groupCategory);
    	 generalMasterGroupFilterVO.setGroupType(groupType);
    	 generalMasterGroupFilterVO.setGroupEntity(groupEntity);
    }
    /**
     * @author A-8353
     * @param securityScreeningValidationFilterVO
     * @return
     * @throws SystemException 
     */
	public Collection<SecurityScreeningValidationVO> findSecurityScreeningValidations(
			SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO) throws SystemException {
		MailbagPK mailbagPk = new MailbagPK();
		mailbagPk.setCompanyCode(securityScreeningValidationFilterVO.getCompanyCode());
		Collection<SecurityScreeningValidationVO> securityScreeningValidationVOs = null;
		long sequencenum=Mailbag.findMailBagSequenceNumberFromMailIdr(securityScreeningValidationFilterVO.getMailbagId(), securityScreeningValidationFilterVO.getCompanyCode());
		if(sequencenum >0){
		mailbagPk.setMailSequenceNumber(sequencenum);
		}
			findMailbagForSecurityScreeningVal(securityScreeningValidationFilterVO, mailbagPk);
			findCountryCodesForSecurityScreeningValidation(securityScreeningValidationFilterVO);
			if(securityScreeningValidationFilterVO.isAppRegValReq()){
				populateApplicableRegulationFlagValidationDetails(securityScreeningValidationFilterVO,sequencenum);
			}
			try {
				securityScreeningValidationVOs = checkForSecurityScreeningValidation(securityScreeningValidationFilterVO);
			} catch (ProxyException e) {
				log.log(Log.INFO, e);	
			}
			return securityScreeningValidationVOs ;

	}

	/**
	 * @param securityScreeningValidationFilterVO
	 * @param mailbag
	 * @param mailbagPk
	 * @throws SystemException
	 */
	 void findMailbagForSecurityScreeningVal(
			SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO,
			MailbagPK mailbagPk) throws SystemException {
		 Mailbag  mailbag=null;
		try {
			mailbag=Mailbag.find(mailbagPk);
		} catch (FinderException e) {
			  log.log(Log.INFO, e);	
		}
		if(mailbag!=null){
			if(mailbag.getSecurityStatusCode()!=null){
				securityScreeningValidationFilterVO.setSecurityStatusCode(mailbag.getSecurityStatusCode());
			}
			else{
				securityScreeningValidationFilterVO.setSecurityStatusCode(MailConstantsVO.SECURITY_STATUS_CODE_NSC);
			}
			if(securityScreeningValidationFilterVO.getOriginAirport()==null){
				securityScreeningValidationFilterVO.setOriginAirport(mailbag.getOrigin());
			}
			if(securityScreeningValidationFilterVO.getDestinationAirport()==null){
				securityScreeningValidationFilterVO.setDestinationAirport(mailbag.getDestination());
			}
		}
		else{
			securityScreeningValidationFilterVO.setSecurityStatusCode(MailConstantsVO.SECURITY_STATUS_CODE_NSC);
		}
	}
	/**
	    * @author A-8353
	    * @param securityScreeningValidationFilterVO
	    */
		 void findCountryCodesForSecurityScreeningValidation(
				SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO) {
			Collection<String> airportCodes = new ArrayList<>();
			if(securityScreeningValidationFilterVO.getOriginAirport()!=null){
				airportCodes.add(securityScreeningValidationFilterVO.getOriginAirport());	
			}
			if(securityScreeningValidationFilterVO.getDestinationAirport()!=null){
				airportCodes.add(securityScreeningValidationFilterVO.getDestinationAirport());	
			}
			if (securityScreeningValidationFilterVO.getTransactionAirport()!=null){
				airportCodes.add(securityScreeningValidationFilterVO.getTransactionAirport());	
			}
			if (securityScreeningValidationFilterVO.getTransistAirport()!=null){
				airportCodes.add(securityScreeningValidationFilterVO.getTransistAirport());	
			}
			Map<String, AirportValidationVO> countryCodeMap = new HashMap<>();
			AirportValidationVO orgAirportValidationVO = null;
			AirportValidationVO desAirportValidationVO = null;
			AirportValidationVO txnAirportValidationVO = null;
			AirportValidationVO trasistAirportValidationVO = null;
			try {
				countryCodeMap = Proxy.getInstance().get(SharedAreaProxy.class).validateAirportCodes(securityScreeningValidationFilterVO.getCompanyCode(), airportCodes);
			} catch (SystemException e1) {
				log.log(Log.INFO, e1);
			}
			populateSecurityScreeningValidationFilterVoCountries(securityScreeningValidationFilterVO, countryCodeMap,
					orgAirportValidationVO, desAirportValidationVO, txnAirportValidationVO,trasistAirportValidationVO);
		}

	/**
	 * @author A-8353
	 * @param securityScreeningValidationFilterVO
	 * @param countryCodeMap
	 * @param orgAirportValidationVO
	 * @param desAirportValidationVO
	 * @param txnAirportValidationVO
	 * @param trasistAirportValidationVO 
	 */
	private void populateSecurityScreeningValidationFilterVoCountries(
			SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO,
			Map<String, AirportValidationVO> countryCodeMap, AirportValidationVO orgAirportValidationVO,
			AirportValidationVO desAirportValidationVO, AirportValidationVO txnAirportValidationVO, AirportValidationVO trasistAirportValidationVO) {
		if (countryCodeMap != null) {
			if(securityScreeningValidationFilterVO.getOriginAirport()!=null){
				orgAirportValidationVO = countryCodeMap.get(securityScreeningValidationFilterVO.getOriginAirport());
			}
			if(securityScreeningValidationFilterVO.getDestinationAirport()!=null){
				desAirportValidationVO = countryCodeMap.get(securityScreeningValidationFilterVO.getDestinationAirport());
			}
			if(securityScreeningValidationFilterVO.getTransactionAirport()!=null){
				txnAirportValidationVO= countryCodeMap.get(securityScreeningValidationFilterVO.getTransactionAirport());
			}
			if(securityScreeningValidationFilterVO.getTransistAirport()!=null){
				trasistAirportValidationVO= countryCodeMap.get(securityScreeningValidationFilterVO.getTransistAirport());
			}
			if (orgAirportValidationVO != null) {
				securityScreeningValidationFilterVO.setOriginCountry(orgAirportValidationVO.getCountryCode());
			}
			if (desAirportValidationVO != null) {
				securityScreeningValidationFilterVO.setDestinationCountry(desAirportValidationVO.getCountryCode());
			}
			if(txnAirportValidationVO!=null){
				securityScreeningValidationFilterVO.setTransactionCountry(txnAirportValidationVO.getCountryCode());
			}
			if(trasistAirportValidationVO!=null){
				securityScreeningValidationFilterVO.setAppRegTransistCountry(trasistAirportValidationVO.getCountryCode());
			}
		}
	}
    /**
     * @author A-8353
     * @param operationalFlightVO
     * @param selectedContainerVOs
     * @return
     * @throws SystemException
     */
	public SecurityScreeningValidationVO doSecurityAndScreeningValidationAtContainerLevel(
			OperationalFlightVO operationalFlightVO, Collection<ContainerVO> selectedContainerVOs) throws SystemException {
		Collection<ContainerDetailsVO> containerDetailsVOs=null;
		String transactionType=null;
		Collection<ContainerDetailsVO> containers=new ArrayList<>();
		for(ContainerVO containerVO :selectedContainerVOs){
			ContainerDetailsVO containerDetailsVO=new ContainerDetailsVO();
			containerDetailsVO.setCompanyCode(containerVO.getCompanyCode());
			containerDetailsVO.setFlightNumber(containerVO.getFlightNumber());
			containerDetailsVO.setFlightSequenceNumber(containerVO.getFlightSequenceNumber());
			containerDetailsVO.setCarrierId(containerVO.getCarrierId());
			containerDetailsVO.setLegSerialNumber(containerVO.getLegSerialNumber());
			containerDetailsVO.setPol(containerVO.getAssignedPort());  
			containerDetailsVO.setContainerNumber(containerVO.getContainerNumber());
			containerDetailsVO.setContainerType(containerVO.getType());
			containerDetailsVO.setPou(containerVO.getPou());
			transactionType=containerVO.getTransactionCode();
			containers.add(containerDetailsVO);
		}
		containerDetailsVOs =new MailController().findMailbagsInContainer(containers); 
		if(containerDetailsVOs!=null){
		return populateAndCheckSecuirtyScreeningValidationAtContainerLevel(operationalFlightVO, containerDetailsVOs,
				transactionType);
		}
		return null;
		
	}

	/**
	 * @author A-8353
	 * @param operationalFlightVO
	 * @param containerDetailsVOs
	 * @param transactionType
	 * @return
	 * @throws SystemException
	 */
	private SecurityScreeningValidationVO populateAndCheckSecuirtyScreeningValidationAtContainerLevel(
			OperationalFlightVO operationalFlightVO, Collection<ContainerDetailsVO> containerDetailsVOs,
			String transactionType) throws SystemException {
		Collection<SecurityScreeningValidationVO> securityScreeningValidationVOsColl=new ArrayList<>();
		for(ContainerDetailsVO containerDetailsVO:containerDetailsVOs){
			if(containerDetailsVO.getMailDetails()!=null&& !containerDetailsVO.getMailDetails().isEmpty()){
				for(MailbagVO mailbagVO:containerDetailsVO.getMailDetails()){  
					SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO = populateSecurityScreeningValidationFilterVoForContainer(
							operationalFlightVO, transactionType, mailbagVO,containerDetailsVO.getTransistPort());
					Collection<SecurityScreeningValidationVO>securityScreeningValidationVOs= findSecurityScreeningValidations(securityScreeningValidationFilterVO);
					if(securityScreeningValidationVOs!=null&&!securityScreeningValidationVOs.isEmpty()){
						Optional <SecurityScreeningValidationVO>securityScreeningValidationVO =securityScreeningValidationVOs.stream().filter(securityScreeningValidationVo->MailConstantsVO.ERROR.equals(securityScreeningValidationVo.getErrorType())).findFirst();
						if(securityScreeningValidationVO.isPresent()){
							securityScreeningValidationVO.get().setMailbagID(mailbagVO.getMailbagId());
							return securityScreeningValidationVO.get();
						}
						securityScreeningValidationVOs.forEach(securityScreeningValidationVo->securityScreeningValidationVo.setMailbagID(mailbagVO.getMailbagId()));
						securityScreeningValidationVOsColl.addAll(securityScreeningValidationVOs);
					}
				}
			}

		}
		return checkSecurityScreeningValidationVOsColl(securityScreeningValidationVOsColl);
	}

	/**
	 * @author A-8353
	 * @param securityScreeningValidationVOsColl
	 * @return
	 */
	private SecurityScreeningValidationVO checkSecurityScreeningValidationVOsColl(
			Collection<SecurityScreeningValidationVO> securityScreeningValidationVOsColl) {
		if(!securityScreeningValidationVOsColl.isEmpty()){
			return securityScreeningValidationVOsColl.iterator().next();

		}
		return null;
	}

	/**
	 * @author A-8353
	 * @param operationalFlightVO
	 * @param transactionType
	 * @param mailbagVO
	 * @param string 
	 * @return
	 */
	private SecurityScreeningValidationFilterVO populateSecurityScreeningValidationFilterVoForContainer(
			OperationalFlightVO operationalFlightVO, String transactionType, MailbagVO mailbagVO, String pou) {
		SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO= new SecurityScreeningValidationFilterVO();
			securityScreeningValidationFilterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
			if(MailConstantsVO.MAIL_STATUS_ARRIVED.equals(transactionType)){
				securityScreeningValidationFilterVO.setApplicableTransaction(MailConstantsVO.MAIL_STATUS_ARRIVED);
				securityScreeningValidationFilterVO.setFlightType(operationalFlightVO.getFlightType());
			}
			else if(!"-1".equals(operationalFlightVO.getFlightNumber())){
				securityScreeningValidationFilterVO.setApplicableTransaction(MailConstantsVO.MAIL_STATUS_ASSIGNED);
				securityScreeningValidationFilterVO.setFlightType(operationalFlightVO.getFlightType());
				securityScreeningValidationFilterVO.setAppRegValReq(true);
				securityScreeningValidationFilterVO.setTransistAirport(pou);
			}
			else{
				securityScreeningValidationFilterVO.setApplicableTransaction(MailConstantsVO.MAIL_STATUS_ACCEPTED);
				securityScreeningValidationFilterVO.setAppRegValReq(true);
			}
			securityScreeningValidationFilterVO.setTransactionAirport(operationalFlightVO.getPol());
			securityScreeningValidationFilterVO.setOriginAirport(mailbagVO.getOrigin());
			securityScreeningValidationFilterVO.setDestinationAirport(mailbagVO.getDestination());
			securityScreeningValidationFilterVO.setMailbagId(mailbagVO.getMailbagId());
			securityScreeningValidationFilterVO.setSubClass(mailbagVO.getMailSubclass());
		return securityScreeningValidationFilterVO;
	}
	/**
	 * @author A-8353
	 * @param securityScreeningValidationFilterVO
	 * @return
	 * @throws SystemException
	 */
   public Collection<SecurityScreeningValidationVO> checkForSecurityScreeningValidations(SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO ) throws SystemException {
		return constructDAO().checkForSecurityScreeningValidation(securityScreeningValidationFilterVO);
		  

	}
public void updateIntFlgAsNForMailBagsInConatiner(HbaMarkingVO hbaMarkingVO) throws SystemException{
		Collection<ContainerDetailsVO> containers=new ArrayList<>();
		ContainerDetailsVO containerDetailsVO = new ContainerDetailsVO();
        	containerDetailsVO.setCompanyCode(hbaMarkingVO.getCompanyCode());
        	containerDetailsVO.setFlightNumber(hbaMarkingVO.getFlightNumber());
        	containerDetailsVO.setFlightSequenceNumber(hbaMarkingVO.getFlightSequenceNumber());
        	containerDetailsVO.setCarrierId(hbaMarkingVO.getCarrierId());
        	containerDetailsVO.setLegSerialNumber(hbaMarkingVO.getLegSerialNumber());
        	containerDetailsVO.setPol(hbaMarkingVO.getAssignedPort());
        	containerDetailsVO.setContainerNumber(hbaMarkingVO.getContainerNumber());
        	containerDetailsVO.setContainerType(hbaMarkingVO.getContainerType());
		containers.add(containerDetailsVO);
		containers = new MailController().findMailbagsInContainer(containers);
		ContainerDetailsVO containerVo = containers.iterator().next();
		if(containerVo!=null && containerVo.getMailDetails()!=null
				&& containerVo.getMailDetails().size()>0) {
			Collection<MailbagVO> mailBags = containerVo.getMailDetails();
			updateInterfaceFlag(mailBags, "N");
		}
	}

	public void updateInterfaceFlag(Collection<MailbagVO> mailBags, String interfaceFlag) throws SystemException{

		for(MailbagVO mailbagVO : mailBags){

				MailbagPK mailbagPk = new MailbagPK();
				mailbagPk.setCompanyCode(mailbagVO.getCompanyCode());
				mailbagPk.setMailSequenceNumber(mailbagVO.getMailSequenceNumber());
				Mailbag mailbag=null;
				try {
					mailbag = Mailbag.find(mailbagPk);
				} catch (FinderException ex) {
					throw new SystemException(ex.getErrorCode(), ex);
				}
				if(mailbag != null){
					mailbag.setIntFlg(interfaceFlag);
				}

		}


	}

    /**
     * @author 204084
     * Added as part of CRQ IASCB-164529
     * @param destinationAirportCode
     * @return
     * @throws SystemException
     */
    public Collection<RoutingIndexVO> getPlannedRoutingIndexDetails(String destinationAirportCode) throws SystemException {
        return constructDAO().getPlannedRoutingIndexDetails(destinationAirportCode);
    }


    /**
     * @param companyCode
     * @throws SystemException
     * @author 204084
     * Added for IASCB-172483 on 15-Oct-2022
     */
    void publishSubclassDetails(String companyCode) throws SystemException {
        log.entering(MODULE, "publishSubclassDetails");
        Collection<MailSubClassVO> subclassDetails = getSubclassDetails(companyCode);
        MailSubClassMessageVO mailSubClassMessageVO = new MailSubClassMessageVO();
        mailSubClassMessageVO.setCompanyCode(companyCode);
        mailSubClassMessageVO.setMessageType("MAILSUBCLSDATA");
        mailSubClassMessageVO.setMessageStandard(MessageConfigConstants.TXN_PUBLISH);
        mailSubClassMessageVO.setSubclassDetails(subclassDetails);
        try {
            Proxy.getInstance().get(MsgBrokerMessageProxy.class).encodeAndSaveMessageAsync(mailSubClassMessageVO);
        } catch (ProxyException proxyException) {
            log.log(Log.INFO, proxyException);
        }
        log.exiting(MODULE, "publishSubclassDetails");
    }

    /**
     * @param companyCode
     * @return MailSubClassVO
     * @throws SystemException
     * @author 204084
     * Added for IASCB-172483 on 15-Oct-2022
     */
    Collection<MailSubClassVO> getSubclassDetails(String companyCode) throws SystemException {
        log.entering(MODULE, "getSubclassDetails");
        return new Mailbag().getSubclassDetails(companyCode);
    }  

  /**
     * @param companyCode
     * @param airportCode
     * @return OfficeOfExchangeVO
     * @throws RemoteException
     * @author 204082
     * Added for IASCB-164537 on 09-Nov-2022
     */
    public Collection<OfficeOfExchangeVO> getExchangeOfficeDetails(String companyCode, String airportCode) throws SystemException {
        log.entering(MODULE, "getExchangeOfficeDetails");
        return new Mailbag().getExchangeOfficeDetails(companyCode, airportCode);
	  }
private void removeUldAtAirport(ContainerDetailsVO containerDetailsVO) throws SystemException {
    	ULDAtAirport uldAtAirport=null;
    	ULDAtAirportPK uldAtAirportPK=constructULDAtAirportPK(containerDetailsVO);
		try{
		uldAtAirport=ULDAtAirport.find(uldAtAirportPK);
		} catch (FinderException ex) {
			log.log(Log.INFO, ex);
		}
		if(uldAtAirport!=null){
		uldAtAirport.remove();
	    }
  }

    public String generateAutomaticBarrowId(String cmpcod) {
		java.time.LocalDate date = java.time.LocalDate.now();
		int weekNumber = date.get(WeekFields.ISO.weekOfWeekBasedYear());
		int dayNumber = date.getDayOfWeek().getValue();
		String key = String.valueOf(weekNumber).concat(String.valueOf(dayNumber)).concat("M");
		Criterion criterion = KeyUtils.getCriterion(
				cmpcod, "MAL_BLK_ID_GEN", key);
	    String generatedkey = generateKey(criterion);
		return key.concat(generatedkey);
		
	}
	private String generateKey(Criterion criterion) {
		String generatedKey= "";
		try {
			generatedKey= String.valueOf(KeyUtilInstance.getInstance().getKey(criterion));
		} catch (SystemException | GenerationFailedException e) {
			log.log(log.SEVERE, e);
		} 
		if(StringUtils.equals(generatedKey, "9999999")) {
			try {
				KeyUtilInstance.getInstance().resetKey(criterion, "0");
			} catch (GenerationFailedException | SystemException e) {
				log.log(log.SEVERE, e);
			}
		}
		return  generatedKey;
    }
	/**
	 *
	 * 	Method		:	MailController.findCN46TransferManifestDetails
	 *	Added by 	:	A-10647 on 27-Oct-2022
	 * 	Used for 	:
	 *	Parameters	:	@param transferManifestVO
	 *	Parameters	:	@return
	 *	Parameters	:	@throws SystemException
	 *	Return type	: 	Collection<ConsignmentDocumentVO>
	 */
		 public Collection<ConsignmentDocumentVO> findCN46TransferManifestDetails(TransferManifestVO transferManifestVO) throws SystemException{
		    	return constructDAO().findCN46TransferManifestDetails(transferManifestVO);
    }

    public Collection<MailbagVO> getMailbagDetailsForValidation(String companyCode, String airportCode) throws SystemException {
        log.entering(MODULE, "getMailbagDetailsForValidation");
        return new Mailbag().getMailbagDetailsForValidation(companyCode, airportCode);
    }

	 /**
		 * @author U-1532
		 * @param companyCode
		 * @param paCode
		 * @returns
		 * @throws SystemException
		 */
		 public  String findDensityfactorForPA(String companyCode,
		            String paCode)
		throws SystemException {
			 log.entering(CLASS, "findPartyIdentifierForPA");
				CacheFactory factory = CacheFactory.getInstance();
				PostalAdministrationCache cache = factory
					.getCache(PostalAdministrationCache.ENTITY_NAME);  
				return cache.findDensityfactorForPA(companyCode,paCode);
    }
	  /**
     * @author A-8353
     * @param securityScreeningValidationFilterVO
     * @param sequencenum 
     */
     void populateApplicableRegulationFlagValidationDetails(
    		 SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO, long sequencenum) {

    	 String applicableRegValue=null;
    	 if (sequencenum>0){
    		 try {
    			 applicableRegValue=constructDAO().findApplicableRegFlagForMailbag(securityScreeningValidationFilterVO.getCompanyCode(),sequencenum);
    		 } catch (SystemException e) {
    			 log.log(Log.INFO, e);
    		 }
    	 }
    	 if(applicableRegValue!=null){
    		 securityScreeningValidationFilterVO.setAppRegFlg(applicableRegValue);	
    	 }else{
    		 securityScreeningValidationFilterVO.setAppRegFlg(NO_VALUE);
    	 }
    	 String groupCategorty="APLREGFLG";
    	 String countryType="CNTGRP";
    	 boolean isOriginDestEqual=false;
    	 boolean isOriginTransistEqual=false;
    	 Collection<String> groupNames = null;
    	 GeneralMasterGroupFilterVO generalMasterGroupFilterVO=new GeneralMasterGroupFilterVO();
    	 String originAirportCountry=null;
    	 /**if(securityScreeningValidationFilterVO.isTransferInTxn()){
    		 originAirportCountry=securityScreeningValidationFilterVO.getTransactionCountry();
    	 }
    	 else{
    		 originAirportCountry=securityScreeningValidationFilterVO.getOriginCountry();
    	 }**/
    	 originAirportCountry=securityScreeningValidationFilterVO.getTransactionCountry();
    	 if(originAirportCountry!=null){
    		 if (originAirportCountry.equals(securityScreeningValidationFilterVO.getDestinationCountry())){
    			 isOriginDestEqual=true;
    		 }
    		 if (originAirportCountry.equals(securityScreeningValidationFilterVO.getAppRegTransistCountry())){
    			 isOriginTransistEqual=true;
    		 }
    		 if((securityScreeningValidationFilterVO.getAppRegTransistCountry()==null||isOriginTransistEqual)&&isOriginDestEqual){
				 securityScreeningValidationFilterVO.setAppRegValReq(false);
				 return;
			 }
    		 populateGeneralMasterGroupFilterVO(generalMasterGroupFilterVO,securityScreeningValidationFilterVO.getCompanyCode(),
    				 groupCategorty,countryType,originAirportCountry);

    		 try {
    			 groupNames =
    					 Proxy.getInstance().get(SharedGeneralMasterGroupingProxy.class)
    					 .findGroupNamesOfEntity(generalMasterGroupFilterVO);
    		 } catch (ProxyException | SystemException e) {
    			 log.log(Log.INFO, e);
    		 }
    		 if(groupNames !=null&&groupNames.stream().findFirst().orElse(null)!=null){
    			 securityScreeningValidationFilterVO.setAppRegDestCountryGroup(NO_GROUP);
    			 securityScreeningValidationFilterVO.setAppRegTransistCountryGroup(NO_GROUP);
    			 return;
    		 }

    	 }
    	 if(!isOriginDestEqual&&securityScreeningValidationFilterVO.getDestinationCountry()!=null){
    		 updateDestCountryGrpForAppRegVal(securityScreeningValidationFilterVO, groupCategorty, countryType,
					groupNames, generalMasterGroupFilterVO);

    	 }
    	 if (securityScreeningValidationFilterVO.getDestinationCountry()!=null
    			 &&securityScreeningValidationFilterVO.getDestinationCountry().equals(securityScreeningValidationFilterVO.getAppRegTransistCountry())){
    		 securityScreeningValidationFilterVO.setAppRegTransistCountryGroup(securityScreeningValidationFilterVO.getAppRegDestCountryGroup());
    	 }
    	 else{
    		 if(!isOriginTransistEqual&&securityScreeningValidationFilterVO.getAppRegTransistCountry()!=null){
    			 updateTransistCountryGrpForAppRegVal(securityScreeningValidationFilterVO, groupCategorty, countryType,
    					 groupNames, generalMasterGroupFilterVO);
    		 }
    		 else{
    			 securityScreeningValidationFilterVO.setAppRegTransistCountryGroup(NO_GROUP); 
    		 }
    	 }
     }

	/**
	 * @author A-8353
	 * @param securityScreeningValidationFilterVO
	 * @param groupCategorty
	 * @param countryType
	 * @param groupNames
	 * @param generalMasterGroupFilterVO
	 */
	private void updateDestCountryGrpForAppRegVal(
			SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO, String groupCategorty,
			String countryType, Collection<String> groupNames, GeneralMasterGroupFilterVO generalMasterGroupFilterVO) {
		populateGeneralMasterGroupFilterVO(generalMasterGroupFilterVO,securityScreeningValidationFilterVO.getCompanyCode(),
				 groupCategorty,countryType,securityScreeningValidationFilterVO.getDestinationCountry());
		 String destCountryGrp=null;
		 destCountryGrp = getGroupName(groupNames, generalMasterGroupFilterVO, destCountryGrp);
		 if(destCountryGrp!=null){
			 securityScreeningValidationFilterVO.setAppRegDestCountryGroup(destCountryGrp);
		 }
		 else{
			 securityScreeningValidationFilterVO.setAppRegDestCountryGroup(NO_GROUP);
		 }
	}
	/**
	 * @author A-8353
	 * @param securityScreeningValidationFilterVO
	 * @param groupCategorty
	 * @param countryType
	 * @param groupNames
	 * @param generalMasterGroupFilterVO
	 */
	private void updateTransistCountryGrpForAppRegVal(
			SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO, String groupCategorty,
			String countryType, Collection<String> groupNames, GeneralMasterGroupFilterVO generalMasterGroupFilterVO) {
		populateGeneralMasterGroupFilterVO(generalMasterGroupFilterVO,securityScreeningValidationFilterVO.getCompanyCode(),
				 groupCategorty,countryType,securityScreeningValidationFilterVO.getAppRegTransistCountry());
		 String transistCountryGrp=null;
		 transistCountryGrp = getGroupName(groupNames, generalMasterGroupFilterVO, transistCountryGrp);
		 if(transistCountryGrp!=null){
			 securityScreeningValidationFilterVO.setAppRegTransistCountryGroup(transistCountryGrp);
		 }
		 else{
			 securityScreeningValidationFilterVO.setAppRegTransistCountryGroup(NO_GROUP);
		 }
	}
	/**
	 * @author A-8353
	 * @param groupNames
	 * @param generalMasterGroupFilterVO
	 * @param destCountryGrp
	 * @return
	 */
	private String getGroupName(Collection<String> groupNames, GeneralMasterGroupFilterVO generalMasterGroupFilterVO,
			String countryGrp) {
		try {
			 groupNames =
					 Proxy.getInstance().get(SharedGeneralMasterGroupingProxy.class)
					 .findGroupNamesOfEntity(generalMasterGroupFilterVO);
		 } catch (ProxyException | SystemException e) {
			 log.log(Log.INFO, e);
		 }
		 if(groupNames!=null){
			 countryGrp=groupNames.stream().findFirst().orElse(null);
		 }
		return countryGrp;
	}
     /**
      * @author A-8353
 	 * @param mailbagVO
 	 * @param securityScreeningValidationFilterVO
 	 * @return
 	 * @throws CacheException
 	 */
 	 public Collection<SecurityScreeningValidationVO> doApplicableRegulationFlagValidationForPABuidContainer(MailbagVO mailbagVO,
 			SecurityScreeningValidationFilterVO securityScreeningValidationFilterVO) throws CacheException {
 		Collection<SecurityScreeningValidationVO> securityScreeningValidationVOs = null;
 		findCountryCodesForSecurityScreeningValidation(securityScreeningValidationFilterVO);
 		populateApplicableRegulationFlagValidationDetails(securityScreeningValidationFilterVO,mailbagVO.getMailSequenceNumber());   
 		if(!securityScreeningValidationFilterVO.isAppRegValReq()&&securityScreeningValidationFilterVO.isSecurityValNotReq()){
			return securityScreeningValidationVOs ;	
		}
 		 CacheFactory factory = CacheFactory.getInstance();
 		 SecurityScreeningValidationCache cache = factory
 				 .getCache(SecurityScreeningValidationCache.ENTITY_NAME);
 		 securityScreeningValidationVOs= cache.checkForSecurityScreeningValidation(securityScreeningValidationFilterVO);
 		return securityScreeningValidationVOs;
 	}
	
	 public Collection<MailAcceptanceVO> fetchFlightPreAdviceDetails(Collection<FlightFilterVO> flightFilterVOs) throws SystemException {
		        try {
		
		            return constructDAO().fetchFlightPreAdviceDetails(flightFilterVOs);
					} catch (PersistenceException persistenceException) {
						throw new SystemException(persistenceException.getErrorCode(),persistenceException);
					}
	 }
	/**
	 *  
	 * 	Method		:	MailController.updateActualWeightForMailContainer
	 *	Added by 	:	A-6245 on 20-Dec-2022
	 * 	Added for 	:	IASCB-184276
	 *	Parameters	:	@param containerVO
	 *	Parameters	:	@return
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	ContainerVO
	 */
    @Raise(module = "mail", submodule = "operations", event = "SAVE_DWS_EVENT", methodId = "mail.operations.updateActualWeightForMailULD", enablecontext="true")
    public ContainerVO updateActualWeightForMailContainer(ContainerVO containerVO) throws SystemException {
    	if (isNotNullAndEmpty(containerVO.getContainerNumber())
				&& Objects.nonNull(containerVO.getActualWeight())) {
			SaveActualWeightInContainerFeature saveActualWeightInContainerFeature = (SaveActualWeightInContainerFeature) SpringAdapter.getInstance().getBean(SaveActualWeightInContainerFeatureConstants.SAVE_ACTUAL_WEIGHT_CONTAINER);
				try {
					saveActualWeightInContainerFeature.execute(containerVO);
				} catch (BusinessException e) {
					LOGGER.log(Log.SEVERE,e);
				}}
					return containerVO;
	}
	public static void validateAndPopulateShipmentCustomsInformationVOsForACS(ShipmentDetailVO shipmentDetailVO) {
		Collection<String> airportCodes = new ArrayList<>();
		airportCodes.add(shipmentDetailVO.getOrigin());
		airportCodes.add(shipmentDetailVO.getDestination());
		Map<String, AirportValidationVO> countryCodeMap = null;
		try {
			countryCodeMap = Proxy.getInstance().get(SharedAreaProxy.class)
					.validateAirportCodes(shipmentDetailVO.getCompanyCode(), airportCodes);
		} catch (SystemException e) {
			LOGGER.log(Log.FINE, "System Exception validation airport codes", e);
		}
		if (Objects.nonNull(countryCodeMap) && Objects.nonNull(countryCodeMap.get(shipmentDetailVO.getOrigin()))
				&& MailConstantsVO.AUSTRALIA.equals(countryCodeMap.get(shipmentDetailVO.getOrigin()).getCountryCode())
				&& Objects.nonNull(countryCodeMap.get(shipmentDetailVO.getDestination()))
				&& !MailConstantsVO.AUSTRALIA.equals(countryCodeMap.get(shipmentDetailVO.getDestination()).getCountryCode())) {
			populateShipmentCustomsInformationVOsForACS(shipmentDetailVO);
		}
	}
	
	private static void populateShipmentCustomsInformationVOsForACS(ShipmentDetailVO shipmentDetailVO) {
		Collection<ShipmentCustomsInformationVO> shipmentCustomsInformationVOs = new ArrayList<>();
		ShipmentCustomsInformationVO shipmentCustomsInformationVO = new ShipmentCustomsInformationVO();
		shipmentCustomsInformationVO.setCustomsAuthority(MailConstantsVO.AUSTRALIAN_CUSTOMS);
		shipmentCustomsInformationVO.setParameter(MailConstantsVO.CAN);
		shipmentCustomsInformationVO.setValue(MailConstantsVO.EXML);
		shipmentCustomsInformationVO.setOperationFlag(ShipmentCustomsInformationVO.OPERATION_FLAG_INSERT);
		shipmentCustomsInformationVOs.add(shipmentCustomsInformationVO);
		shipmentDetailVO.setShipmentCustomsInformationVOs(shipmentCustomsInformationVOs);
	}	
	/**
	 * 
	 * 	Method		:	MailController.findFlightsForMailInboundAutoAttachAWB
	 *	Added by 	:	A-6245 on 20-Dec-2022
	 * 	Used for 	:	Added for IASCB-187122
	 *	Parameters	:	@param mailInboundAutoAttachAWBJobScheduleVO
	 *	Parameters	:	@return
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	Collection<OperationalFlightVO>
	 */
	public Collection<OperationalFlightVO> findFlightsForMailInboundAutoAttachAWB(
			MailInboundAutoAttachAWBJobScheduleVO mailInboundAutoAttachAWBJobScheduleVO) throws SystemException {
		return  constructDAO().findFlightsForMailInboundAutoAttachAWB(mailInboundAutoAttachAWBJobScheduleVO);
	}

public OperationalFlightVO constructOperationalFlightVO(ContainerVO containerVO) {
				OperationalFlightVO operationalFlightVO = new OperationalFlightVO();
				operationalFlightVO.setCompanyCode(containerVO.getCompanyCode());
				operationalFlightVO.setPol(containerVO.getPol()!=null?containerVO.getPol():containerVO.getAssignedPort());
				operationalFlightVO.setPou(containerVO.getPou());
				operationalFlightVO.setCarrierId(containerVO.getCarrierId());
				operationalFlightVO.setFlightNumber(containerVO.getFlightNumber());
				operationalFlightVO.setFlightSequenceNumber(containerVO.getFlightSequenceNumber());
				operationalFlightVO.setFlightDate(containerVO.getFlightDate());
				operationalFlightVO.setLegSerialNumber(containerVO.getLegSerialNumber());
				return operationalFlightVO;
			}
		 
	public void calculateContentID(Collection<ContainerVO> containerVOs, OperationalFlightVO toFlightVO)
			throws SystemException {
		//This flow is specific to AA 

			if (toFlightVO != null && isNotNullAndEmpty(toFlightVO.getFlightNumber())
				&& toFlightVO.getFlightSequenceNumber() >0
				&& containerVOs != null
				&& containerVOs.size() > 0 
				&& "AA".equals(toFlightVO.getCompanyCode())) {

			Collection<ContainerDetailsVO> containerDetailsVOs = null;
			Collection<ContainerDetailsVO> containerDetailsVOsPayload = null;
						for (ContainerVO containerVO : containerVOs) {
							if (isNotNullAndEmpty(containerVO.getContainerNumber())) {
					if(containerVO.getFlightSequenceNumber()>0) {
						containerDetailsVOs = findMailbagsInContainer(constructContainerDetailsVO(containerVO, toFlightVO));
					}
					else{
						
							Collection<ContainerDetailsVO> containerDetailsVO1s = new ArrayList<>();
							if(containerVO.getContentId()==null || "MT".equals(containerVO.getContentId())) {//Content Id auto calculation not needed if value present from screen
								ContainerDetailsVO containerDetailsVO1 = new ContainerDetailsVO();
							containerDetailsVO1.setCompanyCode(containerVO.getCompanyCode());
							containerDetailsVO1.setContainerNumber(containerVO.getContainerNumber());
							containerDetailsVO1.setPol(containerVO.getPol());
							containerDetailsVO1.setCarrierId(containerVO.getCarrierId());  
							containerDetailsVO1.setFlightNumber(containerVO.getFlightNumber());
							containerDetailsVO1.setFlightSequenceNumber(containerVO.getFlightSequenceNumber());    
							containerDetailsVO1.setLegSerialNumber(containerVO.getLegSerialNumber());
							containerDetailsVO1.setContainerType(containerVO.getType());
							containerDetailsVO1.setContentId(containerVO.getContentId());
							containerDetailsVO1.setPou(containerVO.getPou());
							containerDetailsVO1.setAcceptedFlag(MailConstantsVO.FLAG_YES);
							containerDetailsVO1s.add(containerDetailsVO1);
							containerDetailsVOs=findMailbagsInContainerWithoutAcceptance(containerDetailsVO1s);
													}
						
							
						
					}	
					
					
					if (containerDetailsVOs != null && containerDetailsVOs.size() > 0) {
									if (toFlightVO.getPou() == null || toFlightVO.getPou().trim().isEmpty()) {
										toFlightVO.setPou(containerVO.getPou());
									}
									for (ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
										if (containerDetailsVO.getMailDetails() == null
												|| containerDetailsVO.getMailDetails().size() == 0) {
											
								containerDetailsVOs = constructContainerDetailsVO(containerVO, toFlightVO);
							}
						}
						if (containerDetailsVOsPayload == null) {
										containerDetailsVOsPayload = new ArrayList<>();
									}
									containerDetailsVOsPayload.add(containerDetailsVOs.iterator().next());
								}
							}
						}

			String contentID = ((AAMailController) SpringAdapter.getInstance().getBean("aaMailController"))
					.calculateULDContentId(containerDetailsVOsPayload, toFlightVO);
			if (isNotNullAndEmpty(contentID)) {
				for (ContainerVO containerVO : containerVOs) {
					containerVO.setContentId(contentID);
				}
			}

		}

	}
		 
		 
		 public Collection<ContainerDetailsVO> constructContainerDetailsVO(ContainerVO containerVO,
					OperationalFlightVO toFlightVO) {
				Collection<ContainerDetailsVO> containerDetailsVOs = new ArrayList<>();
					if(containerVO.getContentId()==null ) {//Content Id auto calculation not needed if value present from screen
					ContainerDetailsVO containerDetailsVO = new ContainerDetailsVO();
					containerDetailsVO.setCompanyCode(containerVO.getCompanyCode());
					containerDetailsVO.setContainerNumber(containerVO.getContainerNumber());
					containerDetailsVO.setPol(toFlightVO.getPol());
					containerDetailsVO.setCarrierId(toFlightVO.getCarrierId());
					containerDetailsVO.setFlightNumber(toFlightVO.getFlightNumber());
					containerDetailsVO.setFlightSequenceNumber(toFlightVO.getFlightSequenceNumber());
					containerDetailsVO.setLegSerialNumber(toFlightVO.getLegSerialNumber());
					containerDetailsVO.setContainerType(containerVO.getType());
					containerDetailsVO.setContentId(containerVO.getContentId());
					containerDetailsVOs.add(containerDetailsVO);
				}
				return containerDetailsVOs;
			}
			
		 public Page<MailTransitVO> findMailTransit(
		            MailTransitFilterVO mailTransitFilterVO, int pageNumber)
		            throws SystemException, PersistenceException {
		        log.entering(CLASS, "findMailTransit");

		 

		            return constructDAO().findMailTransit(mailTransitFilterVO, pageNumber);

		 

		    }
	
	public Collection<ContainerDetailsVO> findMailbagsInContainerWithoutAcceptance(
					Collection<ContainerDetailsVO> containers) throws SystemException {
				return MailAcceptance.findMailbagsInContainerWithoutAcceptance(containers);
			}		
				/***
			 * @author U-1519
			 * @param findMailbagDetailsForMailInboundHHT
			 * @param mailbagEnquiryFilterVO
			 * @return MailbagVO
			 * @throws SystemException
			 */
			public MailbagVO findMailbagDetailsForMailInboundHHT(MailbagEnquiryFilterVO mailbagEnquiryFilterVO)
					throws SystemException, RemoteException {
				log.entering(CLASS, "findMailbagDetailsForMailbagEnquiryHHT");
				MailbagVO mailbagVO = null;
				try {
					mailbagVO = constructDAO().findMailbagDetailsForMailInboundHHT(mailbagEnquiryFilterVO);
				} catch (PersistenceException persistenceException) {
					throw new SystemException(persistenceException.getErrorCode(),persistenceException);
				}
				if (mailbagVO != null && mailbagVO.getLatestStatus() != null
						&& mailbagVO.getLatestStatus().equals(MailConstantsVO.MAIL_STATUS_ARRIVED)
						&& (mailbagVO.getFlightNumber() != null && mailbagVO.getFlightDate() != null
						&& mailbagVO.getFlightSequenceNumber() > 0)) {
					FlightFilterVO flightFilterVO = new FlightFilterVO();
					flightFilterVO.setCompanyCode(mailbagEnquiryFilterVO.getCompanyCode());
					flightFilterVO.setFlightCarrierId(mailbagVO.getCarrierId());
					flightFilterVO.setFlightNumber(mailbagVO.getFlightNumber());
					flightFilterVO.setFlightDate(mailbagVO.getFlightDate());
					flightFilterVO.setFlightSequenceNumber(mailbagVO.getFlightSequenceNumber());
					Collection<FlightValidationVO> flightValidationVOs = validateFlight(flightFilterVO);
					for (FlightValidationVO flightValidation : flightValidationVOs) {
						mailbagVO.setFlightDate(flightValidation.getSta());
					}
				}
				return mailbagVO;
			}

	private AirlineValidationVO findAirlineValidationVO(String companyCode, int carrierId) throws SystemException {
		AirlineValidationVO airlineValidationVO = null;
		try {
			airlineValidationVO = new SharedAirlineProxy().findAirline(companyCode, carrierId);
		} catch (SharedProxyException e) {
			log.log(Log.SEVERE, e);
		}
		return airlineValidationVO;
			}

            
	public void calculateAndSaveContentId(MailAcceptanceVO mailAcceptanceVO) throws SystemException {
		if (Objects.nonNull(mailAcceptanceVO) && mailAcceptanceVO.getFlightSequenceNumber() != MailConstantsVO.DESTN_FLT
				&& Objects.nonNull(mailAcceptanceVO.getContainerDetails())
				&& !mailAcceptanceVO.getContainerDetails().isEmpty()) {
			Collection<ContainerVO> containerVOs = new ArrayList<>();
			for (ContainerDetailsVO containerDetailsVO : mailAcceptanceVO.getContainerDetails()) {
				containerVOs.add(constructContainerVOFromDetails(containerDetailsVO, mailAcceptanceVO));
			}
			calculateContentID(containerVOs, constructOpFlightFromAcp(mailAcceptanceVO));
			saveContentID(containerVOs);
		}
	}


public Collection<FlightSegmentCapacitySummaryVO> findFlightListings(FlightFilterVO filterVo)
			throws SystemException, ProxyException {
		return Proxy.getInstance().get(FlightOperationsProxy.class)
				.findFlightListings(filterVo);
		
	}

	public Page<FlightSegmentCapacitySummaryVO> findActiveAllotments(FlightSegmentCapacityFilterVO filterVo)
			throws SystemException, ProxyException {
		return Proxy.getInstance().get(FlightOperationsProxy.class)
				.findActiveAllotments(filterVo);
		
	}

	public MailbagVO findMailConsumed(MailTransitFilterVO filterVo) throws  SystemException {
		log.entering(CLASS, "findMailConsumed");
		return constructDAO().findMailConsumed(filterVo);  
	}

	
	public void createPAWBForConsignment(int noOfDays) throws RemoteException, SystemException, PersistenceException {
		((MailTrackingDefaultsBI)SpringAdapter.getInstance().getBean(MAIL_OPERATION_SERVICES)).createPAWBForConsignment(noOfDays);
	} 
	public Collection<MailbagHistoryVO> findMailbagHistoriesFromWebScreen( 
			String companyCode, String mailBagId, long mailSequenceNumber) throws SystemException {
		log.entering(CLASS, "findMailbagHistoriesFromWebScreen");
return Mailbag.findMailbagHistoriesFromWebScreen(companyCode, mailBagId, mailSequenceNumber);
	}
	public void saveMalRdtMsgAddDtl(Collection<MessageDespatchDetailsVO> messageAddressDetails,
			Collection<AutoForwardDetailsVO> participantDetails, MessageVO messageVo, String selectedResditVersion,
			List<String> selectedResdits, Collection<MailbagVO> selectedMailbags) throws SystemException {
		Collection<MailResditAddressVO> mailResditAddressVOs = constructMailResditAddress(messageAddressDetails,
				participantDetails, messageVo,selectedResditVersion);
		MailResditMessageDetailsVO mailResditMessageDetailsVO=new MailResditMessageDetailsVO();
		mailResditMessageDetailsVO.setMailbagVO(selectedMailbags);
		mailResditMessageDetailsVO.setSelectedResdits(selectedResdits);
		mailResditMessageDetailsVO.setMailResditAddressVO(mailResditAddressVOs);
		for (MailbagVO mailbagVO : selectedMailbags) {
			String mailboxIdFromConfig = null;
			try {
				mailboxIdFromConfig = constructDAO().findMailboxIdForPA(mailbagVO);
			} catch (PersistenceException e) {
				LOGGER.log(Log.FINE, e);
				throw new SystemException("PersistenceException");
			}
			mailbagVO.setMailboxId(mailboxIdFromConfig);
		}
		SaveSendResditMessageDetailsFeature saveSendResditMessageDetailsFeature = (SaveSendResditMessageDetailsFeature) SpringAdapter.getInstance().getBean(SaveSendResditMessageDetailsFeatureConstants.SAVE_SEND_RESDIT_MESSAGE_DETAILS_FEATURE);
			try {
				saveSendResditMessageDetailsFeature.execute(mailResditMessageDetailsVO);
			} catch (BusinessException e) {
				LOGGER.log(Log.SEVERE,e);
			}	
	}
				private Collection<MailResditAddressVO> constructMailResditAddress(
						Collection<MessageDespatchDetailsVO> messageAddressDetails,Collection<AutoForwardDetailsVO> participantDetails,MessageVO messageVo,String selectedResditVersion) throws SystemException {
					Collection<MailResditAddressVO> mailResditAddressVOs = new ArrayList<>();
					LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();		
					    if(messageAddressDetails!=null && !messageAddressDetails.isEmpty()) {
						for (MessageDespatchDetailsVO address : messageAddressDetails) {
							MailResditAddressVO mailResditAddressVO=new MailResditAddressVO();
							mailResditAddressVO.setCompanyCode(logonAttributes.getCompanyCode());
							mailResditAddressVO.setMessageType(messageVo.getMessageType());
							mailResditAddressVO.setVersion(messageVo.getMessageVersion());
							mailResditAddressVO.setInterfaceSystem(address.getInterfaceSystem());
							mailResditAddressVO.setMode(address.getMode());
							mailResditAddressVO.setAddress(address.getAddress());
							mailResditAddressVO.setEnvelopeCode(address.getEnvelopeCode());
							mailResditAddressVO.setEnvelopeAddress(address.getEnvelopeAddress());
							mailResditAddressVO.setResditVersion(selectedResditVersion);
							mailResditAddressVOs.add(mailResditAddressVO);
							}
						}
						if(participantDetails!=null && !participantDetails.isEmpty()) {
						for (AutoForwardDetailsVO participant : participantDetails) {
							MailResditAddressVO mailResditAddressVO=new MailResditAddressVO();
							mailResditAddressVO.setCompanyCode(logonAttributes.getCompanyCode());
							mailResditAddressVO.setVersion(messageVo.getMessageVersion());
							mailResditAddressVO.setMessageType(messageVo.getMessageType());
						    mailResditAddressVO.setParticipantInterfaceSystem(participant.getInterfaceSystem());
							mailResditAddressVO.setParticipantName(participant.getParticipantName());
							mailResditAddressVO.setParticipantType(participant.getParticipantType());
							mailResditAddressVO.setAirportCode(participant.getAirportCode());
							mailResditAddressVO.setCountryCode(participant.getCountryCode());
							mailResditAddressVO.setResditVersion(selectedResditVersion);
							mailResditAddressVOs.add(mailResditAddressVO);
						}}
					return mailResditAddressVOs ;
					
	}           
				public FlightValidationVO validateOperationalFlight(
						OperationalFlightVO opFlightVO, boolean isInbound)
						throws SystemException {
					LOGGER.entering(CLASS, "validateOperationalFlight");
					Collection<FlightValidationVO> flightValidationVOs = validateOperationalFlights(
							opFlightVO, isInbound);
					LOGGER.exiting(CLASS, "validateOperationalFlight");
					return updateFlightValidationVO(opFlightVO, flightValidationVOs);
				}
				/**
				 * @author A-8353
				 * @param opFlightVO
				 * @param flightValidationVOs
				 * @return
				 */
				private FlightValidationVO updateFlightValidationVO(OperationalFlightVO opFlightVO,
						Collection<FlightValidationVO> flightValidationVOs) {
					LOGGER.entering(CLASS, "updateFlightValidationVO");
					FlightValidationVO toReturnVO = null;
					if (flightValidationVOs != null &&! flightValidationVOs.isEmpty()) {
						if(opFlightVO.isRequireAllLegs()&&opFlightVO.getPol()!=null){
							toReturnVO = flightValidationVOs.stream()
									.filter(flightValidationVo ->opFlightVO.getPol().equals(flightValidationVo.getLegOrigin()))
									.findFirst()
									.orElse(null);
						}
						else{
							for (FlightValidationVO flightValidationVO : flightValidationVOs) {
								if (flightValidationVO.getFlightSequenceNumber() == opFlightVO
										.getFlightSequenceNumber()) {
									toReturnVO = flightValidationVO;
								}
							}
						}
					}
					LOGGER.exiting(CLASS, "updateFlightValidationVO");
					return toReturnVO;
				}	
				public Map<String, Object> generateCN46ReportForFlightlevel(ReportSpec reportSpec)
							throws SystemException {
						log.entering(CLASS, "CN46generateMailManifest");
		                OperationalFlightVO flightVO = new OperationalFlightVO();
		                if (Objects.nonNull(reportSpec.getFilterValues().get(0))) {
		             	flightVO = OperationalFlightVO.class.cast(reportSpec.getFilterValues().get(0));
		                }
						MailManifestVO manifestVO = null;
						try {
							manifestVO= constructDAO().findCN46ManifestDetails(flightVO);
						} catch (PersistenceException ex) {
							throw new SystemException(ex.getMessage(), ex);
						}			
								
	                	Collection<MailManifestVO> reportData = new ArrayList<>();
	                	LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
	            				.getLogonAttributesVO();
	                	AirlineValidationVO airlineValidationVO = null;
	                	try {
							airlineValidationVO = Proxy.getInstance().get(SharedAirlineProxy.class)
									.validateAlphaCode(logonAttributes.getCompanyCode(), logonAttributes
											.getOwnAirlineCode());   
						} catch (SharedProxyException sharedProxyException) {
							LOGGER.log(Log.INFO, sharedProxyException);
						}
						if(airlineValidationVO!=null){
							manifestVO.setAirlineName(airlineValidationVO.getAlphaCode()+", "+airlineValidationVO.getAirlineName());
						}
						reportData.add(manifestVO);
						reportSpec.setData(reportData);
						
						log.exiting(CLASS, "CN46generateMailManifest");
		                return ReportAgentInstance.getInstance().generateReport(reportSpec);
					}

				public void saveScreeningDetailsFromHHT(Collection<ConsignmentScreeningVO> consignmentScreeningVos) throws FinderException, SystemException, PersistenceException {
				LOGGER.entering(CLASS, "saveScreeningDetailsFromHHT");
				long malseqnum=0;
				String mailBagId = consignmentScreeningVos.iterator().next().getMailIdr()!=null && consignmentScreeningVos.iterator().next().getMailIdr().trim().length()>0?consignmentScreeningVos.iterator().next().getMailIdr():null;
				String companyCode = consignmentScreeningVos.iterator().next().getCompanyCode();
				setSecurityStatusDateAndTimeForScreeningVos(consignmentScreeningVos);
				
		 		  try {
				 	 malseqnum =  Mailbag.findMailBagSequenceNumberFromMailIdr(mailBagId,companyCode);
							      
					} catch (SystemException e1) {
						LOGGER.log(Log.INFO, e1);
					}
		 		  if(malseqnum > 0){
					OperationalFlightVO operationalFlightVO = new OperationalFlightVO();
					operationalFlightVO.setCompanyCode(companyCode);
					String screeningOrigin = consignmentScreeningVos.iterator().next().getScreeningLocation();
					String countryType = "";
		 			 setSCCForMailBag(consignmentScreeningVos, companyCode, malseqnum, operationalFlightVO,
							screeningOrigin, countryType);
		 			  
		 		     setRAIssuingDetailsForFirstTimeScreening(consignmentScreeningVos, mailBagId, companyCode,
								screeningOrigin, malseqnum);
						
					 
					
						
				  }
		 		 new MailController().saveSecurityDetails(consignmentScreeningVos);  
				LOGGER.exiting(CLASS, "saveScreeningDetailsFromHHT");
				}

				private void setRAIssuingDetailsForFirstTimeScreening(
						Collection<ConsignmentScreeningVO> consignmentScreeningVos, String mailBagId,
						String companyCode, String screeningOrigin, long malseqnum) {
                int raCount = 0; 
				UserVO userVO = null;
				String raid = null;
				String country = null;
			    String userId = consignmentScreeningVos.iterator().next().getIssuedBy();
				try {
					raCount = Mailbag.findScreeningDetails(mailBagId, companyCode);
					userVO = Proxy.getInstance().get(AdminUserProxy.class).findUserDetails(companyCode, userId);
					if(userVO!=null) {
						raid =userVO.getUserParameterVOs()
								.stream()
								.filter(param -> param.getParameterCode().equals("admin.user.raid"))
						        .map(parval -> parval.getParameterValue())
						        .collect(Collectors.toList())
						        .get(0);
						country = userVO.getUserParameterVOs()
								.stream()
								.filter(param -> param.getParameterCode().equals("admin.user.country"))
						        .map(parval -> parval.getParameterValue())
						       .collect(Collectors.toList())
						       .get(0);
						
						}
					if(raCount== 0){
						ConsignmentScreeningVO consignmentScreeningVO = new ConsignmentScreeningVO();
						consignmentScreeningVO.setScreenLevelValue(MailConstantsVO.SCREEN_LEVEL_VALUE);
	        			consignmentScreeningVO.setSecurityReasonCode(MailConstantsVO.SECURITY_REASON_CODE_CONSIGNOR);
	        			consignmentScreeningVO.setCompanyCode(companyCode);
	        			consignmentScreeningVO.setSource(MailConstantsVO.SOURCE_HHT);
	        			consignmentScreeningVO.setAgentType(MailConstantsVO.RA_ISSUING);
	        			consignmentScreeningVO.setAgentID(raid);
	        			consignmentScreeningVO.setIsoCountryCode(country);
	        			consignmentScreeningVO.setScreeningLocation(screeningOrigin);
	        			consignmentScreeningVO.setMalseqnum(malseqnum);
	        			consignmentScreeningVos.add(consignmentScreeningVO);
					}
					}
					catch (SystemException | ProxyException e) {
					LOGGER.log(Log.INFO, e);
				}
				}

				private void setSecurityStatusDateAndTimeForScreeningVos(
						Collection<ConsignmentScreeningVO> consignmentScreeningVos) {
					LocalDate localDate = new LocalDate(LocalDate.NO_STATION, Location.NONE, true);
					LocalDate localDate1 = new LocalDate(LocalDate.NO_STATION, Location.NONE, false);
					for(ConsignmentScreeningVO consignmentScreeningVO :consignmentScreeningVos){
						  if(consignmentScreeningVO.getScreeningLocation()!= null){
							  consignmentScreeningVO.setSecurityStatusDate (new LocalDate(consignmentScreeningVO.getScreeningLocation(), Location.ARP, true));        
						  }
						  else{
							  consignmentScreeningVO.setSecurityStatusDate(localDate);
						  }
						  consignmentScreeningVO.setDateTime(consignmentScreeningVO.getSecurityStatusDate().toDisplayFormat()); 
						  consignmentScreeningVO.setSecurityStatusDate(
								  localDate1.setDateAndTime(String.valueOf(consignmentScreeningVO.getDateTime())));
					  }
				}

				private void setSCCForMailBag(Collection<ConsignmentScreeningVO> consignmentScreeningVos,
						String companyCode, long malseqnum, OperationalFlightVO operationalFlightVO,
						String screeningOrigin, String countryType)
						throws FinderException, SystemException, PersistenceException {
					Mailbag mailBag;
					mailBag = findMailBagForScreening(companyCode, malseqnum);
					if(mailBag != null){
						for(ConsignmentScreeningVO consignmentScreeningVO :consignmentScreeningVos){
							  consignmentScreeningVO.setMalseqnum(malseqnum);
						  }
						if (consignmentScreeningVos.iterator().next().getResult().equals("P")){
						String mailbagOrigin = mailBag.getOrigin();
						if(screeningOrigin.equals(mailbagOrigin)){
							countryType = isCheckForCountryType(operationalFlightVO,screeningOrigin,countryType);
							setSecurityStatusCodeBasedOnCountryType(mailBag, countryType,consignmentScreeningVos);
						}
						else{
							setSecurityStatusCodeWhenMailbagTransit(companyCode, malseqnum, mailBag, operationalFlightVO,
								screeningOrigin, countryType,consignmentScreeningVos);
						}
						}
						else{
							mailBag.setSecurityStatusCode(SECURITY_STATUS_NSC);
							setStatusCodeAsNSCForConsignmentScreeningVO(consignmentScreeningVos);
						}
					}
				}

				private long setSecurityScreeningForNonAcceptedMailBags(
						Collection<ConsignmentScreeningVO> consignmentScreeningVos, String mailBagId,
						String companyCode, OperationalFlightVO operationalFlightVO, String countryType,String screeningOrigin)
						throws SystemException, FinderException, MailHHTBusniessException, PersistenceException {
							long malseqnum;
							Mailbag mailBagNew = null;
							Page<OfficeOfExchangeVO> origin=null;  
							Page<OfficeOfExchangeVO> destination=null;
							OfficeOfExchangeVO originOfficeOfExchangeVO=new OfficeOfExchangeVO();
							OfficeOfExchangeVO destinationOfficeOfExchangeVO=new OfficeOfExchangeVO();
							if(mailBagId.length() == 29){
								MailbagVO mailbagVO = new MailbagVO();
							    mailbagVO.setLatestStatus("NEW");
							    mailbagVO.setOoe(mailBagId.substring(0,6));
								mailbagVO.setDoe(mailBagId.substring(6,12));
							    mailbagVO.setScannedUser(consignmentScreeningVos.iterator().next().getIssuedBy());
							    if(consignmentScreeningVos.iterator().next().getSource()!= null && consignmentScreeningVos.iterator().next().getSource().equals(MailConstantsVO.SOURCE_HHT)){
								mailbagVO.setMailbagDataSource(MailConstantsVO.SOURCE_HHT);
							    }
								mailbagVO.setMailbagId(mailBagId);
								mailbagVO.setDespatchId(mailBagId.substring(0, 20));
								mailbagVO.setCompanyCode(companyCode);
								mailbagVO.setMailCategoryCode(mailBagId.substring(12,13));
							    mailbagVO.setMailSubclass(mailBagId.substring(13,15));
							    mailbagVO.setMailClass(mailbagVO.getMailSubclass().substring(0, 1));
							    mailbagVO.setYear(Integer.parseInt(mailBagId.substring(15, 16)));
							    mailbagVO.setDespatchSerialNumber(mailBagId.substring(16, 20));
							    mailbagVO.setReceptacleSerialNumber(mailBagId.substring(20, 23));
							    mailbagVO.setHighestNumberedReceptacle(mailBagId.substring(23, 24));
							    mailbagVO.setRegisteredOrInsuredIndicator(mailBagId.substring(24,
										25));
								double displayStrWt = Double.parseDouble(mailBagId.substring(25, 29)) / 10;
								Measure strWt = new Measure(UnitConstants.MAIL_WGT, displayStrWt);
								mailbagVO.setWeight(strWt); 
								mailbagVO.setStrWeight(strWt);
								mailbagVO.setScannedPort(consignmentScreeningVos.iterator().next().getScreeningLocation());
								    LocalDate scanDate =null;
									if ( mailbagVO.getScannedPort() != null) {
										scanDate = new LocalDate(mailbagVO.getScannedPort(),
												Location.ARP, true);
									} else {
										scanDate = new LocalDate(LocalDate.NO_STATION,
												Location.NONE, false);
									}
								mailbagVO.setScannedDate(scanDate);
								mailbagVO.setConsignmentDate(scanDate);
								mailbagVO.setSegmentSerialNumber(0);
								mailbagVO.setConsignmentSequenceNumber(0);
								mailbagVO.setCarrierId(0);
								mailbagVO.setFlightSequenceNumber(0);
							    LogonAttributes logonAttributes = setOriginForMailbag(mailbagVO, origin,
										originOfficeOfExchangeVO);
								setDestinationForMailBag(mailbagVO, destination, destinationOfficeOfExchangeVO,
										logonAttributes);
								mailBagNew=new Mailbag(mailbagVO);
								MailbagPK mailBagPK = null;        
			            	    mailBagPK= mailBagNew.getMailbagPK();
			            	    mailbagVO.setMailSequenceNumber(mailBagPK.getMailSequenceNumber());
			            	    malseqnum =  mailbagVO.getMailSequenceNumber() == 0
									      ? Mailbag.findMailBagSequenceNumberFromMailIdr(mailBagId,companyCode)
											      : mailbagVO.getMailSequenceNumber();

						}
					
					
							else if(mailBagId.length() == 12){
							MailbagVO mailbagVO = new MailbagVO();
							mailbagVO = setMailBagVosForDomesticMailBag(consignmentScreeningVos, mailBagId, companyCode,
									mailbagVO);
							mailBagNew=new Mailbag(mailbagVO);
							MailbagPK mailBagPK = null;        
		            	    mailBagPK= mailBagNew.getMailbagPK();
		            	    mailbagVO.setMailSequenceNumber(mailBagPK.getMailSequenceNumber());
		            	    malseqnum =  mailbagVO.getMailSequenceNumber() == 0
								      ? Mailbag.findMailBagSequenceNumberFromMailIdr(mailBagId,companyCode)
										      : mailbagVO.getMailSequenceNumber();
						}
							else{
								throw new SystemException(MailHHTBusniessException.INVALID_MAILFORAMT);
							}
						if(malseqnum > 0) {
							
							setSCCForMailBag(consignmentScreeningVos, companyCode, malseqnum, operationalFlightVO,
									screeningOrigin, countryType);
						}
						return malseqnum;
				}

				private MailbagVO setMailBagVosForDomesticMailBag(
						Collection<ConsignmentScreeningVO> consignmentScreeningVos, String mailBagId,
						String companyCode, MailbagVO mailbagVO) throws SystemException, MailHHTBusniessException {
					String routIndex=mailBagId.substring(4,8);
					Collection<RoutingIndexVO> routingIndexVOs;
					RoutingIndexVO routingIndexFilterVO=new RoutingIndexVO();
					routingIndexFilterVO.setCompanyCode(companyCode);
					routingIndexFilterVO.setRoutingIndex(routIndex);
					 mailbagVO.setScannedPort(consignmentScreeningVos.iterator().next().getScreeningLocation());
					 LocalDate scanDate =null;
						if ( mailbagVO.getScannedPort() != null) {
							scanDate = new LocalDate(mailbagVO.getScannedPort(),
									Location.ARP, true);
						} else {
							scanDate = new LocalDate(LocalDate.NO_STATION,
									Location.NONE, false);
						}
					routingIndexFilterVO.setScannedDate(scanDate);
					routingIndexVOs=findRoutingIndex(routingIndexFilterVO);
					String defDestForCdtMissingMailbag=null;
					defDestForCdtMissingMailbag=findSystemParameterValue(DEST_FOR_CDT_MISSING_DOM_MAL);	
					if(consignmentScreeningVos.iterator().next().getSource()!= null && consignmentScreeningVos.iterator().next().getSource().equals(MailConstantsVO.SOURCE_HHT)){
						mailbagVO.setMailbagDataSource(MailConstantsVO.SOURCE_HHT);
					    }
					else{
						mailbagVO.setMailbagDataSource("MTK073");
					}
					if(routingIndexVOs.isEmpty()){
						if(defDestForCdtMissingMailbag!=null &&!"NA".equals(defDestForCdtMissingMailbag) ){
							RoutingIndexVO routingIndexVO=new RoutingIndexVO();
							routingIndexVO.setRoutingIndex("XXXX");
							mailbagVO.setOrigin(consignmentScreeningVos.iterator().next().getScreeningLocation());
							mailbagVO.setDestination(defDestForCdtMissingMailbag);
							routingIndexVO.setOrigin(consignmentScreeningVos.iterator().next().getScreeningLocation());
							routingIndexVO.setDestination(defDestForCdtMissingMailbag);
							routingIndexVOs.add(routingIndexVO);
						}
						else{
								throw new SystemException(MailHHTBusniessException.PLAN_ROUTE_MISSING_FOR_MAILBAG_SCREENING);
						}
						
					}
					mailbagVO.setCompanyCode(companyCode);
					mailbagVO.setMailbagId(mailBagId);
					mailbagVO=new DSN().constructRouteIndexMailbagID(routingIndexVOs,mailbagVO);
					mailbagVO.setScannedDate(scanDate);
					mailbagVO.setConsignmentDate(scanDate);
					
					mailbagVO.setMailCompanyCode(companyCode);
					
					mailbagVO.setLatestStatus("NEW");
					String despatchid=mailbagVO.getOoe()+mailbagVO.getDoe()+mailbagVO.getMailCategoryCode()+
							mailbagVO.getMailSubclass()+mailbagVO.getYear()+mailbagVO.getDespatchSerialNumber();
					mailbagVO.setDespatchId(despatchid);
					mailbagVO.setPaCode(findSystemParameterValue(USPS_DOMESTIC_PA));
					return mailbagVO;
				}

				private void setDestinationForMailBag(MailbagVO mailbagVO, Page<OfficeOfExchangeVO> destination,
						OfficeOfExchangeVO destinationOfficeOfExchangeVO, LogonAttributes logonAttributes)
						throws MailHHTBusniessException, SystemException {
					try {
							if(mailbagVO.getDoe()!=null){
								destination=new MailController().findOfficeOfExchange(
								 mailbagVO.getCompanyCode(),mailbagVO.getDoe(),1);
							}
					} catch (SystemException e) {
						LOGGER.log(Log.SEVERE, e);
						
					}
					if(destination!=null && !destination.isEmpty()){
						destinationOfficeOfExchangeVO = destination.iterator().next(); 
					}else {if(mailbagVO.getDoe()!=null){

								throw new SystemException(MailHHTBusniessException.INVALID_OFFICEOFEXCHANGE);
							
					}}
					if(destinationOfficeOfExchangeVO.getAirportCode()!=null){
						mailbagVO.setDestination(destinationOfficeOfExchangeVO.getAirportCode());
					}else{
						setAirportCodeForDestination(mailbagVO, destinationOfficeOfExchangeVO, logonAttributes);

					}
				}

				private void setAirportCodeForDestination(MailbagVO mailbagVO,
						OfficeOfExchangeVO destinationOfficeOfExchangeVO, LogonAttributes logonAttributes)
						throws SystemException {
					if (destinationOfficeOfExchangeVO.getAirportCode() == null) {
						Collection<ArrayList<String>> oECityArpCodes = null;
						Collection<String> destinationOfficeOfExchange = new ArrayList<>();
						String airportCode = null;
						destinationOfficeOfExchange.add(destinationOfficeOfExchangeVO.getCode());
							oECityArpCodes = findCityAndAirportForOE(logonAttributes.getCompanyCode(), destinationOfficeOfExchange);

						if (oECityArpCodes != null && !oECityArpCodes.isEmpty()) {
							for (ArrayList<String> cityAndArpForOE : oECityArpCodes) {
								airportCode = cityAndArpForOE.get(2);
							}
						}
						destinationOfficeOfExchangeVO.setAirportCode(airportCode);

					}
					if(mailbagVO.getDestination()==null||mailbagVO.getDestination().trim().length()==0){
						mailbagVO.setDestination(destinationOfficeOfExchangeVO.getAirportCode());
					}
				}

				private LogonAttributes setOriginForMailbag(MailbagVO mailbagVO, Page<OfficeOfExchangeVO> origin,
						OfficeOfExchangeVO originOfficeOfExchangeVO) throws MailHHTBusniessException, SystemException {
					try {
						if(mailbagVO.getOoe()!=null){
						origin=new MailController().findOfficeOfExchange(
								 mailbagVO.getCompanyCode(),mailbagVO.getOoe(),1);
						}
					} catch (SystemException e) {
						log.log(Log.INFO, SYSTEM_EXCEPTION_ERROR,e);
					}
					if(origin!=null && !origin.isEmpty()){
						originOfficeOfExchangeVO = origin.iterator().next(); 
					}else {if(mailbagVO.getOoe()!=null){
						
								throw new SystemException(MailHHTBusniessException.INVALID_OFFICEOFEXCHANGE);
						
					}}
					if(originOfficeOfExchangeVO.getPoaCode()!=null && !originOfficeOfExchangeVO.getPoaCode().isEmpty()){
						
						try{
							PostalAdministration.find(mailbagVO.getCompanyCode(), originOfficeOfExchangeVO.getPoaCode());
						}catch(FinderException finderException){
							log.log(Log.INFO, "FinderException",finderException);
							throw new SystemException(MailHHTBusniessException.INVALID_PA);
							
						}

						mailbagVO.setPaCode(originOfficeOfExchangeVO.getPoaCode());
					}
					LogonAttributes logonAttributes = null;
					try {
						logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
					} catch (SystemException e) {
						log.log(Log.INFO, SYSTEM_EXCEPTION_ERROR,e);
						throw e;
					}
					if(originOfficeOfExchangeVO.getAirportCode()!=null){
						mailbagVO.setOrigin(originOfficeOfExchangeVO.getAirportCode());
					}else{
						setAirportCodeForOrigin(mailbagVO, originOfficeOfExchangeVO, logonAttributes);

					}
					return logonAttributes;
				}

				private void setAirportCodeForOrigin(MailbagVO mailbagVO, OfficeOfExchangeVO originOfficeOfExchangeVO,
						LogonAttributes logonAttributes) throws SystemException {
					if (originOfficeOfExchangeVO.getAirportCode() == null) {
						Collection<ArrayList<String>> oECityArpCodes = null;
						Collection<String> originOfficeOfExchange = new ArrayList<>();
						String airportCode = null;
						originOfficeOfExchange.add(originOfficeOfExchangeVO.getCode());
							oECityArpCodes = findCityAndAirportForOE(logonAttributes.getCompanyCode(), originOfficeOfExchange);
						if (oECityArpCodes != null && !oECityArpCodes.isEmpty()) {
							for (ArrayList<String> cityAndArpForOE : oECityArpCodes) {
								airportCode = cityAndArpForOE.get(2);
}
						}
						originOfficeOfExchangeVO.setAirportCode(airportCode);

					}
					if(mailbagVO.getOrigin()==null||mailbagVO.getOrigin().trim().length()==0){
						mailbagVO.setOrigin(originOfficeOfExchangeVO.getAirportCode());
					}
				}

				private void setStatusCodeAsNSCForConsignmentScreeningVO(
						Collection<ConsignmentScreeningVO> consignmentScreeningVos) {
					for(ConsignmentScreeningVO consignmentScreeningVO :consignmentScreeningVos){
						  consignmentScreeningVO.setSecurityStatusCode(SECURITY_STATUS_NSC);
					  }
				}

				private void setSecurityStatusCodeWhenMailbagTransit(String companyCode, long malseqnum,
						Mailbag mailBag, OperationalFlightVO operationalFlightVO, String screeningOrigin,
						String countryType,Collection<ConsignmentScreeningVO> consignmentScreeningVos) throws SystemException, PersistenceException {
					Collection<ConsignmentRoutingVO> consignmentRoutingVos = null;
					List<String> statusCodes = new ArrayList<>();
						consignmentRoutingVos = constructDAO().findConsignmentRoutingVosForMailbagScreening(companyCode,malseqnum);
						if(consignmentRoutingVos != null && !consignmentRoutingVos.isEmpty()){
							setStatusCodeWhenRoutingInfoNotNull(mailBag, operationalFlightVO, screeningOrigin,
									countryType, consignmentRoutingVos, statusCodes,consignmentScreeningVos);
						}
						else{
							String mailBagOrigin = mailBag.getOrigin();
							countryType = isCheckForCountryType(operationalFlightVO,mailBagOrigin,countryType);
							setSecurityStatusCodeBasedOnCountryType(mailBag, countryType,consignmentScreeningVos);
						}
				}

				private void setStatusCodeWhenRoutingInfoNotNull(Mailbag mailBag,
						OperationalFlightVO operationalFlightVO, String screeningOrigin, String countryType,
						Collection<ConsignmentRoutingVO> consignmentRoutingVos, List<String> statusCodes,Collection<ConsignmentScreeningVO> consignmentScreeningVos)
						throws SystemException {
					for(ConsignmentRoutingVO consignmentRoutingVO:consignmentRoutingVos){
						if(consignmentRoutingVO.getPol().equals(screeningOrigin)){
							break;
						}
						else{
							String previousPolOfMailbag = consignmentRoutingVO.getPol();
							countryType = isCheckForCountryType(operationalFlightVO,previousPolOfMailbag,countryType);
							getStausCodes(countryType, statusCodes);
						}
					}
					setStatusCodeFromStatusCodes(mailBag, statusCodes,consignmentScreeningVos);
				}

				private void setStatusCodeFromStatusCodes(Mailbag mailBag, List<String> statusCodes, Collection<ConsignmentScreeningVO> consignmentScreeningVos) {
					if(statusCodes.contains(SECURITY_STATUS_SHR)){
						mailBag.setSecurityStatusCode(SECURITY_STATUS_SHR);
						setStatusCodeAsSHRForConsignmentScreeningVO(consignmentScreeningVos);
					}
					else{
						mailBag.setSecurityStatusCode(SECURITY_STATUS_SPX);
						setStatusCodeAsSPXForConsignmentScreeningVO(consignmentScreeningVos);
					}
				}

				private void getStausCodes(String countryType, List<String> statusCodes) {
					if(countryType.equals("B") || countryType.equals("W") || countryType.equals("G") || countryType.equals(COUNTRY_TYPE_OTHER)){
						statusCodes.add(SECURITY_STATUS_SPX);
					  }
					 if(countryType.equals("R"))
					  {
						  statusCodes.add(SECURITY_STATUS_SHR);
					  }
				}

				private void setSecurityStatusCodeBasedOnCountryType(Mailbag mailBag, String countryType,Collection<ConsignmentScreeningVO> consignmentScreeningVos) {
					if(countryType.equals("B") || countryType.equals("W") || countryType.equals("G") || countryType.equals(COUNTRY_TYPE_OTHER)){
						  mailBag.setSecurityStatusCode(SECURITY_STATUS_SPX);
						  setStatusCodeAsSPXForConsignmentScreeningVO(consignmentScreeningVos);
					  }
					  if(countryType.equals("R"))
					  {  
						  mailBag.setSecurityStatusCode(SECURITY_STATUS_SHR);
						  setStatusCodeAsSHRForConsignmentScreeningVO(consignmentScreeningVos);
					  }
				}

				private void setStatusCodeAsSPXForConsignmentScreeningVO(
						Collection<ConsignmentScreeningVO> consignmentScreeningVos) {
					for(ConsignmentScreeningVO consignmentScreeningVO :consignmentScreeningVos){
						  consignmentScreeningVO.setSecurityStatusCode(SECURITY_STATUS_SPX);
					  }
				}

				private void setStatusCodeAsSHRForConsignmentScreeningVO(
						Collection<ConsignmentScreeningVO> consignmentScreeningVos) {
					for(ConsignmentScreeningVO consignmentScreeningVO :consignmentScreeningVos){
						  consignmentScreeningVO.setSecurityStatusCode(SECURITY_STATUS_SHR);
					  }
				}

				

				private Mailbag findMailBagForScreening(String companyCode, long malseqnum)
						throws FinderException, SystemException {
					MailbagPK mailBagPK = new MailbagPK();
					Mailbag mailBag = null;
					mailBagPK.setCompanyCode(companyCode);
					mailBagPK.setMailSequenceNumber(malseqnum);
					mailBag = Mailbag.find(mailBagPK);
					return mailBag;
				}

				private String isCheckForCountryType(OperationalFlightVO operationalFlightVO,
						String screeningOrigin,String countryType) throws SystemException {
					String countryMemberGroup = findCountryMemberGroupforAirport(operationalFlightVO, screeningOrigin);
					if (countryMemberGroup != null && countryMemberGroup.trim().length() > 0) {
						String[] countryMember = countryMemberGroup.split(",");
						for (String member : countryMember) {
							if (MailConstantsVO.GREEN.equals(member)) {
								countryType = "G";
								
							}
							else if(MailConstantsVO.RED.equals(member)){
								countryType = "R";
							}
							else if(MailConstantsVO.WHITE.equals(member)){
								countryType = "W";
							
							}
							else if(MailConstantsVO.BLUE.equals(member)){
								countryType = "B";
							}
							else{
								countryType = COUNTRY_TYPE_OTHER;
							}
						}
					}
				return countryType;
					
					}				
	public Collection<FlightSegmentVolumeDetailsVO> fetchFlightVolumeDetails(Collection<FlightFilterVO> flightFilterVOs)
			throws SystemException {
		return Proxy.getInstance().get(FlightOperationsProxy.class).fetchFlightVolumeDetails(flightFilterVOs);
	}
	public Collection<ULDTypeVO> findULDTypes(ULDTypeFilterVO uldTypeFilterVO) throws SystemException, ProxyException {
		return Proxy.getInstance().get(SharedULDProxy.class).findULDTypes(uldTypeFilterVO);
					}	
					
    private void updateAndSaveACC3Identifier(Collection<MailbagVO> mailDetails, OperationalFlightVO operationalFlightVO,
						String containerPou) throws SystemException {
					String identifyacc3onmftflt = findSystemParameterValue(
							"operations.flthandling.identifyacc3basedonmanifestedflight");
					Collection<FlightValidationVO> flightValidationVOs = null;
					flightValidationVOs = validateFlightAndUpdate(operationalFlightVO, containerPou, true);
					AirlineFilterVO airlineFilterVO = new AirlineFilterVO();
					airlineFilterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
					airlineFilterVO.setAirportCode(operationalFlightVO.getPol());

					if (!"Y".equals(identifyacc3onmftflt)) {
						FlightValidationVO flightValidationVO = null;
						if (flightValidationVOs != null && !flightValidationVOs.isEmpty()) {
							flightValidationVO = flightValidationVOs.iterator().next();
						}
						if (flightValidationVO != null) {
							airlineFilterVO.setAirlineIdentifier(flightValidationVO.getFlightCarrierId());
						} else {
							findFlightOwnerIdentifier(operationalFlightVO, containerPou, airlineFilterVO);
						}
					} else {
						airlineFilterVO.setAirlineIdentifier(operationalFlightVO.getCarrierId());
					}
					String parameterValue = null;
					parameterValue = findAirlineParameter(operationalFlightVO, airlineFilterVO);
					String alternateArpCode=null;
					alternateArpCode=findAlternateAirportCodeIfPresent(operationalFlightVO,airlineFilterVO);
					saveRcIdentifierForMailbag(mailDetails, operationalFlightVO, parameterValue, airlineFilterVO,alternateArpCode);
				}
				
    public void stampACC3IdentifierForPreviousLegMailBags(Collection<OperationalFlightVO> operationalFlightVOs)
		throws SystemException {
		log.entering(CLASS, "stampACC3IdentifierForPreviousLegMailBags");
		if (operationalFlightVOs != null) {
			for (OperationalFlightVO operationalFlightVO : operationalFlightVOs) {
				
					String[] flightRoutes = operationalFlightVO.getFlightRoute().split("-");
					List<String> routes =new ArrayList<>();
				List<String> flightRoutesList = new ArrayList<>(Arrays.asList(flightRoutes));  
				if (flightRoutesList.size() > 2) {
					Iterator<String> iterator = flightRoutesList.iterator();
					boolean foundPol = false;
					while (iterator.hasNext()) {
						String route = iterator.next();
							if(route.equals(operationalFlightVO.getPol())) {
							foundPol = true;
							iterator.remove();
							}else {
							if (!foundPol) {
								routes.add(route);
								iterator.remove();
							} else {
								routes.add(route);
							}
						}
					}
					if( !flightRoutesList.isEmpty()){	
						checkPouEuNonEUAndStampACC3(operationalFlightVO, routes, flightRoutesList);
					}
				}
			}
		}
	}
	/**
	 * @author A-8353
	 * @param operationalFlightVO
	 * @param routes
	 * @param flightRoutesList
	 * @throws SystemException
	 */
	private void checkPouEuNonEUAndStampACC3(OperationalFlightVO operationalFlightVO, List<String> routes,
			List<String> flightRoutesList) throws SystemException {
						List<String> flightRoutesArrayFiltered=new ArrayList<>(flightRoutesList);
						for(String flightPou:flightRoutesList) {
							if(checkForEuNonEuAirport(operationalFlightVO, flightPou)){
					if (routes!=null && !routes.isEmpty()) {
						for (String route:routes) {
							
							OperationalFlightVO oprFltWithPrevPol = new OperationalFlightVO();
							BeanHelper.copyProperties(oprFltWithPrevPol, operationalFlightVO);
							oprFltWithPrevPol.setPol(route);
							oprFltWithPrevPol.setFlightDate(null);
							
							Collection<FlightValidationVO> flightValidationVOs = new MailController().validateOperationalFlights(
									oprFltWithPrevPol, false);
							if (flightValidationVOs != null &&! flightValidationVOs.isEmpty()) {
											stampACC3Identifier(operationalFlightVO, oprFltWithPrevPol,
													flightValidationVOs,flightRoutesArrayFiltered,flightPou);
										}
									}
								}
								break;
							}
							else{
								flightRoutesArrayFiltered.remove(flightPou);
							}
						}
					}

	private void stampACC3Identifier(OperationalFlightVO operationalFlightVO,
			OperationalFlightVO oprFltWithPrevPol, Collection<FlightValidationVO> flightValidationVOs, List<String> flightRoutesArrayFiltered, String flightPou)
			throws SystemException {
		for(FlightValidationVO flightValidationVO:flightValidationVOs) {
			oprFltWithPrevPol.setLegSerialNumber(flightValidationVO.getLegSerialNumber());
			
		Collection<ContainerVO> containerVOs = AssignedFlight.findULDsInAssignedFlight(oprFltWithPrevPol);

		Collection<ContainerVO> bulkContainers = AssignedFlight.findContainersInAssignedFlight(oprFltWithPrevPol);

		Collection<ContainerDetailsVO> containerDetailsVOs=findContainerDetailsVOs(oprFltWithPrevPol, containerVOs, bulkContainers);
		if(containerDetailsVOs != null && !containerDetailsVOs.isEmpty()) {//container pou
			for(ContainerDetailsVO containerDetailsVO : containerDetailsVOs) {
				if (containerDetailsVO.getMailDetails() != null
						&& !containerDetailsVO.getMailDetails().isEmpty()
						&&flightRoutesArrayFiltered.contains(containerDetailsVO.getPou())){														
					updateAndSaveACC3Identifier(containerDetailsVO.getMailDetails(),operationalFlightVO,flightPou);
				}
			}
		  }
		}
	}					

	 /**
     * @param containerVO
     * @return
     * @throws SystemException
				 * @author a-10383 This method is used to retrieve the
				 *         ContainerassignmentDetails if it is already assigned
				 */
				public ContainerAssignmentVO findContainerWeightCapture(ContainerVO containerVO)
						throws SystemException {
								log.entering(CLASS, "findContainerWeightCapture");
								log.exiting(CLASS, "findContainerWeightCapture");
								return Container.findContainerWeightCapture(containerVO.getCompanyCode(), containerVO.getContainerNumber());
				}
				
	public MailbagVO fetchMailSecurityDetails(MailScreeningFilterVO mailScreeningFilterVo) throws SystemException {
		
		MailbagVO mailbagVO = listmailbagSecurityDetails(mailScreeningFilterVo);
		
		OperationalFlightVO operationalFlightVO = new OperationalFlightVO();
		operationalFlightVO.setCompanyCode(mailScreeningFilterVo.getCompanyCode());
		if (mailbagVO != null && mailbagVO.getConsignmentScreeningVO() != null
				&& !mailbagVO.getConsignmentScreeningVO().isEmpty()) {
			Collection<ConsignmentScreeningVO> consignmentScreeningVOs = mailbagVO.getConsignmentScreeningVO();
			for (ConsignmentScreeningVO consignmentScreeningVO : consignmentScreeningVOs) {

				if (consignmentScreeningVO.getAgentType() != null && consignmentScreeningVO.getIsoCountryCode() != null && consignmentScreeningVO.getAgentID() != null
						&& MailConstantsVO.SECURITY_REASON_CODE_CONSIGNOR.equals(consignmentScreeningVO.getScreenDetailType())
						&& (MailConstantsVO.RA_ACCEPTING.equals(consignmentScreeningVO.getAgentType())
						|| MailConstantsVO.RA_ISSUING.equals(consignmentScreeningVO.getAgentType()))) {
					String agentId;
					boolean isNotGreenOrBlueCountryAirport = true;
					String countryMemberGroups = null;
					String countryMemberGroup = null;
					try {
						countryMemberGroup = validateCountryCode(operationalFlightVO.getCompanyCode(), consignmentScreeningVO.getIsoCountryCode(),
								countryMemberGroups);
					}  catch (SharedProxyException e) {
						log.log(Log.SEVERE, e);
						throw new SystemException(e.getMessage());
					}
					if (countryMemberGroup != null && countryMemberGroup.trim().length() > 0) {
						String[] countryMember = countryMemberGroup.split(",");
						for (String member : countryMember) {
							if (MailConstantsVO.GREEN.equals(member) || MailConstantsVO.BLUE.equals(member) || MailConstantsVO.EU.equals(member)) {
								isNotGreenOrBlueCountryAirport = false;
								break;
							}
						}
					}
					if (!isNotGreenOrBlueCountryAirport) {
						agentId = consignmentScreeningVO.getIsoCountryCode().concat("/RA").concat("/".concat(consignmentScreeningVO.getAgentID()))
								.concat(consignmentScreeningVO.getExpiryDate() != null ? "/".concat(consignmentScreeningVO.getExpiryDate()): "");
					} else {
						agentId = consignmentScreeningVO.getIsoCountryCode().concat("/RA3").concat("/".concat(consignmentScreeningVO.getAgentID()))
								.concat(consignmentScreeningVO.getExpiryDate() != null ? "/".concat(consignmentScreeningVO.getExpiryDate()): "");
					}
					consignmentScreeningVO.setAgentID(agentId);
				}
			}
		}
		return mailbagVO;
	}
	public TransferManifestVO generateTransferManifestReportDetails(String companyCode,String transferManifestId ) throws SystemException, PersistenceException {
		log.entering(CLASS, "generateTransferManifestReportDetails");
		return TransferManifest.generateTransferManifestReport(companyCode, transferManifestId);
	}	
     /**
	   * @author A-8353
	   * @param operationalFlightVO
	   * @param airlineFilterVO
	   * @return
	   */
	  private String findAlternateAirportCodeIfPresent(OperationalFlightVO operationalFlightVO,
			  AirlineFilterVO airlineFilterVO) {
		  String alternateArpCode=null;
		  String isAlternateArpRequired = null;
		  Map<String, String> parameterMap = null;
		  Collection<AirlineAirportParameterVO> parameterMapAirline = null;
		  String parameterCode = AIRLINE_PARAMETER_ICAOAIRPORTCODEREQUIRED;
		  Collection<String> airportParameters = new ArrayList<>();
		  airportParameters.add(AIRPORT_PARAMETER_ICAOAIRPORTCODE);
		  AirlineAirportParameterFilterVO airlineAirportParameterFilterVO = new AirlineAirportParameterFilterVO();
		  airlineAirportParameterFilterVO.setCompanyCode(operationalFlightVO.getCompanyCode());
		  airlineAirportParameterFilterVO.setAirlineId(airlineFilterVO.getAirlineIdentifier());
		  airlineAirportParameterFilterVO.setAirportCode(operationalFlightVO.getPol());
		  airlineAirportParameterFilterVO.setParameterCode(parameterCode);
		  try {
			  parameterMapAirline =  Proxy.getInstance().get(SharedAirlineProxy.class)
					  .findAirlineAirportParameters(airlineAirportParameterFilterVO);
		  } catch (ProxyException | SystemException e) {
			  LOGGER.log(Log.FINE, e);
		  }
		  if (parameterMapAirline != null &&! parameterMapAirline.isEmpty()) {
			  isAlternateArpRequired = parameterMapAirline.iterator().next().getParameterValue();
		  }
		  if (isAlternateArpRequired != null && MailConstantsVO.FLAG_YES.equals(isAlternateArpRequired)) {
			  try {
				  parameterMap = Proxy.getInstance().get(SharedAreaProxy.class).findAirportParametersByCode(operationalFlightVO.getCompanyCode(),
						  operationalFlightVO.getPol(), airportParameters);
			  } catch ( SystemException e) {
				  LOGGER.log(Log.FINE, e);
			  }
			  if (parameterMap != null) {
				  alternateArpCode = parameterMap.get(AIRPORT_PARAMETER_ICAOAIRPORTCODE);
			  }

			  if(alternateArpCode!=null&&alternateArpCode.trim().length()>0){
				  return alternateArpCode;
			  }
			  else {
				  return null;
			  }


		  }

		  return null;
	  }

public Collection<MailbagVO> generateMailTagDetails(Collection<MailbagVO> mailbagVOs) throws SystemException{
	return  Mailbag.generateMailTag((ArrayList<MailbagVO>) mailbagVOs);
}
public void publishMailOperationDataForRapidSystem(MailOperationDataFilterVO mailOperationDataFilterVO)
        throws SystemException, RemoteException {
    log.entering(MODULE, "publishMailOperationDataForRapidSystem");
    	LogonAttributes logonAttributes= ContextUtils.getSecurityContext().getLogonAttributesVO();
    	mailOperationDataFilterVO.setCompanyCode(logonAttributes.getCompanyCode());
    	PublishRapidMailOperationsDataFeatureVO featureVo = new PublishRapidMailOperationsDataFeatureVO();
    	featureVo.setMailOperationDataFilterVO(mailOperationDataFilterVO);        	
        try {
        	PublishRapidMailOperationsDataFeature feature = (PublishRapidMailOperationsDataFeature) SpringAdapter
					.getInstance().getBean("operations.flthandling.publishRapidMailOperationsDataFeature");
        	feature.execute(featureVo);
		} catch (BusinessException e) {
			LOGGER.log(Log.SEVERE, e);
			throw new SystemException(e.getErrors());
		}
        log.exiting(MODULE, "publishMailOperationDataForRapidSystem");
}  


}