/*
 * RecoDefaultsExtServiceImpl.java Created on Sep 29, 2016
 *
 * Copyright 2005 IBS Software Services (P) Ltd. All Rights Reserved.
 *
 * This software is the proprietary information 
 * of IBS Software Services (P) Ltd.
 * 
 * Use is subject to license terms.
 */

package com.ibsplc.icargo.services.reco.defaults.webservices.external.lh;

import java.math.BigInteger;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import com.ibsplc.icargo.business.reco.defaults.types.external.lh.ValidateRecoRequestType;
import com.ibsplc.icargo.business.reco.defaults.types.external.lh.ValidateRecoResponseDetails;
import com.ibsplc.icargo.business.reco.defaults.types.external.lh.ValidateRecoResponseType;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoDetailsVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoFilterVO;
import com.ibsplc.icargo.business.shared.defaults.types.standard.ErrorDetailType;
import com.ibsplc.icargo.framework.services.jaxws.endpoint.WebServiceEndPoint;
import com.ibsplc.icargo.framework.services.jaxws.endpoint.exception.WSBusinessException;
import com.ibsplc.icargo.framework.util.time.LocalDate;
import com.ibsplc.icargo.framework.util.time.Location;
import com.ibsplc.xibase.client.framework.delegate.Module;
import com.ibsplc.xibase.client.framework.delegate.SubModule;
import com.ibsplc.xibase.server.framework.exceptions.SystemException;
import com.ibsplc.xibase.server.framework.vo.ErrorVO;
import com.ibsplc.xibase.util.log.Log;
import com.ibsplc.xibase.util.log.factory.LogFactory;

/**
 * @author A-4823
 * This class was generated by Apache CXF 2.4.3
 * 2016-07-06T09:01:59.572+02:00
 * Generated source version: 2.4.3
 * 
 */

@javax.jws.WebService(
		serviceName = "RecoDefaultsExtService",
		portName = "RecoDefaultsExtServiceHTTP",
		targetNamespace = "http://www.ibsplc.com/icargo/services/external/lh/RecoDefaultsExtService/2016/05/23_01",
		wsdlLocation = "./build-webservices/wsdl/reco/defaults/external/lh/RecoDefaultsExtService.wsdl",
		endpointInterface = "com.ibsplc.icargo.services.reco.defaults.webservices.external.lh.RecoDefaultsExtService")

@Module("reco")
@SubModule("defaults") 
public class RecoDefaultsExtServiceImpl extends WebServiceEndPoint implements RecoDefaultsExtService {
	private Log log = LogFactory.getLogger("RECO_DEFAULTS");
	private static final String CLASS_NAME = "RecoDefaultsExtServiceImpl";
	private static final String UNEXPECTED_ERROR = "UNEXPECTED_ERROR";

	/**
	 * @author A-4823
	 * @param recoRequestType
	 * @return ValidateRecoResponseType
	 * @throws InvalidRequestFault
	 * @throws ServiceFault
	 */
	public ValidateRecoResponseType validateReco(ValidateRecoRequestType recoRequestType)
			throws InvalidRequestFault, ServiceFault {
		log.entering(CLASS_NAME, "validateReco");

		EmbargoFilterVO embargoFilterVO = new EmbargoFilterVO();
		Collection<ErrorDetailType> errorDetailTypes  = new ArrayList<ErrorDetailType>();
		Collection<EmbargoDetailsVO> embargoDetailsVOs = null;

		embargoFilterVO.setSearchParameterCode(EmbargoFilterVO.PRODUCT);
		embargoFilterVO.setCompanyCode(getCompanyCode());
		try {
			embargoDetailsVOs = despatchRequest("parameterSelectiveEmbargoSearch", embargoFilterVO);
		} catch (WSBusinessException wsBusinessException) {
			if (wsBusinessException.getErrors() != null
					&& wsBusinessException.getErrors().size() > 0) {
				for (ErrorVO error : wsBusinessException.getErrors()) {
					ErrorDetailType errorType = new ErrorDetailType();
					errorType.setErrorCode(error.getErrorCode());
					String errorDescription = "Embargo Exists";//TODO
					if ((errorDescription == null)
							|| (errorDescription.trim().length() == 0)) {
						errorDescription = error.getErrorCode();
					}

					errorType.setErrorDesc(errorDescription);
					errorDetailTypes.add(errorType);
				}
			}
		} catch (SystemException e) {
			ErrorDetailType error = new ErrorDetailType();
			error.setErrorCode(UNEXPECTED_ERROR);
			error.setErrorDesc(e.getMessage());
			errorDetailTypes.add(error);
		}
		ValidateRecoResponseType recoResponseType = populateRecoResponse(embargoDetailsVOs,recoRequestType.getRequestID());
		log.exiting(CLASS_NAME, "validateReco");
		return recoResponseType;
	}
	/**
	 * 
	 * @param embargoDetailsVOs
	 * @param requestID
	 * @return ValidateRecoResponseType
	 */
	private ValidateRecoResponseType populateRecoResponse(
			Collection<EmbargoDetailsVO> embargoDetailsVOs, String requestID) {
		log.entering(CLASS_NAME, "populateRecoResponse");
		ValidateRecoResponseType recoResponseType = new ValidateRecoResponseType();

		recoResponseType.setRequestID(requestID);
		if(embargoDetailsVOs!=null){

			for(EmbargoDetailsVO embargoDetailsVO : embargoDetailsVOs){
				ValidateRecoResponseDetails recoResponseDetails = new ValidateRecoResponseDetails();

				recoResponseDetails.setEmbargoRefNum(embargoDetailsVO.getEmbargoReferenceNumber());
				recoResponseDetails.setEmbargoDescription(embargoDetailsVO.getEmbargoDescription());
				recoResponseDetails.setEmbargoLevel(embargoDetailsVO.getEmbargoLevel());
				recoResponseDetails.setRemarks(embargoDetailsVO.getRemarks());
				recoResponseDetails.setStartDate(embargoDetailsVO.getStartDate().toDisplayDateOnlyFormat());
				recoResponseDetails.setEndDate(embargoDetailsVO.getEndDate().toDisplayDateOnlyFormat());
				recoResponseDetails.setStatus(embargoDetailsVO.getStatus());
				recoResponseDetails.setCategory(embargoDetailsVO.getCategory());
				recoResponseDetails.setComplianceType(embargoDetailsVO.getComplianceType());				

				//ORIGIN
				recoResponseDetails.setOriginAirportCodeInc(embargoDetailsVO.getOriginAirportCodeInc());
				recoResponseDetails.setOriginAirportCodeExc(embargoDetailsVO.getOriginAirportCodeExc());
				recoResponseDetails.setOriginAirportGroupInc(embargoDetailsVO.getOriginAirportGroupInc());
				recoResponseDetails.setOriginAirportGroupExc(embargoDetailsVO.getOriginAirportGroupExc());
				recoResponseDetails.setOriginCountryCodeExc(embargoDetailsVO.getOriginCountryCodeExc());
				recoResponseDetails.setOriginCountryCodeInc(embargoDetailsVO.getOriginCountryCodeInc());
				recoResponseDetails.setOriginCountryGroupExc(embargoDetailsVO.getOriginCountryGroupExc());
				recoResponseDetails.setOriginCountryGroupInc(embargoDetailsVO.getOriginCountryGroupInc());
				//DESTINATION
				recoResponseDetails.setDestinationAirportCodeInc(embargoDetailsVO.getDestinationAirportCodeInc());
				recoResponseDetails.setDestinationAirportCodeExc(embargoDetailsVO.getDestinationAirportCodeExc());
				recoResponseDetails.setDestinationAirportGroupInc(embargoDetailsVO.getDestinationAirportGroupInc());
				recoResponseDetails.setDestinationAirportGroupExc(embargoDetailsVO.getDestinationAirportGroupExc());
				recoResponseDetails.setDestinationCountryCodeExc(embargoDetailsVO.getDestinationCountryCodeExc());
				recoResponseDetails.setDestinationCountryCodeInc(embargoDetailsVO.getDestinationCountryCodeInc());
				recoResponseDetails.setDestinationCountryGroupExc(embargoDetailsVO.getDestinationCountryGroupExc());
				recoResponseDetails.setDestinationCountryGroupInc(embargoDetailsVO.getDestinationCountryGroupInc());
				//VIAPOINT
				recoResponseDetails.setViaPointAirportCodeInc(embargoDetailsVO.getViaPointAirportCodeInc());
				recoResponseDetails.setViaPointAirportCodeExc(embargoDetailsVO.getViaPointAirportCodeExc());
				recoResponseDetails.setViaPointAirportGroupInc(embargoDetailsVO.getViaPointAirportGroupInc());
				recoResponseDetails.setViaPointAirportGroupExc(embargoDetailsVO.getViaPointAirportGroupExc());
				recoResponseDetails.setViaPointCountryCodeExc(embargoDetailsVO.getViaPointCountryCodeExc());
				recoResponseDetails.setViaPointCountryCodeInc(embargoDetailsVO.getViaPointCountryCodeInc());
				recoResponseDetails.setViaPointCountryGroupExc(embargoDetailsVO.getViaPointCountryGroupExc());
				recoResponseDetails.setViaPointCountryGroupInc(embargoDetailsVO.getViaPointCountryGroupInc());				

				recoResponseDetails.setProductExc(embargoDetailsVO.getProductExc());
				recoResponseDetails.setProductInc(embargoDetailsVO.getProductInc());
				recoResponseDetails.setCommodityInc(embargoDetailsVO.getCommodityInc());
				recoResponseDetails.setCommodityExc(embargoDetailsVO.getCommodityExc());

				if(embargoDetailsVO.getOriginDayOfOperation()!=null){
					recoResponseDetails.setDayOfWeekOrigin(new BigInteger(embargoDetailsVO.getOriginDayOfOperation()));
				}
				if(embargoDetailsVO.getDestinationDayOfOperation()!=null){
					recoResponseDetails.setDayOfWeekDestination(new BigInteger(embargoDetailsVO.getDestinationDayOfOperation()));
				}
				recoResponseType.getValidateRecoResponse().add(recoResponseDetails);				
			}
		}
		log.exiting(CLASS_NAME, "populateRecoResponse");
		return recoResponseType;
	}

	/**
	 *
	 * @param dateString
	 * @return
	 * method to convert timestamp_string to localdate
	 */
	private LocalDate getLocalDateTimeStamp(String dateString){
		SimpleDateFormat datetimeFormatter = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
		Date date= new Date();
		try {
			date = datetimeFormatter.parse(dateString);
		} catch (ParseException e) {
			log.log(Log.FINE, "_ParseException_");
		}
		Timestamp timestamp = new Timestamp(date.getTime());
		return new LocalDate(LocalDate.NO_STATION, Location.NONE, timestamp);
	}

}
