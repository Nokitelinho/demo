/*
 * EmbargoSqlDAO.java Created on May 2, 2005
 *
 * Copyright 2005 IBS Software Services (P) Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of IBS Software Services (P) Ltd.
 * Use is subject to license terms.
 */
package com.ibsplc.icargo.persistence.dao.reco.defaults;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;

import com.ibsplc.icargo.business.capacity.booking.vo.BookingFlightDetailVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoDetailsVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoFilterVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoGeographicLevelVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoGlobalParameterVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoLocalLanguageVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoParameterVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoRulesVO;
import com.ibsplc.icargo.business.reco.defaults.vo.EmbargoSearchVO;
import com.ibsplc.icargo.business.reco.defaults.vo.ExceptionEmbargoDetailsVO;
import com.ibsplc.icargo.business.reco.defaults.vo.ExceptionEmbargoFilterVO;
import com.ibsplc.icargo.business.reco.defaults.vo.RegulatoryMessageFilterVO;
import com.ibsplc.icargo.business.reco.defaults.vo.RegulatoryMessageVO;
import com.ibsplc.icargo.business.reco.defaults.vo.ShipmentDetailsVO;
import com.ibsplc.icargo.framework.util.time.LocalDate;
import com.ibsplc.icargo.framework.util.time.Location;
import com.ibsplc.xibase.server.framework.exceptions.SystemException;
import com.ibsplc.xibase.server.framework.persistence.PersistenceException;
import com.ibsplc.xibase.server.framework.persistence.query.AbstractQueryDAO;
import com.ibsplc.xibase.server.framework.persistence.query.Page;
import com.ibsplc.xibase.server.framework.persistence.query.PageableNativeQuery;
import com.ibsplc.xibase.server.framework.persistence.query.Procedure;
import com.ibsplc.xibase.server.framework.persistence.query.Query;
import com.ibsplc.xibase.server.framework.persistence.query.sql.Mapper;
import com.ibsplc.xibase.server.framework.persistence.query.sql.MultiMapper;
import com.ibsplc.xibase.server.framework.util.ContextUtils;
import com.ibsplc.xibase.util.log.Log;
import com.ibsplc.xibase.util.log.factory.LogFactory;

/**
 * @author A-1358
 *
 * This class implements the query methods defined in shared embargo
 */
public class EmbargoRulesSqlDAO extends AbstractQueryDAO implements EmbargoRulesDAO {

    private static final String OR = " OR ( ";
	private static final String OR_WITHOUT_BRAKET = " OR  ";

    private static final String SHARED_EMBARGO_CHECKFORDUPLICATES = "reco.defaults.checkforduplicates";

    private static final String SHARED_EMBARGO_FINDEMBARGOGLOBALPARAMETERS = "reco.defaults.findembargoglobalparameters";

    private static final String SHARED_EMBARGO_FINDEMBARGODETAILS = "reco.defaults.findembargodetails";

    private static final String SHARED_EMBARGO_FINDEMBARGOS = "reco.defaults.findembargos";

    private static final String SHARED_EMBARGO_CHECKEMBARGOS = "reco.defaults.checkembargos";

    private static final String SHARED_EMBARGO_CHECKEMBARGOSFORCOOLFROZEN = "reco.defaults.checkcoolfrozenembargos";

    private static final String SHARED_EMBARGO_SEARCHEMBARGOS = "reco.defaults.searchembargos";

    private static final String SHARED_EMBARGO_DUPLICATEEMBARGOS = "reco.defaults.findduplicateembargos";

    private static final String FIND_REGULATORY_COMPOSE_MESSAGES = "reco.defaults.findcomposemessages";

    private static final String UPDATE_EMBARGO_PROCEDURE = "reco.defaults.updateEmbargoView";


    private static final String EXCEPTION_AWB_EMBARGO_QUERY="reco.defaults.searchexceptionembargos";


    private static final String GEOGRAHICAL_LEVEL_ORIGIN = "O";
    private static final String GEOGRAHICAL_LEVEL_DESTINATION = "D";
    private static final String GEOGRAHICAL_LEVEL_VIAPOINT = "V";
    private static final String GEOGRAHICAL_LEVEL_ALL = "A";

    private static final String PARAMETER_CODE_SCC = "SCC";
    private static final String PARAMETER_CODE_SCC_GROUP = "SCCGRP";
    private static final String PARAMETER_CODE_TIME = "TIM";
    private static final String PARAMETER_CODE_CARRIER = "CAR";
    private static final String PARAMETER_CODE_HEIGHT = "HGT";
    private static final String PARAMETER_CODE_LENGTH = "LEN";
    private static final String PARAMETER_CODE_WIDTH = "WID";
    private static final String PARAMETER_CODE_WEIGHT = "WGT";
    private static final String PARAMETER_CODE_NAT = "GOODS";
    private static final String PARAMETER_CODE_COM = "COM";
    private static final String PARAMETER_CODE_PRD = "PRD";
    private static final String PARAMETER_CODE_AWBPFX = "AWBPRE";
    private static final String PARAMETER_CODE_FLTNUM = "FLTNUM";
    private static final String PARAMETER_CODE_PAYTYP = "PAYTYP";
    private static final String PARAMETER_CODE_FLTTYP = "FLTTYP";
    private static final String PARAMETER_CODE_SLTIND = "SPLIT";
    private static final String PARAMETER_CODE_FLTOWN = "FLTOWR";
    private static final String PARAMETER_CODE_UNDNUM = "UNNUM";
    private static final String PARAMETER_CODE_DATE="DAT";
    private static final String PARAMETER_CODE_UNIDs="UNCLS";
    private static final String PARAMETER_CODE_UNKSHP="UNKSHP";
    private static final String TILDE = "~";
    private static final String PARAMETER_CODE_ARL_GROUP = "ARLGRP";
    private static final String APP_TRANSACTION_HAWB = "HAWB";

    public static final String SERVICE_CARGO_CLASS = "SRVCRGCLS";
    public static final String AIRCRAFT_CLASSIFICATION="ACRCLS";
    public static final String AIRCRAFT_CLASS_ORIGIN="ACRCLSORG";
    public static final String AIRCRAFT_CLASS_VIA_POINT="ACRCLSVIA";
    public static final String AIRCRAFT_CLASS_DESTINATION ="ACRCLSDST";
    public static final String AIRCRAFT_CLASS_ALL= "ACRCLSALL";
    public static final String SHIPPER = "SHP";
    public static final String SHIPPER_GROUP = "SHPGRP";
    public static final String CONSIGNEE = "CNS";
    public static final String CONSIGNEE_GROUP = "CNSGRP";
    public static final String SHIPMENT_TYPE = "SHPTYP";
    public static final String CONSOL = "CNSL";
    public static final String DATE_FORMAT = "yyyy-MM-dd";
    public static final String STRDAT="STRDAT";
    public static final String PARVAL="PARVAL";
    public static final String HGTSTR="HGTSTR";
    public static final String DSTSTRTIM="DSTSTRTIM";
    public static final String FLTNUMANYGTEQ= "FLTNUMANYGTEQ";
    private static final String RULETYPE_EMBARGO = "E";
    private static final String SYSDATE =" sysdate() ";
    public static final String REFNUM = "REFNUM";
    public static final String VERNUM = "VERNUM";
    public static final String CMPCOD = "CMPCOD";
    public static final String RECLCLLNG = "RECLCLLNG";
    public static final String AND_DSTARPCODINC_IS_NULL_OR_DSTARPGRPINC_IS_NULL_OR_DSTARPGRPIN = "  AND ( (DSTARPCODINC IS NULL OR DSTARPCODINC ='-') AND  (DSTCNTCODINC IS NULL OR DSTCNTCODINC ='-') AND (DSTARPGRPINC IS NULL OR DSTARPGRPINC='-')  AND (DSTCNTGRPINC IS NULL OR DSTCNTGRPINC = '-') ) ";
    public static final String AND_ORGARPCODINC_IS_NULL = "  AND ( ORGARPCODINC IS NULL) ";
    public static final String OR_PKG_FRMWRK_FUN_STRING_CHECK_REC_ORGCNTCODEXC_0 = " OR pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTCODEXC,',')        >0 ";
    public static final String AND_ORGARPCODINC_IS_NULL_OR_ORGCNTGRPINC = "  AND ( (ORGARPCODINC IS NULL OR ORGARPCODINC ='-') AND  (ORGCNTCODINC IS NULL OR ORGCNTCODINC ='-') AND (ORGARPGRPINC IS NULL OR ORGARPGRPINC='-')  AND (ORGCNTGRPINC IS NULL OR ORGCNTGRPINC = '-') )";
    public static final String AND1 = "  AND( (";
    public static final String AND_NOT = " )AND NOT( ";
    public static final String OR_PKG_FRMWRK_FUN_CHECK_STRING_COMMON_REC_DSTARPGRPEXC_0 = " OR pkg_frmwrk.fun_check_string_common(?,REC.DSTARPGRPEXC,',')      >0 ";
    public static final String OR_PKG_FRMWRK_FUN_CHECK_STRING_COMMON_REC_DSTCNTGRPEXC_0 = " OR pkg_frmwrk.fun_check_string_common(?,REC.DSTCNTGRPEXC,',')      >0 ";
    public static final String PKG_FRMWRK_FUN_STRING_CHECK_REC_ORGCNTGRPEXC_0 = " OR pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTGRPEXC,',')      >0 ";
    public static final String VIAARPCODINC_IS_NULL_OR_VIAARPCODINC_AND_VIACNTCODINC_IS_NULL_OR_VIACNTCODINC_AND_VIAARPGRPINC_IS_NULL_OR_VIAARPGRPINC_AND_VIACNTGRPINC_IS_NULL_OR_VIACNTGRPINC = "  AND ( (VIAARPCODINC IS NULL OR VIAARPCODINC ='-') AND  (VIACNTCODINC IS NULL OR VIACNTCODINC ='-') AND (VIAARPGRPINC IS NULL OR VIAARPGRPINC='-')  AND (VIACNTGRPINC IS NULL OR VIACNTGRPINC = '-') ) ";
    public static final String FUN_CHECK_STRING_COMMON_REC_ORGARPGRPEXC_0 = " OR pkg_frmwrk.fun_check_string_common(?,REC.ORGARPGRPEXC,',')      >0 ";
    private StringBuilder queryStringBuilder=null;
    private static final String SRVCTYPFRTECSTPEXC = "SRVCTYPFRTECSTPEXC";
    private static final String SRVCTYPFRTECSTPINC = "SRVCTYPFRTECSTPINC";
    private static final String SRVCTYPFRTECSTP = "SRVCTYPFRTECSTP";

    private Log log=LogFactory.getLogger("RECO_DEFAULTS_SQLDAO");

    //Added by A-5175 to enable Last Link in Pagination to end
    private static final String SHARED_ULD_DENSE_RANK_QUERY=
            "SELECT RESULT_TABLE.* ,DENSE_RANK() OVER ( ORDER BY ";
    private static final String SHARED_ULD_ROWNUM_RANK_QUERY=
            "SELECT RESULT_TABLE.* ,ROW_NUMBER() OVER (ORDER BY null) AS RANK FROM(";
    private static final String SHARED_ULD_SUFFIX_QUERY=") RESULT_TABLE";
    //Added by A-5175 to enable Last Link in Pagination to end

    private static final String REGULATORY_COMPOSE_RANK_QUERY=
            "SELECT RESULT_TABLE.* ,DENSE_RANK() OVER ( ORDER BY ";
    private static final String REGULATORY_COMPOSE_SUFFIX_QUERY=") RESULT_TABLE";

    private static final String REGULATORY_COMPLIANCE_RULES_RANK_QUERY=
            "SELECT RESULT_TABLE.* ,DENSE_RANK() OVER ( ORDER BY ";
    private static final String REGULATORY_COMPLIANCE_RULES_SUFFIX_QUERY=") RESULT_TABLE";

    private static final String EXCEPTION_EMBARGO_RANK_QUERY=
            "SELECT RESULT_TABLE.* ,DENSE_RANK() OVER ( ORDER BY ";
    private static final String EXCEPTION_EMBARGO_SUFFIX_QUERY=") RESULT_TABLE";
    //Added by A-8368 as part of sonar issue - IASCB-104546 starts
    private static final String INSTR_SEGORGARPGRPINC_QUERY="OR (INSTR(SEGORGARPGRPINC,?)>0 OR INSTR(SEGORGARPGRPEXC , ?) = 0 )" ;
    private static final String STRPOS_SEGORGARPGRPINC_QUERY="OR (STRPOS(SEGORGARPGRPINC,?)>0 OR STRPOS(SEGORGARPGRPEXC , ?) = 0 )" ;
    private static final String INSTR_SEGORGCNTCODINC_QUERY="OR (INSTR(SEGORGCNTCODINC,?)>0 OR INSTR(SEGORGCNTCODEXC , ?) = 0 ) ";
    private static final String STRPOS_SEGORGCNTCODINC_QUERY="OR (STRPOS(SEGORGCNTCODINC,?)>0 OR STRPOS(SEGORGCNTCODEXC , ?) = 0 ) ";
    private static final String INSTR_SEGORGCNTGRPINC_QUERY="OR (INSTR(SEGORGCNTGRPINC,?)>0 OR INSTR(SEGORGCNTGRPEXC , ?) = 0 ) ";
    private static final String STRPOS_SEGORGCNTGRPINC_QUERY="OR (STRPOS(SEGORGCNTGRPINC,?)>0 OR STRPOS(SEGORGCNTGRPEXC , ?) = 0 ) ";
    private static final String SEGORGDAYOPR_QUERY= " AND ((SEGORGDAYOPR LIKE ?) ";
    private static final String SEGORGARPCODINC_QUERY="  OR ( (SEGORGARPCODINC IS NULL OR SEGORGARPCODINC ='-') AND  (SEGORGCNTCODINC IS NULL OR SEGORGCNTCODINC ='-') AND (SEGORGARPGRPINC IS NULL OR SEGORGARPGRPINC='-')  AND (SEGORGCNTGRPINC IS NULL OR SEGORGCNTGRPINC = '-') ) ";
    private static final String SEGDSTARPCODINC_QUERY="  OR ( (SEGDSTARPCODINC IS NULL OR SEGDSTARPCODINC ='-') AND  (SEGDSTCNTCODINC IS NULL OR SEGDSTCNTCODINC ='-') AND (SEGDSTARPGRPINC IS NULL OR SEGDSTARPGRPINC='-')  AND (SEGDSTCNTGRPINC IS NULL OR SEGDSTCNTGRPINC = '-') ) ";
    private static final String DATABASE_SYSTEM_DATE=",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') ))";
    private static final String TO_DATE_CONVERSION=" OR ((TO_TIMESTAMP(to_char(";
    private static final String AND_QUERY=" AND ((((";
    private static final String AND_STR="  AND((";
    private static final String AND_TO_DATE_QUERY=" AND TO_TIMESTAMP(to_char(";
    private static final String TO_DATE_QUERY="(TO_TIMESTAMP(to_char(";
    private static final String SEGDSTDAYOPR_QUERY=" OR (SEGDSTDAYOPR IS NULL)) ";
    private static final String AND_SEGDSTDAYOPR_QUERY=" AND ((SEGDSTDAYOPR LIKE ?) ";
    private static final String INSTR_SEGDSTCNTCODINC_QUERY="OR (INSTR(SEGDSTCNTCODINC,?)>0 OR INSTR(SEGDSTCNTCODEXC , ?) = 0 ) ";
    private static final String STRPOS_SEGDSTCNTCODINC_QUERY="OR (STRPOS(SEGDSTCNTCODINC,?)>0 OR STRPOS(SEGDSTCNTCODEXC , ?) = 0 ) ";
    private static final String INSTR_SEGDSTARPGRPINC_QUERY="OR (INSTR(SEGDSTARPGRPINC,?)>0 OR INSTR(SEGDSTARPGRPEXC , ?) = 0 ) ";
    private static final String STRPOS_SEGDSTARPGRPINC_QUERY="OR (STRPOS(SEGDSTARPGRPINC,?)>0 OR STRPOS(SEGDSTARPGRPEXC , ?) = 0 ) ";
    private static final String INSTR_SEGDSTCNTGRPINC_QUERY="OR (INSTR(SEGDSTCNTGRPINC,?)>0 OR INSTR(SEGDSTCNTGRPEXC , ?) = 0 ) ";
    private static final String STRPOS_SEGDSTCNTGRPINC_QUERY="OR (STRPOS(SEGDSTCNTGRPINC,?)>0 OR STRPOS(SEGDSTCNTGRPEXC , ?) = 0 ) ";
    private static final String INSTR_TO_TIMESTAMP=" (TO_TIMESTAMP(to_char(" ;
    //Added by A-8368 as part of sonar issue - IASCB-104546 ends
    private static final String RECO_DEFAULTS_CHECK_ANY_EMBARGO_EXISTS =
            "reco.defaults.checkanyembargoexists";
    private static final String RECO_DEFAULTS_FIND_EXCEPTION_EMBARGO =
            "reco.defaults.findexceptionembargos";
    private static final String MSTAWB = "MSTAWB";
    private static final String HYPHEN_SEPERATOR = "-";
    private static final String RECO_PARMETERSELECTIVESEARCH= "reco.defaults.parameterselectivesearch";


    private static final String SHARED_EMBARGO_CHECKEMBARGOSENHANCED="reco.defaults.checkembargosenhanced";
    private static final String OR_DATE_QUERY="OR ((to_char(current_date";
    private static final String SHARED_SEARCHEMBARGOS= "OR (((to_char(current_date,'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')";
    private static final String AND =" AND( ";
    private static final String ANDSTRING =" AND ";
    private static final Pattern REGEX = Pattern.compile("[^\\d.]");
    private static final String EMPTY ="";
    private static final String NOTNUMBER ="[^0-9]";
    private static final Pattern REGEXNOTNUMBER=Pattern.compile(NOTNUMBER);
    private static final Pattern REGEXNOTALPHA=Pattern.compile("[^\\p{IsAlphabetic}]");
    private static final String DDMMYYYY=",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')";
    private static final String DDMMYYYYSTRING=",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))";
    private static final String SEGSTRTIM=",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char(";
    private static final String SEGENDTIM=",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char(";
    private static final String FLTTYPORGEXC="FLTTYPORGEXC";
    private static final String FLTTYPDSTEXC="FLTTYPDSTEXC";
    private static final String FLTTYPVIAEXC="FLTTYPVIAEXC";
    private static final String FLTTYPSEGEXC="FLTTYPSEGEXC";
    private static final String FLTTYPALLEXC="FLTTYPALLEXC";
    private static final String FLTTYPANYEXC="FLTTYPANYEXC";
    private static final String FLTTYPE="FLTTYPE";
    private static final String UNKSHP_NULL_QUERY=" AND ( UNKSHP IS NULL) ";
    private static final String UNKSHP_QUERY=" AND COALESCE(UNKSHP ,?) =? ";
    /**
     * Used to list the details of a selected embargo
     *
     * @param companyCode
     * @param embargoReferenceNumber
     * @return EmbargoVO
     * @throws PersistenceException
     * @throws SystemException
     */


    public EmbargoRulesVO findEmbargoDetails(EmbargoFilterVO embargoFilterVO) throws PersistenceException,
            SystemException {
        final String comCod = embargoFilterVO.getCompanyCode();
        final String refNum = embargoFilterVO.getEmbargoRefNumber();
        Query query = getQueryManager().createNamedNativeQuery(
                SHARED_EMBARGO_FINDEMBARGODETAILS);
        int parCount = 0;
        query.setParameter(++parCount, comCod);
        query.setParameter(++parCount, refNum);
        if(!embargoFilterVO.isHighestInactiveVersionFetch()){
            if(embargoFilterVO.getEmbargoVersion()>0){
                query.append(" AND  MST.VERNUM=? ORDER BY PARCND DESC ");
                query.setParameter(++parCount, embargoFilterVO.getEmbargoVersion());
            }
            else {
                query.append(" AND MST.VERNUM IN (SELECT MAX(VERNUM) FROM RECMST WHERE REFNUM=? AND CMPCOD=? AND RECSTA NOT IN ('I','R','C')) ORDER BY PARCND DESC ");
                query.setParameter(++parCount, embargoFilterVO.getEmbargoRefNumber());
                query.setParameter(++parCount, comCod);
            }
        }
        else {

            query.append(" AND MST.VERNUM IN (SELECT MAX(VERNUM) FROM RECMST WHERE REFNUM=? AND CMPCOD=? AND RECSTA  IN ('I')) ");
            query.setParameter(++parCount, embargoFilterVO.getEmbargoRefNumber());
            query.setParameter(++parCount, comCod);
        }
        List<EmbargoRulesVO> list = query
                .getResultList(new MultiMapper<EmbargoRulesVO>() {
                    /**
                     * This method gets  all embargos
                     *
                     * @param rs
                     * @return List<EmbargoVO>
                     * @throws SQLException
                     */
                    public List<EmbargoRulesVO> map(ResultSet rs)
                            throws SQLException {
                        EmbargoRulesVO embargoVO = new EmbargoRulesVO();
                        EmbargoParameterVO embargoParameterVO = null;
                        EmbargoLocalLanguageVO embargoLocalLanguageVO = null;
                        EmbargoGeographicLevelVO embargoGeographicLevelVO = null;
                        Collection<EmbargoParameterVO> collection = new ArrayList<EmbargoParameterVO>();
                        Collection<EmbargoLocalLanguageVO> localLanguageVOs = new ArrayList<EmbargoLocalLanguageVO>();
                        Collection<EmbargoParameterVO> paramTemp = new ArrayList<EmbargoParameterVO>();
                        String applicable = null;
                        String applicableLevel = null;
                        int vernum = 0;
                        Collection<EmbargoGeographicLevelVO> geographicLevels = new ArrayList<EmbargoGeographicLevelVO>();
                        Map<String, String> dimensionsMap = new HashMap<String, String>();
                        List<EmbargoRulesVO> embargoList = null;
                        String localLanguageKey = null;
                        Collection<String> localLanguageKeySet = new HashSet<String>();
                        String parameterKey = null;
                        Collection<String> parameterKeySet = new HashSet<String>();
                        boolean canEnter = true;
                        while (rs.next()) {
                            if (canEnter) {
                                embargoVO.setCompanyCode(comCod);
                                embargoVO.setRuleType(rs.getString("RULTYP"));
                                embargoVO.setEmbargoDescription(rs
                                        .getString("RECDES"));
                                embargoVO.setEmbargoLevel(rs
                                        .getString("RECTYP"));
                                embargoVO.setEmbargoReferenceNumber(refNum);
                                if("Y".equals(rs.getString("SUSFLG"))){
                                    embargoVO.setIsSuspended(true);
                                }
                                else {
                                    embargoVO.setIsSuspended(false);
                                }
                                embargoVO.setEmbargoVersion(rs.getInt(VERNUM));
                                embargoVO.setCategory(rs.getString("CATTYP"));
                                embargoVO.setComplianceType(rs.getString("CMPTYP"));
                                embargoVO.setApplicableTransactions(rs.getString("APPTXN"));
                                if (rs.getDate("ENDDAT") != null) {

                                    embargoVO.setEndDate(new LocalDate(LocalDate
                                            .NO_STATION,Location.NONE,rs
                                            .getDate("ENDDAT")));
                                }
                                Timestamp time = rs.getTimestamp("LSTUPDTIM");
                                if(time != null){
                                    embargoVO.setLastUpdatedTime(new LocalDate(LocalDate.NO_STATION,Location.NONE,time));
                                }
                                embargoVO.setLastUpdatedUser(rs
                                        .getString("LSTUPDUSR"));

                                embargoVO.setRemarks(rs.getString("RECRMK"));

                                embargoVO.setStartDate(new LocalDate(LocalDate
                                        .NO_STATION,Location.NONE,rs
                                        .getDate(STRDAT)));
                                embargoVO.setStatus(rs.getString("RECSTA"));
                            }

                            canEnter = false;
                            if (rs.getString("PARCOD") != null && rs.getString(PARVAL) != null) {
                                parameterKey =new StringBuilder().append(rs.getString(CMPCOD))
                                        .append(rs.getString(REFNUM)).append(rs.getString(VERNUM))
                                        .append(rs.getString("PARTYP")).append(rs.getString("PARCOD"))
                                        .append(rs.getString("APPONN")).toString();
                                if(rs.getString("PARCND")!=null){
                                    parameterKey =new StringBuilder().append(parameterKey).append(rs.getString("PARCND")).toString();
                                }

                                if(!parameterKeySet.contains(parameterKey)) {
                                    if ("P".equals(rs.getString("PARTYP"))) {
                                        if ("DOW".equals(rs.getString("PARCOD"))) {
                                            if (rs.getString("APPONN") != null) {
                                                embargoVO.setDaysOfOperationApplicableOn(rs
                                                        .getString("APPONN"));
                                            } else {
                                                embargoVO
                                                        .setDaysOfOperationApplicableOn("");
                                            }
                                            embargoVO.setDaysOfOperation(rs
                                                    .getString(PARVAL));
                                        }

                                        else {
                                            embargoParameterVO = new EmbargoParameterVO();
                                            embargoParameterVO.setCompanyCode(comCod);
                                            embargoParameterVO
                                                    .setEmbargoReferenceNumber(refNum);
                                            embargoParameterVO.setParameterLevel(rs
                                                    .getString("PARTYP"));
                                            embargoParameterVO.setEmbargoVersion(rs
                                                    .getInt(VERNUM));
                                            if (rs.getString("PARCND") != null) {
                                                embargoParameterVO.setApplicable(rs
                                                        .getString("PARCND"));
                                            }
                                            if (rs.getString("APPONN") != null) {
                                                embargoParameterVO.setApplicableLevel(rs
                                                        .getString("APPONN"));
                                            }

                                            if (rs.getString("PARCOD") != null) {
                                                embargoParameterVO.setParameterCode(rs.getString("PARCOD"));
                                            }

                                            if (rs.getString(PARVAL) != null) {
                                                embargoParameterVO.setParameterValues(rs.getString(PARVAL));
                                            }
                                            if ("FLTNUM".equals(embargoParameterVO
                                                    .getParameterCode())
                                                    && embargoParameterVO
                                                    .getParameterValues() != null) {
                                                String[] values = embargoParameterVO
                                                        .getParameterValues().split("~");
                                                if (values.length > 1) {
                                                    embargoParameterVO
                                                            .setCarrierCode(values[0]);
                                                    embargoParameterVO
                                                            .setFlightNumber(values[1]);
                                                    StringBuffer paramValue = new StringBuffer(
                                                            embargoParameterVO
                                                                    .getCarrierCode())
                                                            .append("~")
                                                            .append(embargoParameterVO
                                                                    .getFlightNumber());
                                                    embargoParameterVO
                                                            .setParameterValues(paramValue
                                                                    .toString());
                                                }
                                            }
                                            collection.add(embargoParameterVO);
                                        }
                                    }
                                    if (!"P".equals(rs.getString("PARTYP"))) {
                                        embargoGeographicLevelVO = new EmbargoGeographicLevelVO();
                                        embargoGeographicLevelVO.setCompanyCode(comCod);
                                        embargoGeographicLevelVO
                                                .setEmbargoReferenceNumber(refNum);
                                        embargoGeographicLevelVO.setEmbargoVersion(rs
                                                .getInt(VERNUM));
                                        embargoGeographicLevelVO.setGeographicLevel(rs
                                                .getString("PARTYP"));
                                        embargoGeographicLevelVO.setGeographicLevelType(rs
                                                .getString("PARCOD"));
                                        embargoGeographicLevelVO
                                                .setGeographicLevelApplicableOn(rs
                                                        .getString("PARCND"));
                                        embargoGeographicLevelVO
                                                .setGeographicLevelValues(rs
                                                        .getString(PARVAL));
                                        geographicLevels.add(embargoGeographicLevelVO);
                                    }
                                    parameterKeySet.add(parameterKey);
                                }
                            }
                            //added for ICRD-213193 by A-7815
                            if(rs.getString("LCLLNGDES")!=null && rs.getString(RECLCLLNG)!=null) {
                                localLanguageKey = new StringBuilder().append(rs.getString(REFNUM)).append(rs.getString(CMPCOD))
                                        .append(rs.getString(VERNUM)).append(rs.getString(RECLCLLNG)).toString();
                                if(!localLanguageKeySet.contains(localLanguageKey)) {
                                    embargoLocalLanguageVO=new EmbargoLocalLanguageVO();
                                    embargoLocalLanguageVO.setEmbargoDescription(rs.getString("LCLLNGDES"));
                                    embargoLocalLanguageVO.setEmbargoLocalLanguage(rs.getString(RECLCLLNG));
                                    localLanguageKeySet.add(localLanguageKey);
                                    localLanguageVOs.add(embargoLocalLanguageVO);
                                }
                            }
                        }
                        //added for ICRD-213193 by A-7815
                        embargoVO.setLocalLanguageVOs(localLanguageVOs);
                        embargoVO.setParameters(collection);
                        embargoVO.setGeographicLevels(geographicLevels);
                        embargoList = new ArrayList<EmbargoRulesVO>();
                        if(embargoVO.getEmbargoReferenceNumber()!=null){
                            embargoList.add(embargoVO);
                        }
                        return embargoList;
                    }
                });

        if (list!=null && list.size() > 0 && list.get(0) != null) {
            return list.get(0);
        }
        return null;
    }

    /**
     * This method finds embargos which meet the filter
     * @param filterVO
     * @param pageNumber
     * @return Page
     * @throws PersistenceException
     * @throws SystemException
    Page<EmbargoDetailsVO>
     */
    public Page<EmbargoDetailsVO> findEmbargos(EmbargoFilterVO filterVO, int pageNumber)
            throws PersistenceException, SystemException {

        //modified by a-5175 for icrd-21634 starts

        StringBuilder rankQuery=new StringBuilder();
        rankQuery.append(SHARED_ULD_DENSE_RANK_QUERY);
        rankQuery.append("CAST(RESULT_TABLE.REFNUM AS INTEGER) DESC,");
        rankQuery.append("RESULT_TABLE. VERNUM, ");
        rankQuery.append("RESULT_TABLE. CMPCOD");
        rankQuery.append(") AS RANK FROM ( ");
        String queryString = getQueryManager().getNamedNativeQueryString(SHARED_EMBARGO_FINDEMBARGOS);
        String baseQuery = rankQuery.append(queryString).toString();

        PageableNativeQuery<EmbargoDetailsVO> query = new PageableNativeQuery<EmbargoDetailsVO>(
                filterVO.getTotalRecordCount(),
                baseQuery,
                new ListEmbargoMultiMapper());

        int parCount = 0;

        if (filterVO.getCompanyCode() != null
                && filterVO.getCompanyCode().length() > 0) {
            query.append("MST.CMPCOD=?");
            query.setParameter(++parCount, filterVO.getCompanyCode());
        }

        if (filterVO.getEmbargoRefNumber() != null
                && filterVO.getEmbargoRefNumber().length() > 0) {
            query.append(" AND  MST.REFNUM=?");
            query.setParameter(++parCount, filterVO.getEmbargoRefNumber());
        }

        if (filterVO.getEmbargoLevel() != null
                && filterVO.getEmbargoLevel().length() > 0) {
            query.append(" AND  MST.RECTYP=?");
            query.setParameter(++parCount, filterVO.getEmbargoLevel());
        }
        // Date conditions changed by A-5290 for ICRD-322141
        if (filterVO.getStartDate() != null && filterVO.getEndDate() != null) {
            query.append("AND(  MST.STRDAT <= ? AND  MST.ENDDAT >= ?)");
            query.setParameter(++parCount, filterVO.getStartDate().toSqlDate());
            query.setParameter(++parCount, filterVO.getEndDate().toSqlDate());
        } else if (filterVO.getEndDate() != null) {
            query.append("AND ( (MST.ENDDAT >= ? ) OR ( MST.ENDDAT IS NULL) ) ");
            query.setParameter(++parCount, filterVO.getEndDate().toSqlDate());
        } else if (filterVO.getStartDate() != null) {
            query.append("AND ( ( MST.STRDAT <= ?)) ");
            query.setParameter(++parCount, filterVO.getStartDate().toSqlDate());
        }

        //modified as part of ICRD-342895 by A-8946
        if (filterVO.getStatus() != null && filterVO.getStatus().length() > 0) {
            query.append(" AND  MST.RECSTA = ?");

            //modified as part of ICRD-342895 by A-8946

            //query.append(" AND  MST.SUSFLG <> 'Y'");  //Fix is done as part of LH implementation. SUSFLG  check is not required to list with status.
            query.setParameter(++parCount,( "S".equals(filterVO.getStatus())?"A":filterVO.getStatus()));
            if("S".equals(filterVO.getStatus() ) || "A".equals(filterVO.getStatus() ) ){
                query.append(" AND  MST.SUSFLG IN ( ? )");
                query.setParameter(++parCount, ("S".equals(filterVO.getStatus())?"Y":
                        ("A".equals(filterVO.getStatus())?"N":"")));
            }
            //query.append(" AND  MST.RECSTA = 'A'");


        }
        // Added by A-5290 for ICRD-203884
		/*if (filterVO.getSuspendFlag() != null && filterVO.getSuspendFlag().length() > 0) {
			query.append(" AND  MST.SUSFLG = ?");
			//query.append(" AND  MST.RECSTA = 'A'");
			query.setParameter(++parCount, filterVO.getSuspendFlag());
		}*/

		/*if (filterVO.getDaysOfOperation() != null && filterVO.getDaysOfOperation().length() > 0) {
			query.append(" AND  MST.DAYOPR LIKE ?");
			query.setParameter(++parCount, '%' + filterVO.getDaysOfOperation() + '%');
		}*/
        if (filterVO.getRuleType() != null && filterVO.getRuleType().length() > 0) {
            query.append(" AND  MST.RULTYP = ?");
            query.setParameter(++parCount, filterVO.getRuleType());
        }
        if (filterVO.getCategory() != null && filterVO.getCategory().length() > 0) {
            query.append(" AND  MST.CATTYP = ?");
            query.setParameter(++parCount,filterVO.getCategory());
        }
        if (filterVO.getComplianceType() != null && filterVO.getComplianceType().length() > 0) {
            query.append(" AND  MST.CMPTYP = ?");
            query.setParameter(++parCount,filterVO.getComplianceType());
        }
        if (filterVO.getApplicableTransactions() != null && filterVO.getApplicableTransactions().length() > 0) {
            //Added as part of BUG ICRD-81528
            query.append(" AND INSTR(','||COALESCE(MST.APPTXN, '-')||',', ','||?||',') > 0 ");
            query.setParameter(++parCount,filterVO.getApplicableTransactions());
        }

        //query.append(" AND PAR.PARVAL NOT IN ('-') ");
        //Modified by A-7924 as part of ICRD-313966
        if((filterVO.getOrigin() != null && filterVO.getOrigin().trim().length()>0) ||
                (filterVO.getDestination() != null && filterVO.getDestination().trim().length()>0) ||
                (filterVO.getViaPoint() != null && filterVO.getViaPoint().trim().length()>0) ||
                (filterVO.getSegmentOrigin() != null && filterVO.getSegmentOrigin().trim().length()>0) ||
                (filterVO.getSegmentDestination() != null && filterVO.getSegmentDestination().trim().length()>0) ||
                (filterVO.getParameterCode() != null && filterVO.getParameterCode().length() > 0)||
                (filterVO.getParameterValues() != null && filterVO.getParameterValues().length() > 0)||
                (filterVO.getDaysOfOperation() !=null && filterVO.getDaysOfOperation().trim().length()>0)){



            if(filterVO.getOrigin() != null && filterVO.getOrigin().trim().length()>0 && filterVO.getOriginType() != null && filterVO.getOriginType().trim().length()>0){

                query
                        .append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM  AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());

                query.append(" AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount,'%' + filterVO.getOrigin() +'%');

                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getOriginType());

                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount, "O");


            }
            if(filterVO.getDestination() != null && filterVO.getDestination().trim().length()>0 && filterVO.getDestinationType() != null && filterVO.getDestinationType().trim().length()>0){

                query
                        .append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());

                query.append("AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount,'%' + filterVO.getDestination() + '%');

                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getDestinationType());

                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount,"D");


            }
            if(filterVO.getViaPoint() != null && filterVO.getViaPoint().trim().length()>0 && filterVO.getViaPointType() != null && filterVO.getViaPointType().trim().length()>0){

                query
                        .append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());

                query.append(" AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount,'%' + filterVO.getViaPoint() + '%');

                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getViaPointType());

                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount, "V");

            }
            //Added by A-7924 as part of ICRD-313966 starts
            if(filterVO.getSegmentOrigin() != null && filterVO.getSegmentOrigin().trim().length()>0 && filterVO.getSegmentOriginType() != null && filterVO.getSegmentOriginType().trim().length()>0){
                query
                        .append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM  AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());
                query.append(" AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount,'%' + filterVO.getSegmentOrigin() +'%');
                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getSegmentOriginType());
                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount, "L");
            }
            if(filterVO.getSegmentDestination() != null && filterVO.getSegmentDestination() .trim().length()>0 && filterVO.getSegmentDestinationType() != null && filterVO.getSegmentDestinationType().trim().length()>0){
                query
                        .append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM  AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());
                query.append(" AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount,'%' + filterVO.getSegmentDestination() +'%');
                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getSegmentDestinationType());
                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount, "U");
            }
            //Added by A-7924 as part of ICRD-313966 ends
            if(filterVO.getDaysOfOperation() !=null && filterVO.getDaysOfOperation().trim().length()>0){

                query
                        .append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());

                query.append(" AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount,'%' + filterVO.getDaysOfOperation() + '%');

                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, "DOW");

                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount, "P");

            }
            if (filterVO.getParameterCode() != null && filterVO.getParameterCode().length() > 0) {

                query
                        .append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());
                query.append(" AND PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getParameterCode());
                query.append("AND  PAR.PARTYP=? ");
                query.setParameter(++parCount, "P");

                if ((filterVO.getParameterValues() != null && filterVO.getParameterValues().length() > 0)) {
                    queryStringBuilder= new StringBuilder();
                    queryStringBuilder.append("%,").append(filterVO.getParameterValues()).append(",%");
                    query.append("AND ','||PAR.PARVAL||',' LIKE ? ");
                    query.setParameter(++parCount, queryStringBuilder.toString());
                    queryStringBuilder= new StringBuilder();
                }
                query.append(")");
            }
        }
        query.append(SHARED_ULD_SUFFIX_QUERY);
        log.log(Log.FINE, "Query------->", query);
        return query.getPage(filterVO.getPageNumber());
        //modified by a-5175 for icrd-21634 ends
    }

    /**
     * This method identifies all embargos for expiry.
     *
     * @param embargoFilterVO the embargo filter vo
     * @return Collection<EmbargoDetailsVO>
     * @throws SystemException the system exception
     * @author a-5160
     */
    public Collection<EmbargoDetailsVO> findEmbargoCandidatesForExpiry(EmbargoFilterVO embargoFilterVO) throws SystemException{

        Query query = getQueryManager().createNamedNativeQuery(SHARED_EMBARGO_FINDEMBARGOS);
        Collection<EmbargoDetailsVO> embargoCandidatesForExpiry = new ArrayList<EmbargoDetailsVO>();
        int parcount = 0;
        LocalDate currentDate = new LocalDate(LocalDate.NO_STATION, Location.NONE,false);
        String currentDateString = currentDate.toStringFormat("yyyy-MM-dd").substring(0, 10);
        query.append(" MST.ENDDAT >= TO_DATE(?, 'yyyy-mm-dd') ");
        query.setParameter(++parcount,currentDateString);
        query.append(" AND MST.ENDDAT < TO_DATE(?, 'yyyy-mm-dd') ");
        query.setParameter(++parcount,currentDateString);
        query.append(" AND MST.RECSTA NOT IN ('I','S') ");
        return query.getResultList(new ListEmbargoMultiMapper());
    }
    /**
     * This method checks whether a duplicate embargo exists in the system
     *
     * @param embargoVO
     * @return boolean
     * @throws PersistenceException
     * @throws SystemException
     */
    public boolean checkDuplicateEmbargo(EmbargoRulesVO embargoVO)
            throws PersistenceException, SystemException {

        Query query = getQueryManager().createNamedNativeQuery(
                SHARED_EMBARGO_CHECKFORDUPLICATES);
        int parcount = 0;

        if (EmbargoRulesVO.OPERATION_FLAG_UPDATE.equalsIgnoreCase(embargoVO.getOperationalFlag())) {
            query.append("AND MST.REFNUM<>?");
            query.setParameter(++parcount, embargoVO
                    .getEmbargoReferenceNumber());
        }
        query.append(" AND MST.CMPCOD = ?");
        query.setParameter(++parcount, embargoVO.getCompanyCode());

        // checking for overlapping date

        log.log(Log.FINE, "the start date is ", embargoVO.getStartDate());
        log.log(Log.FINE, "the end date is ", embargoVO.getEndDate());
        if (embargoVO.getEndDate() == null) {
            query.append("AND (MST.ENDDAT IS NULL ");
            query.append(" OR ? <= MST.ENDDAT )");
            query.setParameter(++parcount, embargoVO.getStartDate());
        } else {
            query
                    .append(" AND (( ? BETWEEN MST.STRDAT AND MST.ENDDAT) OR ")
                    .append("( ? BETWEEN MST.STRDAT AND MST.ENDDAT) ")
                    .append(
                            "OR (MST.STRDAT < ? AND MST.ENDDAT > ?) OR (MST.ENDDAT IS NULL AND ? > MST.STRDAT )) ");
            query.setParameter(++parcount, embargoVO.getStartDate());
            query.setParameter(++parcount, embargoVO.getEndDate());
            query.setParameter(++parcount, embargoVO.getStartDate());
            query.setParameter(++parcount, embargoVO.getEndDate());
            query.setParameter(++parcount, embargoVO.getEndDate());
        }

        if (embargoVO.getOriginType() != null) {

            if ("C".equalsIgnoreCase(embargoVO.getOriginType())) {
                /*
                 * query.append("AND (ORGTYP = 'C' AND EMBORG =" + "'" +
                 * embargoVO.getOrigin() + "')");
                 */
                query.append("AND (ORGTYP = 'C' AND EMBORG =? )");

            } else {

                query.append("AND (ORGTYP = 'S' AND EMBORG =? )");

            }

            query.setParameter(++parcount, embargoVO.getOrigin());

        }

        if (embargoVO.getDestinationType() != null) {
            if ("C".equalsIgnoreCase(embargoVO.getDestinationType())) {
                /*
                 * query.append("AND (DSTTYP = 'C' AND EMBDST =" + "'" +
                 * embargoVO.getDestination() + "')");
                 */

                query.append("AND (DSTTYP = 'C' AND EMBDST =?)");

            } else {
                query.append("AND (DSTTYP = 'S' AND EMBDST =?)");
            }
            query.setParameter(++parcount, embargoVO.getDestination());
        }

        if(embargoVO.getParameters() !=null){
            for (EmbargoParameterVO embargoParameterVO : embargoVO.getParameters()) {

                if ("U".equals(embargoParameterVO.getOperationalFlag())
                        || "I".equals(embargoParameterVO.getOperationalFlag())) {

                    /*
                     * query .append("AND EXISTS (SELECT 1 FROM SHREMBPAR PAR WHERE
                     * PAR.CMPCOD = MST.CMPCOD AND PAR.REFNUM = MST.REFNUM AND
                     * PAR.PARCOD = '" + embargoParameterVO.getParameterCode() + "'
                     * AND (");
                     */

                    query
                            .append("AND EXISTS (SELECT 1 FROM RCOEMBPAR PAR WHERE PAR.CMPCOD = MST.CMPCOD AND PAR.REFNUM = MST.REFNUM AND PAR.PARCOD = ? AND (");
                    query.setParameter(++parcount, embargoParameterVO
                            .getParameterCode());
                    String parValues[] = embargoParameterVO.getParameterValues()
                            .split(",");

                    queryStringBuilder = new StringBuilder();
                    for (int i = 0; i < parValues.length; i++) {
                        // query.append("PAR.PARVAL LIKE '%" + parValues[i] + "%'");
                        query.append("PAR.PARVAL LIKE ?");
                        queryStringBuilder.append("%").append(parValues[i]).append("%");
                        //	query.setParameter(++parcount, "%" + parValues[i] + "%");
                        query.setParameter(++parcount, queryStringBuilder.toString());
                        if (i + 1 < parValues.length){
                            query.append("OR");
                        }
                        /*
                         * if ((i + 1) == parValues.length) query.append(")");
                         */
                        queryStringBuilder = new StringBuilder();
                    }
                    query.append("))");

                }
            }
        }
        log.log(Log.FINE, "the query is ", query);
        String count = query.getSingleResult(new Mapper<String>() {
            /**
             * This method gets  Reference Number
             *
             * @param resultSet
             * @return RefNum
             * @throws SQLException
             */
            public String map(ResultSet resultSet) throws SQLException {

                return resultSet.getString(REFNUM);
            }
        });

        log.exiting("EmbargoSqlDAO ", "checkDuplicateEmbargo");

        /*
         * Check weather a duplicate is found. if a duplicate is found count
         * will not be null
         */

        return (count != null);
    }

    /**
     * This method fetches all global parameters present in the system
     *
     * @param companyCode
     * @return Collection<EmbargoGlobalParameterVO>
     * @throws PersistenceException
     * @throws SystemException
     */
    public Collection<EmbargoGlobalParameterVO> findGlobalParameterCodes(String companyCode)
            throws PersistenceException, SystemException {

        final String cmpCod = companyCode;
        Query query = getQueryManager().createNamedNativeQuery(
                SHARED_EMBARGO_FINDEMBARGOGLOBALPARAMETERS);
        query.setParameter(1, cmpCod);

        return query.getResultList(new Mapper<EmbargoGlobalParameterVO>() {
            /**
             * This method gets  all embargo global Parameter details
             *
             * @param rs
             * @return EmbargoGlobalParameterVO
             * @throws SQLException
             */
            public EmbargoGlobalParameterVO map(ResultSet rs)
                    throws SQLException {

                EmbargoGlobalParameterVO embargoGlobalParameterVO = new EmbargoGlobalParameterVO();
                embargoGlobalParameterVO.setCompanyCode(cmpCod);
                if(rs.getString("PARCOD")!= null){
                    embargoGlobalParameterVO.setParameterCode(rs
                            .getString("PARCOD"));
                }
                if(rs.getString("PARDES")!= null){
                    embargoGlobalParameterVO.setParameterDescription(rs
                            .getString("PARDES"));
                }
                if(rs.getString("PARREFENT")!= null){
                    embargoGlobalParameterVO.setEntityReference(rs
                            .getString("PARREFENT"));
                }
                return embargoGlobalParameterVO;
            }

        });

    }

    /**
     * This method identifies all embargos associated with the given shipment
     *
     * @param shipmentVO
     * @return Collection<EmbargoDetailsVO>
     * @throws PersistenceException
     * @throws SystemException
     */
    public Collection<EmbargoDetailsVO> checkForEmbargo(Collection<ShipmentDetailsVO> shipmentVOs)
            throws PersistenceException, SystemException {
        log.entering("EmbargoRulesSqlDAO", " checkForEmbargo");
        Collection<EmbargoDetailsVO> embVos = new ArrayList<EmbargoDetailsVO>();

        Query query = null;
        int parcount = 0;

        for(ShipmentDetailsVO shipmentVO :shipmentVOs){

            if(shipmentVO.isEnhancedChecks()){
                Query mainQuery=getQueryManager().createNamedNativeQuery(
                        "reco.defaults.checkembargosforODpairenhanced");
                parcount = 0;
                mainQuery.setParameter(++parcount,shipmentVO.getCompanyCode());
                if(isOracleDataSource()){
                    constructFilterQueryForODPairEnhanced(shipmentVO, mainQuery, parcount);
                }
                else {
                    constructFilterQueryForODPairEnhancedPostgres(shipmentVO, mainQuery, parcount);
                }
                Collection<EmbargoDetailsVO> embargoDetails = mainQuery.getResultList(
                        new CheckEmbargoRefNumMapper());
                if(embargoDetails!=null && embargoDetails.size()>0){
                    StringBuilder embargoRefNum=new StringBuilder();
                    for(EmbargoDetailsVO embargo:embargoDetails){
                        embargoRefNum=embargoRefNum.append(embargo.getEmbargoReferenceNumber())
                                .append(",");
                    }
                    query =  getQueryManager().createNamedNativeQuery(
                            SHARED_EMBARGO_CHECKEMBARGOSENHANCED);

                    parcount = 0;
                    //query.setParameter(++parcount,shipmentVO.getCompanyCode());
                    String embargosPicked=embargoRefNum.toString().substring(0
                            , embargoRefNum.toString().length()-1);
                    if(isOracleDataSource()){
                        constructFilterQueryForSelectFlight(shipmentVO,query,parcount,embargosPicked);
                    }else{
                        constructFilterQueryForSelectFlightPostgre(shipmentVO,query,parcount,embargosPicked);
                    }
                    Collection<EmbargoDetailsVO> embargoDetailsVOs = query.getResultList(
                            new CheckEmbargoEnhancedMapper(shipmentVO));
                    if (embargoDetailsVOs != null && embargoDetailsVOs.size() > 0) {
                        embVos.addAll(embargoDetailsVOs);
                    }
                }
            }else{
                query =  getQueryManager().createNamedNativeQuery(
                        SHARED_EMBARGO_CHECKEMBARGOS);

                parcount = 0;
                query.setParameter(++parcount,shipmentVO.getCompanyCode());
                if(isOracleDataSource()){
                    constructFilterQuery(shipmentVO,query,parcount);
                }else{
                    constructFilterQueryPostgre(shipmentVO,query,parcount);
                }
                Collection<EmbargoDetailsVO> embargoDetailsVOs = query.getResultList(
                        new CheckEmbargoMapper(shipmentVO));
                if (embargoDetailsVOs != null && embargoDetailsVOs.size() > 0) {
                    embVos.addAll(embargoDetailsVOs);
                }
            }
        }
        log.log(Log.FINE, "reco embargo size:", embVos.size());
        log.exiting("EmbargoRulesSqlDAO", "checkForEmbargo");
        if (embVos.size() > 0) {
            return embVos;
        } else {
            return null;
        }
    }

    /**
     *
     * @param parcount
     * @param query
     * @param shipmentVO
     * @param shipmentVO
     * @param dynamicInParam
     * constructing filter
     */
    private void constructFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {

        String dataBaseSystemDate = "";
        if(isOracleDataSource()) {
            dataBaseSystemDate = " sysdate ";
        } else {
            dataBaseSystemDate = " sysdate() ";
        }

        log.entering("EmbargoRulesSqlDAO", " constructFilterQuery");
        if ((shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 )
                || (shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 )
                || (shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 )
                || (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 )
                || (shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 )
                || (shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 )) {
            //origin filter for excluded case
            query .append(" AND NOT ( ") ;

            if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
                query.append( "pkg_frmwrk.Fun_String_Check(?,REC.ORGARPCODEXC,',') >0 ");
                query.setParameter(++parcount, shipmentVO.getOrgStation());
            }
            if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getOrgArpGrp().split(",");
                for(int i=0;i<splitArray.length;i++){
                    query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGARPGRPEXC,',') >0 ");
                    query.setParameter(++parcount, splitArray[i]);
                }
            }

            if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
                query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTCODEXC,',') >0 ");
                query.setParameter(++parcount, shipmentVO.getOrgCountry());
            }
            if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getOrgCntGrp().split(",");
                for(int i=0;i<splitArray.length;i++){
                    query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTGRPEXC,',') >0 ");
                    query.setParameter(++parcount, splitArray[i]);
                }
            }
            if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
                query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGOFCEXGEXC,',') >0 ");
                query.setParameter(++parcount, shipmentVO.getOoe());
            }

            if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
                query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGGPAEXC,',') >0 ");
                query.setParameter(++parcount, shipmentVO.getOrgPaCod());
            }
            query.append(" ) ") ;
        }
        if ((shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0)
                || (shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 )
                || (shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 )
                || (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 )
                || (shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 )
                || (shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 )) {
            //destination filter for excluded case
            query .append(" AND NOT ( ") ;

            if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
                query.append( "pkg_frmwrk.Fun_String_Check(?,REC.DSTARPCODEXC,',') >0 ");
                query.setParameter(++parcount, shipmentVO.getDstStation());
            }
            if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getDstArpGrp().split(",");
                for(int i=0;i<splitArray.length;i++){
                    query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTARPGRPEXC,',') >0 ");
                    query.setParameter(++parcount, splitArray[i]);
                }
            }

            if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
                query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTCODEXC,',') >0 ");
                query.setParameter(++parcount, shipmentVO.getDstCountry());
            }
            if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getDstCntGrp().split(",");
                for(int i=0;i<splitArray.length;i++){
                    query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTGRPEXC,',') >0 ");
                    query.setParameter(++parcount, splitArray[i]);
                }
            }
            if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
                query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTOFCEXGEXC,',') >0 ");
                query.setParameter(++parcount, shipmentVO.getDoe());
            }

            if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
                query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTGPAEXC,',') >0 ");
                query.setParameter(++parcount, shipmentVO.getDstPaCod());
            }
            query.append(" ) ") ;
        }
        if ((shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size() > 0 )
                || (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 )
                || (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 )
                || (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 )) {
            //via filter for excluded case
            query .append(" AND NOT ( ") ;
            // Modified the logic of ViaPoint by A-5290 for ICRD-186576
            if (shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size()  > 0 ) {
                //query.append( "pkg_frmwrk.Fun_String_Check(?,REC.VIAARPCODEXC,',') >0 ");
                query.append( "pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIAARPCODEXC   ELSE ? END, REC.VIAARPCODEXC,',') > 0");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
            }
            if (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 ) {
                //query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIAARPGRPEXC,',') >0 ");
                query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIAARPGRPEXC   ELSE ? END, REC.VIAARPGRPEXC,',') > 0");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
            }
            if (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 ) {
                //query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIACNTCODEXC,',') >0 ");
                query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIACNTCODEXC   ELSE ? END, REC.VIACNTCODEXC,',') > 0");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
            }
            if (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 ) {
                //query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIACNTGRPEXC,',') >0 ");
                query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIACNTGRPEXC   ELSE ? END, REC.VIACNTGRPEXC,',') > 0");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
            }
            query.append(" ) ") ;
        }
        //added for ICRD-213193 by A-7815
        //union
        //Commented for Bug ICRD-317085
		/*if(shipmentVO.getUserLocale()!= null && shipmentVO.getUserLocale().trim().length()>0) {
			query.append(" UNION SELECT REC.*,LCL.RECDES LCLDES  FROM REC_MVW REC,RECLCLLNGMST LCL WHERE REC.CMPCOD=LCL.CMPCOD AND REC.VERNUM = LCL.VERNUM  AND REC.REFNUM=LCL.REFNUM");
			query.append(" AND LCL.CMPCOD = ?  ");
			query.setParameter(++parcount, shipmentVO.getCompanyCode());
			query.append(" AND LCL.RECLCLLNG = ?  ");
			query.setParameter(++parcount, shipmentVO.getUserLocale());
		}	*/
        //union
        query.append(" UNION  SELECT REC.*,'' LCLDES  FROM REC_MVW REC  WHERE REC.CMPCOD =? ")	;
        query.setParameter(++parcount, shipmentVO.getCompanyCode());
        if (shipmentVO.getDstStation() == null || shipmentVO.getDstStation().trim().length() <=0 ) {
            query.append("  AND ( DSTARPCODINC IS NULL OR DSTARPCODINC ='-' ) ");
        }
        if ((shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0)
                || (shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 )
                || (shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 )
                || (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 )
                || (shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 )
                || (shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 )) {
            //dst include
            query.append("  AND ( (");
            if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
                query.append(" (pkg_frmwrk.Fun_String_Check(?,REC.DSTARPCODINC,',') >0  OR REC.DSTARPCODINC ='-') ");
                query.setParameter(++parcount, shipmentVO.getDstStation());
            }
            if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getDstArpGrp().split(",");
                query.append(" OR ( ");
                for(int i=0;i<splitArray.length;i++){
                    query.append(" pkg_frmwrk.Fun_String_Check(?,REC.DSTARPGRPINC,',')  >0 OR  ");
                    query.setParameter(++parcount, splitArray[i]);
                }
                query.append(" REC.DSTARPGRPINC   ='-') ");

            }
            if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTCODINC,',')  >0 OR REC.DSTCNTCODINC   ='-') ");
                query.setParameter(++parcount, shipmentVO.getDstCountry());
            }
            if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getDstCntGrp().split(",");
                query.append(" OR ( ");
                for(int i=0;i<splitArray.length;i++){
                    query.append(" pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTGRPINC,',')  >0 OR ");
                    query.setParameter(++parcount, splitArray[i]);
                }
                query.append(" REC.DSTCNTGRPINC   ='-')  ");
            }
            if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.DSTOFCEXGINC,',')  >0 OR REC.DSTOFCEXGINC   ='-') ");
                query.setParameter(++parcount, shipmentVO.getDoe());
            }
            if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
                query.append( " OR (pkg_frmwrk.Fun_String_Check(?,REC.DSTGPAINC,',')  >0 OR REC.DSTGPAINC   ='-') ");
                query.setParameter(++parcount, shipmentVO.getDstPaCod());
            }
            //dstexclude
            query.append(" ) AND NOT ( ");
            if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
                query.append(" pkg_frmwrk.Fun_String_Check(?,REC.DSTARPCODEXC,',')>0 ");
                query.setParameter(++parcount, shipmentVO.getDstStation());
            }

            if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getDstArpGrp().split(",");
                for(int i=0;i<splitArray.length;i++){
                    query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.DSTARPGRPEXC,',')      >0 ");
                    query.setParameter(++parcount, splitArray[i]);
                }
            }
            if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
                query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTCODEXC,',')        >0 ");
                query.setParameter(++parcount, shipmentVO.getDstCountry());
            }
            if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getDstCntGrp().split(",");
                for(int i=0;i<splitArray.length;i++){
                    query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTGRPEXC,',')      >0 ");
                    query.setParameter(++parcount, splitArray[i]);
                }
            }
            if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
                query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.DSTOFCEXGEXC,',')    >0");
                query.setParameter(++parcount, shipmentVO.getDoe());
            }
            if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
                query.append( " OR pkg_frmwrk.Fun_String_Check(?,REC.DSTGPAEXC,',')        >0 ");
                query.setParameter(++parcount, shipmentVO.getDstPaCod());
            }
            query.append(" ) ");
            query.append(" ) ");
        } else {
            query.append(AND_DSTARPCODINC_IS_NULL_OR_DSTARPGRPINC_IS_NULL_OR_DSTARPGRPIN);
        }

        if (shipmentVO.getOrgStation() == null || shipmentVO.getOrgStation().trim().length() <=0 ) {
            query.append(AND_ORGARPCODINC_IS_NULL);
        }
        if ((shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 )
                || (shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 )
                || (shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 )
                || (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 )
                || (shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 )
                || (shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 )) {
            //orgINcINclude

            query.append("  AND ( (");
            if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
                query.append(" (pkg_frmwrk.Fun_String_Check(?,REC.ORGARPCODINC,',') >0  OR REC.ORGARPCODINC ='-') ");
                query.setParameter(++parcount, shipmentVO.getOrgStation());
            }
            if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getOrgArpGrp().split(",");
                query.append(" OR ( ");
                for(int i=0;i<splitArray.length;i++){
                    query.append(" pkg_frmwrk.Fun_String_Check(?,REC.ORGARPGRPINC,',')  >0 OR ");
                    query.setParameter(++parcount, splitArray[i]);
                }
                query.append(" REC.ORGARPGRPINC   ='-')");
            }
            if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTCODINC,',')  >0 OR REC.ORGCNTCODINC   ='-') ");
                query.setParameter(++parcount, shipmentVO.getOrgCountry());
            }
            if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getOrgCntGrp().split(",");
                query.append(" OR (");
                for(int i=0;i<splitArray.length;i++){
                    query.append(" pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTGRPINC,',')  >0 OR ");
                    query.setParameter(++parcount, splitArray[i]);
                }
                query.append(" REC.ORGCNTGRPINC   ='-') ");
            }
            if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.ORGOFCEXGINC,',')  >0 OR REC.ORGOFCEXGINC   ='-') ");
                query.setParameter(++parcount, shipmentVO.getOoe());
            }
            if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
                query.append( " OR (pkg_frmwrk.Fun_String_Check(?,REC.ORGGPAINC,',')  >0 OR REC.ORGGPAINC   ='-') ");
                query.setParameter(++parcount, shipmentVO.getOrgPaCod());
            }
            //org exclude
            query.append(" ) AND NOT ( ");
            if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
                query.append(" pkg_frmwrk.Fun_String_Check(?,REC.ORGARPCODEXC,',')>0 ");
                query.setParameter(++parcount, shipmentVO.getOrgStation());
            }

            if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getOrgArpGrp().split(",");
                for(int i=0;i<splitArray.length;i++){
                    query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.ORGARPGRPEXC,',')      >0 ");
                    query.setParameter(++parcount, splitArray[i]);
                }
            }
            if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
                query.append(OR_PKG_FRMWRK_FUN_STRING_CHECK_REC_ORGCNTCODEXC_0);
                query.setParameter(++parcount, shipmentVO.getOrgCountry());
            }
            if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
                //Modified for BUG_ICRD-284545_AiynaSuresh_21Sep2018
                String[] splitArray = shipmentVO.getOrgCntGrp().split(",");
                for(int i=0;i<splitArray.length;i++){
                    query.append(
                            PKG_FRMWRK_FUN_STRING_CHECK_REC_ORGCNTGRPEXC_0);
                    query.setParameter(++parcount, splitArray[i]);
                }
                query.append("  AND ( ORGARPCODINC IS NULL OR ORGARPCODINC ='-' ) ");
            }

            if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){

                query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.ORGOFCEXGEXC,',')    >0");
                query.setParameter(++parcount, shipmentVO.getOoe());
            }
            if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
                query.append( " OR pkg_frmwrk.Fun_String_Check(?,REC.ORGGPAEXC,',')        >0 ");
                query.setParameter(++parcount, shipmentVO.getOrgPaCod());
            }
            query.append(" ) ");
            query.append(" ) ");
        } else {
            query.append(AND_ORGARPCODINC_IS_NULL_OR_ORGCNTGRPINC );
        }
        // Commented by A-5290 for ICRD-186576
		/*if (shipmentVO.getViaPointStation() == null || shipmentVO.getViaPointStation().size() <= 0 ) {
			query.append("  AND ( (VIAARPCODINC IS NULL OR REC.VIAARPCODINC ='-' ) ");
			query.append(" AND(VIACNTCODINC IS NULL OR REC.VIACNTCODINC ='-' )");
			query.append(" AND(VIACNTGRPINC IS NULL OR REC.VIACNTGRPINC ='-' )");
			query.append(" AND(VIAARPGRPINC IS NULL OR REC.VIAARPGRPINC ='-' )");
			query.append("  ) ");
		}*/
        if ((shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size() > 0 )
                || (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 )
                || (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 )
                || (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 )) {
            //via include
            query.append("  AND ( (");
            if (shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size()  > 0 ) {
                query.append(" (pkg_frmwrk.Fun_String_Check(?,REC.VIAARPCODINC,',') >0  OR REC.VIAARPCODINC ='-') ");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
            }
            if (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 ) {
                query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.VIAARPGRPINC,',')  >0 OR REC.VIAARPGRPINC   ='-') ");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
            }
            if (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 ) {
                query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.VIACNTCODINC,',')  >0 OR REC.VIACNTCODINC   ='-') ");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
            }
            if (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 ) {
                query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.VIACNTGRPINC,',')  >0 OR REC.VIACNTGRPINC   ='-') ");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
            }
            query.append(" ) ");
            //via exclude
            // Modified the logic of ViaPoint by A-5290 for ICRD-186576
            if(shipmentVO.getViaPointStation() != null && !TILDE.equals(shipmentVO.getViaPointStation().iterator().next())){
                query.append(" AND NOT ( ");

                if (shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size()  > 0 ) {
                    //query.append( "pkg_frmwrk.Fun_String_Check(?,REC.VIAARPCODEXC,',') >0 ");
                    query.append( "pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIAARPCODEXC   ELSE ? END, REC.VIAARPCODEXC,',') > 0");
                    query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
                    query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
                }
                if (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 ) {
                    //query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIAARPGRPEXC,',') >0 ");
                    query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIAARPGRPEXC   ELSE ? END, REC.VIAARPGRPEXC,',') > 0");
                    query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
                    query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
                }
                if (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 ) {
                    //query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIACNTCODEXC,',') >0 ");
                    query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIACNTCODEXC   ELSE ? END, REC.VIACNTCODEXC,',') > 0");
                    query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
                    query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
                }
                if (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 ) {
                    //query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIACNTGRPEXC,',') >0 ");
                    query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIACNTGRPEXC   ELSE ? END, REC.VIACNTGRPEXC,',') > 0");
                    query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
                    query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
                }
                query.append(" ) ");
            } else {
                query.append(" AND (REC.VIAARPCODEXC IS NULL AND  REC.VIAARPGRPEXC IS NULL AND REC.VIACNTCODEXC IS NULL)");
            }
            query.append(" ) ");
        } else {
            query.append(VIAARPCODINC_IS_NULL_OR_VIAARPCODINC_AND_VIACNTCODINC_IS_NULL_OR_VIACNTCODINC_AND_VIAARPGRPINC_IS_NULL_OR_VIAARPGRPINC_AND_VIACNTGRPINC_IS_NULL_OR_VIACNTGRPINC);
        }
        //main select ends here

        query.append(" ) mst ");

        //parameter filter strts
        query.append("	WHERE CMPCOD=? ");
        query.setParameter(++parcount, shipmentVO.getCompanyCode());
        boolean isShipDatePresent = false;
        int dateCount = 0;


        if (shipmentVO.getBookingFlightDetailVOs() != null
                && shipmentVO.getBookingFlightDetailVOs().size() > 0) {
            for (BookingFlightDetailVO bookingFlightDetailVO : shipmentVO.getBookingFlightDetailVOs()) {
                if(bookingFlightDetailVO.getFlightDate()!=null ){
                    if ( dateCount != 0) {
                        query.append(" OR ");
                    } else if (dateCount == 0) {
                        query.append(" AND( ");
                    }
                    query.append(" (to_date(?,'yyyy-mm-dd') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    query.setParameter(++parcount,
                            bookingFlightDetailVO.getDepartureTimeAtOrigin()!=null?
                                    bookingFlightDetailVO.getDepartureTimeAtOrigin().toStringFormat("yyyy-MM-dd").substring(0,10)
                                    :bookingFlightDetailVO.getFlightDate().toStringFormat("yyyy-MM-dd").substring(0,10));
                    query.append(" OR (to_date(?,'yyyy-mm-dd') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    query.setParameter(++parcount,
                            bookingFlightDetailVO.getArrivalTimeAtDestination()!=null?
                                    bookingFlightDetailVO.getArrivalTimeAtDestination().toStringFormat("yyyy-MM-dd").substring(0,10)
                                    :bookingFlightDetailVO.getFlightDate().toStringFormat("yyyy-MM-dd").substring(0,10));
                    ++dateCount;
                }
            }
        }
        else{
            if(shipmentVO.getShipmentDate() != null ){
                query.append(" AND ((to_date(?,'yyyy-mm-dd') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                query.setParameter(++parcount, shipmentVO.getShipmentDate().toStringFormat("yyyy-MM-dd").substring(0,10));
                isShipDatePresent = true;
            }
        }
        if (isShipDatePresent || dateCount > 0) {
            query.append(") ");
        }
        if(shipmentVO.getMap() != null ){
            int count = 0;
            for (String parameterCode : shipmentVO.getMap().keySet()) {
                //	for (String parameterValue : shipmentVO.getMap().get(parameterCode)) {
                // Changed by A-5867 for ICRD-91093 starts
                if(ShipmentDetailsVO.MAIL_CLASS.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (MALCLSINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,MALCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCLSEXC,',')) ");
                            query.append(" OR (MALCLSINC IS NULL AND MALCLSEXC IS NULL) ");
                            query.append(" OR (MALCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCLSEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.MAIL_CATEGORY.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (MALCATINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,MALCATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCATEXC,',')) ");
                            query.append(" OR (MALCATINC IS NULL AND MALCATEXC IS NULL) ");
                            query.append(" OR (MALCATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCATEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.MAIL_SUB_CLS.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        query.append(" AND (( pkg_frmwrk.Fun_String_Check(?,SUBCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSEXC,','))");
                        query.append(" OR (SUBCLSINC IS NULL AND SUBCLSEXC IS NULL) ");
                        query.append(" OR (SUBCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSEXC,',')) )");
                        query.setParameter(++parcount, parameterValue);
                        query.setParameter(++parcount, parameterValue);


                        query.setParameter(++parcount, parameterValue);
                        query.setParameter(++parcount, parameterValue);
                        query.setParameter(++parcount, parameterValue);
                    }
                } else if(ShipmentDetailsVO.MAIL_SUB_CLS_GRP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SUBCLSGRPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SUBCLSGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSGRPEXC,',')) ");
                            query.append(" OR (SUBCLSGRPINC IS NULL AND SUBCLSGRPEXC IS NULL) ");
                            query.append(" OR (SUBCLSGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSGRPEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                        //	for (String parameterValue : shipmentVO.getMap().get(parameterCode)) {
                        //	for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                    }
                } else if(ShipmentDetailsVO.MAIL_CATEGORY.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                    }
                } else if(ShipmentDetailsVO.MAIL_SUB_CLS.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                    }
                } else if(ShipmentDetailsVO.MAIL_SUB_CLS_GRP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                    }
                }
					 /* else if(ShipmentDetailsVO.SHARED_CARRIER.equals(parameterCode)){
					// Changed by A-5867 for ICRD-91093 ends
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (ARLCODINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLCODINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',')  >0) ");
						query.append(" OR (ARLCODINC IS NULL AND ARLCODEXC IS NULL) ");
						query.append(" OR (ARLCODINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',')  >0) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}*/  else if(ShipmentDetailsVO.CARRIER_ORG.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CARRORGINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CARRORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRORGEXC,',')) ");
                            query.append(" OR (CARRORGINC IS NULL AND CARRORGEXC IS NULL) ");
                            query.append(" OR (CARRORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.CARRIER_DST.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CARRDSTINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CARRDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) ");
                            query.append(" OR (CARRDSTINC IS NULL AND CARRDSTEXC IS NULL) ");
                            query.append(" OR (CARRDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.CARRIER_VIA.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CARRVIAINC IS NULL) ");
                        } else if(parameterValue!=null){
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CARRVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) ");
                            query.append(" OR (CARRVIAINC IS NULL AND CARRVIAEXC IS NULL) ");
                            query.append(" OR (CARRVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.CARRIER_ALL.equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (CARRALLINC IS NULL AND CARRALLEXC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CARRALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRALLEXC,',')) ");
                            query.append(" OR (CARRALLINC IS NULL AND CARRALLEXC IS NULL) ");
                            query.append(" OR (CARRALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                    }
                    count =0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (CARRANYINC IS NULL AND CARRANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(" ((pkg_frmwrk.Fun_String_Check(?,CARRANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRANYEXC,',')) ");
                            query.append(" OR (CARRANYINC IS NULL AND CARRANYEXC IS NULL) ");
                            query.append(" OR (CARRANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");
                } else if(ShipmentDetailsVO.SHARED_COMMODITY.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (COMINC IS NULL OR COMINC = '-') ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,COMINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,COMEXC,',')) ");
                            query.append(" OR (COMINC IS NULL AND COMEXC IS NULL) ");
                            query.append(" OR (COMINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,COMEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }
                //added by A-7534 for ICRD-226601
                else if(ShipmentDetailsVO.PKGINS.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (PKGINSINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,PKGINSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PKGINSEXC,',')) ");
                            query.append(" OR (PKGINSINC IS NULL AND PKGINSEXC IS NULL) ");
                            query.append(" OR (PKGINSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PKGINSEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }
                //---------------------------------
                else if(ShipmentDetailsVO.SHARED_SCC.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SCCCODINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SCCCODINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCCODEXC,',')) ");
                            query.append(" OR (SCCCODINC IS NULL AND SCCCODEXC IS NULL ) ");
                            query.append(" OR (SCCCODINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCCODEXC,',')) ");

                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            //exclude If for SCC code written as seperate block as for SCC: exclude if and include can be given as combination
                            query.append(" AND (NOT(pkg_frmwrk.Fun_String_Check(?,SCCCODEXCIF,',') >0) ");
                            query.append(" OR (SCCCODEXCIF IS NULL ) ");
                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.AGENT.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (AGTCODINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,AGTCODINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AGTCODEXC,',')) ");
                            query.append(" OR (AGTCODINC IS NULL AND AGTCODEXC IS NULL ) ");
                            query.append(" OR (AGTCODINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AGTCODEXC,',')) ");

                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.SHIPPER.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SHPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SHPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPEXC,',')) ");
                            query.append(" OR (SHPINC IS NULL AND SHPEXC IS NULL ) ");
                            query.append(" OR (SHPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPEXC,',')) ");

                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.CONSIGNEE.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CNSINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CNSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSEXC,',')) ");
                            query.append(" OR (CNSINC IS NULL AND CNSEXC IS NULL ) ");
                            query.append(" OR (CNSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSEXC,',')) ");

                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.SHARED_PAYTYP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (PAYTYPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,PAYTYPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PAYTYPEXC,',')) ");
                            query.append(" OR (PAYTYPINC IS NULL AND PAYTYPEXC IS NULL) ");
                            query.append(" OR (PAYTYPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PAYTYPEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }

                }/* else if(ShipmentDetailsVO.SHARED_FLTNUM.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTNUMINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',')  >0) ");
						query.append(" OR (FLTNUMINC IS NULL AND FLTNUMEXC IS NULL) ");
						query.append(" OR (FLTNUMINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',')  >0) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}*/
                else if(ShipmentDetailsVO.FLTNUM_ORG.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTNUMORGINC IS NULL AND FLTNUMORGGTEQ IS NULL AND FLTNUMORGLTEQ IS NULL ) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMORGEXC,',')) ");
                            query.append(" OR (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL AND FLTNUMORGGTEQ IS NULL AND FLTNUMORGLTEQ IS NULL ) ");
                            query.append(" OR (FLTNUMORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMORGEXC,','))");
                            //changes Added by A-8130 for ICRD-254555 start
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            String[] parameterValues=parameterValue.split(",");
                            for(int i=0;i<parameterValues.length;i++){
                                if(parameterValues[i].replaceAll("[^0-9]", "").length()>0){
                                    query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMORGGTEQ, '[^0-9]', ''))<=?  AND FLTNUMORGLTEQ is  NULL AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMORGLTEQ, '[^0-9]', ''))>=?  AND FLTNUMORGGTEQ is  NULL AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMORGGTEQ, '[^0-9]', ''))<=?  AND TO_NUMBER(regexp_replace(FLTNUMORGLTEQ, '[^0-9]', ''))>=? AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '')=? OR regexp_replace(FLTNUMORGLTEQ, '[^A-Z]', '')=?)) ");
                                    query.append("))))");
			                /*  query.setParameter(++parcount, Integer.parseInt(parameterValue.replaceAll("[^0-9]", "")));
		                      query.setParameter(++parcount, parameterValue.replaceAll("[^A-Z]", ""));
							  query.setParameter(++parcount, Integer.parseInt(parameterValue.replaceAll("[^0-9]", "")));
							  query.setParameter(++parcount, parameterValue.replaceAll("[^A-Z]", ""));
							  query.setParameter(++parcount, Integer.parseInt(parameterValue.replaceAll("[^0-9]", "")));
			                  query.setParameter(++parcount, Integer.parseInt(parameterValue.replaceAll("[^0-9]", "")));
			                  query.setParameter(++parcount, parameterValue.replaceAll("[^A-Z]", ""));
			                  query.setParameter(++parcount, parameterValue.replaceAll("[^A-Z]", ""));*/
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                }
                            }

                            query.append(" )");

                            //changes Added by A-8130 for ICRD-254555  end

                        }
                    }
                }  else if(ShipmentDetailsVO.FLTNUM_DST.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTNUMDSTINC IS NULL AND FLTNUMDSTGTEQ IS NULL AND FLTNUMDSTLTEQ IS NULL) ");
                        } else {query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMDSTEXC,',')) ");
                            query.append(" OR (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL AND FLTNUMDSTGTEQ IS NULL AND FLTNUMDSTLTEQ IS NULL ) ");
                            query.append(" OR (FLTNUMDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMDSTEXC,','))");
                            //changes Added by A-8130 for ICRD-254555 start
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            String[] parameterValues=parameterValue.split(",");
                            //changes Added by A-8130 for ICRD-254555  end
                            for(int i=0;i<parameterValues.length;i++){
                                if(parameterValues[i].replaceAll("[^0-9]", "").length()>0){
                                    query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMDSTGTEQ, '[^0-9]', ''))<=?  AND FLTNUMDSTLTEQ is  NULL AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMDSTLTEQ, '[^0-9]', ''))>=?  AND FLTNUMDSTGTEQ is  NULL AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMDSTGTEQ, '[^0-9]', ''))<=?  AND TO_NUMBER(regexp_replace(FLTNUMDSTLTEQ, '[^0-9]', ''))>=? AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '')=? OR regexp_replace(FLTNUMDSTLTEQ, '[^A-Z]', '')=?)) ");
                                    query.append("))))");
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                }
                            }
                            query.append(" )");
                        }
                    }
                }  else if(ShipmentDetailsVO.FLTNUM_VIA.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTNUMVIAINC IS NULL AND FLTNUMVIAGTEQ IS NULL AND FLTNUMVIALTEQ IS NULL ) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,',')) ");
                            query.append(" OR (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL AND FLTNUMVIAGTEQ IS NULL AND FLTNUMVIALTEQ IS NULL ) ");
                            query.append(" OR (FLTNUMVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,','))");
                            //changes Added by A-8130 for ICRD-254555 start
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            //changes Added by A-8130 for ICRD-254555  end
                            String[] parameterValues=parameterValue.split(",");
                            for(int i=0;i<parameterValues.length;i++){
                                if(parameterValues[i].replaceAll("[^0-9]", "").length()>0){
                                    query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMVIAGTEQ, '[^0-9]', ''))<=?  AND FLTNUMVIALTEQ is  NULL AND (regexp_replace(FLTNUMVIAGTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMVIALTEQ, '[^0-9]', ''))>=?  AND FLTNUMVIAGTEQ is  NULL AND (regexp_replace(FLTNUMVIAGTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMVIAGTEQ, '[^0-9]', ''))<=?  AND TO_NUMBER(regexp_replace(FLTNUMVIALTEQ, '[^0-9]', ''))>=? AND (regexp_replace(FLTNUMVIAGTEQ, '[^A-Z]', '')=? OR regexp_replace(FLTNUMVIALTEQ, '[^A-Z]', '')=?)) ");
                                    query.append("))))");
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                }
                            }
                            query.append(" )");
                        }
                    }
                } else if(ShipmentDetailsVO.FLTNUM_ALL.equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL AND FLTNUMALLGTEQ IS NULL AND FLTNUMALLLTEQ IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMALLEXC,',')) ");
                            query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL AND FLTNUMALLGTEQ IS NULL AND FLTNUMALLLTEQ IS NULL ) ");
                            query.append(" OR (FLTNUMALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMALLEXC,','))");
                            //changes Added by A-8130 for ICRD-254555 start
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            //changes Added by A-8130 for ICRD-254555  end
                            String[] parameterValues=paramValue.split(",");
                            for(int i=0;i<parameterValues.length;i++){
                                if(parameterValues[i].replaceAll("[^0-9]", "").length()>0){
                                    query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMALLGTEQ, '[^0-9]', ''))<=?  AND FLTNUMALLLTEQ is  NULL AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMALLLTEQ, '[^0-9]', ''))>=?  AND FLTNUMALLGTEQ is  NULL AND (regexp_replace(FLTNUMALLLTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMALLGTEQ, '[^0-9]', ''))<=?  AND TO_NUMBER(regexp_replace(FLTNUMALLLTEQ, '[^0-9]', ''))>=? AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '')=? OR regexp_replace(FLTNUMALLLTEQ, '[^A-Z]', '')=?)) ");
                                    query.append("))))");
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                }
                            }
                            query.append(" )");
                        }
                    }
                    count =0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTNUMANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMANYEXC,',')) ");
                            query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL AND FLTNUMANYGTEQ IS NULL AND FLTNUMANYLTEQ IS NULL) ");
                            query.append(" OR (FLTNUMANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMANYEXC,',')) ");
                            //changes Added by A-8130 for ICRD-254555 start
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            String[] parameterValues=paramValue.split(",");
                            for(int i=0;i<parameterValues.length;i++){
                                if(parameterValues[i].replaceAll("[^0-9]", "").length()>0){
                                    query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMANYGTEQ, '[^0-9]', ''))<=?  AND FLTNUMANYLTEQ is  NULL AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMANYLTEQ, '[^0-9]', ''))>=?  AND FLTNUMANYGTEQ is  NULL AND (regexp_replace(FLTNUMANYLTEQ, '[^A-Z]', '')=?))");
                                    query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMANYGTEQ, '[^0-9]', ''))<=?  AND TO_NUMBER(regexp_replace(FLTNUMANYLTEQ, '[^0-9]', ''))>=? AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '')=? OR regexp_replace(FLTNUMANYLTEQ, '[^A-Z]', '')=?)) ");
                                    query.append("))))");
                                    //changes Added by A-8130 for ICRD-254555  end
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, Integer.parseInt(parameterValues[i].replaceAll("[^0-9]", "")));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                    query.setParameter(++parcount, parameterValues[i].replaceAll("[^A-Z]", ""));
                                }
                            }
                            query.append(" )");
                        }
                        ++count;
                    }
                    query.append(" ) ");
                }else if(ShipmentDetailsVO.PRODUCT.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (PRDINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,PRDINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PRDEXC,',')) ");
                            query.append(" OR (PRDINC IS NULL AND PRDEXC IS NULL) ");
                            query.append(" OR (PRDINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PRDEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.DV_CUSTOMS.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if ("~".equals(parameterValue)) {
                            query.append(" AND (DVCSTSTR IS NULL AND DVCSTEND IS NULL) ");
                        }else{
                            int dvCounter = 0;
                            query.append(" AND (");
                            for (String dvForCustoms : parameterValue.split(",")) {
                                if (dvCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((DVCSTSTR =? AND DVCSTEND =?)");
                                query.append(" \tOR (TO_NUMBER(DVCSTEND)>=TO_NUMBER(?)  AND DVCSTSTR is  NULL)");
                                query.append(" \tOR (TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?)  AND DVCSTEND is  NULL)");
                                query.append(" OR (DVCSTSTR IS NULL AND DVCSTEND IS NULL) ");
                                query.append(" \tOR (TO_NUMBER(DVCSTEND)>=TO_NUMBER(?)  AND TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?) ))))");
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                dvCounter++;
                            }
                            query.append(" ) ");
                        }
                    }
                }
                else if (ShipmentDetailsVO.UNID_WEIGHT.equals(parameterCode)) {
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if ("~".equals(parameterValue)) {
                            query.append(" AND (UNWGTSTR IS NULL AND UNWGTEND IS NULL) ");
                        } else {
                            int weightCounter = 0;
                            query.append(" AND (");
                            for (String unWeight : parameterValue.split(",")) {
                                if (weightCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((UNWGTSTR =? AND UNWGTEND =?)");
                                query.append(" \tOR (TO_NUMBER(UNWGTEND)>=TO_NUMBER(?)  AND UNWGTSTR is  NULL)");
                                query.append(" \tOR (TO_NUMBER(UNWGTSTR)<=TO_NUMBER(?)  AND UNWGTEND is  NULL)");
                                query.append(" OR (UNWGTSTR IS NULL AND UNWGTEND IS NULL) ");
                                query.append(" \tOR (TO_NUMBER(UNWGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(UNWGTSTR)<=TO_NUMBER(?) ))))");
                                parcount++; query.setParameter(parcount, unWeight);
                                parcount++; query.setParameter(parcount, unWeight);
                                parcount++; query.setParameter(parcount, unWeight);
                                parcount++; query.setParameter(parcount, unWeight);
                                parcount++; query.setParameter(parcount, unWeight);
                                parcount++; query.setParameter(parcount, unWeight);
                                weightCounter++;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if(ShipmentDetailsVO.DV_CARRIAGE.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if ("~".equals(parameterValue)) {
                            query.append(" AND (DVCRGSTR IS NULL AND DVCRGEND IS NULL) ");
                        } else {
                            int dvCounter = 0;
                            query.append(" AND (");
                            for (String dvForCarriage : parameterValue.split(",")) {
                                if (dvCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((TO_NUMBER(DVCRGSTR) = TO_NUMBER(?) AND TO_NUMBER(DVCRGEND) =TO_NUMBER(?))");
                                query.append(" \tOR (TO_NUMBER(DVCRGEND)>=TO_NUMBER(?)  AND DVCRGSTR is  NULL)");
                                query.append(" \tOR (TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?)  AND DVCRGEND is  NULL)");
                                query.append(" OR (DVCRGSTR IS NULL AND DVCRGEND IS NULL) ");
                                query.append(" \tOR (TO_NUMBER(DVCRGEND)>=TO_NUMBER(?)  AND TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?) ))))");
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                dvCounter++;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if(ShipmentDetailsVO.GOODS.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (NATINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATEXC),',')) ");
                            query.append(" OR (NATINC IS NULL AND NATEXC IS NULL) ");
                            query.append(" OR (NATINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATEXC),',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.AWB_PREFIX.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (AWBPFXINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,AWBPFXINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AWBPFXEXC,',')) ");
                            query.append(" OR (AWBPFXINC IS NULL AND AWBPFXEXC IS NULL) ");
                            query.append(" OR (AWBPFXINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AWBPFXEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } /* else if(ShipmentDetailsVO.FLTOWR.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTOWRINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,FLTOWREXC,',')  >0) ");
						query.append(" OR (FLTOWRINC IS NULL AND FLTOWREXC IS NULL) ");
						query.append(" OR (FLTOWRINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,FLTOWREXC,',')  >0) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}else if(ShipmentDetailsVO.FLTTYPE.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTTYP IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYP,',')  >0 ) ");
						query.append(" OR (FLTTYP IS NULL)) ");
						query.setParameter(++parcount, parameterValue);
						}
					}*/
                else if(ShipmentDetailsVO.FLTTYPE_ORG.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTTYPORGINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPORGEXC,',')) ");
                            query.append(" OR (FLTTYPORGINC IS NULL AND FLTTYPORGEXC IS NULL) ");
                            query.append(" OR (FLTTYPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.FLTTYPE_DST.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTTYPDSTINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPDSTEXC,',')) ");
                            query.append(" OR (FLTTYPDSTINC IS NULL AND FLTTYPDSTEXC IS NULL) ");
                            query.append(" OR (FLTTYPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.FLTTYPE_VIA.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTTYPVIAINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPVIAEXC,',')) ");
                            query.append(" OR (FLTTYPVIAINC IS NULL AND FLTTYPVIAEXC IS NULL) ");
                            query.append(" OR (FLTTYPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.FLTTYPE_ALL.equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPALLEXC,',')) ");
                            query.append(" OR (FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL) ");
                            query.append(" OR (FLTTYPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);


                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                    }
                    count =0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTTYPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPANYEXC,',')) ");
                            query.append(" OR (FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL) ");
                            query.append(" OR (FLTTYPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);


                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");
                } else if(ShipmentDetailsVO.SCC_GROUP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SCCGRPINC IS NULL OR SCCGRPINC='-' ) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SCCGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCGRPEXC,',')) ");
                            query.append(" OR (SCCGRPINC IS NULL AND SCCGRPEXC IS NULL AND SCCGRPEXCIF IS NULL) ");
                            query.append(" OR (SCCGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCGRPEXC,',')) ");
                            query.append(" OR (SCCGRPINC IS NULL AND NOT pkg_frmwrk.Fun_String_Check(?,SCCGRPEXCIF,',') >0) ) ");
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                        }
                    }
                }else if(ShipmentDetailsVO.AGENTGRP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (AGTGRPINC IS NULL OR AGTGRPINC='-' ) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,AGTGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AGTGRPEXC,',')) ");
                            query.append(" OR (AGTGRPINC IS NULL AND AGTGRPEXC IS NULL ) ");
                            query.append(" OR (AGTGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AGTGRPEXC,',')) )");

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.SHIPPER_GROUP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SHPGRPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SHPGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPGRPEXC,',')) ");
                            query.append(" OR (SHPGRPINC IS NULL AND SHPGRPEXC IS NULL ) ");
                            query.append(" OR (SHPGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPGRPEXC,',')) )");

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.CONSIGNEE_GROUP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CNSGRPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CNSGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSGRPEXC,',')) ");
                            query.append(" OR (CNSGRPINC IS NULL AND CNSGRPEXC IS NULL ) ");
                            query.append(" OR (CNSGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSGRPEXC,',')) )");

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.FLTOWR_ORG.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTOWRORGINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRORGEXC,',')) ");
                            query.append(" OR (FLTOWRORGINC IS NULL AND FLTOWRORGEXC IS NULL) ");
                            query.append(" OR (FLTOWRORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.FLTOWR_DST.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTOWRDSTINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRDSTEXC,',')) ");
                            query.append(" OR (FLTOWRDSTINC IS NULL AND FLTOWRDSTEXC IS NULL) ");
                            query.append(" OR (FLTOWRDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.FLTOWR_VIA.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTOWRVIAINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRVIAEXC,',')) ");
                            query.append(" OR (FLTOWRVIAINC IS NULL AND FLTOWRVIAEXC IS NULL) ");
                            query.append(" OR (FLTOWRVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.AGENTGRP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (AGTGRPINC IS NULL OR AGTGRPINC='-' ) ");
                        }
                    }
                } else if(ShipmentDetailsVO.FLTOWR_ORG.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                    }
                } else if(ShipmentDetailsVO.FLTOWR_DST.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                    }
                } else if(ShipmentDetailsVO.FLTOWR_VIA.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                    }

                } else if(ShipmentDetailsVO.FLTOWR_ALL.equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRALLEXC,',')) ");
                            query.append(" OR (FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
                            query.append(" OR (FLTOWRALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);


                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                    }
                    count =0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTOWRANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRANYEXC,',')) ");
                            query.append(" OR (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
                            query.append(" OR (FLTOWRANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);


                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");
                }/*else if(ShipmentDetailsVO.AIRLINE_GRP.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (ARLGRPINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,ARLGRPEXC,',')  >0) ");
						query.append(" OR (ARLGRPINC IS NULL AND ARLGRPEXC IS NULL) ");
						query.append(" OR (ARLGRPINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,ARLGRPEXC,',')  >0) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} */ else if(ShipmentDetailsVO.AIRLINE_GRP_ORG.equals(parameterCode)) {
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ARLGRPORGINC IS NULL OR ARLGRPORGINC = '-' ) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPORGEXC,',')) ");
                            query.append(" OR (ARLGRPORGINC IS NULL AND ARLGRPORGEXC IS NULL) ");
                            query.append(" OR (ARLGRPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                        }
                    }
                }  else if(ShipmentDetailsVO.AIRLINE_GRP_DST.equals(parameterCode)) {
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ARLGRPDSTINC IS NULL OR ARLGRPDSTINC='-' ) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPDSTEXC,',')) ");
                            query.append(" OR (ARLGRPDSTINC IS NULL AND ARLGRPDSTEXC IS NULL) ");
                            query.append(" OR (ARLGRPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                        }
                    }
                } else if(ShipmentDetailsVO.AIRLINE_GRP_VIA.equals(parameterCode)) {
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ARLGRPVIAINC IS NULL OR ARLGRPVIAINC ='-' ) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPVIAEXC,',')) ");
                            query.append(" OR (ARLGRPVIAINC IS NULL AND ARLGRPVIAEXC IS NULL) ");
                            query.append(" OR (ARLGRPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                            query.setParameter(++parcount, parameterValue.toUpperCase());
                        }
                    }
                } else if(ShipmentDetailsVO.AIRLINE_GRP_ALL.equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (ARLGRPALLINC IS NULL AND ARLGRPALLEXC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPALLEXC,',')) ");
                            query.append(" OR (ARLGRPALLINC IS NULL AND ARLGRPALLEXC IS NULL) ");
                            query.append(" OR (ARLGRPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue.toUpperCase());
                            query.setParameter(++parcount, paramValue.toUpperCase());
                            query.setParameter(++parcount, paramValue.toUpperCase());
                            query.setParameter(++parcount, paramValue.toUpperCase());
                            query.setParameter(++parcount, paramValue.toUpperCase());
                        }
                    }
                    count =0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (ARLGRPANYINC IS NULL AND ARLGRPANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(" ((pkg_frmwrk.Fun_String_Check(?,ARLGRPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPANYEXC,',')) ");
                            query.append(" OR (ARLGRPANYINC IS NULL AND ARLGRPANYEXC IS NULL) ");
                            query.append(" OR (ARLGRPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue.toUpperCase());
                            query.setParameter(++parcount, paramValue.toUpperCase());
                            query.setParameter(++parcount, paramValue.toUpperCase());
                            query.setParameter(++parcount, paramValue.toUpperCase());
                            query.setParameter(++parcount, paramValue.toUpperCase());
                        }
                        ++count;
                    }
                    query.append(" ) ");
                } else if(ShipmentDetailsVO.UN_NUMBER.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (UNDNUMINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,UNDNUMINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNDNUMEXC,',')) ");
                            query.append(" OR (UNDNUMINC IS NULL AND UNDNUMEXC IS NULL) ");
                            query.append(" OR (UNDNUMINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNDNUMEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.ULD_POSITION.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ULDPOSINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ULDPOSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ULDPOSEXC,',')) ");
                            query.append(" OR (ULDPOSINC IS NULL AND ULDPOSEXC IS NULL) ");
                            query.append(" OR (ULDPOSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ULDPOSEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.ULD_TYPE.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ULDTYPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ULDTYPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ULDTYPEXC,',')) ");
                            query.append(" OR (ULDTYPINC IS NULL AND ULDTYPEXC IS NULL) ");
                            query.append(" OR (ULDTYPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ULDTYPEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.HEIGHT.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (HGTSTR IS NULL AND HGTEND IS NULL) ");
                        } else {
                            int heightCounter = 0;
                            query.append(" AND (");
                            for (String height : parameterValue.split(",")) {
                                if (heightCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((HGTSTR =? AND HGTEND =?)");
                                query.append(" 	OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND HGTSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(HGTSTR)<=TO_NUMBER(?)  AND HGTEND is  NULL)");
                                query.append(" OR (HGTSTR IS NULL AND HGTEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(HGTSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount,height);
                                query.setParameter(++parcount,height);
                                query.setParameter(++parcount,height);
                                query.setParameter(++parcount,height);
                                query.setParameter(++parcount,height);
                                query.setParameter(++parcount,height);
                                ++heightCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if(ShipmentDetailsVO.SERVICE_CARGO_CLASS.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SRVCRGCLSINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SRVCRGCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SRVCRGCLSEXC,',')) ");
                            query.append(" OR (SRVCRGCLSINC IS NULL AND SRVCRGCLSEXC IS NULL) ");
                            query.append(" OR (SRVCRGCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SRVCRGCLSEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.SHIPMENT_TYPE.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SHPTYPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SHPTYPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPTYPEXC,',')) ");
                            query.append(" OR (SHPTYPINC IS NULL AND SHPTYPEXC IS NULL) ");
                            query.append(" OR (SHPTYPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPTYPEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }
                else if(ShipmentDetailsVO.CONSOL.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CNSLINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CNSLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSLEXC,',')) ");
                            query.append(" OR (CNSLINC IS NULL AND CNSLEXC IS NULL) ");
                            query.append(" OR (CNSLEXC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSLEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }
                else if(ShipmentDetailsVO.UNIDs.equals(parameterCode)){ //Added by A-8130 for ICRD-254555
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (UNCLSINC IS NULL) ");
                        } else {
                            int unidCounter=0;
                            query.append(" AND (");
                            for (String unid : parameterValue.split(",")) {
                                if (unidCounter > 0) {
                                    query.append(" OR ");
                                }
                                //	unid = unid.replaceAll("[^\\d.]", "");
                                query.append(" ((pkg_frmwrk.Fun_String_Check(?,UNCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNCLSEXC,',')) ");
                                query.append(" OR (UNCLSINC IS NULL AND UNCLSEXC IS NULL) ");
                                query.append(" OR (UNCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNCLSEXC,',')) )");
                                parcount++; query.setParameter(parcount, unid);
                                parcount++; query.setParameter(parcount, unid);

                                parcount++; query.setParameter(parcount, unid);
                                parcount++; query.setParameter(parcount, unid);
                                parcount++; query.setParameter(parcount, unid);
                                ++unidCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if(ShipmentDetailsVO.LENGTH.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (LENSTR IS NULL AND LENEND IS NULL) ");
                        } else {
                            int lengthCounter = 0;
                            query.append(" AND (");
                            for (String length : parameterValue.split(",")) {
                                if (lengthCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((LENSTR =? AND LENEND =?)");
                                query.append(" 	OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND LENSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(LENSTR)<=TO_NUMBER(?) AND LENEND is  NULL)");
                                query.append(" OR (LENSTR IS NULL AND LENEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND TO_NUMBER(LENSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount,length);
                                query.setParameter(++parcount,length);
                                query.setParameter(++parcount,length);
                                query.setParameter(++parcount,length);
                                query.setParameter(++parcount,length);
                                query.setParameter(++parcount,length);
                                ++lengthCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if(ShipmentDetailsVO.WIDTH.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (WIDSTR IS NULL AND WIDEND IS NULL) ");
                        } else {
                            int widthCounter = 0;
                            query.append(" AND (");
                            for (String width : parameterValue.split(",")) {
                                if (widthCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((WIDSTR =? AND WIDEND =?)");
                                query.append(" 	OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?)  AND WIDSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(WIDSTR)<=TO_NUMBER(?)  AND WIDEND is  NULL)");
                                query.append(" OR (WIDSTR IS NULL AND WIDEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?)  AND TO_NUMBER(WIDSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount,width);
                                query.setParameter(++parcount,width);
                                query.setParameter(++parcount,width);
                                query.setParameter(++parcount,width);
                                query.setParameter(++parcount,width);
                                query.setParameter(++parcount,width);
                                ++widthCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if(ShipmentDetailsVO.WEIGHT.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (WGTSTR IS NULL AND WGTEND IS NULL) ");
                        } else {
                            int weightCounter = 0;
                            query.append(" AND (");
                            for (String weight : parameterValue.split(",")) {
                                if (weightCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((WGTSTR =? AND WGTEND =?)");
                                query.append(" 	OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?)  AND WGTSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(WGTSTR)<=TO_NUMBER(?)  AND WGTEND is  NULL)");
                                query.append(" OR (WGTSTR IS NULL AND WGTEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(WGTSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount,weight);
                                query.setParameter(++parcount,weight);
                                query.setParameter(++parcount,weight);
                                query.setParameter(++parcount,weight);
                                query.setParameter(++parcount,weight);
                                query.setParameter(++parcount,weight);
                                ++weightCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if(ShipmentDetailsVO.PER_PIECE_WEIGHT.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (PERPCSWGTSTR IS NULL AND PERPCSWGTEND IS NULL) ");
                        } else {
                            int weightCounter = 0;
                            query.append(" AND (");
                            for (String perPieceWeight : parameterValue.split(",")) {
                                if (weightCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((PERPCSWGTSTR =? AND PERPCSWGTEND =?)");
                                query.append(" 	OR (TO_NUMBER(PERPCSWGTEND)>=TO_NUMBER(?)  AND PERPCSWGTSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(PERPCSWGTSTR)<=TO_NUMBER(?)  AND PERPCSWGTEND is  NULL)");
                                query.append(" OR (PERPCSWGTSTR IS NULL AND PERPCSWGTEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(PERPCSWGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(PERPCSWGTSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount,perPieceWeight);
                                query.setParameter(++parcount,perPieceWeight);
                                query.setParameter(++parcount,perPieceWeight);
                                query.setParameter(++parcount,perPieceWeight);
                                query.setParameter(++parcount,perPieceWeight);
                                query.setParameter(++parcount,perPieceWeight);
                                ++weightCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if("ULD".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ULDINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ULDINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ULDEXC,',')) ");
                            query.append(" OR (ULDINC IS NULL AND ULDEXC IS NULL) ");
                            query.append(" OR (ULDINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ULDEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if("VOL".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (VOLSTR IS NULL AND VOLEND IS NULL) ");
                        } else {
                            int volumeCounter = 0;
                            query.append(" AND (");
                            for (String volume : parameterValue.split(",")) {
                                if (volumeCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((VOLSTR =? AND VOLEND =?)");
                                query.append(" 	OR (TO_NUMBER(VOLEND)>=TO_NUMBER(?)  AND VOLSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(VOLSTR)<=TO_NUMBER(?)  AND VOLEND is  NULL)");
                                query.append(" OR (VOLSTR IS NULL AND VOLEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(VOLEND)>=TO_NUMBER(?)  AND TO_NUMBER(VOLSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                ++volumeCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }
                else if("NUMSTP".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (NUMSTPSTR IS NULL AND NUMSTPEND IS NULL) ");
                        } else {
                            query.append(" AND (");

                            query.append(" ((((NUMSTPSTR =? AND NUMSTPEND =?)");
                            query.append(" 	OR (TO_NUMBER(NUMSTPEND)>=TO_NUMBER(?)  AND NUMSTPSTR is  NULL)");
                            query.append(" 	OR (TO_NUMBER(NUMSTPSTR)<=TO_NUMBER(?)  AND NUMSTPEND is  NULL)");
                            query.append(" OR (NUMSTPSTR IS NULL AND NUMSTPEND IS NULL) ");
                            query.append(" 	OR (TO_NUMBER(NUMSTPEND)>=TO_NUMBER(?) AND TO_NUMBER(NUMSTPSTR)<=TO_NUMBER(?) ))))");
                            query.setParameter(++parcount,parameterValue);
                            query.setParameter(++parcount,parameterValue);
                            query.setParameter(++parcount,parameterValue);
                            query.setParameter(++parcount,parameterValue);
                            query.setParameter(++parcount,parameterValue);
                            query.setParameter(++parcount,parameterValue);
                            query.append(" ) ");
                        }
                    }
                }
                //Added as part of IASCB-150038
                else if(ShipmentDetailsVO.SERVICE_TYPE.equals(parameterCode)){
                    int serviceCount = 0;
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if(serviceCount>0) {
                            query.append(OR);
                        }
                        else {
                            query.append("  AND ( ");
                        }
                        if (TILDE.equals(parameterValue)) {
                            query.append(" SRVCTYPINC IS NULL ");
                        } else {
                            query.append(" (pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPEXC),',')) ");
                            query.append(" OR (SRVCTYPINC IS NULL AND SRVCTYPEXC IS NULL) ");
                            query.append(" OR (SRVCTYPINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPEXC),',')) ");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.append(serviceCount>0 ? ")":" ");
                        }
                        serviceCount++;
                    }
                    query.append( ")" );
                }

                //Ends IASCB-150038
					//Added as part of IASCB-162299
					else if (ShipmentDetailsVO.UNID_PACKGING_GROUP.equals(parameterCode)) {
						int serviceCount = 0;
						for (String parameterValue : shipmentVO.getMap().get(parameterCode)) {
							if (serviceCount > 0) {
								query.append(OR);
							} else {
								query.append("  AND  (");
							}
							if (TILDE.equals(parameterValue)) {
								query.append(" PKGGRPINC IS NULL ");
							} else {
								query.append(
										" (pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(PKGGRPINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(PKGGRPEXC),',')) ");
								query.append(" OR (PKGGRPINC IS NULL AND PKGGRPEXC IS NULL) ");
								query.append(
										" OR (PKGGRPINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(PKGGRPEXC),',')) ");
								query.setParameter(++parcount, parameterValue);
								query.setParameter(++parcount, parameterValue);
								query.setParameter(++parcount, parameterValue);
								query.setParameter(++parcount, parameterValue);
								query.setParameter(++parcount, parameterValue);
								query.append(serviceCount > 0 ? ")" : " ");
							}
							serviceCount++;
						}
						query.append(")");
					}

					//Ends IASCB-162299
					//Added as part of IASCB-162530
					else if (ShipmentDetailsVO.UNID_SUB_RISK.equals(parameterCode)) {
						int serviceCount = 0;
						for (String parameterValue : shipmentVO.getMap().get(parameterCode)) {
							if (serviceCount > 0) {
								query.append(OR);
							} else {
								query.append("  AND  (");
							}
							if (TILDE.equals(parameterValue)) {
								query.append(" SUBRSKINC IS NULL ");
							} else {
								query.append(
										" (pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SUBRSKINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SUBRSKEXC),',')) ");
								query.append(" OR (SUBRSKINC IS NULL AND SUBRSKEXC IS NULL) ");
								query.append(
										" OR (SUBRSKINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SUBRSKEXC),',')) ");
								query.setParameter(++parcount, parameterValue);
								query.setParameter(++parcount, parameterValue);
								query.setParameter(++parcount, parameterValue);
								query.setParameter(++parcount, parameterValue);
								query.setParameter(++parcount, parameterValue);
								query.append(serviceCount > 0 ? ")" : " ");
							}
							serviceCount++;
						}
						query.append(")");
					}

					//Ends IASCB-162530
                //IASCB-182753
                else if(ShipmentDetailsVO.SERVICE_TYPE_FOR_TECHNICAL_STOP.equals(parameterCode)){
                    parcount = constructQueryForTechnicalStop(shipmentVO,parameterCode,query,parcount);
                }
                else if("ACRTYPORG".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRTYPORGINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRTYPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPORGEXC,',')) ");
                            query.append(" OR (ACRTYPORGINC IS NULL AND ACRTYPORGEXC IS NULL) ");
                            query.append(" OR (ACRTYPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if("ACRTYPDST".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRTYPDSTINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRTYPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPDSTEXC,',')) ");
                            query.append(" OR (ACRTYPDSTINC IS NULL AND ACRTYPDSTEXC IS NULL) ");
                            query.append(" OR (ACRTYPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if("ACRTYPVIA".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRTYPVIAINC IS NULL) ");
                        } else if(parameterValue!=null){
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRTYPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPVIAEXC,',')) ");
                            query.append(" OR (ACRTYPVIAINC IS NULL AND ACRTYPVIAEXC IS NULL) ");
                            query.append(" OR (ACRTYPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if("ACRTYPALL".equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (ACRTYPALLINC IS NULL AND ACRTYPALLEXC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRTYPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPALLEXC,',')) ");
                            query.append(" OR (ACRTYPALLINC IS NULL AND ACRTYPALLEXC IS NULL) ");
                            query.append(" OR (ACRTYPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                    }
                    count =0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (ACRTYPANYINC IS NULL AND ACRTYPANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(" ((pkg_frmwrk.Fun_String_Check(?,ACRTYPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPANYEXC,',')) ");
                            query.append(" OR (ACRTYPANYINC IS NULL AND ACRTYPANYEXC IS NULL) ");
                            query.append(" OR (ACRTYPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");
                }


                else if("ACRTYPGRPORG".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRTYPGRPORGINC IS NULL OR ACRTYPGRPORGINC='-' ) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPORGEXC,',')) ");
                            query.append(" OR (ACRTYPGRPORGINC IS NULL AND ACRTYPGRPORGEXC IS NULL) ");
                            query.append(" OR (ACRTYPGRPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if("ACRTYPGRPDST".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRTYPGRPDSTINC IS NULL OR ACRTYPGRPDSTINC='-' ) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPDSTEXC,',')) ");
                            query.append(" OR (ACRTYPGRPDSTINC IS NULL AND ACRTYPGRPDSTEXC IS NULL) ");
                            query.append(" OR (ACRTYPGRPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if("ACRTYPGRPVIA".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRTYPGRPVIAINC IS NULL OR ACRTYPGRPVIAINC='-' ) ");
                        } else if(parameterValue!=null){
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPVIAEXC,',')) ");
                            query.append(" OR (ACRTYPGRPVIAINC IS NULL AND ACRTYPGRPVIAEXC IS NULL) ");
                            query.append(" OR (ACRTYPGRPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if("ACRTYPGRPALL".equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (ACRTYPGRPALLINC IS NULL AND ACRTYPGRPALLEXC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPALLEXC,',')) ");
                            query.append(" OR (ACRTYPGRPALLINC IS NULL AND ACRTYPGRPALLEXC IS NULL) ");
                            query.append(" OR (ACRTYPGRPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                    }
                    count =0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (ACRTYPGRPANYINC IS NULL AND ACRTYPGRPANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(" ((pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPANYEXC,',')) ");
                            query.append(" OR (ACRTYPGRPANYINC IS NULL AND ACRTYPGRPANYEXC IS NULL) ");
                            query.append(" OR (ACRTYPGRPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRTYPGRPANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");
                }

                else if(ShipmentDetailsVO.AIRCRAFT_CLASS_ORIGIN.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRCLSORGINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRCLSORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSORGEXC,',')) ");
                            query.append(" OR (ACRCLSORGINC IS NULL AND ACRCLSORGEXC IS NULL) ");
                            query.append(" OR (ACRCLSORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_DESTINATION.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRCLSDSTINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRCLSDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSDSTEXC,',')) ");
                            query.append(" OR (ACRCLSDSTINC IS NULL AND ACRCLSDSTEXC IS NULL) ");
                            query.append(" OR (ACRCLSDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_VIA_POINT.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRCLSVIAINC IS NULL) ");
                        } else if(parameterValue!=null){
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRCLSVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSVIAEXC,',')) ");
                            query.append(" OR (ACRCLSVIAINC IS NULL AND ACRCLSVIAEXC IS NULL) ");
                            query.append(" OR (ACRCLSVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_ALL.equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (ACRCLSALLINC IS NULL AND ACRCLSALLEXC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRCLSALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSALLEXC,',')) ");
                            query.append(" OR (ACRCLSALLINC IS NULL AND ACRCLSALLEXC IS NULL) ");
                            query.append(" OR (ACRCLSALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                    }
                    count =0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (ACRCLSANYINC IS NULL AND ACRCLSANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(" ((pkg_frmwrk.Fun_String_Check(?,ACRCLSANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSANYEXC,',')) ");
                            query.append(" OR (ACRCLSANYINC IS NULL AND ACRCLSANYEXC IS NULL) ");
                            query.append(" OR (ACRCLSANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");
                }

            }
        }
        //}
        if (shipmentVO.getBookingFlightDetailVOs() != null
                && shipmentVO.getBookingFlightDetailVOs().size() > 0) {
            query.append( " AND ( ");
            int flightCounter = 0;
            Set<String> carrierCodes = null;
            Set<String> times = null;
            Set<String> dates = null;
            Set<String> flightnumbers = null;
            Set<String> dayOfWeeks = null;
            boolean isAndFlag = false;
            int counter = 0;
            for (BookingFlightDetailVO bookingFlightDetailVO :
                    shipmentVO.getBookingFlightDetailVOs()) {
                carrierCodes = new HashSet<String>();
                times = new HashSet<String>();
                dates = new HashSet<String>();
                flightnumbers = new HashSet<String>();
                dayOfWeeks = new HashSet<String>();
                if (flightCounter > 0) {
                    query.append( " OR");
                    isAndFlag = false;
                }
                query.append( " (");
                if (bookingFlightDetailVO.getCarrierOrigin() != null
                        && bookingFlightDetailVO.getCarrierOrigin().trim().length() > 0) {
                    if (isAndFlag) {
                        query.append(" AND ");
                    }
                    isAndFlag = true;
                    query.append(" ((pkg_frmwrk.Fun_String_Check(?,CARRORGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRORGEXC,',')) ");
                    query.append(" OR (CARRORGINC IS NULL AND CARRORGEXC IS NULL) ");
                    query.append(" OR (CARRORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRORGEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());


                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
                    carrierCodes.add(bookingFlightDetailVO.getCarrierOrigin());
                }







                if (bookingFlightDetailVO.getCarrierDestination() != null
                        && bookingFlightDetailVO.getCarrierDestination().trim().length() > 0) {
                    if (isAndFlag) {
                        query.append(" AND ");
                    }
                    isAndFlag = true;
                    query.append(" ((pkg_frmwrk.Fun_String_Check(?,CARRDSTINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) ");
                    query.append(" OR (CARRDSTINC IS NULL AND CARRDSTEXC IS NULL) ");
                    query.append(" OR (CARRDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());


                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
                    carrierCodes.add(bookingFlightDetailVO.getCarrierDestination());
                }







                if (bookingFlightDetailVO.getCarrierViaPoint() != null
                        && bookingFlightDetailVO.getCarrierViaPoint().trim().length() > 0) {
                    if (isAndFlag) {
                        query.append(" AND ");
                    }
                    isAndFlag = true;
                    query.append(" ((pkg_frmwrk.Fun_String_Check(?,CARRVIAINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) ");
                    query.append(" OR (CARRVIAINC IS NULL AND CARRVIAEXC IS NULL) ");
                    query.append(" OR (CARRVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());


                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
                    query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
                    carrierCodes.add(bookingFlightDetailVO.getCarrierViaPoint());
                }







                if (carrierCodes.size() > 0) {
                    //For applicable on all
                    query.append(" AND(( ");
                    counter = 0;
                    isAndFlag = true;
                    for (String carrier : carrierCodes) {
                        if (counter != 0) {
                            query.append(" AND ");
                        }
                        query.append(" (pkg_frmwrk.Fun_String_Check(?,CARRALLINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRALLEXC,',')) ");
                        query.setParameter(++parcount, carrier);
                        query.setParameter(++parcount, carrier);
                        query.setParameter(++parcount, carrier);

                        ++counter;
                    }
                    counter = 0;
                    query.append(" ) OR( ");
                    for (String carrier : carrierCodes) {
                        if (counter != 0) {
                            query.append(" AND ");
                        }
                        query.append(" (CARRALLINC='-' AND (regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRALLEXC,','))) ");
                        query.setParameter(++parcount, carrier);

                        query.setParameter(++parcount, carrier);
                        ++counter;
                    }
                    query.append(" ) OR (CARRALLINC IS NULL AND CARRALLEXC IS NULL) ) ");

                    //For applicable on any
                    query.append(" AND(( ");
                    counter = 0;
                    for (String carrier : carrierCodes) {
                        if (counter != 0) {
                            query.append(" OR ");
                        }
                        query.append(" (pkg_frmwrk.Fun_String_Check(?,CARRANYINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRANYEXC,',')) ");
                        query.setParameter(++parcount, carrier);
                        query.setParameter(++parcount, carrier);
                        query.setParameter(++parcount, carrier);
                        ++counter;
                    }
                    counter = 0;
                    query.append(" ) OR( ");
                    for (String carrier : carrierCodes) {
                        if (counter != 0) {
                            query.append(" OR ");
                        }
                        query.append(" (CARRANYINC='-' AND (regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRANYEXC,','))) ");
                        query.setParameter(++parcount, carrier);

                        query.setParameter(++parcount, carrier);
                        ++counter;
                    }
                    query.append(" ) OR (CARRANYINC IS NULL AND CARRANYEXC IS NULL) ) ");
                }
				/*if (bookingFlightDetailVO.getFlightCarrierCode()!=null
						&& bookingFlightDetailVO.getFlightCarrierCode().trim().length() > 0) {
					query.append("  ((pkg_frmwrk.Fun_String_Check(?,ARLCODINC,',') >0 AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',') >0) ");
					query.append(" OR (ARLCODINC IS NULL AND ARLCODEXC IS NULL) ");
					query.append(" OR (ARLCODINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',') >0) )");
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
				}*/
				/*if (bookingFlightDetailVO.getFlightNumber() != null
						&& bookingFlightDetailVO.getFlightNumber().trim().length() > 0) {
					StringBuilder flightNumber = new StringBuilder();
					flightNumber.append(
							bookingFlightDetailVO.getFlightCarrierCode()).append("~").append(
									bookingFlightDetailVO.getFlightNumber()).toString();
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMINC,',') >0 AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',') >0) ");
					query.append(" OR (FLTNUMINC IS NULL AND FLTNUMEXC IS NULL) ");
					query.append(" OR (FLTNUMINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',') >0) )");
					query.setParameter(++parcount, flightNumber.toString());
					query.setParameter(++parcount, flightNumber.toString());
					query.setParameter(++parcount, flightNumber.toString());
				}*/

                if (bookingFlightDetailVO.getTimeOrigin() != null) {
                    isAndFlag = true;
                    // case 1: eq
                    query.append(AND_QUERY);
                    query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')|| ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                    // case 2
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND ORGSTRTIM is  NULL AND ORGENDTIM is not NULL))");
                    // case 3
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND ORGENDTIM is  NULL AND ORGSTRTIM is not NULL))");
                    // case 4
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') )) ");
                    query.append("  OR(ORGSTRTIM is  NULL AND ORGENDTIM is NULL) )))");
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    times.add(bookingFlightDetailVO.getTimeOrigin());
                }



                if(bookingFlightDetailVO.getTimeDestination() != null){
                    isAndFlag = true;
                    // case 1: eq
                    query.append(AND_QUERY);
                    query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')|| DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                    // case 2
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND DSTSTRTIM is  NULL AND DSTENDTIM is not NULL))");
                    // case 3
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND DSTENDTIM is  NULL AND DSTSTRTIM is not NULL))");
                    // case 4
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DATABASE_SYSTEM_DATE);
                    query.append("  OR(DSTSTRTIM is  NULL AND DSTENDTIM is NULL) )))");
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    times.add(bookingFlightDetailVO.getTimeDestination());
                }



                if(bookingFlightDetailVO.getTimeViaPoint() != null) {
                    isAndFlag = true;
                    // case 1: eq
                    query.append(AND_QUERY);
                    query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')|| VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                    // case 2
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND VIASTRTIM is  NULL AND VIAENDTIM is not NULL))");
                    // case 3
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND VIAENDTIM is  NULL AND VIASTRTIM is not NULL))");
                    // case 4
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DATABASE_SYSTEM_DATE);
                    query.append("  OR(VIASTRTIM is  NULL AND VIAENDTIM is NULL) )))");
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                    times.add(bookingFlightDetailVO.getTimeViaPoint());
                }
                else {
                    if (isAndFlag) {
                        query.append("AND");
                    }
                    isAndFlag = true;
                    query.append(" (VIASTRTIM IS NULL AND VIAENDTIM IS NULL) ");
                }
                if (times.size() > 0) {
                    //For applicable on all
                    query.append(" AND(");
                    counter = 0;
                    isAndFlag = true;
                    for (String time : times) {
                        if (counter != 0) {
                            query.append(" AND ");
                        }
                        query.append(" ((((");
                        query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')|| ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                        // case 2
                        query.append(" OR ((TO_DATE(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(" AND ALLSTRTIM is  NULL AND ALLENDTIM is not NULL))");
                        // case 3
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(" AND ALLENDTIM is  NULL AND ALLSTRTIM is not NULL))");
                        // case 4
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DATABASE_SYSTEM_DATE);
                        query.append("  OR(ALLSTRTIM is  NULL AND ALLENDTIM is NULL) )))");
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        ++counter;
                    }
                    query.append(" ) ");
                    //For applicable on any
                    query.append(" AND(");
                    counter = 0;
                    for (String time : times) {
                        if (counter != 0) {
                            query.append(" OR ");
                        }
                        query.append(" ((((");
                        query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')|| ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                        // case 2
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(" AND ANYSTRTIM is  NULL AND ANYENDTIM is not NULL))");
                        // case 3
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(" AND ANYENDTIM is  NULL AND ANYSTRTIM is not NULL))");
                        // case 4
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DATABASE_SYSTEM_DATE);
                        query.append("  OR(ANYSTRTIM is  NULL AND ANYENDTIM is NULL) )))");
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        query.setParameter(++parcount,time);
                        ++counter;
                    }
                    query.append(" ) ");
                }
                if (bookingFlightDetailVO.getDateOrigin() != null) {
                    query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ORGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ORGDATEXC,',')) ");
                    query.append(" OR (ORGDATINC IS NULL AND ORGDATEXC IS NULL) ");
                    query.append(" OR (ORGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ORGDATEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                    dates.add(bookingFlightDetailVO.getDateOrigin().toUpperCase());
                }
                else {
                    query.append(" AND (ORGDATINC IS NULL AND ORGDATEXC IS NULL) ");
                }
                if (bookingFlightDetailVO.getDateViaPoint() != null) {

                    query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,VIADATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,VIADATEXC,',')) ");
                    query.append(" OR (VIADATINC IS NULL AND VIADATEXC IS NULL) ");
                    query.append(" OR (VIADATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,VIADATEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                    dates.add(bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                } else {
                    query.append(" AND (VIADATINC IS NULL AND VIADATEXC IS NULL) ");
                }
                if (bookingFlightDetailVO.getDateDestination() != null) {
                    query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,DSTDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,DSTDATEXC,',')) ");
                    query.append(" OR (DSTDATINC IS NULL AND DSTDATEXC IS NULL) ");
                    query.append(" OR (DSTDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,DSTDATEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                    dates.add(bookingFlightDetailVO.getDateDestination().toUpperCase());
                } else {
                    query.append(" AND (DSTDATINC IS NULL AND DSTDATEXC IS NULL) ");






                }
                if (dates.size() > 0) {
                    //For applicable on all
                    query.append(" AND(");
                    counter = 0;
                    for (String dateString : dates) {
                        if (counter != 0) {
                            query.append(" AND ");
                        }
                        query.append(" ((pkg_frmwrk.Fun_String_Check(?,ALLDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ALLDATEXC,',')) ");
                        query.append(" OR (ALLDATINC IS NULL AND ALLDATEXC IS NULL) ");
                        query.append(" OR (ALLDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ALLDATEXC,',')) )");
                        query.setParameter(++parcount, dateString);
                        query.setParameter(++parcount, dateString);
                        query.setParameter(++parcount, dateString);
                        query.setParameter(++parcount, dateString);
                        query.setParameter(++parcount, dateString);
                        ++counter;
                    }
                    query.append(" ) ");
                    //For applicable on any
                    query.append(" AND(");
                    counter = 0;
                    for (String dateString : dates) {
                        if (counter != 0) {
                            query.append(" OR ");
                        }
                        query.append(" ((pkg_frmwrk.Fun_String_Check(?,ANYDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ANYDATEXC,',')) ");
                        query.append(" OR (ANYDATINC IS NULL AND ANYDATEXC IS NULL) ");
                        query.append(" OR (ANYDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ANYDATEXC,',')) )");
                        query.setParameter(++parcount, dateString);
                        query.setParameter(++parcount, dateString);
                        query.setParameter(++parcount, dateString);



                        query.setParameter(++parcount, dateString);
                        query.setParameter(++parcount, dateString);
                        ++counter;
                    }
                    query.append(" ) ");
                }
                if (bookingFlightDetailVO.getDayOfWeekOrg()!=null
                        && bookingFlightDetailVO.getDayOfWeekOrg().trim().length() > 0) {
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append(" AND ((ORGDAYOPR LIKE ?) ");
                    if(bookingFlightDetailVO.getDateOrigin() != null){
                        query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    }
                    query.append(" OR (ORGDAYOPR IS NULL)) AND ((INSTR(ORGARPCODINC,?)>0 OR INSTR(ORGARPCODEXC , ?) = 0 ) ");
                    if(airportGrp!=null){
                        query.append("OR (pkg_frmwrk.Fun_String_Check(ORGARPGRPINC,?,',')>0 OR pkg_frmwrk.Fun_String_Check(ORGARPGRPEXC , ?,',') = 0 ) ");
                    }
                    if(country!=null){
                        query.append("OR (INSTR(ORGCNTCODINC,?)>0 OR INSTR(ORGCNTCODEXC , ?) = 0 ) ");
                    }
                    if(countryGrp!=null){
                        query.append("OR (pkg_frmwrk.Fun_String_Check(ORGCNTGRPINC,?,',')>0 OR pkg_frmwrk.Fun_String_Check(ORGCNTGRPEXC , ?,',') = 0 ) ");
                    }
                    query.append("  OR ( (ORGARPCODINC IS NULL OR ORGARPCODINC ='-') AND  (ORGCNTCODINC IS NULL OR ORGCNTCODINC ='-') AND (ORGARPGRPINC IS NULL OR ORGARPGRPINC='-')  AND (ORGCNTGRPINC IS NULL OR ORGCNTGRPINC = '-') ) ");
                    query.append(")");
                    query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekOrg() + '%');
                    if(bookingFlightDetailVO.getDateOrigin() != null){
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin());
                    }
                    query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
                    query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                    dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekOrg());
                }
                else {
                    query.append(" AND (ORGDAYOPR IS NULL ) ");
                }

                if (bookingFlightDetailVO.getDayOfWeekViaPt()!=null
                        && bookingFlightDetailVO.getDayOfWeekViaPt().trim().length() > 0) {
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append(" AND ((VIADAYOPR LIKE ?) ");
                    if(bookingFlightDetailVO.getDateOrigin() != null){
                        query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    }
                    query.append(" OR (VIADAYOPR IS NULL))  AND ((INSTR(VIAARPCODINC,?)>0 OR INSTR(VIAARPCODEXC , ?) = 0 )  ");
                    if(airportGrp!=null){
                        query.append("OR (pkg_frmwrk.Fun_String_Check(VIAARPGRPINC,?,',')>0 OR pkg_frmwrk.Fun_String_Check(VIAARPGRPEXC , ?,',') = 0 ) ");
                    }
                    if(country!=null){
                        query.append("OR (INSTR(VIACNTCODINC,?)>0 OR INSTR(VIACNTCODEXC , ?) = 0 ) ");
                    }
                    if(countryGrp!=null){
                        query.append("OR (pkg_frmwrk.Fun_String_Check(VIACNTGRPINC,?,',')>0 OR pkg_frmwrk.Fun_String_Check(VIACNTGRPEXC , ?,',') = 0 ) ");
                    }
                    query.append("  OR ( (VIAARPCODINC IS NULL OR VIAARPCODINC ='-') AND  (VIACNTCODINC IS NULL OR VIACNTCODINC ='-') AND (VIAARPGRPINC IS NULL OR VIAARPGRPINC='-')  AND (VIACNTGRPINC IS NULL OR VIACNTGRPINC = '-') ) ");
                    query.append(")");
                    query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekViaPt() + '%');
                    if(bookingFlightDetailVO.getDateOrigin() != null){
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin());
                    }
                    //	query.append("OR (pkg_frmwrk.Fun_String_Check(VIAARPGRPINC,?,',')>0 OR pkg_frmwrk.Fun_String_Check(VIAARPGRPEXC , ?,',') = 0 ) ");
                    //	query.append("OR (pkg_frmwrk.Fun_String_Check(VIACNTGRPINC,?,',')>0 OR pkg_frmwrk.Fun_String_Check(VIACNTGRPEXC , ?,',') = 0 ) ");
                    query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
                    query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                    dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekViaPt());
                }
                else {
                    query.append(" AND (VIADAYOPR IS NULL ) ");
                }
                if (bookingFlightDetailVO.getDayOfWeekDst()!=null
                        && bookingFlightDetailVO.getDayOfWeekDst().trim().length() > 0) {
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append(" AND ((DSTDAYOPR LIKE ?) ");
                    if(bookingFlightDetailVO.getDateDestination() != null){
                        query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    }
                    query.append(" OR (DSTDAYOPR IS NULL)) ");
                    query.append(" AND ((INSTR(DSTARPCODINC,?)>0 OR INSTR(DSTARPCODEXC , ?) = 0 )  ");
                    if(airportGrp!=null){
                        query.append("OR (pkg_frmwrk.Fun_String_Check(DSTARPGRPINC,?,',')>0 OR pkg_frmwrk.Fun_String_Check(DSTARPGRPEXC , ?,',') = 0 ) ");
                    }
                    if(country!=null){
                        query.append("OR (INSTR(DSTCNTCODINC,?)>0 OR INSTR(DSTCNTCODEXC , ?) = 0 ) ");
                    }
                    if(countryGrp!=null){
                        query.append("OR (pkg_frmwrk.Fun_String_Check(DSTCNTGRPINC,?,',')>0 OR pkg_frmwrk.Fun_String_Check(DSTCNTGRPEXC , ?,',') = 0 ) ");
                    }
                    query.append("  OR ( (DSTARPCODINC IS NULL OR DSTARPCODINC ='-') AND  (DSTCNTCODINC IS NULL OR DSTCNTCODINC ='-') AND (DSTARPGRPINC IS NULL OR DSTARPGRPINC='-')  AND (DSTCNTGRPINC IS NULL OR DSTCNTGRPINC = '-') ) ");
                    query.append(")");
                    query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekDst() + '%');
                    if(bookingFlightDetailVO.getDateDestination() != null){
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination());
                    }
                    query.setParameter(++parcount, bookingFlightDetailVO.getDestination() );
                    query.setParameter(++parcount,bookingFlightDetailVO.getDestination());
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                    dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekDst());
                }
                else {
                    query.append(" AND (DSTDAYOPR IS NULL ) ");
                }
                if (dayOfWeeks.size() > 0) {
                    //For applicable on all
                    query.append(" AND(");
                    counter = 0;
                    for (String dayOfWeek : dayOfWeeks) {
                        if (counter != 0) {
                            query.append(" AND ");
                        }
                        query.append(" (( ALLDAYOPR LIKE ? ) ");
                        query.append(" OR (ALLDAYOPR IS NULL)) ");
                        query.setParameter(++parcount,'%' + dayOfWeek + '%');
                        ++counter;
                    }
                    query.append(" ) ");
                    //For applicable on any
                    query.append(" AND(");
                    counter = 0;
                    for (String dayOfWeek : dayOfWeeks) {
                        if (counter != 0) {
                            query.append(" OR ");
                        }
                        query.append(" (( ANYDAYOPR LIKE ? ) ");
                        query.append(" OR (ANYDAYOPR IS NULL)) ");
                        query.setParameter(++parcount,'%' + dayOfWeek + '%');
                        ++counter;
                    }
                    query.append(" ) ");
                }
                //SEGMENT SECTION STRTS
                if (bookingFlightDetailVO.getOrigin()!= null
                        && bookingFlightDetailVO.getOrigin().trim().length() > 0 ) {
                    query.append("  AND (");
                    String orgairportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
                    String orgcountry= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
                    String orgcountryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append("   ( (");
                    if(bookingFlightDetailVO.getOrigin()!= null && bookingFlightDetailVO.getOrigin().trim().length() >0 ){
                        query.append(" (pkg_frmwrk.Fun_String_Check(?,SEGORGARPCODINC,',') >0  OR SEGORGARPCODINC ='-') ");
                        query.setParameter(++parcount, bookingFlightDetailVO.getOrigin());
                    }
                    if(orgairportGrp != null && orgairportGrp.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGORGARPGRPINC,',')  >0 OR SEGORGARPGRPINC   ='-') ");
                        query.setParameter(++parcount, orgairportGrp);
                    }
                    if(orgcountry != null && orgcountry.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGORGCNTCODINC,',')  >0 OR SEGORGCNTCODINC   ='-') ");
                        query.setParameter(++parcount, orgcountry);
                    }
                    if(orgcountryGrp != null && orgcountryGrp.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGORGCNTGRPINC,',')  >0 OR SEGORGCNTGRPINC   ='-') ");
                        query.setParameter(++parcount, orgcountryGrp);
                    }
                    //org exclude
                    query.append(" ) AND NOT ( ");
                    if(bookingFlightDetailVO.getOrigin() != null && bookingFlightDetailVO.getOrigin().trim().length() >0 ){
                        query.append(" pkg_frmwrk.Fun_String_Check(?,SEGORGARPCODEXC,',')>0 ");
                        query.setParameter(++parcount, bookingFlightDetailVO.getOrigin());
                    }
                    if(orgairportGrp != null && orgairportGrp.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGORGARPGRPEXC,',')      >0 ");
                        query.setParameter(++parcount, orgairportGrp);
                    }
                    if(orgcountry != null && orgcountry.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGORGCNTCODEXC,',')        >0 ");
                        query.setParameter(++parcount, orgcountry);
                    }
                    if(orgcountryGrp != null && orgcountryGrp.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGORGCNTGRPEXC,',')      >0 ");
                        query.setParameter(++parcount, orgcountryGrp);
                    }
                    query.append(" ) ");
                    query.append(" ) ");
                } else {
                    query.append("  AND ( (SEGORGARPCODINC IS NULL OR SEGORGARPCODINC ='-') AND  (SEGORGCNTCODINC IS NULL OR SEGORGCNTCODINC ='-') AND (SEGORGARPGRPINC IS NULL OR SEGORGARPGRPINC='-')  AND (SEGORGCNTGRPINC IS NULL OR SEGORGCNTGRPINC = '-') ) ");
                }
                //segment destination
                if (bookingFlightDetailVO.getDestination()!= null
                        && bookingFlightDetailVO.getDestination().trim().length() > 0 ) {
                    String dstairportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
                    String dstcountry= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
                    String dstcountryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append("  AND ( (");
                    if(bookingFlightDetailVO.getDestination()!= null && bookingFlightDetailVO.getDestination().trim().length() >0 ){
                        query.append(" (pkg_frmwrk.Fun_String_Check(?,SEGDSTARPCODINC,',') >0  OR SEGDSTARPCODINC ='-') ");
                        query.setParameter(++parcount, bookingFlightDetailVO.getDestination());
                    }
                    if(dstairportGrp != null && dstairportGrp.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGDSTARPGRPINC,',')  >0 OR SEGDSTARPGRPINC   ='-') ");
                        query.setParameter(++parcount, dstairportGrp);
                    }
                    if(dstcountry != null && dstcountry.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGDSTCNTCODINC,',')  >0 OR SEGDSTCNTCODINC   ='-') ");
                        query.setParameter(++parcount, dstcountry);
                    }
                    if(dstcountryGrp != null && dstcountryGrp.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGDSTCNTGRPINC,',')  >0 OR SEGDSTCNTGRPINC   ='-') ");
                        query.setParameter(++parcount, dstcountryGrp);
                    }
                    //org exclude
                    query.append(" ) AND NOT ( ");
                    if(bookingFlightDetailVO.getDestination() != null && bookingFlightDetailVO.getDestination().trim().length() >0 ){
                        query.append(" pkg_frmwrk.Fun_String_Check(?,SEGDSTARPCODEXC,',')>0 ");
                        query.setParameter(++parcount, bookingFlightDetailVO.getDestination());
                    }
                    if(dstairportGrp != null && dstairportGrp.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGDSTARPGRPEXC,',')      >0 ");
                        query.setParameter(++parcount, dstairportGrp);
                    }
                    if(dstcountry != null && dstcountry.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGDSTCNTCODEXC,',')        >0 ");
                        query.setParameter(++parcount, dstcountry);
                    }
                    if(dstcountryGrp != null && dstcountryGrp.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGDSTCNTGRPEXC,',')      >0 ");
                        query.setParameter(++parcount, dstcountryGrp);
                    }
                    query.append(" ) ");
                    query.append(" ) ");
                } else {
                    query.append("  AND ( (SEGDSTARPCODINC IS NULL OR SEGDSTARPCODINC ='-') AND  (SEGDSTCNTCODINC IS NULL OR SEGDSTCNTCODINC ='-') AND (SEGDSTARPGRPINC IS NULL OR SEGDSTARPGRPINC='-')  AND (SEGDSTCNTGRPINC IS NULL OR SEGDSTCNTGRPINC = '-') ) ");
                }
                if (bookingFlightDetailVO.getFlightNumber()!= null
                        && bookingFlightDetailVO.getFlightNumber().trim().length() > 0){
                    query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMSEGEXC,',')) ");
                    query.append(" OR (FLTNUMSEGINC IS NULL AND FLTNUMSEGEXC IS NULL) ");
                    query.append(" OR (FLTNUMSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMSEGEXC,',')) )");
                    //Added by A-7364 as part of ICRD-313291
                    String flightNumber = bookingFlightDetailVO.getFlightCarrierCode() + "~" +
                            bookingFlightDetailVO.getFlightNumber();
                    query.setParameter(++parcount, flightNumber);
                    query.setParameter(++parcount, flightNumber);
                    query.setParameter(++parcount, flightNumber);
                    query.setParameter(++parcount, flightNumber);
                    query.setParameter(++parcount, flightNumber);
                }
                else {
                    query.append(" AND (FLTNUMSEGINC IS NULL AND FLTNUMSEGEXC IS NULL) ");
                }
                boolean arrivalmarked = false;
                boolean departuremarked = false;
                if (bookingFlightDetailVO.getDateDestination() != null) {
                    arrivalmarked =true;
                    query.append(" AND ((SEGDSTDAYOPR IS NOT NULL) AND (pkg_frmwrk.Fun_String_Check(?,SEGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SEGDATEXC,',')) ");
                    query.append(" OR (SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
                    query.append(" OR (SEGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SEGDATEXC,',')) OR (SEGDSTDAYOPR IS NULL))  ");
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
                }
                if (bookingFlightDetailVO.getDateOrigin() != null) {
                    departuremarked=true;
                    query.append(" AND ((SEGORGDAYOPR IS NOT NULL) AND (pkg_frmwrk.Fun_String_Check(?,SEGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SEGDATEXC,',')) ");
                    query.append(" OR (SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
                    query.append(" OR (SEGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SEGDATEXC,',')) OR (SEGORGDAYOPR IS NULL))");
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                    query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
                }
                if (bookingFlightDetailVO.getDateViaPoint() != null || bookingFlightDetailVO.getArrivalTimeAtDestination() != null) {
                    if(bookingFlightDetailVO.getDateViaPoint() != null && !departuremarked){
                        query.append(" AND ((SEGORGDAYOPR IS NOT NULL) AND (pkg_frmwrk.Fun_String_Check(?,SEGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SEGDATEXC,',')) ");
                        query.append(" OR (SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
                        query.append(" OR (SEGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SEGDATEXC,',')) OR (SEGORGDAYOPR IS NULL))");
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                    }
                    if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null &&!arrivalmarked){
                        query.append(" AND ((SEGDSTDAYOPR IS NOT NULL) AND (pkg_frmwrk.Fun_String_Check(?,SEGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SEGDATEXC,',')) ");
                        query.append(" OR (SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
                        query.append(" OR (SEGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SEGDATEXC,',')) OR SEGDSTDAYOPR IS NULL)");
                        query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
                        query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
                        query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
                        query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
                        query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
                    }
                }
                arrivalmarked=false;
                departuremarked=false;
                if (bookingFlightDetailVO.getTimeOrigin() != null) {
                    departuremarked=true;

                    // case 1: eq
                    query.append(AND_QUERY);
                    query.append(" (SEGORGDAYOPR IS NOT NULL) AND (TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                    // case 2
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL))");
                    // case 3
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL))");
                    // case 4
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') )) ");
                    query.append("  OR(SEGSTRTIM is  NULL AND SEGENDTIM is NULL) )) OR (SEGORGDAYOPR IS NULL) )");
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
                }
                if(bookingFlightDetailVO.getTimeDestination() != null){
                    arrivalmarked=true;
                    // case 1: eq
                    query.append(AND_QUERY);
                    query.append("(SEGDSTDAYOPR IS NOT NULL) AND (TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                    // case 2
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL))");
                    // case 3
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL))");
                    // case 4
                    query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                    query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') )) ");
                    query.append("  OR(SEGSTRTIM is  NULL AND SEGENDTIM is NULL) )) OR (SEGDSTDAYOPR IS NULL))");
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
                    //times.add(bookingFlightDetailVO.getTimeDestination());
                }
                if(bookingFlightDetailVO.getTimeViaPoint() != null || bookingFlightDetailVO.getArrivalTimeAtDestination()!=null) {
                    // case 1: eq
                    if(bookingFlightDetailVO.getTimeViaPoint() != null && !departuremarked){
                        query.append(AND_QUERY);
                        query.append(" (SEGORGDAYOPR IS NOT NULL) AND (TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                        // case 2
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL))");
                        // case 3
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL))");
                        // case 4
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') )) ");
                        query.append("  OR(SEGSTRTIM is  NULL AND SEGENDTIM is NULL) ))OR (SEGORGDAYOPR IS NULL))");
                        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
                    }
                    if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null && !arrivalmarked){
                        query.append(AND_QUERY);
                        query.append(" (SEGDSTDAYOPR IS NOT NULL) AND (TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                        // case 2
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL))");
                        // case 3
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL))");
                        // case 4
                        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') )) ");
                        query.append("  OR(SEGSTRTIM is  NULL AND SEGENDTIM is NULL) ))OR (SEGDSTDAYOPR IS NULL))");
                        query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
                        query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
                        query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
                        query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
                        query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
                        query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
                    }
                    //times.add(bookingFlightDetailVO.getTimeViaPoint());
                }
                arrivalmarked=false;
                departuremarked=false;
                if (bookingFlightDetailVO.getFlightCarrierCode() != null
                        && bookingFlightDetailVO.getFlightCarrierCode().trim().length() > 0) {
                    query.append(" AND ");
                    query.append(" ((pkg_frmwrk.Fun_String_Check(?,CARRSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRSEGEXC,',')) ");
                    query.append(" OR (CARRSEGINC IS NULL AND CARRSEGEXC IS NULL) ");
                    query.append(" OR (CARRSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRSEGEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
                    //carrierCodes.add(bookingFlightDetailVO.getCarrierDestination());
                }
                else {
                    query.append(" AND (CARRSEGINC IS NULL AND CARRSEGEXC IS NULL) ");
                }
                if (bookingFlightDetailVO.getFlightType() != null
                        && bookingFlightDetailVO.getFlightType().trim().length() > 0) {
                    query.append(" AND ");
                    query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTTYPSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPSEGEXC,',')) ");
                    query.append(" OR (FLTTYPSEGINC IS NULL AND FLTTYPSEGEXC IS NULL) ");
                    query.append(" OR (FLTTYPSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPSEGEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                    //carrierCodes.add(bookingFlightDetailVO.getCarrierDestination());
                }
                else {
                    query.append(" AND (FLTTYPSEGINC IS NULL AND FLTTYPSEGEXC IS NULL) ");
                }
                if (bookingFlightDetailVO.getFlightOwner() != null
                        && bookingFlightDetailVO.getFlightOwner().trim().length() > 0) {
                    query.append(" AND ");
                    query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTOWRSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRSEGEXC,',')) ");
                    query.append(" OR (FLTOWRSEGINC IS NULL AND FLTOWRSEGEXC IS NULL) ");
                    query.append(" OR (FLTOWRSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRSEGEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
                    //carrierCodes.add(bookingFlightDetailVO.getCarrierDestination());
                }
                else {
                    query.append(" AND (FLTOWRSEGINC IS NULL AND FLTOWRSEGEXC IS NULL) ");
                }
                String airinegroup= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getFlightCarrierCode(),ShipmentDetailsVO.AIRLINE_GRP);
                if (airinegroup != null
                        && airinegroup.trim().length() > 0) {
                    query.append(" AND ");
                    query.append(" ((pkg_frmwrk.Fun_String_Check(?,ARLGRPSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPSEGEXC,',')) ");
                    query.append(" OR (ARLGRPSEGINC IS NULL AND ARLGRPSEGEXC IS NULL) ");
                    query.append(" OR (ARLGRPSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPSEGEXC,',')) )");
                    query.setParameter(++parcount, airinegroup);
                    query.setParameter(++parcount, airinegroup);
                    query.setParameter(++parcount, airinegroup);
                    query.setParameter(++parcount, airinegroup);
                    query.setParameter(++parcount, airinegroup);
                    //carrierCodes.add(bookingFlightDetailVO.getCarrierDestination());
                }
                else {
                    query.append(" AND (ARLGRPSEGINC IS NULL AND ARLGRPSEGEXC IS NULL) ");
                }
                if (bookingFlightDetailVO.getDayOfWeekOrg()!=null
                        && bookingFlightDetailVO.getDayOfWeekOrg().trim().length() > 0) {
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
                    departuremarked=true;
                    query.append(SEGORGDAYOPR_QUERY);
                    if(bookingFlightDetailVO.getDateOrigin() != null){
                        query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    }
                    query.append(" OR (SEGORGDAYOPR IS NULL)) AND ((INSTR(SEGORGARPCODINC,?)>0 OR INSTR(SEGORGARPCODEXC , ?) = 0 ) ");
                    if(airportGrp!=null){
                        query.append(INSTR_SEGORGARPGRPINC_QUERY);
                    }
                    if(country!=null){
                        query.append(INSTR_SEGORGCNTCODINC_QUERY);
                    }
                    if(countryGrp!=null){
                        query.append(INSTR_SEGORGCNTGRPINC_QUERY);
                    }
                    query.append(SEGORGARPCODINC_QUERY);
                    query.append(")");
                    query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekOrg() + '%');
                    if(bookingFlightDetailVO.getDateOrigin() != null){
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin());
                    }
                    query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
                    query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                    //dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekOrg());
                }
                if (bookingFlightDetailVO.getDayOfWeekDst()!=null
                        && bookingFlightDetailVO.getDayOfWeekDst().trim().length() > 0) {
                    arrivalmarked=true;
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append(AND_SEGDSTDAYOPR_QUERY);
                    if(bookingFlightDetailVO.getDateDestination() != null){
                        query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    }
                    query.append(SEGDSTDAYOPR_QUERY);
                    query.append(" AND ((INSTR(SEGDSTARPCODINC,?)>0 OR INSTR(SEGDSTARPCODEXC , ?) = 0 )  ");
                    if(airportGrp!=null){
                        query.append(INSTR_SEGDSTARPGRPINC_QUERY);
                    }
                    if(country!=null){
                        query.append(INSTR_SEGDSTCNTCODINC_QUERY);
                    }
                    if(countryGrp!=null){
                        query.append(INSTR_SEGDSTCNTGRPINC_QUERY);
                    }
                    query.append(SEGDSTARPCODINC_QUERY);
                    query.append(")");
                    query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekDst() + '%');
                    if(bookingFlightDetailVO.getDateDestination() != null){
                        query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination());
                    }
                    query.setParameter(++parcount, bookingFlightDetailVO.getDestination() );
                    query.setParameter(++parcount,bookingFlightDetailVO.getDestination());
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                    //dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekDst());
                }
                if (!arrivalmarked && (bookingFlightDetailVO.getArrivalTimeAtDestination()!=null || bookingFlightDetailVO.getFlightDate()!=null)) {
                    String dowdst  = String.valueOf(bookingFlightDetailVO
                            .getArrivalTimeAtDestination()!=null?bookingFlightDetailVO
                            .getArrivalTimeAtDestination().get(
                                    Calendar.DAY_OF_WEEK) - 1:bookingFlightDetailVO
                            .getFlightDate().get(
                                    Calendar.DAY_OF_WEEK) - 1);
                    if("0".equals(dowdst)){
                        dowdst="7";
                    }
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append(AND_SEGDSTDAYOPR_QUERY);
                    if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null){
                        query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    }
                    query.append(SEGDSTDAYOPR_QUERY);
                    query.append(" AND ((INSTR(SEGDSTARPCODINC,?)>0 OR INSTR(SEGDSTARPCODEXC , ?) = 0 )  ");
                    if(airportGrp!=null){
                        query.append(INSTR_SEGDSTARPGRPINC_QUERY);
                    }
                    if(country!=null){
                        query.append(INSTR_SEGDSTCNTCODINC_QUERY);
                    }
                    if(countryGrp!=null){
                        query.append(INSTR_SEGDSTCNTGRPINC_QUERY);
                    }
                    query.append(SEGDSTARPCODINC_QUERY);
                    query.append(")");
                    query.setParameter(++parcount,'%' + dowdst + '%');
                    if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null){
                        query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat());
                    }
                    query.setParameter(++parcount, bookingFlightDetailVO.getDestination() );
                    query.setParameter(++parcount,bookingFlightDetailVO.getDestination());
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                    //dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekDst());
                }
                arrivalmarked=false;
                if (!departuremarked && (bookingFlightDetailVO.getDepartureTimeAtOrigin()!=null || bookingFlightDetailVO.getFlightDate()!=null)) {
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
                    String dowdep  = String.valueOf(bookingFlightDetailVO
                            .getDepartureTimeAtOrigin()!=null?bookingFlightDetailVO
                            .getDepartureTimeAtOrigin().get(
                                    Calendar.DAY_OF_WEEK) - 1:bookingFlightDetailVO
                            .getFlightDate().get(
                                    Calendar.DAY_OF_WEEK) - 1);
                    if("0".equals(dowdep)){
                        dowdep="7";
                    }
                    query.append(SEGORGDAYOPR_QUERY);
                    if(bookingFlightDetailVO.getDepartureTimeAtOrigin() != null){
                        query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    }
                    query.append(" OR (SEGORGDAYOPR IS NULL)) AND ((INSTR(SEGORGARPCODINC,?)>0 OR INSTR(SEGORGARPCODEXC , ?) = 0 ) ");
                    if(airportGrp!=null){
                        query.append(INSTR_SEGORGARPGRPINC_QUERY);
                    }
                    if(country!=null){
                        query.append(INSTR_SEGORGCNTCODINC_QUERY);
                    }
                    if(countryGrp!=null){
                        query.append(INSTR_SEGORGCNTGRPINC_QUERY);
                    }
                    query.append(SEGORGARPCODINC_QUERY);
                    query.append(")");
                    query.setParameter(++parcount,'%' + dowdep + '%');
                    if(bookingFlightDetailVO.getDepartureTimeAtOrigin() != null){
                        query.setParameter(++parcount, bookingFlightDetailVO.getDepartureTimeAtOrigin().toDisplayDateOnlyFormat());
                    }
                    query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
                    query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                    //dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekOrg());
                }
                departuremarked=true;
                query.append("  )");
                //SEGMENT SECTION ENDS
                if (bookingFlightDetailVO.getFlightNumberOrigin() != null
                        && bookingFlightDetailVO.getFlightNumberOrigin().trim().length() > 0) {
                    query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMORGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMORGEXC,',')) ");
                    query.append(" OR (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL) ");
                    query.append(" OR (FLTNUMORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMORGEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());


                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
                    flightnumbers.add(bookingFlightDetailVO.getFlightNumberOrigin());
                }
                else {
                    query.append(" AND (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL) ");
                }
                if (bookingFlightDetailVO.getFlightNumberDestination() != null
                        && bookingFlightDetailVO.getFlightNumberDestination().trim().length() > 0) {

                    query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMDSTINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMDSTEXC,',')) ");
                    query.append(" OR (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL) ");
                    query.append(" OR (FLTNUMDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMDSTEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
                    flightnumbers.add(bookingFlightDetailVO.getFlightNumberDestination());
                }



                else {
                    query.append(" AND (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL) ");
                }
                if (bookingFlightDetailVO.getFlightNumberViaPoint() != null
                        && bookingFlightDetailVO.getFlightNumberViaPoint().trim().length() > 0) {
                    query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,',')) ");
                    query.append(" OR (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL) ");
                    query.append(" OR (FLTNUMVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
                    flightnumbers.add(bookingFlightDetailVO.getFlightNumberViaPoint());
                }
                else {
                    query.append(" AND (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL) ");
                }
                if (flightnumbers.size() > 0) {
                    //For applicable on all
                    query.append(" AND(");
                    counter = 0;
                    for (String flightnumber : flightnumbers) {
                        if (counter != 0) {
                            query.append(" AND ");
                        }
                        query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTNUMALLINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMALLEXC,',')) ");
                        query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
                        query.append(" OR (FLTNUMALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMALLEXC,',')) )");
                        query.setParameter(++parcount, flightnumber);
                        query.setParameter(++parcount, flightnumber);
                        query.setParameter(++parcount, flightnumber);
                        query.setParameter(++parcount, flightnumber);
                        query.setParameter(++parcount, flightnumber);


                        ++counter;
                    }
                    query.append(" ) ");
                    //For applicable on any
                    query.append(" AND(");
                    counter = 0;
                    for (String flightnumber : flightnumbers) {
                        if (counter != 0) {
                            query.append(" OR ");
                        }
                        query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTNUMANYINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMANYEXC,',')) ");
                        query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
                        query.append(" OR (FLTNUMANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMANYEXC,',')) )");
                        query.setParameter(++parcount, flightnumber);
                        query.setParameter(++parcount, flightnumber);
                        query.setParameter(++parcount, flightnumber);
                        query.setParameter(++parcount, flightnumber);
                        query.setParameter(++parcount, flightnumber);
                        ++counter;
                    }
                    query.append(" ) ");
                }
                //Added as part of IASCB-36835 starts
                query.append(" AND( ");
                query.append(" (to_date(?,'DD-MON-YYYY') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                query.setParameter(++parcount,
                        bookingFlightDetailVO.getDepartureTimeAtOrigin()!=null?
                                bookingFlightDetailVO.getDepartureTimeAtOrigin().toDisplayDateOnlyFormat():bookingFlightDetailVO.getFlightDate().toDisplayDateOnlyFormat());
                query.append(" OR (to_date(?,'DD-MON-YYYY') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                query.setParameter(++parcount,
                        bookingFlightDetailVO.getArrivalTimeAtDestination()!=null?
                                bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat():bookingFlightDetailVO.getFlightDate().toDisplayDateOnlyFormat());
                query.append(" ) ");
                //Added as part of IASCB-36835 ends
                flightCounter++;
                query.append( " )");

            }
            query.append( " )");
        } else {
            //if no booking exists then there is no chance of multilpe dayof week at origin . So first element can be taken.
            //Also the same need to be checked against Origin
            if(shipmentVO.getDayOfWeekOrg() !=null && shipmentVO.getDayOfWeekOrg().size() >0){
                query.append(" AND( ((ORGDAYOPR LIKE ?) ");
                query.append(" OR (ORGDAYOPR IS NULL)) ");
                query.append(" AND (DSTDAYOPR IS NULL)");
                query.append(" AND (SEGDSTDAYOPR IS NULL)");
                query.append(" AND (SEGORGDAYOPR IS NULL)");
                query.append(" AND (VIADAYOPR IS NULL))");
                query.setParameter(++parcount,'%' + shipmentVO.getDayOfWeekOrg().iterator().next() + '%');
            } else if (shipmentVO.getDayOfWeekViaPt() !=null && shipmentVO.getDayOfWeekViaPt().size() >0) {
                query.append(" AND( ((VIADAYOPR LIKE ?) ");
                query.append(" OR (VIADAYOPR IS NULL)) ");
                query.append(" AND (DSTDAYOPR IS NULL)");
                query.append(" AND (ORGDAYOPR IS NULL))");
                query.setParameter(++parcount,'%' + shipmentVO.getDayOfWeekViaPt().iterator().next() + '%');
            } else {
                query.append(" AND (ORGDAYOPR IS NULL ) ");
            }
            if(shipmentVO.getApplicableTransaction() != null && shipmentVO.getApplicableTransaction().trim().length() > 0 && APP_TRANSACTION_HAWB.equals(shipmentVO.getApplicableTransaction())){
                query.append("	AND ORGSTRTIM is  NULL AND ORGENDTIM is NULL ");
                query.append("	AND DSTSTRTIM is  NULL AND DSTENDTIM is NULL ");
                query.append("	AND VIASTRTIM is  NULL AND VIAENDTIM is NULL ");
                query.append("	AND ALLSTRTIM is  NULL AND ALLENDTIM is NULL ");
                query.append("	AND ANYSTRTIM is  NULL AND ANYENDTIM is NULL ");
                query.append("	AND SEGSTRTIM is  NULL AND SEGENDTIM is NULL ");
            } else if (shipmentVO.getDayOfWeekViaPt() !=null && shipmentVO.getDayOfWeekViaPt().size() >0) {
                query.append(" AND( ((VIADAYOPR LIKE ?) ");
                query.append(" OR (VIADAYOPR IS NULL)) ");
                query.append(" AND (DSTDAYOPR IS NULL)");
                query.append(" AND (ORGDAYOPR IS NULL))");
                query.setParameter(++parcount,'%' + shipmentVO.getDayOfWeekViaPt().iterator().next() + '%');
            } else {
            }
        }
        query.append("	AND RULTYP='E' ");
        //Added By A-7533 regaridng ICRD-243965
        if(shipmentVO.isFromPrecheck()){
            query.append("	AND CMPTYP='EMB' ");
        }

        query.append("	AND RECSTA='A' ");
        query.append("	AND SUSFLG<>'Y' ");
        if(shipmentVO.getApplicableTransaction() != null && shipmentVO.getApplicableTransaction().trim().length() > 0){
            query.append(" AND (pkg_frmwrk.Fun_String_Check(?,APPTXN,',') >0) ");

            query.setParameter(++parcount, shipmentVO.getApplicableTransaction() );
        }
        if (shipmentVO.getEmbargoLevel() != null &&
                shipmentVO.getEmbargoLevel().trim().length() > 0) {
            query.append(" AND (pkg_frmwrk.Fun_String_Check(?,RECTYP,',') >0) ");
            query.setParameter(++parcount, shipmentVO.getEmbargoLevel() );
        }
        if (TILDE.equals(shipmentVO.getSplitIndicator())) {
            query.append(" AND (SLTIND IS NULL) ");
        } else {
            query.append(" AND COALESCE(SLTIND,'Y')='Y' ");
        }
      //added by 202766 for IASCB-159851
        if (TILDE.equals(shipmentVO.getUnknownShipper()))
        {
        	query.append(UNKSHP_NULL_QUERY);
        }
        else {
           query.append(UNKSHP_QUERY);  
           query.setParameter(++parcount, shipmentVO.getUnknownShipper());
           query.setParameter(++parcount, shipmentVO.getUnknownShipper());
           }
        //ended
        query.append(" ORDER BY CASE WHEN RECTYP = 'E' THEN 1 WHEN RECTYP = 'W' THEN 2 WHEN RECTYP = 'I' " +
                " THEN 3 ELSE 4 END ,LSTUPDTIM DESC ");

        log.exiting("EmbargoRulesSqlDAO", "constructFilterQuery");
    }

    /**
     *
     * @param typeMap
     * @param typeCode
     * @param type
     * @return
     * typeMap-Map used for storing a code plus its possible types Eg: OriginCode "-" It's Airport group, Country, CountryGroup
     * Eg: key:TRV-ARPGRP value:INDIAGRP, key:TRV-CNT value:IN, key:TRV-CNTGRP value:ASGRP
     */
    private String getTypeValue(Map<String, String> typeMap, String typeCode,
                                String type) {
        String typeValue = null;
        StringBuilder key = new StringBuilder().append(typeCode).append(HYPHEN_SEPERATOR).append(type);
        return typeMap.get(key.toString());
    }
    /**
     * This method identifies all Cool Frozen embargos associated with the given shipment.
     *
     * @param shipmentDetailsVOs the shipment details v os
     * @return Collection<ShipmentDetailsVO>
     * @throws PersistenceException the persistence exception
     * @throws SystemException the system exception
     */
    public Collection<EmbargoDetailsVO> checkForCoolFrozenEmbargo(
            Collection<ShipmentDetailsVO> shipmentDetailsVOs)
            throws PersistenceException, SystemException {
        int coolFrozenEmbargoCheck = 0;
        List<EmbargoDetailsVO> embargoDetailsList= new ArrayList<EmbargoDetailsVO>();
        log.log(Log.FINE,"checkForCoolFrozenEmbargo========== -->");

        for(ShipmentDetailsVO shipmentVO:shipmentDetailsVOs){
            if(coolFrozenEmbargoCheck == 0){
                if((shipmentVO.getBkgDstStation()!=null
                        && shipmentVO.getBkgDstStation().length()>0
                        && shipmentVO.getBkgOrgStation() !=null
                        && shipmentVO.getBkgOrgStation().length()>0
                        && "Y".equalsIgnoreCase(shipmentVO.getCcShipment()))) {

                    Query queryOne = getQueryManager().createNamedNativeQuery(
                            SHARED_EMBARGO_CHECKEMBARGOSFORCOOLFROZEN);
                    if (shipmentVO.getMap() == null
                            || shipmentVO.getMap().size() < 1) {
                        return null;
                    }
                    queryOne.setParameter(1, shipmentVO.getCompanyCode());
                    int parCount = 1;
                    log.log(Log.FINE,
                            "checkForCoolFrozenEmbargo=sqodao======ccEmbargo check=== -->");

                    queryOne.append("AND MST.CCFLG = ? ");
                    queryOne.setParameter(++parCount, shipmentVO.getCcShipment());

                    StringBuffer parameters = new StringBuffer();
                    parameters.append(" AND ( MST.EMBORG  IN ( ");
                    Collection<String> airportsCollection= new ArrayList<String>();
                    airportsCollection.add(shipmentVO.getBkgOrgStation());
                    airportsCollection.add(shipmentVO.getBkgDstStation());
                    log.log(Log.FINE, "========airportsCollection=========",
                            airportsCollection);
                    int count = 1;
                    for(String dstParameter : airportsCollection) {
                        log.log(Log.FINE, "parameter -->", dstParameter);
                        if(count==1){
                            parameters.append("'").append(shipmentVO.getBkgOrgStation().trim()).append("'");
                        }
                        //else {
                        //parameters.append(",'").append(dstParameter.trim()).append("'");
                        //}
                        count++;
                    }
                    parameters.append(") ");
                    parameters.append(" OR MST.EMBDST IN ( ");
                    count = 1;
                    for(String dstParameter : airportsCollection) {
                        log.log(Log.FINE, "parameter -->", dstParameter);
                        if(count==1){
                            parameters.append("'").append(shipmentVO.getBkgDstStation().trim()).append("'");
                        }
                        //else {
                        //parameters.append(",'").append(dstParameter.trim()).append("'");
                        //}
                        count++;
                    }
                    parameters.append(") )");
                    queryOne.append(parameters.toString());
                    if(shipmentVO.getShipmentDate() != null) {
                        queryOne.append("AND ((? BETWEEN MST.STRDAT AND MST.ENDDAT )").
                                append("OR (? >= MST.STRDAT AND MST.ENDDAT IS NULL) ) ");
                        queryOne.setParameter(++parCount,
                                shipmentVO.getShipmentDate().toSqlDate());
                        queryOne.setParameter(++parCount,
                                shipmentVO.getShipmentDate().toSqlDate());
                    }
                    log.log(Log.FINE,
                            "checkForCoolFrozenEmbargo=sqodao====query==CC Embargo=== -->",
                            queryOne);
                    coolFrozenEmbargoCheck = 1;
                    List<EmbargoDetailsVO> ccEmbargoDetails = queryOne
                            .getResultList(new CheckCoolFrozenCCEmbargoMapper());

                    if(ccEmbargoDetails !=null && ccEmbargoDetails.size()>0){

                        Collection<String> originDesAirports = new ArrayList<String>();
                        boolean isEmbargoDetailsSet = false;
                        //String parameterValues = "";
                        for(EmbargoDetailsVO embargoDetailsVO:ccEmbargoDetails){

                            populateEmbargoDetails(embargoDetailsVO,
                                    originDesAirports, embargoDetailsList,
                                    isEmbargoDetailsSet);

                            isEmbargoDetailsSet = false;
                        }
                        //embargoDetailsList.addAll(ccEmbargoDetails);
                    }
                }
                if(shipmentVO.getCoolAtAirport()!= null
                        && shipmentVO.getCoolAtAirport().trim().length()>0){
                    Query queryTwo = getQueryManager().createNamedNativeQuery(
                            SHARED_EMBARGO_CHECKEMBARGOSFORCOOLFROZEN);
                    if(shipmentVO.getMap() == null ||shipmentVO.getMap().size()<1) {
                        return null;
                    }
                    queryTwo.setParameter(1, shipmentVO.getCompanyCode());
                    int parCount = 1;

                    queryTwo.append("AND MST.COOLFLG = 'Y' ");

                    StringBuffer parameters = new StringBuffer();
                    parameters.append(" AND ( MST.EMBORG  IN ( ");
                    Collection<String> airportsCollection= new ArrayList<String>();
                    log.log(Log.FINE,"========shipmentVO.getCoolAtAirport()=========",
                            shipmentVO.getCoolAtAirport());

                    String[] coolAtAirports = shipmentVO.getCoolAtAirport().split(",");
                    //log.log(Log.FINE,"========coolAtAirports========="+coolAtAirports);
                    if (coolAtAirports != null) {
                        for( String airport:coolAtAirports){
                            if (airport != null && !"".equals(airport.trim())
                                    && !",".equals(airport.trim())) {
                                airportsCollection.add(airport);
                            }
                        }
                    }

                    log.log(Log.FINE, "========airportsCollection=========",
                            airportsCollection);
                    int count = 1;
                    for(String dstParameter : airportsCollection) {
                        log.log(Log.FINE, "parameter -->", dstParameter);

                        if (count == 1) {
                            parameters.append("'").append(dstParameter.trim())
                                    .append("'");
                        } else {
                            parameters.append(",'").append(dstParameter.trim())
                                    .append("'");
                        }
                        count++;
                    }
                    parameters.append(") ");
                    parameters.append(" OR MST.EMBDST IN ( ");
                    count = 1;
                    for(String dstParameter : airportsCollection) {
                        log
                                .log(
                                        Log.FINE,
                                        "parameter -->",
                                        dstParameter);
                        if(count==1){
                            parameters.append("'").append(dstParameter.trim()).append("'");
                        }
                        else {
                            parameters.append(",'").append(dstParameter.trim()).append("'");
                        }
                        count++;
                    }
                    parameters.append(") )");
                    queryTwo.append(parameters.toString());
                    if(shipmentVO.getShipmentDate() != null) {
                        queryTwo.append("AND ((? BETWEEN MST.STRDAT AND MST.ENDDAT )").
                                append("OR (? >= MST.STRDAT AND MST.ENDDAT IS NULL) ) ");
                        queryTwo.setParameter(++parCount,
                                shipmentVO.getShipmentDate().toSqlDate());
                        queryTwo.setParameter(++parCount,
                                shipmentVO.getShipmentDate().toSqlDate());
                    }
                    log
                            .log(
                                    Log.FINE,
                                    "checkForCoolFrozenEmbargo=sqodao====query==coolEmbargo=== -->",
                                    queryTwo);
                    coolFrozenEmbargoCheck = 1;
                    List<EmbargoDetailsVO> coolEmbargoDetails = queryTwo.getResultList(new CheckCoolFrozenCCEmbargoMapper());

                    if(coolEmbargoDetails !=null && coolEmbargoDetails.size()>0){

                        Collection<String> originDesAirports = new ArrayList<String>();
                        boolean isEmbargoDetailsSet = false;
                        //String parameterValues = "";
                        for(EmbargoDetailsVO embargoDetailsVO:coolEmbargoDetails){

                            populateEmbargoDetails(embargoDetailsVO,
                                    originDesAirports, embargoDetailsList,
                                    isEmbargoDetailsSet);

                            isEmbargoDetailsSet = false;
                        }
                        //embargoDetailsList.addAll(coolEmbargoDetails);
                    }
                }
                if(shipmentVO.getFrozenAtAirport()!= null
                        && shipmentVO.getFrozenAtAirport().trim().length()>0){

                    Query query = getQueryManager().createNamedNativeQuery(
                            SHARED_EMBARGO_CHECKEMBARGOSFORCOOLFROZEN);
                    if(shipmentVO.getMap() == null ||shipmentVO.getMap().size()<1) {
                        return null;
                    }
                    query.setParameter(1, shipmentVO.getCompanyCode());
                    int parCount = 1;

                    query.append("AND MST.FROFLG = 'Y' ");

                    StringBuffer parameters = new StringBuffer();
                    parameters.append(" AND ( MST.EMBORG  IN ( ");

                    log.log(Log.FINE,
                            "========shipmentVO.getFrozenAtAirport()=======",
                            shipmentVO.getFrozenAtAirport());

                    String[] frozenAtAirports = shipmentVO.getFrozenAtAirport().split(",");
                    //												log.log(Log.FINE,"========frozenAtAirports========="+frozenAtAirports);
                    Collection<String> airportsCollection= new ArrayList<String>();
                    if(frozenAtAirports != null){
                        for( String airport:frozenAtAirports){
                            if (airport != null && !"".equals(airport.trim())
                                    && !",".equals(airport.trim())) {
                                airportsCollection.add(airport);
                            }
                        }
                    }

                    int count = 1;
                    for(String dstParameter : airportsCollection) {
                        log.log(Log.FINE,
                                "parameter -->",
                                dstParameter);
                        if(count==1){
                            parameters.append("'").append(dstParameter.trim()).append("'");
                        }
                        else {
                            parameters.append(",'").append(dstParameter.trim()).append("'");
                        }
                        count++;
                    }
                    parameters.append(") ");
                    parameters.append(" OR MST.EMBDST IN ( ");
                    count = 1;
                    for(String dstParameter : airportsCollection) {
                        log
                                .log(
                                        Log.FINE,
                                        "parameter -->",
                                        dstParameter);
                        if(count==1){
                            parameters.append("'").append(dstParameter.trim()).append("'");
                        }
                        else {
                            parameters.append(",'").append(dstParameter.trim()).append("'");
                        }
                        count++;
                    }
                    parameters.append(") )");
                    query.append(parameters.toString());
                    if(shipmentVO.getShipmentDate() != null) {
                        query.append("AND ((? BETWEEN MST.STRDAT AND MST.ENDDAT )").
                                append("OR (? >= MST.STRDAT AND MST.ENDDAT IS NULL) ) ");
                        query.setParameter(++parCount,
                                shipmentVO.getShipmentDate().toSqlDate());
                        query.setParameter(++parCount,
                                shipmentVO.getShipmentDate().toSqlDate());
                    }
                    log.log(Log.FINE,
                            "checkForCoolFrozenEmbargo=sqodao====query==frozenEmbargo=== -->",
                            query);
                    coolFrozenEmbargoCheck = 1;

                    List<EmbargoDetailsVO> frozenEmbargoDetails = query
                            .getResultList(new CheckCoolFrozenCCEmbargoMapper());

                    if(frozenEmbargoDetails !=null && frozenEmbargoDetails.size()>0){

                        Collection<String> originDesAirports = new ArrayList<String>();

                        boolean isEmbargoDetailsSet = false;
                        for(EmbargoDetailsVO embargoDetailsVO:frozenEmbargoDetails){

                            populateEmbargoDetails(embargoDetailsVO,
                                    originDesAirports, embargoDetailsList,
                                    isEmbargoDetailsSet);

                            isEmbargoDetailsSet = false;
                        }
                        //embargoDetailsList.addAll(frozenEmbargoDetails);
                    }
                }
            }
            if(coolFrozenEmbargoCheck ==1){
                break;
            }
        }
        return embargoDetailsList;
    }

    /**
     * Populate embargo details.
     *
     * @param embargoDetailsVO the embargo details vo
     * @param originDesAirports the origin des airports
     * @param embargoDetailsList the embargo details list
     * @param isEmbargoDetailsSet the is embargo details set
     */
    private void populateEmbargoDetails(EmbargoDetailsVO embargoDetailsVO,Collection<String> originDesAirports,
                                        List<EmbargoDetailsVO> embargoDetailsList,boolean isEmbargoDetailsSet) {

        Set<EmbargoParameterVO> newSet = new HashSet<EmbargoParameterVO>();

        if (embargoDetailsVO.getDestination() != null
                && embargoDetailsVO.getDestination().length() > 0
                && !isEmbargoDetailsSet
                && (!originDesAirports.contains(embargoDetailsVO
                .getDestination()) ||
                !originDesAirports.contains(embargoDetailsVO
                        .getEmbargoReferenceNumber()))) {

            originDesAirports.add(embargoDetailsVO.getDestination());
            originDesAirports.add(embargoDetailsVO.getEmbargoReferenceNumber());

            EmbargoParameterVO embargoParameterVO = populateEmbargoParameter(embargoDetailsVO);
            if(embargoDetailsVO.getIsCC() ){
                log.log(Log.FINE, "Inside checkEmbargo======---1===CCEmbargo==");
                embargoParameterVO.setParameterCode("CCEmbargo");

            }else if(embargoDetailsVO.getIsCool() ){
                log.log(Log.FINE, "Inside checkEmbargo======---1===CoolEmbargo==");
                embargoParameterVO.setParameterCode("CoolEmbargo");

            }else if(embargoDetailsVO.getIsFrozen() ){
                log.log(Log.FINE, "Inside checkEmbargo======---1===FrozenEmbargo==");
                embargoParameterVO.setParameterCode("FrozenEmbargo");
            }

            isEmbargoDetailsSet=true;
            newSet.add(embargoParameterVO);
            embargoDetailsVO.setParams(newSet);
            embargoDetailsList.add(embargoDetailsVO);

        }
        if(embargoDetailsVO.getOrigin()!=null
                && embargoDetailsVO.getOrigin().length()>0 && !isEmbargoDetailsSet
                && (!originDesAirports.contains(embargoDetailsVO.getOrigin())
                || !originDesAirports.contains(embargoDetailsVO.getEmbargoReferenceNumber()))) {

            originDesAirports.add(embargoDetailsVO.getOrigin());
            originDesAirports.add(embargoDetailsVO.getEmbargoReferenceNumber());

            EmbargoParameterVO embargoParameterVO = populateEmbargoParameter(embargoDetailsVO);
            if(embargoDetailsVO.getIsCC() ){
                log.log(Log.FINE, "Inside checkEmbargo======---1===CCEmbargo==");
                embargoParameterVO.setParameterCode("CCEmbargo");

            }else if(embargoDetailsVO.getIsCool() ){
                log.log(Log.FINE, "Inside checkEmbargo======---1===CoolEmbargo==");
                embargoParameterVO.setParameterCode("CoolEmbargo");

            }else if(embargoDetailsVO.getIsFrozen() ){
                log.log(Log.FINE, "Inside checkEmbargo======---1===FrozenEmbargo==");
                embargoParameterVO.setParameterCode("FrozenEmbargo");
            }

            newSet.add(embargoParameterVO);
            embargoDetailsVO.setParams(newSet);
            embargoDetailsList.add(embargoDetailsVO);
        }
    }

    /**
     * Populate embargo parameter.
     *
     * @param embargoDetailsVO the embargo details vo
     * @return the embargo parameter vo
     */
    private EmbargoParameterVO populateEmbargoParameter(EmbargoDetailsVO embargoDetailsVO) {
        EmbargoParameterVO embargoParameterVO = new EmbargoParameterVO();
        String parameterValues = "";


        //embargoParameterVO.setApplicable(embargoDetailsVO.geta);
        embargoParameterVO.setAplFlg("Y");
        embargoParameterVO.setEmbargoReferenceNumber(embargoDetailsVO.getEmbargoReferenceNumber());


        parameterValues = parameterValues.concat("Exists for ");
        if(embargoDetailsVO.getDestination()!=null && embargoDetailsVO.getOrigin()!=null){
            parameterValues = parameterValues.concat("OD pair ").
                    concat(embargoDetailsVO.getOrigin()).concat("-").concat(embargoDetailsVO.getDestination());
        }else if(embargoDetailsVO.getOrigin()!=null){
            parameterValues = parameterValues.concat("Airport ").concat(embargoDetailsVO.getOrigin());
        }else {
            parameterValues = parameterValues.concat("Airport ").concat(embargoDetailsVO.getDestination());
        }
        embargoParameterVO.setParameterValues(parameterValues);
        return embargoParameterVO;
    }

    /**
     * Mapper class for Check Embargo method
     */

    private class CheckEmbargoMapper implements
            MultiMapper<EmbargoDetailsVO> {
        private static final String SRVCTYPEXC = "SRVCTYPEXC";
        private static final String SRVCTYPINC = "SRVCTYPINC";
        private String shipmentID="";
        public CheckEmbargoMapper(ShipmentDetailsVO shipmentVO) {
            // TODO Auto-generated constructor stub
            this.shipmentID = shipmentVO.getShipmentID();
        }

        /**
         * This method gets  all embargo details
         *
         * @param rs
         * @return List<EmbargoDetailsVO>
         * @throws SQLException
         */

        public List<EmbargoDetailsVO> map(ResultSet rs) throws SQLException {
            /*Map<String, String> map = new HashMap<String, String>();*/
            log.entering("CheckEmbargoMapper", "map");
            Set<EmbargoParameterVO> set = new HashSet<EmbargoParameterVO>();
            String now = null;
            String prev = null;

            List<EmbargoDetailsVO> list = new ArrayList<EmbargoDetailsVO>();
            EmbargoDetailsVO embargoDetailsVO = null;
            while (rs.next()) {

                now = rs.getString(REFNUM);
                if (!now.equals(prev)) {
                    if (embargoDetailsVO != null) {
                        embargoDetailsVO.setParams(set);
                        list.add(embargoDetailsVO);
                        set = new HashSet<EmbargoParameterVO>();
                    }
                    embargoDetailsVO = new EmbargoDetailsVO();
                    embargoDetailsVO.setCompanyCode(rs.getString(CMPCOD));
                    embargoDetailsVO.setShipmentID(this.shipmentID);
                    embargoDetailsVO.setDestination(rs.getString("DSTARPCODINC"));
                    embargoDetailsVO.setDestinationType(rs
                            .getString("DSTTYP"));
                    embargoDetailsVO.setEmbargoDescription(rs
                            .getString("RECDES"));
                    embargoDetailsVO.setEmbargoReferenceNumber(rs
                            .getString(REFNUM));
                    if (rs.getDate("ENDDAT") != null) {
                        LocalDate date = new LocalDate(LocalDate.NO_STATION,
                                Location.NONE,rs.getDate("ENDDAT"));
                        embargoDetailsVO.setEndDate(date);

                    }

                    embargoDetailsVO.setOrigin(rs.getString("ORGARPCODINC"));
                    embargoDetailsVO.setOriginType(rs.getString("ORGTYP"));
                    embargoDetailsVO.setRemarks(rs.getString("RECRMK"));

                    LocalDate startDate = new LocalDate(LocalDate.NO_STATION,
                            Location.NONE,rs.getDate(STRDAT));
                    embargoDetailsVO.setStartDate(startDate);

                    embargoDetailsVO.setStatus(rs.getString("RECSTA"));
                    embargoDetailsVO
                            .setEmbargoLevel(rs.getString("RECTYP"));
                }
                if(rs.getString("MALCLSINC")!= null && !("-".equals(rs.getString("MALCLSINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "MALCLS", rs.getString("MALCLSINC"), now);
                }
                if(rs.getString("MALCLSEXC")!= null && !("-".equals(rs.getString("MALCLSEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "MALCLS", rs.getString("MALCLSEXC"), now);
                }
                if(rs.getString("MALCATINC")!= null && !("-".equals(rs.getString("MALCATINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "MALCAT", rs.getString("MALCATINC"), now);
                }
                if(rs.getString("MALCATEXC")!= null && !("-".equals(rs.getString("MALCATEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "MALCAT", rs.getString("MALCATEXC"), now);
                }
                if(rs.getString("SUBCLSINC")!= null && !("-".equals(rs.getString("SUBCLSINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "MALSUBCLS", rs.getString("SUBCLSINC"), now);
                }
                if(rs.getString("SUBCLSEXC")!= null && !("-".equals(rs.getString("SUBCLSEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "MALSUBCLS", rs.getString("SUBCLSEXC"), now);
                }
                if(rs.getString("SUBCLSGRPINC")!= null && !("-".equals(rs.getString("SUBCLSGRPINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "MALSUBCLSGRP", rs.getString("SUBCLSGRPINC"), now);
                }
                if(rs.getString("SUBCLSGRPEXC")!= null && !("-".equals(rs.getString("SUBCLSGRPEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "MALSUBCLSGRP", rs.getString("SUBCLSGRPEXC"), now);
                }
                if(rs.getString("CARRORGINC")!= null && !("-".equals(rs.getString("CARRORGINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "CAR", rs.getString("CARRORGINC"), now);
                }
                if(rs.getString("CARRORGEXC")!= null && !("-".equals(rs.getString("CARRORGEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "CAR", rs.getString("CARRORGEXC"), now);
                }
                if(rs.getString("CARRDSTINC")!= null && !("-".equals(rs.getString("CARRDSTINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "CAR", rs.getString("CARRDSTINC"), now);
                }
                if(rs.getString("CARRDSTEXC")!= null && !("-".equals(rs.getString("CARRDSTEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "CAR", rs.getString("CARRDSTEXC"), now);
                }
                if(rs.getString("CARRVIAINC")!= null && !("-".equals(rs.getString("CARRVIAINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "CAR", rs.getString("CARRVIAINC"), now);
                }
                if(rs.getString("CARRVIAEXC")!= null && !("-".equals(rs.getString("CARRVIAEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "CAR", rs.getString("CARRVIAEXC"), now);
                }
                if(rs.getString("CARRALLINC")!= null && !("-".equals(rs.getString("CARRALLINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "CAR", rs.getString("CARRALLINC"), now);
                }
                if(rs.getString("CARRALLEXC")!= null && !("-".equals(rs.getString("CARRALLEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "CAR", rs.getString("CARRALLEXC"), now);
                }
                if(rs.getString("CARRANYINC")!= null && !("-".equals(rs.getString("CARRANYINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "CAR", rs.getString("CARRANYINC"), now);
                }
                if(rs.getString("CARRANYEXC")!= null && !("-".equals(rs.getString("CARRANYEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "CAR", rs.getString("CARRANYEXC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 starts
                if(rs.getString("CARRSEGINC")!= null && !("-".equals(rs.getString("CARRSEGINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "CAR", rs.getString("CARRSEGINC"), now);
                }
                if(rs.getString("CARRSEGEXC")!= null && !("-".equals(rs.getString("CARRSEGEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "CAR", rs.getString("CARRSEGEXC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 ends
                if(rs.getString("COMINC")!= null && !("-".equals(rs.getString("COMINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "COM", rs.getString("COMINC"), now);
                }
                if(rs.getString("COMEXC")!= null && !("-".equals(rs.getString("COMEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "COM", rs.getString("COMEXC"), now);
                }
                if(rs.getString("SCCCODINC")!= null && !("-".equals(rs.getString("SCCCODINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "SCC", rs.getString("SCCCODINC"), now);
                }
                if(rs.getString("SCCCODEXC")!= null && !("-".equals(rs.getString("SCCCODEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "SCC", rs.getString("SCCCODEXC"), now);
                }
                if(rs.getString("SCCCODEXCIF")!= null && !("-".equals(rs.getString("SCCCODEXCIF")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "SCC", rs.getString("SCCCODEXCIF"), now);
                }
                if(rs.getString("AGTCODINC")!= null && !("-".equals(rs.getString("AGTCODINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "AGT", rs.getString("AGTCODINC"), now);
                }
                if(rs.getString("AGTCODEXC")!= null && !("-".equals(rs.getString("AGTCODEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "AGT", rs.getString("AGTCODEXC"), now);
                }
                if(rs.getString("PAYTYPINC")!= null && !("-".equals(rs.getString("PAYTYPINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "PAYTYP", rs.getString("PAYTYPINC"), now);
                }
                if(rs.getString("PAYTYPEXC")!= null && !("-".equals(rs.getString("PAYTYPEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "PAYTYP", rs.getString("PAYTYPEXC"), now);
                }
                if(rs.getString("FLTNUMORGINC")!= null && !("-".equals(rs.getString("FLTNUMORGINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTNUM", rs.getString("FLTNUMORGINC"), now);
                }
                if(rs.getString("FLTNUMORGEXC")!= null && !("-".equals(rs.getString("FLTNUMORGEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTNUM", rs.getString("FLTNUMORGEXC"), now);
                }
                if(rs.getString("FLTNUMDSTINC")!= null && !("-".equals(rs.getString("FLTNUMDSTINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTNUM", rs.getString("FLTNUMDSTINC"), now);
                }
                if(rs.getString("FLTNUMDSTEXC")!= null && !("-".equals(rs.getString("FLTNUMDSTEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTNUM", rs.getString("FLTNUMDSTEXC"), now);
                }
                if(rs.getString("FLTNUMVIAINC")!= null && !("-".equals(rs.getString("FLTNUMVIAINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTNUM", rs.getString("FLTNUMVIAINC"), now);
                }
                if(rs.getString("FLTNUMVIAEXC")!= null && !("-".equals(rs.getString("FLTNUMVIAEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTNUM", rs.getString("FLTNUMVIAEXC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 starts
                if(rs.getString("FLTNUMSEGINC")!= null && !("-".equals(rs.getString("FLTNUMSEGINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTNUM", rs.getString("FLTNUMSEGINC"), now);
                }
                if(rs.getString("FLTNUMSEGEXC")!= null && !("-".equals(rs.getString("FLTNUMSEGEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTNUM", rs.getString("FLTNUMSEGEXC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 ends
                if(rs.getString("FLTNUMALLINC")!= null && !("-".equals(rs.getString("FLTNUMALLINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTNUM", rs.getString("FLTNUMALLINC"), now);
                }
                if(rs.getString("FLTNUMALLEXC")!= null && !("-".equals(rs.getString("FLTNUMALLEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTNUM", rs.getString("FLTNUMALLEXC"), now);
                }
                if(rs.getString("FLTNUMANYINC")!= null && !("-".equals(rs.getString("FLTNUMANYINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTNUM", rs.getString("FLTNUMANYINC"), now);
                }
                if(rs.getString("FLTNUMANYEXC")!= null && !("-".equals(rs.getString("FLTNUMANYEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTNUM", rs.getString("FLTNUMANYEXC"), now);
                }
                if(rs.getString("PRDINC")!= null && !("-".equals(rs.getString("PRDINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "PRD", rs.getString("PRDINC"), now);
                }
                if(rs.getString("PRDEXC")!= null && !("-".equals(rs.getString("PRDEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "PRD", rs.getString("PRDEXC"), now);
                }
                if(rs.getString("NATINC")!= null && !("-".equals(rs.getString("NATINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "NATURE OF GOODS", rs.getString("NATINC"), now);
                }
                if(rs.getString("NATEXC")!= null && !("-".equals(rs.getString("NATEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "NATURE OF GOODS", rs.getString("NATEXC"), now);
                }
                if (rs.getString("AWBPFXINC") != null && !("-".equals(rs.getString("AWBPFXINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "AWBPRE", rs.getString("AWBPFXINC"), now);
                }
                if (rs.getString("AWBPFXEXC") != null && !("-".equals(rs.getString("AWBPFXEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "AWBPRE", rs.getString("AWBPFXEXC"), now);
                }
                if (rs.getString("FLTOWRORGINC") != null && !("-".equals(rs.getString("FLTOWRORGINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTOWR", rs.getString("FLTOWRORGINC"), now);
                }
                if (rs.getString("FLTOWRORGEXC") != null && !("-".equals(rs.getString("FLTOWRORGEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTOWR", rs.getString("FLTOWRORGEXC"), now);
                }
                if (rs.getString("FLTOWRDSTINC") != null && !("-".equals(rs.getString("FLTOWRDSTINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTOWR", rs.getString("FLTOWRDSTINC"), now);
                }
                if (rs.getString("FLTOWRDSTEXC") != null && !("-".equals(rs.getString("FLTOWRDSTEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTOWR", rs.getString("FLTOWRDSTEXC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 starts
                if (rs.getString("FLTOWRSEGINC") != null && !("-".equals(rs.getString("FLTOWRSEGINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTOWR", rs.getString("FLTOWRSEGINC"), now);
                }
                if (rs.getString("FLTOWRSEGEXC") != null && !("-".equals(rs.getString("FLTOWRSEGEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTOWR", rs.getString("FLTOWRSEGEXC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 ends
                if (rs.getString("FLTOWRVIAINC") != null && !("-".equals(rs.getString("FLTOWRVIAINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTOWR", rs.getString("FLTOWRVIAINC"), now);
                }
                if (rs.getString("FLTOWRVIAEXC") != null && !("-".equals(rs.getString("FLTOWRVIAEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTOWR", rs.getString("FLTOWRVIAEXC"), now);
                }
                if (rs.getString("FLTOWRALLINC") != null && !("-".equals(rs.getString("FLTOWRALLINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTOWR", rs.getString("FLTOWRALLINC"), now);
                }
                if (rs.getString("FLTOWRALLEXC") != null && !("-".equals(rs.getString("FLTOWRALLEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTOWR", rs.getString("FLTOWRALLEXC"), now);
                }
                if (rs.getString("FLTOWRANYINC") != null && !("-".equals(rs.getString("FLTOWRANYINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTOWR", rs.getString("FLTOWRANYINC"), now);
                }
                if (rs.getString("FLTOWRANYEXC") != null && !("-".equals(rs.getString("FLTOWRANYEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "FLTOWR", rs.getString("FLTOWRANYEXC"), now);
                }
                if (rs.getString("FLTTYPORGINC") != null && !("-".equals(rs.getString("FLTTYPORGINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTTYPE", rs.getString("FLTTYPORGINC"), now);
                }
                if (rs.getString("FLTTYPDSTINC") != null && !("-".equals(rs.getString("FLTTYPDSTINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTTYPE", rs.getString("FLTTYPDSTINC"), now);
                }
                if (rs.getString("FLTTYPVIAINC") != null && !("-".equals(rs.getString("FLTTYPVIAINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTTYPE", rs.getString("FLTTYPVIAINC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 starts
                if (rs.getString("FLTTYPSEGINC") != null && !("-".equals(rs.getString("FLTTYPSEGINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTTYPE", rs.getString("FLTTYPSEGINC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 ends
                if (rs.getString("FLTTYPALLINC") != null && !("-".equals(rs.getString("FLTTYPALLINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTTYPE", rs.getString("FLTTYPALLINC"), now);
                }
                if (rs.getString("FLTTYPANYINC") != null && !("-".equals(rs.getString("FLTTYPANYINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "FLTTYPE", rs.getString("FLTTYPANYINC"), now);
                }
		  //added by 202766 for IASCB-159851
                if (rs.getString(FLTTYPORGEXC) != null && !("-".equals(rs.getString(FLTTYPORGEXC)))) {
                    populateAndAddEmbargoParameter(
                            set, "E", FLTTYPE, rs.getString(FLTTYPORGEXC), now);
                }
                if (rs.getString(FLTTYPDSTEXC) != null && !("-".equals(rs.getString(FLTTYPDSTEXC)))) {
                    populateAndAddEmbargoParameter(
                            set, "E", FLTTYPE, rs.getString(FLTTYPDSTEXC), now);
                }
                if (rs.getString(FLTTYPVIAEXC) != null && !("-".equals(rs.getString(FLTTYPVIAEXC)))) {
                    populateAndAddEmbargoParameter(
                            set, "E", FLTTYPE, rs.getString(FLTTYPVIAEXC), now);
                }
                if (rs.getString(FLTTYPSEGEXC) != null && !("-".equals(rs.getString(FLTTYPSEGEXC)))) {
                    populateAndAddEmbargoParameter(
                            set, "E", FLTTYPE, rs.getString(FLTTYPSEGEXC), now);
                }
                if (rs.getString(FLTTYPALLEXC) != null && !("-".equals(rs.getString(FLTTYPALLEXC)))) {
                    populateAndAddEmbargoParameter(
                            set, "E", FLTTYPE, rs.getString(FLTTYPALLEXC), now);
                }
                if (rs.getString(FLTTYPANYEXC) != null && !("-".equals(rs.getString(FLTTYPANYEXC)))) {
                    populateAndAddEmbargoParameter(
                            set, "E", FLTTYPE, rs.getString(FLTTYPANYEXC), now);
                }
                if (rs.getString(PARAMETER_CODE_UNKSHP) != null && !("-".equals(rs.getString(PARAMETER_CODE_UNKSHP)))) {
                    populateAndAddEmbargoParameter(
                            set, "EQ", PARAMETER_CODE_UNKSHP, rs.getString(PARAMETER_CODE_UNKSHP), now);
                }
                //ended
                if (rs.getString("SCCGRPINC") != null && !("-".equals(rs.getString("SCCGRPINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "SCCGRP", rs.getString("SCCGRPINC"), now);
                }
                if (rs.getString("SCCGRPEXC") != null && !("-".equals(rs.getString("SCCGRPEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "SCCGRP", rs.getString("SCCGRPEXC"), now);
                }
                if (rs.getString("SCCGRPEXCIF") != null && !("-".equals(rs.getString("SCCGRPEXCIF")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "SCCGRP", rs.getString("SCCGRPEXCIF"), now);
                }
                if (rs.getString("AGTGRPINC") != null && !("-".equals(rs.getString("AGTGRPINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "AGTGRP", rs.getString("AGTGRPINC"), now);
                }
                if (rs.getString("AGTGRPEXC") != null && !("-".equals(rs.getString("AGTGRPEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "AGTGRP", rs.getString("AGTGRPEXC"), now);
                }
                if (rs.getString("ARLGRPORGINC") != null && !("-".equals(rs.getString("ARLGRPORGINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ARLGRP", rs.getString("ARLGRPORGINC"), now);
                }
                if (rs.getString("ARLGRPORGEXC") != null && !("-".equals(rs.getString("ARLGRPORGEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ARLGRP", rs.getString("ARLGRPORGEXC"), now);
                }
                if (rs.getString("ARLGRPDSTINC") != null && !("-".equals(rs.getString("ARLGRPDSTINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ARLGRP", rs.getString("ARLGRPDSTINC"), now);
                }
                if (rs.getString("ARLGRPDSTEXC") != null && !("-".equals(rs.getString("ARLGRPDSTEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ARLGRP", rs.getString("ARLGRPDSTEXC"), now);
                }
                if (rs.getString("ARLGRPVIAINC") != null && !("-".equals(rs.getString("ARLGRPVIAINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ARLGRP", rs.getString("ARLGRPVIAINC"), now);
                }
                if (rs.getString("ARLGRPVIAEXC") != null && !("-".equals(rs.getString("ARLGRPVIAEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ARLGRP", rs.getString("ARLGRPVIAEXC"), now);
                }
                if (rs.getString("ARLGRPALLINC") != null && !("-".equals(rs.getString("ARLGRPALLINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ARLGRP", rs.getString("ARLGRPALLINC"), now);
                }
                if (rs.getString("ARLGRPALLEXC") != null && !("-".equals(rs.getString("ARLGRPALLEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ARLGRP", rs.getString("ARLGRPALLEXC"), now);
                }
                if (rs.getString("ARLGRPANYINC") != null && !("-".equals(rs.getString("ARLGRPANYINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ARLGRP", rs.getString("ARLGRPANYINC"), now);
                }
                if (rs.getString("ARLGRPANYEXC") != null && !("-".equals(rs.getString("ARLGRPANYEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ARLGRP", rs.getString("ARLGRPANYEXC"), now);
                }
                if (rs.getString("UNDNUMINC") != null && !("-".equals(rs.getString("UNDNUMINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "UNNUM", rs.getString("UNDNUMINC"), now);
                }
                if (rs.getString("UNDNUMEXC") != null && !("-".equals(rs.getString("UNDNUMEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "UNNUM", rs.getString("UNDNUMEXC"), now);
                }
                if (rs.getString("UNCLSINC") != null && !("-".equals(rs.getString("UNCLSINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "UNCLS", rs.getString("UNCLSINC"), now);
                }
                if (rs.getString("UNCLSEXC") != null && !("-".equals(rs.getString("UNCLSEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "UNCLS", rs.getString("UNCLSEXC"), now);
                }
                if (rs.getString("LENSTR") != null && !("-".equals(rs.getString("LENSTR")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "LEN", rs.getString("LENSTR"), now);
                } else if (rs.getString("LENEND") != null && !("-".equals(rs.getString("LENEND")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "LEN", rs.getString("LENEND"), now);
                }
                if (rs.getString("WGTSTR") != null && !("-".equals(rs.getString("WGTSTR")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "WGT", rs.getString("WGTSTR"), now);
                } else if (rs.getString("WGTEND") != null && !("-".equals(rs.getString("WGTEND")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "WGT", rs.getString("WGTEND"), now);
                }
                if (rs.getString("NUMSTPSTR") != null && !("-".equals(rs.getString("NUMSTPSTR")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "NUMSTP", rs.getString("NUMSTPSTR"), now);
                } else if (rs.getString("NUMSTPEND") != null && !("-".equals(rs.getString("NUMSTPEND")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "NUMSTP", rs.getString("NUMSTPEND"), now);
                }
                if (rs.getString("WIDSTR") != null && !("-".equals(rs.getString("WIDSTR")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "WID", rs.getString("WIDSTR"), now);
                } else if (rs.getString("WIDEND") != null && !("-".equals(rs.getString("WIDEND")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "WID", rs.getString("WIDEND"), now);
                }
                if (rs.getString(HGTSTR) != null && !("-".equals(rs.getString(HGTSTR)))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "HGT", rs.getString(HGTSTR), now);
                } else if (rs.getString("HGTEND") != null && !("-".equals(rs.getString("HGTEND")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "HGT", rs.getString("HGTEND"), now);
                }
                if (rs.getString("ORGDAYOPR") != null && !("-".equals(rs.getString("ORGDAYOPR")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAYOPR", rs.getString("ORGDAYOPR"), now);
                }
                if (rs.getString("VIADAYOPR") != null && !("-".equals(rs.getString("VIADAYOPR")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAYOPR", rs.getString("VIADAYOPR"), now);
                }
                if (rs.getString("DSTDAYOPR") != null && !("-".equals(rs.getString("DSTDAYOPR")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAYOPR", rs.getString("DSTDAYOPR"), now);
                }
                //Added by A-7924 as part of ICRD-299901 starts
                if (rs.getString("SEGORGDAYOPR") != null && !("-".equals(rs.getString("SEGORGDAYOPR")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAYOPR", rs.getString("SEGORGDAYOPR"), now);
                }
                if (rs.getString("SEGDSTDAYOPR") != null && !("-".equals(rs.getString("SEGDSTDAYOPR")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAYOPR", rs.getString("SEGDSTDAYOPR"), now);
                }
                //Added by A-7924 as part of ICRD-299901 ends
                if (rs.getString("ALLDATINC") != null && !("-".equals(rs.getString("ALLDATINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAT", rs.getString("ALLDATINC"), now);
                }
                if (rs.getString("ALLDATEXC") != null && !("-".equals(rs.getString("ALLDATEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "DAT", rs.getString("ALLDATEXC"), now);
                }
                if (rs.getString("ANYDATINC") != null && !("-".equals(rs.getString("ANYDATINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAT", rs.getString("ANYDATINC"), now);
                }
                if (rs.getString("ANYDATEXC") != null && !("-".equals(rs.getString("ANYDATEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "DAT", rs.getString("ANYDATEXC"), now);
                }
                if (rs.getString("DSTDATINC") != null && !("-".equals(rs.getString("DSTDATINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAT", rs.getString("DSTDATINC"), now);
                }
                if (rs.getString("DSTDATEXC") != null && !("-".equals(rs.getString("DSTDATEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "DAT", rs.getString("DSTDATEXC"), now);
                }
                if (rs.getString("VIADATINC") != null && !("-".equals(rs.getString("VIADATINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAT", rs.getString("VIADATINC"), now);
                }
                if (rs.getString("VIADATEXC") != null && !("-".equals(rs.getString("VIADATEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "DAT", rs.getString("VIADATEXC"), now);
                }
                if (rs.getString("ORGDATINC") != null && !("-".equals(rs.getString("ORGDATINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAT", rs.getString("ORGDATINC"), now);
                }
                if (rs.getString("ORGDATEXC") != null && !("-".equals(rs.getString("ORGDATEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "DAT", rs.getString("ORGDATEXC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 starts
                if (rs.getString("SEGDATINC") != null && !("-".equals(rs.getString("SEGDATINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "DAT", rs.getString("SEGDATINC"), now);
                }
                if (rs.getString("SEGDATEXC") != null && !("-".equals(rs.getString("SEGDATEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "DAT", rs.getString("SEGDATINC"), now);
                }
                //Added by A-7924 as part of ICRD-299901 ends
                if (rs.getString("ORGSTRTIM") != null && !("-".equals(rs.getString("ORGSTRTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("ORGSTRTIM"), now);
                }
                if (rs.getString("ORGENDTIM") != null && !("-".equals(rs.getString("ORGENDTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("ORGENDTIM"), now);
                }
                if (rs.getString("VIASTRTIM") != null && !("-".equals(rs.getString("VIASTRTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("VIASTRTIM"), now);
                }
                if (rs.getString("VIAENDTIM") != null && !("-".equals(rs.getString("VIAENDTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("VIAENDTIM"), now);
                }
                if (rs.getString(DSTSTRTIM) != null && !("-".equals(rs.getString(DSTSTRTIM)))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString(DSTSTRTIM), now);
                }
                if (rs.getString("DSTENDTIM") != null && !("-".equals(rs.getString("DSTENDTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("DSTENDTIM"), now);
                }
                //Added by A-7924 as part of ICRD-299901 starts
                if (rs.getString("SEGSTRTIM") != null && !("-".equals(rs.getString("SEGSTRTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("SEGSTRTIM"), now);
                }
                if (rs.getString("SEGENDTIM") != null && !("-".equals(rs.getString("SEGENDTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("SEGENDTIM"), now);
                }
                //Added by A-7924 as part of ICRD-299901 ends
                if (rs.getString("ALLSTRTIM") != null && !("-".equals(rs.getString("ALLSTRTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("ALLSTRTIM"), now);
                }
                if (rs.getString("ALLENDTIM") != null && !("-".equals(rs.getString("ALLENDTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("ALLENDTIM"), now);
                }
                if (rs.getString("ANYSTRTIM") != null && !("-".equals(rs.getString("ANYSTRTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("ANYSTRTIM"), now);
                }
                if (rs.getString("ANYENDTIM") != null && !("-".equals(rs.getString("ANYENDTIM")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "TIM", rs.getString("ANYENDTIM"), now);
                }
                if(rs.getString("LCLDES") != null && rs.getString("LCLDES").trim().length() > 0) {
                    embargoDetailsVO.setEmbargoDescription(rs.getString("LCLDES"));
                }
                if ((rs.getString("PKGINSINC") != null) && (!"-".equals(rs.getString("PKGINSINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "UNIDPI", rs.getString("PKGINSINC"), now);
                }
                if ((rs.getString("PKGINSEXC") != null) && (!"-".equals(rs.getString("PKGINSEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "UNIDPI", rs.getString("PKGINSEXC"), now);
                }
                //set.add(embargoParameterVO);
                //}
                if ((rs.getString("VOLSTR") != null) && (!"-".equals(rs.getString("VOLSTR")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "VOL", rs.getString("VOLSTR"), now);
                }
                if ((rs.getString("VOLEND") != null) && (!"-".equals(rs.getString("VOLEND")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "VOL", rs.getString("VOLEND"), now);
                }
                if ((rs.getString("ULDINC") != null) && (!"-".equals(rs.getString("ULDINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ULD", rs.getString("ULDINC"), now);
                }
                if ((rs.getString("ULDEXC") != null) && (!"-".equals(rs.getString("ULDEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ULD", rs.getString("ULDEXC"), now);
                }
                if ((rs.getString("ACRTYPGRPANYEXC") != null) && (!"-".equals(rs.getString("ACRTYPGRPANYEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPANYEXC"), now);
                }
                if ((rs.getString("ACRTYPGRPANYINC") != null) && (!"-".equals(rs.getString("ACRTYPGRPANYINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPANYINC"), now);
                }
                if ((rs.getString("ACRTYPGRPALLINC") != null) && (!"-".equals(rs.getString("ACRTYPGRPALLINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPALLINC"), now);
                }
                if ((rs.getString("ACRTYPGRPALLEXC") != null) && (!"-".equals(rs.getString("ACRTYPGRPALLEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPALLEXC"), now);
                }
                if ((rs.getString("ACRTYPGRPORGINC") != null) && (!"-".equals(rs.getString("ACRTYPGRPORGINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPORGINC"), now);
                }
                if ((rs.getString("ACRTYPGRPORGEXC") != null) && (!"-".equals(rs.getString("ACRTYPGRPORGEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPORGEXC"), now);
                }
                if ((rs.getString("ACRTYPGRPDSTINC") != null) && (!"-".equals(rs.getString("ACRTYPGRPDSTINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPDSTINC"), now);
                }
                if ((rs.getString("ACRTYPGRPDSTEXC") != null) && (!"-".equals(rs.getString("ACRTYPGRPDSTEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPDSTEXC"), now);
                }
                if ((rs.getString("ACRTYPGRPVIAINC") != null) && (!"-".equals(rs.getString("ACRTYPGRPVIAINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPVIAINC"), now);
                }
                if ((rs.getString("ACRTYPGRPVIAEXC") != null) && (!"-".equals(rs.getString("ACRTYPGRPVIAEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPVIAEXC"), now);
                }
                if ((rs.getString("ACRTYPANYEXC") != null) && (!"-".equals(rs.getString("ACRTYPANYEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYP", rs.getString("ACRTYPANYEXC"), now);
                }
                if ((rs.getString("ACRTYPANYINC") != null) && (!"-".equals(rs.getString("ACRTYPANYINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYP", rs.getString("ACRTYPANYINC"), now);
                }
                if ((rs.getString("ACRTYPALLINC") != null) && (!"-".equals(rs.getString("ACRTYPALLINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYP", rs.getString("ACRTYPALLINC"), now);
                }
                if ((rs.getString("ACRTYPALLEXC") != null) && (!"-".equals(rs.getString("ACRTYPALLEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYP", rs.getString("ACRTYPALLEXC"), now);
                }
                if ((rs.getString("ACRTYPORGINC") != null) && (!"-".equals(rs.getString("ACRTYPORGINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYP", rs.getString("ACRTYPORGINC"), now);
                }
                if ((rs.getString("ACRTYPORGEXC") != null) && (!"-".equals(rs.getString("ACRTYPORGEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYP", rs.getString("ACRTYPORGEXC"), now);
                }
                if ((rs.getString("ACRTYPDSTINC") != null) && (!"-".equals(rs.getString("ACRTYPDSTINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYP", rs.getString("ACRTYPDSTINC"), now);
                }
                if ((rs.getString("ACRTYPDSTEXC") != null) && (!"-".equals(rs.getString("ACRTYPDSTEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYP", rs.getString("ACRTYPDSTEXC"), now);
                }
                if ((rs.getString("ACRTYPVIAINC") != null) && (!"-".equals(rs.getString("ACRTYPVIAINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRTYP", rs.getString("ACRTYPVIAINC"), now);
                }
                if ((rs.getString("ACRTYPVIAEXC") != null) && (!"-".equals(rs.getString("ACRTYPVIAEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRTYP", rs.getString("ACRTYPVIAEXC"), now);
                }
                //added by A-5799 for IASCB-23507 starts
                if (rs.getString("ACRCLSORGEXC") != null && !("-".equals(rs.getString("ACRCLSORGEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRCLS", rs.getString("ACRCLSORGEXC"), now);
                }
                if (rs.getString("ACRCLSDSTINC") != null && !("-".equals(rs.getString("ACRCLSDSTINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRCLS", rs.getString("ACRCLSDSTINC"), now);
                }
                if (rs.getString("ACRCLSDSTEXC") != null && !("-".equals(rs.getString("ACRCLSDSTEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRCLS", rs.getString("ACRCLSDSTEXC"), now);
                }
                if (rs.getString("ACRCLSVIAINC") != null && !("-".equals(rs.getString("ACRCLSVIAINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRCLS", rs.getString("ACRCLSVIAINC"), now);
                }
                if (rs.getString("ACRCLSVIAEXC") != null && !("-".equals(rs.getString("ACRCLSVIAEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRCLS", rs.getString("ACRCLSVIAEXC"), now);
                }
                if (rs.getString("ACRCLSALLINC") != null && !("-".equals(rs.getString("ACRCLSALLINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRCLS", rs.getString("ACRCLSALLINC"), now);
                }
                if (rs.getString("ACRCLSALLEXC") != null && !("-".equals(rs.getString("ACRCLSALLEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRCLS", rs.getString("ACRCLSALLEXC"), now);
                }
                if (rs.getString("ACRCLSANYINC") != null && !("-".equals(rs.getString("ACRCLSANYINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRCLS", rs.getString("ACRCLSANYINC"), now);
                }
                if (rs.getString("ACRCLSANYEXC") != null && !("-".equals(rs.getString("ACRCLSANYEXC")))) {
                    populateAndAddEmbargoParameter(
                            set, "E", "ACRCLS", rs.getString("ACRCLSANYEXC"), now);
                }
                if(rs.getString("SRVCRGCLSINC")!= null && !("-".equals(rs.getString("SRVCRGCLSINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "SRVCRGCLS", rs.getString("SRVCRGCLSINC"), now);
                }
                if(rs.getString("SRVCRGCLSEXC")!= null && !("-".equals(rs.getString("SRVCRGCLSEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "SRVCRGCLS", rs.getString("SRVCRGCLSEXC"), now);
                }
                if(rs.getString("SHPINC")!= null && !("-".equals(rs.getString("SHPINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "SHP", rs.getString("SHPINC"), now);
                }
                if(rs.getString("SHPEXC")!= null && !("-".equals(rs.getString("SHPEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "SHP", rs.getString("SHPEXC"), now);
                }
                if(rs.getString("SHPGRPINC")!= null && !("-".equals(rs.getString("SHPGRPINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "SHPGRP", rs.getString("SHPGRPINC"), now);
                }
                if(rs.getString("SHPGRPEXC")!= null && !("-".equals(rs.getString("SHPGRPEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "SHPGRP", rs.getString("SHPGRPEXC"), now);
                }
                if(rs.getString("CNSINC")!= null && !("-".equals(rs.getString("CNSINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "CNS", rs.getString("CNSINC"), now);
                }
                if(rs.getString("CNSEXC")!= null && !("-".equals(rs.getString("CNSEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "CNS", rs.getString("CNSEXC"), now);
                }
                if(rs.getString("CNSGRPINC")!= null && !("-".equals(rs.getString("CNSGRPINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "CNSGRP", rs.getString("CNSGRPINC"), now);
                }
                if(rs.getString("CNSGRPEXC")!= null && !("-".equals(rs.getString("CNSGRPEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "CNSGRP", rs.getString("CNSGRPEXC"), now);
                }
                if(rs.getString("SHPTYPINC")!= null && !("-".equals(rs.getString("SHPTYPINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "SHPTYP", rs.getString("SHPTYPINC"), now);
                }
                if(rs.getString("SHPTYPEXC")!= null && !("-".equals(rs.getString("SHPTYPEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "SHPTYP", rs.getString("SHPTYPEXC"), now);
                }
                if(rs.getString("CNSLINC")!= null && !("-".equals(rs.getString("CNSLINC")))){
                    populateAndAddEmbargoParameter(
                            set, "I", "CNSL", rs.getString("CNSLINC"), now);
                }
                if(rs.getString("CNSLEXC")!= null && !("-".equals(rs.getString("CNSLEXC")))){
                    populateAndAddEmbargoParameter(
                            set, "E", "CNSL", rs.getString("CNSLEXC"), now);
                }
                //added by A-5799 for IASCB-23507 ends

                //added by A-10530 for IASCB-150038

                if(rs.getString(SRVCTYPINC)!= null && !("-".equals(rs.getString(SRVCTYPINC)))){
                    populateAndAddEmbargoParameter(
                            set, "I", "SRVCTYP", rs.getString(SRVCTYPINC), now);
                }
                if(rs.getString(SRVCTYPEXC)!= null && !("-".equals(rs.getString(SRVCTYPEXC)))){
                    populateAndAddEmbargoParameter(
                            set, "E", "SRVCTYP", rs.getString(SRVCTYPEXC), now);
                }

                if(rs.getString(SRVCTYPFRTECSTPINC)!= null && !("-".equals(rs.getString(SRVCTYPFRTECSTPINC)))){
                    populateAndAddEmbargoParameter(
                            set, "I", SRVCTYPFRTECSTP, rs.getString(SRVCTYPFRTECSTPINC), now);
                }
                if(rs.getString(SRVCTYPFRTECSTPEXC)!= null && !("-".equals(rs.getString(SRVCTYPFRTECSTPEXC)))){
                    populateAndAddEmbargoParameter(
                            set, "E", SRVCTYPFRTECSTP, rs.getString(SRVCTYPFRTECSTPEXC), now);
                }
                //added as part of IASCB-43480 starts
                if (rs.getString("ACRCLSORGINC") != null && !("-".equals(rs.getString("ACRCLSORGINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ACRCLS", rs.getString("ACRCLSORGINC"), now);
                }
                //added as part of IASCB-43480 end
                //added as part of IASCB-46083 start
                if ((rs.getString("ULDTYPINC") != null) && (!"-".equals(rs.getString("ULDTYPINC")))) {
                    populateAndAddEmbargoParameter(
                            set, "I", "ULD", rs.getString("ULDTYPINC"), now);
                }
                //added as part of IASCB-46083 end
                prev = now;
            }
            if (embargoDetailsVO != null) {
                embargoDetailsVO.setParams(set);
                list.add(embargoDetailsVO);
            }
            if (list.size() > 0) {
                return list;
            } else {
                return null;
            }
        }
        private void populateAndAddEmbargoParameter(Set<EmbargoParameterVO> set,String aplFlg,
                                                    String parameterCode,String parameterValue,String referenceNumber) {
            EmbargoParameterVO embargoParameterVO = new EmbargoParameterVO();
            embargoParameterVO.setAplFlg(aplFlg);
            embargoParameterVO.setParameterCode(parameterCode);
            if(PARAMETER_CODE_WEIGHT.equals(parameterCode) || PARAMETER_CODE_LENGTH.equals(parameterCode) || PARAMETER_CODE_WIDTH.equals(parameterCode) || PARAMETER_CODE_HEIGHT.equals(parameterCode)){
                Double doubleValue= new Double(parameterValue);
                doubleValue=Math.round(doubleValue * 100.0) / 100.0;
                embargoParameterVO.setParameterValues(String.format( "%.2f", doubleValue));
            }
            else if(PARAMETER_CODE_TIME.equals(parameterCode)){

                embargoParameterVO.setParameterValues(parameterValue.substring(0, 5));

            }
            else {
                embargoParameterVO.setParameterValues(parameterValue);
            }
            embargoParameterVO.setEmbargoReferenceNumber(referenceNumber);
            set.add(embargoParameterVO);
        }
    }

    /**
     * Mapper class for Check CoolFrozenEmbargo method
     */

    private class CheckCoolFrozenCCEmbargoMapper implements
            MultiMapper<EmbargoDetailsVO> {
        /**
         * This method gets  all embargo details
         *
         * @param rs
         * @return List<EmbargoDetailsVO>
         * @throws SQLException
         */

        public List<EmbargoDetailsVO> map(ResultSet rs) throws SQLException {
            /*Map<String, String> map = new HashMap<String, String>();*/
            EmbargoParameterVO embargoParameterVO = new EmbargoParameterVO();
            Set<EmbargoParameterVO> set = new HashSet<EmbargoParameterVO>();
            String now = null;
            String prev = null;

            List<EmbargoDetailsVO> list = new ArrayList<EmbargoDetailsVO>();
            EmbargoDetailsVO embargoDetailsVO = null;
            while (rs.next()) {

                now = rs.getString(REFNUM);
                if (!now.equals(prev)) {
                    if (embargoDetailsVO != null) {
                        embargoDetailsVO.setParams(set);
                        list.add(embargoDetailsVO);
                        set = new HashSet<EmbargoParameterVO>();
                    }
                    embargoDetailsVO = new EmbargoDetailsVO();
                    embargoDetailsVO.setCompanyCode(rs.getString(CMPCOD));
                    embargoDetailsVO.setDestination(rs.getString("EMBDST"));
                    embargoDetailsVO.setDestinationType(rs
                            .getString("DSTTYP"));
                    embargoDetailsVO.setEmbargoDescription(rs
                            .getString("EMBDES"));
                    embargoDetailsVO.setEmbargoReferenceNumber(rs
                            .getString(REFNUM));
                    if (rs.getDate("ENDDAT") != null) {
                        LocalDate date = new LocalDate(LocalDate.NO_STATION,
                                Location.NONE,rs.getDate("ENDDAT"));
                        embargoDetailsVO.setEndDate(date);

                    }

                    embargoDetailsVO.setOrigin(rs.getString("EMBORG"));
                    embargoDetailsVO.setOriginType(rs.getString("ORGTYP"));
                    embargoDetailsVO.setRemarks(rs.getString("EMBRMK"));

                    if(rs.getString("COOLFLG") != null){
                        embargoDetailsVO.setIsCool("Y"
                                .equals(rs.getString("COOLFLG")));
                    }
                    else {
                        embargoDetailsVO.setIsCool(false);
                    }
                    if(rs.getString("FROFLG") != null){
                        embargoDetailsVO.setIsFrozen("Y"
                                .equals(rs.getString("FROFLG")));
                    }
                    else {
                        embargoDetailsVO.setIsFrozen(false);
                    }
                    if(rs.getString("CCFLG") != null){
                        embargoDetailsVO.setIsCC("Y"
                                .equals(rs.getString("CCFLG")));
                    }
                    else {
                        embargoDetailsVO.setIsCC(false);
                    }
                    LocalDate startDate = new LocalDate(LocalDate.NO_STATION,
                            Location.NONE,rs.getDate(STRDAT));
                    embargoDetailsVO.setStartDate(startDate);

                    embargoDetailsVO.setStatus(rs.getString("EMBSTA"));
                    embargoDetailsVO
                            .setEmbargoLevel(rs.getString("EMBLVL"));
                }
                embargoParameterVO = new EmbargoParameterVO();
                set.add(embargoParameterVO);
                prev = now;
            }
            if (embargoDetailsVO != null) {
                embargoDetailsVO.setParams(set);
                list.add(embargoDetailsVO);
            }
            return list;
        }
    }


    public Collection<EmbargoDetailsVO> findDuplicateEmbargos(EmbargoFilterVO filterVO)
            throws PersistenceException, SystemException {
        int index = 0;
        boolean orFlag=false;
        boolean andFlag=false;
        boolean outerOrFlag=false;
        Query query = getQueryManager().createNamedNativeQuery(SHARED_EMBARGO_DUPLICATEEMBARGOS);
        if (filterVO.getCompanyCode() != null && filterVO.getCompanyCode().length() > 0) {
            query.append(" REC.CMPCOD=? AND REC.RULTYP=?  ");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.setParameter(++index, RULETYPE_EMBARGO);
        }
        if (filterVO.getEmbargoRefNumber() != null && filterVO.getEmbargoRefNumber().length() > 0) {
            query.append(" AND REC.REFNUM !=? ");
            query.setParameter(++index, filterVO.getEmbargoRefNumber());
        }
        /** case 3 : ORIGIN-VIA-DESTINATION **/
        if(isValidGeographicLevelOrigin(filterVO) && isValidGeographicLevelDestination(filterVO) && isValidGeographicLevelViaPoint(filterVO)){
            query.append(" AND (");
            query.append(" ( (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                for(String airport:filterVO.getAirportCodeOrigin().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeOriginExc())){
                for(String airport:filterVO.getAirportCodeOriginExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                for(String airportGroup:filterVO.getAirportGroupOrigin().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOriginExc())){
                for(String airportGroup:filterVO.getAirportGroupOriginExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                for(String country:filterVO.getCountryCodeOrigin().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeOriginExc())){
                for(String country:filterVO.getCountryCodeOriginExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                for(String countryGroup:filterVO.getCountryGroupOrigin().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOriginExc())){
                for(String countryGroup:filterVO.getCountryGroupOriginExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(" )");

            orFlag=false;

            query.append(" AND (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                for(String airport:filterVO.getAirportCodeDestination().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeDestinationExc())){
                for(String airport:filterVO.getAirportCodeDestinationExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                for(String airportGroup:filterVO.getAirportGroupDestination().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestinationExc())){
                for(String airportGroup:filterVO.getAirportGroupDestinationExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                for(String country:filterVO.getCountryCodeDestination().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestinationExc())){
                for(String country:filterVO.getCountryCodeDestinationExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                for(String countryGroup:filterVO.getCountryGroupDestination().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestinationExc())){
                for(String countryGroup:filterVO.getCountryGroupDestinationExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(")");

            orFlag=false;

            query.append(" AND (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                for(String airport:filterVO.getAirportCodeViaPoint().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeViaPointExc())){
                for(String airport:filterVO.getAirportCodeViaPointExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                for(String airportGroup:filterVO.getAirportGroupViaPoint().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPointExc())){
                for(String airportGroup:filterVO.getAirportGroupViaPointExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                for(String country:filterVO.getCountryCodeViaPoint().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPointExc())){
                for(String country:filterVO.getCountryCodeViaPointExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                for(String countryGroup:filterVO.getCountryGroupViaPoint().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPointExc())){
                for(String countryGroup:filterVO.getCountryGroupViaPointExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(" )");

            query.append(" ) OR( (");

            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ))");

        }else if(isValidGeographicLevelOrigin(filterVO) && isValidGeographicLevelDestination(filterVO) ){
            query.append(" AND (");

            query.append(" ( (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                for(String airport:filterVO.getAirportCodeOrigin().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeOriginExc())){
                for(String airport:filterVO.getAirportCodeOriginExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                for(String airportGroup:filterVO.getAirportGroupOrigin().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOriginExc())){
                for(String airportGroup:filterVO.getAirportGroupOriginExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                for(String country:filterVO.getCountryCodeOrigin().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeOriginExc())){
                for(String country:filterVO.getCountryCodeOriginExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                for(String countryGroup:filterVO.getCountryGroupOrigin().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOriginExc())){
                for(String countryGroup:filterVO.getCountryGroupOriginExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(" )");

            orFlag=false;


            query.append(" AND (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                for(String airport:filterVO.getAirportCodeDestination().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeDestinationExc())){
                for(String airport:filterVO.getAirportCodeDestinationExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                for(String airportGroup:filterVO.getAirportGroupDestination().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestinationExc())){
                for(String airportGroup:filterVO.getAirportGroupDestinationExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                for(String country:filterVO.getCountryCodeDestination().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestinationExc())){
                for(String country:filterVO.getCountryCodeDestinationExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                for(String countryGroup:filterVO.getCountryGroupDestination().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestinationExc())){
                for(String countryGroup:filterVO.getCountryGroupDestinationExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(")");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ) OR( (");

            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ))");

        }else if(isValidGeographicLevelOrigin(filterVO) && isValidGeographicLevelViaPoint(filterVO) ){
            query.append(" AND (");

            query.append(" ( (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                for(String airport:filterVO.getAirportCodeOrigin().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeOriginExc())){
                for(String airport:filterVO.getAirportCodeOriginExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                for(String airportGroup:filterVO.getAirportGroupOrigin().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOriginExc())){
                for(String airportGroup:filterVO.getAirportGroupOriginExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                for(String country:filterVO.getCountryCodeOrigin().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeOriginExc())){
                for(String country:filterVO.getCountryCodeOriginExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                for(String countryGroup:filterVO.getCountryGroupOrigin().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOriginExc())){
                for(String countryGroup:filterVO.getCountryGroupOriginExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(" )");

            orFlag=false;


            query.append(" AND (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                for(String airport:filterVO.getAirportCodeViaPoint().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeViaPointExc())){
                for(String airport:filterVO.getAirportCodeViaPointExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                for(String airportGroup:filterVO.getAirportGroupViaPoint().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPointExc())){
                for(String airportGroup:filterVO.getAirportGroupViaPointExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                for(String country:filterVO.getCountryCodeViaPoint().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPointExc())){
                for(String country:filterVO.getCountryCodeViaPointExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                for(String countryGroup:filterVO.getCountryGroupViaPoint().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPointExc())){
                for(String countryGroup:filterVO.getCountryGroupViaPointExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(" )");


            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ) OR( (");

            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ))");
        }else if(isValidGeographicLevelDestination(filterVO) && isValidGeographicLevelViaPoint(filterVO) ){

            query.append(" AND (");

            query.append(" ( (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                for(String airport:filterVO.getAirportCodeDestination().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeDestinationExc())){
                for(String airport:filterVO.getAirportCodeDestinationExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                for(String airportGroup:filterVO.getAirportGroupDestination().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestinationExc())){
                for(String airportGroup:filterVO.getAirportGroupDestinationExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                for(String country:filterVO.getCountryCodeDestination().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestinationExc())){
                for(String country:filterVO.getCountryCodeDestinationExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                for(String countryGroup:filterVO.getCountryGroupDestination().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestinationExc())){
                for(String countryGroup:filterVO.getCountryGroupDestinationExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(")");

            orFlag=false;

            query.append(" AND (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                for(String airport:filterVO.getAirportCodeViaPoint().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeViaPointExc())){
                for(String airport:filterVO.getAirportCodeViaPointExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                for(String airportGroup:filterVO.getAirportGroupViaPoint().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPointExc())){
                for(String airportGroup:filterVO.getAirportGroupViaPointExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                for(String country:filterVO.getCountryCodeViaPoint().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPointExc())){
                for(String country:filterVO.getCountryCodeViaPointExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                for(String countryGroup:filterVO.getCountryGroupViaPoint().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPointExc())){
                for(String countryGroup:filterVO.getCountryGroupViaPointExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(" )");


            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ) OR( (");

            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ))");
        }else if(isValidGeographicLevelOrigin(filterVO) ){
            query.append(" AND (");

            query.append(" ( (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                for(String airport:filterVO.getAirportCodeOrigin().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeOriginExc())){
                for(String airport:filterVO.getAirportCodeOriginExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                for(String airportGroup:filterVO.getAirportGroupOrigin().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOriginExc())){
                for(String airportGroup:filterVO.getAirportGroupOriginExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                for(String country:filterVO.getCountryCodeOrigin().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeOriginExc())){
                for(String country:filterVO.getCountryCodeOriginExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                for(String countryGroup:filterVO.getCountryGroupOrigin().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOriginExc())){
                for(String countryGroup:filterVO.getCountryGroupOriginExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ) OR( (");

            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ))");
        }else if(isValidGeographicLevelDestination(filterVO) ){
            query.append(" AND (");

            query.append(" ( (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                for(String airport:filterVO.getAirportCodeDestination().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeDestinationExc())){
                for(String airport:filterVO.getAirportCodeDestinationExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                for(String airportGroup:filterVO.getAirportGroupDestination().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestinationExc())){
                for(String airportGroup:filterVO.getAirportGroupDestinationExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                for(String country:filterVO.getCountryCodeDestination().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestinationExc())){
                for(String country:filterVO.getCountryCodeDestinationExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                for(String countryGroup:filterVO.getCountryGroupDestination().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestinationExc())){
                for(String countryGroup:filterVO.getCountryGroupDestinationExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(")");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ) OR( (");

            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ))");
        }else if(isValidGeographicLevelViaPoint(filterVO) ){
            query.append(" AND (");

            query.append(" ( (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                for(String airport:filterVO.getAirportCodeViaPoint().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportCode(filterVO.getAirportCodeViaPointExc())){
                for(String airport:filterVO.getAirportCodeViaPointExc().split(",")){
                    if(isValidAirportCode(airport)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airport);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                for(String airportGroup:filterVO.getAirportGroupViaPoint().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPointExc())){
                for(String airportGroup:filterVO.getAirportGroupViaPointExc().split(",")){
                    if(isValidAirportGroup(airportGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,airportGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                for(String country:filterVO.getCountryCodeViaPoint().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPointExc())){
                for(String country:filterVO.getCountryCodeViaPointExc().split(",")){
                    if(isValidCountryCode(country)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,country);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                for(String countryGroup:filterVO.getCountryGroupViaPoint().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPointExc())){
                for(String countryGroup:filterVO.getCountryGroupViaPointExc().split(",")){
                    if(isValidCountryGroup(countryGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,countryGroup);
                        orFlag=true;
                    }
                }
            }
            query.append(" )");


            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ) OR( (");

            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" ))");
        }else {
            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");

            query.append(" AND (");
            query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||'-'||',') > 0");
            query.append(" AND").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||'-'||',') > 0");
            query.append(" )");
        }
        orFlag=false;
        if(hasValidParameterForDuplicateCheck(filterVO)){
            query.append(" AND ( ");
            query.append(" ( REC.SCCCODINC is NULL  AND REC.SCCGRPINC is NULL AND REC.PRDINC is NULL ");
            query.append(" AND REC.SCCCODEXC is NULL  AND REC.SCCGRPEXC is NULL AND REC.PRDEXC is NULL ) OR (");
            if(isValidParameter(filterVO.getScc())){
                query.append(outerOrFlag?" OR":"");
                query.append(" (");
                for(String scc:filterVO.getScc().split(",")){
                    if(isValidParameter(scc)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SCCCODINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,scc);
                        orFlag=true;
                        outerOrFlag=true;
                    }
                }
                query.append(" )");
            }
            orFlag=false;
            if(isValidParameter(filterVO.getSccExc())){
                query.append(outerOrFlag?" OR":"");
                query.append(" (");
                for(String scc:filterVO.getSccExc().split(",")){
                    if(isValidParameter(scc)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SCCCODEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,scc);
                        orFlag=true;
                        outerOrFlag=true;
                    }
                }
                query.append(" )");
            }
            orFlag=false;
            if(isValidParameter(filterVO.getSccGroup())){
                query.append(outerOrFlag?" OR":"");
                query.append(" (");
                for(String sccGroup:filterVO.getSccGroup().split(",")){
                    if(isValidParameter(sccGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SCCGRPINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,sccGroup);
                        orFlag=true;
                        outerOrFlag=true;
                    }
                }
                query.append(" )");
            }
            orFlag=false;
            if(isValidParameter(filterVO.getSccGroupExc())){
                query.append(outerOrFlag?" OR":"");
                query.append(" (");
                for(String sccGroup:filterVO.getSccGroupExc().split(",")){
                    if(isValidParameter(sccGroup)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SCCGRPEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,sccGroup);
                        orFlag=true;
                        outerOrFlag=true;
                    }
                }
                query.append(" )");
            }
            // Added by A-5867 for ICRD-84146 starts
            orFlag=false;
            if(isValidParameter(filterVO.getProduct())){
                query.append(outerOrFlag?" OR":"");
                query.append(" (");
                for(String product:filterVO.getProduct().split(",")){
                    if(isValidParameter(product)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.PRDINC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,product);
                        orFlag=true;
                        outerOrFlag=true;
                    }
                }
                query.append(" )");
            }
            orFlag=false;
            if(isValidParameter(filterVO.getProductExc())){
                query.append(outerOrFlag?" OR":"");
                query.append(" (");
                for(String product:filterVO.getProductExc().split(",")){
                    if(isValidParameter(product)){
                        query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.PRDEXC, '-')||',', ','||?||',') > 0");
                        query.setParameter(++index,product);
                        orFlag=true;
                        outerOrFlag=true;
                    }
                }
                query.append(" )");
            }
            query.append(" )) ");

            // Added by A-5867 for ICRD-90316 starts
            andFlag=false;
            if(!isValidParameter(filterVO.getScc()) || !isValidParameter(filterVO.getSccExc())||
                    !isValidParameter(filterVO.getSccGroup())||!isValidParameter(filterVO.getSccGroupExc()) ||
                    !isValidParameter(filterVO.getProduct())|| !isValidParameter(filterVO.getProductExc())){

                query.append(" AND (");
                if(!isValidParameter(filterVO.getScc())){
                    query.append(andFlag?" AND":"");
                    query.append(" REC.SCCCODINC is NULL ");
                    andFlag=true;
                }
                if(!isValidParameter(filterVO.getSccExc())){
                    query.append(andFlag?" AND":"");
                    query.append(" REC.SCCCODEXC is NULL  ");
                    andFlag=true;
                }
                if(!isValidParameter(filterVO.getSccGroup())){
                    query.append(andFlag?" AND":"");
                    query.append(" REC.SCCGRPINC is NULL ");
                    andFlag=true;
                }
                if(!isValidParameter(filterVO.getSccGroupExc())){
                    query.append(andFlag?" AND":"");
                    query.append(" REC.SCCGRPEXC is NULL ");
                    andFlag=true;
                }
                if(!isValidParameter(filterVO.getProduct())){
                    query.append(andFlag?" AND":"");
                    query.append(" REC.PRDINC is NULL ");
                    andFlag=true;
                }
                if(!isValidParameter(filterVO.getProductExc())){
                    query.append(andFlag?" AND":"");
                    query.append(" REC.PRDEXC is NULL ");
                    andFlag=true;
                }
                query.append(" )");
            }

            // Added by A-5867 for ICRD-90316 ends

            // Added by A-5867 for ICRD-84146 ends

        } else {
            query.append(" AND REC.SCCCODINC is NULL  AND REC.SCCGRPINC is NULL AND REC.PRDINC is NULL");
            query.append(" AND REC.SCCCODEXC is NULL  AND REC.SCCGRPEXC is NULL AND REC.PRDEXC is NULL");
        }
        if (filterVO.getStartDate() != null && filterVO.getEndDate() != null) {
            query.append(" AND REC.STRDAT <= trunc(?) AND REC.ENDDAT >= trunc(?)");
            query.setParameter(++index,filterVO.getEndDate());
            query.setParameter(++index,filterVO.getStartDate());
        }else if (filterVO.getStartDate() != null ) {
            query.append(" AND REC.ENDDAT >= trunc(?)");
            query.setParameter(++index,filterVO.getStartDate());
        }else if (filterVO.getEndDate() != null) {
            query.append(" AND REC.STRDAT <= trunc(?)");
            query.setParameter(++index,filterVO.getEndDate());
        }
        query.append(" order by CAST(REC.REFNUM AS INTEGER) DESC ");
        return query.getResultList(new DuplicateCheckMapper());
    }

    private boolean hasValidParameterForDuplicateCheck(EmbargoFilterVO filterVO) {
        return (null !=filterVO.getScc() && filterVO.getScc().length()>0) ||
                (null !=filterVO.getSccExc() && filterVO.getSccExc().length()>0)||
                (null !=filterVO.getSccGroup() && filterVO.getSccGroup().length()>0)||
                (null !=filterVO.getSccGroupExc() && filterVO.getSccGroupExc().length()>0)||
                (null !=filterVO.getProduct() && filterVO.getProduct().length()>0)||
                (null !=filterVO.getProductExc() && filterVO.getProductExc().length()>0);
    }
    private boolean isValidParameter(String parameterValue) {
        return null !=parameterValue && parameterValue.length()>0;
    }

    private boolean isValidGeographicLevelOrigin(EmbargoFilterVO filterVO) {
        if((null !=filterVO.getAirportCodeOrigin() && filterVO.getAirportCodeOrigin().length()>0)||
                (null !=filterVO.getAirportCodeOriginExc() && filterVO.getAirportCodeOriginExc().length()>0)||
                (null !=filterVO.getAirportGroupOrigin() && filterVO.getAirportGroupOrigin().length()>0)||
                (null !=filterVO.getAirportGroupOriginExc() && filterVO.getAirportGroupOriginExc().length()>0)||
                (null !=filterVO.getCountryCodeOrigin() && filterVO.getCountryCodeOrigin().length()>0)||
                (null !=filterVO.getCountryCodeOriginExc() && filterVO.getCountryCodeOriginExc().length()>0)||
                (null !=filterVO.getCountryGroupOrigin() && filterVO.getCountryGroupOrigin().length()>0)||
                (null !=filterVO.getCountryGroupOriginExc() && filterVO.getCountryGroupOriginExc().length()>0)){
            return true;
        }
        return false;
    }

    private boolean isValidGeographicLevelDestination(EmbargoFilterVO filterVO) {
        if((null !=filterVO.getAirportCodeDestination() && filterVO.getAirportCodeDestination().length()>0)||
                (null !=filterVO.getAirportCodeDestinationExc() && filterVO.getAirportCodeDestinationExc().length()>0)||
                (null !=filterVO.getAirportGroupDestination() && filterVO.getAirportGroupDestination().length()>0)||
                (null !=filterVO.getAirportGroupDestinationExc() && filterVO.getAirportGroupDestinationExc().length()>0)||
                (null !=filterVO.getCountryCodeDestination() && filterVO.getCountryCodeDestination().length()>0)||
                (null !=filterVO.getCountryCodeDestinationExc() && filterVO.getCountryCodeDestinationExc().length()>0)||
                (null !=filterVO.getCountryGroupDestination() && filterVO.getCountryGroupDestination().length()>0)||
                (null !=filterVO.getCountryGroupDestinationExc() && filterVO.getCountryGroupDestinationExc().length()>0)){
            return true;
        }
        return false;
    }
    private boolean isValidGeographicLevelViaPoint(EmbargoFilterVO filterVO) {
        if((null !=filterVO.getAirportCodeViaPoint() && filterVO.getAirportCodeViaPoint().length()>0)||
                (null !=filterVO.getAirportCodeViaPointExc() && filterVO.getAirportCodeViaPointExc().length()>0)||
                (null !=filterVO.getAirportGroupViaPoint() && filterVO.getAirportGroupViaPoint().length()>0)||
                (null !=filterVO.getAirportGroupViaPointExc() && filterVO.getAirportGroupViaPointExc().length()>0)||
                (null !=filterVO.getCountryCodeViaPoint() && filterVO.getCountryCodeViaPoint().length()>0)||
                (null !=filterVO.getCountryCodeViaPointExc() && filterVO.getCountryCodeViaPointExc().length()>0)||
                (null !=filterVO.getCountryGroupViaPoint() && filterVO.getCountryGroupViaPoint().length()>0)||
                (null !=filterVO.getCountryGroupViaPointExc() && filterVO.getCountryGroupViaPointExc().length()>0)){
            return true;
        }
        return false;
    }
    /** Added by A-5867 for ICRD-68630**/
    public EmbargoSearchVO searchEmbargos(EmbargoFilterVO filterVO)
            throws PersistenceException, SystemException {
        int index = 0;
        boolean orFlag=false;
        String timeString=null;
        Query query = getQueryManager().createNamedNativeQuery(SHARED_EMBARGO_SEARCHEMBARGOS);
        if (filterVO.getCompanyCode() != null && filterVO.getCompanyCode().length() > 0) {
            query.append(" REC.CMPCOD=? ");
            query.setParameter(++index, filterVO.getCompanyCode());
        }
        /*** Search starts **/
        /**To avoid exclude recodes Starts**/
        if(isValidOrigin(filterVO) || isValidDestination(filterVO) || isValidViaPoint(filterVO) || isValidSegmentOrigin(filterVO) || isValidSegmentDestination(filterVO)){ //Modified by A-7924 as part of ICRD-318460 bug
            query.append(" AND REC.ORGARPCODINC='-' AND REC.DSTARPCODINC='-' AND REC.VIAARPCODINC='-' AND REC.SEGORGARPCODINC='-' AND REC.SEGDSTARPCODINC='-'"); //Modified by A-7924 as part of ICRD-318460 bug
            if(isValidOrigin(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                    query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeOrigin());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupOrigin());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeOrigin());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupOrigin());
                }
                query.append(")");
            }
            orFlag=false;
            if(isValidDestination(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                    query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeDestination());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupDestination());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeDestination());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupDestination());
                }
                query.append(")");

            }
            orFlag=false;
            if(isValidViaPoint(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                    query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupViaPoint());
                }
                query.append(")");
            }
            orFlag=false;
            //Added by A-7924 as part of ICRD-318460 bug starts
            if(isValidSegmentOrigin(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeSegmentOrigin())){
                    query.append(" INSTR(','||COALESCE(REC.SEGORGARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeSegmentOrigin());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupSegmentOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupSegmentOrigin());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeSegmentOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeSegmentOrigin());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupSegmentOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupSegmentOrigin());
                }
                query.append(")");
            }
            orFlag=false;
            if(isValidSegmentDestination(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeSegmentDestination())){
                    query.append(" INSTR(','||COALESCE(REC.SEGDSTARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeSegmentDestination());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupSegmentDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupSegmentDestination());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeSegmentDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeSegmentDestination());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupSegmentDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupSegmentDestination());
                }
                query.append(")");

            }
            orFlag=false;
            //Added by A-7924 as part of ICRD-318460 ends
        }
        /**To avoid exclude recodes ends**/
        /**Simple Search CASE:ALL starts**/
        if(filterVO.isSimpleSearch() && isValidOrigin(filterVO) && isValidDestination(filterVO) && isValidViaPoint(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
                orFlag=true;
            }

            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
                orFlag=true;
            }

            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
                orFlag=true;
            }
            orFlag=false;
            query.append(" ) AND NOT (");

            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
                orFlag=true;
            }

            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
                orFlag=true;
            }

            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
                orFlag=true;
            }

            query.append(" ))");
            orFlag=false;
        }
        /**Simple Search CASE:ALL ends**/

        /** case 3 : ORIGIN-VIA-DESTINATION **/
        else if(isValidOrigin(filterVO) && isValidDestination(filterVO) && isValidViaPoint(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||CASE REC.DSTARPCODINC WHEN '-' THEN ? ELSE REC.DSTARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||CASE REC.VIAARPCODINC WHEN '-' THEN ? ELSE REC.VIAARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append("  INSTR(','||CASE REC.ORGARPCODINC WHEN '-' THEN ? ELSE REC.ORGARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||CASE REC.VIAARPCODINC WHEN '-' THEN ? ELSE REC.VIAARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append("  INSTR(','||CASE REC.ORGARPCODINC WHEN '-' THEN ? ELSE REC.ORGARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||CASE REC.DSTARPCODINC WHEN '-' THEN ? ELSE REC.DSTARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
        }else if(isValidOrigin(filterVO) && isValidDestination(filterVO) ){
            /** case 2 : ORIGIN-ALL-DESTINATION **/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||CASE REC.DSTARPCODINC WHEN '-' THEN ? ELSE REC.DSTARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append("  INSTR(','||CASE REC.ORGARPCODINC WHEN '-' THEN ? ELSE REC.ORGARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
        }else if(isValidOrigin(filterVO) && isValidViaPoint(filterVO) ){
            /** case 2 : ORIGIN-VIAPOINT-ALL **/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||CASE REC.VIAARPCODINC WHEN '-' THEN ? ELSE REC.VIAARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append("  INSTR(','||CASE REC.ORGARPCODINC WHEN '-' THEN ? ELSE REC.ORGARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
        }else if(isValidViaPoint(filterVO) && isValidDestination(filterVO) ){
            /** case 2 : ALL-VIAPOINT-DESTINATION **/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||CASE REC.DSTARPCODINC WHEN '-' THEN ? ELSE REC.DSTARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||CASE REC.VIAARPCODINC WHEN '-' THEN ? ELSE REC.VIAARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
        }else if(isValidOrigin(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
        }else if(isValidDestination(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
        }else if(isValidViaPoint(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            //Added by A-7924 as part of ICRD-318460 starts
        }else if(isValidSegmentOrigin(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeSegmentOrigin())){
                query.append(" INSTR(','||COALESCE(REC.SEGORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeSegmentOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupSegmentOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeSegmentOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupSegmentOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeSegmentOrigin())){
                query.append(" INSTR(','||COALESCE(REC.SEGORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeSegmentOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupSegmentOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeSegmentOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupSegmentOrigin());
            }
            query.append(" ))");
        }else if(isValidSegmentDestination(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeSegmentDestination())){
                query.append(" INSTR(','||COALESCE(REC.SEGDSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeSegmentDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupSegmentDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeSegmentDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupSegmentDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeSegmentDestination())){
                query.append(" INSTR(','||COALESCE(REC.SEGDSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeSegmentDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupSegmentDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeSegmentDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupSegmentDestination());
            }
            query.append(" ))");
        }
        //Added by A-7924 as part of ICRD-318460 ends

        query.append(" ) MST ");
        query.append(" WHERE  CMPCOD=?");
        query.setParameter(++index, filterVO.getCompanyCode());
        /** Other parameters**/
        if (filterVO.getApplicableTransactions() != null && filterVO.getApplicableTransactions().length()>0) {
            query.append(" AND INSTR(','||COALESCE(APPTXN, '-')||',', ','||?||',') > 0 ");
            query.setParameter(++index,filterVO.getApplicableTransactions());
        }
        if (filterVO.getEmbargoDate() != null) {
            //query.append(" AND STRDAT = trunc(?) AND ENDDAT = trunc(?)");
            query.append(" AND trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss')) BETWEEN STRDAT AND ENDDAT ");
            //query.setParameter(++index,filterVO.getEmbargoDate());
            query.setParameter(++index,filterVO.getEmbargoDate().toStringFormat("yyyy-MM-dd").substring(0,10));
        }
        if (filterVO.getStartDate() != null && filterVO.getEndDate() != null) {
            query.append(" AND STRDAT <= trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss')) AND ENDDAT >= trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss'))");
            query.setParameter(++index,filterVO.getEndDate().toStringFormat("yyyy-MM-dd").substring(0,10));
            query.setParameter(++index,filterVO.getStartDate().toStringFormat("yyyy-MM-dd").substring(0,10));
        }else if (filterVO.getStartDate() != null ) {
            query.append(" AND ENDDAT >= trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss'))");
            query.setParameter(++index,filterVO.getStartDate().toStringFormat("yyyy-MM-dd").substring(0,10));
        }else if (filterVO.getEndDate() != null) {
            query.append(" AND STRDAT <= trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss'))");
            query.setParameter(++index,filterVO.getEndDate().toStringFormat("yyyy-MM-dd").substring(0,10));
        }
        if(isValidParameter(filterVO)){
            //Added by A-7534 for ICRD-226601
            if(filterVO.getParameterCode().equalsIgnoreCase("PKGINS")){
                query.append(" AND ((INSTR(','||COALESCE(PKGINSINC, '-')||',', ','||?||',') > 0 ");
                query.append(" AND NOT INSTR(','||COALESCE(PKGINSEXC, '-')||',', ','||?||',') > 0 )");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getPackingInstruction());
                query.setParameter(++index, filterVO.getPackingInstruction());
            }
            //--------------------------------------
            else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_SCC)){
                query.append(" AND (((INSTR(','||COALESCE(SCCCODINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(SCCGRPINC, '-')||',', ','||?||',') > 0 )AND ");
                query.append(" NOT(INSTR(','||COALESCE(SCCCODEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(SCCGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getScc());
                query.setParameter(++index, null !=filterVO.getSccGroup()?filterVO.getSccGroup():"");
                query.setParameter(++index, filterVO.getScc());
                query.setParameter(++index, null !=filterVO.getSccGroup()?filterVO.getSccGroup():"");
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_SCC_GROUP)){
                query.append(" AND ((INSTR(','||COALESCE(SCCGRPINC, '-')||',', ','||?||',') > 0 ");
                query.append(" AND NOT INSTR(','||COALESCE(SCCGRPEXC, '-')||',', ','||?||',') > 0 )");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getSccGroup());
                query.setParameter(++index, filterVO.getSccGroup());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_TIME)){
                timeString=filterVO.getTime()+":00";
                // case 1: eq
                query.append(AND_QUERY);
                query.append(" ((to_char(current_date,'dd-MON-yyyy ')|| ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS'))");

                query.append(OR_DATE_QUERY+ ",'dd-MON-yyyy ')|| DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS'))");

                query.append(OR_DATE_QUERY+",'dd-MON-yyyy ')|| VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                // case 2
                query.append(SHARED_SEARCHEMBARGOS);
                query.append(" AND ORGSTRTIM is  NULL AND ORGENDTIM is not NULL)");

                query.append(OR_DATE_QUERY+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND DSTSTRTIM is  NULL AND DSTENDTIM is not NULL)");

                query.append(OR_DATE_QUERY+" ,'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND VIASTRTIM is  NULL AND VIAENDTIM is not NULL))");
                // case 3
                query.append(" OR (((to_char(current_date,'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND ORGENDTIM is  NULL AND ORGSTRTIM is not NULL)");

                query.append(OR_DATE_QUERY+" ,'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND DSTENDTIM is  NULL AND DSTSTRTIM is not NULL)");

                query.append(OR_DATE_QUERY+" ,'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND VIAENDTIM is  NULL AND VIASTRTIM is not NULL))");
                // case 4
                query.append(SHARED_SEARCHEMBARGOS);
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') )");

                query.append(OR_DATE_QUERY+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') )");

                query.append(OR_DATE_QUERY+" ,'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') ))))");

                setParameterNullQuery(query);
                query.append("  ) ");

                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_CARRIER)){
                query.append(" AND ((INSTR(','||COALESCE(ARLCODINC, '-')||',', ','||?||',') > 0 ");
                query.append(" AND NOT(INSTR(','||COALESCE(ARLCODEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getAirlineCode());
                query.setParameter(++index, filterVO.getAirlineCode());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_UNIDs)){   //Added by A-8130 for ICRD-254555
                query.append(" AND ((INSTR(','||COALESCE(UNCLSINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(UNCLSEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getUnIds());
                query.setParameter(++index, filterVO.getUnIds());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_HEIGHT)){
                query.append(" AND ((((HGTSTR =? AND HGTEND =?)");
                query.append(" 	OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND HGTSTR is  NULL)");
                query.append(" 	OR (TO_NUMBER(HGTSTR)<=TO_NUMBER(?)  AND HGTEND is  NULL)");
                query.append(" 	OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(HGTSTR)<=TO_NUMBER(?) )))");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());

            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_LENGTH)){
                query.append(" AND ((((LENSTR =? AND LENEND =?)");
                query.append(" 	OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND LENSTR is  NULL)");
                query.append(" 	OR (TO_NUMBER(LENSTR)<=TO_NUMBER(?)  AND LENEND is  NULL)");
                query.append(" 	OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND TO_NUMBER(LENSTR)<=TO_NUMBER(?) )))");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());

            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_WIDTH)){
                query.append(" AND ((((WIDSTR =? AND WIDEND =?)");
                query.append(" 	OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?)  AND WIDSTR is  NULL)");
                query.append(" 	OR (TO_NUMBER(WIDSTR)<=TO_NUMBER(?)  AND WIDEND is  NULL)");
                query.append(" 	OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?)  AND TO_NUMBER(WIDSTR)<=TO_NUMBER(?) )))");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());

            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_WEIGHT)){
                query.append(" AND ((((WGTSTR =? AND WGTEND =?)");
                query.append(" 	OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?)  AND WGTSTR is  NULL)");
                query.append(" 	OR (TO_NUMBER(WGTSTR)<=TO_NUMBER(?)  AND WGTEND is  NULL)");
                query.append(" 	OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(WGTSTR)<=TO_NUMBER(?) )))");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_NAT)){
                query.append(" AND ((INSTR(','||COALESCE(NATINC, '-')||',', ','||?||',') > 0 )");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getNatureOfGoods());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_COM)){
                query.append(" AND ((INSTR(','||COALESCE(COMINC, '-')||',', ','||?||',') > 0 )");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getCommodity());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_PRD)){
                query.append(" AND ((INSTR(','||COALESCE(PRDINC, '-')||',', ','||?||',') > 0 ");
                query.append(" AND NOT(INSTR(','||COALESCE(PRDEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getProduct());
                query.setParameter(++index, filterVO.getProduct());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_AWBPFX)){
                query.append(" AND ((INSTR(','||COALESCE(AWBPFXINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(AWBPFXEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getAwbPrefix());
                query.setParameter(++index, filterVO.getAwbPrefix());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_FLTNUM)){
                query.append(" AND ((INSTR(','||COALESCE(FLTNUMINC, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getFlightNumber());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_PAYTYP)){
                query.append(" AND ((INSTR(','||COALESCE(PAYTYPINC, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getPaymentType());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_FLTTYP)){
                query.append(" AND ((INSTR(','||COALESCE(FLTTYP, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getFlightType());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_SLTIND)){
                query.append(" AND ((INSTR(','||COALESCE(SLTIND, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getSplitIndicator());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_FLTOWN)){
                query.append(" AND ((INSTR(','||COALESCE(FLTOWRINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(FLTOWREXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getFlightOwner());
                query.setParameter(++index, filterVO.getFlightOwner());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_UNDNUM)){
                query.append(" AND ((INSTR(','||COALESCE(UNDNUMINC, '-')||',', ','||?||',') > 0   ");
                query.append(" AND NOT(INSTR(','||COALESCE(UNDNUMEXC, '-')||',', ','||?||',') > 0 ))  ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getUnNumber());
                query.setParameter(++index, filterVO.getUnNumber());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_DATE)){
                query.append(" AND (((INSTR(','||COALESCE(ORGDATINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(VIADATINC, '-')||',', ','||?||',') > 0  OR ");
                query.append(" INSTR(','||COALESCE(DSTDATINC, '-')||',', ','||?||',') > 0  ) AND ");
                query.append(" NOT(INSTR(','||COALESCE(ORGDATEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(VIADATEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(DSTDATEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_ARL_GROUP)){
                query.append(" AND ((INSTR(','||COALESCE(ARLGRPINC, '-')||',', ','||?||',') > 0 ");
                query.append(" AND NOT INSTR(','||COALESCE(ARLGRPEXC, '-')||',', ','||?||',') > 0 )");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getAirlineGroup());
                query.setParameter(++index, filterVO.getAirlineGroup());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_UNIDs)){   //Added by A-8130 for ICRD-254555
                query.append(" AND ((INSTR(','||COALESCE(UNCLSINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(UNCLSEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getUnIds());
                query.setParameter(++index, filterVO.getUnIds());

            }else if(filterVO.getParameterCode().equalsIgnoreCase(AIRCRAFT_CLASSIFICATION)){ //A-5799
                query.append(" AND (((INSTR(','||COALESCE(ACRCLSORGINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(ACRCLSDSTINC, '-')||',', ','||?||',') > 0  OR ");
                query.append(" INSTR(','||COALESCE(ACRCLSVIAINC, '-')||',', ','||?||',') > 0  ) AND ");
                query.append(" NOT(INSTR(','||COALESCE(ACRCLSORGEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(ACRCLSDSTEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(ACRCLSVIAEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(SERVICE_CARGO_CLASS)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(SRVCRGCLSINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(SRVCRGCLSEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getServiceCargoClass());
                query.setParameter(++index, filterVO.getServiceCargoClass());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(SHIPPER)){ //A-5799
                query.append(" AND (((INSTR(','||COALESCE(SHPINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(SHPGRPINC, '-')||',', ','||?||',') > 0 )AND ");
                query.append(" NOT(INSTR(','||COALESCE(SHPEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(SHPGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getShipperCode());
                query.setParameter(++index, null !=filterVO.getShipperGroup()?filterVO.getShipperGroup():"");
                query.setParameter(++index, filterVO.getShipperCode());
                query.setParameter(++index, null !=filterVO.getShipperGroup()?filterVO.getShipperGroup():"");
            }else if(filterVO.getParameterCode().equalsIgnoreCase(SHIPPER_GROUP)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(SHPGRPINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(SHPGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getShipperGroup());
                query.setParameter(++index, filterVO.getShipperGroup());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(CONSIGNEE)){ //A-5799
                query.append(" AND (((INSTR(','||COALESCE(CNSINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(CNSGRPINC, '-')||',', ','||?||',') > 0 )AND ");
                query.append(" NOT(INSTR(','||COALESCE(CNSEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(CNSGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getConsigneeCode());
                query.setParameter(++index, null !=filterVO.getConsigneeGroup()?filterVO.getConsigneeGroup():"");
                query.setParameter(++index, filterVO.getConsigneeCode());
                query.setParameter(++index, null !=filterVO.getConsigneeGroup()?filterVO.getConsigneeGroup():"");
            }else if(filterVO.getParameterCode().equalsIgnoreCase(CONSIGNEE_GROUP)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(CNSGRPINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(CNSGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getConsigneeGroup());
                query.setParameter(++index, filterVO.getConsigneeGroup());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(SHIPMENT_TYPE)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(SHPTYPINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(SHPTYPEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getShipmentType());
                query.setParameter(++index, filterVO.getShipmentType());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(CONSOL)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(CNSLINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(CNSLEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getConsol());
                query.setParameter(++index, filterVO.getConsol());
            }
            //added by 202766 for IASCB-159851
            else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_UNKSHP)){
                query.append(" AND ((INSTR(','||COALESCE(UNKSHP, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getUnknownShipper());
            }
            else {
            //Do nothing
            }
            //ended
        }
        if (filterVO.getRuleType() != null && filterVO.getRuleType().length() > 0) {
            query.append(" AND RULTYP=?");
            query.setParameter(++index, filterVO.getRuleType());
        }
        if (filterVO.getEmbargoLevel() != null && filterVO.getEmbargoLevel().length() > 0) {
            query.append(" AND RECTYP=?");
            query.setParameter(++index, filterVO.getEmbargoLevel());
        }
        if (filterVO.getCategory() != null && filterVO.getCategory().length() > 0) {
            query.append(" AND CATTYP=?");
            query.setParameter(++index, filterVO.getCategory());
        }
        query.append("	AND RECSTA='A' ");
        query.append("	AND SUSFLG<>'Y' ");
        /*** Search ends **/
        query.append(" order by CAST(REFNUM AS INTEGER) DESC ");
        EmbargoSearchVO embargoSearchVO= new EmbargoSearchVO();
        List<EmbargoDetailsVO> embargoDetailsVOs=query.getResultList(new SearchEmbargoMapper(filterVO,embargoSearchVO));
        embargoSearchVO.setEmbargoDetails(embargoDetailsVOs);
        return embargoSearchVO;

    }

    private void setParameterNullQuery(Query query) {
        query.append(" OR (PRDINC is NULL AND AWBPFXINC is NULL AND ARLCODINC is NULL AND COMINC is NULL AND ORGDATINC is NULL");
        query.append(" AND VIADATINC is NULL AND DSTDATINC is NULL AND FLTNUMINC is NULL AND FLTOWRINC is NULL AND FLTTYP is NULL");
        query.append(" AND HGTSTR is NULL AND HGTEND is NULL AND WIDSTR is NULL AND WIDEND is NULL AND LENSTR is NULL");
        query.append(" AND LENEND is NULL AND WGTSTR is NULL AND WGTEND is NULL AND ORGSTRTIM is NULL AND ORGENDTIM is NULL");
        query.append(" AND VIASTRTIM is NULL AND VIAENDTIM is NULL AND DSTSTRTIM is NULL AND DSTENDTIM is NULL AND NATINC is NULL");
        query.append(" AND PAYTYPINC is NULL AND PRDINC is NULL AND SCCCODINC is NULL AND SCCGRPINC is NULL AND SLTIND is NULL AND UNKSHP is NULL");
        query.append(" AND UNDNUMINC is NULL AND PKGINSINC IS NULL AND SHPINC  IS NULL AND CNSINC IS NULL AND SHPGRPINC IS NULL");
        query.append(" AND CNSGRPINC IS NULL AND ACRCLSORGINC IS NULL AND ACRCLSDSTINC IS NULL AND ACRCLSVIAINC IS NULL");
        query.append(" AND SHPTYPINC IS NULL AND CNSLINC IS NULL AND SRVCRGCLSINC IS NULL) ");
    }

    private boolean isValidParameter(EmbargoFilterVO filterVO) {
        return filterVO.getParameterCode()!=null && filterVO.getParameterCode().length() > 0 &&
                filterVO.getParameterValues()!=null && filterVO.getParameterValues().length() > 0;
    }

    boolean isValidAirportCode(String airportCode){
        if(null !=airportCode && airportCode.length()>0){
            return true;
        }
        return false;
    }

    boolean isValidAirportGroup(String airportGroup){
        if(null !=airportGroup && airportGroup.length()>0){
            return true;
        }
        return false;
    }

    boolean isValidCountryCode(String countryCode){
        if(null !=countryCode && countryCode.length()>0){
            return true;
        }
        return false;
    }

    boolean isValidCountryGroup(String countryGroup){
        if(null !=countryGroup && countryGroup.length()>0){
            return true;
        }
        return false;
    }

    boolean isValidOrigin(EmbargoFilterVO filterVO){
        if(null !=filterVO.getOriginType() && filterVO.getOriginType().length()>0 &&
                null !=filterVO.getOrigin() && filterVO.getOrigin().length()>0){
            return true;
        }
        return false;
    }

    boolean isValidDestination(EmbargoFilterVO filterVO){
        if(null !=filterVO.getDestinationType() && filterVO.getDestinationType().length()>0 &&
                null !=filterVO.getDestination() && filterVO.getDestination().length()>0){
            return true;
        }
        return false;
    }

    boolean isValidViaPoint(EmbargoFilterVO filterVO){
        if(null !=filterVO.getViaPointType() && filterVO.getViaPointType().length()>0 &&
                null !=filterVO.getViaPoint() && filterVO.getViaPoint().length()>0){
            return true;
        }
        return false;
    }
    //Added by A-7924 as part of ICRD-318460 starts
    boolean isValidSegmentOrigin(EmbargoFilterVO filterVO){
        if(null !=filterVO.getSegmentOriginType() && filterVO.getSegmentOriginType().length()>0 &&
                null !=filterVO.getSegmentOrigin() && filterVO.getSegmentOrigin().length()>0){
            return true;
        }
        return false;
    }
    boolean isValidSegmentDestination(EmbargoFilterVO filterVO){
        if(null !=filterVO.getSegmentDestinationType() && filterVO.getSegmentDestinationType().length()>0 &&
                null !=filterVO.getSegmentDestination() && filterVO.getSegmentDestination().length()>0){
            return true;
        }
        return false;
    }
    //Added by A-7924 as part of ICRD-318460 ends
    @Override
    public Page<RegulatoryMessageVO> findRegulatoryMessages(RegulatoryMessageFilterVO regulatoryMessageFilter) throws SystemException {
        // TO DO change query
        StringBuilder rankQuery=new StringBuilder();
        rankQuery.append(REGULATORY_COMPOSE_RANK_QUERY);
        rankQuery.append("RESULT_TABLE. SERNUM, ");
        rankQuery.append("RESULT_TABLE. CMPCOD");
        rankQuery.append(") AS RANK FROM ( ");
        String queryString = getQueryManager().getNamedNativeQueryString(FIND_REGULATORY_COMPOSE_MESSAGES);
        String baseQuery = rankQuery.append(queryString).toString();
        PageableNativeQuery<RegulatoryMessageVO> query = new PageableNativeQuery<RegulatoryMessageVO>(
                regulatoryMessageFilter.getTotalRecordCount(),baseQuery,new RegulatoryMessagesMapper());
        int parCount = 0;
        if (regulatoryMessageFilter.getCompanyCode()!= null && regulatoryMessageFilter.getCompanyCode().length() > 0) {
            query.append(" CMPMSG.CMPCOD=?");
            query.setParameter(++parCount,regulatoryMessageFilter.getCompanyCode());
        }
        if (regulatoryMessageFilter.getRolGroup()!= null && regulatoryMessageFilter.getRolGroup().length() > 0) {
            query.append(" AND INSTR(','||CMPMSG.ROLGRPCOD||',', ','||?||',') > 0 ");
            query.setParameter(++parCount,regulatoryMessageFilter.getRolGroup());
        }
        if (regulatoryMessageFilter.getStartDate()!= null && regulatoryMessageFilter.getStartDate().length() > 0 &&
                regulatoryMessageFilter.getEndDate()!= null && regulatoryMessageFilter.getEndDate().length() > 0) {

            if(regulatoryMessageFilter.getEndDate().length() > 10 && regulatoryMessageFilter.getStartDate().length() >10) {
                query.append(" AND CMPMSG.STRDAT <= TO_DATE(?, 'dd-MON-yyyy') AND CMPMSG.ENDDAT >= TO_DATE(?, 'dd-MON-yyyy') ");
            } else {
                query.append(" AND CMPMSG.STRDAT <= TO_DATE(?, 'dd-mm-yyyy') AND CMPMSG.ENDDAT >= TO_DATE(?, 'dd-mm-yyyy') ");
            }
            query.setParameter(++parCount,regulatoryMessageFilter.getEndDate());
            query.setParameter(++parCount,regulatoryMessageFilter.getStartDate());
        }
        query.append(REGULATORY_COMPOSE_SUFFIX_QUERY);
        log.log(Log.FINE, "Query------->", query);
        return query.getPage(regulatoryMessageFilter.getPageNumber());
    }

    @Override
    public  List<RegulatoryMessageVO> findAllRegulatoryMessages(RegulatoryMessageFilterVO regulatoryMessageFilter) throws SystemException {
        int index = 0;
        Query query = getQueryManager().createNamedNativeQuery(FIND_REGULATORY_COMPOSE_MESSAGES);
        if (regulatoryMessageFilter.getCompanyCode()!= null && regulatoryMessageFilter.getCompanyCode().length() > 0) {

            if(regulatoryMessageFilter.getCurrentDate().toSqlDate().toString().length() > 10) {
                query.append(" CMPMSG.CMPCOD=? AND TO_DATE(?, 'dd-MON-yyyy') BETWEEN CMPMSG.STRDAT AND CMPMSG.ENDDAT");
                query.setParameter(++index,regulatoryMessageFilter.getCompanyCode());
                query.setParameter(++index,regulatoryMessageFilter.getCurrentDate());
            } else {
                query.append(" CMPMSG.CMPCOD=? AND TO_DATE(?, 'dd-mm-yyyy') BETWEEN CMPMSG.STRDAT AND CMPMSG.ENDDAT");
                query.setParameter(++index,regulatoryMessageFilter.getCompanyCode());
                String formattedDate = regulatoryMessageFilter.getCurrentDate().toStringFormat("dd-mm-yyyy");
                query.setParameter(++index,formattedDate);
            }

        }
        if (regulatoryMessageFilter.getRolGroup()!= null && regulatoryMessageFilter.getRolGroup().length() > 0) {
            query.append(" AND INSTR(','||CMPMSG.ROLGRPCOD||',', ','||?||',') > 0 ");
            query.setParameter(++index,regulatoryMessageFilter.getRolGroup());
        }
        query.append(" order by CMPMSG.STRDAT");
        log.log(Log.FINE, "Query------->", query);

        return query.getResultList(new RegulatoryMessagesMapper());
    }

    /**
     * Method to call procedure to update embargo view
     *
     * @return
     * @throws SystemException
     */
    public void updateEmbargoView()throws SystemException {
        log.entering("EmbargoRulesSqlDAO", "updateEmbargoView");
        Procedure updateEmbargoViewProcedure =
                getQueryManager().createNamedNativeProcedure(UPDATE_EMBARGO_PROCEDURE);
        updateEmbargoViewProcedure.execute();
        log.exiting("EmbargoRulesSqlDAO", "updateEmbargoView");
    }

    /**
     * This method finds embargos/regulatory compliance which meet the filter
     * @param filterVO
     * @param pageNumber To be reviewed
     * @return Collection
     * @throws PersistenceException
     * @throws SystemException
     * Page<EmbargoDetailsVO>
     */
    @Override
    public Page<EmbargoDetailsVO> findRegulatoryComplianceRules(EmbargoFilterVO filterVO,
                                                                int pageNumber) throws PersistenceException, SystemException {

        int index = 0;
        boolean orFlag=false;
        String timeString=null;

        StringBuilder rankQuery=new StringBuilder();
        rankQuery.append(REGULATORY_COMPLIANCE_RULES_RANK_QUERY);
        rankQuery.append("CAST(RESULT_TABLE.REFNUM AS INTEGER) DESC");
        rankQuery.append(") AS RANK FROM ( ");
        String queryString = getQueryManager().getNamedNativeQueryString(SHARED_EMBARGO_SEARCHEMBARGOS);
        String baseQuery = rankQuery.append(queryString).toString();
        PageableNativeQuery<EmbargoDetailsVO> query = new PageableNativeQuery<EmbargoDetailsVO>(
                filterVO.getTotalRecordCount(),
                baseQuery,new ListRegulatoryComplianceRulesMapper(filterVO));

        //Query query = getQueryManager().createNamedNativeQuery(SHARED_EMBARGO_SEARCHEMBARGOS);
        if (filterVO.getCompanyCode() != null && filterVO.getCompanyCode().length() > 0) {
            query.append(" REC.CMPCOD=? ");
            query.setParameter(++index, filterVO.getCompanyCode());
        }
        /*** Search starts **/
        /**To avoid exclude recodes Starts**/
        if(isValidOrigin(filterVO) || isValidDestination(filterVO) || isValidViaPoint(filterVO) || isValidSegmentOrigin(filterVO) || isValidSegmentDestination(filterVO)){ //Modified by A-7924 as part of ICRD-318460 bug
            query.append(" AND REC.ORGARPCODINC='-' AND REC.DSTARPCODINC='-' AND REC.VIAARPCODINC='-' AND REC.SEGORGARPCODINC='-' AND REC.SEGDSTARPCODINC='-'"); //Modified by A-7924 as part of ICRD-318460 bug
            if(isValidOrigin(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                    query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeOrigin());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupOrigin());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeOrigin());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupOrigin());
                }
                query.append(")");
            }
            orFlag=false;
            if(isValidDestination(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                    query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeDestination());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupDestination());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeDestination());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupDestination());
                }
                query.append(")");

            }
            orFlag=false;
            if(isValidViaPoint(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                    query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupViaPoint());
                }
                query.append(")");
            }
            orFlag=false;
            //Added by A-7924 as part of ICRD-318460 bug starts
            if(isValidSegmentOrigin(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeSegmentOrigin())){
                    query.append(" INSTR(','||COALESCE(REC.SEGORGARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeSegmentOrigin());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupSegmentOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupSegmentOrigin());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeSegmentOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeSegmentOrigin());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupSegmentOrigin())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupSegmentOrigin());
                }
                query.append(")");
            }
            orFlag=false;
            if(isValidSegmentDestination(filterVO)){
                query.append(" AND NOT (");
                if(isValidAirportCode(filterVO.getAirportCodeSegmentDestination())){
                    query.append(" INSTR(','||COALESCE(REC.SEGDSTARPCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportCodeSegmentDestination());
                    orFlag=true;
                }
                if(isValidAirportGroup(filterVO.getAirportGroupSegmentDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getAirportGroupSegmentDestination());
                    orFlag=true;
                }
                if(isValidCountryCode(filterVO.getCountryCodeSegmentDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryCodeSegmentDestination());
                    orFlag=true;
                }
                if(isValidCountryGroup(filterVO.getCountryGroupSegmentDestination())){
                    query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                    query.setParameter(++index,filterVO.getCountryGroupSegmentDestination());
                }
                query.append(")");

            }
            orFlag=false;
            //Added by A-7924 as part of ICRD-318460 ends
        }
        /**To avoid exclude recodes ends**/
        /**Simple Search CASE:ALL starts**/
        if(filterVO.isSimpleSearch() && isValidOrigin(filterVO) && isValidDestination(filterVO) && isValidViaPoint(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
                orFlag=true;
            }

            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
                orFlag=true;
            }

            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
                orFlag=true;
            }
            orFlag=false;
            query.append(" ) AND NOT (");

            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
                orFlag=true;
            }

            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
                orFlag=true;
            }

            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
                orFlag=true;
            }

            query.append(" ))");
            orFlag=false;
        }
        /**Simple Search CASE:ALL ends**/

        /** case 3 : ORIGIN-VIA-DESTINATION **/
        else if(isValidOrigin(filterVO) && isValidDestination(filterVO) && isValidViaPoint(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||CASE REC.DSTARPCODINC WHEN '-' THEN ? ELSE REC.DSTARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||CASE REC.VIAARPCODINC WHEN '-' THEN ? ELSE REC.VIAARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append("  INSTR(','||CASE REC.ORGARPCODINC WHEN '-' THEN ? ELSE REC.ORGARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||CASE REC.VIAARPCODINC WHEN '-' THEN ? ELSE REC.VIAARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append("  INSTR(','||CASE REC.ORGARPCODINC WHEN '-' THEN ? ELSE REC.ORGARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||CASE REC.DSTARPCODINC WHEN '-' THEN ? ELSE REC.DSTARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
        }else if(isValidOrigin(filterVO) && isValidDestination(filterVO) ){
            /** case 2 : ORIGIN-ALL-DESTINATION **/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||CASE REC.DSTARPCODINC WHEN '-' THEN ? ELSE REC.DSTARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append("  INSTR(','||CASE REC.ORGARPCODINC WHEN '-' THEN ? ELSE REC.ORGARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
        }else if(isValidOrigin(filterVO) && isValidViaPoint(filterVO) ){
            /** case 2 : ORIGIN-VIAPOINT-ALL **/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||CASE REC.VIAARPCODINC WHEN '-' THEN ? ELSE REC.VIAARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append("  INSTR(','||CASE REC.ORGARPCODINC WHEN '-' THEN ? ELSE REC.ORGARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
        }else if(isValidViaPoint(filterVO) && isValidDestination(filterVO) ){
            /** case 2 : ALL-VIAPOINT-DESTINATION **/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||CASE REC.DSTARPCODINC WHEN '-' THEN ? ELSE REC.DSTARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
            orFlag=false;

            /**/
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||CASE REC.VIAARPCODINC WHEN '-' THEN ? ELSE REC.VIAARPCODINC END||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
        }else if(isValidOrigin(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeOrigin())){
                query.append(" INSTR(','||COALESCE(REC.ORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.ORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupOrigin());
            }
            query.append(" ))");
        }else if(isValidDestination(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeDestination())){
                query.append(" INSTR(','||COALESCE(REC.DSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.DSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupDestination());
            }
            query.append(" ))");
        }else if (filterVO.getParameterCode() !=null && filterVO.getParameterCode().equalsIgnoreCase("UNWGT")) { //Added by A-8130 for ICRD-232462
            query.append(" AND ((((UNWGTSTR =? AND UNWGTEND =?)");
            query.append(" \tOR (TO_NUMBER(UNWGTEND)>=TO_NUMBER(?)  AND UNWGTSTR is  NULL)");
            query.append(" \tOR (TO_NUMBER(UNWGTSTR)<=TO_NUMBER(?)  AND UNWGTEND is  NULL)");
            query.append(" \tOR (TO_NUMBER(UNWGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(UNWGTSTR)<=TO_NUMBER(?) )))");
            setParameterNullQuery(query);
            query.append("  ) ");
            index++; query.setParameter(index, filterVO.getUnWeight());
            index++; query.setParameter(index, filterVO.getUnWeight());
            index++; query.setParameter(index, filterVO.getUnWeight());
            index++; query.setParameter(index, filterVO.getUnWeight());
            index++; query.setParameter(index, filterVO.getUnWeight());
            index++; query.setParameter(index, filterVO.getUnWeight());
        }else if (filterVO.getParameterCode() !=null && filterVO.getParameterCode().equalsIgnoreCase("DVCST")) {
            query.append(" AND ((((DVCSTSTR =? AND DVCSTEND =?)");
            query.append(" \tOR (TO_NUMBER(DVCSTEND)>=TO_NUMBER(?)  AND DVCSTSTR is  NULL)");
            query.append(" \tOR (TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?)  AND DVCSTEND is  NULL)");
            query.append(" \tOR (TO_NUMBER(DVCSTEND)>=TO_NUMBER(?)  AND TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?))))");
            setParameterNullQuery(query);
            query.append("  ) ");
            index++; query.setParameter(index, filterVO.getDvForCustoms());
            index++; query.setParameter(index, filterVO.getDvForCustoms());
            index++; query.setParameter(index, filterVO.getDvForCustoms());
            index++; query.setParameter(index, filterVO.getDvForCustoms());
            index++; query.setParameter(index, filterVO.getDvForCustoms());
            index++; query.setParameter(index, filterVO.getDvForCustoms());
        }

        else if (filterVO.getParameterCode() !=null && filterVO.getParameterCode().equalsIgnoreCase("DVCRG")) {
            query.append(" AND ((((DVCRGSTR =? AND DVCRGEND =?)");
            query.append(" \tOR (TO_NUMBER(DVCRGEND)>=TO_NUMBER(?)  AND DVCRGSTR is  NULL)");
            query.append(" \tOR (TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?)  AND DVCRGEND is  NULL)");
            query.append(" \tOR (TO_NUMBER(DVCRGEND)>=TO_NUMBER(?)  AND TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?) )))");
            setParameterNullQuery(query);
            query.append("  ) ");
            index++; query.setParameter(index, filterVO.getDvForCarriage());
            index++; query.setParameter(index, filterVO.getDvForCarriage());
            index++; query.setParameter(index, filterVO.getDvForCarriage());
            index++; query.setParameter(index, filterVO.getDvForCarriage());
            index++; query.setParameter(index, filterVO.getDvForCarriage());
            index++; query.setParameter(index, filterVO.getDvForCarriage());
        } else if(isValidViaPoint(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeViaPoint())){
                query.append(" INSTR(','||COALESCE(REC.VIAARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeViaPoint());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIAARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupViaPoint());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeViaPoint());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupViaPoint())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.VIACNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupViaPoint());
            }
            query.append(" ))");
        }//Added by A-7924 as part of ICRD-318460 starts
        else if(isValidSegmentOrigin(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeSegmentOrigin())){
                query.append(" INSTR(','||COALESCE(REC.SEGORGARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeSegmentOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupSegmentOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeSegmentOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupSegmentOrigin());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeSegmentOrigin())){
                query.append(" INSTR(','||COALESCE(REC.SEGORGARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeSegmentOrigin());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupSegmentOrigin());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeSegmentOrigin());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupSegmentOrigin())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGORGCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupSegmentOrigin());
            }
            query.append(" ))");
        }else if(isValidSegmentDestination(filterVO)){
            query.append(" UNION SELECT REC.* FROM REC_MVW REC WHERE  REC.CMPCOD=?");
            query.setParameter(++index, filterVO.getCompanyCode());
            query.append(" AND ((");
            if(isValidAirportCode(filterVO.getAirportCodeSegmentDestination())){
                query.append(" INSTR(','||COALESCE(REC.SEGDSTARPCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeSegmentDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTARPGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupSegmentDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTCODINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeSegmentDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTGRPINC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupSegmentDestination());
            }
            orFlag=false;
            query.append(" ) AND NOT (");
            if(isValidAirportCode(filterVO.getAirportCodeSegmentDestination())){
                query.append(" INSTR(','||COALESCE(REC.SEGDSTARPCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportCodeSegmentDestination());
                orFlag=true;
            }
            if(isValidAirportGroup(filterVO.getAirportGroupSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTARPGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getAirportGroupSegmentDestination());
                orFlag=true;
            }
            if(isValidCountryCode(filterVO.getCountryCodeSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTCODEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryCodeSegmentDestination());
                orFlag=true;
            }
            if(isValidCountryGroup(filterVO.getCountryGroupSegmentDestination())){
                query.append(orFlag?" OR":"").append(" INSTR(','||COALESCE(REC.SEGDSTCNTGRPEXC, '-')||',', ','||?||',') > 0");
                query.setParameter(++index,filterVO.getCountryGroupSegmentDestination());
            }
            query.append(" ))");
        }
        //Added by A-7924 as part of ICRD-318460 ends

        query.append(" ) MST");
        query.append(" WHERE  CMPCOD=?");
        query.setParameter(++index, filterVO.getCompanyCode());
        /** Other parameters**/
        if (filterVO.getApplicableTransactions() != null && filterVO.getApplicableTransactions().length()>0) {
            query.append(" AND INSTR(','||COALESCE(APPTXN, '-')||',', ','||?||',') > 0 ");
            query.setParameter(++index,filterVO.getApplicableTransactions());
        }
        if (filterVO.getEmbargoDate() != null) {
            //query.append(" AND STRDAT = trunc(?) AND ENDDAT = trunc(?)");
            query.append(" AND trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss')) BETWEEN STRDAT AND ENDDAT ");
            //query.setParameter(++index,filterVO.getEmbargoDate());
            query.setParameter(++index,filterVO.getEmbargoDate().toStringFormat("yyyy-MM-dd").substring(0,10));
        }
        if (filterVO.getStartDate() != null && filterVO.getEndDate() != null) {
            query.append(" AND STRDAT <= trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss')) AND ENDDAT >= trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss'))");
            query.setParameter(++index,filterVO.getEndDate().toStringFormat("yyyy-MM-dd").substring(0,10));
            query.setParameter(++index,filterVO.getStartDate().toStringFormat("yyyy-MM-dd").substring(0,10));
        }else if (filterVO.getStartDate() != null ) {
            query.append(" AND ENDDAT >= trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss'))");
            query.setParameter(++index,filterVO.getStartDate().toStringFormat("yyyy-MM-dd").substring(0,10));
        }else if (filterVO.getEndDate() != null) {
            query.append(" AND STRDAT <= trunc(to_date(?,'yyyy-mm-dd hh24:mi:ss'))");
            query.setParameter(++index,filterVO.getEndDate().toStringFormat("yyyy-MM-dd").substring(0,10));
        }
        if(isValidParameter(filterVO)){
            if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_SCC)){
                query.append(" AND (((INSTR(','||COALESCE(SCCCODINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(SCCGRPINC, '-')||',', ','||?||',') > 0 )AND ");
                query.append(" NOT(INSTR(','||COALESCE(SCCCODEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(SCCGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                //Added by E-1190 for ICRD-177127
                if(filterVO.isSimpleSearch()){
                    setParameterNullQuery(query);
                }
                query.append("  ) ");
                query.setParameter(++index, filterVO.getScc());
                query.setParameter(++index, null !=filterVO.getSccGroup()?filterVO.getSccGroup():"");
                query.setParameter(++index, filterVO.getScc());
                query.setParameter(++index, null !=filterVO.getSccGroup()?filterVO.getSccGroup():"");
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_SCC_GROUP)){
                query.append(" AND ((INSTR(','||COALESCE(SCCGRPINC, '-')||',', ','||?||',') > 0 ");
                query.append(" AND NOT INSTR(','||COALESCE(SCCGRPEXC, '-')||',', ','||?||',') > 0 )");
                //Added by E-1190 for ICRD-177127
                if(filterVO.isSimpleSearch()){
                    setParameterNullQuery(query);
                }
                query.append("  ) ");
                query.setParameter(++index, filterVO.getSccGroup());
                query.setParameter(++index, filterVO.getSccGroup());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_TIME)){
                timeString=filterVO.getTime()+":00";
                // case 1: eq
                query.append(AND_QUERY);
                query.append(" ((to_char(current_date,'dd-MON-yyyy ')|| ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS'))");

                query.append(" OR ((to_char(current_date,'dd-MON-yyyy ')|| DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS'))");

                query.append(" OR ((to_char(current_date,'dd-MON-yyyy ')|| VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') =(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
                // case 2
                query.append(SHARED_SEARCHEMBARGOS);
                query.append(" AND ORGSTRTIM is  NULL AND ORGENDTIM is not NULL)");

                query.append(" OR ((to_char(current_date,'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND DSTSTRTIM is  NULL AND DSTENDTIM is not NULL)");

                query.append(" OR ((to_char(current_date,'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND VIASTRTIM is  NULL AND VIAENDTIM is not NULL))");
                // case 3
                query.append(" OR (((to_char(current_date,'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND ORGENDTIM is  NULL AND ORGSTRTIM is not NULL)");

                query.append(" OR ((to_char(current_date,'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND DSTENDTIM is  NULL AND DSTSTRTIM is not NULL)");

                query.append(" OR ((to_char(current_date,'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND VIAENDTIM is  NULL AND VIASTRTIM is not NULL))");
                // case 4
                query.append(SHARED_SEARCHEMBARGOS);
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') )");

                query.append(" OR ((to_char(current_date,'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') )");

                query.append(" OR ((to_char(current_date,'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
                query.append(" AND (to_char(current_date,'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=(to_char(current_date,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') ))))");

                setParameterNullQuery(query);
                query.append("  ) ");

                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
                query.setParameter(++index,timeString);
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_CARRIER)){
                query.append(" AND ((INSTR(','||COALESCE(ARLCODINC, '-')||',', ','||?||',') > 0 ");
                query.append(" AND NOT(INSTR(','||COALESCE(ARLCODEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getAirlineCode());
                query.setParameter(++index, filterVO.getAirlineCode());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_HEIGHT)){
                query.append(" AND ((((HGTSTR =? AND HGTEND =?)");
                query.append(" 	OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND HGTSTR is  NULL)");
                query.append(" 	OR (TO_NUMBER(HGTSTR)<=TO_NUMBER(?)  AND HGTEND is  NULL)");
                query.append(" 	OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(HGTSTR)<=TO_NUMBER(?) )))");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());
                query.setParameter(++index,filterVO.getHeight());

            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_LENGTH)){
                query.append(" AND ((((LENSTR =? AND LENEND =?)");
                query.append(" 	OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND LENSTR is  NULL)");
                query.append(" 	OR (TO_NUMBER(LENSTR)<=TO_NUMBER(?)  AND LENEND is  NULL)");
                query.append(" 	OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND TO_NUMBER(LENSTR)<=TO_NUMBER(?) )))");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());
                query.setParameter(++index,filterVO.getLength());

            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_WIDTH)){
                query.append(" AND ((((WIDSTR =? AND WIDEND =?)");
                query.append(" 	OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?)  AND WIDSTR is  NULL)");
                query.append(" 	OR (TO_NUMBER(WIDSTR)<=TO_NUMBER(?)  AND WIDEND is  NULL)");
                query.append(" 	OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?)  AND TO_NUMBER(WIDSTR)<=TO_NUMBER(?) )))");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());
                query.setParameter(++index,filterVO.getWidth());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_WEIGHT)){
                query.append(" AND ((((WGTSTR =? AND WGTEND =?)");
                query.append(" 	OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?)  AND WGTSTR is  NULL)");
                query.append(" 	OR (TO_NUMBER(WGTSTR)<=TO_NUMBER(?)  AND WGTEND is  NULL)");
                query.append(" 	OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(WGTSTR)<=TO_NUMBER(?) )))");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
                query.setParameter(++index,filterVO.getWeight());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_NAT)){
                query.append(" AND ((INSTR(','||COALESCE(NATINC, '-')||',', ','||?||',') > 0 )");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getNatureOfGoods());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_COM)){
                query.append(" AND ((INSTR(','||COALESCE(COMINC, '-')||',', ','||?||',') > 0 )");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getCommodity());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_PRD)){
                query.append(" AND ((INSTR(','||COALESCE(PRDINC, '-')||',', ','||?||',') > 0 ");
                query.append(" AND NOT(INSTR(','||COALESCE(PRDEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getProduct());
                query.setParameter(++index, filterVO.getProduct());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_AWBPFX)){
                query.append(" AND ((INSTR(','||COALESCE(AWBPFXINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(AWBPFXEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getAwbPrefix());
                query.setParameter(++index, filterVO.getAwbPrefix());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_FLTNUM)){
                query.append(" AND ((INSTR(','||COALESCE(FLTNUMINC, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getFlightNumber());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_PAYTYP)){
                query.append(" AND ((INSTR(','||COALESCE(PAYTYPINC, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getPaymentType());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_FLTTYP)){
                query.append(" AND ((INSTR(','||COALESCE(FLTTYP, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getFlightType());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_SLTIND)){
                query.append(" AND ((INSTR(','||COALESCE(SLTIND, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getSplitIndicator());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_FLTOWN)){
                query.append(" AND ((INSTR(','||COALESCE(FLTOWRINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(FLTOWREXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getFlightOwner());
                query.setParameter(++index, filterVO.getFlightOwner());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_UNDNUM)){
                query.append(" AND ((INSTR(','||COALESCE(UNDNUMINC, '-')||',', ','||?||',') > 0   ");
                query.append(" AND NOT(INSTR(','||COALESCE(UNDNUMEXC, '-')||',', ','||?||',') > 0 ))  ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getUnNumber());
                query.setParameter(++index, filterVO.getUnNumber());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_DATE)){
                query.append(" AND (((INSTR(','||COALESCE(ORGDATINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(VIADATINC, '-')||',', ','||?||',') > 0  OR ");
                query.append(" INSTR(','||COALESCE(DSTDATINC, '-')||',', ','||?||',') > 0  ) AND ");
                query.append(" NOT(INSTR(','||COALESCE(ORGDATEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(VIADATEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(DSTDATEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
                query.setParameter(++index, filterVO.getGeographicalDate());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(AIRCRAFT_CLASSIFICATION)){ //A-5799
                query.append(" AND (((INSTR(','||COALESCE(ACRCLSORGINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(ACRCLSDSTINC, '-')||',', ','||?||',') > 0  OR ");
                query.append(" INSTR(','||COALESCE(ACRCLSVIAINC, '-')||',', ','||?||',') > 0  ) AND ");
                query.append(" NOT(INSTR(','||COALESCE(ACRCLSORGEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(ACRCLSDSTEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(ACRCLSVIAEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
                query.setParameter(++index, filterVO.getAircraftClassification());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(SERVICE_CARGO_CLASS)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(SRVCRGCLSINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(SRVCRGCLSEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getServiceCargoClass());
                query.setParameter(++index, filterVO.getServiceCargoClass());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(SHIPPER)){ //A-5799
                query.append(" AND (((INSTR(','||COALESCE(SHPINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(SHPGRPINC, '-')||',', ','||?||',') > 0 )AND ");
                query.append(" NOT(INSTR(','||COALESCE(SHPEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(SHPGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                if(filterVO.isSimpleSearch()){
                    setParameterNullQuery(query);
                }
                query.append("  ) ");
                query.setParameter(++index, filterVO.getShipperCode());
                query.setParameter(++index, null !=filterVO.getShipperGroup()?filterVO.getShipperGroup():"");
                query.setParameter(++index, filterVO.getShipperCode());
                query.setParameter(++index, null !=filterVO.getShipperGroup()?filterVO.getShipperGroup():"");
            }else if(filterVO.getParameterCode().equalsIgnoreCase(SHIPPER_GROUP)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(SHPGRPINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(SHPGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getShipperGroup());
                query.setParameter(++index, filterVO.getShipperGroup());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(CONSIGNEE)){ //A-5799
                query.append(" AND (((INSTR(','||COALESCE(CNSINC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(CNSGRPINC, '-')||',', ','||?||',') > 0 )AND ");
                query.append(" NOT(INSTR(','||COALESCE(CNSEXC, '-')||',', ','||?||',') > 0 OR ");
                query.append(" INSTR(','||COALESCE(CNSGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                if(filterVO.isSimpleSearch()){
                    setParameterNullQuery(query);
                }
                query.append("  ) ");
                query.setParameter(++index, filterVO.getConsigneeCode());
                query.setParameter(++index, null !=filterVO.getConsigneeGroup()?filterVO.getConsigneeGroup():"");
                query.setParameter(++index, filterVO.getConsigneeCode());
                query.setParameter(++index, null !=filterVO.getConsigneeGroup()?filterVO.getConsigneeGroup():"");
            }else if(filterVO.getParameterCode().equalsIgnoreCase(CONSIGNEE_GROUP)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(CNSGRPINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(CNSGRPEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getConsigneeGroup());
                query.setParameter(++index, filterVO.getConsigneeGroup());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(SHIPMENT_TYPE)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(SHPTYPINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(SHPTYPEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getShipmentType());
                query.setParameter(++index, filterVO.getShipmentType());
            }else if(filterVO.getParameterCode().equalsIgnoreCase(CONSOL)){ //A-5799
                query.append(" AND ((INSTR(','||COALESCE(CNSLINC, '-')||',', ','||?||',') > 0  ");
                query.append(" AND NOT(INSTR(','||COALESCE(CNSLEXC, '-')||',', ','||?||',') > 0 )) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getConsol());
                query.setParameter(++index, filterVO.getConsol());
                //added by 202766 for IASCB-159851
            }else if(filterVO.getParameterCode().equalsIgnoreCase(PARAMETER_CODE_UNKSHP)){
                query.append(" AND ((INSTR(','||COALESCE(UNKSHP, '-')||',', ','||?||',') > 0 ) ");
                setParameterNullQuery(query);
                query.append("  ) ");
                query.setParameter(++index, filterVO.getUnknownShipper());
            }
            else {
            	//Do nothing
            }
            
        }
        if (filterVO.getRuleType() != null && filterVO.getRuleType().length() > 0) {
            query.append(" AND RULTYP=?");
            query.setParameter(++index, filterVO.getRuleType());
        }
        if (filterVO.getEmbargoLevel() != null && filterVO.getEmbargoLevel().length() > 0) {
            query.append(" AND RECTYP=?");
            query.setParameter(++index, filterVO.getEmbargoLevel());
        }
        if (filterVO.getCategory() != null && filterVO.getCategory().length() > 0) {
            query.append(" AND CATTYP=?");
            query.setParameter(++index, filterVO.getCategory());
        }
        query.append("	AND RECSTA='A' ");
        query.append("	AND SUSFLG<>'Y' ");
        /*** Search ends **/
        //query.append(" order by CAST(REFNUM AS INTEGER) DESC ");

        query.append(REGULATORY_COMPLIANCE_RULES_SUFFIX_QUERY);

        return query.getPage(filterVO.getPageNumber());


    }
    /**
     * This method finds embargos/exception embargos which meet the filter
     * @param exceptionEmbargoFilterVO
     * @param pageNumber To be reviewed
     * @return Collection
     * @throws SystemException
     * Page<ExceptionEmbargoDetailsVO>
     */
    @Override
    public Page<ExceptionEmbargoDetailsVO> findExceptionEmbargoDetails(ExceptionEmbargoFilterVO exceptionEmbargoFilterVO)throws SystemException {

        StringBuilder rankQuery=new StringBuilder();
        rankQuery.append(EXCEPTION_EMBARGO_RANK_QUERY);
        rankQuery.append("RESULT_TABLE.SHPPFX, ");
        rankQuery.append("RESULT_TABLE.MSTDOCNUM, ");
        rankQuery.append("RESULT_TABLE.SERNUM, ");
        rankQuery.append("RESULT_TABLE.STRDAT, ");
        rankQuery.append("RESULT_TABLE.ENDDAT, ");
        rankQuery.append("RESULT_TABLE.CMPCOD");
        rankQuery.append(") AS RANK FROM ( ");
        String queryString = getQueryManager().getNamedNativeQueryString(EXCEPTION_AWB_EMBARGO_QUERY);
        String baseQuery = rankQuery.append(queryString).toString();
        PageableNativeQuery<ExceptionEmbargoDetailsVO> query = new PageableNativeQuery<ExceptionEmbargoDetailsVO>(
                exceptionEmbargoFilterVO.getTotalRecordCount(),baseQuery,new ExceptionEmbargosMapper());
        int parCount = 0;
        if (exceptionEmbargoFilterVO.getCompanyCode()!= null && exceptionEmbargoFilterVO.getCompanyCode().length() > 0) {
            query.append(" RECEXPMST.CMPCOD=?");
            query.setParameter(++parCount,exceptionEmbargoFilterVO.getCompanyCode());
        }
        if (exceptionEmbargoFilterVO.getShipmentPrefix()!= null && exceptionEmbargoFilterVO.getShipmentPrefix().length() > 0) {
            query.append(" AND RECEXPMST.SHPPFX=?");
            query.setParameter(++parCount,exceptionEmbargoFilterVO.getShipmentPrefix());
        }
        if (exceptionEmbargoFilterVO.getMasterDocumentNumber()!= null && exceptionEmbargoFilterVO.getMasterDocumentNumber().length() > 0) {
            query.append(" AND RECEXPMST.MSTDOCNUM=?");
            query.setParameter(++parCount,exceptionEmbargoFilterVO.getMasterDocumentNumber());
        }
        if (exceptionEmbargoFilterVO.getStartDate()!= null &&
                exceptionEmbargoFilterVO.getEndDate()!= null ) {
            query.append(" AND RECEXPMST.STRDAT <= ? AND RECEXPMST.ENDDAT >= ? ");
            query.setParameter(++parCount,exceptionEmbargoFilterVO.getEndDate());
            query.setParameter(++parCount,exceptionEmbargoFilterVO.getStartDate());
        }
        query.append(EXCEPTION_EMBARGO_SUFFIX_QUERY);
        log.log(Log.FINE, "Query------->", query);
        return query.getPage(exceptionEmbargoFilterVO.getPageNumber());
    }
    /**
     * This method checks any embargo exists in system
     * @param companyCode
     * @return boolean
     * @throws PersistenceException
     * @throws SystemException
     */
    public boolean checkAnyEmbargoExists(EmbargoFilterVO embargoFilterVO)
            throws PersistenceException, SystemException {
        Query query = getQueryManager().createNamedNativeQuery(
                RECO_DEFAULTS_CHECK_ANY_EMBARGO_EXISTS);
        int index = 0;
        query.setParameter(++index, embargoFilterVO.getCompanyCode());
        query.setParameter(++index, embargoFilterVO.getApplicableTransactions());
        return ((ShipmentDetailsVO.FLAG_YES.equals(query
                .getSingleResult(getStringMapper("RESULT"))))) ;
    }
    /**
     * This method returns exception awbs
     *
     * @param exceptionEmbargoFilterVOs
     * @return Collection<String>
     * @throws PersistenceException
     * @throws SystemException
     */
    public Collection<String> findExceptionEmbargos(
            Collection<ExceptionEmbargoFilterVO> exceptionEmbargoFilterVOs)
            throws PersistenceException, SystemException {
        log.entering("EmbargoRulesSqlDAO", "findExceptionEmbargos");
        Collection<String> masterDocumentNumbers = null;
        if(exceptionEmbargoFilterVOs != null && !exceptionEmbargoFilterVOs.isEmpty()){
            Query query = getQueryManager().createNamedNativeQuery(
                    RECO_DEFAULTS_FIND_EXCEPTION_EMBARGO);
            StringBuilder subQuery = new StringBuilder();
            StringBuilder awbValue = null;
            int index = 0;
            query.setParameter(++index,
                    exceptionEmbargoFilterVOs.iterator().next().getCompanyCode());
            query.setParameter(++index,
                    exceptionEmbargoFilterVOs.iterator().next().getStartDate().toStringFormat(DATE_FORMAT).substring(0,10));
            for (ExceptionEmbargoFilterVO exceptionEmbargoFilterVO:
                    exceptionEmbargoFilterVOs) {
                awbValue = new StringBuilder();
                awbValue.append(
                        exceptionEmbargoFilterVO.getShipmentPrefix()).append(
                        "-").append(
                        exceptionEmbargoFilterVO.getMasterDocumentNumber());
                subQuery.append("?").append(",");
                query.setParameter(++index, awbValue.toString());
            }
            subQuery = subQuery.deleteCharAt(subQuery.length()-1);
            subQuery.append(")");
            query.append(subQuery.toString());
            //result return format collection 000||00000000
            Mapper<String> stringMapper = getStringMapper(MSTAWB);
            masterDocumentNumbers = query
                    .getResultList(stringMapper);
        }

        log.exiting("EmbargoRulesSqlDAO", "findExceptionEmbargos");
        return masterDocumentNumbers;
    }

    /**
     *
     * 	Method		:	EmbargoRulesSqlDAO.getEmbargoEnquiryDetails
     *	Added by 	:	A-5153 on Feb 16, 2018
     * 	Used for 	:
     *	Parameters	:	@param filterVO
     *	Parameters	:	@return
     *	Parameters	:	@throws PersistenceException
     *	Parameters	:	@throws SystemException
     *	Return type	: 	List<EmbargoDetailsVO>
     */
    public List<EmbargoDetailsVO> getEmbargoEnquiryDetails(EmbargoFilterVO filterVO)
            throws PersistenceException, SystemException {
        log.entering("EmbargoRulesSqlDAO", "getEmbargoEnquiryDetails");
        Query query = getQueryManager().createNamedNativeQuery(
                SHARED_EMBARGO_FINDEMBARGOS);

        int parCount = 0;

        if (filterVO.getCompanyCode() != null
                && filterVO.getCompanyCode().length() > 0) {
            query.append("MST.CMPCOD=?");
            query.setParameter(++parCount, filterVO.getCompanyCode());
        }

        if (filterVO.getEmbargoRefNumber() != null
                && filterVO.getEmbargoRefNumber().length() > 0) {
            query.append(" AND  MST.REFNUM=?");
            query.setParameter(++parCount, filterVO.getEmbargoRefNumber());
        }

        if (filterVO.getEmbargoLevel() != null
                && filterVO.getEmbargoLevel().length() > 0) {
            query.append(" AND  MST.RECTYP=?");
            query.setParameter(++parCount, filterVO.getEmbargoLevel());
        }
        // Date conditions changed by A-5290 for ICRD-322141
        if (filterVO.getStartDate() != null && filterVO.getEndDate() != null) {
            query.append("AND(  MST.STRDAT <= ? AND  MST.ENDDAT >= ?)");
            query.setParameter(++parCount, filterVO.getStartDate().toSqlDate());
            query.setParameter(++parCount, filterVO.getEndDate().toSqlDate());
        } else if (filterVO.getEndDate() != null) {
            query.append("AND ( (MST.ENDDAT >= ? ) OR ( MST.ENDDAT IS NULL) ) ");
            query.setParameter(++parCount, filterVO.getEndDate().toSqlDate());
        } else if (filterVO.getStartDate() != null) {
            query.append("AND ( ( MST.STRDAT <= ?)) ");
            query.setParameter(++parCount, filterVO.getStartDate().toSqlDate());

        }

        if (filterVO.getStatus() != null && filterVO.getStatus().length() > 0) {
            query.append(" AND  MST.RECSTA = ?");
            query.append(" AND  MST.SUSFLG <> 'Y'");
            query.setParameter(++parCount, filterVO.getStatus());
        }

        if (filterVO.getSuspendFlag() != null
                && filterVO.getSuspendFlag().length() > 0) {
            query.append(" AND  MST.SUSFLG = ?");
            query.append(" AND  MST.RECSTA = 'A'");
            query.setParameter(++parCount, filterVO.getSuspendFlag());
        }

		/*if (filterVO.getDaysOfOperation() != null && filterVO.getDaysOfOperation().length() > 0) {
			query.append(" AND  MST.DAYOPR LIKE ?");
			query.setParameter(++parCount, '%' + filterVO.getDaysOfOperation() + '%');
		}*/
        if (filterVO.getRuleType() != null
                && filterVO.getRuleType().length() > 0) {
            query.append(" AND  MST.RULTYP = ?");
            query.setParameter(++parCount, filterVO.getRuleType());
        }
        if (filterVO.getCategory() != null
                && filterVO.getCategory().length() > 0) {
            query.append(" AND  MST.CATTYP = ?");
            query.setParameter(++parCount, filterVO.getCategory());
        }
        if (filterVO.getComplianceType() != null
                && filterVO.getComplianceType().length() > 0) {
            query.append(" AND  MST.CMPTYP = ?");
            query.setParameter(++parCount, filterVO.getComplianceType());
        }
        if (filterVO.getApplicableTransactions() != null
                && filterVO.getApplicableTransactions().length() > 0) {
            query.append(" AND INSTR(','||COALESCE(MST.APPTXN, '-')||',', ','||?||',') > 0 ");
            query.setParameter(++parCount, filterVO.getApplicableTransactions());
        }

        if ((filterVO.getOrigin() != null && filterVO.getOrigin().trim()
                .length() > 0)
                || (filterVO.getDestination() != null && filterVO
                .getDestination().trim().length() > 0)
                || (filterVO.getViaPoint() != null && filterVO.getViaPoint()
                .trim().length() > 0)
                || (filterVO.getParameterCode() != null && filterVO
                .getParameterCode().length() > 0)
                || (filterVO.getParameterValues() != null && filterVO
                .getParameterValues().length() > 0)
                || (filterVO.getDaysOfOperation() != null && filterVO
                .getDaysOfOperation().trim().length() > 0)) {

            if (filterVO.getOrigin() != null
                    && filterVO.getOrigin().trim().length() > 0
                    && filterVO.getOriginType() != null
                    && filterVO.getOriginType().trim().length() > 0) {

                query.append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM  AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");

                query.setParameter(++parCount, filterVO.getCompanyCode());

                query.append(" AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount, '%' + filterVO.getOrigin() + '%');

                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getOriginType());

                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount, "O");

            }
            if (filterVO.getDestination() != null
                    && filterVO.getDestination().trim().length() > 0
                    && filterVO.getDestinationType() != null
                    && filterVO.getDestinationType().trim().length() > 0) {

                query.append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());

                query.append("AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount,
                        '%' + filterVO.getDestination() + '%');

                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getDestinationType());

                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount, "D");

            }
            if (filterVO.getViaPoint() != null
                    && filterVO.getViaPoint().trim().length() > 0
                    && filterVO.getViaPointType() != null
                    && filterVO.getViaPointType().trim().length() > 0) {

                query.append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());

                query.append(" AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount,
                        '%' + filterVO.getViaPoint() + '%');

                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getViaPointType());

                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount, "V");

            }
            if (filterVO.getDaysOfOperation() != null
                    && filterVO.getDaysOfOperation().trim().length() > 0) {

                query.append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());

                query.append(" AND PAR.PARVAL LIKE ? ");
                query.setParameter(++parCount,
                        '%' + filterVO.getDaysOfOperation() + '%');

                query.append("AND  PAR.PARCOD=? ");
                query.setParameter(++parCount, "DOW");

                query.append("AND  PAR.PARTYP=? )");
                query.setParameter(++parCount, "P");

            }
            if (filterVO.getParameterCode() != null
                    && filterVO.getParameterCode().length() > 0) {

                query.append(" AND EXISTS( SELECT 1 FROM RECPAR PAR WHERE MST.CMPCOD=PAR.CMPCOD AND MST.REFNUM=PAR.REFNUM AND MST.VERNUM = PAR.VERNUM AND PAR.CMPCOD =? ");
                query.setParameter(++parCount, filterVO.getCompanyCode());

                query.append(" AND PAR.PARCOD=? ");
                query.setParameter(++parCount, filterVO.getParameterCode());
                query.append("AND  PAR.PARTYP=? ");
                query.setParameter(++parCount, "P");

                if ((filterVO.getParameterValues() != null && filterVO
                        .getParameterValues().length() > 0)) {

                    queryStringBuilder = new StringBuilder();

                    queryStringBuilder.append("%,")
                            .append(filterVO.getParameterValues()).append(",%");
                    query.append("AND ','||PAR.PARVAL||',' LIKE ? ");
                    query.setParameter(++parCount,
                            queryStringBuilder.toString());

                    queryStringBuilder = new StringBuilder();
                }
                query.append(")");

            }
        }
        log.log(Log.FINE, "Query------->", query);
        return query.getResultList(new ListEmbargoMultiMapper());

    }
    /**
     * @author A-4823
     * @param filterVO
     * @return Collection<EmbargoDetailsVO>
     * @throws PersistenceException
     * @throws SystemException
     */
    public Collection<EmbargoDetailsVO> parameterSelectiveEmbargoSearch(EmbargoFilterVO filterVO)
            throws PersistenceException, SystemException {
        log.entering("EmbargoRulesSqlDAO", "parameterSelectiveEmbargoSearch");
        Collection<EmbargoDetailsVO> embVos = new ArrayList<EmbargoDetailsVO>();
        Query query = null;
        int parcount = 0;
        query =  getQueryManager().createNamedNativeQuery(
                RECO_PARMETERSELECTIVESEARCH);
        if (filterVO.getSearchParameterCode() != null
                && filterVO.getSearchParameterCode().trim().length() > 0) {
            query.setParameter(++parcount,filterVO.getSearchParameterCode());
            query.setParameter(++parcount,EmbargoFilterVO.DOW);
            query.setParameter(++parcount,EmbargoFilterVO.SHARED_COMMODITY);
        }
        query.setParameter(++parcount,filterVO.getCompanyCode());
        query.setParameter(++parcount,filterVO.getCompanyCode());
        query.setParameter(++parcount,filterVO.getCompanyCode());
        Collection<EmbargoDetailsVO> embargoDetailsVOs = query.getResultList(
                new ParameterSelectiveSearchMapper());
        if (embargoDetailsVOs != null && embargoDetailsVOs.size() > 0) {
            embVos.addAll(embargoDetailsVOs);
        }
        log.log(Log.FINE, "reco embargo size:", embVos.size());
        log.exiting("EmbargoRulesSqlDAO", "parameterSelectiveEmbargoSearch");
        if (embVos.size() > 0) {
            return embVos;
        } else {
            return null;
        }
    }

    /**
     *
     * 	Method		:	EmbargoRulesSqlDAO.constructFilterQueryForSelectFlight
     *	Added by 	:	A-8146 on 01-Aug-2018
     * 	Used for 	:
     *	Parameters	:	@param shipmentVO
     *	Parameters	:	@param query
     *	Parameters	:	@param parcount
     *	Return type	: 	void
     */
    //private void constructFilterQueryForSelectFlight(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
		/*
	}


		log.entering("EmbargoRulesSqlDAO", " constructFilterQueryForSelectFlight");
		if ((shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 )
		|| (shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 )
		|| (shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 )
		|| (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 )
		|| (shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 )
		|| (shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 )) {
		//origin filter for excluded case
		query .append(" AND NOT ( ") ;

		if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
			query.append( "pkg_frmwrk.Fun_String_Check(?,REC.ORGARPCODEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getOrgStation());
		}
		if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGARPGRPEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getOrgArpGrp());
		}

		if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTCODEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getOrgCountry());
		}
		if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTGRPEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getOrgCntGrp());
		}
		if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGOFCEXGEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getOoe());
		}

		if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.ORGGPAEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getOrgPaCod());
		}
		query.append(" ) ") ;
		}
		if ((shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0)
			|| (shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 )
			|| (shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 )
			|| (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 )
			|| (shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 )
			|| (shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 )) {
		//destination filter for excluded case
		query .append(" AND NOT ( ") ;

		if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
			query.append( "pkg_frmwrk.Fun_String_Check(?,REC.DSTARPCODEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getDstStation());
		}
		if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTARPGRPEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getDstArpGrp());
		}

		if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTCODEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getDstCountry());
		}
		if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTGRPEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getDstCntGrp());
		}
		if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTOFCEXGEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getDoe());
		}

		if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
			query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.DSTGPAEXC,',') >0 ");
			query.setParameter(++parcount, shipmentVO.getDstPaCod());
		}
		query.append(" ) ") ;
		}
		if ((shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size() > 0 )
				|| (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 )
				|| (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 )
				|| (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 )) {
			//via filter for excluded case
			query .append(" AND NOT ( ") ;
			// Modified the logic of ViaPoint by A-5290 for ICRD-186576
			if (shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size()  > 0 ) {
				//query.append( "pkg_frmwrk.Fun_String_Check(?,REC.VIAARPCODEXC,',') >0 ");
				query.append( "pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIAARPCODEXC   ELSE ? END, REC.VIAARPCODEXC,',') > 0");
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
			}
			if (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 ) {
				//query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIAARPGRPEXC,',') >0 ");
				query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIAARPGRPEXC   ELSE ? END, REC.VIAARPGRPEXC,',') > 0");
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
			}
			if (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 ) {
				//query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIACNTCODEXC,',') >0 ");
				query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIACNTCODEXC   ELSE ? END, REC.VIACNTCODEXC,',') > 0");
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
			}
			if (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 ) {
				//query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIACNTGRPEXC,',') >0 ");
				query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIACNTGRPEXC   ELSE ? END, REC.VIACNTGRPEXC,',') > 0");
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
			}
			query.append(" ) ") ;
			}
		//added for ICRD-213193 by A-7815
		//union
		if(shipmentVO.getUserLocale()!= null && shipmentVO.getUserLocale().trim().length()>0) {
			query.append(" UNION SELECT DISTINCT "
					+"REC.CMPCOD RECCMPCOD,REC.REFNUM,REC.VERNUM,REC.STRDAT,REC.ENDDAT,REC.RULTYP,"
					+" REC.RECDES,    REC.APPTXN,    REC.CATTYP,    REC.RECTYP,    REC.CMPTYP,"
					+ "REC.ORGARPCODINC,    REC.ORGARPCODEXC,    REC.ORGARPGRPINC,    REC.ORGARPGRPEXC,"
					+"    REC.ORGCNTCODINC,    REC.ORGCNTCODEXC,    REC.ORGCNTGRPINC,    REC.ORGCNTGRPEXC,"
					+ "    REC.VIAARPCODINC,    REC.VIAARPCODEXC,    REC.VIAARPGRPINC,    REC.VIAARPGRPEXC,"
					+ "    REC.VIACNTCODINC,    REC.VIACNTCODEXC,    REC.VIACNTGRPINC,    REC.VIACNTGRPEXC,"
					+ "    REC.DSTARPCODINC,    REC.DSTARPCODEXC,    REC.DSTARPGRPINC,    REC.DSTARPGRPEXC,"
					+ "    REC.DSTCNTCODINC,    REC.DSTCNTCODEXC,    REC.DSTCNTGRPINC,    REC.DSTCNTGRPEXC,"
					+ "    REC.PRDINC,    REC.PRDEXC,    REC.SCCCODINC,    REC.SCCCODEXC,    REC.SCCGRPINC,"
					+ "    REC.SCCGRPEXC,    REC.UNDNUMINC,    REC.UNDNUMEXC,    REC.AWBPFXINC,    REC.AWBPFXEXC,"
					+ "    REC.ARLCODINC,    REC.ARLCODEXC,    REC.FLTOWRINC,    REC.FLTOWREXC,    REC.ORGDAYOPR,"
					+ "    REC.VIADAYOPR,    REC.ALLDAYOPR,    REC.ANYDAYOPR,    REC.DSTDAYOPR,    REC.ORGDATINC,"
					+ "    REC.ORGDATEXC,    REC.VIADATINC,    REC.VIADATEXC,    REC.DSTDATINC,    REC.DSTDATEXC,"
					+ "    REC.ALLDATINC,    REC.ALLDATEXC,    REC.ANYDATINC,    REC.ANYDATEXC,    REC.NATINC,"
					+ "    REC.NATEXC,    REC.FLTTYP,    REC.SLTIND,    REC.ORGSTRTIM,    REC.ORGENDTIM,    REC.VIASTRTIM,"
					+ "    REC.VIAENDTIM,    REC.DSTSTRTIM,    REC.DSTENDTIM,    REC.ALLSTRTIM,    REC.ALLENDTIM,"
					+ "    REC.ANYSTRTIM,    REC.ANYENDTIM,    REC.WGTSTR,    REC.WGTEND,    REC.LENSTR,    REC.LENEND,"
					+ "    REC.WIDSTR,    REC.WIDEND,    REC.HGTSTR,    REC.HGTEND,    REC.CNT,    REC.ORGOFCEXGINC,  "
					+ "  REC.ORGOFCEXGEXC,    REC.DSTOFCEXGINC,    REC.DSTOFCEXGEXC,    REC.ORGGPAINC,    REC.ORGGPAEXC,"
					+ "    REC.DSTGPAINC,    REC.DSTGPAEXC,    REC.MALCATINC,    REC.MALCATEXC,    REC.MALCLSINC,"
					+ "    REC.MALCLSEXC,    REC.SUBCLSEXC,    REC.SUBCLSINC,    REC.SUBCLSGRPINC,    REC.SUBCLSGRPEXC,"
					+ "    REC.COMINC,    REC.COMEXC,    REC.PAYTYPINC,    REC.PAYTYPEXC,    REC.FLTNUMINC,"
					+ "    REC.FLTNUMEXC,    REC.ARLGRPINC,    REC.ARLGRPEXC,    REC.SEGORGINC,"
					+ "    REC.SEGORGEXC,    REC.SEGDSTINC,    REC.SEGDSTEXC,    REC.CARRORG,    REC.CARRVIA,"
					+ "    REC.CARRDST,    REC.LSTUPDTIM,    REC.CARRORGINC,    REC.CARRDSTINC,"
					+ "    REC.CARRVIAINC,    REC.CARRALLINC,    REC.CARRANYINC,    REC.CARRORGEXC,"
					+ "    REC.CARRDSTEXC,    REC.CARRVIAEXC,    REC.CARRALLEXC,    REC.CARRANYEXC,   "
					+ " REC.FLTNUMORGINC,    REC.FLTNUMDSTINC,    REC.FLTNUMVIAINC,    REC.FLTNUMALLINC,"
					+ "    REC.FLTNUMANYINC,    REC.FLTNUMORGEXC,    REC.FLTNUMDSTEXC,    REC.FLTNUMVIAEXC,    REC.FLTNUMALLEXC,"
					+ "    REC.FLTNUMANYEXC,    REC.FLTOWRORGINC,    REC.FLTOWRDSTINC,    REC.FLTOWRVIAINC,    REC.FLTOWRALLINC,"
					+ "    REC.FLTOWRANYINC,    REC.FLTOWRORGEXC,    REC.FLTOWRDSTEXC,    REC.FLTOWRVIAEXC,    REC.FLTOWRALLEXC,"
					+ "    REC.FLTOWRANYEXC,    REC.FLTTYPORGINC,    REC.FLTTYPDSTINC,    REC.FLTTYPVIAINC,"
					+ "    REC.FLTTYPALLINC,    REC.FLTTYPANYINC,    REC.FLTTYPORGEXC,    REC.FLTTYPDSTEXC,    REC.FLTTYPVIAEXC,"
					+ "    REC.FLTTYPALLEXC,    REC.FLTTYPANYEXC,    REC.ARLGRPORGINC,    REC.ARLGRPDSTINC,    REC.ARLGRPVIAINC, "
					+ "   REC.ARLGRPALLINC,    REC.ARLGRPANYINC,    REC.ARLGRPORGEXC,    REC.ARLGRPDSTEXC,    REC.ARLGRPVIAEXC,"
					+ "    REC.ARLGRPALLEXC,    REC.ARLGRPANYEXC,    REC.SCCCODEXCIF,    REC.SCCGRPEXCIF,    REC.RECSTA,"
					+ "    REC.SUSFLG,    REC.PKGINSINC,    REC.PKGINSEXC,"
					+ "LCL.RECDES LCLDES,"
					+ "SHR.*FROM REC_MVW REC,RECLCLLNGMST LCL,CAPBKGFLTSRH SHR "
					+ "WHERE REC.CMPCOD=LCL.CMPCOD AND REC.VERNUM = LCL.VERNUM  AND REC.REFNUM=LCL.REFNUM");
			query.append(" AND LCL.CMPCOD = ?  ");
			query.setParameter(++parcount, shipmentVO.getCompanyCode());
			query.append(" AND LCL.RECLCLLNG = ?  ");
			query.setParameter(++parcount, shipmentVO.getUserLocale());
		}
		//union
		query.append(" UNION  "
				+ "SELECT DISTINCT "
				+"REC.CMPCOD RECCMPCOD,REC.REFNUM,REC.VERNUM,REC.STRDAT,REC.ENDDAT,REC.RULTYP,"
				+" REC.RECDES,    REC.APPTXN,    REC.CATTYP,    REC.RECTYP,    REC.CMPTYP,"
				+ "REC.ORGARPCODINC,    REC.ORGARPCODEXC,    REC.ORGARPGRPINC,    REC.ORGARPGRPEXC,"
				+"    REC.ORGCNTCODINC,    REC.ORGCNTCODEXC,    REC.ORGCNTGRPINC,    REC.ORGCNTGRPEXC,"
				+ "    REC.VIAARPCODINC,    REC.VIAARPCODEXC,    REC.VIAARPGRPINC,    REC.VIAARPGRPEXC,"
				+ "    REC.VIACNTCODINC,    REC.VIACNTCODEXC,    REC.VIACNTGRPINC,    REC.VIACNTGRPEXC,"
				+ "    REC.DSTARPCODINC,    REC.DSTARPCODEXC,    REC.DSTARPGRPINC,    REC.DSTARPGRPEXC,"
				+ "    REC.DSTCNTCODINC,    REC.DSTCNTCODEXC,    REC.DSTCNTGRPINC,    REC.DSTCNTGRPEXC,"
				+ "    REC.PRDINC,    REC.PRDEXC,    REC.SCCCODINC,    REC.SCCCODEXC,    REC.SCCGRPINC,"
				+ "    REC.SCCGRPEXC,    REC.UNDNUMINC,    REC.UNDNUMEXC,    REC.AWBPFXINC,    REC.AWBPFXEXC,"
				+ "    REC.ARLCODINC,    REC.ARLCODEXC,    REC.FLTOWRINC,    REC.FLTOWREXC,    REC.ORGDAYOPR,"
				+ "    REC.VIADAYOPR,    REC.ALLDAYOPR,    REC.ANYDAYOPR,    REC.DSTDAYOPR,    REC.ORGDATINC,"
				+ "    REC.ORGDATEXC,    REC.VIADATINC,    REC.VIADATEXC,    REC.DSTDATINC,    REC.DSTDATEXC,"
				+ "    REC.ALLDATINC,    REC.ALLDATEXC,    REC.ANYDATINC,    REC.ANYDATEXC,    REC.NATINC,"
				+ "    REC.NATEXC,    REC.FLTTYP,    REC.SLTIND,    REC.ORGSTRTIM,    REC.ORGENDTIM,    REC.VIASTRTIM,"
				+ "    REC.VIAENDTIM,    REC.DSTSTRTIM,    REC.DSTENDTIM,    REC.ALLSTRTIM,    REC.ALLENDTIM,"
				+ "    REC.ANYSTRTIM,    REC.ANYENDTIM,    REC.WGTSTR,    REC.WGTEND,    REC.LENSTR,    REC.LENEND,"
				+ "    REC.WIDSTR,    REC.WIDEND,    REC.HGTSTR,    REC.HGTEND,    REC.CNT,    REC.ORGOFCEXGINC,  "
				+ "  REC.ORGOFCEXGEXC,    REC.DSTOFCEXGINC,    REC.DSTOFCEXGEXC,    REC.ORGGPAINC,    REC.ORGGPAEXC,"
				+ "    REC.DSTGPAINC,    REC.DSTGPAEXC,    REC.MALCATINC,    REC.MALCATEXC,    REC.MALCLSINC,"
				+ "    REC.MALCLSEXC,    REC.SUBCLSEXC,    REC.SUBCLSINC,    REC.SUBCLSGRPINC,    REC.SUBCLSGRPEXC,"
				+ "    REC.COMINC,    REC.COMEXC,    REC.PAYTYPINC,    REC.PAYTYPEXC,    REC.FLTNUMINC,"
				+ "    REC.FLTNUMEXC,    REC.ARLGRPINC,    REC.ARLGRPEXC,    REC.SEGORGINC,"
				+ "    REC.SEGORGEXC,    REC.SEGDSTINC,    REC.SEGDSTEXC,    REC.CARRORG,    REC.CARRVIA,"
				+ "    REC.CARRDST,    REC.LSTUPDTIM,    REC.CARRORGINC,    REC.CARRDSTINC,"
				+ "    REC.CARRVIAINC,    REC.CARRALLINC,    REC.CARRANYINC,    REC.CARRORGEXC,"
				+ "    REC.CARRDSTEXC,    REC.CARRVIAEXC,    REC.CARRALLEXC,    REC.CARRANYEXC,   "
				+ " REC.FLTNUMORGINC,    REC.FLTNUMDSTINC,    REC.FLTNUMVIAINC,    REC.FLTNUMALLINC,"
				+ "    REC.FLTNUMANYINC,    REC.FLTNUMORGEXC,    REC.FLTNUMDSTEXC,    REC.FLTNUMVIAEXC,    REC.FLTNUMALLEXC,"
				+ "    REC.FLTNUMANYEXC,    REC.FLTOWRORGINC,    REC.FLTOWRDSTINC,    REC.FLTOWRVIAINC,    REC.FLTOWRALLINC,"
				+ "    REC.FLTOWRANYINC,    REC.FLTOWRORGEXC,    REC.FLTOWRDSTEXC,    REC.FLTOWRVIAEXC,    REC.FLTOWRALLEXC,"
				+ "    REC.FLTOWRANYEXC,    REC.FLTTYPORGINC,    REC.FLTTYPDSTINC,    REC.FLTTYPVIAINC,"
				+ "    REC.FLTTYPALLINC,    REC.FLTTYPANYINC,    REC.FLTTYPORGEXC,    REC.FLTTYPDSTEXC,    REC.FLTTYPVIAEXC,"
				+ "    REC.FLTTYPALLEXC,    REC.FLTTYPANYEXC,    REC.ARLGRPORGINC,    REC.ARLGRPDSTINC,    REC.ARLGRPVIAINC, "
				+ "   REC.ARLGRPALLINC,    REC.ARLGRPANYINC,    REC.ARLGRPORGEXC,    REC.ARLGRPDSTEXC,    REC.ARLGRPVIAEXC,"
				+ "    REC.ARLGRPALLEXC,    REC.ARLGRPANYEXC,    REC.SCCCODEXCIF,    REC.SCCGRPEXCIF,    REC.RECSTA,"
				+ "    REC.SUSFLG,    REC.PKGINSINC,    REC.PKGINSEXC,"
				+ "'' LCLDES,SHR.*FROM REC_MVW REC,CAPBKGFLTSRH SHR"
				+ ""
				+ " WHERE REC.CMPCOD =? ")	;
		query.setParameter(++parcount, shipmentVO.getCompanyCode());
		if (shipmentVO.getDstStation() == null || shipmentVO.getDstStation().trim().length() <=0 ) {
			query.append("  AND ( DSTARPCODINC IS NULL) ");
		}
		if ((shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0)
				|| (shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 )
				|| (shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 )
				|| (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 )
				|| (shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 )
				|| (shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 )) {
		//dst include
		query.append("  AND ( (");
		if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
			query.append(" (pkg_frmwrk.Fun_String_Check(?,REC.DSTARPCODINC,',') >0  OR REC.DSTARPCODINC ='-') ");
			query.setParameter(++parcount, shipmentVO.getDstStation());
		}
		if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
			query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.DSTARPGRPINC,',')  >0 OR REC.DSTARPGRPINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getDstArpGrp());
		}
		if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
			query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTCODINC,',')  >0 OR REC.DSTCNTCODINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getDstCountry());
		}
		if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
			query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTGRPINC,',')  >0 OR REC.DSTCNTGRPINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getDstCntGrp());
		}
		if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
			query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.DSTOFCEXGINC,',')  >0 OR REC.DSTOFCEXGINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getDoe());
		}
		if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
			query.append( " OR (pkg_frmwrk.Fun_String_Check(?,REC.DSTGPAINC,',')  >0 OR REC.DSTGPAINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getDstPaCod());
		}
		//dstexclude
		query.append(" ) AND NOT ( ");
		if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
			query.append(" pkg_frmwrk.Fun_String_Check(?,REC.DSTARPCODEXC,',')>0 ");
			query.setParameter(++parcount, shipmentVO.getDstStation());
		}

		if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
			query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.DSTARPGRPEXC,',')      >0 ");
			query.setParameter(++parcount, shipmentVO.getDstArpGrp());
		}
		if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
			query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTCODEXC,',')        >0 ");
			query.setParameter(++parcount, shipmentVO.getDstCountry());
		}
		if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
			query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTGRPEXC,',')      >0 ");
			query.setParameter(++parcount, shipmentVO.getDstCntGrp());
		}
		if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
			query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.DSTOFCEXGEXC,',')    >0");
			query.setParameter(++parcount, shipmentVO.getDoe());
		}
		if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
			query.append( " OR pkg_frmwrk.Fun_String_Check(?,REC.DSTGPAEXC,',')        >0 ");
			query.setParameter(++parcount, shipmentVO.getDstPaCod());
		}
			query.append(" ) ");
			query.append(" ) ");
		} else {
			query.append("  AND ( (DSTARPCODINC IS NULL OR DSTARPCODINC ='-') AND  (DSTCNTCODINC IS NULL OR DSTCNTCODINC ='-') AND (DSTARPGRPINC IS NULL OR DSTARPGRPINC='-')  AND (DSTCNTGRPINC IS NULL OR DSTCNTGRPINC = '-') ) ");
		}

		if (shipmentVO.getOrgStation() == null || shipmentVO.getOrgStation().trim().length() <=0 ) {
			query.append("  AND ( ORGARPCODINC IS NULL) ");
		}
		if ((shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 )
				|| (shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 )
				|| (shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 )
				|| (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 )
				|| (shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 )
				|| (shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 )) {
		//orgINcINclude

		query.append("  AND ( (");
		if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
			query.append(" (pkg_frmwrk.Fun_String_Check(?,REC.ORGARPCODINC,',') >0  OR REC.ORGARPCODINC ='-') ");
			query.setParameter(++parcount, shipmentVO.getOrgStation());
		}
		if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
			query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.ORGARPGRPINC,',')  >0 OR REC.ORGARPGRPINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getOrgArpGrp());
		}
		if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
			query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTCODINC,',')  >0 OR REC.ORGCNTCODINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getOrgCountry());
		}
		if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
			query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTGRPINC,',')  >0 OR REC.ORGCNTGRPINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getOrgCntGrp());
		}
		if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
			query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.ORGOFCEXGINC,',')  >0 OR REC.ORGOFCEXGINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getOoe());
		}
		if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
			query.append( " OR (pkg_frmwrk.Fun_String_Check(?,REC.ORGGPAINC,',')  >0 OR REC.ORGGPAINC   ='-') ");
			query.setParameter(++parcount, shipmentVO.getOrgPaCod());
		}
		//org exclude
		query.append(" ) AND NOT ( ");
		if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
			query.append(" pkg_frmwrk.Fun_String_Check(?,REC.ORGARPCODEXC,',')>0 ");
			query.setParameter(++parcount, shipmentVO.getOrgStation());
		}

		if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
			query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.ORGARPGRPEXC,',')      >0 ");
			query.setParameter(++parcount, shipmentVO.getOrgArpGrp());
		}
		if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
			query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTCODEXC,',')        >0 ");
			query.setParameter(++parcount, shipmentVO.getOrgCountry());
		}
		if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
			query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTGRPEXC,',')      >0 ");
			query.setParameter(++parcount, shipmentVO.getOrgCntGrp());
		}
		if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
			query.append(" OR pkg_frmwrk.Fun_String_Check(?,REC.ORGOFCEXGEXC,',')    >0");
			query.setParameter(++parcount, shipmentVO.getOoe());
		}
		if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
			query.append( " OR pkg_frmwrk.Fun_String_Check(?,REC.ORGGPAEXC,',')        >0 ");
			query.setParameter(++parcount, shipmentVO.getOrgPaCod());
		}
			query.append(" ) ");
			query.append(" ) ");
		} else {
			query.append("  AND ( (ORGARPCODINC IS NULL OR ORGARPCODINC ='-') AND  (ORGCNTCODINC IS NULL OR ORGCNTCODINC ='-') AND (ORGARPGRPINC IS NULL OR ORGARPGRPINC='-')  AND (ORGCNTGRPINC IS NULL OR ORGCNTGRPINC = '-') ) ");
		}
		if ((shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size() > 0 )
				|| (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 )
				|| (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 )
				|| (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 )) {
			//via include
			query.append("  AND ( (");
			if (shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size()  > 0 ) {
				query.append(" (pkg_frmwrk.Fun_String_Check(?,REC.VIAARPCODINC,',') >0  OR REC.VIAARPCODINC ='-') ");
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
			}
			if (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 ) {
				query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.VIAARPGRPINC,',')  >0 OR REC.VIAARPGRPINC   ='-') ");
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
			}
			if (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 ) {
				query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.VIACNTCODINC,',')  >0 OR REC.VIACNTCODINC   ='-') ");
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
			}
			if (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 ) {
				query.append(" OR (pkg_frmwrk.Fun_String_Check(?,REC.VIACNTGRPINC,',')  >0 OR REC.VIACNTGRPINC   ='-') ");
				query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
			}
			query.append(" ) ");
			//via exclude
			// Modified the logic of ViaPoint by A-5290 for ICRD-186576
			if(shipmentVO.getViaPointStation() != null && !TILDE.equals(shipmentVO.getViaPointStation().iterator().next())){
				query.append(" AND NOT ( ");

				if (shipmentVO.getViaPointStation() != null && shipmentVO.getViaPointStation().size()  > 0 ) {
					//query.append( "pkg_frmwrk.Fun_String_Check(?,REC.VIAARPCODEXC,',') >0 ");
					query.append( "pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIAARPCODEXC   ELSE ? END, REC.VIAARPCODEXC,',') > 0");
					query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
					query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
				}
				if (shipmentVO.getViaPntArpGrp() != null && shipmentVO.getViaPntArpGrp().size() > 0 ) {
					//query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIAARPGRPEXC,',') >0 ");
					query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIAARPGRPEXC   ELSE ? END, REC.VIAARPGRPEXC,',') > 0");
					query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
					query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
				}
				if (shipmentVO.getViaPointCountry() != null && shipmentVO.getViaPointCountry().size() > 0 ) {
					//query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIACNTCODEXC,',') >0 ");
					query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIACNTCODEXC   ELSE ? END, REC.VIACNTCODEXC,',') > 0");
					query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
					query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
				}
				if (shipmentVO.getViaPntCntGrp() != null && shipmentVO.getViaPntCntGrp().size() > 0 ) {
					//query.append( "OR pkg_frmwrk.Fun_String_Check(?,REC.VIACNTGRPEXC,',') >0 ");
					query.append( "OR pkg_frmwrk.Fun_String_Check( CASE ? WHEN '~'  THEN REC.VIACNTGRPEXC   ELSE ? END, REC.VIACNTGRPEXC,',') > 0");
					query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
					query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
				}
				query.append(" ) ");
			} else {
				query.append(" AND (REC.VIAARPCODEXC IS NULL AND  REC.VIAARPGRPEXC IS NULL AND REC.VIACNTCODEXC IS NULL)");
			}
			query.append(" ) ");
		} else {
query.append("  AND ( (VIAARPCODINC IS NULL OR VIAARPCODINC ='-') AND  (VIACNTCODINC IS NULL OR VIACNTCODINC ='-') AND (VIAARPGRPINC IS NULL OR VIAARPGRPINC='-')  AND (VIACNTGRPINC IS NULL OR VIACNTGRPINC = '-') ) ");
		}
		//main select ends here

		query.append(" ) SHR ");

		//parameter filter strts
		query.append("	WHERE CMPCOD=? ");
		query.setParameter(++parcount, shipmentVO.getCompanyCode());
		boolean isShipDatePresent = false;
		int dateCount = 0;
		if(shipmentVO.getShipmentDate() != null ){
			query.append(" AND ((? BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
			query.setParameter(++parcount, shipmentVO.getShipmentDate().toDisplayDateOnlyFormat());
			isShipDatePresent = true;
		}
		if (shipmentVO.getBookingFlightDetailVOs() != null
				&& shipmentVO.getBookingFlightDetailVOs().size() > 0) {
			for (BookingFlightDetailVO bookingFlightDetailVO : shipmentVO.getBookingFlightDetailVOs()) {
					if(bookingFlightDetailVO.getFlightDate()!=null ){
				if (isShipDatePresent || dateCount != 0) {
					query.append(" OR ");
				} else if (dateCount == 0) {
					query.append(" AND( ");
				}
				query.append(" (? BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
				query.setParameter(++parcount, bookingFlightDetailVO.getFlightDate());
				++dateCount;
			}
		}

			query.append(" OR SHR.STD BETWEEN trunc(STRDAT) AND trunc(ENDDAT) ");
		}
		if (isShipDatePresent || dateCount > 0) {
			query.append(") ");
		}
		if(shipmentVO.getMap() != null ){
			int count = 0;
			for (String parameterCode : shipmentVO.getMap().keySet()) {
				for (String parameterValue : shipmentVO.getMap().get(parameterCode)) {
					// Changed by A-5867 for ICRD-91093 starts
					if(ShipmentDetailsVO.MAIL_CLASS.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (MALCLSINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,MALCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCLSEXC,',')) ");
						query.append(" OR (MALCLSINC IS NULL AND MALCLSEXC IS NULL) ");
						query.append(" OR (MALCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCLSEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.MAIL_CATEGORY.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (MALCATINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,MALCATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCATEXC,',')) ");
						query.append(" OR (MALCATINC IS NULL AND MALCATEXC IS NULL) ");
						query.append(" OR (MALCATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCATEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.MAIL_SUB_CLS.equals(parameterCode)){
						query.append(" AND (( pkg_frmwrk.Fun_String_Check(?,SUBCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSEXC,','))");
						query.append(" OR (SUBCLSINC IS NULL AND SUBCLSEXC IS NULL) ");
						query.append(" OR (SUBCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
					} else if(ShipmentDetailsVO.MAIL_SUB_CLS_GRP.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (SUBCLSGRPINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SUBCLSGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSGRPEXC,',')) ");
						query.append(" OR (SUBCLSGRPINC IS NULL AND SUBCLSGRPEXC IS NULL) ");
						query.append(" OR (SUBCLSGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSGRPEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}  else if(ShipmentDetailsVO.SHARED_CARRIER.equals(parameterCode)){
					// Changed by A-5867 for ICRD-91093 ends
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (ARLCODINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLCODINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',')  >0) ");
						query.append(" OR (ARLCODINC IS NULL AND ARLCODEXC IS NULL) ");
						query.append(" OR (ARLCODINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',')  >0) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}  else if(ShipmentDetailsVO.CARRIER_ORG.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (CARRORGINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CARRORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRORGEXC,',')) ");
						query.append(" OR (CARRORGINC IS NULL AND CARRORGEXC IS NULL) ");
						query.append(" OR (CARRORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRORGEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.CARRIER_DST.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (CARRDSTINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CARRDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) ");
						query.append(" OR (CARRDSTINC IS NULL AND CARRDSTEXC IS NULL) ");
						query.append(" OR (CARRDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.CARRIER_VIA.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (CARRVIAINC IS NULL) ");
						} else if(parameterValue!=null){
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CARRVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) ");
						query.append(" OR (CARRVIAINC IS NULL AND CARRVIAEXC IS NULL) ");
						query.append(" OR (CARRVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.CARRIER_ALL.equals(parameterCode)) {
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" AND (CARRALLINC IS NULL AND CARRALLEXC IS NULL) ");
							} else {
								query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CARRALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRALLEXC,',')) ");
								query.append(" OR (CARRALLINC IS NULL AND CARRALLEXC IS NULL) ");
								query.append(" OR (CARRALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRALLEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
						}
						count =0;
						query.append(" AND( ");
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" (CARRANYINC IS NULL AND CARRANYEXC IS NULL) ");
							} else {
								if (count != 0) {
									query.append(" OR ");
								}
								query.append(" ((pkg_frmwrk.Fun_String_Check(?,CARRANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRANYEXC,',')) ");
								query.append(" OR (CARRANYINC IS NULL AND CARRANYEXC IS NULL) ");
								query.append(" OR (CARRANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRANYEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
							++count;
						}
						query.append(" ) ");
					} else if(ShipmentDetailsVO.SHARED_COMMODITY.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (COMINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,COMINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,COMEXC,',')) ");
						query.append(" OR (COMINC IS NULL AND COMEXC IS NULL) ");
						query.append(" OR (COMINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,COMEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}
					//added by A-7534 for ICRD-226601
					else if(ShipmentDetailsVO.PKGINS.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (PKGINSINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,PKGINSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PKGINSEXC,',')) ");
						query.append(" OR (PKGINSINC IS NULL AND PKGINSEXC IS NULL) ");
						query.append(" OR (PKGINSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PKGINSEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}
					//---------------------------------
					else if(ShipmentDetailsVO.SHARED_SCC.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (SCCCODINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SCCCODINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCCODEXC,',')) ");
						query.append(" OR (SCCCODINC IS NULL AND SCCCODEXC IS NULL ) ");
						query.append(" OR (SCCCODINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCCODEXC,',')) ");

						query.append(" )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						//exclude If for SCC code written as seperate block as for SCC: exclude if and include can be given as combination
						query.append(" AND (NOT(pkg_frmwrk.Fun_String_Check(?,SCCCODEXCIF,',') >0) ");
						query.append(" OR (SCCCODEXCIF IS NULL ) ");
						query.append(" )");
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.SHARED_PAYTYP.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (PAYTYPINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,PAYTYPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PAYTYPEXC,',')) ");
						query.append(" OR (PAYTYPINC IS NULL AND PAYTYPEXC IS NULL) ");
						query.append(" OR (PAYTYPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PAYTYPEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.SHARED_FLTNUM.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTNUMINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',')  >0) ");
						query.append(" OR (FLTNUMINC IS NULL AND FLTNUMEXC IS NULL) ");
						query.append(" OR (FLTNUMINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',')  >0) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}
					else if(ShipmentDetailsVO.FLTNUM_ORG.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTNUMORGINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMORGEXC,',')) ");
						query.append(" OR (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL) ");
						query.append(" OR (FLTNUMORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMORGEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}  else if(ShipmentDetailsVO.FLTNUM_DST.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTNUMDSTINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMDSTEXC,',')) ");
						query.append(" OR (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL) ");
						query.append(" OR (FLTNUMDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMDSTEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}  else if(ShipmentDetailsVO.FLTNUM_VIA.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTNUMVIAINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,',')) ");
						query.append(" OR (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL) ");
						query.append(" OR (FLTNUMVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.FLTNUM_ALL.equals(parameterCode)) {
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" AND (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
							} else {
								query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMALLEXC,',')) ");
								query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
								query.append(" OR (FLTNUMALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMALLEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
						}
						count =0;
						query.append(" AND( ");
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
							} else {
								if (count != 0) {
									query.append(" OR ");
								}
								query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTNUMANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMANYEXC,',')) ");
								query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
								query.append(" OR (FLTNUMANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMANYEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
							++count;
						}
						query.append(" ) ");
					} else if(ShipmentDetailsVO.PRODUCT.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (PRDINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,PRDINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PRDEXC,',')) ");
						query.append(" OR (PRDINC IS NULL AND PRDEXC IS NULL) ");
						query.append(" OR (PRDINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PRDEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.GOODS.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (NATINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATEXC),',')) ");
						query.append(" OR (NATINC IS NULL AND NATEXC IS NULL) ");
						query.append(" OR (NATINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATEXC),',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.AWB_PREFIX.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (AWBPFXINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,AWBPFXINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AWBPFXEXC,',')) ");
						query.append(" OR (AWBPFXINC IS NULL AND AWBPFXEXC IS NULL) ");
						query.append(" OR (AWBPFXINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AWBPFXEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}  else if(ShipmentDetailsVO.FLTOWR.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTOWRINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,FLTOWREXC,',')  >0) ");
						query.append(" OR (FLTOWRINC IS NULL AND FLTOWREXC IS NULL) ");
						query.append(" OR (FLTOWRINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,FLTOWREXC,',')  >0) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}else if(ShipmentDetailsVO.FLTTYPE.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTTYP IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYP,',')  >0 ) ");
						query.append(" OR (FLTTYP IS NULL)) ");
						query.setParameter(++parcount, parameterValue);
						}
					}
					else if(ShipmentDetailsVO.FLTTYPE_ORG.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTTYPORGINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPORGEXC,',')) ");
						query.append(" OR (FLTTYPORGINC IS NULL AND FLTTYPORGEXC IS NULL) ");
						query.append(" OR (FLTTYPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPORGEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.FLTTYPE_DST.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTTYPDSTINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPDSTEXC,',')) ");
						query.append(" OR (FLTTYPDSTINC IS NULL AND FLTTYPDSTEXC IS NULL) ");
						query.append(" OR (FLTTYPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPDSTEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.FLTTYPE_VIA.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTTYPVIAINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPVIAEXC,',')) ");
						query.append(" OR (FLTTYPVIAINC IS NULL AND FLTTYPVIAEXC IS NULL) ");
						query.append(" OR (FLTTYPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPVIAEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.FLTTYPE_ALL.equals(parameterCode)) {
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" AND (FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL) ");
							} else {
								query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPALLEXC,',')) ");
								query.append(" OR (FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL) ");
								query.append(" OR (FLTTYPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPALLEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);


								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
						}
						count =0;
						query.append(" AND( ");
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" (FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL) ");
							} else {
								if (count != 0) {
									query.append(" OR ");
								}
								query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTTYPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPANYEXC,',')) ");
								query.append(" OR (FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL) ");
								query.append(" OR (FLTTYPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPANYEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);


								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
							++count;
						}
						query.append(" ) ");
					} else if(ShipmentDetailsVO.SCC_GROUP.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (SCCGRPINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SCCGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCGRPEXC,',')) ");
						query.append(" OR (SCCGRPINC IS NULL AND SCCGRPEXC IS NULL AND SCCGRPEXCIF IS NULL) ");
						query.append(" OR (SCCGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCGRPEXC,',')) ");
						query.append(" OR (SCCGRPINC IS NULL AND NOT pkg_frmwrk.Fun_String_Check(?,SCCGRPEXCIF,',') >0) ) ");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);




						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.FLTOWR_ORG.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTOWRORGINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRORGEXC,',')) ");
						query.append(" OR (FLTOWRORGINC IS NULL AND FLTOWRORGEXC IS NULL) ");
						query.append(" OR (FLTOWRORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRORGEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.FLTOWR_DST.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTOWRDSTINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRDSTEXC,',')) ");
						query.append(" OR (FLTOWRDSTINC IS NULL AND FLTOWRDSTEXC IS NULL) ");
						query.append(" OR (FLTOWRDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRDSTEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.FLTOWR_VIA.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (FLTOWRVIAINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRVIAEXC,',')) ");
						query.append(" OR (FLTOWRVIAINC IS NULL AND FLTOWRVIAEXC IS NULL) ");
						query.append(" OR (FLTOWRVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRVIAEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.FLTOWR_ALL.equals(parameterCode)) {
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" AND (FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
							} else {
								query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRALLEXC,',')) ");
								query.append(" OR (FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
								query.append(" OR (FLTOWRALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRALLEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);


								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
						}
						count =0;
						query.append(" AND( ");
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
							} else {
								if (count != 0) {
									query.append(" OR ");
								}
								query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTOWRANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRANYEXC,',')) ");
								query.append(" OR (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
								query.append(" OR (FLTOWRANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRANYEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);


								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
							++count;
						}
						query.append(" ) ");
					}else if(ShipmentDetailsVO.AIRLINE_GRP.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (ARLGRPINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,ARLGRPEXC,',')  >0) ");
						query.append(" OR (ARLGRPINC IS NULL AND ARLGRPEXC IS NULL) ");
						query.append(" OR (ARLGRPINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,ARLGRPEXC,',')  >0) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}  else if(ShipmentDetailsVO.AIRLINE_GRP_ORG.equals(parameterCode)) {
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (ARLGRPORGINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPORGEXC,',')) ");
						query.append(" OR (ARLGRPORGINC IS NULL AND ARLGRPORGEXC IS NULL) ");
						query.append(" OR (ARLGRPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPORGEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					}  else if(ShipmentDetailsVO.AIRLINE_GRP_DST.equals(parameterCode)) {
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (ARLGRPDSTINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPDSTEXC,',')) ");
						query.append(" OR (ARLGRPDSTINC IS NULL AND ARLGRPDSTEXC IS NULL) ");
						query.append(" OR (ARLGRPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPDSTEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.AIRLINE_GRP_VIA.equals(parameterCode)) {
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (ARLGRPVIAINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPVIAEXC,',')) ");
						query.append(" OR (ARLGRPVIAINC IS NULL AND ARLGRPVIAEXC IS NULL) ");
						query.append(" OR (ARLGRPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPVIAEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.AIRLINE_GRP_ALL.equals(parameterCode)) {
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" AND (ARLGRPALLINC IS NULL AND ARLGRPALLEXC IS NULL) ");
							} else {
								query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPALLEXC,',')) ");
								query.append(" OR (ARLGRPALLINC IS NULL AND ARLGRPALLEXC IS NULL) ");
								query.append(" OR (ARLGRPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPALLEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);


								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
						}
						count =0;
						query.append(" AND( ");
						for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
							if (TILDE.equals(paramValue)) {
								query.append(" (ARLGRPANYINC IS NULL AND ARLGRPANYEXC IS NULL) ");
							} else {
								if (count != 0) {
									query.append(" OR ");
								}
								query.append(" ((pkg_frmwrk.Fun_String_Check(?,ARLGRPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPANYEXC,',')) ");
								query.append(" OR (ARLGRPANYINC IS NULL AND ARLGRPANYEXC IS NULL) ");
								query.append(" OR (ARLGRPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPANYEXC,',')) )");
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);


								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
								query.setParameter(++parcount, paramValue);
							}
							++count;
						}
						query.append(" ) ");
					} else if(ShipmentDetailsVO.UN_NUMBER.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (UNDNUMINC IS NULL) ");
						} else {
						query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,UNDNUMINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNDNUMEXC,',')) ");
						query.append(" OR (UNDNUMINC IS NULL AND UNDNUMEXC IS NULL) ");
						query.append(" OR (UNDNUMINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNDNUMEXC,',')) )");
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);


						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						query.setParameter(++parcount, parameterValue);
						}
					} else if(ShipmentDetailsVO.HEIGHT.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (HGTSTR IS NULL AND HGTEND IS NULL) ");
						} else {
							int heightCounter = 0;
							query.append(" AND (");
							for (String height : parameterValue.split(",")) {
								if (heightCounter > 0) {
									query.append(" OR ");
								}
								query.append(" ((((HGTSTR =? AND HGTEND =?)");
								query.append(" 	OR (TO_NUMBER(HGTEND)>=?  AND HGTSTR is  NULL)");
								query.append(" 	OR (TO_NUMBER(HGTSTR)<=?  AND HGTEND is  NULL)");
								query.append(" OR (HGTSTR IS NULL AND HGTEND IS NULL) ");
								query.append(" 	OR (TO_NUMBER(HGTEND)>=?  AND TO_NUMBER(HGTSTR)<=? ))))");
								query.setParameter(++parcount,height);
								query.setParameter(++parcount,height);
								query.setParameter(++parcount,height);
								query.setParameter(++parcount,height);
								query.setParameter(++parcount,height);
								query.setParameter(++parcount,height);
								++heightCounter;
							}
							query.append(" ) ");
						}
					}else if(ShipmentDetailsVO.LENGTH.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (LENSTR IS NULL AND LENEND IS NULL) ");
						} else {
							int lengthCounter = 0;
							query.append(" AND (");
							for (String length : parameterValue.split(",")) {
								if (lengthCounter > 0) {
									query.append(" OR ");
								}
								query.append(" ((((LENSTR =? AND LENEND =?)");
								query.append(" 	OR (TO_NUMBER(LENEND)>=?  AND LENSTR is  NULL)");
								query.append(" 	OR (TO_NUMBER(LENSTR)<=?  AND LENEND is  NULL)");
								query.append(" OR (LENSTR IS NULL AND LENEND IS NULL) ");
								query.append(" 	OR (TO_NUMBER(LENEND)>=?  AND TO_NUMBER(LENSTR)<=? ))))");
								query.setParameter(++parcount,length);
								query.setParameter(++parcount,length);
								query.setParameter(++parcount,length);
								query.setParameter(++parcount,length);
								query.setParameter(++parcount,length);
								query.setParameter(++parcount,length);
								++lengthCounter;
							}
							query.append(" ) ");
						}
					}else if(ShipmentDetailsVO.WIDTH.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (WIDSTR IS NULL AND WIDEND IS NULL) ");
						} else {
							int widthCounter = 0;
							query.append(" AND (");
							for (String width : parameterValue.split(",")) {
								if (widthCounter > 0) {
									query.append(" OR ");
								}
								query.append(" ((((WIDSTR =? AND WIDEND =?)");
								query.append(" 	OR (TO_NUMBER(WIDEND)>=?  AND WIDSTR is  NULL)");
								query.append(" 	OR (TO_NUMBER(WIDSTR)<=?  AND WIDEND is  NULL)");
								query.append(" OR (WIDSTR IS NULL AND WIDEND IS NULL) ");
								query.append(" 	OR (TO_NUMBER(WIDEND)>=?  AND TO_NUMBER(WIDSTR)<=? ))))");
								query.setParameter(++parcount,width);
								query.setParameter(++parcount,width);
								query.setParameter(++parcount,width);
								query.setParameter(++parcount,width);
								query.setParameter(++parcount,width);
								query.setParameter(++parcount,width);
								++widthCounter;
							}
							query.append(" ) ");
						}
					}else if(ShipmentDetailsVO.WEIGHT.equals(parameterCode)){
						if (TILDE.equals(parameterValue)) {
							query.append(" AND (WGTSTR IS NULL AND WGTEND IS NULL) ");
						} else {
							int weightCounter = 0;
							query.append(" AND (");
							for (String weight : parameterValue.split(",")) {
								if (weightCounter > 0) {
									query.append(" OR ");
								}
								query.append(" ((((WGTSTR =? AND WGTEND =?)");
								query.append(" 	OR (TO_NUMBER(WGTEND)>=?  AND WGTSTR is  NULL)");
								query.append(" 	OR (TO_NUMBER(WGTSTR)<=?  AND WGTEND is  NULL)");
								query.append(" OR (WGTSTR IS NULL AND WGTEND IS NULL) ");
								query.append(" 	OR (TO_NUMBER(WGTEND)>=?  AND TO_NUMBER(WGTSTR)<=? ))))");
								query.setParameter(++parcount,weight);
								query.setParameter(++parcount,weight);
								query.setParameter(++parcount, weight);
								query.setParameter(++parcount, weight);
								query.setParameter(++parcount, weight);
								query.setParameter(++parcount, weight);
								++weightCounter;
							}
							query.append(" ) ");
						}
					}
				}
			}
		}
		*//***//*

	//	query.append(" AND( ");
	//	for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
			if(shipmentVO.getMap().containsKey(ShipmentDetailsVO.FLTNUM_ALL)) {

				if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTNUM_ALL).contains(TILDE)) {
					query.append(" AND (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
				} else {
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLINC,',')  >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
					query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
					query.append(" OR (FLTNUMALLINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) )");
					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);
				}

		if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTNUM_ALL).contains(TILDE)) {
				query.append(" (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
			} else {
				if (count != 0) {
					query.append(" OR ");
				}
				query.append("AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYINC,',')  >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) ");
				query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
				query.append(" OR (FLTNUMANYINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) )");
				query.setParameter(++parcount, paramValue);
				query.setParameter(++parcount, paramValue);
				query.setParameter(++parcount, paramValue);
				query.setParameter(++parcount, paramValue);
				query.setParameter(++parcount, paramValue);
			}
		//}
	//	query.append(" ) ");
			}

			*//***//*


			for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
			if(shipmentVO.getMap().containsKey(ShipmentDetailsVO.FLTOWR_ALL)){
				if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTOWR_ALL).contains(TILDE)) {
					query.append(" AND (FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
				} else {
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRALLINC,',')  >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRALLEXC,',')) ");
					query.append(" OR (FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
					query.append(" OR (FLTOWRALLINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRALLEXC,',')) )");
					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);


					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);
				}
		//	}
			count =0;
			//query.append(" AND( ");
			//for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
				if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTOWR_ALL).contains(TILDE)) {
					query.append(" AND (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
				} else {
					if (count != 0) {
						query.append(" OR ");
					}
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRANYINC,',')  >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRANYEXC,',')) ");
					query.append(" OR (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
					query.append(" OR (FLTOWRANYINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRANYEXC,',')) )");
					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);


					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);
					query.setParameter(++parcount, paramValue);
				}
			//	++count;
			}
			query.append(" ) ");



		*//***//*
		if (shipmentVO.getBookingFlightDetailVOs() != null
				&& shipmentVO.getBookingFlightDetailVOs().size() > 0) {
			query.append( " AND ( ");
			int flightCounter = 0;
			Set<String> carrierCodes = null;
			Set<String> times = null;
			Set<String> dates = null;
			Set<String> flightnumbers = null;
			Set<String> dayOfWeeks = null;
			boolean isAndFlag = false;
			int counter = 0;
			for (BookingFlightDetailVO bookingFlightDetailVO :
				shipmentVO.getBookingFlightDetailVOs()) {
				carrierCodes = new HashSet<String>();
				times = new HashSet<String>();
				dates = new HashSet<String>();
				flightnumbers = new HashSet<String>();
				dayOfWeeks = new HashSet<String>();
				if (flightCounter > 0) {
					query.append( " OR");
					isAndFlag = false;
				}
				query.append( " (");
				if (bookingFlightDetailVO.getCarrierOrigin() != null
						&& bookingFlightDetailVO.getCarrierOrigin().trim().length() > 0) {
					if (isAndFlag) {
						query.append(" AND ");
					}
					isAndFlag = true;

					//query.append(" ((pkg_frmwrk.Fun_String_Check(?,CARRORGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRORGEXC,',')) ");
					query.append(" pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRORGINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRORGEXC,',')) ");
					query.append(" OR (CARRORGINC IS NULL AND CARRORGEXC IS NULL) ");
					query.append(" OR (CARRORGINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRORGEXC,',')) )");
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());


					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
					carrierCodes.add(bookingFlightDetailVO.getCarrierOrigin());
				}







				if (bookingFlightDetailVO.getCarrierDestination() != null
						&& bookingFlightDetailVO.getCarrierDestination().trim().length() > 0) {
					if (isAndFlag) {
						query.append(" AND ");
					}
					isAndFlag = true;
					query.append(" ((pkg_frmwrk.Fun_String_Check(?,CARRDSTINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) ");
					query.append(" OR (CARRDSTINC IS NULL AND CARRDSTEXC IS NULL) ");
					query.append(" OR (CARRDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) )");
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());


					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
					carrierCodes.add(bookingFlightDetailVO.getCarrierDestination());
				}







				if (bookingFlightDetailVO.getCarrierViaPoint() != null
						&& bookingFlightDetailVO.getCarrierViaPoint().trim().length() > 0) {
					if (isAndFlag) {
						query.append(" AND ");
					}
					isAndFlag = true;
					query.append(" ((pkg_frmwrk.Fun_String_Check(?,CARRVIAINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) ");
					query.append(" OR (CARRVIAINC IS NULL AND CARRVIAEXC IS NULL) ");
					query.append(" OR (CARRVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) )");
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());


					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
					query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
					carrierCodes.add(bookingFlightDetailVO.getCarrierViaPoint());
				}







				if (carrierCodes.size() > 0) {
					//For applicable on all
					query.append(" AND(( ");
					counter = 0;
					for (String carrier : carrierCodes) {
						if (counter != 0) {
							query.append(" AND ");
						}
						//query.append(" (pkg_frmwrk.Fun_String_Check(?,CARRALLINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRALLEXC,',')) ");
						query.append(" (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRALLINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRALLEXC,',')) ");

						query.setParameter(++parcount, carrier);
						query.setParameter(++parcount, carrier);
						query.setParameter(++parcount, carrier);

						++counter;
					}
					counter = 0;
					query.append(" ) OR( ");
					for (String carrier : carrierCodes) {
						if (counter != 0) {
							query.append(" AND ");
						}

						//query.append(" (CARRALLINC='-' AND (regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRALLEXC,','))) ");
						query.append(" (CARRALLINC='-' AND (regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRALLEXC,','))) ");

						query.setParameter(++parcount, carrier);

						query.setParameter(++parcount, carrier);
						++counter;
					}
					query.append(" ) OR (CARRALLINC IS NULL AND CARRALLEXC IS NULL) ) ");

					//For applicable on any
					query.append(" AND(( ");
					counter = 0;
					for (String carrier : carrierCodes) {
						if (counter != 0) {
							query.append(" OR ");
						}
						//query.append(" (pkg_frmwrk.Fun_String_Check(?,CARRANYINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRANYEXC,',')) ");
					query.append(" (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRANYINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRANYEXC,',')) ");

						query.setParameter(++parcount, carrier);
						query.setParameter(++parcount, carrier);
						query.setParameter(++parcount, carrier);
						++counter;
					}
					counter = 0;
					query.append(" ) OR( ");
					for (String carrier : carrierCodes) {
						if (counter != 0) {
							query.append(" OR ");
						}
						//query.append(" (CARRANYINC='-' AND (regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRANYEXC,','))) ");
					query.append(" (CARRANYINC='-' AND (regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRANYEXC,','))) ");

						query.setParameter(++parcount, carrier);

						query.setParameter(++parcount, carrier);
						++counter;
					}
					query.append(" ) OR (CARRANYINC IS NULL AND CARRANYEXC IS NULL) ) ");
				}
				if (bookingFlightDetailVO.getFlightCarrierCode()!=null
						&& bookingFlightDetailVO.getFlightCarrierCode().trim().length() > 0) {
					//query.append("  ((pkg_frmwrk.Fun_String_Check(?,ARLCODINC,',') >0 AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',') >0) ");
					query.append("AND");//Added by A-8146
					query.append("  ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,ARLCODINC,',') >0 AND NOT pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,ARLCODEXC,',') >0) ");

					query.append(" OR (ARLCODINC IS NULL AND ARLCODEXC IS NULL) ");
					//query.append(" OR (ARLCODINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',') >0) )");
					query.append(" OR (ARLCODINC='-' AND NOT pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,ARLCODEXC,',') >0) )");

					query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
				}
				if (bookingFlightDetailVO.getFlightNumber() != null
						&& bookingFlightDetailVO.getFlightNumber().trim().length() > 0) {
					StringBuilder flightNumber = new StringBuilder();
					flightNumber.append(
							bookingFlightDetailVO.getFlightCarrierCode()).append("~").append(
									bookingFlightDetailVO.getFlightNumber()).toString();
					//query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMINC,',') >0 AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',') >0) ");
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMINC,',') >0 AND NOT pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMEXC,',') >0) ");

					query.append(" OR (FLTNUMINC IS NULL AND FLTNUMEXC IS NULL) ");
					//query.append(" OR (FLTNUMINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',') >0) )");
					query.append(" OR (FLTNUMINC='-' AND NOT pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMEXC,',') >0) )");

					query.setParameter(++parcount, flightNumber.toString());
					query.setParameter(++parcount, flightNumber.toString());
					query.setParameter(++parcount, flightNumber.toString());
				}

				if (bookingFlightDetailVO.getTimeOrigin() != null) {
					// case 1: eq
					query.append(" AND ((((");
					query.append(" (TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')))");
					// case 2
					query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND ORGSTRTIM is  NULL AND ORGENDTIM is not NULL))");
					// case 3
					query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND ORGENDTIM is  NULL AND ORGSTRTIM is not NULL))");
					// case 4
					query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS') )) ");
					query.append("  OR(ORGSTRTIM is  NULL AND ORGENDTIM is NULL) )))");
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
					times.add(bookingFlightDetailVO.getTimeOrigin());
				}



				if(bookingFlightDetailVO.getTimeDestination() != null){
					// case 1: eq
					query.append(" AND ((((");
					query.append(" (TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')))");
					// case 2
					query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND DSTSTRTIM is  NULL AND DSTENDTIM is not NULL))");
					// case 3
					query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND DSTENDTIM is  NULL AND DSTSTRTIM is not NULL))");
					// case 4
					query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS') ))");
					query.append("  OR(DSTSTRTIM is  NULL AND DSTENDTIM is NULL) )))");
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
					times.add(bookingFlightDetailVO.getTimeDestination());
				}



				if(bookingFlightDetailVO.getTimeViaPoint() != null) {
					// case 1: eq
					query.append(" AND ((((");
					query.append(" (TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')))");
					// case 2
					query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND VIASTRTIM is  NULL AND VIAENDTIM is not NULL))");
					// case 3
					query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND VIAENDTIM is  NULL AND VIASTRTIM is not NULL))");
					// case 4
					query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')");
					query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') ))");
					query.append("  OR(VIASTRTIM is  NULL AND VIAENDTIM is NULL) )))");
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
					query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
					times.add(bookingFlightDetailVO.getTimeViaPoint());
				}
				else {
					query.append(" AND (VIASTRTIM IS NULL AND VIAENDTIM IS NULL) ");
				//}
				if (times.size() > 0) {
					//For applicable on all
					query.append(" AND(");
					counter = 0;
					for (String time : times) {
						if (counter != 0) {
							query.append(" AND ");
						}
						query.append(" ((((");
						query.append(" (TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
						query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')))");
						// case 2
						query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
						query.append(" AND ALLSTRTIM is  NULL AND ALLENDTIM is not NULL))");
						// case 3
						query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
						query.append(" AND ALLENDTIM is  NULL AND ALLSTRTIM is not NULL))");
						// case 4
						query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
						query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS') ))");
						query.append("  OR(ALLSTRTIM is  NULL AND ALLENDTIM is NULL) )))");
						//query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						++counter;
					}
					query.append(" ) ");
					//For applicable on any
					query.append(" AND(");
					counter = 0;
					for (String time : times) {
						if (counter != 0) {
							query.append(" OR ");
						}
						query.append(" ((((");
						query.append(" (TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
						query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')))");
						// case 2
						query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
						query.append(" AND ANYSTRTIM is  NULL AND ANYENDTIM is not NULL))");
						// case 3
						query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
						query.append(" AND ANYENDTIM is  NULL AND ANYSTRTIM is not NULL))");
						// case 4
						query.append(" OR ((TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')");
						query.append(" AND TO_DATE(to_char(sysdate,'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_DATE(to_char(sysdate,'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS') ))");
						query.append("  OR(ANYSTRTIM is  NULL AND ANYENDTIM is NULL) )))");
						query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						query.setParameter(++parcount,time);
						++counter;
					}
					query.append(" ) ");
				}
				if (bookingFlightDetailVO.getDateOrigin() != null) {
					query.append(" AND ((pkg_frmwrk.Fun_String_Check((TO_CHAR(SHR.STD,'dd-mm-yy')),ORGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),ORGDATEXC,',') ");
					query.append(" OR (ORGDATINC IS NULL AND ORGDATEXC IS NULL) ");
					query.append(" OR (ORGDATINC='-' AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),ORGDATEXC,',' )");
					query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
					dates.add(bookingFlightDetailVO.getDateOrigin().toUpperCase());

				}
				else {
					query.append(" AND (ORGDATINC IS NULL AND ORGDATEXC IS NULL) ");
				}
				if (bookingFlightDetailVO.getDateViaPoint() != null) {

					query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,VIADATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,VIADATEXC,',')) ");
					query.append(" OR (VIADATINC IS NULL AND VIADATEXC IS NULL) ");
					query.append(" OR (VIADATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,VIADATEXC,',')) )");
					query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
					dates.add(bookingFlightDetailVO.getDateViaPoint().toUpperCase());
				} else {
					query.append(")))");//Added by A-8146
					query.append(" AND (VIADATINC IS NULL AND VIADATEXC IS NULL) ");
				}
				if (bookingFlightDetailVO.getDateDestination() != null) {
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATEXC,',')) ");
					query.append(" OR (DSTDATINC IS NULL AND DSTDATEXC IS NULL) ");
					query.append(" OR (DSTDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATEXC,',') )");
					query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
					query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
					dates.add(bookingFlightDetailVO.getDateDestination().toUpperCase());
				} else {
					query.append(" AND (DSTDATINC IS NULL AND DSTDATEXC IS NULL) ");






				}
				if (dates.size() > 0) {
					//For applicable on all
					query.append(")");//Added by A-8146
					query.append(" AND(");
					counter = 0;
					for (String dateString : dates) {
						if (counter != 0) {
							query.append(" AND ");
						}
						query.append(" (pkg_frmwrk.Fun_String_Check((TO_CHAR(SHR.STA,'dd-mm-yy')),ALLDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),ALLDATEXC,',')) ");
						query.append(" OR (ALLDATINC IS NULL AND ALLDATEXC IS NULL) ");
						query.append(" OR (ALLDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),ALLDATEXC,',') )");
						query.setParameter(++parcount, dateString);
						query.setParameter(++parcount, dateString);
						query.setParameter(++parcount, dateString);
						query.setParameter(++parcount, dateString);
						query.setParameter(++parcount, dateString);
						++counter;
					}
					query.append(" ) ");
					//For applicable on any
					query.append(" AND(");
					counter = 0;
					for (String dateString : dates) {
						if (counter != 0) {
							query.append(" OR ");
						}
						query.append(" (pkg_frmwrk.Fun_String_Check((TO_CHAR(SHR.STA,'dd-mm-yy')),ANYDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),ANYDATEXC,',')) ");
						query.append(" OR (ANYDATINC IS NULL AND ANYDATEXC IS NULL) ");
						query.append(" OR (ANYDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),ANYDATEXC,',' ))");
						query.setParameter(++parcount, dateString);
						query.setParameter(++parcount, dateString);
						query.setParameter(++parcount, dateString);



						query.setParameter(++parcount, dateString);
						query.setParameter(++parcount, dateString);
						++counter;
					}
					query.append(" ) ");
				}
				if (bookingFlightDetailVO.getDayOfWeekOrg()!=null
						&& bookingFlightDetailVO.getDayOfWeekOrg().trim().length() > 0) {
					String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
					String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
					String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
					query.append(" AND "
							/*+ "("
							+ "(ORGDAYOPR LIKE SHR.SEGORG) "
							+ "");
					query.append("AND ((INSTR(ORGARPCODINC,SHR.SEGORG)>0 OR INSTR(ORGARPCODEXC , SHR.SEGORG) = 0 ) ");
					if(airportGrp!=null){
						query.append("OR (INSTR(ORGARPGRPINC,SHR.SEGORG)>0 OR INSTR(ORGARPGRPEXC , SHR.SEGORG) = 0 ) ");
					//}
					if(country!=null){
						query.append("OR (INSTR(ORGCNTCODINC,?)>0 OR INSTR(ORGCNTCODEXC , ?) = 0 ) ");
					}
					if(countryGrp!=null){
						query.append("OR (INSTR(ORGCNTGRPINC,?)>0 OR INSTR(ORGCNTGRPEXC , ?) = 0 ) ");
					}
					query.append("  OR ( (ORGARPCODINC IS NULL OR ORGARPCODINC ='-') AND  (ORGCNTCODINC IS NULL OR ORGCNTCODINC ='-') AND (ORGARPGRPINC IS NULL OR ORGARPGRPINC='-')  AND (ORGCNTGRPINC IS NULL OR ORGCNTGRPINC = '-') ) ");
					query.append(")");
					query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekOrg() + '%');
					query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
					query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
					if(airportGrp!=null){
						query.setParameter(++parcount,airportGrp);
						query.setParameter(++parcount,airportGrp);
					}
					if(country!=null){
						query.setParameter(++parcount,country);
						query.setParameter(++parcount,country);
					}
					if(countryGrp!=null){
						query.setParameter(++parcount,countryGrp);
						query.setParameter(++parcount,countryGrp);
					}
					dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekOrg());
				}
				else {
					query.append(" AND (ORGDAYOPR IS NULL ) ");
				}

				if (bookingFlightDetailVO.getDayOfWeekViaPt()!=null
						&& bookingFlightDetailVO.getDayOfWeekViaPt().trim().length() > 0) {
					String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
					String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
					String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
					query.append(" AND ((VIADAYOPR LIKE ?) ");
					query.append(" OR (VIADAYOPR IS NULL))  AND ((INSTR(VIAARPCODINC,?)>0 OR INSTR(VIAARPCODEXC , ?) = 0 )  ");
					if(airportGrp!=null){
						query.append("OR (INSTR(VIAARPGRPINC,?)>0 OR INSTR(VIAARPGRPEXC , ?) = 0 ) ");
					}
					if(country!=null){
						query.append("OR (INSTR(VIACNTCODINC,?)>0 OR INSTR(VIACNTCODEXC , ?) = 0 ) ");
					}
					if(countryGrp!=null){
						query.append("OR (INSTR(VIACNTGRPINC,?)>0 OR INSTR(VIACNTGRPEXC , ?) = 0 ) ");
					}
					query.append("  OR ( (VIAARPCODINC IS NULL OR VIAARPCODINC ='-') AND  (VIACNTCODINC IS NULL OR VIACNTCODINC ='-') AND (VIAARPGRPINC IS NULL OR VIAARPGRPINC='-')  AND (VIACNTGRPINC IS NULL OR VIACNTGRPINC = '-') ) ");
					query.append(")");
					query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekViaPt() + '%');
					query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
					query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
					if(airportGrp!=null){
						query.setParameter(++parcount,airportGrp);
						query.setParameter(++parcount,airportGrp);
					}
					if(country!=null){
						query.setParameter(++parcount,country);
						query.setParameter(++parcount,country);
					}
					if(countryGrp!=null){
						query.setParameter(++parcount,countryGrp);
						query.setParameter(++parcount,countryGrp);
					}
					dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekViaPt());
				}
				else {
					//query.append(" AND (VIADAYOPR IS NULL ) ");
				}
				if (bookingFlightDetailVO.getDayOfWeekDst()!=null
						&& bookingFlightDetailVO.getDayOfWeekDst().trim().length() > 0) {
					String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
					String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
					String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
					query.append(" AND "
							+ "("
							+ "(DSTDAYOPR LIKE ?) "
							+ "");
					query.append(" "
							+ "OR "
							+ "(DSTDAYOPR IS NULL)"
							+ ") "
							+ "");
					query.append(" AND ((INSTR(DSTARPCODINC,SHR.SHPDST)>0 OR INSTR(DSTARPCODEXC , SHR.SHPDST) = 0 )  ");
					if(airportGrp!=null){
						query.append("OR (INSTR(DSTARPGRPINC,SHR.SHPDST)>0 OR INSTR(DSTARPGRPEXC , SHR.SHPDST) = 0 ) ");
					}
					if(country!=null){
						query.append("OR (INSTR(DSTCNTCODINC,?)>0 OR INSTR(DSTCNTCODEXC , ?) = 0 ) ");
					}
					if(countryGrp!=null){
						query.append("OR (INSTR(DSTCNTGRPINC,?)>0 OR INSTR(DSTCNTGRPEXC , ?) = 0 ) ");
					}
					query.append("  OR ( (DSTARPCODINC IS NULL OR DSTARPCODINC ='-') AND  (DSTCNTCODINC IS NULL OR DSTCNTCODINC ='-') AND (DSTARPGRPINC IS NULL OR DSTARPGRPINC='-')  AND (DSTCNTGRPINC IS NULL OR DSTCNTGRPINC = '-') ) ");
					query.append(")");
					query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekDst() + '%');
					query.setParameter(++parcount, bookingFlightDetailVO.getDestination() );
					query.setParameter(++parcount,bookingFlightDetailVO.getDestination());
					if(airportGrp!=null){
						query.setParameter(++parcount,airportGrp);
						query.setParameter(++parcount,airportGrp);
					}
					if(country!=null){
						query.setParameter(++parcount,country);
						query.setParameter(++parcount,country);
					}
					if(countryGrp!=null){
						query.setParameter(++parcount,countryGrp);
						query.setParameter(++parcount,countryGrp);
					}
					dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekDst());
				}
				else {
					query.append(" AND (DSTDAYOPR IS NULL ) ");
				}
				if (dayOfWeeks.size() > 0) {
					//For applicable on all
					query.append(" AND(");
					counter = 0;
					for (String dayOfWeek : dayOfWeeks) {
						if (counter != 0) {
							query.append(" AND ");
						}
						query.append(" ("
								+ "( ALLDAYOPR LIKE ? ) "
								+ "");
						query.append(" "
								+ "OR "
								+ "(ALLDAYOPR IS NULL)) ");
						query.setParameter(++parcount,'%' + dayOfWeek + '%');
						++counter;
					}
					query.append(" ) ");
					//For applicable on any
					query.append(" AND(");
					counter = 0;
					for (String dayOfWeek : dayOfWeeks) {
						if (counter != 0) {
							query.append(" OR ");
						}
						query.append(" ("
								+ "( ANYDAYOPR LIKE ? )"
								+ " ");
						query.append(" "
								+ "OR "
								+ "(ANYDAYOPR IS NULL)) ");
						query.setParameter(++parcount,'%' + dayOfWeek + '%');
						++counter;
					}
					query.append(" ) ");
				}
					// Added by A-5290 for ICRD-225922 for fixing the day of operation scenario
					query.append(" AND (  CASE    WHEN ALLDAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN (INSTR(ALLDAYOPR, NVL((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ALLDAYOPR)) > 0        "
							+ "AND INSTR(ALLDAYOPR, NVL((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ALLDAYOPR)) > 0         "
							+ "AND INSTR(ALLDAYOPR, NVL((CASE WHEN (SHR.SEGDST <> SHR.SHPDST)       "
							+ " THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ALLDAYOPR)) > 0       "
							+ " AND INSTR(ALLDAYOPR, NVL((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA) END),ALLDAYOPR)) > 0)       "
							+ " THEN 1        ELSE 0      END    "
							+ "WHEN ANYDAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN (INSTR(ANYDAYOPR, NVL((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ANYDAYOPR)) > 0        "
							+ "OR INSTR(ANYDAYOPR, NVL((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ANYDAYOPR)) > 0        "
							+ "OR INSTR(ANYDAYOPR, NVL((CASE WHEN (SHR.SEGDST <> SHR.SHPDST)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ANYDAYOPR)) > 0        "
							+ "OR INSTR(ANYDAYOPR, NVL((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA) END),ANYDAYOPR)) > 0)        "
							+ "THEN 1        ELSE 0      END    "
							+ "WHEN ORGDAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN INSTR(ORGDAYOPR, NVL((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ORGDAYOPR)) > 0        "
							+ "THEN 1        ELSE 0      END    "
							+ "WHEN VIADAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN INSTR(VIADAYOPR, NVL((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),VIADAYOPR)) > 0        "
							+ "THEN 1        ELSE 0      END    "
							+ "WHEN DSTDAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN INSTR(DSTDAYOPR, NVL((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA) END),DSTDAYOPR)) > 0       "
							+ "THEN 1        ELSE 0      END    ELSE 1  END   = 1) ");
				if (bookingFlightDetailVO.getFlightNumberOrigin() != null
						&& bookingFlightDetailVO.getFlightNumberOrigin().trim().length() > 0) {
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGEXC,',')) ");
					query.append(" OR (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL) ");
					query.append(" OR (FLTNUMORGINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGEXC,',')) )");
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());


					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
					flightnumbers.add(bookingFlightDetailVO.getFlightNumberOrigin());
				}
				else {
					query.append(" AND (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL) ");
				}
				if (bookingFlightDetailVO.getFlightNumberDestination() != null
						&& bookingFlightDetailVO.getFlightNumberDestination().trim().length() > 0) {

					query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTEXC,',')) ");
					query.append(" OR (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL) ");
					query.append(" OR (FLTNUMDSTINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTEXC,',')) )");
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
					flightnumbers.add(bookingFlightDetailVO.getFlightNumberDestination());
				}



				else {
					query.append(" AND (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL) ");
				}
				if (bookingFlightDetailVO.getFlightNumberViaPoint() != null
						&& bookingFlightDetailVO.getFlightNumberViaPoint().trim().length() > 0) {
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,',')) ");
					query.append(" OR (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL) ");
					query.append(" OR (FLTNUMVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,',')) )");
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
					query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
					flightnumbers.add(bookingFlightDetailVO.getFlightNumberViaPoint());
				}
				else {
					query.append(" AND (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL) ");
				}
				if (flightnumbers.size() > 0) {
					//For applicable on all
					query.append(" AND(");
					counter = 0;
					for (String flightnumber : flightnumbers) {
						if (counter != 0) {
							query.append(" AND ");
						}
						query.append(" (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
						query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
						query.append(" OR (FLTNUMALLINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
						query.setParameter(++parcount, flightnumber);
						query.setParameter(++parcount, flightnumber);
						query.setParameter(++parcount, flightnumber);
						query.setParameter(++parcount, flightnumber);
						query.setParameter(++parcount, flightnumber);


						++counter;
					}
					query.append(" ) ");
					//For applicable on any
					query.append(" AND(");
					counter = 0;
					for (String flightnumber : flightnumbers) {
						if (counter != 0) {
							query.append(" OR ");
						}
						query.append(" (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) ");
						query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
						query.append(" OR (FLTNUMANYINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')");
						query.setParameter(++parcount, flightnumber);
						query.setParameter(++parcount, flightnumber);
						query.setParameter(++parcount, flightnumber);
						query.setParameter(++parcount, flightnumber);
						query.setParameter(++parcount, flightnumber);
						++counter;
					}
					query.append(" ) ");
				}
				flightCounter++;
					// Added by A-5290 for ICRD-225922 for fixing the day of operation scenario
					query.append(" AND (  CASE    WHEN ALLDAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN (INSTR(ALLDAYOPR, NVL((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ALLDAYOPR)) > 0        "
							+ "AND INSTR(ALLDAYOPR, NVL((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ALLDAYOPR)) > 0         "
							+ "AND INSTR(ALLDAYOPR, NVL((CASE WHEN (SHR.SEGDST <> SHR.SHPDST)       "
							+ " THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ALLDAYOPR)) > 0       "
							+ " AND INSTR(ALLDAYOPR, NVL((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA) END),ALLDAYOPR)) > 0)       "
							+ " THEN 1        ELSE 0      END    "
							+ "WHEN ANYDAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN (INSTR(ANYDAYOPR, NVL((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ANYDAYOPR)) > 0        "
							+ "OR INSTR(ANYDAYOPR, NVL((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ANYDAYOPR)) > 0        "
							+ "OR INSTR(ANYDAYOPR, NVL((CASE WHEN (SHR.SEGDST <> SHR.SHPDST)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ANYDAYOPR)) > 0        "
							+ "OR INSTR(ANYDAYOPR, NVL((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA) END),ANYDAYOPR)) > 0)        "
							+ "THEN 1        ELSE 0      END    "
							+ "WHEN ORGDAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN INSTR(ORGDAYOPR, NVL((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),ORGDAYOPR)) > 0        "
							+ "THEN 1        ELSE 0      END    "
							+ "WHEN VIADAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN INSTR(VIADAYOPR, NVL((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD) END),VIADAYOPR)) > 0        "
							+ "THEN 1        ELSE 0      END    "
							+ "WHEN DSTDAYOPR IS NOT NULL    "
							+ "THEN      CASE        WHEN INSTR(DSTDAYOPR, NVL((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
							+ "THEN Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA) END),DSTDAYOPR)) > 0       "
							+ "THEN 1        ELSE 0      END    ELSE 1  END   = 1) ");
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGEXC,',')) ");
					query.append(" OR (FLTNUMORGINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGEXC,',')) )");
					query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTEXC,',')) ");
					query.append(" OR (FLTNUMDSTINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTEXC,',')) )");
						query.append(" (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
						query.append(" OR (FLTNUMALLINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
						query.append(" (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) ");
						query.append(" OR (FLTNUMANYINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')");
				query.append( " )");
				break;
			}
//			query.append( " )");
//			query.append( " )");//Added by A-8146
		} else {
			//if no booking exists then there is no chance of multilpe dayof week at origin . So first element can be taken.
			//Also the same need to be checked against Origin
			if(shipmentVO.getDayOfWeekOrg() !=null && shipmentVO.getDayOfWeekOrg().size() >0){
					query.append(" AND( ((ORGDAYOPR LIKE ?) ");
					query.append(" OR (ORGDAYOPR IS NULL)) ");
					query.append(" AND (DSTDAYOPR IS NULL)");
					query.append(" AND (VIADAYOPR IS NULL))");
					query.setParameter(++parcount,'%' + shipmentVO.getDayOfWeekOrg().iterator().next() + '%');
			}
			else {
				query.append(" AND (ORGDAYOPR IS NULL ) ");
			}
			if(shipmentVO.getApplicableTransaction() != null && shipmentVO.getApplicableTransaction().trim().length() > 0 && APP_TRANSACTION_HAWB.equals(shipmentVO.getApplicableTransaction())){
			query.append("	AND ORGSTRTIM is  NULL AND ORGENDTIM is NULL ");
			query.append("	AND DSTSTRTIM is  NULL AND DSTENDTIM is NULL ");
			query.append("	AND VIASTRTIM is  NULL AND VIAENDTIM is NULL ");
			query.append("	AND ALLSTRTIM is  NULL AND ALLENDTIM is NULL ");
			query.append("	AND ANYSTRTIM is  NULL AND ANYENDTIM is NULL ");
		}
		}
		query.append("	AND RULTYP='E' ");
		//Added By A-7533 regaridng ICRD-243965
		if(shipmentVO.isFromPrecheck()){
			query.append("	AND CMPTYP='EMB' ");
		}

		query.append("	AND RECSTA='A' ");
		query.append("	AND SUSFLG<>'Y' ");
		if(shipmentVO.getApplicableTransaction() != null && shipmentVO.getApplicableTransaction().trim().length() > 0){
			query.append(" AND (pkg_frmwrk.Fun_String_Check(?,APPTXN,',') >0) ");

			query.setParameter(++parcount, shipmentVO.getApplicableTransaction() );
		}
		if (shipmentVO.getEmbargoLevel() != null &&
				shipmentVO.getEmbargoLevel().trim().length() > 0) {
			query.append(" AND (pkg_frmwrk.Fun_String_Check(?,RECTYP,',') >0) ");
			query.setParameter(++parcount, shipmentVO.getEmbargoLevel() );
		}
		if (TILDE.equals(shipmentVO.getSplitIndicator())) {
			query.append(" AND (SLTIND IS NULL) ");
		} else {
			query.append(" AND COALESCE(SLTIND,'Y')='Y' ");
		}
		query.append("AND SHR.SESIDR=? ");
		String sessionID="";
		try {
			sessionID = (String)ContextUtils.getTxBusinessParameter("sessionID");
		} catch (SystemException e) {
			log.log(Log.SEVERE, "Exception Occured while getting session ID from Context>>>: "+e.getMessage());
		}
		query.setParameter(++parcount, sessionID);
		query.append(" ORDER BY DECODE(RECTYP, 'E', 1, 'W', 2, 'I', 3, 4),LSTUPDTIM DESC ");

		log.exiting("EmbargoRulesSqlDAO", "constructFilterQueryForSelectFlight");


		*//*}*/

    /**
     * Mapper class for Check Embargo Enhanced method
     */
    private class CheckEmbargoEnhancedMapper implements
            MultiMapper<EmbargoDetailsVO> {
        private String shipmentID="";
        public CheckEmbargoEnhancedMapper(ShipmentDetailsVO shipmentVO) {
            // TODO Auto-generated constructor stub
            this.shipmentID = shipmentVO.getShipmentID();
        }

        /**
         * This method gets  all embargo details
         *
         * @param rs
         * @return List<EmbargoDetailsVO>
         * @throws SQLException
         */

        public List<EmbargoDetailsVO> map(ResultSet rs) throws SQLException {
            /*Map<String, String> map = new HashMap<String, String>();*/
            log.entering("CheckEmbargoMapper", "map");
            Set<EmbargoParameterVO> set = null;//new HashSet<EmbargoParameterVO>();
            String now = null;
            String prev = null;

            List<EmbargoDetailsVO> list = new ArrayList<EmbargoDetailsVO>();
            EmbargoDetailsVO embargoDetailsVO = null;
            Map<String,EmbargoDetailsVO> uniqueEmbargos=new HashMap<String,EmbargoDetailsVO>();
            while (rs.next()) {

                now = rs.getString(REFNUM);
                if (/*!now.equals(prev) &&*/ !uniqueEmbargos.containsKey(rs.getString(REFNUM))) {
                    set = new HashSet<EmbargoParameterVO>();
                    embargoDetailsVO = new EmbargoDetailsVO();
                    embargoDetailsVO.setCompanyCode(rs.getString(CMPCOD));
                    embargoDetailsVO.setShipmentID(this.shipmentID);
                    embargoDetailsVO.setDestination(rs.getString("DSTARPCODINC"));
                    embargoDetailsVO.setDestinationType(rs
                            .getString("DSTTYP"));
                    embargoDetailsVO.setEmbargoDescription(rs
                            .getString("RECDES"));
                    embargoDetailsVO.setEmbargoReferenceNumber(rs
                            .getString(REFNUM));
                    if (rs.getDate("ENDDAT") != null) {
                        LocalDate date = new LocalDate(LocalDate.NO_STATION,
                                Location.NONE,rs.getDate("ENDDAT"));
                        embargoDetailsVO.setEndDate(date);

                    }
                    //Added for ICRD-331282 by Prashant Behera starts
                    embargoDetailsVO.setDestinationAirportGroupInc(rs.getString("DSTARPGRPINC"));
                    embargoDetailsVO.setOriginAirportGroupInc(rs.getString("ORGARPGRPINC"));
                    embargoDetailsVO.setViaPointAirportGroupInc(rs.getString("VIAARPGRPINC"));
                    embargoDetailsVO.setViaPointAirportGroupExc(rs.getString("VIAARPGRPEXC"));
                    embargoDetailsVO.setViaPoint(rs.getString("VIAARPCODINC"));
                    embargoDetailsVO.setViaPointAirportCodeInc(rs.getString("VIAARPCODINC"));
                    embargoDetailsVO.setViaPointAirportCodeExc(rs.getString("VIAARPCODEXC"));
                    embargoDetailsVO.setViaPointCountryCodeInc(rs.getString("VIACNTCODINC"));
                    embargoDetailsVO.setViaPointCountryCodeExc(rs.getString("VIACNTCODEXC"));
                    embargoDetailsVO.setViaPointCountryGroupInc(rs.getString("VIACNTGRPINC"));
                    embargoDetailsVO.setViaPointCountryGroupExc(rs.getString("VIACNTGRPEXC"));
                    //Added for ICRD-331282 by Prashant Behera ends
                    embargoDetailsVO.setOrigin(rs.getString("ORGARPCODINC"));
                    embargoDetailsVO.setOriginType(rs.getString("ORGTYP"));
                    embargoDetailsVO.setRemarks(rs.getString("RECRMK"));

                    LocalDate startDate = new LocalDate(LocalDate.NO_STATION,
                            Location.NONE,rs.getDate(STRDAT));
                    embargoDetailsVO.setStartDate(startDate);

                    embargoDetailsVO.setStatus(rs.getString("RECSTA"));
                    embargoDetailsVO
                            .setEmbargoLevel(rs.getString("RECTYP"));


                    if(rs.getString("MALCLSINC")!= null && !("-".equals(rs.getString("MALCLSINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "MALCLS", rs.getString("MALCLSINC"), now,"");
                    }
                    if(rs.getString("MALCLSEXC")!= null && !("-".equals(rs.getString("MALCLSEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "MALCLS", rs.getString("MALCLSEXC"), now,"");
                    }
                    if(rs.getString("MALCATINC")!= null && !("-".equals(rs.getString("MALCATINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "MALCAT", rs.getString("MALCATINC"), now,"");
                    }
                    if(rs.getString("MALCATEXC")!= null && !("-".equals(rs.getString("MALCATEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "MALCAT", rs.getString("MALCATEXC"), now,"");
                    }
                    if(rs.getString("SUBCLSINC")!= null && !("-".equals(rs.getString("SUBCLSINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "MALSUBCLS", rs.getString("SUBCLSINC"), now,"");
                    }
                    if(rs.getString("SUBCLSEXC")!= null && !("-".equals(rs.getString("SUBCLSEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "MALSUBCLS", rs.getString("SUBCLSEXC"), now,"");
                    }
                    if(rs.getString("SUBCLSGRPINC")!= null && !("-".equals(rs.getString("SUBCLSGRPINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "MALSUBCLSGRP", rs.getString("SUBCLSGRPINC"), now,"");
                    }
                    if(rs.getString("SUBCLSGRPEXC")!= null && !("-".equals(rs.getString("SUBCLSGRPEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "MALSUBCLSGRP", rs.getString("SUBCLSGRPEXC"), now,"");
                    }
                    if(rs.getString("CARRORGINC")!= null && !("-".equals(rs.getString("CARRORGINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "CAR", rs.getString("CARRORGINC"), now,"ORG");
                    }
                    if(rs.getString("CARRORGEXC")!= null && !("-".equals(rs.getString("CARRORGEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "CAR", rs.getString("CARRORGEXC"), now,"ORG");
                    }
                    if(rs.getString("CARRDSTINC")!= null && !("-".equals(rs.getString("CARRDSTINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "CAR", rs.getString("CARRDSTINC"), now,"DST");
                    }
                    if(rs.getString("CARRDSTEXC")!= null && !("-".equals(rs.getString("CARRDSTEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "CAR", rs.getString("CARRDSTEXC"), now,"DST");
                    }
                    if(rs.getString("CARRVIAINC")!= null && !("-".equals(rs.getString("CARRVIAINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "CAR", rs.getString("CARRVIAINC"), now,"VIA");
                    }
                    if(rs.getString("CARRVIAEXC")!= null && !("-".equals(rs.getString("CARRVIAEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "CAR", rs.getString("CARRVIAEXC"), now,"VIA");
                    }
                    if(rs.getString("CARRALLINC")!= null && !("-".equals(rs.getString("CARRALLINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "CAR", rs.getString("CARRALLINC"), now,"ALL");
                    }
                    if(rs.getString("CARRALLEXC")!= null && !("-".equals(rs.getString("CARRALLEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "CAR", rs.getString("CARRALLEXC"), now,"ALL");
                    }
                    if(rs.getString("CARRANYINC")!= null && !("-".equals(rs.getString("CARRANYINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "CAR", rs.getString("CARRANYINC"), now,"ANY");
                    }
                    if(rs.getString("CARRANYEXC")!= null && !("-".equals(rs.getString("CARRANYEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "CAR", rs.getString("CARRANYEXC"), now,"ANY");
                    }
                    if(rs.getString("COMINC")!= null && !("-".equals(rs.getString("COMINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "COM", rs.getString("COMINC"), now,"");
                    }
                    if(rs.getString("COMEXC")!= null && !("-".equals(rs.getString("COMEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "COM", rs.getString("COMEXC"), now,"");
                    }
                    if(rs.getString("SCCCODINC")!= null && !("-".equals(rs.getString("SCCCODINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "SCC", rs.getString("SCCCODINC"), now,"");
                    }
                    if(rs.getString("SCCCODEXC")!= null && !("-".equals(rs.getString("SCCCODEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "SCC", rs.getString("SCCCODEXC"), now,"");
                    }
                    if(rs.getString("SCCCODEXCIF")!= null && !("-".equals(rs.getString("SCCCODEXCIF")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "SCC", rs.getString("SCCCODEXCIF"), now,"");
                    }
                    if(rs.getString("AGTCODINC")!= null && !("-".equals(rs.getString("AGTCODINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "AGT", rs.getString("AGTCODINC"), now,"");
                    }
                    if(rs.getString("AGTCODEXC")!= null && !("-".equals(rs.getString("AGTCODEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "AGT", rs.getString("AGTCODEXC"), now,"");
                    }
                    if(rs.getString("PAYTYPINC")!= null && !("-".equals(rs.getString("PAYTYPINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "PAYTYP", rs.getString("PAYTYPINC"), now,"");
                    }
                    if(rs.getString("PAYTYPEXC")!= null && !("-".equals(rs.getString("PAYTYPEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "PAYTYP", rs.getString("PAYTYPEXC"), now,"");
                    }
                    if(rs.getString("FLTNUMORGINC")!= null && !("-".equals(rs.getString("FLTNUMORGINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTNUM", rs.getString("FLTNUMORGINC"), now,"ORG");
                    }
                    if(rs.getString("FLTNUMORGEXC")!= null && !("-".equals(rs.getString("FLTNUMORGEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUM", rs.getString("FLTNUMORGEXC"), now,"ORG");
                    }
                    if(rs.getString("FLTNUMDSTINC")!= null && !("-".equals(rs.getString("FLTNUMDSTINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTNUM", rs.getString("FLTNUMDSTINC"), now,"DST");
                    }
                    if(rs.getString("FLTNUMDSTEXC")!= null && !("-".equals(rs.getString("FLTNUMDSTEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUM", rs.getString("FLTNUMDSTEXC"), now,"DST");
                    }
                    if(rs.getString("FLTNUMVIAINC")!= null && !("-".equals(rs.getString("FLTNUMVIAINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTNUM", rs.getString("FLTNUMVIAINC"), now,"VIA");
                    }
                    if(rs.getString("FLTNUMVIAEXC")!= null && !("-".equals(rs.getString("FLTNUMVIAEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUM", rs.getString("FLTNUMVIAEXC"), now,"VIA");
                    }
                    if(rs.getString("FLTNUMALLINC")!= null && !("-".equals(rs.getString("FLTNUMALLINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTNUM", rs.getString("FLTNUMALLINC"), now,"ALL");
                    }
                    if(rs.getString("FLTNUMALLEXC")!= null && !("-".equals(rs.getString("FLTNUMALLEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUM", rs.getString("FLTNUMALLEXC"), now,"ALL");
                    }
                    if(rs.getString("FLTNUMANYINC")!= null && !("-".equals(rs.getString("FLTNUMANYINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTNUM", rs.getString("FLTNUMANYINC"), now,"ANY");
                    }
                    if(rs.getString("FLTNUMANYEXC")!= null && !("-".equals(rs.getString("FLTNUMANYEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUM", rs.getString("FLTNUMANYEXC"), now,"ANY");
                    }
                    if(rs.getString("PRDINC")!= null && !("-".equals(rs.getString("PRDINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "PRD", rs.getString("PRDINC"), now,"");
                    }
                    if(rs.getString("PRDEXC")!= null && !("-".equals(rs.getString("PRDEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "PRD", rs.getString("PRDEXC"), now,"");
                    }
                    if(rs.getString("NATINC")!= null && !("-".equals(rs.getString("NATINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "NATURE OF GOODS", rs.getString("NATINC"), now,"");
                    }
                    if(rs.getString("NATEXC")!= null && !("-".equals(rs.getString("NATEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "NATURE OF GOODS", rs.getString("NATEXC"), now,"");
                    }
                    if (rs.getString("AWBPFXINC") != null && !("-".equals(rs.getString("AWBPFXINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "AWBPRE", rs.getString("AWBPFXINC"), now,"");
                    }
                    if (rs.getString("AWBPFXEXC") != null && !("-".equals(rs.getString("AWBPFXEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "AWBPRE", rs.getString("AWBPFXEXC"), now,"");
                    }
                    if (rs.getString("FLTOWRORGINC") != null && !("-".equals(rs.getString("FLTOWRORGINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTOWR", rs.getString("FLTOWRORGINC"), now,"ORG");
                    }
                    if (rs.getString("FLTOWRORGEXC") != null && !("-".equals(rs.getString("FLTOWRORGEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTOWR", rs.getString("FLTOWRORGEXC"), now,"ORG");
                    }
                    if (rs.getString("FLTOWRDSTINC") != null && !("-".equals(rs.getString("FLTOWRDSTINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTOWR", rs.getString("FLTOWRDSTINC"), now,"DST");
                    }
                    if (rs.getString("FLTOWRDSTEXC") != null && !("-".equals(rs.getString("FLTOWRDSTEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTOWR", rs.getString("FLTOWRDSTEXC"), now,"DST");
                    }
                    if (rs.getString("FLTOWRVIAINC") != null && !("-".equals(rs.getString("FLTOWRVIAINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTOWR", rs.getString("FLTOWRVIAINC"), now,"VIA");
                    }
                    if (rs.getString("FLTOWRVIAEXC") != null && !("-".equals(rs.getString("FLTOWRVIAEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTOWR", rs.getString("FLTOWRVIAEXC"), now,"VIA");
                    }
                    if (rs.getString("FLTOWRALLINC") != null && !("-".equals(rs.getString("FLTOWRALLINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTOWR", rs.getString("FLTOWRALLINC"), now,"ALL");
                    }
                    if (rs.getString("FLTOWRALLEXC") != null && !("-".equals(rs.getString("FLTOWRALLEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTOWR", rs.getString("FLTOWRALLEXC"), now,"ALL");
                    }
                    if (rs.getString("FLTOWRANYINC") != null && !("-".equals(rs.getString("FLTOWRANYINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTOWR", rs.getString("FLTOWRANYINC"), now,"ANY");
                    }
                    if (rs.getString("FLTOWRANYEXC") != null && !("-".equals(rs.getString("FLTOWRANYEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTOWR", rs.getString("FLTOWRANYEXC"), now,"ANY");
                    }
                    if (rs.getString("FLTTYPORGINC") != null && !("-".equals(rs.getString("FLTTYPORGINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTTYPE", rs.getString("FLTTYPORGINC"), now,"ORG");
                    }
                    if (rs.getString("FLTTYPDSTINC") != null && !("-".equals(rs.getString("FLTTYPDSTINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTTYPE", rs.getString("FLTTYPDSTINC"), now,"DST");
                    }
                    if (rs.getString("FLTTYPVIAINC") != null && !("-".equals(rs.getString("FLTTYPVIAINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTTYPE", rs.getString("FLTTYPVIAINC"), now,"VIA");
                    }
                    if (rs.getString("FLTTYPALLINC") != null && !("-".equals(rs.getString("FLTTYPALLINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTTYPE", rs.getString("FLTTYPALLINC"), now,"ALL");
                    }
                    if (rs.getString("FLTTYPANYINC") != null && !("-".equals(rs.getString("FLTTYPANYINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "FLTTYPE", rs.getString("FLTTYPANYINC"), now,"ANY");
                    }
                    if (rs.getString("SCCGRPINC") != null && !("-".equals(rs.getString("SCCGRPINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "SCCGRP", rs.getString("SCCGRPINC"), now,"");
                    }
                    if (rs.getString("SCCGRPEXC") != null && !("-".equals(rs.getString("SCCGRPEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "SCCGRP", rs.getString("SCCGRPEXC"), now,"");
                    }
                    if (rs.getString("SCCGRPEXCIF") != null && !("-".equals(rs.getString("SCCGRPEXCIF")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "SCCGRP", rs.getString("SCCGRPEXCIF"), now,"");
                    }
                    if (rs.getString("AGTGRPINC") != null && !("-".equals(rs.getString("AGTGRPINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "AGTGRP", rs.getString("AGTGRPINC"), now,"");
                    }
                    if (rs.getString("AGTGRPEXC") != null && !("-".equals(rs.getString("AGTGRPEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "AGTGRP", rs.getString("AGTGRPEXC"), now,"");
                    }
                    if (rs.getString("ARLGRPORGINC") != null && !("-".equals(rs.getString("ARLGRPORGINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ARLGRP", rs.getString("ARLGRPORGINC"), now,"ORG");
                    }
                    if (rs.getString("ARLGRPORGEXC") != null && !("-".equals(rs.getString("ARLGRPORGEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ARLGRP", rs.getString("ARLGRPORGEXC"), now,"ORG");
                    }
                    if (rs.getString("ARLGRPDSTINC") != null && !("-".equals(rs.getString("ARLGRPDSTINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ARLGRP", rs.getString("ARLGRPDSTINC"), now,"DST");
                    }
                    if (rs.getString("ARLGRPDSTEXC") != null && !("-".equals(rs.getString("ARLGRPDSTEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ARLGRP", rs.getString("ARLGRPDSTEXC"), now,"DST");
                    }
                    if (rs.getString("ARLGRPVIAINC") != null && !("-".equals(rs.getString("ARLGRPVIAINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ARLGRP", rs.getString("ARLGRPVIAINC"), now,"VIA");
                    }
                    if (rs.getString("ARLGRPVIAEXC") != null && !("-".equals(rs.getString("ARLGRPVIAEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ARLGRP", rs.getString("ARLGRPVIAEXC"), now,"VIA");
                    }
                    if (rs.getString("ARLGRPALLINC") != null && !("-".equals(rs.getString("ARLGRPALLINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ARLGRP", rs.getString("ARLGRPALLINC"), now,"ALL");
                    }
                    if (rs.getString("ARLGRPALLEXC") != null && !("-".equals(rs.getString("ARLGRPALLEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ARLGRP", rs.getString("ARLGRPALLEXC"), now,"ALL");
                    }
                    if (rs.getString("ARLGRPANYINC") != null && !("-".equals(rs.getString("ARLGRPANYINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ARLGRP", rs.getString("ARLGRPANYINC"), now,"ANY");
                    }
                    if (rs.getString("ARLGRPANYEXC") != null && !("-".equals(rs.getString("ARLGRPANYEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ARLGRP", rs.getString("ARLGRPANYEXC"), now,"ANY");
                    }
                    if (rs.getString("UNDNUMINC") != null && !("-".equals(rs.getString("UNDNUMINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "UNNUM", rs.getString("UNDNUMINC"), now,"");
                    }
                    if (rs.getString("UNDNUMEXC") != null && !("-".equals(rs.getString("UNDNUMEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "UNNUM", rs.getString("UNDNUMEXC"), now,"");
                    }
                    if (rs.getString("LENSTR") != null && !("-".equals(rs.getString("LENSTR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "LEN", rs.getString("LENSTR"), now,"");
                    } else if (rs.getString("LENEND") != null && !("-".equals(rs.getString("LENEND")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "LEN", rs.getString("LENEND"), now,"");
                    }
                    if (rs.getString("WGTSTR") != null && !("-".equals(rs.getString("WGTSTR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "WGT", rs.getString("WGTSTR"), now,"");
                    } else if (rs.getString("WGTEND") != null && !("-".equals(rs.getString("WGTEND")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "WGT", rs.getString("WGTEND"), now,"");
                    }
                    if (rs.getString("NUMSTPSTR") != null && !("-".equals(rs.getString("NUMSTPSTR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "NUMSTP", rs.getString("NUMSTPSTR"), now,"GT");
                    } else if (rs.getString("NUMSTPEND") != null && !("-".equals(rs.getString("NUMSTPEND")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "NUMSTP", rs.getString("NUMSTPEND"), now,"LT");
                    }
                    if (rs.getString("NUMSTPSTR") != null && !("-".equals(rs.getString("NUMSTPSTR")))
                            && rs.getString("NUMSTPEND") != null && !("-".equals(rs.getString("NUMSTPEND")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "NUMSTP", rs.getString("NUMSTPEND"), now,"EQ");
                    }
                    if (rs.getString("WIDSTR") != null && !("-".equals(rs.getString("WIDSTR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "WID", rs.getString("WIDSTR"), now,"");
                    } else if (rs.getString("WIDEND") != null && !("-".equals(rs.getString("WIDEND")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "WID", rs.getString("WIDEND"), now,"");
                    }
                    if (rs.getString(HGTSTR) != null && !("-".equals(rs.getString(HGTSTR)))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "HGT", rs.getString(HGTSTR), now,"");
                    } else if (rs.getString("HGTEND") != null && !("-".equals(rs.getString("HGTEND")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "HGT", rs.getString("HGTEND"), now,"");
                    }
                    if (rs.getString("ORGDAYOPR") != null && !("-".equals(rs.getString("ORGDAYOPR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAYOPR", rs.getString("ORGDAYOPR"), now,"ORG");
                    }
                    if (rs.getString("VIADAYOPR") != null && !("-".equals(rs.getString("VIADAYOPR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAYOPR", rs.getString("VIADAYOPR"), now,"VIA");
                    }
                    if (rs.getString("DSTDAYOPR") != null && !("-".equals(rs.getString("DSTDAYOPR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAYOPR", rs.getString("DSTDAYOPR"), now,"DST");
                    }
                    if (rs.getString("ALLDAYOPR") != null && !("-".equals(rs.getString("ALLDAYOPR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAYOPR", rs.getString("ALLDAYOPR"), now,"ALL");
                    }
                    if (rs.getString("ANYDAYOPR") != null && !("-".equals(rs.getString("ANYDAYOPR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAYOPR", rs.getString("ANYDAYOPR"), now,"ANY");
                    }
                    if (rs.getString("ALLDATINC") != null && !("-".equals(rs.getString("ALLDATINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAT", rs.getString("ALLDATINC"), now,"ALL");
                    }
                    if (rs.getString("ALLDATEXC") != null && !("-".equals(rs.getString("ALLDATEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "DAT", rs.getString("ALLDATEXC"), now,"ALL");
                    }
                    if (rs.getString("ANYDATINC") != null && !("-".equals(rs.getString("ANYDATINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAT", rs.getString("ANYDATINC"), now,"ANY");
                    }
                    if (rs.getString("ANYDATEXC") != null && !("-".equals(rs.getString("ANYDATEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "DAT", rs.getString("ANYDATEXC"), now,"ANY");
                    }
                    if (rs.getString("DSTDATINC") != null && !("-".equals(rs.getString("DSTDATINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAT", rs.getString("DSTDATINC"), now,"DST");
                    }
                    if (rs.getString("DSTDATEXC") != null && !("-".equals(rs.getString("DSTDATEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "DAT", rs.getString("DSTDATEXC"), now,"DST");
                    }
                    if (rs.getString("VIADATINC") != null && !("-".equals(rs.getString("VIADATINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAT", rs.getString("VIADATINC"), now,"VIA");
                    }
                    if (rs.getString("VIADATEXC") != null && !("-".equals(rs.getString("VIADATEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "DAT", rs.getString("VIADATEXC"), now,"VIA");
                    }
                    if (rs.getString("ORGDATINC") != null && !("-".equals(rs.getString("ORGDATINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "DAT", rs.getString("ORGDATINC"), now,"ORG");
                    }
                    if (rs.getString("ORGDATEXC") != null && !("-".equals(rs.getString("ORGDATEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "DAT", rs.getString("ORGDATEXC"), now,"ORG");
                    }
                    if (rs.getString("ORGSTRTIM") != null && !("-".equals(rs.getString("ORGSTRTIM")))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString("ORGSTRTIM"), now);*/
                        populateTimeParameters(rs,"I","ORGSTRTIM" ,set, now);
                    }
                    if (rs.getString("ORGENDTIM") != null && !("-".equals(rs.getString("ORGENDTIM")))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString("ORGENDTIM"), now);*/
                        populateTimeParameters(rs,"I","ORGENDTIM" ,set, now);
                    }
                    if (rs.getString("VIASTRTIM") != null && !("-".equals(rs.getString("VIASTRTIM")))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString("VIASTRTIM"), now);*/
                        populateTimeParameters(rs,"I","VIASTRTIM" ,set, now);
                    }
                    if (rs.getString("VIAENDTIM") != null && !("-".equals(rs.getString("VIAENDTIM")))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString("VIAENDTIM"), now);*/
                        populateTimeParameters(rs,"I","VIAENDTIM" ,set, now);
                    }
                    if (rs.getString(DSTSTRTIM) != null && !("-".equals(rs.getString(DSTSTRTIM)))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString(DSTSTRTIM), now);*/
                        populateTimeParameters(rs,"I",DSTSTRTIM ,set, now);
                    }
                    if (rs.getString("DSTENDTIM") != null && !("-".equals(rs.getString("DSTENDTIM")))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString("DSTENDTIM"), now);*/
                        populateTimeParameters(rs,"I","DSTENDTIM" ,set, now);
                    }
                    if (rs.getString("ALLSTRTIM") != null && !("-".equals(rs.getString("ALLSTRTIM")))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString("ALLSTRTIM"), now);*/
                        populateTimeParameters(rs,"I","ALLSTRTIM" ,set, now);
                    }
                    if (rs.getString("ALLENDTIM") != null && !("-".equals(rs.getString("ALLENDTIM")))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString("ALLENDTIM"), now);*/
                        populateTimeParameters(rs,"I","ALLENDTIM" ,set, now);
                    }
                    if (rs.getString("ANYSTRTIM") != null && !("-".equals(rs.getString("ANYSTRTIM")))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString("ANYSTRTIM"), now);*/
                        populateTimeParameters(rs,"I","ANYSTRTIM" ,set, now);
                    }
                    if (rs.getString("ANYENDTIM") != null && !("-".equals(rs.getString("ANYENDTIM")))) {
					/*populateAndAddEmbargoParameter(
							set, "I", "TIM", rs.getString("ANYENDTIM"), now);*/
                        populateTimeParameters(rs,"I","ANYENDTIM" ,set, now);
                    }
                    if(rs.getString("LCLDES") != null && rs.getString("LCLDES").trim().length() > 0) {
                        embargoDetailsVO.setEmbargoDescription(rs.getString("LCLDES"));
                    }
                    if ((rs.getString("PKGINSINC") != null) && (!"-".equals(rs.getString("PKGINSINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "UNIDPI", rs.getString("PKGINSINC"), now,"");
                    }
                    if ((rs.getString("PKGINSEXC") != null) && (!"-".equals(rs.getString("PKGINSEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "UNIDPI", rs.getString("PKGINSEXC"), now,"");
                    }

                    if ((rs.getString("FLTNUMALLGTEQ") != null) && (!"-".equals(rs.getString("FLTNUMALLGTEQ")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMIN", rs.getString("FLTNUMALLGTEQ"), now,"ALL");
                    }
                    if ((rs.getString("FLTNUMALLLTEQ") != null) && (!"-".equals(rs.getString("FLTNUMALLLTEQ")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMAX", rs.getString("FLTNUMALLLTEQ"), now,"ALL");
                    }
                    if ((rs.getString(FLTNUMANYGTEQ) != null) && (!"-".equals(rs.getString(FLTNUMANYGTEQ)))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMIN", rs.getString(FLTNUMANYGTEQ), now,"ANY");
                    }
                    if ((rs.getString("FLTNUMANYLTEQ") != null) && (!"-".equals(rs.getString("FLTNUMANYLTEQ")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMAX", rs.getString("FLTNUMANYLTEQ"), now,"ANY");
                    }
                    if ((rs.getString("FLTNUMORGGTEQ") != null) && (!"-".equals(rs.getString("FLTNUMORGGTEQ")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMIN", rs.getString("FLTNUMORGGTEQ"), now,"ORG");
                    }
                    if ((rs.getString("FLTNUMORGLTEQ") != null) && (!"-".equals(rs.getString("FLTNUMORGLTEQ")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMAX", rs.getString("FLTNUMORGLTEQ"), now,"ORG");
                    }
                    if ((rs.getString("FLTNUMDSTGTEQ") != null) && (!"-".equals(rs.getString("FLTNUMDSTGTEQ")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMIN", rs.getString("FLTNUMDSTGTEQ"), now,"DST");
                    }
                    if ((rs.getString("FLTNUMDSTLTEQ") != null) && (!"-".equals(rs.getString("FLTNUMDSTLTEQ")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMAX", rs.getString("FLTNUMDSTLTEQ"), now,"DST");
                    }
                    if ((rs.getString("FLTNUMVIAGTEQ") != null) && (!"-".equals(rs.getString("FLTNUMVIAGTEQ")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMIN", rs.getString("FLTNUMVIAGTEQ"), now,"VIA");
                    }
                    if ((rs.getString("FLTNUMVIALTEQ") != null) && (!"-".equals(rs.getString("FLTNUMVIALTEQ")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "FLTNUMMAX", rs.getString("FLTNUMVIALTEQ"), now,"VIA");
                    }
                    if (rs.getString("VOLSTR") != null && !("-".equals(rs.getString("VOLSTR")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "VOL", rs.getString("VOLSTR"), now,"");
                    } else if (rs.getString("VOLEND") != null && !("-".equals(rs.getString("VOLEND")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "VOL", rs.getString("VOLEND"), now,"");
                    }
                    if (rs.getString("ULDINC") != null && !("-".equals(rs.getString("ULDINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ULD", rs.getString("ULDINC"), now,"");
                    }
                    if (rs.getString("ULDEXC") != null && !("-".equals(rs.getString("ULDEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ULD", rs.getString("ULDEXC"), now,"");
                    }
                    if (rs.getString("ACRTYPORGINC") != null && !("-".equals(rs.getString("ACRTYPORGINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYP", rs.getString("ACRTYPORGINC"), now,"ORG");
                    }
                    if (rs.getString("ACRTYPORGEXC") != null && !("-".equals(rs.getString("ACRTYPORGEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYP", rs.getString("ACRTYPORGEXC"), now,"ORG");
                    }
                    if (rs.getString("ACRTYPDSTINC") != null && !("-".equals(rs.getString("ACRTYPDSTINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYP", rs.getString("ACRTYPDSTINC"), now,"DST");
                    }
                    if (rs.getString("ACRTYPDSTEXC") != null && !("-".equals(rs.getString("ACRTYPDSTEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYP", rs.getString("ACRTYPDSTEXC"), now,"DST");
                    }
                    if (rs.getString("ACRTYPVIAINC") != null && !("-".equals(rs.getString("ACRTYPVIAINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYP", rs.getString("ACRTYPVIAINC"), now,"VIA");
                    }
                    if (rs.getString("ACRTYPVIAEXC") != null && !("-".equals(rs.getString("ACRTYPVIAEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYP", rs.getString("ACRTYPVIAEXC"), now,"VIA");
                    }
                    if (rs.getString("ACRTYPALLINC") != null && !("-".equals(rs.getString("ACRTYPALLINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYP", rs.getString("ACRTYPALLINC"), now,"ALL");
                    }
                    if (rs.getString("ACRTYPALLEXC") != null && !("-".equals(rs.getString("ACRTYPALLEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYP", rs.getString("ACRTYPALLEXC"), now,"ALL");
                    }
                    if (rs.getString("ACRTYPANYINC") != null && !("-".equals(rs.getString("ACRTYPANYINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYP", rs.getString("ACRTYPANYINC"), now,"ANY");
                    }
                    if (rs.getString("ACRTYPANYEXC") != null && !("-".equals(rs.getString("ACRTYPANYEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYP", rs.getString("ACRTYPANYEXC"), now,"ANY");
                    }
                    if (rs.getString("ACRTYPGRPORGINC") != null && !("-".equals(rs.getString("ACRTYPGRPORGINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPORGINC"), now,"ORG");
                    }
                    if (rs.getString("ACRTYPGRPORGEXC") != null && !("-".equals(rs.getString("ACRTYPGRPORGEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPORGEXC"), now,"ORG");
                    }
                    if (rs.getString("ACRTYPGRPDSTINC") != null && !("-".equals(rs.getString("ACRTYPGRPDSTINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPDSTINC"), now,"DST");
                    }
                    if (rs.getString("ACRTYPGRPDSTEXC") != null && !("-".equals(rs.getString("ACRTYPGRPDSTEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPDSTEXC"), now,"DST");
                    }
                    if (rs.getString("ACRTYPGRPVIAINC") != null && !("-".equals(rs.getString("ACRTYPGRPVIAINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPVIAINC"), now,"VIA");
                    }
                    if (rs.getString("ACRTYPGRPVIAEXC") != null && !("-".equals(rs.getString("ACRTYPGRPVIAEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPVIAEXC"), now,"VIA");
                    }
                    if (rs.getString("ACRTYPGRPALLINC") != null && !("-".equals(rs.getString("ACRTYPGRPALLINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPALLINC"), now,"ALL");
                    }
                    if (rs.getString("ACRTYPGRPALLEXC") != null && !("-".equals(rs.getString("ACRTYPGRPALLEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPALLEXC"), now,"ALL");
                    }
                    if (rs.getString("ACRTYPGRPANYINC") != null && !("-".equals(rs.getString("ACRTYPGRPANYINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRTYPGRP", rs.getString("ACRTYPGRPANYINC"), now,"ANY");
                    }
                    if (rs.getString("ACRTYPGRPANYEXC") != null && !("-".equals(rs.getString("ACRTYPGRPANYEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRTYPGRP", rs.getString("ACRTYPGRPANYEXC"), now,"ANY");
                    }
                    if (rs.getString("ACRCLSORGINC") != null && !("-".equals(rs.getString("ACRCLSORGINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRCLS", rs.getString("ACRCLSORGINC"), now,"ORG");
                    }
                    //added by A-5799 for IASCB-23507 starts
                    if (rs.getString("ACRCLSORGEXC") != null && !("-".equals(rs.getString("ACRCLSORGEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRCLS", rs.getString("ACRCLSORGEXC"), now,"ORG");
                    }
                    if (rs.getString("ACRCLSDSTINC") != null && !("-".equals(rs.getString("ACRCLSDSTINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRCLS", rs.getString("ACRCLSDSTINC"), now,"DST");
                    }
                    if (rs.getString("ACRCLSDSTEXC") != null && !("-".equals(rs.getString("ACRCLSDSTEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRCLS", rs.getString("ACRCLSDSTEXC"), now,"DST");
                    }
                    if (rs.getString("ACRCLSVIAINC") != null && !("-".equals(rs.getString("ACRCLSVIAINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRCLS", rs.getString("ACRCLSVIAINC"), now,"VIA");
                    }
                    if (rs.getString("ACRCLSVIAEXC") != null && !("-".equals(rs.getString("ACRCLSVIAEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRCLS", rs.getString("ACRCLSVIAEXC"), now,"VIA");
                    }
                    if (rs.getString("ACRCLSALLINC") != null && !("-".equals(rs.getString("ACRCLSALLINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRCLS", rs.getString("ACRCLSALLINC"), now,"ALL");
                    }
                    if (rs.getString("ACRCLSALLEXC") != null && !("-".equals(rs.getString("ACRCLSALLEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRCLS", rs.getString("ACRCLSALLEXC"), now,"ALL");
                    }
                    if (rs.getString("ACRCLSANYINC") != null && !("-".equals(rs.getString("ACRCLSANYINC")))) {
                        populateAndAddEmbargoParameter(
                                set, "I", "ACRCLS", rs.getString("ACRCLSANYINC"), now,"ANY");
                    }
                    if (rs.getString("ACRCLSANYEXC") != null && !("-".equals(rs.getString("ACRCLSANYEXC")))) {
                        populateAndAddEmbargoParameter(
                                set, "E", "ACRCLS", rs.getString("ACRCLSANYEXC"), now,"ANY");
                    }
                    if(rs.getString("SRVCRGCLSINC")!= null && !("-".equals(rs.getString("SRVCRGCLSINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "SRVCRGCLS", rs.getString("SRVCRGCLSINC"), now,"");
                    }
                    if(rs.getString("SRVCRGCLSEXC")!= null && !("-".equals(rs.getString("SRVCRGCLSEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "SRVCRGCLS", rs.getString("SRVCRGCLSEXC"), now,"");
                    }
                    if(rs.getString("SHPINC")!= null && !("-".equals(rs.getString("SHPINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "SHP", rs.getString("SHPINC"), now,"");
                    }
                    if(rs.getString("SHPEXC")!= null && !("-".equals(rs.getString("SHPEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "SHP", rs.getString("SHPEXC"), now,"");
                    }
                    if(rs.getString("SHPGRPINC")!= null && !("-".equals(rs.getString("SHPGRPINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "SHPGRP", rs.getString("SHPGRPINC"), now,"");
                    }
                    if(rs.getString("SHPGRPEXC")!= null && !("-".equals(rs.getString("SHPGRPEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "SHPGRP", rs.getString("SHPGRPEXC"), now,"");
                    }
                    if(rs.getString("CNSINC")!= null && !("-".equals(rs.getString("CNSINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "CNS", rs.getString("CNSINC"), now,"");
                    }
                    if(rs.getString("CNSEXC")!= null && !("-".equals(rs.getString("CNSEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "CNS", rs.getString("CNSEXC"), now,"");
                    }
                    if(rs.getString("CNSGRPINC")!= null && !("-".equals(rs.getString("CNSGRPINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "CNSGRP", rs.getString("CNSGRPINC"), now,"");
                    }
                    if(rs.getString("CNSGRPEXC")!= null && !("-".equals(rs.getString("CNSGRPEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "CNSGRP", rs.getString("CNSGRPEXC"), now,"");
                    }
                    if(rs.getString("SHPTYPINC")!= null && !("-".equals(rs.getString("SHPTYPINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "SHPTYP", rs.getString("SHPTYPINC"), now,"");
                    }
                    if(rs.getString("SHPTYPEXC")!= null && !("-".equals(rs.getString("SHPTYPEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "SHPTYP", rs.getString("SHPTYPEXC"), now,"");
                    }
                    if(rs.getString("CNSLINC")!= null && !("-".equals(rs.getString("CNSLINC")))){
                        populateAndAddEmbargoParameter(
                                set, "I", "CNSL", rs.getString("CNSLINC"), now,"");
                    }
                    if(rs.getString("CNSLEXC")!= null && !("-".equals(rs.getString("CNSLEXC")))){
                        populateAndAddEmbargoParameter(
                                set, "E", "CNSL", rs.getString("CNSLEXC"), now,"");
                    }
                    if(rs.getString(SRVCTYPFRTECSTPINC)!= null && !("-".equals(rs.getString(SRVCTYPFRTECSTPINC)))){
                        populateAndAddEmbargoParameter(
                                set, "I", SRVCTYPFRTECSTP, rs.getString(SRVCTYPFRTECSTPINC), now,"");
                    }
                    if(rs.getString(SRVCTYPFRTECSTPEXC)!= null && !("-".equals(rs.getString(SRVCTYPFRTECSTPEXC)))){
                        populateAndAddEmbargoParameter(
                                set, "E", SRVCTYPFRTECSTP, rs.getString(SRVCTYPFRTECSTPEXC), now,"");
                    }
                    //added by A-5799 for IASCB-23507 ends
                    //added by 202766 for IASCB-159851
                    if (rs.getString(FLTTYPORGEXC) != null && !("-".equals(rs.getString(FLTTYPORGEXC)))) {
                        populateAndAddEmbargoParameter(
                                set, "E", FLTTYPE, rs.getString(FLTTYPORGEXC), now,"ORG");
                    }
                    if (rs.getString(FLTTYPDSTEXC) != null && !("-".equals(rs.getString(FLTTYPDSTEXC)))) {
                        populateAndAddEmbargoParameter(
                                set, "E", FLTTYPE, rs.getString(FLTTYPDSTEXC), now,"DST");
                    }
                    if (rs.getString(FLTTYPVIAEXC) != null && !("-".equals(rs.getString(FLTTYPVIAEXC)))) {
                        populateAndAddEmbargoParameter(
                                set, "E", FLTTYPE, rs.getString(FLTTYPVIAEXC), now,"VIA");
                    }
                    if (rs.getString(FLTTYPALLEXC) != null && !("-".equals(rs.getString(FLTTYPALLEXC)))) {
                        populateAndAddEmbargoParameter(
                                set, "E", FLTTYPE, rs.getString(FLTTYPALLEXC), now,"ALL");
                    }
                    if (rs.getString(FLTTYPANYEXC) != null && !("-".equals(rs.getString(FLTTYPANYEXC)))) {
                        populateAndAddEmbargoParameter(
                                set, "E", FLTTYPE, rs.getString(FLTTYPANYEXC), now,"ANY");
                    }
                    if (rs.getString(PARAMETER_CODE_UNKSHP) != null && !("-".equals(rs.getString(PARAMETER_CODE_UNKSHP)))) {
                        populateAndAddEmbargoParameter(
                                set, "EQ", PARAMETER_CODE_UNKSHP, rs.getString(PARAMETER_CODE_UNKSHP), now,"");
                    }
                    //ends
                    //set.add(embargoParameterVO);
                    //}
                    if (embargoDetailsVO != null) {
                        embargoDetailsVO.setParams(set);
                        list.add(embargoDetailsVO);
                        uniqueEmbargos.put(rs.getString(REFNUM),embargoDetailsVO);
                        //set = new HashSet<EmbargoParameterVO>();
                    }
                }//prev = now;
                else{
                    continue;
                }
            }
            if (embargoDetailsVO != null && !uniqueEmbargos.containsKey(embargoDetailsVO.getEmbargoReferenceNumber())) {
                embargoDetailsVO.setParams(set);
                list.add(embargoDetailsVO);
            }
            if (list.size() > 0) {
                return list;
            } else {
                return null;
            }
        }
        private void populateAndAddEmbargoParameter(Set<EmbargoParameterVO> set,String aplFlg,
                                                    String parameterCode,String parameterValue,String referenceNumber,String applicableLevel) {
            EmbargoParameterVO embargoParameterVO = new EmbargoParameterVO();
            embargoParameterVO.setAplFlg(aplFlg);
            embargoParameterVO.setParameterCode(parameterCode);
            if(PARAMETER_CODE_WEIGHT.equals(parameterCode) || PARAMETER_CODE_LENGTH.equals(parameterCode) || PARAMETER_CODE_WIDTH.equals(parameterCode) || PARAMETER_CODE_HEIGHT.equals(parameterCode)){
                Double doubleValue= new Double(parameterValue);
                doubleValue=Math.round(doubleValue * 100.0) / 100.0;
                embargoParameterVO.setParameterValues(String.format( "%.2f", doubleValue));
            }
            else if(PARAMETER_CODE_TIME.equals(parameterCode)){

                embargoParameterVO.setParameterValues(parameterValue.substring(0, 5));

            }
            else {
                embargoParameterVO.setParameterValues(parameterValue);
            }
            if("NUMSTP".equals(parameterCode)){
                embargoParameterVO.setApplicable(applicableLevel);
            }else{
                embargoParameterVO.setApplicableLevel(applicableLevel);
            }
            embargoParameterVO.setEmbargoReferenceNumber(referenceNumber);
            set.add(embargoParameterVO);
        }
    }

    /**
     * 	Method		:	EmbargoRulesSqlDAO.constructFilterQueryForODPairEnhanced
     *	Added by 	:	A-8146 on 27-Apr-2019
     * 	Used for 	:
     *	Parameters	:	@param shipmentVO
     *	Parameters	:	@param mainQuery
     *	Parameters	:	@param parcount
     *	Return type	: 	void
     */
    private void constructFilterQueryForODPairEnhancedPostgres(ShipmentDetailsVO shipmentVO,
                                                               Query query, int parcount) {

        if (shipmentVO.getDstStation() == null || shipmentVO.getDstStation().trim().length() <=0 ) {
            query.append("  AND ( DSTARPCODINC IS NULL) ");
        }
        if ((shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0)
                || (shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 )
                || (shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 )
                || (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 )
                || (shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 )
                || (shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 )) {
            parcount = constructDestinationFilterQueryPostgres(shipmentVO, query, parcount);
        } else {
            query.append(AND_DSTARPCODINC_IS_NULL_OR_DSTARPGRPINC_IS_NULL_OR_DSTARPGRPIN);
        }

        if (shipmentVO.getOrgStation() == null || shipmentVO.getOrgStation().trim().length() <=0 ) {
            query.append(AND_ORGARPCODINC_IS_NULL);
        }
        if ((shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 )
                || (shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 )
                || (shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 )
                || (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 )
                || (shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 )
                || (shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 )) {
            parcount = constructOriginFilterQueryPostgres(shipmentVO, query, parcount);
        } else {
            query.append(AND_ORGARPCODINC_IS_NULL_OR_ORGCNTGRPINC + " ");
        }
        if ((shipmentVO.getViaPointStation() != null && !shipmentVO.getViaPointStation().isEmpty() )
                || (shipmentVO.getViaPntArpGrp() != null && !shipmentVO.getViaPntArpGrp().isEmpty())
                || (shipmentVO.getViaPointCountry() != null && !shipmentVO.getViaPointCountry().isEmpty() )
                || (shipmentVO.getViaPntCntGrp() != null && !shipmentVO.getViaPntCntGrp().isEmpty() )) {
            constructViaPointFilterQuery(shipmentVO, query, parcount);
        } else {
            query.append("VIAARPCODINC_IS_NULL_OR_VIAARPCODINC_AND_VIACNTCODINC_IS_NULL_OR_VIACNTCODINC_AND_VIAARPGRPINC_IS_NULL_OR_VIAARPGRPINC_AND_VIACNTGRPINC_IS_NULL_OR_VIACNTGRPINC");
        }
        //main select ends here

    }

    public void constructViaPointFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //via include
        query.append("  AND((");
        if (shipmentVO.getViaPointStation() != null && !shipmentVO.getViaPointStation().isEmpty()) {
            query.append(" (pkg_frmwrk.fun_check_string_common(?,REC.VIAARPCODINC,',') >0  OR REC.VIAARPCODINC ='-') ");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
        }
        if (shipmentVO.getViaPntArpGrp() != null && !shipmentVO.getViaPntArpGrp().isEmpty() ) {
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.VIAARPGRPINC,',')  >0 OR REC.VIAARPGRPINC   ='-') ");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
        }
        if (shipmentVO.getViaPointCountry() != null && !shipmentVO.getViaPointCountry().isEmpty() ) {
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.VIACNTCODINC,',')  >0 OR REC.VIACNTCODINC   ='-') ");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
        }
        if (shipmentVO.getViaPntCntGrp() != null && !shipmentVO.getViaPntCntGrp().isEmpty()) {
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.VIACNTGRPINC,',')  >0 OR REC.VIACNTGRPINC   ='-') ");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
        }
        query.append(" ) ");
        //via exclude
        if(shipmentVO.getViaPointStation() != null && !TILDE.equals(shipmentVO.getViaPointStation().iterator().next())){
            query.append(" AND NOT ( ");

            if (shipmentVO.getViaPointStation() != null && !shipmentVO.getViaPointStation().isEmpty() ) {
                query.append( "pkg_frmwrk.fun_check_string_common( CASE ? WHEN '~'  THEN REC.VIAARPCODEXC   ELSE ? END, REC.VIAARPCODEXC,',') > 0");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
            }
            if (shipmentVO.getViaPntArpGrp() != null && !shipmentVO.getViaPntArpGrp().isEmpty() ) {
                query.append( "OR pkg_frmwrk.fun_check_string_common( CASE ? WHEN '~'  THEN REC.VIAARPGRPEXC   ELSE ? END, REC.VIAARPGRPEXC,',') > 0");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
            }
            if (shipmentVO.getViaPointCountry() != null && !shipmentVO.getViaPointCountry().isEmpty() ) {
                query.append( "OR pkg_frmwrk.fun_check_string_common( CASE ? WHEN '~'  THEN REC.VIACNTCODEXC   ELSE ? END, REC.VIACNTCODEXC,',') > 0");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
            }
            if (shipmentVO.getViaPntCntGrp() != null && !shipmentVO.getViaPntCntGrp().isEmpty() ) {
                query.append( "OR pkg_frmwrk.fun_check_string_common( CASE ? WHEN '~'  THEN REC.VIACNTGRPEXC   ELSE ? END, REC.VIACNTGRPEXC,',') > 0");
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
                query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
            }
            query.append(" ) ");
        } else {
            query.append(" AND (REC.VIAARPCODEXC IS NULL AND  REC.VIAARPGRPEXC IS NULL AND REC.VIACNTCODEXC IS NULL)");
        }
        query.append(" ) ");
    }

    public int constructOriginFilterQueryPostgres(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //orgINcINclude

        query.append(AND1);
        if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
            query.append(" ( coalesce(strpos(REC.ORGARPCODINC,?),0) >0  OR REC.ORGARPCODINC ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgStation());
        }
        if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.ORGARPGRPINC,',')  >0 OR REC.ORGARPGRPINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgArpGrp());
        }
        if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
            query.append("OR ( coalesce(strpos(REC.ORGCNTCODINC,?),0)  >0 OR REC.ORGCNTCODINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgCountry());
        }
        if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.ORGCNTGRPINC,',')  >0 OR REC.ORGCNTGRPINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgCntGrp());
        }
        if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
            query.append(" OR ( coalesce(strpos(REC.ORGOFCEXGINC,?),0)  >0 OR REC.ORGOFCEXGINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOoe());
        }
        if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
            query.append( " OR ( coalesce(strpos(REC.ORGGPAINC,?),0)  >0 OR REC.ORGGPAINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgPaCod());
        }
        //org exclude
        query.append(AND_NOT);
        if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
            query.append(" coalesce(strpos(REC.ORGARPCODEXC,?),0)>0  ");
            query.setParameter(++parcount, shipmentVO.getOrgStation());
        }

        if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
            query.append(
                    FUN_CHECK_STRING_COMMON_REC_ORGARPGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getOrgArpGrp());
        }
        if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
            query.append("OR coalesce(strpos(REC.ORGCNTCODEXC,?),0)        >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgCountry());
        }
        if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
            query.append(PKG_FRMWRK_FUN_STRING_CHECK_REC_ORGCNTGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getOrgCntGrp());
        }
        if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
            query.append(" OR coalesce(strpos(REC.ORGOFCEXGEXC,?),0)    >0 ");
            query.setParameter(++parcount, shipmentVO.getOoe());
        }
        if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
            query.append( " OR coalesce(strpos(REC.ORGGPAEXC,?),0)        >0  ");
            query.setParameter(++parcount, shipmentVO.getOrgPaCod());
        }
        query.append(" ) ");
        query.append(" ) ");
        return parcount;
    }

    public int constructDestinationFilterQueryPostgres(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //dst include
        query.append(AND1);
        if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
            query.append(" ( coalesce(strpos(REC.DSTARPCODINC,?),0) >0  OR REC.DSTARPCODINC ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstStation());
        }
        if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.DSTARPGRPINC,',')  >0 OR REC.DSTARPGRPINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstArpGrp());
        }
        if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
            query.append(" OR ( coalesce(strpos(REC.DSTCNTCODINC,?),0) >0 OR REC.DSTCNTCODINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstCountry());
        }
        if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.DSTCNTGRPINC,',')  >0 OR REC.DSTCNTGRPINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstCntGrp());
        }
        if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
            query.append(" OR ( coalesce(strpos(REC.DSTOFCEXGINC,?),0)  >0 OR REC.DSTOFCEXGINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDoe());
        }
        if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
            query.append( " OR ( coalesce(strpos(REC.DSTGPAINC,?),0)  >0 OR REC.DSTGPAINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstPaCod());
        }
        //dstexclude
        query.append(AND_NOT);
        if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
            query.append(" coalesce( strpos(REC.DSTARPCODEXC,?),0)>0 ");
            query.setParameter(++parcount, shipmentVO.getDstStation());
        }

        if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
            query.append(OR_PKG_FRMWRK_FUN_CHECK_STRING_COMMON_REC_DSTARPGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getDstArpGrp());
        }
        if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
            query.append("OR coalesce(strpos(REC.DSTCNTCODEXC,?) ,0)       >0  ");
            query.setParameter(++parcount, shipmentVO.getDstCountry());
        }
        if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
            query.append(OR_PKG_FRMWRK_FUN_CHECK_STRING_COMMON_REC_DSTCNTGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getDstCntGrp());
        }
        if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
            query.append(" OR coalesce(strpos(REC.DSTOFCEXGEXC,?),0)    >0 ");
            query.setParameter(++parcount, shipmentVO.getDoe());
        }
        if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
            query.append( "  OR coalesce(strpos(REC.DSTGPAEXC,?),0)        >0 ");
            query.setParameter(++parcount, shipmentVO.getDstPaCod());
        }
        query.append(" ) ");
        query.append(" ) ");
        return parcount;
    }

    /**
     *
     * 	Method		:	EmbargoRulesSqlDAO.constructFilterQueryForSelectFlight
     *	Added by 	:	A-8146 on 01-Aug-2018
     * 	Used for 	:
     *	Parameters	:	@param shipmentVO
     *	Parameters	:	@param query
     *	Parameters	:	@param parcount
     *	Return type	: 	void
     */
    private void constructFilterQueryForSelectFlight(ShipmentDetailsVO shipmentVO, Query query,
                                                     int parcount, String refNums) {

        log.entering("EmbargoRulesSqlDAO", " constructFilterQueryForSelectFlight");

        String sysDate = "";
        if(isOracleDataSource()){
            sysDate= " sysdate ";
        }
        else{
            sysDate = " sysdate() ";
        }
        String inStrShrStaQuery=",'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')";
        String inStrShrStdQuery=",'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')";
        String instrShrStaQuery2=",'dd-MON-yyyy ')|| TO_CHAR(SHR.STA,'HH24:MI:SS'),'dd-MON-yyyy HH24:MI:SS')";
        String instrShrStdQuery2=",'dd-MON-yyyy ')|| TO_CHAR(SHR.STD,'HH24:MI:SS'),'dd-MON-yyyy HH24:MI:SS')";
        //Added by A-8368 as part of sonar issue - IASCB-104546 starts
        String instrTodateSegendTimStaQuery=TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2;
        String instrTodateSegendTimStdQuery=TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2;
        //Added by A-8368 as part of sonar issue - IASCB-104546 ends

        query.append("	WHERE REC.CMPCOD=? AND INSTR(?,REC.REFNUM)>0");
        query.setParameter(++parcount, shipmentVO.getCompanyCode());
        query.setParameter(++parcount, refNums);
        query.append(" )REC ,CAPBKGFLTSRH SHR WHERE ");
        boolean isShipDatePresent = false;
        int dateCount = 0;
        if (shipmentVO.getShipmentDate() != null) {
            query.append("  ((TO_TIMESTAMP(?,'yyyy-mm-dd') BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
            query.setParameter(++parcount, shipmentVO.getShipmentDate().toStringFormat(DATE_FORMAT).substring(0,10));
            isShipDatePresent = true;
        }
        if (shipmentVO.getBookingFlightDetailVOs() != null && shipmentVO.getBookingFlightDetailVOs().size() > 0) {
            if(isShipDatePresent){
                query.append(" OR SHR.STD BETWEEN trunc(STRDAT) AND trunc(ENDDAT) ");
            }else{
                query.append(" SHR.STD BETWEEN trunc(STRDAT) AND trunc(ENDDAT) ");
            }
        }
        if (isShipDatePresent || dateCount > 0) {
            query.append(") ");
        }
        if (shipmentVO.getMap() != null) {
            int count = 0;
            for (String parameterCode : shipmentVO.getMap().keySet()) {
                //for (String parameterValue : shipmentVO.getMap().get(parameterCode)) {
                if (ShipmentDetailsVO.MAIL_CLASS.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode))
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (MALCLSINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,MALCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCLSEXC,',')) ");
                            query.append(" OR (MALCLSINC IS NULL AND MALCLSEXC IS NULL) ");
                            query.append(
                                    " OR (MALCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCLSEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                } else if (ShipmentDetailsVO.MAIL_CATEGORY.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (MALCATINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,MALCATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCATEXC,',')) ");
                            query.append(" OR (MALCATINC IS NULL AND MALCATEXC IS NULL) ");
                            query.append(
                                    " OR (MALCATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,MALCATEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.MAIL_SUB_CLS.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        query.append(
                                " AND (( pkg_frmwrk.Fun_String_Check(?,SUBCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSEXC,','))");
                        query.append(" OR (SUBCLSINC IS NULL AND SUBCLSEXC IS NULL) ");
                        query.append(
                                " OR (SUBCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSEXC,',')) )");
                        query.setParameter(++parcount, parameterValue);
                        query.setParameter(++parcount, parameterValue);

                        query.setParameter(++parcount, parameterValue);
                        query.setParameter(++parcount, parameterValue);
                        query.setParameter(++parcount, parameterValue);
                    }
                } else if (ShipmentDetailsVO.MAIL_SUB_CLS_GRP.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SUBCLSGRPINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,SUBCLSGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSGRPEXC,',')) ");
                            query.append(" OR (SUBCLSGRPINC IS NULL AND SUBCLSGRPEXC IS NULL) ");
                            query.append(
                                    " OR (SUBCLSGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SUBCLSGRPEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.SHARED_CARRIER.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ARLCODINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,ARLCODINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',')  >0) ");
                            query.append(" OR (ARLCODINC IS NULL AND ARLCODEXC IS NULL) ");
                            query.append(
                                    " OR (ARLCODINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,ARLCODEXC,',')  >0) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.CARRIER_ORG.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CARRORGINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,CARRORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRORGEXC,',')) ");
                            query.append(" OR (CARRORGINC IS NULL AND CARRORGEXC IS NULL) ");
                            query.append(
                                    " OR (CARRORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.CARRIER_DST.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CARRDSTINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,CARRDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) ");
                            query.append(" OR (CARRDSTINC IS NULL AND CARRDSTEXC IS NULL) ");
                            query.append(
                                    " OR (CARRDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.CARRIER_VIA.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CARRVIAINC IS NULL) ");
                        } else if (parameterValue != null) {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,CARRVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) ");
                            query.append(" OR (CARRVIAINC IS NULL AND CARRVIAEXC IS NULL) ");
                            query.append(
                                    " OR (CARRVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CARRVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.CARRIER_ALL.equals(parameterCode)) {
                    // Handle in main join with SRH table
                } else if (ShipmentDetailsVO.SHARED_COMMODITY.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (COMINC IS NULL OR COMINC = '-' ) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,COMINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,COMEXC,',')) ");
                            query.append(" OR (COMINC IS NULL AND COMEXC IS NULL) ");
                            query.append(
                                    " OR (COMINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,COMEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.PKGINS.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (PKGINSINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,PKGINSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PKGINSEXC,',')) ");
                            query.append(" OR (PKGINSINC IS NULL AND PKGINSEXC IS NULL) ");
                            query.append(
                                    " OR (PKGINSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PKGINSEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }
                // ---------------------------------
                else if (ShipmentDetailsVO.SHARED_SCC.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SCCCODINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,SCCCODINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCCODEXC,',')) ");
                            query.append(" OR (SCCCODINC IS NULL AND SCCCODEXC IS NULL ) ");
                            query.append(
                                    " OR (SCCCODINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCCODEXC,',')) ");

                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            // exclude If for SCC code written as seperate block
                            // as for SCC: exclude if and include can be given
                            // as combination
                            query.append(" AND (NOT(pkg_frmwrk.Fun_String_Check(?,SCCCODEXCIF,',') >0) ");
                            query.append(" OR (SCCCODEXCIF IS NULL ) ");
                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }  else if(ShipmentDetailsVO.AGENT.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (AGTCODINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,AGTCODINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AGTCODEXC,',')) ");
                            query.append(" OR (AGTCODINC IS NULL AND AGTCODEXC IS NULL ) ");
                            query.append(" OR (AGTCODINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AGTCODEXC,',')) ");

                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }  else if(ShipmentDetailsVO.SHIPPER.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SHPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SHPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPEXC,',')) ");
                            query.append(" OR (SHPINC IS NULL AND SHPEXC IS NULL ) ");
                            query.append(" OR (SHPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPEXC,',')) ");

                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }

                }  else if(ShipmentDetailsVO.CONSIGNEE.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CNSINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CNSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSEXC,',')) ");
                            query.append(" OR (CNSINC IS NULL AND CNSEXC IS NULL ) ");
                            query.append(" OR (CNSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSEXC,',')) ");

                            query.append(" )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }
                else if (ShipmentDetailsVO.SHARED_PAYTYP.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (PAYTYPINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,PAYTYPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PAYTYPEXC,',')) ");
                            query.append(" OR (PAYTYPINC IS NULL AND PAYTYPEXC IS NULL) ");
                            query.append(
                                    " OR (PAYTYPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PAYTYPEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.AIRCRAFT_CLASS_ORIGIN.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRCLSORGINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRCLSORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSORGEXC,',')) ");
                            query.append(" OR (ACRCLSORGINC IS NULL AND ACRCLSORGEXC IS NULL) ");
                            query.append(" OR (ACRCLSORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_DESTINATION.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRCLSDSTINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRCLSDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSDSTEXC,',')) ");
                            query.append(" OR (ACRCLSDSTINC IS NULL AND ACRCLSDSTEXC IS NULL) ");
                            query.append(" OR (ACRCLSDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_VIA_POINT.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ACRCLSVIAINC IS NULL) ");
                        } else if(parameterValue!=null){
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRCLSVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSVIAEXC,',')) ");
                            query.append(" OR (ACRCLSVIAINC IS NULL AND ACRCLSVIAEXC IS NULL) ");
                            query.append(" OR (ACRCLSVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.SERVICE_TYPE_FOR_TECHNICAL_STOP.equals(parameterCode)){
                    parcount = constructQueryForTechnicalStop(shipmentVO,parameterCode,query,parcount);

                } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_ALL.equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (ACRCLSALLINC IS NULL AND ACRCLSALLEXC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ACRCLSALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSALLEXC,',')) ");
                            query.append(" OR (ACRCLSALLINC IS NULL AND ACRCLSALLEXC IS NULL) ");
                            query.append(" OR (ACRCLSALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                    }
                    count =0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (ACRCLSANYINC IS NULL AND ACRCLSANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(" ((pkg_frmwrk.Fun_String_Check(?,ACRCLSANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSANYEXC,',')) ");
                            query.append(" OR (ACRCLSANYINC IS NULL AND ACRCLSANYEXC IS NULL) ");
                            query.append(" OR (ACRCLSANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ACRCLSANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");

                } else if (ShipmentDetailsVO.SHARED_FLTNUM.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTNUMINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',')  >0) ");
                            query.append(" OR (FLTNUMINC IS NULL AND FLTNUMEXC IS NULL) ");
                            query.append(
                                    " OR (FLTNUMINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,FLTNUMEXC,',')  >0) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTNUM_ORG.equals(parameterCode)) {
                    // Handled in main join

                } else if (ShipmentDetailsVO.FLTNUM_DST.equals(parameterCode)) {
                    // Handled in main join
                } else if (ShipmentDetailsVO.FLTNUM_VIA.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTNUMVIAINC IS NULL) ");
                        } else {

                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,',')) ");
                            query.append(
                                    " OR (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL AND FLTNUMVIAGTEQ IS NULL AND FLTNUMVIALTEQ IS NULL ) ");
                            query.append(
                                    " OR (FLTNUMVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTNUMVIAEXC,',')))");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTNUM_ALL.equals(parameterCode)) {
                    // Handled in the main join
                } else if (ShipmentDetailsVO.PRODUCT.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (PRDINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,PRDINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PRDEXC,',')) ");
                            query.append(" OR (PRDINC IS NULL AND PRDEXC IS NULL) ");
                            query.append(
                                    " OR (PRDINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,PRDEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                    //Added by A-8445 for ICRD-331530 Starts
                }else if(ShipmentDetailsVO.DV_CARRIAGE.equals(parameterCode)){
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (DVCRGSTR IS NULL AND DVCRGEND IS NULL) ");
                        } else {
                            int dvCounter = 0;
                            query.append(" AND (");
                            for (String dvForCarriage : parameterValue.split(",")) {
                                if (dvCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((DVCRGSTR =? AND DVCRGEND =?)");
                                query.append(" \tOR (TO_NUMBER(DVCRGEND)>=TO_NUMBER(?)  AND DVCRGSTR is  NULL)");
                                query.append(" \tOR (TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?)  AND DVCRGEND is  NULL)");
                                query.append(" OR (DVCRGSTR IS NULL AND DVCRGEND IS NULL) ");
                                query.append(" \tOR (TO_NUMBER(DVCRGEND)>=TO_NUMBER(?)  AND TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?) ))))");
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                parcount++; query.setParameter(parcount, dvForCarriage);
                                dvCounter++;
                            }
                            query.append(" ) ");
                        }
                    }
                    //Added by A-8445 for ICRD-331530 Ends
                } else if (ShipmentDetailsVO.GOODS.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (NATINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATEXC),',')) ");
                            query.append(" OR (NATINC IS NULL AND NATEXC IS NULL) ");
                            query.append(
                                    " OR (NATINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATEXC),',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.AWB_PREFIX.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (AWBPFXINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,AWBPFXINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AWBPFXEXC,',')) ");
                            query.append(" OR (AWBPFXINC IS NULL AND AWBPFXEXC IS NULL) ");
                            query.append(
                                    " OR (AWBPFXINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AWBPFXEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTOWR.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTOWRINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,FLTOWREXC,',')  >0) ");
                            query.append(" OR (FLTOWRINC IS NULL AND FLTOWREXC IS NULL) ");
                            query.append(
                                    " OR (FLTOWRINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,FLTOWREXC,',')  >0) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTTYPE.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTTYP IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYP,',')  >0 ) ");
                            query.append(" OR (FLTTYP IS NULL)) ");
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTTYPE_ORG.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTTYPORGINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPORGEXC,',')) ");
                            query.append(" OR (FLTTYPORGINC IS NULL AND FLTTYPORGEXC IS NULL) ");
                            query.append(
                                    " OR (FLTTYPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTTYPE_DST.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTTYPDSTINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPDSTEXC,',')) ");
                            query.append(" OR (FLTTYPDSTINC IS NULL AND FLTTYPDSTEXC IS NULL) ");
                            query.append(
                                    " OR (FLTTYPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTTYPE_VIA.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTTYPVIAINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,FLTTYPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPVIAEXC,',')) ");
                            query.append(" OR (FLTTYPVIAINC IS NULL AND FLTTYPVIAEXC IS NULL) ");
                            query.append(
                                    " OR (FLTTYPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTTYPE_ALL.equals(parameterCode)) {
                    count = 0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(
                                    " ((pkg_frmwrk.Fun_String_Check(?,FLTTYPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPALLEXC,',')) ");
                            query.append(" OR (FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL) ");
                            query.append(
                                    " OR (FLTTYPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);

                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");

                    count = 0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(
                                    " ((pkg_frmwrk.Fun_String_Check(?,FLTTYPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPANYEXC,',')) ");
                            query.append(" OR (FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL) ");
                            query.append(
                                    " OR (FLTTYPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);

                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");
                } else if (ShipmentDetailsVO.SCC_GROUP.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SCCGRPINC IS NULL OR SCCGRPINC='-' ) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,SCCGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCGRPEXC,',')) ");
                            query.append(" OR (SCCGRPINC IS NULL AND SCCGRPEXC IS NULL AND SCCGRPEXCIF IS NULL) ");
                            query.append(
                                    " OR (SCCGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SCCGRPEXC,',')) ");
                            query.append(
                                    " OR (SCCGRPINC IS NULL AND NOT pkg_frmwrk.Fun_String_Check(?,SCCGRPEXCIF,',') >0) ) ");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.AGENTGRP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (AGTGRPINC IS NULL   OR AGTGRPINC='-') ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,AGTGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AGTGRPEXC,',')) ");
                            query.append(" OR (AGTGRPINC IS NULL AND AGTGRPEXC IS NULL ) ");
                            query.append(" OR (AGTGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,AGTGRPEXC,',')) )");

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.SHIPPER_GROUP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SHPGRPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SHPGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPGRPEXC,',')) ");
                            query.append(" OR (SHPGRPINC IS NULL AND SHPGRPEXC IS NULL ) ");
                            query.append(" OR (SHPGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPGRPEXC,',')) )");

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.CONSIGNEE_GROUP.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (CNSGRPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,CNSGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSGRPEXC,',')) ");
                            query.append(" OR (CNSGRPINC IS NULL AND CNSGRPEXC IS NULL ) ");
                            query.append(" OR (CNSGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,CNSGRPEXC,',')) )");

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTOWR_ORG.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTOWRORGINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRORGEXC,',')) ");
                            query.append(" OR (FLTOWRORGINC IS NULL AND FLTOWRORGEXC IS NULL) ");
                            query.append(
                                    " OR (FLTOWRORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTOWR_DST.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTOWRDSTINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRDSTEXC,',')) ");
                            query.append(" OR (FLTOWRDSTINC IS NULL AND FLTOWRDSTEXC IS NULL) ");
                            query.append(
                                    " OR (FLTOWRDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTOWR_VIA.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (FLTOWRVIAINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,FLTOWRVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRVIAEXC,',')) ");
                            query.append(" OR (FLTOWRVIAINC IS NULL AND FLTOWRVIAEXC IS NULL) ");
                            query.append(
                                    " OR (FLTOWRVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTOWRVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.FLTOWR_ALL.equals(parameterCode)) {
                    // Handled in main query join
                } else if (ShipmentDetailsVO.AIRLINE_GRP.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ARLGRPINC IS NULL OR ARLGRPINC='-' ) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPINC,',')  >0 AND NOT pkg_frmwrk.Fun_String_Check(?,ARLGRPEXC,',')  >0) ");
                            query.append(" OR (ARLGRPINC IS NULL AND ARLGRPEXC IS NULL) ");
                            query.append(
                                    " OR (ARLGRPINC='-' AND NOT pkg_frmwrk.Fun_String_Check(?,ARLGRPEXC,',')  >0) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.AIRLINE_GRP_ORG.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ARLGRPORGINC IS NULL OR ARLGRPORGINC='-' ) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPORGEXC,',')) ");
                            query.append(" OR (ARLGRPORGINC IS NULL AND ARLGRPORGEXC IS NULL) ");
                            query.append(
                                    " OR (ARLGRPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPORGEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.AIRLINE_GRP_DST.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ARLGRPDSTINC IS NULL or ARLGRPDSTINC='-' ) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPDSTEXC,',')) ");
                            query.append(" OR (ARLGRPDSTINC IS NULL AND ARLGRPDSTEXC IS NULL) ");
                            query.append(
                                    " OR (ARLGRPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPDSTEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.AIRLINE_GRP_VIA.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ARLGRPVIAINC IS NULL OR ARLGRPVIAINC='-' ) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPVIAEXC,',')) ");
                            query.append(" OR (ARLGRPVIAINC IS NULL AND ARLGRPVIAEXC IS NULL) ");
                            query.append(
                                    " OR (ARLGRPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPVIAEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.AIRLINE_GRP_ALL.equals(parameterCode)) {
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" AND (ARLGRPALLINC IS NULL AND ARLGRPALLEXC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,ARLGRPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPALLEXC,',')) ");
                            query.append(" OR (ARLGRPALLINC IS NULL AND ARLGRPALLEXC IS NULL) ");
                            query.append(
                                    " OR (ARLGRPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPALLEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);

                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                    }
                    count = 0;
                    query.append(" AND( ");
                    for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
                        if (TILDE.equals(paramValue)) {
                            query.append(" (ARLGRPANYINC IS NULL AND ARLGRPANYEXC IS NULL) ");
                        } else {
                            if (count != 0) {
                                query.append(" OR ");
                            }
                            query.append(
                                    " ((pkg_frmwrk.Fun_String_Check(?,ARLGRPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPANYEXC,',')) ");
                            query.append(" OR (ARLGRPANYINC IS NULL AND ARLGRPANYEXC IS NULL) ");
                            query.append(
                                    " OR (ARLGRPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPANYEXC,',')) )");
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);

                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                            query.setParameter(++parcount, paramValue);
                        }
                        ++count;
                    }
                    query.append(" ) ");
                } else if (ShipmentDetailsVO.UN_NUMBER.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (UNDNUMINC IS NULL) ");
                        } else {
                            query.append(
                                    " AND ((pkg_frmwrk.Fun_String_Check(?,UNDNUMINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNDNUMEXC,',')) ");
                            query.append(" OR (UNDNUMINC IS NULL AND UNDNUMEXC IS NULL) ");
                            query.append(
                                    " OR (UNDNUMINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNDNUMEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);

                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if (ShipmentDetailsVO.HEIGHT.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (HGTSTR IS NULL AND HGTEND IS NULL) ");
                        } else {
                            int heightCounter = 0;
                            query.append(" AND (");
                            for (String height : parameterValue.split(",")) {
                                if (heightCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((HGTSTR =? AND HGTEND =?)");
                                query.append(" 	OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND HGTSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(HGTSTR)<=TO_NUMBER(?)  AND HGTEND is  NULL)");
                                query.append(" OR (HGTSTR IS NULL AND HGTEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(HGTSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount, height);
                                query.setParameter(++parcount, height);
                                query.setParameter(++parcount, height);
                                query.setParameter(++parcount, height);
                                query.setParameter(++parcount, height);
                                query.setParameter(++parcount, height);

                                ++heightCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if(ShipmentDetailsVO.SERVICE_CARGO_CLASS.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SRVCRGCLSINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SRVCRGCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SRVCRGCLSEXC,',')) ");
                            query.append(" OR (SRVCRGCLSINC IS NULL AND SRVCRGCLSEXC IS NULL) ");
                            query.append(" OR (SRVCRGCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SRVCRGCLSEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if(ShipmentDetailsVO.SHIPMENT_TYPE.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (SHPTYPINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,SHPTYPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPTYPEXC,',')) ");
                            query.append(" OR (SHPTYPINC IS NULL AND SHPTYPEXC IS NULL) ");
                            query.append(" OR (SHPTYPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,SHPTYPEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);


                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                } else if(ShipmentDetailsVO.UNIDs.equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (UNCLSINC IS NULL) ");
                        } else {
                            int unidCounter=0;
                            query.append(" AND (");
                            for (String unid : parameterValue.split(",")) {
                                if (unidCounter > 0) {
                                    query.append(" OR ");
                                }
                                unid = unid.replaceAll("[^\\d.]", "");
                                query.append(" ((pkg_frmwrk.Fun_String_Check(?,UNCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNCLSEXC,',')) ");
                                query.append(" OR (UNCLSINC IS NULL AND UNCLSEXC IS NULL) ");
                                query.append(" OR (UNCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,UNCLSEXC,',')) )");
                                parcount++; query.setParameter(parcount, unid);
                                parcount++; query.setParameter(parcount, unid);

                                parcount++; query.setParameter(parcount, unid);
                                parcount++; query.setParameter(parcount, unid);
                                parcount++; query.setParameter(parcount, unid);
                                ++unidCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if (ShipmentDetailsVO.LENGTH.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (LENSTR IS NULL AND LENEND IS NULL) ");
                        } else {
                            int lengthCounter = 0;
                            query.append(" AND (");
                            for (String length : parameterValue.split(",")) {
                                if (lengthCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((LENSTR =? AND LENEND =?)");
                                query.append(" 	OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND LENSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(LENSTR)<=TO_NUMBER(?)  AND LENEND is  NULL)");
                                query.append(" OR (LENSTR IS NULL AND LENEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND TO_NUMBER(LENSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount, length);
                                query.setParameter(++parcount, length);
                                query.setParameter(++parcount, length);
                                query.setParameter(++parcount, length);
                                query.setParameter(++parcount, length);
                                query.setParameter(++parcount, length);
                                ++lengthCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                } else if (ShipmentDetailsVO.WIDTH.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (WIDSTR IS NULL AND WIDEND IS NULL) ");
                        } else {
                            int widthCounter = 0;
                            query.append(" AND (");
                            for (String width : parameterValue.split(",")) {
                                if (widthCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((WIDSTR =? AND WIDEND =?)");
                                query.append(" 	OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?)  AND WIDSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(WIDSTR)<=TO_NUMBER(?) AND WIDEND is  NULL)");
                                query.append(" OR (WIDSTR IS NULL AND WIDEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?) AND TO_NUMBER(WIDSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount, width);
                                query.setParameter(++parcount, width);
                                query.setParameter(++parcount, width);
                                query.setParameter(++parcount, width);
                                query.setParameter(++parcount, width);
                                query.setParameter(++parcount, width);
                                ++widthCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                    //Added by A-8445 for ICRD-331530 Starts
                }else if(ShipmentDetailsVO.DV_CUSTOMS.equals(parameterCode)){
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (DVCSTSTR IS NULL AND DVCSTEND IS NULL) ");
                        }else{
                            int dvCounter = 0;
                            query.append(" AND (");
                            for (String dvForCustoms : parameterValue.split(",")) {
                                if (dvCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((DVCSTSTR =? AND DVCSTEND =?)");
                                query.append(" \tOR (TO_NUMBER(DVCSTEND)>=TO_NUMBER(?)  AND DVCSTSTR is  NULL)");
                                query.append(" \tOR (TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?)  AND DVCSTEND is  NULL)");
                                query.append(" OR (DVCSTSTR IS NULL AND DVCSTEND IS NULL) ");
                                query.append(" \tOR (TO_NUMBER(DVCSTEND)>=TO_NUMBER(?)  AND TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?) ))))");
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                parcount++; query.setParameter(parcount, dvForCustoms);
                                dvCounter++;
                            }
                            query.append(" ) ");
                        }
                    }
                    //Added by A-8445 for ICRD-331530 Ends
                } else if (ShipmentDetailsVO.WEIGHT.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (WGTSTR IS NULL AND WGTEND IS NULL) ");
                        } else {
                            int weightCounter = 0;
                            query.append(" AND (");
                            for (String weight : parameterValue.split(",")) {
                                if (weightCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((WGTSTR =? AND WGTEND =?)");
                                query.append(" 	OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?)  AND WGTSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(WGTSTR)<=TO_NUMBER(?)  AND WGTEND is  NULL)");
                                query.append(" OR (WGTSTR IS NULL AND WGTEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?) AND TO_NUMBER(WGTSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount, weight);
                                query.setParameter(++parcount, weight);
                                query.setParameter(++parcount, weight);
                                query.setParameter(++parcount, weight);
                                query.setParameter(++parcount, weight);
                                query.setParameter(++parcount, weight);
                                ++weightCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                } else if (ShipmentDetailsVO.PER_PIECE_WEIGHT.equals(parameterCode)) {
                    for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (PERPCSWGTSTR IS NULL AND PERPCSWGTEND IS NULL) ");
                        } else {
                            int weightCounter = 0;
                            query.append(" AND (");
                            for (String perPieceWeight : parameterValue.split(",")) {
                                if (weightCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((PERPCSWGTSTR =? AND PERPCSWGTEND =?)");
                                query.append(" 	OR (TO_NUMBER(PERPCSWGTEND)>=TO_NUMBER(?)  AND PERPCSWGTSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(PERPCSWGTSTR)<=TO_NUMBER(?)  AND PERPCSWGTEND is  NULL)");
                                query.append(" OR (PERPCSWGTSTR IS NULL AND PERPCSWGTEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(PERPCSWGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(PERPCSWGTSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount, perPieceWeight);
                                query.setParameter(++parcount, perPieceWeight);
                                query.setParameter(++parcount, perPieceWeight);
                                query.setParameter(++parcount, perPieceWeight);
                                query.setParameter(++parcount, perPieceWeight);
                                query.setParameter(++parcount, perPieceWeight);
                                ++weightCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }else if("ULD".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (ULDINC IS NULL) ");
                        } else {
                            query.append(" AND ((pkg_frmwrk.Fun_String_Check(?,ULDINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ULDEXC,',')) ");
                            query.append(" OR (ULDINC IS NULL AND ULDEXC IS NULL) ");
                            query.append(" OR (ULDINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ULDEXC,',')) )");
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                            query.setParameter(++parcount, parameterValue);
                        }
                    }
                }else if("VOL".equals(parameterCode)){
                    for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
                        if (TILDE.equals(parameterValue)) {
                            query.append(" AND (VOLSTR IS NULL AND VOLEND IS NULL) ");
                        } else {
                            int volumeCounter = 0;
                            query.append(" AND (");
                            for (String volume : parameterValue.split(",")) {
                                if (volumeCounter > 0) {
                                    query.append(" OR ");
                                }
                                query.append(" ((((VOLSTR =? AND VOLEND =?)");
                                query.append(" 	OR (TO_NUMBER(VOLEND)>=TO_NUMBER(?)  AND VOLSTR is  NULL)");
                                query.append(" 	OR (TO_NUMBER(VOLSTR)<=TO_NUMBER(?)  AND VOLEND is  NULL)");
                                query.append(" OR (VOLSTR IS NULL AND VOLEND IS NULL) ");
                                query.append(" 	OR (TO_NUMBER(VOLEND)>=TO_NUMBER(?)  AND TO_NUMBER(VOLSTR)<=TO_NUMBER(?) ))))");
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                query.setParameter(++parcount,volume);
                                ++volumeCounter;
                            }
                            query.append(" ) ");
                        }
                    }
                }
            }
            //}
        }
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPORGINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPORGEXC,',')) ");
        query.append(" OR (ACRTYPORGINC IS NULL AND ACRTYPORGEXC IS NULL) ");
        query.append(" OR (ACRTYPORGINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPORGEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPDSTINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPDSTEXC,',')) ");
        query.append(" OR (ACRTYPDSTINC IS NULL AND ACRTYPDSTEXC IS NULL) ");
        query.append(" OR (ACRTYPDSTINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPDSTEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPVIAINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPVIAEXC,',')) ");
        query.append(" OR (ACRTYPVIAINC IS NULL AND ACRTYPVIAEXC IS NULL) ");
        query.append(" OR (ACRTYPVIAINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPVIAEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPALLINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPALLEXC,',')) ");
        query.append(" OR (ACRTYPALLINC IS NULL AND ACRTYPALLEXC IS NULL) ");
        query.append(" OR (ACRTYPALLINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPALLEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPANYINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPANYEXC,',')) ");
        query.append(" OR (ACRTYPANYINC IS NULL AND ACRTYPANYEXC IS NULL) ");
        query.append(" OR (ACRTYPANYINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYP,ACRTYPANYEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPORGINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPORGEXC,',')) ");
        query.append(" OR (ACRTYPGRPORGINC IS NULL AND ACRTYPGRPORGEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPORGINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPORGEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPDSTINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPDSTEXC,',')) ");
        query.append(" OR (ACRTYPGRPDSTINC IS NULL AND ACRTYPGRPDSTEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPDSTINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPDSTEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPVIAINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPVIAEXC,',')) ");
        query.append(" OR (ACRTYPGRPVIAINC IS NULL AND ACRTYPGRPVIAEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPVIAINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPVIAEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPALLINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPALLEXC,',')) ");
        query.append(" OR (ACRTYPGRPALLINC IS NULL AND ACRTYPGRPALLEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPALLINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPALLEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPANYINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPANYEXC,',')) ");
        query.append(" OR (ACRTYPGRPANYINC IS NULL AND ACRTYPGRPANYEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPANYINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.ACRTYPGRPEMB,ACRTYPGRPANYEXC,',')) )");

        if (shipmentVO.getMap().containsKey(ShipmentDetailsVO.FLTNUM_ALL)) {

            if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTNUM_ALL).contains(TILDE)) {
                query.append(" AND (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
            } else {
                query.append(
                        " AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLINC,',')  >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
                query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
                query.append(
                        " OR (FLTNUMALLINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) )");

            }

            if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTNUM_ALL).contains(TILDE)) {
                query.append(" (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
            } else {

                query.append(
                        "AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYINC,',')  >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) ");
                query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
                query.append(
                        " OR (FLTNUMANYINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) )");

            }

        }
        if (shipmentVO.getMap().containsKey(ShipmentDetailsVO.FLTOWR_ALL)) {
            if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTOWR_ALL).contains(TILDE)) {
                query.append(" AND (FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
            } else {
                query.append(
                        " AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRALLINC,',')  >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRALLEXC,',')) ");
                query.append(" OR (FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
                query.append(
                        " OR (FLTOWRALLINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRALLEXC,',')) )");

            }
            if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTOWR_ALL).contains(TILDE)) {
                query.append(" AND (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
            } else {

                query.append(
                        " AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRANYINC,',')  >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRANYEXC,',')) ");
                query.append(" OR (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
                query.append(
                        " OR (FLTOWRANYINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRANYEXC,',')) )");

            }
        }

        if (shipmentVO.getBookingFlightDetailVOs() != null && shipmentVO.getBookingFlightDetailVOs().size() > 0) {
            query.append(" AND ( ");
            int flightCounter = 0;
            Set<String> carrierCodes = null;
            Set<String> times = null;
            Set<String> dates = null;
            Set<String> flightnumbers = null;
            Set<String> dayOfWeeks = null;
            boolean isAndFlag = false;
            int counter = 0;
            for (BookingFlightDetailVO bookingFlightDetailVO : shipmentVO.getBookingFlightDetailVOs()) {
                carrierCodes = new HashSet<String>();
                times = new HashSet<String>();
                dates = new HashSet<String>();
                flightnumbers = new HashSet<String>();
                dayOfWeeks = new HashSet<String>();
                if (flightCounter > 0) {
                    query.append(" OR");
                    isAndFlag = false;
                }
                query.append(" (");
                if (bookingFlightDetailVO.getCarrierOrigin() != null
                        && bookingFlightDetailVO.getCarrierOrigin().trim().length() > 0) {
                    if (isAndFlag) {
                        query.append(" AND ");
                    }
                    isAndFlag = true;

                    query.append(
                            " pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRORGINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRORGEXC,',')) ");
                    query.append(" OR (CARRORGINC IS NULL AND CARRORGEXC IS NULL) ");
                    query.append(
                            " OR (CARRORGINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRORGEXC,',')) )");
                    carrierCodes.add(bookingFlightDetailVO.getCarrierOrigin());
                }
                if (carrierCodes.size() > 0) {
                    // For applicable on all
                    query.append(" AND(( ");
                    query.append(
                            " (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRALLINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRALLEXC,',')) ");

                    query.append(" ) OR( ");
                    query.append(
                            " (CARRALLINC='-' AND (regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRALLEXC,','))) ");

                    query.append(" ) OR (CARRALLINC IS NULL AND CARRALLEXC IS NULL) ) ");

                    // For applicable on any
                    query.append(" AND(( ");
                    query.append(
                            " (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRANYINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRANYEXC,',')) ");

                    query.append(" ) OR( ");
                    query.append(
                            " (CARRANYINC='-' AND (regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRANYEXC,','))) ");

                    query.append(" ) OR (CARRANYINC IS NULL AND CARRANYEXC IS NULL) ) ");
                }
                query.append("AND");// Added by A-8146
                query.append(
                        "  ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,ARLCODINC,',') >0 AND NOT pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,ARLCODEXC,',') >0) ");

                query.append(" OR (ARLCODINC IS NULL AND ARLCODEXC IS NULL) ");
                query.append(
                        " OR (ARLCODINC='-' AND NOT pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,ARLCODEXC,',') >0) )");

                query.append(
                        " AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMINC,',') >0 AND NOT pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMEXC,',') >0) ");

                query.append(" OR (FLTNUMINC IS NULL AND FLTNUMEXC IS NULL) ");
                query.append(
                        " OR (FLTNUMINC='-' AND NOT pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMEXC,',') >0) )");

                // case 1: eq
                query.append(AND_QUERY);
                query.append(
                        INSTR_TO_TIMESTAMP+ sysDate +",'dd-MON-yyyy ')|| ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+ sysDate+inStrShrStdQuery);
                query.append(
                        AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery+"))");
                // case 2
                query.append(
                        TO_DATE_CONVERSION+sysDate +",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
                query.append(" AND ORGSTRTIM is  NULL AND ORGENDTIM is not NULL))");
                // case 3
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
                query.append(" AND ORGENDTIM is  NULL AND ORGSTRTIM is not NULL))");
                // case 4
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
                query.append(
                        AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery+" )) ");
                query.append("  OR(ORGSTRTIM is  NULL AND ORGENDTIM is NULL) )))");

                // case 1: eq
                query.append(AND_QUERY);
                query.append(
                        INSTR_TO_TIMESTAMP+sysDate+",'dd-MON-yyyy ')|| DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                query.append(
                        AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+"))");
                // case 2
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                query.append(" AND DSTSTRTIM is  NULL AND DSTENDTIM is not NULL))");
                // case 3
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                query.append(" AND DSTENDTIM is  NULL AND DSTSTRTIM is not NULL))");
                // case 4
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                query.append(
                        AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+" ))");
                query.append("  OR(DSTSTRTIM is  NULL AND DSTENDTIM is NULL) )))");

                if(shipmentVO.getViaPointStation()!=null && shipmentVO.getViaPointStation().size()>0){
                    query.append(AND_QUERY);
                    query.append(
                            INSTR_TO_TIMESTAMP+sysDate+",'dd-MON-yyyy ')|| VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                    query.append(
                            AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+"))");
                    query.append(
                            TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                    query.append(" AND VIASTRTIM is  NULL AND VIAENDTIM is not NULL))");
                    query.append(
                            TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                    query.append(" AND VIAENDTIM is  NULL AND VIASTRTIM is not NULL))");
                    query.append(
                            TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                    query.append(
                            AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+" ))");
                    query.append("  OR(VIASTRTIM is  NULL AND VIAENDTIM is NULL) )))");
                }else{
                    query.append(" AND (VIASTRTIM IS NULL AND VIAENDTIM IS NULL) ");
                }
                query.append(" AND(");

                query.append(" ((((");
                query.append(
                        INSTR_TO_TIMESTAMP+sysDate+",'dd-MON-yyyy ')|| ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
                query.append(
                        AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery+" ))");
                // case 2
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
                query.append(" AND ALLSTRTIM is  NULL AND ALLENDTIM is not NULL))");
                // case 3
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
                query.append(" AND ALLENDTIM is  NULL AND ALLSTRTIM is not NULL))");
                // case 4
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
                query.append(
                        AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery+" ))");
                query.append("  OR(ALLSTRTIM is  NULL AND ALLENDTIM is NULL) )))");

                query.append(" ) ");
                // For applicable on any
                query.append(" AND(");

                query.append(" ((((");
                query.append(
                        INSTR_TO_TIMESTAMP+sysDate+",'dd-MON-yyyy ')|| ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                query.append(
                        AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+"))");
                // case 2
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                query.append(" AND ANYSTRTIM is  NULL AND ANYENDTIM is not NULL))");
                // case 3
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                query.append(" AND ANYENDTIM is  NULL AND ANYSTRTIM is not NULL))");
                // case 4
                query.append(
                        TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') >=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
                query.append(
                        AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+" ))");
                query.append("  OR(ANYSTRTIM is  NULL AND ANYENDTIM is NULL) )))");

                query.append(" ) ");
                query.append(
                        " AND ((pkg_frmwrk.Fun_String_Check((TO_CHAR(SHR.STD,'dd-mm-yy')),ORGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),ORGDATEXC,',') ");
                query.append(" OR (ORGDATINC IS NULL AND ORGDATEXC IS NULL) ");
                query.append(
                        " OR (ORGDATINC='-' AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),ORGDATEXC,',' )");

                query.append(")))");// Added by A-8146
                query.append(" AND (VIADATINC IS NULL AND VIADATEXC IS NULL) ");
                query.append(
                        " AND ((pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATEXC,',')) ");
                query.append(" OR (DSTDATINC IS NULL AND DSTDATEXC IS NULL) ");
                query.append(
                        " OR (DSTDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATEXC,',') )");

                query.append(")");// Added by A-8146
                query.append(" AND(");

                query.append(
                        " (pkg_frmwrk.Fun_String_Check((TO_CHAR(SHR.STA,'dd-mm-yy')),ALLDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),ALLDATEXC,',')) ");
                query.append(" OR (ALLDATINC IS NULL AND ALLDATEXC IS NULL) ");
                query.append(
                        " OR (ALLDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),ALLDATEXC,',') )");

                query.append(" ) ");
                // For applicable on any
                query.append(" AND(");

                query.append(
                        " (pkg_frmwrk.Fun_String_Check((TO_CHAR(SHR.STA,'dd-mm-yy')),ANYDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),ANYDATEXC,',')) ");
                query.append(" OR (ANYDATINC IS NULL AND ANYDATEXC IS NULL) ");
                query.append(
                        " OR (ANYDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),ANYDATEXC,',' ))");

                query.append(" ) ");

                query.append("AND ((INSTR(ORGARPCODINC,SHR.SEGORG)>0 OR INSTR(ORGARPCODEXC , SHR.SEGORG) = 0 ) ");
                query.append("OR (INSTR(ORGARPGRPINC,SHR.SEGORG)>0 OR INSTR(ORGARPGRPEXC , SHR.SEGORG) = 0 ) ");

                String orgCountry = getTypeValue(shipmentVO.getTypeMap(), bookingFlightDetailVO.getOrigin(),
                        ShipmentDetailsVO.COUNTRY);
                query.append("  OR ( (ORGARPCODINC IS NULL OR ORGARPCODINC ='-')");
                if (orgCountry != null && orgCountry.trim().length() > 0) {
                    query.append("OR (INSTR(ORGCNTCODINC,?)>0 OR INSTR(ORGCNTCODEXC , ?) = 0 )  ");
                    query.setParameter(++parcount, orgCountry);
                    query.setParameter(++parcount, orgCountry);
                } else {
                    query.append(" (ORGCNTCODINC IS NULL OR ORGCNTCODINC ='-')  ");
                }

				/*query.append("(ORGARPGRPINC IS NULL OR ORGARPGRPINC='-')  AND"
						+ " (ORGCNTGRPINC IS NULL OR ORGCNTGRPINC = '-') ) ");*/
                //Added for ICRD-331282 by Prashant Behera starts
                if (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() > 0) {
                    String[] splitArray = shipmentVO.getOrgCntGrp().split(",");
                    query.append(" AND ( ");
                    for (int i = 0; i < splitArray.length; i++) {
                        query.append(" pkg_frmwrk.Fun_String_Check(?,REC.ORGCNTGRPINC,',')  >0 "
                                + "OR ");
                        query.setParameter(++parcount, splitArray[i]);
                    }
                    query.append("ORGCNTGRPINC = '-'");
                    query.append(")");
                } else {
                    query.append( " AND (ORGCNTGRPINC IS NULL OR ORGCNTGRPINC = '-') ");
                }
                if(shipmentVO.getOrgArpGrp()!=null && shipmentVO.getOrgArpGrp().trim().length() > 0 ){
                    String[] splitArray = shipmentVO.getOrgArpGrp().split(",");
                    query.append(" AND ( ");
                    for (int i = 0; i < splitArray.length; i++) {
                        query.append(" pkg_frmwrk.Fun_String_Check(?,REC.ORGARPGRPINC,',')  >0 "
                                + "OR ");
                        query.setParameter(++parcount, splitArray[i]);
                    }
                    query.append("ORGARPGRPINC = '-'");
                    query.append(")");
                }else{
                    query.append(" AND (ORGARPGRPINC IS NULL OR ORGARPGRPINC='-') ");
                }
                query.append("))");
                query.append(" AND (((INSTR(DSTARPCODINC,SHR.SHPDST)>0 OR INSTR(DSTARPCODEXC , SHR.SHPDST) = 0 )  ");
                query.append("OR (INSTR(DSTARPGRPINC,SHR.SHPDST)>0 OR INSTR(DSTARPGRPEXC , SHR.SHPDST) = 0 ) ");

                query.append(
                        "  OR ( (DSTARPCODINC IS NULL OR DSTARPCODINC ='-')  ");
                String dstCountry = getTypeValue(shipmentVO.getTypeMap(), bookingFlightDetailVO.getDestination(),
                        ShipmentDetailsVO.COUNTRY);
                if (dstCountry != null && dstCountry.trim().length() > 0) {
                    query.append("OR (INSTR(DSTCNTCODINC,?)>0 OR INSTR(DSTCNTCODINC , ?) = 0 )  ");
                    query.setParameter(++parcount, dstCountry);
                    query.setParameter(++parcount, dstCountry);
                } else {
                    query.append(" (DSTCNTCODINC IS NULL OR DSTCNTCODINC ='-')");
                }
                if (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() > 0) {
                    String[] splitArray = shipmentVO.getDstCntGrp().split(",");
                    query.append(" AND ( ");
                    for (int i = 0; i < splitArray.length; i++) {
                        query.append(" pkg_frmwrk.Fun_String_Check(?,REC.DSTCNTGRPINC,',')  >0 "
                                + "OR ");
                        query.setParameter(++parcount, splitArray[i]);
                    }
                    query.append("DSTCNTGRPINC = '-'");
                    query.append(")");
                } else {
                    query.append( " AND (DSTCNTGRPINC IS NULL OR DSTCNTGRPINC = '-') ");
                }
                if(shipmentVO.getDstArpGrp()!=null && shipmentVO.getDstArpGrp().trim().length() > 0 ){
                    String[] splitArray = shipmentVO.getDstArpGrp().split(",");
                    query.append(" AND ( ");
                    for (int i = 0; i < splitArray.length; i++) {
                        query.append(" pkg_frmwrk.Fun_String_Check(?,REC.DSTARPGRPINC,',')  >0 "
                                + "OR ");
                        query.setParameter(++parcount, splitArray[i]);
                    }
                    query.append("DSTARPGRPINC = '-'");
                    query.append(")");
                }else{
                    query.append(" AND (DSTARPGRPINC IS NULL OR DSTARPGRPINC='-') ");
                }
                query.append(")))");
                //Added for ICRD-331282 by Prashant Behera ends

                // Added by A-5290 for ICRD-225922 for fixing the day of
                // operation scenario

                query.append(" AND (  CASE    WHEN ALLDAYOPR IS NOT NULL    "
                        + "THEN      CASE        WHEN (INSTR(ALLDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ALLDAYOPR)) > 0        "
                        + "AND INSTR(ALLDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ALLDAYOPR)) > 0         "
                        + "AND INSTR(ALLDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST <> SHR.SHPDST)       "
                        + " THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ALLDAYOPR)) > 0       "
                        + " AND INSTR(ALLDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA)) END),ALLDAYOPR)) > 0)       "
                        + " THEN 1        ELSE 0      END    " + "WHEN ANYDAYOPR IS NOT NULL    "
                        + "THEN      CASE        WHEN (INSTR(ANYDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ANYDAYOPR)) > 0        "
                        + "OR INSTR(ANYDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ANYDAYOPR)) > 0        "
                        + "OR INSTR(ANYDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST <> SHR.SHPDST)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ANYDAYOPR)) > 0        "
                        + "OR INSTR(ANYDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA)) END),ANYDAYOPR)) > 0)        "
                        + "THEN 1        ELSE 0      END    " + "WHEN ORGDAYOPR IS NOT NULL    "
                        + "THEN      CASE        WHEN INSTR(ORGDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ORGDAYOPR)) > 0        "
                        + "THEN 1        ELSE 0      END    " + "WHEN VIADAYOPR IS NOT NULL    "
                        + "THEN      CASE        WHEN INSTR(VIADAYOPR, COALESCE((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),VIADAYOPR)) > 0        "
                        + "THEN 1        ELSE 0      END    " + "WHEN DSTDAYOPR IS NOT NULL    "
                        + "THEN      CASE        WHEN INSTR(DSTDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
                        + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA)) END),DSTDAYOPR)) > 0       "
                        + "THEN 1        ELSE 0      END    ELSE 1  END   = 1) ");



                if (bookingFlightDetailVO.getOrigin()!= null
                        && bookingFlightDetailVO.getOrigin().trim().length() > 0 ) {
                    query.append("  AND (");
                    String orgairportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
                    String orgcountry= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
                    String orgcountryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append("   ( (");
                    query.append(" (pkg_frmwrk.Fun_String_Check(SHR.SEGORG,SEGORGARPCODINC,',') >0  OR SEGORGARPCODINC ='-') ");
                    if(orgairportGrp != null && orgairportGrp.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGORGARPGRPINC,',')  >0 OR SEGORGARPGRPINC   ='-') ");
                        query.setParameter(++parcount, orgairportGrp);
                    }
                    if(orgcountry != null && orgcountry.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGORGCNTCODINC,',')  >0 OR SEGORGCNTCODINC   ='-') ");
                        query.setParameter(++parcount, orgcountry);
                    }
                    if(orgcountryGrp != null && orgcountryGrp.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGORGCNTGRPINC,',')  >0 OR SEGORGCNTGRPINC   ='-') ");
                        query.setParameter(++parcount, orgcountryGrp);
                    }
                    //org exclude
                    query.append(" ) AND NOT ( ");
                    query.append(" pkg_frmwrk.Fun_String_Check(SHR.SEGORG,SEGORGARPCODEXC,',')>0 ");
                    if(orgairportGrp != null && orgairportGrp.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGORGARPGRPEXC,',')      >0 ");
                        query.setParameter(++parcount, orgairportGrp);
                    }
                    if(orgcountry != null && orgcountry.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGORGCNTCODEXC,',')        >0 ");
                        query.setParameter(++parcount, orgcountry);
                    }
                    if(orgcountryGrp != null && orgcountryGrp.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGORGCNTGRPEXC,',')      >0 ");
                        query.setParameter(++parcount, orgcountryGrp);
                    }
                    query.append(" ) ");
                    query.append(" ) ");
                } else {
                    query.append("  AND ( (SEGORGARPCODINC IS NULL OR SEGORGARPCODINC ='-') AND  (SEGORGCNTCODINC IS NULL OR SEGORGCNTCODINC ='-') AND (SEGORGARPGRPINC IS NULL OR SEGORGARPGRPINC='-')  AND (SEGORGCNTGRPINC IS NULL OR SEGORGCNTGRPINC = '-') ) ");
                }
                //segment destination
                if (bookingFlightDetailVO.getDestination()!= null
                        && bookingFlightDetailVO.getDestination().trim().length() > 0 ) {
                    String dstairportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
                    String dstcountry= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
                    String dstcountryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append("  AND ( (");
                    query.append(" (pkg_frmwrk.Fun_String_Check(SHR.SEGDST,SEGDSTARPCODINC,',') >0  OR SEGDSTARPCODINC ='-') ");
                    if(dstairportGrp != null && dstairportGrp.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGDSTARPGRPINC,',')  >0 OR SEGDSTARPGRPINC   ='-') ");
                        query.setParameter(++parcount, dstairportGrp);
                    }
                    if(dstcountry != null && dstcountry.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGDSTCNTCODINC,',')  >0 OR SEGDSTCNTCODINC   ='-') ");
                        query.setParameter(++parcount, dstcountry);
                    }
                    if(dstcountryGrp != null && dstcountryGrp.trim().length() >0 ){
                        query.append(" OR (pkg_frmwrk.Fun_String_Check(?,SEGDSTCNTGRPINC,',')  >0 OR SEGDSTCNTGRPINC   ='-') ");
                        query.setParameter(++parcount, dstcountryGrp);
                    }
                    //org exclude
                    query.append(" ) AND NOT ( ");
                    query.append(" pkg_frmwrk.Fun_String_Check(SHR.SEGDST,SEGDSTARPCODEXC,',')>0 ");
                    if(dstairportGrp != null && dstairportGrp.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGDSTARPGRPEXC,',')      >0 ");
                        query.setParameter(++parcount, dstairportGrp);
                    }
                    if(dstcountry != null && dstcountry.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGDSTCNTCODEXC,',')        >0 ");
                        query.setParameter(++parcount, dstcountry);
                    }
                    if(dstcountryGrp != null && dstcountryGrp.trim().length() >0 ){
                        query.append(" OR pkg_frmwrk.Fun_String_Check(?,SEGDSTCNTGRPEXC,',')      >0 ");
                        query.setParameter(++parcount, dstcountryGrp);
                    }
                    query.append(" ) ");
                    query.append(" ) ");
                } else {
                    query.append("  AND ( (SEGDSTARPCODINC IS NULL OR SEGDSTARPCODINC ='-') AND  (SEGDSTCNTCODINC IS NULL OR SEGDSTCNTCODINC ='-') AND (SEGDSTARPGRPINC IS NULL OR SEGDSTARPGRPINC='-')  AND (SEGDSTCNTGRPINC IS NULL OR SEGDSTCNTGRPINC = '-') ) ");
                }
                query.append(" AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMSEGINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMSEGEXC,',')) ");
                query.append(" OR (FLTNUMSEGINC IS NULL AND FLTNUMSEGEXC IS NULL) ");
                query.append(" OR (FLTNUMSEGINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMSEGEXC,',')) )");
                query.append(" AND (FLTNUMSEGINC IS NULL AND FLTNUMSEGEXC IS NULL) ");
                //pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATINC,',')
                boolean arrivalmarked = false;
                boolean departuremarked = false;
                if (bookingFlightDetailVO.getDateDestination() != null) {
                    arrivalmarked = true;
                    query.append(" AND ((SEGDSTDAYOPR IS NOT NULL) AND (pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'),',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATEXC,',')) ");
                    query.append(" OR (SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
                    query.append(" OR (SEGDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATEXC,',')) OR (SEGDSTDAYOPR IS NULL))  ");
                }
                if (bookingFlightDetailVO.getDateOrigin() != null) {
                    departuremarked = true;
                    query.append(" AND ((SEGORGDAYOPR IS NOT NULL) AND (pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATEXC,',')) ");
                    query.append(" OR (SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
                    query.append(" OR (SEGDATINC='-' AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATEXC,',')) OR (SEGORGDAYOPR IS NULL))");
                }
                if (bookingFlightDetailVO.getDateViaPoint() != null || bookingFlightDetailVO.getArrivalTimeAtDestination() != null) {
                    if(bookingFlightDetailVO.getDateViaPoint() != null && !departuremarked){
                        query.append(" AND ((SEGORGDAYOPR IS NOT NULL) AND (pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATEXC,',')) ");
                        query.append(" OR (SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
                        query.append(" OR (SEGDATINC='-' AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATEXC,',')) OR (SEGORGDAYOPR IS NULL))");
                    }
                    if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null &&!arrivalmarked){
                        query.append(" AND ((SEGDSTDAYOPR IS NOT NULL) AND (pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATEXC,',')) ");
                        query.append(" OR (SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
                        query.append(" OR (SEGDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.Fun_String_Check(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATEXC,',')) OR SEGDSTDAYOPR IS NULL)");
                    }
                }
                //TO_CHAR(SHR.STA,'HH24:MI:SS')
                arrivalmarked=false;
                departuremarked=false;
                if (bookingFlightDetailVO.getTimeOrigin() != null) {
                    departuremarked=true;
                    // case 1: eq
                    query.append(AND_QUERY);
                    query.append(" (SEGORGDAYOPR IS NOT NULL) AND (TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2);
                    query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2+"))");
                    // case 2
                    query.append(instrTodateSegendTimStdQuery);
                    query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL))");
                    // case 3
                    query.append(TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2);
                    query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL))");
                    // case 4
                    query.append(instrTodateSegendTimStdQuery);
                    query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2+" )) ");
                    query.append("  OR(SEGSTRTIM is  NULL AND SEGENDTIM is NULL) )) OR (SEGORGDAYOPR IS NULL) )");
                }
                if(bookingFlightDetailVO.getTimeDestination() != null){
                    arrivalmarked=true;
                    // case 1: eq
                    query.append(AND_QUERY);
                    query.append("(SEGDSTDAYOPR IS NOT NULL) AND (TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2);
                    query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2+"))");
                    // case 2
                    query.append(instrTodateSegendTimStaQuery);
                    query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL))");
                    // case 3
                    query.append(TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2);
                    query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL))");
                    // case 4
                    query.append(instrTodateSegendTimStaQuery);
                    query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2+" )) ");
                    query.append("  OR(SEGSTRTIM is  NULL AND SEGENDTIM is NULL) )) OR (SEGDSTDAYOPR IS NULL))");
                }
                if(bookingFlightDetailVO.getTimeViaPoint() != null || bookingFlightDetailVO.getArrivalTimeAtDestination()!=null) {
                    // case 1: eq
                    if(bookingFlightDetailVO.getTimeViaPoint() != null && !departuremarked){
                        query.append(AND_QUERY);
                        query.append(" (SEGORGDAYOPR IS NOT NULL) AND (TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2);
                        query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| TO_CHAR(SHR.STD,'HH24:MI:SS'),'dd-MON-yyyy HH24:MI:SS')))");
                        // case 2
                        query.append(instrTodateSegendTimStdQuery);
                        query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL))");
                        // case 3
                        query.append(TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2);
                        query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL))");
                        // case 4
                        query.append(instrTodateSegendTimStdQuery);
                        query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| TO_CHAR(SHR.STD,'HH24:MI:SS'),'dd-MON-yyyy HH24:MI:SS') )) ");
                        query.append("  OR(SEGSTRTIM is  NULL AND SEGENDTIM is NULL) ))OR (SEGORGDAYOPR IS NULL))");
                    }
                    if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null && !arrivalmarked){
                        query.append(AND_QUERY);
                        query.append(" (SEGDSTDAYOPR IS NOT NULL) AND (TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2);
                        query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2+"))");
                        // case 2
                        query.append(instrTodateSegendTimStaQuery);
                        query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL))");
                        // case 3
                        query.append(TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2);
                        query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL))");
                        // case 4
                        query.append(instrTodateSegendTimStaQuery);
                        query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2+" )) ");
                        query.append("  OR(SEGSTRTIM is  NULL AND SEGENDTIM is NULL) ))OR (SEGDSTDAYOPR IS NULL))");
                    }
                }
                arrivalmarked=false;
                departuremarked=false;
                query.append(" AND ");
                query.append(" ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRSEGINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRSEGEXC,',')) ");
                query.append(" OR (CARRSEGINC IS NULL AND CARRSEGEXC IS NULL) ");
                query.append(" OR (CARRSEGINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,CARRSEGEXC,',')) )");
                query.append(" AND (CARRSEGINC IS NULL AND CARRSEGEXC IS NULL) ");
                if (bookingFlightDetailVO.getFlightType() != null
                        && bookingFlightDetailVO.getFlightType().trim().length() > 0) {
                    query.append(" AND ");
                    query.append(" ((pkg_frmwrk.Fun_String_Check(?,FLTTYPSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPSEGEXC,',')) ");
                    query.append(" OR (FLTTYPSEGINC IS NULL AND FLTTYPSEGEXC IS NULL) ");
                    query.append(" OR (FLTTYPSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,FLTTYPSEGEXC,',')) )");
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                    query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
                }
                else {
                    query.append(" AND (FLTTYPSEGINC IS NULL AND FLTTYPSEGEXC IS NULL) ");
                }
                query.append(" AND ");
                query.append(" ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRSEGINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRSEGEXC,',')) ");
                query.append(" OR (FLTOWRSEGINC IS NULL AND FLTOWRSEGEXC IS NULL) ");
                query.append(" OR (FLTOWRSEGINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,FLTOWRSEGEXC,',')) )");
                query.append(" AND (FLTOWRSEGINC IS NULL AND FLTOWRSEGEXC IS NULL) ");
                String airinegroup= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getFlightCarrierCode(),ShipmentDetailsVO.AIRLINE_GRP);
                if (airinegroup != null
                        && airinegroup.trim().length() > 0) {
                    query.append(" AND ");
                    query.append(" ((pkg_frmwrk.Fun_String_Check(?,ARLGRPSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPSEGEXC,',')) ");
                    query.append(" OR (ARLGRPSEGINC IS NULL AND ARLGRPSEGEXC IS NULL) ");
                    query.append(" OR (ARLGRPSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.Fun_String_Check(?,ARLGRPSEGEXC,',')) )");
                    query.setParameter(++parcount, airinegroup);
                    query.setParameter(++parcount, airinegroup);
                    query.setParameter(++parcount, airinegroup);
                    query.setParameter(++parcount, airinegroup);
                    query.setParameter(++parcount, airinegroup);
                }
                else {
                    query.append(" AND (ARLGRPSEGINC IS NULL AND ARLGRPSEGEXC IS NULL) ");
                }
                if (bookingFlightDetailVO.getDayOfWeekOrg()!=null
                        && bookingFlightDetailVO.getDayOfWeekOrg().trim().length() > 0) {
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
                    departuremarked=true;
                    query.append(SEGORGDAYOPR_QUERY);
                    query.append("AND (SHR.STD BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    query.append(" OR (SEGORGDAYOPR IS NULL)) AND ((INSTR(SEGORGARPCODINC,SHR.SEGORG)>0 OR INSTR(SEGORGARPCODEXC , SHR.SEGORG) = 0 ) ");
                    if(airportGrp!=null){
                        query.append(INSTR_SEGORGARPGRPINC_QUERY);
                    }
                    if(country!=null){
                        query.append(INSTR_SEGORGCNTCODINC_QUERY);
                    }
                    if(countryGrp!=null){
                        query.append(INSTR_SEGORGCNTGRPINC_QUERY);
                    }
                    query.append(SEGORGARPCODINC_QUERY);
                    query.append(")");
                    query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekOrg() + '%');
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                }
                if (bookingFlightDetailVO.getDayOfWeekDst()!=null
                        && bookingFlightDetailVO.getDayOfWeekDst().trim().length() > 0) {
                    arrivalmarked=true;
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append(AND_SEGDSTDAYOPR_QUERY);
                    query.append("AND (SHR.STA BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    query.append(SEGDSTDAYOPR_QUERY);
                    query.append(" AND ((INSTR(SEGDSTARPCODINC,SHR.SEGDST)>0 OR INSTR(SEGDSTARPCODEXC , SHR.SEGDST) = 0 )  ");
                    if(airportGrp!=null){
                        query.append(INSTR_SEGDSTARPGRPINC_QUERY);
                    }
                    if(country!=null){
                        query.append(INSTR_SEGDSTCNTCODINC_QUERY);
                    }
                    if(countryGrp!=null){
                        query.append(INSTR_SEGDSTCNTGRPINC_QUERY);
                    }
                    query.append(SEGDSTARPCODINC_QUERY);
                    query.append(")");
                    query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekDst() + '%');
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                }
                if (!arrivalmarked && (bookingFlightDetailVO.getArrivalTimeAtDestination()!=null || bookingFlightDetailVO.getFlightDate()!=null)) {
                    String dowdst  = String.valueOf(bookingFlightDetailVO
                            .getArrivalTimeAtDestination()!=null?bookingFlightDetailVO
                            .getArrivalTimeAtDestination().get(
                                    Calendar.DAY_OF_WEEK) - 1:bookingFlightDetailVO
                            .getFlightDate().get(
                                    Calendar.DAY_OF_WEEK) - 1);
                    if("0".equals(dowdst)){
                        dowdst="7";
                    }
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
                    query.append(AND_SEGDSTDAYOPR_QUERY);
                    query.append("AND (SHR.STA BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    query.append(SEGDSTDAYOPR_QUERY);
                    query.append(" AND ((INSTR(SEGDSTARPCODINC,SHR.SEGDST)>0 OR INSTR(SEGDSTARPCODEXC , SHR.SEGDST) = 0 )  ");
                    if(airportGrp!=null){
                        query.append(INSTR_SEGDSTARPGRPINC_QUERY);
                    }
                    if(country!=null){
                        query.append(INSTR_SEGDSTCNTCODINC_QUERY);
                    }
                    if(countryGrp!=null){
                        query.append(INSTR_SEGDSTCNTGRPINC_QUERY);
                    }
                    query.append(SEGDSTARPCODINC_QUERY);
                    query.append(")");
                    query.setParameter(++parcount,'%' + dowdst + '%');
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                }
                if (!departuremarked && (bookingFlightDetailVO.getDepartureTimeAtOrigin()!=null || bookingFlightDetailVO.getFlightDate()!=null)) {
                    String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
                    String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
                    String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
                    String dowdep  = String.valueOf(bookingFlightDetailVO
                            .getDepartureTimeAtOrigin()!=null?bookingFlightDetailVO
                            .getDepartureTimeAtOrigin().get(
                                    Calendar.DAY_OF_WEEK) - 1:bookingFlightDetailVO
                            .getFlightDate().get(
                                    Calendar.DAY_OF_WEEK) - 1);
                    if("0".equals(dowdep)){
                        dowdep="7";
                    }
                    query.append(SEGORGDAYOPR_QUERY);
                    query.append("AND (SHR.STD BETWEEN trunc(STRDAT) AND trunc(ENDDAT)) ");
                    query.append(" OR (SEGORGDAYOPR IS NULL)) AND ((INSTR(SEGORGARPCODINC,SHR.SEGORG)>0 OR INSTR(SEGORGARPCODEXC , SHR.SEGORG) = 0 ) ");
                    if(airportGrp!=null){
                        query.append(INSTR_SEGORGARPGRPINC_QUERY);
                    }
                    if(country!=null){
                        query.append("INSTR_SEGORGCNTCODINC_QUERY");
                    }
                    if(countryGrp!=null){
                        query.append(INSTR_SEGORGCNTGRPINC_QUERY);
                    }
                    query.append(SEGORGARPCODINC_QUERY);
                    query.append(")");
                    query.setParameter(++parcount,'%' + dowdep + '%');
                    if(airportGrp!=null){
                        query.setParameter(++parcount,airportGrp);
                        query.setParameter(++parcount,airportGrp);
                    }
                    if(country!=null){
                        query.setParameter(++parcount,country);
                        query.setParameter(++parcount,country);
                    }
                    if(countryGrp!=null){
                        query.setParameter(++parcount,countryGrp);
                        query.setParameter(++parcount,countryGrp);
                    }
                }
                query.append("  )");
                query.append(
                        " AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGEXC,',')) ");
                query.append(" OR (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL) ");
                query.append(
                        " OR (FLTNUMORGINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGEXC,',')) ");
                query.append(
                        "OR  ((((TO_NUMBER(regexp_replace(FLTNUMORGGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) "
                                + " AND FLTNUMORGLTEQ is  NULL AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) "
                                + "OR     (TO_NUMBER(regexp_replace(FLTNUMORGLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMORGGTEQ is  NULL"
                                + " AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) "
                                + "OR      ((TO_NUMBER(regexp_replace(FLTNUMORGGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  "
                                + "AND TO_NUMBER(regexp_replace(FLTNUMORGLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD"
                                + " OR regexp_replace(FLTNUMORGLTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) ))))");
                query.append(")");

                query.append(
                        " AND ((pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTEXC,',')) ");
                query.append(" OR (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL) ");
                query.append(
                        " OR (FLTNUMDSTINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTEXC,',')) ");
                query.append(
                        "OR  ((((TO_NUMBER(regexp_replace(FLTNUMDSTGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMDSTLTEQ is  NULL AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR     (TO_NUMBER(regexp_replace(FLTNUMDSTLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMDSTGTEQ is  NULL AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR      ((TO_NUMBER(regexp_replace(FLTNUMDSTGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND TO_NUMBER(regexp_replace(FLTNUMDSTLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD OR regexp_replace(FLTNUMDSTLTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) ))))");
                query.append(")");

                query.append(" AND (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL) ");

                // For applicable on all
                query.append(" AND(");

                query.append(
                        " (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
                query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
                query.append(
                        " OR (FLTNUMALLINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
                query.append(
                        "OR  ((((TO_NUMBER(regexp_replace(FLTNUMALLGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMALLLTEQ is  NULL AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR     (TO_NUMBER(regexp_replace(FLTNUMALLLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMALLGTEQ is  NULL AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR      ((TO_NUMBER(regexp_replace(FLTNUMALLGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND TO_NUMBER(regexp_replace(FLTNUMALLLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD OR regexp_replace(FLTNUMALLLTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) ))))");
                query.append(" ) ");
                // For applicable on any
                query.append(" AND(");

                query.append(
                        " (pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) ");
                query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
                query.append(
                        " OR (FLTNUMANYINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')");
                query.append(
                        "OR  ((((TO_NUMBER(regexp_replace(FLTNUMANYGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMANYLTEQ is  NULL AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR     (TO_NUMBER(regexp_replace(FLTNUMANYLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMANYGTEQ is  NULL AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR      ((TO_NUMBER(regexp_replace(FLTNUMANYGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND TO_NUMBER(regexp_replace(FLTNUMANYLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD OR regexp_replace(FLTNUMANYLTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) ))))");
                query.append(" ) ");
                query.append(" )");
                break;
            }
        } else {
            // if no booking exists then there is no chance of multilpe dayof
            // week at origin . So first element can be taken.
            // Also the same need to be checked against Origin
            if (shipmentVO.getDayOfWeekOrg() != null && shipmentVO.getDayOfWeekOrg().size() > 0) {
                query.append(" AND( ((ORGDAYOPR LIKE ?) ");
                query.append(" OR (ORGDAYOPR IS NULL)) ");
                query.append(" AND (DSTDAYOPR IS NULL)");
                query.append(" AND (VIADAYOPR IS NULL))");
                query.setParameter(++parcount, '%' + shipmentVO.getDayOfWeekOrg().iterator().next() + '%');
            } else {
                query.append(" AND (ORGDAYOPR IS NULL ) ");
            }
            if (shipmentVO.getApplicableTransaction() != null
                    && shipmentVO.getApplicableTransaction().trim().length() > 0
                    && APP_TRANSACTION_HAWB.equals(shipmentVO.getApplicableTransaction())) {
                query.append("	AND ORGSTRTIM is  NULL AND ORGENDTIM is NULL ");
                query.append("	AND DSTSTRTIM is  NULL AND DSTENDTIM is NULL ");
                query.append("	AND VIASTRTIM is  NULL AND VIAENDTIM is NULL ");
                query.append("	AND ALLSTRTIM is  NULL AND ALLENDTIM is NULL ");
                query.append("	AND ANYSTRTIM is  NULL AND ANYENDTIM is NULL ");
            }
        }
        query.append("	AND RULTYP='E' ");
        // Added By A-7533 regaridng ICRD-243965
        if (shipmentVO.isFromPrecheck()) {
            query.append("	AND CMPTYP='EMB' ");
        }

        query.append("	AND RECSTA='A' ");
        query.append("	AND SUSFLG<>'Y' ");
        if (shipmentVO.getApplicableTransaction() != null
                && shipmentVO.getApplicableTransaction().trim().length() > 0) {
            query.append(" AND (pkg_frmwrk.Fun_String_Check(?,APPTXN,',') >0) ");

            query.setParameter(++parcount, shipmentVO.getApplicableTransaction());
        }
        if (shipmentVO.getEmbargoLevel() != null && shipmentVO.getEmbargoLevel().trim().length() > 0) {
            query.append(" AND (pkg_frmwrk.Fun_String_Check(?,RECTYP,',') >0) ");
            query.setParameter(++parcount, shipmentVO.getEmbargoLevel());
        }
        if (TILDE.equals(shipmentVO.getSplitIndicator())) {
            query.append(" AND (SLTIND IS NULL) ");
        } else {
            query.append(" AND COALESCE(SLTIND,'Y')='Y' ");
        }
      //added by 202766 for IASCB-159851
        if (TILDE.equals(shipmentVO.getUnknownShipper()))
        {
        	query.append(UNKSHP_NULL_QUERY);
        }
        else {
           query.append(UNKSHP_QUERY);  
           query.setParameter(++parcount, shipmentVO.getUnknownShipper());
           query.setParameter(++parcount, shipmentVO.getUnknownShipper());
           }
        //ended
        query.append("AND SHR.SESIDR=? ");
        String sessionID = "";
        try {
            sessionID = (String) ContextUtils.getTxBusinessParameter("sessionID");
        } catch (SystemException e) {
            log.log(Log.SEVERE, "Exception Occured while getting session ID from Context>>>: " + e.getMessage());
        }
        query.setParameter(++parcount, sessionID);
        query.append(" ) reco");
        // query.append(" ORDER BY DECODE(RECTYP, 'E', 1, 'W', 2, 'I', 3,
        // 4),LSTUPDTIM DESC ");

        log.exiting("EmbargoRulesSqlDAO", "constructFilterQueryForSelectFlight");

    }
    /**
     *
     * 	Method		:	EmbargoRulesSqlDAO.populateTimeParameters
     *	Added by 	:	A-8146 on 11-Jun-2019
     * 	Used for 	:
     *	Parameters	:	@param rs
     *	Parameters	:	@param flag
     *	Parameters	:	@param rowName
     *	Parameters	:	@param set
     *	Parameters	:	@param now
     *	Parameters	:	@throws SQLException
     *	Return type	: 	void
     */
    private void populateTimeParameters(ResultSet rs,String flag,String rowName, Set<EmbargoParameterVO> set, String now) throws SQLException {
        EmbargoParameterVO embargoParameterVO = new EmbargoParameterVO();
        embargoParameterVO.setAplFlg(flag);
        embargoParameterVO.setParameterCode("TIM");
        embargoParameterVO.setApplicableLevel(rowName);
        embargoParameterVO.setParameterValues(rs.getString(rowName).substring(0, 5));
        embargoParameterVO.setEmbargoReferenceNumber(now);
        set.add(embargoParameterVO);
    }

    /**
     *
     * 	Method		:	EmbargoRulesSqlDAO.constructFilterQueryForSelectFlightPostgre
     *	Added by 	:	A-8146 on 01-Aug-2018
     * 	Used for 	:s
     *	Parameters	:	@param shipmentVO
     *	Parameters	:	@param query
     *	Parameters	:	@param parcount
     *	Return type	: 	void
     */
    private void constructFilterQueryForSelectFlightPostgre(ShipmentDetailsVO shipmentVO, Query query,
                                                            int parcount, String refNums) {

        String sysDate = "sysdate() ";
        String inStrShrStaQuery=",'dd-MON-yyyy ')|| (TO_CHAR(SHR.STA,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')";
        String inStrShrStdQuery=",'dd-MON-yyyy ')|| (TO_CHAR(SHR.STD,'HH24:MI:SS')),'dd-MON-yyyy HH24:MI:SS')";
        String instrShrStaQuery2=",'dd-MON-yyyy ')|| TO_CHAR(SHR.STA,'HH24:MI:SS'),'dd-MON-yyyy HH24:MI:SS')";
        String instrShrStdQuery2=",'dd-MON-yyyy ')|| TO_CHAR(SHR.STD,'HH24:MI:SS'),'dd-MON-yyyy HH24:MI:SS')";
        String instrTodateSegendTimStaQuery=TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2;
        String instrTodateSegendTimStdQuery=TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2;
        query.append(" WHERE REC.CMPCOD=? AND STRPOS(?,REC.REFNUM)>0");
        query.setParameter(++parcount, shipmentVO.getCompanyCode());
        query.setParameter(++parcount, refNums);
        query.append(" )REC ,CAPBKGFLTSRH SHR WHERE ");
        boolean isShipDatePresent = false;
        int dateCount = 0;
        if (shipmentVO.getShipmentDate() != null) {
            query.append("  ((TO_TIMESTAMP(?,'yyyy-mm-dd') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
            query.setParameter(++parcount, shipmentVO.getShipmentDate().toStringFormat(DATE_FORMAT).substring(0,10));
            isShipDatePresent = true;
        }
        if (shipmentVO.getBookingFlightDetailVOs() != null && !shipmentVO.getBookingFlightDetailVOs().isEmpty()) {
            if(isShipDatePresent){
                query.append(" OR SHR.STD BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT) ");
            }else{
                query.append(" SHR.STD BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT) ");
            }
        }
        if (isShipDatePresent || dateCount > 0) {
            query.append(") ");
        }
        if (shipmentVO.getMap() != null) {
            for (String parameterCode : shipmentVO.getMap().keySet()) {
                parcount = constructFilterQueryForFlight(shipmentVO, query, parcount, parameterCode);
            }
        }
        constructQuery(query);
        if (shipmentVO.getMap().containsKey(ShipmentDetailsVO.FLTNUM_ALL)) {
            constructFlightNumberAllQuery(shipmentVO, query);
        }
        if (shipmentVO.getMap().containsKey(ShipmentDetailsVO.FLTOWR_ALL)) {
            constructFlightOwnerAllQuery(shipmentVO, query);
        }
        if (shipmentVO.getBookingFlightDetailVOs() != null && !shipmentVO.getBookingFlightDetailVOs().isEmpty()) {
            query.append(AND);
            int flightCounter = 0;
            Set<String> carrierCodes = null;
            boolean isAndFlag = false;
            for (BookingFlightDetailVO bookingFlightDetailVO : shipmentVO.getBookingFlightDetailVOs()) {
                carrierCodes = new HashSet<>();

                if (flightCounter > 0) {
                    query.append(" OR");
                    isAndFlag = false;
                }
                query.append(" (");
                if (bookingFlightDetailVO.getCarrierOrigin() != null
                        && bookingFlightDetailVO.getCarrierOrigin().trim().length() > 0) {
                    if (isAndFlag) {
                        query.append(ANDSTRING);
                    }
                    isAndFlag = true;
                    query.append(
                            " coalesce (strpos (CARRORGINC,SHR.FLTCARCOD),0) >0 AND 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,CARRORGEXC,',')) ");
                    query.append(" OR(CARRORGINC IS NULL AND CARRORGEXC IS NULL) ");
                    query.append(
                            " OR (CARRORGINC='-' AND   1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,CARRORGEXC,',')) )");
                    carrierCodes.add(bookingFlightDetailVO.getCarrierOrigin());
                }
                if (!carrierCodes.isEmpty()) {
                    constructCarrierCodeQuery(query);
                }
                constructQueryTwo(query, sysDate, inStrShrStaQuery, inStrShrStdQuery);
                if(shipmentVO.getViaPointStation()!=null && !shipmentVO.getViaPointStation().isEmpty()){
                    constructViaStationQuery(query, sysDate, inStrShrStaQuery);
                }else{
                    query.append(" AND (VIASTRTIM IS NULL AND VIAENDTIM IS NULL) ");
                }
                constructQueryThree(query, sysDate, inStrShrStaQuery, inStrShrStdQuery);
                parcount = constructOriginDestinationFilterQuery(shipmentVO, query, parcount,
                        bookingFlightDetailVO);
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMSEGINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMSEGEXC,',')) ");
                query.append(" OR( FLTNUMSEGINC IS NULL AND FLTNUMSEGEXC IS NULL) ");
                query.append(" OR (FLTNUMSEGINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMSEGEXC,',')) )");
                query.append(" AND( FLTNUMSEGINC IS NULL AND FLTNUMSEGEXC IS NULL) ");
                constructDateQuery(query,bookingFlightDetailVO);
                constructTimeQuery(query, sysDate, instrShrStaQuery2, instrShrStdQuery2,
                        instrTodateSegendTimStaQuery, instrTodateSegendTimStdQuery, bookingFlightDetailVO);
                parcount = constructArrivalDepartureQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
                constructFilterQuery(query);
                if(flightCounter==0){//for sonar issue seems this loop is executed only once.. hence added condition
                    //need to revisit if any issues
                    break;
                }
            }
        } else {
            parcount = constructQueryTwo(shipmentVO, query, parcount);
        }
        constructQueryFinal(shipmentVO, query, parcount);
        query.append(" ) reco");
    }

    public void constructDateQuery(Query query, BookingFlightDetailVO bookingFlightDetailVO) {
        boolean arrivalmarked = false;
        boolean departuremarked = false;
        if (bookingFlightDetailVO.getDateDestination() != null) {
            arrivalmarked = true;
            query.append(" AND ((SEGDSTDAYOPR IS NOT NULL) AND (pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'),',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATEXC,',')) ");
            query.append(" OR ( SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
            query.append(" OR (SEGDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATEXC,',')) OR (SEGDSTDAYOPR IS NULL))  ");
        }
        if (bookingFlightDetailVO.getDateOrigin() != null) {
            departuremarked = true;
            query.append(" AND ((SEGORGDAYOPR IS NOT NULL) AND (pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATEXC,',')) ");
            query.append(" OR ( SEGDATINC IS NULL AND SEGDATEXC IS NULL) ");
            query.append(" OR (SEGDATINC='-' AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATEXC,',')) OR (SEGORGDAYOPR IS NULL))");
        }
        if (bookingFlightDetailVO.getDateViaPoint() != null || bookingFlightDetailVO.getArrivalTimeAtDestination() != null) {
            if(bookingFlightDetailVO.getDateViaPoint() != null && !departuremarked){
                query.append(" AND ((SEGORGDAYOPR IS NOT NULL) AND (pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATEXC,',')) ");
                query.append(" OR ( SEGDATINC IS NULL AND SEGDATEXC IS NULL ) ");
                query.append(" OR (SEGDATINC='-' AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STD,'dd-mm-yy'),SEGDATEXC,',')) OR (SEGORGDAYOPR IS NULL))");
            }
            if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null &&!arrivalmarked){
                query.append(" AND ((SEGDSTDAYOPR IS NOT NULL) AND (pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATEXC,',')) ");
                query.append(" OR ( SEGDATINC IS NULL AND SEGDATEXC IS NULL ) ");
                query.append(" OR (SEGDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),SEGDATEXC,',')) OR SEGDSTDAYOPR IS NULL)");
            }
        }
    }

    public void constructTimeQuery(Query query, String sysDate, String instrShrStaQuery2, String instrShrStdQuery2,
                                   String instrTodateSegendTimStaQuery, String instrTodateSegendTimStdQuery,
                                   BookingFlightDetailVO bookingFlightDetailVO) {
        boolean arrivalmarked;
        boolean departuremarked;
        arrivalmarked=false;
        departuremarked=false;
        if (bookingFlightDetailVO.getTimeOrigin() != null) {
            departuremarked=true;
            // case 1: eq
            query.append(AND_QUERY);
            query.append(" (SEGORGDAYOPR IS NOT NULL ) AND (TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =  TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2);
            query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =  TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2+"))");
            // case 2
            query.append(instrTodateSegendTimStdQuery);
            query.append(" AND SEGSTRTIM is NULL AND SEGENDTIM is not NULL ))");
            // case 3
            query.append(TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS')  <=  TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2);
            query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL ) )");
            // case 4
            query.append(instrTodateSegendTimStdQuery);
            query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<=TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2+" )) ");
            query.append("  OR (SEGSTRTIM is NULL AND SEGENDTIM is NULL) )) OR (SEGORGDAYOPR IS NULL) )");
        }
        if(bookingFlightDetailVO.getTimeDestination() != null){
            arrivalmarked=true;
            // case 1: eq
            query.append(AND_QUERY);
            query.append("(SEGDSTDAYOPR IS NOT NULL ) AND (TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS')  = TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2);
            query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') =  TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2+"))");
            // case 2
            query.append(instrTodateSegendTimStaQuery);
            query.append(" AND SEGSTRTIM is NULL AND SEGENDTIM is not NULL ))");
            // case 3
            query.append(TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2);
            query.append(" AND SEGENDTIM is  NULL  AND SEGSTRTIM is not NULL ))");
            // case 4
            query.append(instrTodateSegendTimStaQuery);
            query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<=TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2+" )) ");
            query.append("  OR(SEGSTRTIM is NULL AND SEGENDTIM is NULL) ) ) OR (SEGDSTDAYOPR IS NULL))");
        }
        if(bookingFlightDetailVO.getTimeViaPoint() != null || bookingFlightDetailVO.getArrivalTimeAtDestination()!=null) {
            // case 1: eq
            if(bookingFlightDetailVO.getTimeViaPoint() != null && !departuremarked){
                constructTimePointQuery(query, sysDate, instrShrStdQuery2,
                        instrTodateSegendTimStdQuery);
            }
            if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null && !arrivalmarked){
                query.append(AND_QUERY);
                query.append(" (SEGDSTDAYOPR IS NOT NULL ) AND (TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2);
                query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2+"))");
                // case 2
                query.append(instrTodateSegendTimStaQuery);
                query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL ))");
                // case 3
                query.append(TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2);
                query.append(" AND SEGENDTIM is NULL AND SEGSTRTIM is not NULL ))");
                // case 4
                query.append(instrTodateSegendTimStaQuery);
                query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+instrShrStaQuery2+" )) ");
                query.append("  OR( SEGSTRTIM is  NULL AND SEGENDTIM is NULL) )) OR (SEGDSTDAYOPR IS NULL))");
            }
        }
    }

    public void constructTimePointQuery(Query query, String sysDate, String instrShrStdQuery2,
                                        String instrTodateSegendTimStdQuery) {
        query.append(AND_QUERY);
        query.append(" (SEGORGDAYOPR IS NOT NULL ) AND (TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2);
        query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| TO_CHAR(SHR.STD,'HH24:MI:SS'),'dd-MON-yyyy HH24:MI:SS')))");
        // case 2
        query.append(instrTodateSegendTimStdQuery);
        query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is not NULL ) )");
        // case 3
        query.append(TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=  TO_TIMESTAMP(to_char("+sysDate+instrShrStdQuery2);
        query.append(" AND SEGENDTIM is  NULL AND SEGSTRTIM is not NULL) )");
        // case 4
        query.append(instrTodateSegendTimStdQuery);
        query.append(AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <=  TO_TIMESTAMP(to_char("+sysDate+",'dd-MON-yyyy ')|| TO_CHAR(SHR.STD,'HH24:MI:SS'),'dd-MON-yyyy HH24:MI:SS') )) ");
        query.append("  OR(SEGSTRTIM is NULL AND SEGENDTIM is NULL) )) OR (SEGORGDAYOPR IS NULL))");
    }

    public void constructQueryFinal(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        query.append(" AND RULTYP='E' ");
        if (shipmentVO.isFromPrecheck()) {
            query.append(" AND CMPTYP='EMB' ");
        }
        query.append(" AND RECSTA='A' ");
        query.append(" AND SUSFLG<>'Y' ");
        if (shipmentVO.getApplicableTransaction() != null && shipmentVO.getApplicableTransaction().trim().length() > 0) {
            query.append(" AND (pkg_frmwrk.fun_check_string_common(?,APPTXN,',') >0) ");
            query.setParameter(++parcount, shipmentVO.getApplicableTransaction());
        }
        if (shipmentVO.getEmbargoLevel() != null && shipmentVO.getEmbargoLevel().trim().length() > 0) {
            query.append(" AND (pkg_frmwrk.fun_check_string_common(?,RECTYP,',') >0) ");
            query.setParameter(++parcount, shipmentVO.getEmbargoLevel());
        }
        if (TILDE.equals(shipmentVO.getSplitIndicator())) {
            query.append(" AND ( SLTIND IS NULL) ");
        } else {
            query.append(" AND COALESCE(SLTIND,'Y') ='Y' ");
        }
      //added by 202766 for IASCB-159851 
        if (TILDE.equals(shipmentVO.getUnknownShipper()))
        {
        	query.append(UNKSHP_NULL_QUERY);
        }
        else {
           query.append(UNKSHP_QUERY);  
           query.setParameter(++parcount, shipmentVO.getUnknownShipper());
           query.setParameter(++parcount, shipmentVO.getUnknownShipper());
           }
        //ended
        query.append("AND SHR.SESIDR=? ");
        String sessionID = "";
        try {
            sessionID = (String) ContextUtils.getTxBusinessParameter("sessionID");
        } catch (SystemException e) {
            log.log(Log.SEVERE, "Exception Occured while getting session ID from Context>>>: " + e);
        }
        query.setParameter(++parcount, sessionID);
    }

    public void constructFilterQuery(Query query) {
        query.append("  )");
        query.append(
                " AND ((pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGEXC,',')) ");
        query.append(" OR (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL ) ");
        query.append(
                " OR (FLTNUMORGINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMORGEXC,',')) ");
        query.append(
                "OR  ((((TO_NUMBER(regexp_replace(FLTNUMORGGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) "
                        + " AND FLTNUMORGLTEQ is  NULL AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) "
                        + "OR     (TO_NUMBER(regexp_replace(FLTNUMORGLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMORGGTEQ is  NULL"
                        + " AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) "
                        + "OR      ((TO_NUMBER(regexp_replace(FLTNUMORGGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  "
                        + "AND TO_NUMBER(regexp_replace(FLTNUMORGLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD"
                        + " OR regexp_replace(FLTNUMORGLTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) ))))");
        query.append(")");

        query.append(
                " AND ((pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTEXC,',')) ");
        query.append(" OR (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL ) ");
        query.append(
                " OR (FLTNUMDSTINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMDSTEXC,',')) ");
        query.append(
                "OR  ((((TO_NUMBER(regexp_replace(FLTNUMDSTGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMDSTLTEQ is  NULL AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR     (TO_NUMBER(regexp_replace(FLTNUMDSTLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMDSTGTEQ is  NULL AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR      ((TO_NUMBER(regexp_replace(FLTNUMDSTGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND TO_NUMBER(regexp_replace(FLTNUMDSTLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD OR regexp_replace(FLTNUMDSTLTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) ))))");
        query.append(")");

        query.append(" AND (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL ) ");

        // For applicable on all
        query.append(AND);

        query.append(
                " (pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
        query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL ) ");
        query.append(
                " OR (FLTNUMALLINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
        query.append(
                "OR  ((((TO_NUMBER(regexp_replace(FLTNUMALLGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMALLLTEQ is  NULL AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR     (TO_NUMBER(regexp_replace(FLTNUMALLLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMALLGTEQ is  NULL AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR      ((TO_NUMBER(regexp_replace(FLTNUMALLGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND TO_NUMBER(regexp_replace(FLTNUMALLLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD OR regexp_replace(FLTNUMALLLTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) ))))");
        query.append(" ) ");
        // For applicable on any
        query.append(AND);

        query.append(
                " (pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYINC,',') >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) ");
        query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL ) ");
        query.append(
                " OR (FLTNUMANYINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')");
        query.append(
                "OR  ((((TO_NUMBER(regexp_replace(FLTNUMANYGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMANYLTEQ is  NULL AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR     (TO_NUMBER(regexp_replace(FLTNUMANYLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND FLTNUMANYGTEQ is  NULL AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD))OR      ((TO_NUMBER(regexp_replace(FLTNUMANYGTEQ, '[^0-9]', ''))<=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', ''))  AND TO_NUMBER(regexp_replace(FLTNUMANYLTEQ, '[^0-9]', ''))>=TO_NUMBER(regexp_replace(SHR.FLTNUM, '[^0-9]', '')) AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '')=SHR.FLTCARCOD OR regexp_replace(FLTNUMANYLTEQ, '[^A-Z]', '')=SHR.FLTCARCOD)) ))))");
        query.append(" ) ");
        query.append(" )");
    }

    public int constructArrivalDepartureQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                              BookingFlightDetailVO bookingFlightDetailVO) {
        boolean arrivalmarked = false;
        boolean departuremarked = false;
        constructQueryOne(query);
        if (bookingFlightDetailVO.getFlightType() != null && bookingFlightDetailVO.getFlightType().trim().length() > 0) {
            parcount = constructFlightType(query, parcount, bookingFlightDetailVO);
        }
        else {
            query.append(" AND (FLTTYPSEGINC IS NULL AND FLTTYPSEGEXC IS NULL ) ");
        }
        query.append(ANDSTRING);
        query.append(" ((pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,FLTOWRSEGINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,FLTOWRSEGEXC,',')) ");
        query.append(" OR (FLTOWRSEGINC IS NULL AND FLTOWRSEGEXC IS NULL ) ");
        query.append(" OR (FLTOWRSEGINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,FLTOWRSEGEXC,',')) )");
        query.append(" AND (FLTOWRSEGINC IS NULL AND FLTOWRSEGEXC IS NULL ) ");
        String airinegroup= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getFlightCarrierCode(),ShipmentDetailsVO.AIRLINE_GRP);
        if (airinegroup != null	&& airinegroup.trim().length() > 0) {
            parcount = constructAirlineGroup(query, parcount, airinegroup);
        }
        else {
            query.append(" AND (ARLGRPSEGINC IS NULL AND ARLGRPSEGEXC IS NULL ) ");
        }
        if (bookingFlightDetailVO.getDayOfWeekOrg()!=null && bookingFlightDetailVO.getDayOfWeekOrg().trim().length() > 0) {
            String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
            String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
            String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
            departuremarked=true;
            query.append(SEGORGDAYOPR_QUERY);
            query.append("AND (SHR.STD BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
            query.append(" OR (SEGORGDAYOPR IS NULL)) AND ((STRPOS(SEGORGARPCODINC,SHR.SEGORG)>0 OR STRPOS(SEGORGARPCODEXC , SHR.SEGORG) = 0 ) ");
            if(airportGrp!=null){
                query.append(STRPOS_SEGORGARPGRPINC_QUERY);
            }
            if(country!=null){
                query.append(STRPOS_SEGORGCNTCODINC_QUERY);
            }
            if(countryGrp!=null){
                query.append(STRPOS_SEGORGCNTGRPINC_QUERY);
            }
            query.append(SEGORGARPCODINC_QUERY);
            query.append(")");
            query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekOrg() + '%');
            if(airportGrp!=null){
                query.setParameter(++parcount,airportGrp);
                query.setParameter(++parcount,airportGrp);
            }
            if(country!=null){
                query.setParameter(++parcount,country);
                query.setParameter(++parcount,country);
            }
            if(countryGrp!=null){
                query.setParameter(++parcount,countryGrp);
                query.setParameter(++parcount,countryGrp);
            }
        }
        if (bookingFlightDetailVO.getDayOfWeekDst()!=null && bookingFlightDetailVO.getDayOfWeekDst().trim().length() > 0) {
            arrivalmarked=true;
            String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
            String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
            String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
            query.append(AND_SEGDSTDAYOPR_QUERY);
            query.append("AND (SHR.STA BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
            query.append(SEGDSTDAYOPR_QUERY);
            query.append(" AND ((STRPOS(SEGDSTARPCODINC,SHR.SEGDST)>0 OR STRPOS(SEGDSTARPCODEXC , SHR.SEGDST) = 0 )  ");
            if(airportGrp!=null){
                query.append(STRPOS_SEGDSTARPGRPINC_QUERY);
            }
            if(country!=null){
                query.append(STRPOS_SEGDSTCNTCODINC_QUERY);
            }
            if(countryGrp!=null){
                query.append(STRPOS_SEGDSTCNTGRPINC_QUERY);
            }
            query.append(SEGDSTARPCODINC_QUERY);
            query.append(")");
            query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekDst() + '%');
            if(airportGrp!=null){
                query.setParameter(++parcount,airportGrp);
                query.setParameter(++parcount,airportGrp);
            }
            if(country!=null){
                query.setParameter(++parcount,country);
                query.setParameter(++parcount,country);
            }
            if(countryGrp!=null){
                query.setParameter(++parcount,countryGrp);
                query.setParameter(++parcount,countryGrp);
            }
        }
        if (!arrivalmarked && (bookingFlightDetailVO.getArrivalTimeAtDestination()!=null || bookingFlightDetailVO.getFlightDate()!=null)) {
            parcount = constructArrivalQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
        }
        if (!departuremarked && (bookingFlightDetailVO.getDepartureTimeAtOrigin()!=null || bookingFlightDetailVO.getFlightDate()!=null)) {
            parcount = constructQueryDeparture(shipmentVO, query, parcount, bookingFlightDetailVO);
        }
        return parcount;
    }

    public void constructQueryOne(Query query) {
        query.append(ANDSTRING);
        query.append(" ((pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,CARRSEGINC,',') >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,CARRSEGEXC,',')) ");
        query.append(" OR (CARRSEGINC IS NULL AND CARRSEGEXC IS NULL ) ");
        query.append(" OR (CARRSEGINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,CARRSEGEXC,',')) )");
        query.append(" AND (CARRSEGINC IS NULL AND CARRSEGEXC IS NULL ) ");
    }

    public int constructAirlineGroup(Query query, int parcount, String airinegroup) {
        query.append(ANDSTRING);
        query.append(" ((pkg_frmwrk.fun_check_string_common(?,ARLGRPSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPSEGEXC,',')) ");
        query.append(" OR (ARLGRPSEGINC IS NULL AND ARLGRPSEGEXC IS NULL ) ");
        query.append(" OR (ARLGRPSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPSEGEXC,',')) )");
        query.setParameter(++parcount, airinegroup);
        query.setParameter(++parcount, airinegroup);
        query.setParameter(++parcount, airinegroup);
        query.setParameter(++parcount, airinegroup);
        query.setParameter(++parcount, airinegroup);
        return parcount;
    }

    public int constructFlightType(Query query, int parcount, BookingFlightDetailVO bookingFlightDetailVO) {
        query.append(ANDSTRING);
        query.append(" ((pkg_frmwrk.fun_check_string_common(?,FLTTYPSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPSEGEXC,',')) ");
        query.append(" OR (FLTTYPSEGINC IS NULL AND FLTTYPSEGEXC IS NULL ) ");
        query.append(" OR (FLTTYPSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPSEGEXC,',')) )");
        query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
        query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
        query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
        query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
        query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
        return parcount;
    }

    public int constructOriginDestinationFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                     BookingFlightDetailVO bookingFlightDetailVO) {

        String orgCountry = getTypeValue(shipmentVO.getTypeMap(), bookingFlightDetailVO.getOrigin(),
                ShipmentDetailsVO.COUNTRY);
        query.append("  OR ( (ORGARPCODINC IS NULL OR ORGARPCODINC ='-')");
        if (orgCountry != null && orgCountry.trim().length() > 0) {
            query.append("OR (STRPOS(ORGCNTCODINC,?)>0 OR STRPOS(ORGCNTCODEXC , ?) = 0 )  ");
            query.setParameter(++parcount, orgCountry);
            query.setParameter(++parcount, orgCountry);
        } else {
            query.append(" (ORGCNTCODINC IS NULL OR ORGCNTCODINC ='-')  ");
        }

        if (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() > 0) {
            query.append(AND);
            query.append(" pkg_frmwrk.fun_check_string_common(?,REC.ORGCNTGRPINC,',')  >0 "
                    + "OR ");
            query.setParameter(++parcount,shipmentVO.getOrgCntGrp());
            query.append("ORGCNTGRPINC = '-'");
            query.append(")");
        } else {
            query.append( " AND (ORGCNTGRPINC IS NULL OR ORGCNTGRPINC = '-') ");
        }
        if(shipmentVO.getOrgArpGrp()!=null && shipmentVO.getOrgArpGrp().trim().length() > 0 ){
            query.append(AND);
            query.append(" pkg_frmwrk.fun_check_string_common(?,REC.ORGARPGRPINC,',')  >0 "
                    + "OR ");
            query.setParameter(++parcount,shipmentVO.getOrgArpGrp());
            query.append("ORGARPGRPINC = '-'");
            query.append(")");
        }else{
            query.append(" AND (ORGARPGRPINC IS NULL OR ORGARPGRPINC='-') ");
        }
        query.append("))");
        query.append(" AND (((STRPOS(DSTARPCODINC,SHR.SHPDST)>0 OR STRPOS(DSTARPCODEXC , SHR.SHPDST) = 0 )  ");
        query.append("OR (STRPOS(DSTARPGRPINC,SHR.SHPDST)>0 OR STRPOS(DSTARPGRPEXC , SHR.SHPDST) = 0 ) ");

        query.append(
                "  OR ( (DSTARPCODINC IS NULL OR DSTARPCODINC ='-')  ");
        String dstCountry = getTypeValue(shipmentVO.getTypeMap(), bookingFlightDetailVO.getDestination(),
                ShipmentDetailsVO.COUNTRY);
        if (dstCountry != null && dstCountry.trim().length() > 0) {
            query.append("OR (STRPOS(DSTCNTCODINC,?)>0 OR STRPOS(DSTCNTCODINC , ?) = 0 )  ");
            query.setParameter(++parcount, dstCountry);
            query.setParameter(++parcount, dstCountry);
        } else {
            query.append(" (DSTCNTCODINC IS NULL OR DSTCNTCODINC ='-')");
        }
        if (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() > 0) {

            query.append(AND);

            query.append(" pkg_frmwrk.fun_check_string_common(?,REC.DSTCNTGRPINC,',')  >0 "
                    + "OR ");
            query.setParameter(++parcount,shipmentVO.getDstCntGrp());

            query.append("DSTCNTGRPINC = '-'");
            query.append(")");
        } else {
            query.append( " AND (DSTCNTGRPINC IS NULL OR DSTCNTGRPINC = '-') ");
        }
        if(shipmentVO.getDstArpGrp()!=null && shipmentVO.getDstArpGrp().trim().length() > 0 ){
            String[] splitArray = shipmentVO.getDstArpGrp().split(",");
            query.append(AND);
            for (int i = 0; i < splitArray.length; i++) {
                query.append(" pkg_frmwrk.fun_check_string_common(?,REC.DSTARPGRPINC,',')  >0 "
                        + "OR ");
                query.setParameter(++parcount, splitArray[i]);
            }
            query.append("DSTARPGRPINC = '-'");
            query.append(")");
        }else{
            query.append(" AND (DSTARPGRPINC IS NULL OR DSTARPGRPINC='-') ");
        }
        query.append(")))");
        constructQueryTwo(query);

        if (bookingFlightDetailVO.getOrigin()!= null
                && bookingFlightDetailVO.getOrigin().trim().length() > 0 ) {
            parcount = constructOriginQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
        } else {
            query.append("  AND ( ( SEGORGARPCODINC IS NULL OR SEGORGARPCODINC ='-' ) AND  (SEGORGCNTCODINC IS NULL OR SEGORGCNTCODINC ='-') AND (SEGORGARPGRPINC IS NULL OR SEGORGARPGRPINC='-')  AND (SEGORGCNTGRPINC IS NULL OR SEGORGCNTGRPINC = '-') ) ");
        }
        if (bookingFlightDetailVO.getDestination()!= null
                && bookingFlightDetailVO.getDestination().trim().length() > 0 ) {
            parcount = constructDestinationFilterQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
        } else {
            query.append("  AND ( ( SEGDSTARPCODINC IS NULL OR SEGDSTARPCODINC ='-' ) AND  (SEGDSTCNTCODINC IS NULL OR SEGDSTCNTCODINC ='-') AND (SEGDSTARPGRPINC IS NULL OR SEGDSTARPGRPINC='-')  AND (SEGDSTCNTGRPINC IS NULL OR SEGDSTCNTGRPINC = '-') ) ");
        }
        return parcount;
    }

    public void constructQueryTwo(Query query) {
        query.append(" AND (  CASE    WHEN ALLDAYOPR IS NOT NULL    "
                + "THEN      CASE        WHEN (STRPOS(ALLDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ALLDAYOPR)) > 0        "
                + "AND STRPOS(ALLDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ALLDAYOPR)) > 0         "
                + "AND STRPOS(ALLDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST <> SHR.SHPDST)       "
                + " THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ALLDAYOPR)) > 0       "
                + " AND STRPOS(ALLDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA)) END),ALLDAYOPR)) > 0)       "
                + " THEN 1        ELSE 0      END    " + "WHEN ANYDAYOPR IS NOT NULL    "
                + "THEN      CASE        WHEN (STRPOS(ANYDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ANYDAYOPR)) > 0 "
                + "OR STRPOS(ANYDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ANYDAYOPR)) > 0     "
                + "OR STRPOS(ANYDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST <> SHR.SHPDST)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ANYDAYOPR)) > 0      "
                + "OR STRPOS(ANYDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA)) END),ANYDAYOPR)) > 0)        "
                + "THEN 1        ELSE 0      END " + "WHEN ORGDAYOPR IS NOT NULL    "
                + "THEN      CASE        WHEN STRPOS(ORGDAYOPR, COALESCE((CASE WHEN (SHR.SEGORG = SHR.SHPORG)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),ORGDAYOPR)) > 0        "
                + "THEN 1        ELSE 0      END  " + "WHEN VIADAYOPR IS NOT NULL    "
                + "THEN      CASE        WHEN STRPOS(VIADAYOPR, COALESCE((CASE WHEN (SHR.SEGORG <> SHR.SHPORG)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STD)) END),VIADAYOPR)) > 0        "
                + "THEN 1        ELSE 0      END  " + "WHEN DSTDAYOPR IS NOT NULL    "
                + "THEN      CASE        WHEN STRPOS(DSTDAYOPR, COALESCE((CASE WHEN (SHR.SEGDST = SHR.SHPDST)        "
                + "THEN TO_CHAR(Pkg_Cap_Flt_Cmb.FUN_FLT_CMB_GET_DAY(SHR.CMPCOD,SHR.STA)) END),DSTDAYOPR)) > 0       "
                + "THEN 1        ELSE 0      END    ELSE 1  END   = 1) ");
    }

    public int constructDestinationFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                       BookingFlightDetailVO bookingFlightDetailVO) {
        String dstairportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
        String dstcountry= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
        String dstcountryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
        query.append("  AND ((");
        query.append(" (pkg_frmwrk.fun_check_string_common(SHR.SEGDST,SEGDSTARPCODINC,',') >0  OR SEGDSTARPCODINC ='-') ");
        if(dstairportGrp != null && dstairportGrp.trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGDSTARPGRPINC,',')  >0 OR SEGDSTARPGRPINC   ='-') ");
            query.setParameter(++parcount, dstairportGrp);
        }
        if(dstcountry != null && dstcountry.trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGDSTCNTCODINC,',')  >0 OR SEGDSTCNTCODINC   ='-') ");
            query.setParameter(++parcount, dstcountry);
        }
        if(dstcountryGrp != null && dstcountryGrp.trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGDSTCNTGRPINC,',')  >0 OR SEGDSTCNTGRPINC   ='-') ");
            query.setParameter(++parcount, dstcountryGrp);
        }
        //org exclude
        query.append(" ) AND NOT( ");
        query.append(" pkg_frmwrk.fun_check_string_common(SHR.SEGDST,SEGDSTARPCODEXC,',')>0 ");
        if(dstairportGrp != null && dstairportGrp.trim().length() >0 ){
            query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGDSTARPGRPEXC,',')      >0 ");
            query.setParameter(++parcount, dstairportGrp);
        }
        if(dstcountry != null && dstcountry.trim().length() >0 ){
            query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGDSTCNTCODEXC,',')        >0 ");
            query.setParameter(++parcount, dstcountry);
        }
        if(dstcountryGrp != null && dstcountryGrp.trim().length() >0 ){
            query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGDSTCNTGRPEXC,',')      >0 ");
            query.setParameter(++parcount, dstcountryGrp);
        }
        query.append(" ) ");
        query.append(" ) ");
        return parcount;
    }

    public void constructQuery(Query query) {
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPORGINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPORGEXC,',')) ");
        query.append(" OR ( ACRTYPORGINC IS NULL AND ACRTYPORGEXC IS NULL) ");
        query.append(" OR (ACRTYPORGINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPORGEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPDSTINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPDSTEXC,',')) ");
        query.append(" OR ( ACRTYPDSTINC IS NULL AND ACRTYPDSTEXC IS NULL) ");
        query.append(" OR (ACRTYPDSTINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPDSTEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPVIAINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPVIAEXC,',')) ");
        query.append(" OR ( ACRTYPVIAINC IS NULL AND ACRTYPVIAEXC IS NULL) ");
        query.append(" OR (ACRTYPVIAINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPVIAEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPALLINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPALLEXC,',')) ");
        query.append(" OR ( ACRTYPALLINC IS NULL AND ACRTYPALLEXC IS NULL) ");
        query.append(" OR (ACRTYPALLINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPALLEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPANYINC,',')  >0 AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPANYEXC,',')) ");
        query.append(" OR ( ACRTYPANYINC IS NULL AND ACRTYPANYEXC IS NULL) ");
        query.append(" OR (ACRTYPANYINC='-' AND regexp_count(SHR.ACRTYP, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYP,ACRTYPANYEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPORGINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPORGEXC,',')) ");
        query.append(" OR ( ACRTYPGRPORGINC IS NULL AND ACRTYPGRPORGEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPORGINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPORGEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPDSTINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPDSTEXC,',')) ");
        query.append(" OR ( ACRTYPGRPDSTINC IS NULL AND ACRTYPGRPDSTEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPDSTINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPDSTEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPVIAINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPVIAEXC,',')) ");
        query.append(" OR ( ACRTYPGRPVIAINC IS NULL AND ACRTYPGRPVIAEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPVIAINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPVIAEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPALLINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPALLEXC,',')) ");
        query.append(" OR ( ACRTYPGRPALLINC IS NULL AND ACRTYPGRPALLEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPALLINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPALLEXC,',')) )");
        query.append(" AND ((pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPANYINC,',')  >0 AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPANYEXC,',')) ");
        query.append(" OR ( ACRTYPGRPANYINC IS NULL AND ACRTYPGRPANYEXC IS NULL) ");
        query.append(" OR (ACRTYPGRPANYINC='-' AND regexp_count(SHR.ACRTYPGRPEMB, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.ACRTYPGRPEMB,ACRTYPGRPANYEXC,',')) )");
    }

    public int constructOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                    BookingFlightDetailVO bookingFlightDetailVO) {
        query.append(AND);
        String orgairportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
        String orgcountry= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
        String orgcountryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
        query.append("   ( ( ");
        query.append(" (coalesce (strpos (SEGORGARPCODINC,SHR.SEGORG),0) >0  OR SEGORGARPCODINC ='-') ");
        if(orgairportGrp != null && orgairportGrp.trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGORGARPGRPINC,',')  >0 OR SEGORGARPGRPINC   ='-') ");
            query.setParameter(++parcount, orgairportGrp);
        }
        if(orgcountry != null && orgcountry.trim().length() >0 ){
            query.append(" OR (coalesce (strpos (SEGORGCNTCODINC,?),0)  >0 OR SEGORGCNTCODINC   ='-') ");
            query.setParameter(++parcount, orgcountry);
        }
        if(orgcountryGrp != null && orgcountryGrp.trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGORGCNTGRPINC,',')  >0 OR SEGORGCNTGRPINC   ='-') ");
            query.setParameter(++parcount, orgcountryGrp);
        }
        //org exclude
        query.append(" ) AND NOT( ");
        query.append(" coalesce (strpos (SEGORGARPCODEXC,SHR.SEGORG),0) >0 ");
        if(orgairportGrp != null && orgairportGrp.trim().length() >0 ){
            query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGORGARPGRPEXC,',')      >0 ");
            query.setParameter(++parcount, orgairportGrp);
        }
        if(orgcountry != null && orgcountry.trim().length() >0 ){
            query.append(" OR coalesce (strpos(SEGORGCNTCODEXC,?) ,0)       >0 ");
            query.setParameter(++parcount, orgcountry);
        }
        if(orgcountryGrp != null && orgcountryGrp.trim().length() >0 ){
            query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGORGCNTGRPEXC,',')      >0 ");
            query.setParameter(++parcount, orgcountryGrp);
        }
        query.append(" ) ");
        query.append(" ) ");
        return parcount;
    }

    public void constructQueryThree(Query query, String sysDate, String inStrShrStaQuery, String inStrShrStdQuery) {
        query.append(AND);

        query.append(" (((( ");
        query.append(
                INSTR_TO_TIMESTAMP+sysDate+",'dd-MON-yyyy ')|| ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery+" ))");
        // case 2
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
        query.append(" AND ALLSTRTIM is  NULL AND ALLENDTIM is not NULL ))");
        // case 3
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
        query.append(" AND ALLENDTIM is  NULL AND ALLSTRTIM is not NULL ))");
        // case 4
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery+" ))");
        query.append("  OR(ALLSTRTIM is  NULL AND ALLENDTIM is NULL ) )))");

        query.append(" ) ");
        // For applicable on any
        query.append(AND);

        query.append(" (((( ");
        query.append(
                INSTR_TO_TIMESTAMP+sysDate+",'dd-MON-yyyy ')|| ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+"))");
        // case 2
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(" AND ANYSTRTIM is  NULL AND ANYENDTIM is not NULL ))");
        // case 3
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(" AND ANYENDTIM is  NULL AND ANYSTRTIM is not NULL ))");
        // case 4
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+" ))");
        query.append("  OR(ANYSTRTIM is  NULL AND ANYENDTIM is NULL ) )))");

        query.append(" ) ");
        query.append(
                " AND ((pkg_frmwrk.fun_check_string_common((TO_CHAR(SHR.STD,'dd-mm-yy')),ORGDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STD,'dd-mm-yy'),ORGDATEXC,',') ");
        query.append(" OR (ORGDATINC IS NULL AND ORGDATEXC IS NULL ) ");
        query.append(
                " OR (ORGDATINC='-' AND regexp_count(TO_CHAR(SHR.STD,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STD,'dd-mm-yy'),ORGDATEXC,',' )");

        query.append(")))");// Added by A-8146
        query.append(" AND (VIADATINC IS NULL AND VIADATEXC IS NULL ) ");
        query.append(
                " AND ((pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATEXC,',')) ");
        query.append(" OR (DSTDATINC IS NULL AND DSTDATEXC IS NULL ) ");
        query.append(
                " OR (DSTDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),DSTDATEXC,',') )");

        query.append(")");// Added by A-8146
        query.append(AND);

        query.append(
                " (pkg_frmwrk.fun_check_string_common((TO_CHAR(SHR.STA,'dd-mm-yy')),ALLDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),ALLDATEXC,',')) ");
        query.append(" OR (ALLDATINC IS NULL AND ALLDATEXC IS NULL ) ");
        query.append(
                " OR (ALLDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),ALLDATEXC,',') )");

        query.append(" ) ");
        // For applicable on any
        query.append(AND);

        query.append(
                " (pkg_frmwrk.fun_check_string_common((TO_CHAR(SHR.STA,'dd-mm-yy')),ANYDATINC,',')  >0 AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),ANYDATEXC,',')) ");
        query.append(" OR (ANYDATINC IS NULL AND ANYDATEXC IS NULL ) ");
        query.append(
                " OR (ANYDATINC='-' AND regexp_count(TO_CHAR(SHR.STA,'dd-mm-yy'), ',') + 1 > pkg_frmwrk.fun_check_string_common(TO_CHAR(SHR.STA,'dd-mm-yy'),ANYDATEXC,',' ))");

        query.append(" ) ");

        query.append("AND ((STRPOS(ORGARPCODINC,SHR.SEGORG)>0 OR STRPOS(ORGARPCODEXC , SHR.SEGORG) = 0 ) ");
        query.append("OR (STRPOS(ORGARPGRPINC,SHR.SEGORG)>0 OR STRPOS(ORGARPGRPEXC , SHR.SEGORG) = 0 ) ");
    }

    public void constructViaStationQuery(Query query, String sysDate, String inStrShrStaQuery) {
        query.append(AND_QUERY);
        query.append(
                INSTR_TO_TIMESTAMP+sysDate+",'dd-MON-yyyy ')|| VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+"))");
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(" AND VIASTRTIM is  NULL AND VIAENDTIM is not NULL ))");
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(" AND VIAENDTIM is  NULL AND VIASTRTIM is not NULL ))");
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+" ))");
        query.append("  OR(VIASTRTIM is  NULL AND VIAENDTIM is NULL ) )))");
    }

    public void constructQueryTwo(Query query, String sysDate, String inStrShrStaQuery, String inStrShrStdQuery) {
        query.append("AND");// Added by A-8146
        query.append(
                "  ((coalesce (strpos (ARLCODINC,SHR.FLTCARCOD),0) >0 AND NOT coalesce (strpos (ARLCODEXC,SHR.FLTCARCOD),0) >0) ");

        query.append(" OR (ARLCODINC IS NULL AND ARLCODEXC IS NULL ) ");
        query.append(
                " OR (ARLCODINC='-' AND NOT pkg_frmwrk.Fun_String_Check(SHR.FLTCARCOD,ARLCODEXC,',') >0) )");

        query.append(
                " AND ((coalesce (strpos (FLTNUMINC,SHR.FLTCARCOD||'~'||SHR.FLTNUM),0) >0 AND" +
                        " NOT coalesce (strpos (FLTNUMEXC,SHR.FLTCARCOD||'~'||SHR.FLTNUM),0) >0) ");

        query.append(" OR (FLTNUMINC IS NULL AND FLTNUMEXC IS NULL ) ");
        query.append(
                " OR (FLTNUMINC='-' AND NOT coalesce (strpos (FLTNUMEXC,SHR.FLTCARCOD||'~'||SHR.FLTNUM),0) >0) )");

        // case 1: eq
        query.append(AND_QUERY);
        query.append(
                INSTR_TO_TIMESTAMP+ sysDate +",'dd-MON-yyyy ')|| ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+ sysDate+inStrShrStdQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery+"))");
        // case 2
        query.append(
                TO_DATE_CONVERSION+sysDate +",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
        query.append(" AND ORGSTRTIM is  NULL AND ORGENDTIM is not NULL ))");
        // case 3
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
        query.append(" AND ORGENDTIM is  NULL AND ORGSTRTIM is not NULL ))");
        // case 4
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStdQuery+" )) ");
        query.append("  OR ( ORGSTRTIM is  NULL AND ORGENDTIM is NULL) )))");

        // case 1: eq
        query.append(AND_QUERY);
        query.append(
                INSTR_TO_TIMESTAMP+sysDate+",'dd-MON-yyyy ')|| DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+"))");
        // case 2
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(" AND DSTSTRTIM is  NULL AND DSTENDTIM is not NULL ))");
        // case 3
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(" AND DSTENDTIM is  NULL AND DSTSTRTIM is not NULL ))");
        // case 4
        query.append(
                TO_DATE_CONVERSION+sysDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery);
        query.append(
                AND_TO_DATE_QUERY+sysDate+",'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') <= TO_TIMESTAMP(to_char("+sysDate+inStrShrStaQuery+" ))");
        query.append("  OR(DSTSTRTIM is  NULL AND DSTENDTIM is NULL ) )))");
    }

    public void constructCarrierCodeQuery(Query query) {
        // For applicable on all
        query.append(" AND( ( ");
        query.append(
                " (coalesce (strpos (CARRALLINC,SHR.FLTCARCOD),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,CARRALLEXC,',')) ");

        query.append(" ) OR ( ");
        query.append(
                " (CARRALLINC='-' AND ( 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,CARRALLEXC,','))) ");

        query.append(" ) OR( CARRALLINC IS NULL AND CARRALLEXC IS NULL) ) ");

        // For applicable on any
        query.append(" AND( ( ");
        query.append(
                " (coalesce (strpos (CARRANYINC,SHR.FLTCARCOD),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,CARRANYEXC,',')) ");

        query.append(" ) OR ( ");
        query.append(
                " (CARRANYINC='-' AND ( 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,CARRANYEXC,','))) ");

        query.append(" ) OR( CARRANYINC IS NULL AND CARRANYEXC IS NULL) ) ");
    }

    public int constructArrivalQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                     BookingFlightDetailVO bookingFlightDetailVO) {
        String dowdst  = String.valueOf(bookingFlightDetailVO
                .getArrivalTimeAtDestination()!=null?(bookingFlightDetailVO
                .getArrivalTimeAtDestination().get(
                        Calendar.DAY_OF_WEEK) - 1):(bookingFlightDetailVO
                .getFlightDate().get(
                        Calendar.DAY_OF_WEEK) - 1));
        if("0".equals(dowdst)){
            dowdst="7";
        }
        String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
        String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
        String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
        query.append(AND_SEGDSTDAYOPR_QUERY);
        query.append("AND (SHR.STA BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
        query.append(SEGDSTDAYOPR_QUERY);
        query.append(" AND ((STRPOS(SEGDSTARPCODINC,SHR.SEGDST)>0 OR STRPOS(SEGDSTARPCODEXC , SHR.SEGDST) = 0 )  ");
        if(airportGrp!=null){
            query.append(STRPOS_SEGDSTARPGRPINC_QUERY);
        }
        if(country!=null){
            query.append(STRPOS_SEGDSTCNTCODINC_QUERY);
        }
        if(countryGrp!=null){
            query.append(STRPOS_SEGDSTCNTGRPINC_QUERY);
        }
        query.append(SEGDSTARPCODINC_QUERY);
        query.append(")");
        query.setParameter(++parcount,'%' + dowdst + '%');
        if(airportGrp!=null){
            query.setParameter(++parcount,airportGrp);
            query.setParameter(++parcount,airportGrp);
        }
        if(country!=null){
            query.setParameter(++parcount,country);
            query.setParameter(++parcount,country);
        }
        if(countryGrp!=null){
            query.setParameter(++parcount,countryGrp);
            query.setParameter(++parcount,countryGrp);
        }
        return parcount;
    }

    public int constructQueryDeparture(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                       BookingFlightDetailVO bookingFlightDetailVO) {
        String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
        String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
        String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
        String dowdep  = String.valueOf(bookingFlightDetailVO
                .getDepartureTimeAtOrigin()!=null?(bookingFlightDetailVO
                .getDepartureTimeAtOrigin().get(
                        Calendar.DAY_OF_WEEK) - 1):(bookingFlightDetailVO
                .getFlightDate().get(
                        Calendar.DAY_OF_WEEK) - 1));
        if("0".equals(dowdep)){
            dowdep="7";
        }
        query.append(SEGORGDAYOPR_QUERY);
        query.append("AND (SHR.STD BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
        query.append(" OR (SEGORGDAYOPR IS NULL)) AND ((STRPOS(SEGORGARPCODINC,SHR.SEGORG)>0 OR STRPOS(SEGORGARPCODEXC , SHR.SEGORG) = 0 ) ");
        if(airportGrp!=null){
            query.append(STRPOS_SEGORGARPGRPINC_QUERY);
        }
        if(country!=null){
            query.append(STRPOS_SEGORGCNTCODINC_QUERY);
        }
        if(countryGrp!=null){
            query.append(STRPOS_SEGORGCNTGRPINC_QUERY);
        }
        query.append(SEGORGARPCODINC_QUERY);
        query.append(")");
        query.setParameter(++parcount,'%' + dowdep + '%');
        if(airportGrp!=null){
            query.setParameter(++parcount,airportGrp);
            query.setParameter(++parcount,airportGrp);
        }
        if(country!=null){
            query.setParameter(++parcount,country);
            query.setParameter(++parcount,country);
        }
        if(countryGrp!=null){
            query.setParameter(++parcount,countryGrp);
            query.setParameter(++parcount,countryGrp);
        }
        return parcount;
    }

    public int constructFilterQueryForFlight(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                             String parameterCode) {

        if (ShipmentDetailsVO.MAIL_CLASS.equals(parameterCode)) {
            parcount = constructMailClassQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.MAIL_CATEGORY.equals(parameterCode)) {
            parcount = constructMailCategoryQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.MAIL_SUB_CLS.equals(parameterCode)) {
            parcount = constructMailSubClassQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.MAIL_SUB_CLS_GRP.equals(parameterCode)) {
            parcount = constructMailSubClassGroupQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.SHARED_CARRIER.equals(parameterCode)) {
            parcount = constructSharedCarrierQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.CARRIER_ORG.equals(parameterCode)) {
            parcount = constructCarrierOriginQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.CARRIER_DST.equals(parameterCode)) {
            parcount = constructCarrierDestinationQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.CARRIER_VIA.equals(parameterCode)) {
            parcount = constructCarrierViaQuery(shipmentVO, query, parcount, parameterCode);
        }else if (ShipmentDetailsVO.SHARED_COMMODITY.equals(parameterCode)) {
            parcount = constructSharedCommodityQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.PKGINS.equals(parameterCode)) {
            parcount = constructPackageInstructionQuery(shipmentVO, query, parcount, parameterCode);
        }else if (ShipmentDetailsVO.SHARED_SCC.equals(parameterCode)) {
            parcount = constructSharedSCCQuery(shipmentVO, query, parcount, parameterCode);
        }  else if(ShipmentDetailsVO.AGENT.equals(parameterCode)){
            parcount = constructAgentQuery(shipmentVO, query, parcount, parameterCode);
        }  else if(ShipmentDetailsVO.SHIPPER.equals(parameterCode)){
            parcount = constructShipperQuery(shipmentVO, query, parcount, parameterCode);
        }  else if(ShipmentDetailsVO.CONSIGNEE.equals(parameterCode)){
            parcount = constructConsigneeQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.SHARED_PAYTYP.equals(parameterCode)) {
            parcount = constructPayTypeQuery(shipmentVO, query, parcount, parameterCode);
        }else if(ShipmentDetailsVO.AIRCRAFT_CLASS_ORIGIN.equals(parameterCode)){
            parcount = constructAircraftClassOriginQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_DESTINATION.equals(parameterCode)){
            parcount = constructAircraftClassDestinationQuery(shipmentVO, query, parcount,parameterCode);
        } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_VIA_POINT.equals(parameterCode)){
            parcount = constructAircraftClassViaQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_ALL.equals(parameterCode)) {
            parcount = constructAircraftClassificationQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.SHARED_FLTNUM.equals(parameterCode)) {
            parcount = constructFlightNumberQuery(shipmentVO, query, parcount, parameterCode);
        }else if (ShipmentDetailsVO.FLTNUM_VIA.equals(parameterCode)) {
            parcount = constructFlightNumberViaQuery(shipmentVO, query, parcount, parameterCode);
        }else if (ShipmentDetailsVO.PRODUCT.equals(parameterCode)) {
            parcount = constructProductQuery(shipmentVO, query, parcount, parameterCode);
        }else if(ShipmentDetailsVO.DV_CARRIAGE.equals(parameterCode)){
            parcount = constructDVCarriageQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.GOODS.equals(parameterCode)) {
            parcount = constructGoodsQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.AWB_PREFIX.equals(parameterCode)) {
            parcount = constructAWBPrefixQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.FLTOWR.equals(parameterCode)) {
            parcount = constructFlightOwnerQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.FLTTYPE.equals(parameterCode)) {
            parcount = constructFltTypeQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.FLTTYPE_ORG.equals(parameterCode)) {
            parcount = constructFligthTypeOriginQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.FLTTYPE_DST.equals(parameterCode)) {
            parcount = constructFligthTypeDestinationQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.FLTTYPE_VIA.equals(parameterCode)) {
            parcount = constructFligthTypeViaQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.FLTTYPE_ALL.equals(parameterCode)) {
            parcount = constructFlightTypeQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.SCC_GROUP.equals(parameterCode)) {
            parcount = constructSCCGroupQuery(shipmentVO, query, parcount, parameterCode);
        }else if(ShipmentDetailsVO.AGENTGRP.equals(parameterCode)){
            parcount = constructAgentGroupQuery(shipmentVO, query, parcount, parameterCode);
        }else if(ShipmentDetailsVO.SHIPPER_GROUP.equals(parameterCode)){
            parcount = constructShipperGroupQuery(shipmentVO, query, parcount, parameterCode);
        }else if(ShipmentDetailsVO.CONSIGNEE_GROUP.equals(parameterCode)){
            parcount = constructConsigneeGroupQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.FLTOWR_ORG.equals(parameterCode)) {
            parcount = constructFlightOwnerOriginQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.FLTOWR_DST.equals(parameterCode)) {
            parcount = constructFlightOwnerDestinationQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.FLTOWR_VIA.equals(parameterCode)) {
            parcount = constructFlightOwnerViaQuery(shipmentVO, query, parcount, parameterCode);
        }else if (ShipmentDetailsVO.AIRLINE_GRP.equals(parameterCode)) {
            parcount = constructAirlineGroupQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.AIRLINE_GRP_ORG.equals(parameterCode)) {
            parcount = constructAirlineGroupOriginQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.AIRLINE_GRP_DST.equals(parameterCode)) {
            parcount = constructAirlineGroupDstQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.AIRLINE_GRP_VIA.equals(parameterCode)) {
            parcount = constructAirlineGroupViaQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.AIRLINE_GRP_ALL.equals(parameterCode)) {
            parcount = constructAirlineGroupAllQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.UN_NUMBER.equals(parameterCode)) {
            parcount = constructUNNumberQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.HEIGHT.equals(parameterCode)) {
            parcount = constructHeightQuery(shipmentVO, query, parcount, parameterCode);
        }else if(ShipmentDetailsVO.SERVICE_CARGO_CLASS.equals(parameterCode)){
            parcount = constructServiceCargoClassQuery(shipmentVO, query, parcount, parameterCode);
        }else if(ShipmentDetailsVO.SHIPMENT_TYPE.equals(parameterCode)){
            parcount = constructShipmentTypeQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.SERVICE_TYPE_FOR_TECHNICAL_STOP.equals(parameterCode)) {
            parcount = constructServiceTypeForTechnicalStopQuery(shipmentVO, query, parcount, ShipmentDetailsVO.SERVICE_TYPE_FOR_TECHNICAL_STOP);
		} else if (ShipmentDetailsVO.UNID_PACKGING_GROUP.equals(parameterCode)) {
			parcount = constructUnidPackgingGroupQuery(shipmentVO, query, parcount, parameterCode);
		} else if (ShipmentDetailsVO.UNID_SUB_RISK.equals(parameterCode)) {
			parcount = constructUnidSubRiskQuery(shipmentVO, query, parcount, parameterCode);
		}
        else{
            parcount = constructQueryForFlight(shipmentVO, query, parcount, parameterCode);
        }
        return parcount;
    }

    public int constructQueryForFlight(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {

        if(ShipmentDetailsVO.UNIDs.equals(parameterCode)){
            parcount = constructUNIDQuery(shipmentVO, query, parcount, parameterCode);
        }else if (ShipmentDetailsVO.LENGTH.equals(parameterCode)) {
            parcount = constructLengthQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.WIDTH.equals(parameterCode)) {
            parcount = constructWidthQuery(shipmentVO, query, parcount, parameterCode);
        }else if(ShipmentDetailsVO.DV_CUSTOMS.equals(parameterCode)){
            parcount = constructDVCustomsQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.WEIGHT.equals(parameterCode)) {
            parcount = constructWeightQuery(shipmentVO, query, parcount, parameterCode);
        } else if (ShipmentDetailsVO.PER_PIECE_WEIGHT.equals(parameterCode)) {
            parcount = constructPerPieceWeightQuery(shipmentVO, query, parcount, parameterCode);
        }else if("ULD".equals(parameterCode)){
            parcount = constructULDQuery(shipmentVO, query, parcount, parameterCode);
        }else if("VOL".equals(parameterCode)){
            parcount = constructVolumeQuery(shipmentVO, query, parcount, parameterCode);
        }else{
            //nothing to do
        }
        return parcount;
    }

    public int constructQueryTwo(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        // if no booking exists then there is no chance of multilpe dayof
        // week at origin . So first element can be taken.
        // Also the same need to be checked against Origin
        if (shipmentVO.getDayOfWeekOrg() != null && !shipmentVO.getDayOfWeekOrg().isEmpty()) {
            query.append(" AND( (( ORGDAYOPR LIKE ?) ");
            query.append(" OR ( ORGDAYOPR IS NULL)) ");
            query.append(" AND ( DSTDAYOPR IS NULL)");
            query.append(" AND ( VIADAYOPR IS NULL))");
            query.setParameter(++parcount, '%' + shipmentVO.getDayOfWeekOrg().iterator().next() + '%');
        } else {
            query.append(" AND (ORGDAYOPR IS NULL) ");
        }
        if (shipmentVO.getApplicableTransaction() != null
                && shipmentVO.getApplicableTransaction().trim().length() > 0
                && APP_TRANSACTION_HAWB.equals(shipmentVO.getApplicableTransaction())) {
            query.append(" AND ORGSTRTIM is  NULL AND ORGENDTIM is NULL ");
            query.append(" AND DSTSTRTIM is  NULL AND DSTENDTIM is NULL ");
            query.append(" AND VIASTRTIM is  NULL AND VIAENDTIM is NULL ");
            query.append(" AND ALLSTRTIM is  NULL AND ALLENDTIM is NULL ");
            query.append(" AND ANYSTRTIM is  NULL AND ANYENDTIM is NULL ");
        }
        return parcount;
    }

    public void constructFlightOwnerAllQuery(ShipmentDetailsVO shipmentVO, Query query) {
        if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTOWR_ALL).contains(TILDE)) {
            query.append(" AND(FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
        } else {
            query.append(
                    " AND ((pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,FLTOWRALLINC,',')  >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,FLTOWRALLEXC,',')) ");
            query.append(" OR(FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
            query.append(
                    " OR (FLTOWRALLINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,FLTOWRALLEXC,',')) )");

        }
        if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTOWR_ALL).contains(TILDE)) {
            query.append(" AND (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
        } else {

            query.append(
                    " AND ((pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,FLTOWRANYINC,',')  >0 AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,FLTOWRANYEXC,',')) ");
            query.append(" OR(FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
            query.append(
                    " OR (FLTOWRANYINC='-' AND regexp_count(SHR.FLTCARCOD, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD,FLTOWRANYEXC,',')) )");

        }
    }

    public void constructFlightNumberAllQuery(ShipmentDetailsVO shipmentVO, Query query) {
        if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTNUM_ALL).contains(TILDE)) {
            query.append(" AND (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
        } else {
            query.append(
                    " AND ((pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLINC,',')  >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) ");
            query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL ) ");
            query.append(
                    " OR (FLTNUMALLINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMALLEXC,',')) )");

        }

        if (shipmentVO.getMap().get(ShipmentDetailsVO.FLTNUM_ALL).contains(TILDE)) {
            query.append(" ( FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
        } else {

            query.append(
                    "AND ((pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYINC,',')  >0 AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) ");
            query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL ) ");
            query.append(
                    " OR (FLTNUMANYINC='-' AND regexp_count(SHR.FLTCARCOD||'~'||SHR.FLTNUM, ',') + 1 > pkg_frmwrk.fun_check_string_common(SHR.FLTCARCOD||'~'||SHR.FLTNUM,FLTNUMANYEXC,',')) )");

        }
    }

    public int constructFlightOwnerViaQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                            String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(FLTOWRVIAINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTOWRVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRVIAEXC,',')) ");
                query.append(" OR(FLTOWRVIAINC IS NULL AND FLTOWRVIAEXC IS NULL) ");
                query.append(" OR (FLTOWRVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRVIAEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructFlightOwnerDestinationQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                    String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(FLTOWRDSTINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTOWRDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRDSTEXC,',')) ");
                query.append(" OR(FLTOWRDSTINC IS NULL AND FLTOWRDSTEXC IS NULL) ");
                query.append(" OR (FLTOWRDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRDSTEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructFlightOwnerOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                               String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(FLTOWRORGINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTOWRORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRORGEXC,',')) ");
                query.append(" OR(FLTOWRORGINC IS NULL AND FLTOWRORGEXC IS NULL) ");
                query.append(" OR (FLTOWRORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRORGEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructConsigneeGroupQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                            String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(CNSGRPINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,CNSGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,CNSGRPEXC,',')) ");
                query.append(" OR(CNSGRPINC IS NULL AND CNSGRPEXC IS NULL ) ");
                query.append(" OR (CNSGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,CNSGRPEXC,',')) )");

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructShipperGroupQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                          String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(SHPGRPINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,SHPGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SHPGRPEXC,',')) ");
                query.append(" OR(SHPGRPINC IS NULL AND SHPGRPEXC IS NULL ) ");
                query.append(" OR (SHPGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SHPGRPEXC,',')) )");

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructAgentGroupQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (AGTGRPINC IS NULL  OR AGTGRPINC='-') ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,AGTGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,AGTGRPEXC,',')) ");
                query.append(" OR(AGTGRPINC IS NULL AND AGTGRPEXC IS NULL ) ");
                query.append(" OR (AGTGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,AGTGRPEXC,',')) )");

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructSCCGroupQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(SCCGRPINC IS NULL OR SCCGRPINC='-' ) ");
            } else {
            String[] split = parameterValue.split(",");
            query.append(AND);
            int i= 0;
            for(String value : split) {

                if (i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;
                query.append("(");
                query.append("  ((coalesce (strpos (SCCGRPINC,?),0)  >0 AND  " +
                        "1 > pkg_frmwrk.fun_check_string_common(?,SCCGRPEXC,',')) ");
                    query.append(" OR(SCCGRPINC IS NULL AND SCCGRPEXC IS NULL AND SCCGRPEXCIF IS NULL) ");
                query.append(" OR (SCCGRPINC='-' AND 1 > pkg_frmwrk.fun_check_string_common(?,SCCGRPEXC,',')) ");
                query.append(" OR (SCCGRPINC IS NULL AND NOT pkg_frmwrk.fun_check_string_common(?,SCCGRPEXCIF,',') >0)) ) ");
                query.setParameter(++parcount, value.toUpperCase(Locale.ROOT));
                query.setParameter(++parcount, value.toUpperCase(Locale.ROOT));
                query.setParameter(++parcount, value.toUpperCase(Locale.ROOT));
                query.setParameter(++parcount, value.toUpperCase(Locale.ROOT));

            }
            query.append(")");
            }
        }
        return parcount;
    }

    public int constructFligthTypeViaQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                           String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(FLTTYPVIAINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTTYPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPVIAEXC,',')) ");
                query.append(" OR(FLTTYPVIAINC IS NULL AND FLTTYPVIAEXC IS NULL) ");
                query.append(" OR (FLTTYPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPVIAEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructFligthTypeDestinationQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                   String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(FLTTYPDSTINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTTYPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPDSTEXC,',')) ");
                query.append(" OR(FLTTYPDSTINC IS NULL AND FLTTYPDSTEXC IS NULL) ");
                query.append(" OR (FLTTYPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPDSTEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructFligthTypeOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                              String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(FLTTYPORGINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTTYPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPORGEXC,',')) ");
                query.append(" OR ( FLTTYPORGINC IS NULL AND FLTTYPORGEXC IS NULL) ");
                query.append(" OR (FLTTYPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPORGEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructFltTypeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (FLTTYP IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTTYP,',')  >0 ) ");
                query.append(" OR (FLTTYP IS NULL)) ");
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructAirlineGroupQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                          String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ARLGRPINC IS NULL OR ARLGRPINC='-' ) ");
            } else {
                query.append(
                        " AND ((pkg_frmwrk.fun_check_string_common(?,ARLGRPINC,',')  >0 AND NOT pkg_frmwrk.fun_check_string_common(?,ARLGRPEXC,',')  >0) ");
                query.append(" OR (ARLGRPINC IS NULL AND ARLGRPEXC IS NULL) ");
                query.append(
                        " OR (ARLGRPINC='-' AND NOT pkg_frmwrk.fun_check_string_common(?,ARLGRPEXC,',')  >0) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructAirlineGroupOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ARLGRPORGINC IS NULL OR ARLGRPORGINC='-' ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ARLGRPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPORGEXC,',')) ");
                query.append(" OR(ARLGRPORGINC IS NULL AND ARLGRPORGEXC IS NULL) ");
                query.append(" OR (ARLGRPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPORGEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructAirlineGroupDstQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                             String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ARLGRPDSTINC IS NULL or ARLGRPDSTINC='-' ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ARLGRPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPDSTEXC,',')) ");
                query.append(" OR(ARLGRPDSTINC IS NULL AND ARLGRPDSTEXC IS NULL) ");
                query.append(" OR (ARLGRPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPDSTEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructAirlineGroupViaQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                             String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ARLGRPVIAINC IS NULL OR ARLGRPVIAINC='-' ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ARLGRPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPVIAEXC,',')) ");
                query.append(" OR(ARLGRPVIAINC IS NULL AND ARLGRPVIAEXC IS NULL) ");
                query.append(" OR (ARLGRPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPVIAEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructAirlineGroupAllQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                             String parameterCode) {
        int count;
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" AND(ARLGRPALLINC IS NULL AND ARLGRPALLEXC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ARLGRPALLINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPALLEXC,',')) ");
                query.append(" OR(ARLGRPALLINC IS NULL AND ARLGRPALLEXC IS NULL) ");
                query.append(" OR (ARLGRPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPALLEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);

                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
        }
        count = 0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" ( ARLGRPANYINC IS NULL AND ARLGRPANYEXC IS NULL) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(" ((pkg_frmwrk.fun_check_string_common(?,ARLGRPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPANYEXC,',')) ");
                query.append(" OR(ARLGRPANYINC IS NULL AND ARLGRPANYEXC IS NULL) ");
                query.append(" OR (ARLGRPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPANYEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);

                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");
        return parcount;
    }

    public int constructUNNumberQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(UNDNUMINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,UNDNUMINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,UNDNUMEXC,',')) ");
                query.append(" OR(UNDNUMINC IS NULL AND UNDNUMEXC IS NULL) ");
                query.append(" OR (UNDNUMINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,UNDNUMEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructHeightQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(HGTSTR IS NULL AND HGTEND IS NULL) ");
            } else {
                int heightCounter = 0;
                query.append(AND);
                for (String height : parameterValue.split(",")) {
                    if (heightCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" ((((HGTSTR =? AND HGTEND =? )");
                    query.append(" OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND HGTSTR is  NULL)");
                    query.append(" OR (TO_NUMBER(HGTSTR)<=TO_NUMBER(?)  AND HGTEND is  NULL)");
                    query.append(" OR(HGTSTR IS NULL AND HGTEND IS NULL) ");
                    query.append(" OR (TO_NUMBER(HGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(HGTSTR)<=TO_NUMBER(?) ))))");
                    query.setParameter(++parcount, height);
                    query.setParameter(++parcount, height);
                    query.setParameter(++parcount, height);
                    query.setParameter(++parcount, height);
                    query.setParameter(++parcount, height);
                    query.setParameter(++parcount, height);

                    ++heightCounter;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }

    public int constructServiceCargoClassQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                               String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND( SRVCRGCLSINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,SRVCRGCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SRVCRGCLSEXC,',')) ");
                query.append(" OR ( SRVCRGCLSINC IS NULL AND SRVCRGCLSEXC IS NULL) ");
                query.append(" OR (SRVCRGCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SRVCRGCLSEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);


                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructShipmentTypeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                          String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( SHPTYPINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,SHPTYPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SHPTYPEXC,',')) ");
                query.append(" OR ( SHPTYPINC IS NULL AND SHPTYPEXC IS NULL) ");
                query.append(" OR (SHPTYPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SHPTYPEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);


                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructUNIDQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( UNCLSINC IS NULL) ");
            } else {
                int unidCounter=0;
                query.append(AND);
                for (String unid : parameterValue.split(",")) {
                    if (unidCounter > 0) {
                        query.append(" OR ");
                    }
                    REGEX.matcher(unid).replaceAll(EMPTY);
                    query.append(" ((pkg_frmwrk.fun_check_string_common(?,UNCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,UNCLSEXC,',')) ");
                    query.append(" OR ( UNCLSINC IS NULL AND UNCLSEXC IS NULL) ");
                    query.append(" OR (UNCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,UNCLSEXC,',')) )");
                    parcount++;
                    query.setParameter(parcount, unid);
                    parcount++;
                    query.setParameter(parcount, unid);

                    parcount++;
                    query.setParameter(parcount, unid);
                    parcount++;
                    query.setParameter(parcount, unid);
                    parcount++;
                    query.setParameter(parcount, unid);
                    ++unidCounter;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }

    public int constructLengthQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( LENSTR IS NULL AND LENEND IS NULL) ");
            } else {
                int lengthCounter = 0;
                query.append(AND);
                for (String length : parameterValue.split(",")) {
                    if (lengthCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" (((( LENSTR =? AND LENEND =?)");
                    query.append(" OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND LENSTR is  NULL)");
                    query.append(" OR (TO_NUMBER(LENSTR)<=TO_NUMBER(?)  AND LENEND is  NULL)");
                    query.append(" OR ( LENSTR IS NULL AND LENEND IS NULL) ");
                    query.append(" OR (TO_NUMBER(LENEND)>=TO_NUMBER(?)  AND TO_NUMBER(LENSTR)<=TO_NUMBER(?) ))))");
                    query.setParameter(++parcount, length);
                    query.setParameter(++parcount, length);
                    query.setParameter(++parcount, length);
                    query.setParameter(++parcount, length);
                    query.setParameter(++parcount, length);
                    query.setParameter(++parcount, length);
                    ++lengthCounter;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }

    public int constructWidthQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( WIDSTR IS NULL AND WIDEND IS NULL) ");
            } else {
                int widthCounter = 0;
                query.append(AND);
                for (String width : parameterValue.split(",")) {
                    if (widthCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" (((( WIDSTR =? AND WIDEND =?)");
                    query.append(" OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?)  AND WIDSTR is  NULL)");
                    query.append(" OR (TO_NUMBER(WIDSTR)<=TO_NUMBER(?) AND WIDEND is  NULL)");
                    query.append(" OR ( WIDSTR IS NULL AND WIDEND IS NULL) ");
                    query.append(" OR (TO_NUMBER(WIDEND)>=TO_NUMBER(?) AND TO_NUMBER(WIDSTR)<=TO_NUMBER(?) ))))");
                    query.setParameter(++parcount, width);
                    query.setParameter(++parcount, width);
                    query.setParameter(++parcount, width);
                    query.setParameter(++parcount, width);
                    query.setParameter(++parcount, width);
                    query.setParameter(++parcount, width);
                    ++widthCounter;
                }
                query.append(" ) ");
            }
        }
//Added by A-8445 for ICRD-331530 Starts
        return parcount;
    }

    public int constructWeightQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( WGTSTR IS NULL AND WGTEND IS NULL) ");
            } else {
                int weightCounter = 0;
                query.append(AND);
                for (String weight : parameterValue.split(",")) {
                    if (weightCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" (((( WGTSTR =? AND WGTEND =?)");
                    query.append(" OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?)  AND WGTSTR is  NULL)");
                    query.append(" OR (TO_NUMBER(WGTSTR)<=TO_NUMBER(?)  AND WGTEND is  NULL)");
                    query.append(" OR ( WGTSTR IS NULL AND WGTEND IS NULL) ");
                    query.append(" OR (TO_NUMBER(WGTEND)>=TO_NUMBER(?) AND TO_NUMBER(WGTSTR)<=TO_NUMBER(?) ))))");
                    query.setParameter(++parcount, weight);
                    query.setParameter(++parcount, weight);
                    query.setParameter(++parcount, weight);
                    query.setParameter(++parcount, weight);
                    query.setParameter(++parcount, weight);
                    query.setParameter(++parcount, weight);
                    ++weightCounter;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }

    public int constructPerPieceWeightQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( PERPCSWGTSTR IS NULL AND PERPCSWGTEND IS NULL) ");
            } else {
                int weightCounter = 0;
                query.append(AND);
                for (String perPieceWeight : parameterValue.split(",")) {
                    if (weightCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" (((( PERPCSWGTSTR =? AND PERPCSWGTEND =?)");
                    query.append(" OR (TO_NUMBER(PERPCSWGTEND)>=TO_NUMBER(?)  AND PERPCSWGTSTR is  NULL)");
                    query.append(" OR (TO_NUMBER(PERPCSWGTSTR)<=TO_NUMBER(?)  AND PERPCSWGTEND is  NULL)");
                    query.append(" OR ( PERPCSWGTSTR IS NULL AND PERPCSWGTEND IS NULL) ");
                    query.append(" OR (TO_NUMBER(PERPCSWGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(PERPCSWGTSTR)<=TO_NUMBER(?) ))))");
                    query.setParameter(++parcount, perPieceWeight);
                    query.setParameter(++parcount, perPieceWeight);
                    query.setParameter(++parcount, perPieceWeight);
                    query.setParameter(++parcount, perPieceWeight);
                    query.setParameter(++parcount, perPieceWeight);
                    query.setParameter(++parcount, perPieceWeight);
                    ++weightCounter;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }

    public int constructULDQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(ULDINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ULDINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ULDEXC,',')) ");
                query.append(" OR ( ULDINC IS NULL AND ULDEXC IS NULL) ");
                query.append(" OR (ULDINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ULDEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructVolumeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(VOLSTR IS NULL AND VOLEND IS NULL) ");
            } else {
                int volumeCounter = 0;
                query.append(AND);
                for (String volume : parameterValue.split(",")) {
                    if (volumeCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" (((( VOLSTR =? AND VOLEND =?)");
                    query.append(" OR (TO_NUMBER(VOLEND)>=TO_NUMBER(?)  AND VOLSTR is  NULL)");
                    query.append(" OR (TO_NUMBER(VOLSTR)<=TO_NUMBER(?)  AND VOLEND is  NULL)");
                    query.append(" OR ( VOLSTR IS NULL AND VOLEND IS NULL) ");
                    query.append(" OR (TO_NUMBER(VOLEND)>=TO_NUMBER(?)  AND TO_NUMBER(VOLSTR)<=TO_NUMBER(?) ))))");
                    query.setParameter(++parcount,volume);
                    query.setParameter(++parcount,volume);
                    query.setParameter(++parcount,volume);
                    query.setParameter(++parcount,volume);
                    query.setParameter(++parcount,volume);
                    query.setParameter(++parcount,volume);
                    ++volumeCounter;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }

    public int constructFlightOwnerQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                         String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (FLTOWRINC IS NULL) ");
            } else {
                query.append(
                        " AND ((pkg_frmwrk.fun_check_string_common(?,FLTOWRINC,',')  >0 AND NOT pkg_frmwrk.fun_check_string_common(?,FLTOWREXC,',')  >0) ");
                query.append(" OR (FLTOWRINC IS NULL AND FLTOWREXC IS NULL) ");
                query.append(
                        " OR (FLTOWRINC='-' AND NOT pkg_frmwrk.fun_check_string_common(?,FLTOWREXC,',')  >0) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructAWBPrefixQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(AWBPFXINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,AWBPFXINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,AWBPFXEXC,',')) ");
                query.append(" OR ( AWBPFXINC IS NULL AND AWBPFXEXC IS NULL) ");
                query.append(" OR (AWBPFXINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,AWBPFXEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructGoodsQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( NATINC IS NULL) ");
            } else {
                query.append(" AND (( pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATEXC),',')) ");
                query.append(" OR ( NATINC IS NULL AND NATEXC IS NULL) ");
                query.append(" OR ( NATINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(NATEXC),',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructProductQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( PRDINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,PRDINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,PRDEXC,',')) ");
                query.append(" OR ( PRDINC IS NULL AND PRDEXC IS NULL) ");
                query.append(" OR (PRDINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,PRDEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructFlightNumberViaQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                             String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (FLTNUMVIAINC IS NULL) ");
            } else {

                query.append(
                        " AND ((pkg_frmwrk.fun_check_string_common(?,FLTNUMVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMVIAEXC,',')) ");
                query.append(
                        " OR(FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL AND FLTNUMVIAGTEQ IS NULL AND FLTNUMVIALTEQ IS NULL ) ");
                query.append(
                        " OR (FLTNUMVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMVIAEXC,',')))");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructFlightNumberQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                          String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (FLTNUMINC IS NULL) ");
            } else {
                query.append(
                        " AND ((pkg_frmwrk.fun_check_string_common(?,FLTNUMINC,',')  >0 AND NOT pkg_frmwrk.fun_check_string_common(?,FLTNUMEXC,',')  >0) ");
                query.append(" OR (FLTNUMINC IS NULL AND FLTNUMEXC IS NULL ) ");
                query.append(
                        " OR (FLTNUMINC='-' AND NOT pkg_frmwrk.fun_check_string_common(?,FLTNUMEXC,',')  >0) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructAircraftClassViaQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                              String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND( ACRCLSVIAINC IS NULL) ");
            } else if(parameterValue!=null){
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ACRCLSVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSVIAEXC,',')) ");
                query.append(" OR( ACRCLSVIAINC IS NULL AND ACRCLSVIAEXC IS NULL) ");
                query.append(" OR (ACRCLSVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSVIAEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);


                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }else{
                //nothing to do
            }
        }
        return parcount;
    }

    public int constructAircraftClassDestinationQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                      String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND( ACRCLSDSTINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ACRCLSDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSDSTEXC,',')) ");
                query.append(" OR( ACRCLSDSTINC IS NULL AND ACRCLSDSTEXC IS NULL) ");
                query.append(" OR (ACRCLSDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSDSTEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);


                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructAircraftClassOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                 String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND( ACRCLSORGINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ACRCLSORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSORGEXC,',')) ");
                query.append(" OR( ACRCLSORGINC IS NULL AND ACRCLSORGEXC IS NULL) ");
                query.append(" OR (ACRCLSORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSORGEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);


                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructPayTypeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(PAYTYPINC IS NULL) ");
            } else {
                String[] split = parameterValue.split(",");
                query.append(AND);
                int i= 0;
                for(String value : split) {

                    if (i != 0) {
                        query.append(OR_WITHOUT_BRAKET);
                    }
                    i++;
                    query.append("(");
                    query.append("  ((coalesce (strpos (PAYTYPINC,?),0)  >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,PAYTYPEXC,',')) ");
                query.append(" OR(PAYTYPINC IS NULL AND PAYTYPEXC IS NULL) ");
                    query.append(" OR (PAYTYPINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,PAYTYPEXC,',')) ))");
                    query.setParameter(++parcount, value);
                    query.setParameter(++parcount, value);
                    query.setParameter(++parcount, value);
                }
                query.append(")");

            }
        }
        return parcount;
    }

    public int constructConsigneeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(CNSINC IS NULL) ");
            } else {
                String[] split = parameterValue.split(",");
                query.append(AND);
                int i= 0;
                for(String value : split) {

                    if (i != 0) {
                        query.append(OR_WITHOUT_BRAKET);
                    }
                    i++;
                    query.append("(");
                    query.append("  ((coalesce (strpos (CNSINC,?),0)  >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,CNSEXC,',')) ");
                query.append(" OR(CNSINC IS NULL AND CNSEXC IS NULL ) ");
                    query.append(" OR (CNSINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,CNSEXC,','))) ");

                query.append(" )");
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);

            }
            query.append(")");

            }
        }
        return parcount;
    }

    public int constructShipperQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(SHPINC IS NULL) ");
            } else {
                String[] split = parameterValue.split(",");
                query.append(AND);
                int i= 0;
                for(String value : split) {

                    if (i != 0) {
                        query.append(OR_WITHOUT_BRAKET);
                    }
                    i++;
                    query.append("(");
                    query.append("  ((coalesce (strpos (SHPINC,?),0)  >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,SHPEXC,',')) ");
                query.append(" OR(SHPINC IS NULL AND SHPEXC IS NULL ) ");
                    query.append(" OR (SHPINC='-' AND 1 > pkg_frmwrk.fun_check_string_common(?,SHPEXC,','))) ");

                query.append(" )");
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);

            }
            query.append(")");

            }
        }
        return parcount;
    }

    public int constructAgentQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(AGTCODINC IS NULL) ");
            } else {

            String[] split = parameterValue.split(",");
            query.append(AND);
            int i= 0;
            for(String value : split) {

                if (i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;
                query.append("(");
                query.append("  ((coalesce (strpos (AGTCODINC,?) ,0) >0 AND 1  > pkg_frmwrk.fun_check_string_common(?,AGTCODEXC,',')) ");
                    query.append(" OR(AGTCODINC IS NULL AND AGTCODEXC IS NULL ) ");
                query.append(" OR (AGTCODINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,AGTCODEXC,',')) )");

                    query.append(" )");
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);

            }
            query.append(")");

            }
        }
        return parcount;
    }

    public int constructSharedSCCQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(SCCCODINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,SCCCODINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SCCCODEXC,',')) ");
                query.append(" OR(SCCCODINC IS NULL AND SCCCODEXC IS NULL ) ");
                query.append(" OR (SCCCODINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SCCCODEXC,',')) ");

                query.append(" )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                // exclude If for SCC code written as seperate block
                // as for SCC: exclude if and include can be given
                // as combination
                query.append(" AND (NOT(pkg_frmwrk.fun_check_string_common(?,SCCCODEXCIF,',') >0) ");
                query.append(" OR(SCCCODEXCIF IS NULL ) ");
                query.append(" )");
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructPackageInstructionQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(PKGINSINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,PKGINSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,PKGINSEXC,',')) ");
                query.append(" OR(PKGINSINC IS NULL AND PKGINSEXC IS NULL) ");
                query.append(" OR (PKGINSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,PKGINSEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructSharedCommodityQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                             String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(COMINC IS NULL OR COMINC = '-' ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,COMINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,COMEXC,',')) ");
                query.append(" OR ( COMINC IS NULL AND COMEXC IS NULL) ");
                query.append(" OR (COMINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,COMEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructCarrierViaQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(CARRVIAINC IS NULL) ");
            } else if (parameterValue != null) {

            String[] split = parameterValue.split(",");
            query.append(AND);
            int i= 0;
            for(String value : split) {

                if (i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;

                query.append("(  ((coalesce (strpos (CARRVIAINC,?),0)  >0 " +
                        " AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRVIAEXC,',')) ");
                    query.append(" OR(CARRVIAINC IS NULL AND CARRVIAEXC IS NULL) ");
                query.append(" OR (CARRVIAINC='-' " +
                        "AND 1 > pkg_frmwrk.fun_check_string_common(?,CARRVIAEXC,','))) )");
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);

            }
            query.append(")");
            }else{
                //nothing to do
            }
        }
        return parcount;
    }

    public int constructCarrierDestinationQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(CARRDSTINC IS NULL) ");
            } else {
            String[] split = parameterValue.split(",");
            query.append(AND);
            int i= 0;
            for(String value : split){
                if(i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;
                query.append("(( (coalesce (strpos (CARRDSTINC,?),0)  >0 " +
                        "AND 1 > pkg_frmwrk.fun_check_string_common(?,CARRDSTEXC,',') ) ");
                    query.append(" OR(CARRDSTINC IS NULL AND CARRDSTEXC IS NULL) ");
                query.append(" OR (CARRDSTINC='-' AND 1 > pkg_frmwrk.fun_check_string_common(?,CARRDSTEXC,','))) )");
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);

            }
            query.append(")");
            }
        }
        return parcount;
    }

    public int constructCarrierOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                           String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(CARRORGINC IS NULL) ");
            } else {
            String[] split = parameterValue.split(",");
            query.append(AND);
            int i= 0;
            for(String value : split){

                if(i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;

                query.append("(( ( coalesce (strpos (CARRORGINC,?),0)  >0 " +
                        " AND 1  > pkg_frmwrk.fun_check_string_common(?,CARRORGEXC,',')) " +
                        " ");
                    query.append(" OR(CARRORGINC IS NULL AND CARRORGEXC IS NULL) ");
                query.append(" OR (CARRORGINC='-' AND 1 > pkg_frmwrk.fun_check_string_common(?,CARRORGEXC,',')) ))");
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);

                query.setParameter(++parcount, value);
            }
            query.append(")");

            }
        }
        return parcount;
    }

    public int constructSharedCarrierQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                           String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ARLCODINC IS NULL) ");
            } else {
            String[] split = parameterValue.split(",");
            query.append(AND);
            int i= 0;
            for(String value : split) {

                if (i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;
                query.append(
                        " AND (((coalesce (strpos (ARLCODINC,?),0)  >0 AND NOT pkg_frmwrk.fun_check_string_common(?,ARLCODEXC,',')  >0) ");
                query.append(" OR (ARLCODINC IS NULL AND ARLCODEXC IS NULL ) ");
                query.append(
                        " OR (ARLCODINC='-' AND NOT pkg_frmwrk.fun_check_string_common(?,ARLCODEXC,',')  >0) )");
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
            }
            query.append(")");

            }
        }
        return parcount;
    }

    public int constructMailSubClassGroupQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                               String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(SUBCLSGRPINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,SUBCLSGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SUBCLSGRPEXC,',')) ");
                query.append(" OR(SUBCLSGRPINC IS NULL AND SUBCLSGRPEXC IS NULL) ");
                query.append(" OR (SUBCLSGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SUBCLSGRPEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructMailSubClassQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                          String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(MALCATINC IS NULL) ");
            }
            query.append(
                    " AND (( pkg_frmwrk.fun_check_string_common(?,SUBCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SUBCLSEXC,','))");
            query.append(" OR(SUBCLSINC IS NULL AND SUBCLSEXC IS NULL) ");
            query.append(
                    " OR (SUBCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SUBCLSEXC,',')) )");
            query.setParameter(++parcount, parameterValue);
            query.setParameter(++parcount, parameterValue);

            query.setParameter(++parcount, parameterValue);
            query.setParameter(++parcount, parameterValue);
            query.setParameter(++parcount, parameterValue);
        }
        return parcount;
    }

    public int constructMailCategoryQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                          String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(MALCATINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,MALCATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,MALCATEXC,',')) ");
                query.append(" OR(MALCATINC IS NULL AND MALCATEXC IS NULL) ");
                query.append(" OR (MALCATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,MALCATEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }

    public int constructMailClassQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue: shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(MALCLSINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,MALCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,MALCLSEXC,',')) ");
                query.append(" OR(MALCLSINC IS NULL AND MALCLSEXC IS NULL) ");
                query.append(" OR (MALCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,MALCLSEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);

                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }


    public int constructDVCustomsQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( DVCSTSTR IS NULL AND DVCSTEND IS NULL) ");
            }else{
                int dvCounter = 0;
                query.append(AND);
                for (String dvForCustoms : parameterValue.split(",")) {
                    if (dvCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" (((( DVCSTSTR =? AND DVCSTEND =?)");
                    query.append(" \tOR ( TO_NUMBER(DVCSTEND)>=TO_NUMBER(?)  AND DVCSTSTR is  NULL)");
                    query.append(" \tOR ( TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?)  AND DVCSTEND is  NULL)");
                    query.append(" OR ( DVCSTSTR IS NULL AND DVCSTEND IS NULL) ");
                    query.append(" \tOR ( TO_NUMBER(DVCSTEND)>=TO_NUMBER(?)  AND TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?) ))))");
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    dvCounter++;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }

    public int constructFlightTypeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        int count;
        count = 0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" (FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(
                        " ((pkg_frmwrk.fun_check_string_common(?,FLTTYPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPALLEXC,',')) ");
                query.append(" OR(FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL) ");
                query.append(
                        " OR (FLTTYPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPALLEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);

                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");

        count = 0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" ( FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(
                        " ((pkg_frmwrk.fun_check_string_common(?,FLTTYPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPANYEXC,',')) ");
                query.append(" OR(FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL) ");
                query.append(
                        " OR (FLTTYPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPANYEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);

                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");
        return parcount;
    }

    public int constructDVCarriageQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for (String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND ( DVCRGSTR IS NULL AND DVCRGEND IS NULL) ");
            } else {
                int dvCounter = 0;
                query.append(AND);
                for (String dvForCarriage : parameterValue.split(",")) {
                    if (dvCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" ((((DVCRGSTR =? AND DVCRGEND =?)");
                    query.append(" \tOR ( TO_NUMBER(DVCRGEND)>=TO_NUMBER(?)  AND DVCRGSTR is  NULL)");
                    query.append(" \tOR ( TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?)  AND DVCRGEND is  NULL)");
                    query.append(" OR ( DVCRGSTR IS NULL AND DVCRGEND IS NULL) ");
                    query.append(" \tOR ( TO_NUMBER(DVCRGEND)>=TO_NUMBER(?)  AND TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?) ))))");
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    dvCounter++;
                }
                query.append(" ) ");
            }
        }
//Added by A-8445 for ICRD-331530 Ends
        return parcount;
    }

    public int constructAircraftClassificationQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                    String parameterCode) {
        int count;
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" AND( ACRCLSALLINC IS NULL AND ACRCLSALLEXC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ACRCLSALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSALLEXC,',')) ");
                query.append(" OR( ACRCLSALLINC IS NULL AND ACRCLSALLEXC IS NULL) ");
                query.append(" OR (ACRCLSALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSALLEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
        }
        count =0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" ( ACRCLSANYINC IS NULL AND ACRCLSANYEXC IS NULL) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(" ((pkg_frmwrk.fun_check_string_common(?,ACRCLSANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSANYEXC,',')) ");
                query.append(" OR( ACRCLSANYINC IS NULL AND ACRCLSANYEXC IS NULL) ");
                query.append(" OR (ACRCLSANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRCLSANYEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");
        return parcount;
    }
    private void constructFilterQueryPostgre(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        String dataBaseSystemDate =SYSDATE;
        parcount = constructShippingDateQuery(shipmentVO, query, parcount);
        if ((shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 )
                || (shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 )
                || (shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 )
                || (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 )
                || (shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 )
                || (shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 )) {
            parcount = constructOriginQuery(shipmentVO, query, parcount);
        }
        if ((shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0)
                || (shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 )
                || (shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 )
                || (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 )
                || (shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 )
                || (shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 )) {
            parcount = constructDestinationQuery(shipmentVO, query, parcount);
        }
        if ((shipmentVO.getViaPointStation() != null && !shipmentVO.getViaPointStation().isEmpty() )
                || (shipmentVO.getViaPntArpGrp() != null && !shipmentVO.getViaPntArpGrp().isEmpty() )
                || (shipmentVO.getViaPointCountry() != null && !shipmentVO.getViaPointCountry().isEmpty())
                || (shipmentVO.getViaPntCntGrp() != null && !shipmentVO.getViaPntCntGrp().isEmpty() )) {
            parcount = constructViaPointQuery(shipmentVO, query, parcount);
        }
        query.append(" UNION  SELECT REC.*,'' LCLDES  FROM REC_MVW REC  WHERE REC.CMPCOD =? ")	;
        query.setParameter(++parcount, shipmentVO.getCompanyCode());
        parcount = constructShippingDateQuery(shipmentVO, query, parcount);
        if (shipmentVO.getDstStation() == null || shipmentVO.getDstStation().trim().length() <=0 ) {
            query.append("  AND ( DSTARPCODINC IS NULL OR DSTARPCODINC ='-' ) ");
        }
        if ((shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0)
                || (shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 )
                || (shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 )
                || (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 )
                || (shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 )
                || (shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 )) {
            parcount = constructDestIncludeQuery(shipmentVO, query, parcount);
        } else {
            query.append("  AND ((DSTARPCODINC IS NULL OR DSTARPCODINC ='-') AND (DSTCNTCODINC IS NULL OR DSTCNTCODINC ='-') AND (DSTARPGRPINC IS NULL OR DSTARPGRPINC='-')  AND (DSTCNTGRPINC IS NULL OR DSTCNTGRPINC = '-') ) ");
        }
        if (shipmentVO.getOrgStation() == null || shipmentVO.getOrgStation().trim().length() <=0 ) {
            query.append("  AND (ORGARPCODINC IS NULL) ");
        }
        if ((shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 )
                || (shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 )
                || (shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 )
                || (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 )
                || (shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 )
                || (shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 )) {
            parcount = constructOriginIncludeQuery(shipmentVO, query, parcount);
        } else {
            query.append("  AND ((ORGARPCODINC IS NULL OR ORGARPCODINC ='-') AND (ORGCNTCODINC IS NULL OR ORGCNTCODINC ='-') AND (ORGARPGRPINC IS NULL OR ORGARPGRPINC='-')  AND (ORGCNTGRPINC IS NULL OR ORGCNTGRPINC = '-') ) ");
        }
        if ((shipmentVO.getViaPointStation() != null && !shipmentVO.getViaPointStation().isEmpty() )
                || (shipmentVO.getViaPntArpGrp() != null && !shipmentVO.getViaPntArpGrp().isEmpty() )
                || (shipmentVO.getViaPointCountry() != null && !shipmentVO.getViaPointCountry().isEmpty() )
                || (shipmentVO.getViaPntCntGrp() != null && !shipmentVO.getViaPntCntGrp().isEmpty() )) {
            parcount = constructViaIncludeQuery(shipmentVO, query, parcount);
        } else {
            query.append("  AND ((VIAARPCODINC IS NULL OR VIAARPCODINC ='-') AND (VIACNTCODINC IS NULL OR VIACNTCODINC ='-') AND (VIAARPGRPINC IS NULL OR VIAARPGRPINC='-')  AND (VIACNTGRPINC IS NULL OR VIACNTGRPINC = '-') ) ");
        }
        //main select ends here
        query.append(" ) mst ");
        //parameter filter strts
        query.append(" WHERE CMPCOD=? ");
        query.setParameter(++parcount, shipmentVO.getCompanyCode());

        if(shipmentVO.getMap() != null ){
            parcount = constructParameterFilterQuery(shipmentVO, query, parcount);
        }
        if (shipmentVO.getBookingFlightDetailVOs() != null && !shipmentVO.getBookingFlightDetailVOs().isEmpty()) {
            parcount = constructBookingFlightFilterQuery(shipmentVO, query, parcount, dataBaseSystemDate);
        } else {
            parcount = constructDayOfOperationQuery(shipmentVO, query, parcount);
        }
        query.append(" AND RULTYP ='E' ");
        if(shipmentVO.isFromPrecheck()){
            query.append(" AND CMPTYP ='EMB' ");
        }
        query.append(" AND  RECSTA='A' ");
        query.append(" AND SUSFLG <>'Y' ");
        if(shipmentVO.getApplicableTransaction() != null && shipmentVO.getApplicableTransaction().trim().length() > 0){
            String[] split = shipmentVO.getApplicableTransaction().split(",");
            query.append(AND);
            int i= 0;
            for(String value : split) {

                if (i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;
                query.append("  (COALESCE(strpos(APPTXN,?),0) >0) ");
                query.setParameter(++parcount, value );
            }
            query.append(")");
        }
        if (shipmentVO.getEmbargoLevel() != null && shipmentVO.getEmbargoLevel().trim().length() > 0) {

            String[] split = shipmentVO.getEmbargoLevel().split(",");
            query.append(AND);
            int i= 0;
            for(String value : split) {

                if (i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;
                query.append("  (COALESCE(strpos(RECTYP,?),0) >0) ");
                query.setParameter(++parcount, value );
            }
            query.append(")");
        }
        if (TILDE.equals(shipmentVO.getSplitIndicator())) {
            query.append(" AND(SLTIND IS NULL) ");
        } else {
            query.append(" AND COALESCE(SLTIND,'Y') ='Y' ");
        }
      //added by 202766 for IASCB-159851
        if (TILDE.equals(shipmentVO.getUnknownShipper()))
        {
        	query.append(UNKSHP_NULL_QUERY);
        }
        else {
           query.append(UNKSHP_QUERY);  
           query.setParameter(++parcount, shipmentVO.getUnknownShipper());
           query.setParameter(++parcount, shipmentVO.getUnknownShipper());
           }
        //ended
        query.append(" ORDER BY CASE WHEN RECTYP = 'E' THEN 1 WHEN RECTYP = 'W' THEN 2 WHEN RECTYP = 'I' " +
                " THEN 3 ELSE 4 END ,LSTUPDTIM DESC ");
    }
    public int constructShippingDateQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        boolean isShipDatePresent = false;
        int dateCount = 0;
        if (shipmentVO.getBookingFlightDetailVOs() != null	&& !shipmentVO.getBookingFlightDetailVOs().isEmpty()) {
            for (BookingFlightDetailVO bookingFlightDetailVO : shipmentVO.getBookingFlightDetailVOs()) {
                if(bookingFlightDetailVO.getFlightDate()!=null ){
                    if ( dateCount != 0) {
                        query.append(" OR ");
                    } else{
                        query.append(AND);
                    }
                    query.append(" (to_date(?,'yyyy-mm-dd') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
                    query.setParameter(++parcount,
                            bookingFlightDetailVO.getDepartureTimeAtOrigin()!=null?
                                    bookingFlightDetailVO.getDepartureTimeAtOrigin().toStringFormat(DATE_FORMAT).substring(0,10)
                                    :bookingFlightDetailVO.getFlightDate().toStringFormat(DATE_FORMAT).substring(0,10));
                    query.append(" OR (to_date(?,'yyyy-mm-dd') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
                    query.setParameter(++parcount,
                            bookingFlightDetailVO.getArrivalTimeAtDestination()!=null?
                                    bookingFlightDetailVO.getArrivalTimeAtDestination().toStringFormat(DATE_FORMAT).substring(0,10)
                                    :bookingFlightDetailVO.getFlightDate().toStringFormat(DATE_FORMAT).substring(0,10));
                    ++dateCount;
                }
            }
        }
        else{
            if(shipmentVO.getShipmentDate() != null ){
                query.append(" AND ((to_date(?,'yyyy-mm-dd') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
                query.setParameter(++parcount, shipmentVO.getShipmentDate().toStringFormat(DATE_FORMAT).substring(0,10));
                isShipDatePresent = true;
            }
        }
        if (isShipDatePresent || dateCount > 0) {
            query.append(") ");
        }
        return parcount;
    }
    public int constructDayOfOperationQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //if no booking exists then there is no chance of multilpe dayof week at origin . So first element can be taken.
        //Also the same need to be checked against Origin
        if(shipmentVO.getDayOfWeekOrg() !=null && !shipmentVO.getDayOfWeekOrg().isEmpty()){
            query.append(" AND( ((ORGDAYOPR LIKE ? ) ");
            query.append(" OR (ORGDAYOPR IS NULL) ) ");
            query.append(" AND(DSTDAYOPR IS NULL)");
            query.append(" AND (SEGDSTDAYOPR IS NULL)");
            query.append(" AND (SEGORGDAYOPR IS NULL)");
            query.append(" AND(VIADAYOPR IS NULL))");
            query.setParameter(++parcount,'%' + shipmentVO.getDayOfWeekOrg().iterator().next() + '%');
        } else if (shipmentVO.getDayOfWeekViaPt() !=null && !shipmentVO.getDayOfWeekViaPt().isEmpty()) {
            query.append(" AND(((VIADAYOPR LIKE ?) ");
            query.append(" OR(VIADAYOPR IS NULL)) ");
            query.append(" AND(DSTDAYOPR IS NULL )");
            query.append(" AND(ORGDAYOPR IS NULL))");
            query.setParameter(++parcount,'%' + shipmentVO.getDayOfWeekViaPt().iterator().next() + '%');
        } else {
            query.append(" AND ( ORGDAYOPR IS NULL) ");
        }
        if(shipmentVO.getApplicableTransaction() != null && shipmentVO.getApplicableTransaction().trim().length() > 0 && APP_TRANSACTION_HAWB.equals(shipmentVO.getApplicableTransaction())){
            query.append(" AND ORGSTRTIM is  NULL AND ORGENDTIM is NULL ");
            query.append(" AND DSTSTRTIM is  NULL AND DSTENDTIM is NULL ");
            query.append(" AND VIASTRTIM is NULL AND VIAENDTIM is NULL ");
            query.append(" AND ALLSTRTIM is NULL AND ALLENDTIM is NULL ");
            query.append(" AND ANYSTRTIM is NULL AND ANYENDTIM is NULL ");
            query.append(" AND SEGSTRTIM is  NULL AND SEGENDTIM is NULL ");
        } else if (shipmentVO.getDayOfWeekViaPt() !=null && !shipmentVO.getDayOfWeekViaPt().isEmpty()) {
            query.append(" AND(((VIADAYOPR LIKE ?) ");
            query.append(" OR(VIADAYOPR IS NULL)) ");
            query.append(" AND(DSTDAYOPR IS NULL )");
            query.append(" AND(ORGDAYOPR IS NULL))");
            query.setParameter(++parcount,'%' + shipmentVO.getDayOfWeekViaPt().iterator().next() + '%');
        } else {
            //nothing to do
        }
        return parcount;
    }
    public int constructBookingFlightFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                 String dataBaseSystemDate) {
        query.append(AND);
        int flightCounter = 0;
        Set<String> carrierCodes = null;
        Set<String> times = null;
        Set<String> dates = null;
        Set<String> flightnumbers = null;
        Set<String> dayOfWeeks = null;
        boolean isAndFlag = false;
        int counter = 0;
        for (BookingFlightDetailVO bookingFlightDetailVO :shipmentVO.getBookingFlightDetailVOs()) {
            carrierCodes = new HashSet<>();
            times = new HashSet<>();
            dates = new HashSet<>();
            flightnumbers = new HashSet<>();
            dayOfWeeks = new HashSet<>();
            if (flightCounter > 0) {
                query.append( " OR");
                isAndFlag = false;
            }
            query.append( " (");
            if (bookingFlightDetailVO.getCarrierOrigin() != null && bookingFlightDetailVO.getCarrierOrigin().trim().length() > 0) {
                if (isAndFlag) {
                    query.append(ANDSTRING);
                }
                isAndFlag = true;
                parcount = constructOriginCarrierCode(query, parcount, carrierCodes, bookingFlightDetailVO);
            }
            if (bookingFlightDetailVO.getCarrierDestination() != null && bookingFlightDetailVO.getCarrierDestination().trim().length() > 0) {
                if (isAndFlag) {
                    query.append(ANDSTRING);
                }
                isAndFlag = true;
                parcount = constructDestCarrierCode(query, parcount, carrierCodes, bookingFlightDetailVO);
            }
            if (bookingFlightDetailVO.getCarrierViaPoint() != null && bookingFlightDetailVO.getCarrierViaPoint().trim().length() > 0) {
                if (isAndFlag) {
                    query.append(ANDSTRING);
                }
                isAndFlag = true;
                parcount = constructViaCarrierCode(query, parcount, carrierCodes, bookingFlightDetailVO);
            }
            if (!carrierCodes.isEmpty()) {
                query.append("  AND( ( ");
                counter = 0;
                isAndFlag = true;
                parcount = constructCarrierCodeQuery(query, parcount, carrierCodes, counter);
            }
            if (bookingFlightDetailVO.getTimeOrigin() != null) {
                isAndFlag = true;
                parcount = constructOriginTimes(query, parcount, dataBaseSystemDate, times, bookingFlightDetailVO);
            }
            if(bookingFlightDetailVO.getTimeDestination() != null){
                isAndFlag = true;
                parcount = constructDestTimes(query, parcount, dataBaseSystemDate, times, bookingFlightDetailVO);
            }
            if(bookingFlightDetailVO.getTimeViaPoint() != null) {
                isAndFlag = true;
                parcount = constructViaTimes(query, parcount, dataBaseSystemDate, times, bookingFlightDetailVO);
            }
            else {
                if (isAndFlag) {
                    query.append("AND");
                }
                isAndFlag = true;
                query.append(" (VIASTRTIM IS NULL AND VIAENDTIM IS NULL) ");
            }
            if (!times.isEmpty()) {
                query.append(AND);
                counter = 0;
                isAndFlag = true;
                parcount = constructTimeQuery(query, parcount, dataBaseSystemDate, times, counter);
            }
            parcount = constructDateFilterQuery(query, parcount, dates, bookingFlightDetailVO);
            if (!dates.isEmpty()) {
                parcount = constructDateQuery(query, parcount, dates);
            }
            parcount = constructDowQuery(shipmentVO, query, parcount, dayOfWeeks, bookingFlightDetailVO);
            //SEGMENT SECTION STRTS
            parcount = constructSegmentQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
            parcount = constructFlightQuery(query, parcount, bookingFlightDetailVO);
            parcount = constructDateTimeQuery(query, parcount, dataBaseSystemDate, bookingFlightDetailVO);
            parcount = constructArrDepQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
            //SEGMENT SECTION ENDS
            parcount = constructFlightNumberQuery(query, parcount, flightnumbers, bookingFlightDetailVO);
            query.append(AND);
            query.append(" (to_date(?,'DD-MON-YYYY') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
            query.setParameter(++parcount,
                    bookingFlightDetailVO.getDepartureTimeAtOrigin()!=null?
                            bookingFlightDetailVO.getDepartureTimeAtOrigin().toDisplayDateOnlyFormat():bookingFlightDetailVO.getFlightDate().toDisplayDateOnlyFormat());
            query.append(" OR (to_date(?,'DD-MON-YYYY') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
            query.setParameter(++parcount,
                    bookingFlightDetailVO.getArrivalTimeAtDestination()!=null?
                            bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat():bookingFlightDetailVO.getFlightDate().toDisplayDateOnlyFormat());
            query.append(" ) ");
            flightCounter++;
            query.append( " )");
        }
        query.append( " )");
        return parcount;
    }
    public int constructArrDepQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                    BookingFlightDetailVO bookingFlightDetailVO) {
        boolean arrivalmarked = false;
        boolean departuremarked =false;
        parcount = constructFlightDetailsQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
        if (bookingFlightDetailVO.getDayOfWeekOrg()!=null && bookingFlightDetailVO.getDayOfWeekOrg().trim().length() > 0) {
            String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
            String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
            String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
            departuremarked=true;
            parcount = constructSegmentOriginDowQuery(query, parcount, bookingFlightDetailVO, airportGrp, country,
                    countryGrp);
        }
        if (bookingFlightDetailVO.getDayOfWeekDst()!=null
                && bookingFlightDetailVO.getDayOfWeekDst().trim().length() > 0) {
            arrivalmarked=true;
            parcount = constructSegmentDestDowQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
        }
        if (!arrivalmarked && (bookingFlightDetailVO.getArrivalTimeAtDestination()!=null || bookingFlightDetailVO.getFlightDate()!=null)) {
            parcount = constructDestinationQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
        }
        if (!departuremarked && (bookingFlightDetailVO.getDepartureTimeAtOrigin()!=null || bookingFlightDetailVO.getFlightDate()!=null)) {
            parcount = constructOriginFilterQuery(shipmentVO, query, parcount, bookingFlightDetailVO);
        }
        query.append("  )");
        return parcount;
    }
    public int constructFlightQuery(Query query, int parcount, BookingFlightDetailVO bookingFlightDetailVO) {
        if (bookingFlightDetailVO.getFlightNumber()!= null && bookingFlightDetailVO.getFlightNumber().trim().length() > 0){
			query.append(" AND ((coalesce (strpos (FLTNUMSEGINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMSEGEXC,',')) ");
            query.append(" OR (FLTNUMSEGINC IS NULL AND FLTNUMSEGEXC IS NULL ) ");
			query.append(" OR (FLTNUMSEGINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMSEGEXC,',')) )");
            String flightNumber = bookingFlightDetailVO.getFlightCarrierCode() + "~" +
                    bookingFlightDetailVO.getFlightNumber();
            query.setParameter(++parcount, flightNumber);
            query.setParameter(++parcount, flightNumber);
            query.setParameter(++parcount, flightNumber);
        }
        else {
            query.append(" AND (FLTNUMSEGINC IS NULL AND FLTNUMSEGEXC IS NULL ) ");
        }
        return parcount;
    }
    public int constructDestinationQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                         BookingFlightDetailVO bookingFlightDetailVO) {
        String dowdst  = String.valueOf(bookingFlightDetailVO
                .getArrivalTimeAtDestination()!=null?(bookingFlightDetailVO
                .getArrivalTimeAtDestination().get(
                        Calendar.DAY_OF_WEEK) - 1):(bookingFlightDetailVO
                .getFlightDate().get(
                        Calendar.DAY_OF_WEEK) - 1));
        if("0".equals(dowdst)){
            dowdst="7";
        }
        String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
        String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
        String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
        query.append(AND_SEGDSTDAYOPR_QUERY);
        if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null){
            query.append("AND(to_date(?,'DD-MON-YYYY')  BETWEEN  date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
        }
        query.append(SEGDSTDAYOPR_QUERY);
        query.append(" AND ((STRPOS(SEGDSTARPCODINC,?)>0 OR STRPOS(SEGDSTARPCODEXC , ?) = 0 )  ");
        if(airportGrp!=null){
            query.append(STRPOS_SEGDSTARPGRPINC_QUERY);
        }
        if(country!=null){
            query.append(STRPOS_SEGDSTCNTCODINC_QUERY);
        }
        if(countryGrp!=null){
            query.append(STRPOS_SEGDSTCNTGRPINC_QUERY);
        }
        query.append(SEGDSTARPCODINC_QUERY);
        query.append(")");
        query.setParameter(++parcount,'%' + dowdst + '%');
        if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null){
            query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat());
        }
        query.setParameter(++parcount, bookingFlightDetailVO.getDestination() );
        query.setParameter(++parcount,bookingFlightDetailVO.getDestination());
        if(airportGrp!=null){
            query.setParameter(++parcount,airportGrp);
            query.setParameter(++parcount,airportGrp);
        }
        if(country!=null){
            query.setParameter(++parcount,country);
            query.setParameter(++parcount,country);
        }
        if(countryGrp!=null){
            query.setParameter(++parcount,countryGrp);
            query.setParameter(++parcount,countryGrp);
        }
        return parcount;
    }
    public int constructOriginFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                  BookingFlightDetailVO bookingFlightDetailVO) {
        String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
        String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
        String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
        String dowdep  = String.valueOf(bookingFlightDetailVO
                .getDepartureTimeAtOrigin()!=null?(bookingFlightDetailVO
                .getDepartureTimeAtOrigin().get(
                        Calendar.DAY_OF_WEEK) - 1):(bookingFlightDetailVO
                .getFlightDate().get(
                        Calendar.DAY_OF_WEEK) - 1));
        if("0".equals(dowdep)){
            dowdep="7";
        }
        query.append(SEGORGDAYOPR_QUERY);
        if(bookingFlightDetailVO.getDepartureTimeAtOrigin() != null){
            query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
        }
        query.append(" OR (SEGORGDAYOPR IS NULL)) AND ((STRPOS(SEGORGARPCODINC,?)>0 OR STRPOS(SEGORGARPCODEXC , ?) = 0 ) ");
        if(airportGrp!=null){
            query.append(STRPOS_SEGORGARPGRPINC_QUERY);
        }
        if(country!=null){
            query.append(STRPOS_SEGORGCNTCODINC_QUERY);
        }
        if(countryGrp!=null){
            query.append(STRPOS_SEGORGCNTGRPINC_QUERY);
        }
        query.append(SEGORGARPCODINC_QUERY);
        query.append(")");
        query.setParameter(++parcount,'%' + dowdep + '%');
        if(bookingFlightDetailVO.getDepartureTimeAtOrigin() != null){
            query.setParameter(++parcount, bookingFlightDetailVO.getDepartureTimeAtOrigin().toDisplayDateOnlyFormat());
        }
        query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
        query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
        if(airportGrp!=null){
            query.setParameter(++parcount,airportGrp);
            query.setParameter(++parcount,airportGrp);
        }
        if(country!=null){
            query.setParameter(++parcount,country);
            query.setParameter(++parcount,country);
        }
        if(countryGrp!=null){
            query.setParameter(++parcount,countryGrp);
            query.setParameter(++parcount,countryGrp);
        }
        return parcount;
    }
    public int constructSegmentDestDowQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                            BookingFlightDetailVO bookingFlightDetailVO) {
        String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
        String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
        String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
        query.append(AND_SEGDSTDAYOPR_QUERY);
        if(bookingFlightDetailVO.getDateDestination() != null){
            query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
        }
        query.append(SEGDSTDAYOPR_QUERY);
        query.append(" AND ((STRPOS(SEGDSTARPCODINC,?)>0 OR STRPOS(SEGDSTARPCODEXC , ?) = 0 )  ");
        if(airportGrp!=null){
            query.append(STRPOS_SEGDSTARPGRPINC_QUERY);
        }
        if(country!=null){
            query.append(STRPOS_SEGDSTCNTCODINC_QUERY);
        }
        if(countryGrp!=null){
            query.append(STRPOS_SEGDSTCNTGRPINC_QUERY);
        }
        query.append(SEGDSTARPCODINC_QUERY);
        query.append(")");
        query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekDst() + '%');
        if(bookingFlightDetailVO.getDateDestination() != null){
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination());
        }
        query.setParameter(++parcount, bookingFlightDetailVO.getDestination() );
        query.setParameter(++parcount,bookingFlightDetailVO.getDestination());
        if(airportGrp!=null){
            query.setParameter(++parcount,airportGrp);
            query.setParameter(++parcount,airportGrp);
        }
        if(country!=null){
            query.setParameter(++parcount,country);
            query.setParameter(++parcount,country);
        }
        if(countryGrp!=null){
            query.setParameter(++parcount,countryGrp);
            query.setParameter(++parcount,countryGrp);
        }
        return parcount;
    }
    public int constructSegmentOriginDowQuery(Query query, int parcount, BookingFlightDetailVO bookingFlightDetailVO,
                                              String airportGrp, String country, String countryGrp) {
        query.append(SEGORGDAYOPR_QUERY);
        if(bookingFlightDetailVO.getDateOrigin() != null){
            query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN  date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
        }
        query.append(" OR (SEGORGDAYOPR IS NULL)) AND ((STRPOS(SEGORGARPCODINC,?)>0 OR STRPOS(SEGORGARPCODEXC , ?) = 0 ) ");
        if(airportGrp!=null){
            query.append(STRPOS_SEGORGARPGRPINC_QUERY);
        }
        if(country!=null){
            query.append(STRPOS_SEGORGCNTCODINC_QUERY);
        }
        if(countryGrp!=null){
            query.append(STRPOS_SEGORGCNTGRPINC_QUERY);
        }
        query.append(SEGORGARPCODINC_QUERY);
        query.append(")");
        query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekOrg() + '%');
        if(bookingFlightDetailVO.getDateOrigin() != null){
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin());
        }
        query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
        query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
        if(airportGrp!=null){
            query.setParameter(++parcount,airportGrp);
            query.setParameter(++parcount,airportGrp);
        }
        if(country!=null){
            query.setParameter(++parcount,country);
            query.setParameter(++parcount,country);
        }
        if(countryGrp!=null){
            query.setParameter(++parcount,countryGrp);
            query.setParameter(++parcount,countryGrp);
        }
        return parcount;
    }
    public int constructDowQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, Set<String> dayOfWeeks,
                                 BookingFlightDetailVO bookingFlightDetailVO) {
        if (bookingFlightDetailVO.getDayOfWeekOrg()!=null
                && bookingFlightDetailVO.getDayOfWeekOrg().trim().length() > 0) {
            parcount = constructDayOfWeekQuery(shipmentVO, query, parcount, dayOfWeeks, bookingFlightDetailVO);
        }
        else {
            query.append(" AND ( ORGDAYOPR IS NULL) ");
        }
        if (bookingFlightDetailVO.getDayOfWeekViaPt()!=null	&& bookingFlightDetailVO.getDayOfWeekViaPt().trim().length() > 0) {
            parcount = constructDayOfWeekViaPointQuery(shipmentVO, query, parcount, dayOfWeeks,
                    bookingFlightDetailVO);
        }
        else {
            query.append(" AND (VIADAYOPR IS NULL ) ");
        }
        if (bookingFlightDetailVO.getDayOfWeekDst()!=null && bookingFlightDetailVO.getDayOfWeekDst().trim().length() > 0) {
            parcount = constructDayOfWeekDstQuery(shipmentVO, query, parcount, dayOfWeeks, bookingFlightDetailVO);
        }
        else {
            query.append(" AND (DSTDAYOPR IS NULL ) ");
        }
        if (!dayOfWeeks.isEmpty()) {
            parcount = constructDayOfWeeks(query, parcount, dayOfWeeks);
        }
        return parcount;
    }
    public int constructFlightNumberQuery(Query query, int parcount, Set<String> flightnumbers,
                                          BookingFlightDetailVO bookingFlightDetailVO) {
        int counter;
        if (bookingFlightDetailVO.getFlightNumberOrigin() != null
                && bookingFlightDetailVO.getFlightNumberOrigin().trim().length() > 0) {
			query.append(" AND ((coalesce (strpos (FLTNUMORGINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMORGEXC,',')) ");
            query.append(" OR ( FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL) ");
			query.append(" OR (FLTNUMORGINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMORGEXC,',')) )");
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberOrigin());
            flightnumbers.add(bookingFlightDetailVO.getFlightNumberOrigin());
        }
        else {
            query.append(" AND (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL) ");
        }
        if (bookingFlightDetailVO.getFlightNumberDestination() != null
                && bookingFlightDetailVO.getFlightNumberDestination().trim().length() > 0) {
			query.append(" AND ((coalesce (strpos (FLTNUMDSTINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMDSTEXC,',')) ");
            query.append(" OR (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL ) ");
			query.append(" OR (FLTNUMDSTINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMDSTEXC,',')) )");
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberDestination());
            flightnumbers.add(bookingFlightDetailVO.getFlightNumberDestination());
        }
        else {
            query.append(" AND (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL) ");
        }
        if (bookingFlightDetailVO.getFlightNumberViaPoint() != null
                && bookingFlightDetailVO.getFlightNumberViaPoint().trim().length() > 0) {
			query.append(" AND ((coalesce (strpos (FLTNUMVIAINC,?) ,0) >0 AND 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMVIAEXC,',')) ");
            query.append(" OR (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL) ");
			query.append(" OR (FLTNUMVIAINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMVIAEXC,',')) )");
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightNumberViaPoint());
            flightnumbers.add(bookingFlightDetailVO.getFlightNumberViaPoint());
        }
        else {
            query.append(" AND (FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL ) ");
        }
        if (!flightnumbers.isEmpty()) {
            //For applicable on all
            query.append(AND);
            counter = 0;
            for (String flightnumber : flightnumbers) {
                if (counter != 0) {
                    query.append(ANDSTRING);
                }
				query.append(" ((coalesce (strpos (FLTNUMALLINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMALLEXC,',')) ");
                query.append(" OR(FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL) ");
				query.append(" OR (FLTNUMALLINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMALLEXC,',')) )");
                query.setParameter(++parcount, flightnumber);
                query.setParameter(++parcount, flightnumber);
                query.setParameter(++parcount, flightnumber);
                ++counter;
            }
            query.append(" ) ");
            //For applicable on any
            query.append(AND);
            counter = 0;
            for (String flightnumber : flightnumbers) {
                if (counter != 0) {
                    query.append(" OR ");
                }
				query.append(" ((coalesce (strpos (FLTNUMANYINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMANYEXC,',')) ");
                query.append(" OR(FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL) ");
				query.append(" OR (FLTNUMANYINC='-' AND 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMANYEXC,',')) )");
                query.setParameter(++parcount, flightnumber);
                query.setParameter(++parcount, flightnumber);
                query.setParameter(++parcount, flightnumber);
                ++counter;
            }
            query.append(" ) ");
        }
        return parcount;
    }
    public int constructFlightDetailsQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                           BookingFlightDetailVO bookingFlightDetailVO) {
        if (bookingFlightDetailVO.getFlightCarrierCode() != null
                && bookingFlightDetailVO.getFlightCarrierCode().trim().length() > 0) {
            query.append(ANDSTRING);
			query.append(" ((coalesce (strpos (CARRSEGINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRSEGEXC,',')) ");
            query.append(" OR (CARRSEGINC IS NULL AND CARRSEGEXC IS NULL ) ");
			query.append(" OR (CARRSEGINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRSEGEXC,',')) )");
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightCarrierCode());
        }
        else {
            query.append(" AND (CARRSEGINC IS NULL AND CARRSEGEXC IS NULL ) ");
        }
        if (bookingFlightDetailVO.getFlightType() != null
                && bookingFlightDetailVO.getFlightType().trim().length() > 0) {
            query.append(ANDSTRING);
            query.append(" ((pkg_frmwrk.fun_check_string_common(?,FLTTYPSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPSEGEXC,',')) ");
            query.append(" OR (FLTTYPSEGINC IS NULL AND FLTTYPSEGEXC IS NULL ) ");
            query.append(" OR (FLTTYPSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPSEGEXC,',')) )");
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightType());
        }
        else {
            query.append(" AND (FLTTYPSEGINC IS NULL AND FLTTYPSEGEXC IS NULL ) ");
        }
        if (bookingFlightDetailVO.getFlightOwner() != null
                && bookingFlightDetailVO.getFlightOwner().trim().length() > 0) {
            query.append(ANDSTRING);
            query.append(" ((pkg_frmwrk.fun_check_string_common(?,FLTOWRSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRSEGEXC,',')) ");
            query.append(" OR (FLTOWRSEGINC IS NULL AND FLTOWRSEGEXC IS NULL ) ");
            query.append(" OR (FLTOWRSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRSEGEXC,',')) )");
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
            query.setParameter(++parcount, bookingFlightDetailVO.getFlightOwner());
        }
        else {
            query.append(" AND (FLTOWRSEGINC IS NULL AND FLTOWRSEGEXC IS NULL ) ");
        }
        String airinegroup= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getFlightCarrierCode(),ShipmentDetailsVO.AIRLINE_GRP);
        if (airinegroup != null
                && airinegroup.trim().length() > 0) {
            query.append(ANDSTRING);
            query.append(" ((pkg_frmwrk.fun_check_string_common(?,ARLGRPSEGINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPSEGEXC,',')) ");
            query.append(" OR (ARLGRPSEGINC IS NULL AND ARLGRPSEGEXC IS NULL ) ");
            query.append(" OR (ARLGRPSEGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ARLGRPSEGEXC,',')) )");
            query.setParameter(++parcount, airinegroup);
            query.setParameter(++parcount, airinegroup);
            query.setParameter(++parcount, airinegroup);
            query.setParameter(++parcount, airinegroup);
            query.setParameter(++parcount, airinegroup);
        }
        else {
            query.append(" AND (ARLGRPSEGINC IS NULL AND ARLGRPSEGEXC IS NULL ) ");
        }
        return parcount;
    }
    public int constructDateTimeQuery(Query query, int parcount, String dataBaseSystemDate,
                                      BookingFlightDetailVO bookingFlightDetailVO) {
        boolean arrivalmarked = false;
        boolean departuremarked = false;
        if (bookingFlightDetailVO.getDateDestination() != null) {
            arrivalmarked =true;
            query.append(" AND ((SEGDSTDAYOPR IS NOT NULL) AND (pkg_frmwrk.fun_check_string_common(?,SEGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SEGDATEXC,',')) ");
            query.append(" OR(SEGDATINC IS NULL AND SEGDATEXC IS NULL ) ");
            query.append(" OR (SEGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SEGDATEXC,',')) OR (SEGDSTDAYOPR IS NULL))  ");
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
        }
        if (bookingFlightDetailVO.getDateOrigin() != null) {
            departuremarked=true;
            query.append(" AND ((SEGORGDAYOPR IS NOT NULL) AND (pkg_frmwrk.fun_check_string_common(?,SEGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SEGDATEXC,',')) ");
            query.append(" OR(SEGDATINC IS NULL AND SEGDATEXC IS NULL ) ");
            query.append(" OR (SEGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SEGDATEXC,',')) OR (SEGORGDAYOPR IS NULL))");
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
        }
        if (bookingFlightDetailVO.getDateViaPoint() != null || bookingFlightDetailVO.getArrivalTimeAtDestination() != null) {
            if(bookingFlightDetailVO.getDateViaPoint() != null && !departuremarked){
                query.append(" AND ((SEGORGDAYOPR IS NOT NULL) AND (pkg_frmwrk.fun_check_string_common(?,SEGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SEGDATEXC,',')) ");
                query.append(" OR(SEGDATINC IS NULL AND SEGDATEXC IS NULL  ) ");
                query.append(" OR (SEGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SEGDATEXC,',')) OR (SEGORGDAYOPR IS NULL))");
                query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
                query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
            }
            if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null &&!arrivalmarked){
                query.append(" AND ((SEGDSTDAYOPR IS NOT NULL) AND (pkg_frmwrk.fun_check_string_common(?,SEGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SEGDATEXC,',')) ");
                query.append(" OR(SEGDATINC IS NULL AND SEGDATEXC IS  NULL) ");
                query.append(" OR (SEGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SEGDATEXC,',')) OR SEGDSTDAYOPR IS NULL)");
                query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
                query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
                query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
                query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
                query.setParameter(++parcount, bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayDateOnlyFormat().toUpperCase());
            }
        }
        arrivalmarked=false;
        departuremarked=false;
        if (bookingFlightDetailVO.getTimeOrigin() != null) {
            departuremarked=true;
            // case 1: eq
            query.append(AND_QUERY);
            query.append(" (SEGORGDAYOPR IS NOT NULL ) AND ( TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS')= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYYSTRING);
            // case 2
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGENDTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND SEGSTRTIM is NULL AND SEGENDTIM is not NULL) )");
            // case 3
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGSTRTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND SEGENDTIM is NULL AND SEGSTRTIM is not NULL ))");
            // case 4
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGENDTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+SEGSTRTIM+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS'))) ");
            query.append("  OR(SEGSTRTIM is NULL AND SEGENDTIM is NULL ) )) OR (SEGORGDAYOPR IS NULL) )");
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
        }
        if(bookingFlightDetailVO.getTimeDestination() != null){
            arrivalmarked=true;
            query.append(AND_QUERY);
            query.append(" (SEGDSTDAYOPR IS NOT NULL)AND (TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS')= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYYSTRING);
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGENDTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND SEGSTRTIM is NULL AND SEGENDTIM is not NULL) )");
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGSTRTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND SEGENDTIM is NULL AND SEGSTRTIM is not NULL) )");
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGENDTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+SEGSTRTIM+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS'))) ");
            query.append("  OR(SEGSTRTIM is NULL AND SEGENDTIM is NULL ) )) OR (SEGDSTDAYOPR IS NULL))");
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
        }
        if(bookingFlightDetailVO.getTimeViaPoint() != null || bookingFlightDetailVO.getArrivalTimeAtDestination()!=null) {
            // case 1: eq
            parcount = constructFilterQuery(query, parcount, dataBaseSystemDate, bookingFlightDetailVO, arrivalmarked,
                    departuremarked);
        }
        return parcount;
    }
    public int constructFilterQuery(Query query, int parcount, String dataBaseSystemDate,
                                    BookingFlightDetailVO bookingFlightDetailVO, boolean arrivalmarked, boolean departuremarked) {
        if(bookingFlightDetailVO.getTimeViaPoint() != null && !departuremarked){
            query.append(AND_QUERY);
            query.append(" (SEGORGDAYOPR IS NOT NULL) AND ( TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS')= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS')=  TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYYSTRING);
            // case 2
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGENDTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND SEGSTRTIM is NULL AND SEGENDTIM is not NULL)) ");
            // case 3.
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGSTRTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND SEGENDTIM is NULL AND SEGSTRTIM is not NULL ) )");
            // case 4
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGENDTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+SEGSTRTIM+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') ) ) ");
            query.append("  OR(SEGSTRTIM is NULL AND SEGENDTIM is NULL ) ))OR (SEGORGDAYOPR IS NULL))");
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
            query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
        }
        if(bookingFlightDetailVO.getArrivalTimeAtDestination() != null && !arrivalmarked){
            query.append(AND_QUERY);
            query.append("  (SEGDSTDAYOPR IS NOT NULL) AND (TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') =  TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||SEGENDTIM, 'dd-MON-yyyy HH24:MI:SS')  =  TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYYSTRING);
            // case 2
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGENDTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND SEGSTRTIM is NULL AND SEGENDTIM is not NULL)) ");
            // case 3
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGSTRTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND SEGENDTIM is NULL AND SEGSTRTIM is not NULL))");
            // case 4
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+SEGENDTIM+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+SEGSTRTIM+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS')) ) ");
            query.append("  OR(SEGSTRTIM is  NULL AND SEGENDTIM is NULL) ) )OR (SEGDSTDAYOPR IS NULL))");
            query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
            query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
            query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
            query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
            query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
            query.setParameter(++parcount,bookingFlightDetailVO.getArrivalTimeAtDestination().toDisplayTimeOnlyFormat());
        }
        return parcount;
    }
    public int constructSegmentQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                     BookingFlightDetailVO bookingFlightDetailVO) {
        if (bookingFlightDetailVO.getOrigin()!= null
                && bookingFlightDetailVO.getOrigin().trim().length() > 0 ) {
            query.append(AND);
            String orgairportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
            String orgcountry= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
            String orgcountryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
            query.append("   ( ( ");
            if(bookingFlightDetailVO.getOrigin()!= null && bookingFlightDetailVO.getOrigin().trim().length() >0 ){
                query.append(" (pkg_frmwrk.fun_check_string_common(?,SEGORGARPCODINC,',') >0  OR SEGORGARPCODINC ='-') ");
                query.setParameter(++parcount, bookingFlightDetailVO.getOrigin());
            }
            if(orgairportGrp != null && orgairportGrp.trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGORGARPGRPINC,',')  >0 OR SEGORGARPGRPINC   ='-') ");
                query.setParameter(++parcount, orgairportGrp);
            }
            if(orgcountry != null && orgcountry.trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGORGCNTCODINC,',')  >0 OR SEGORGCNTCODINC   ='-') ");
                query.setParameter(++parcount, orgcountry);
            }
            if(orgcountryGrp != null && orgcountryGrp.trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGORGCNTGRPINC,',')  >0 OR SEGORGCNTGRPINC   ='-') ");
                query.setParameter(++parcount, orgcountryGrp);
            }
            //org exclude
            query.append(" )  AND NOT( ");
            if(bookingFlightDetailVO.getOrigin() != null && bookingFlightDetailVO.getOrigin().trim().length() >0 ){
                query.append(" pkg_frmwrk.fun_check_string_common(?,SEGORGARPCODEXC,',')>0 ");
                query.setParameter(++parcount, bookingFlightDetailVO.getOrigin());
            }
            if(orgairportGrp != null && orgairportGrp.trim().length() >0 ){
                query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGORGARPGRPEXC,',')      >0 ");
                query.setParameter(++parcount, orgairportGrp);
            }
            if(orgcountry != null && orgcountry.trim().length() >0 ){
                query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGORGCNTCODEXC,',')        >0 ");
                query.setParameter(++parcount, orgcountry);
            }
            if(orgcountryGrp != null && orgcountryGrp.trim().length() >0 ){
                query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGORGCNTGRPEXC,',')      >0 ");
                query.setParameter(++parcount, orgcountryGrp);
            }
            query.append(" ) ");
            query.append(" ) ");
        } else {
            query.append("  AND ( (SEGORGARPCODINC IS NULL OR SEGORGARPCODINC ='-') AND(SEGORGCNTCODINC IS NULL OR SEGORGCNTCODINC ='-') AND (SEGORGARPGRPINC IS NULL OR SEGORGARPGRPINC='-')  AND (SEGORGCNTGRPINC IS NULL OR SEGORGCNTGRPINC = '-') ) ");
        }
        //segment destination
        if (bookingFlightDetailVO.getDestination()!= null
                && bookingFlightDetailVO.getDestination().trim().length() > 0 ) {
            String dstairportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
            String dstcountry= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
            String dstcountryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
            query.append(AND_STR);
            if(bookingFlightDetailVO.getDestination()!= null && bookingFlightDetailVO.getDestination().trim().length() >0 ){
                query.append(" (pkg_frmwrk.fun_check_string_common(?,SEGDSTARPCODINC,',') >0  OR SEGDSTARPCODINC ='-') ");
                query.setParameter(++parcount, bookingFlightDetailVO.getDestination());
            }
            if(dstairportGrp != null && dstairportGrp.trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGDSTARPGRPINC,',')  >0 OR SEGDSTARPGRPINC   ='-') ");
                query.setParameter(++parcount, dstairportGrp);
            }
            if(dstcountry != null && dstcountry.trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGDSTCNTCODINC,',')  >0 OR SEGDSTCNTCODINC   ='-') ");
                query.setParameter(++parcount, dstcountry);
            }
            if(dstcountryGrp != null && dstcountryGrp.trim().length() >0 ){
                query.append(" OR (pkg_frmwrk.fun_check_string_common(?,SEGDSTCNTGRPINC,',')  >0 OR SEGDSTCNTGRPINC   ='-') ");
                query.setParameter(++parcount, dstcountryGrp);
            }
            //org exclude
            query.append(" )AND NOT ( ");
            if(bookingFlightDetailVO.getDestination() != null && bookingFlightDetailVO.getDestination().trim().length() >0 ){
                query.append(" pkg_frmwrk.fun_check_string_common(?,SEGDSTARPCODEXC,',')>0 ");
                query.setParameter(++parcount, bookingFlightDetailVO.getDestination());
            }
            if(dstairportGrp != null && dstairportGrp.trim().length() >0 ){
                query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGDSTARPGRPEXC,',')      >0 ");
                query.setParameter(++parcount, dstairportGrp);
            }
            if(dstcountry != null && dstcountry.trim().length() >0 ){
                query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGDSTCNTCODEXC,',')        >0 ");
                query.setParameter(++parcount, dstcountry);
            }
            if(dstcountryGrp != null && dstcountryGrp.trim().length() >0 ){
                query.append(" OR pkg_frmwrk.fun_check_string_common(?,SEGDSTCNTGRPEXC,',')      >0 ");
                query.setParameter(++parcount, dstcountryGrp);
            }
            query.append(" ) ");
            query.append(" ) ");
        } else {
            query.append("  AND ( (SEGDSTARPCODINC IS NULL OR SEGDSTARPCODINC ='-') AND(SEGDSTCNTCODINC IS NULL OR SEGDSTCNTCODINC ='-') AND (SEGDSTARPGRPINC IS NULL OR SEGDSTARPGRPINC='-')  AND (SEGDSTCNTGRPINC IS NULL OR SEGDSTCNTGRPINC = '-') ) ");
        }
        return parcount;
    }
    public int constructDayOfWeeks(Query query, int parcount, Set<String> dayOfWeeks) {
        int counter;
        //For applicable on all
        query.append(AND);
        counter = 0;
        for (String dayOfWeek : dayOfWeeks) {
            if (counter != 0) {
                query.append(ANDSTRING);
            }
            query.append(" (( ALLDAYOPR LIKE ? ) ");
            query.append(" OR (ALLDAYOPR IS NULL)) ");
            query.setParameter(++parcount,'%' + dayOfWeek + '%');
            ++counter;
        }
        query.append(" ) ");
        //For applicable on any
        query.append(AND);
        counter = 0;
        for (String dayOfWeek : dayOfWeeks) {
            if (counter != 0) {
                query.append(" OR ");
            }
            query.append(" (( ANYDAYOPR LIKE ? ) ");
            query.append(" OR (ANYDAYOPR IS NULL)) ");
            query.setParameter(++parcount,'%' + dayOfWeek + '%');
            ++counter;
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructDayOfWeekDstQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                          Set<String> dayOfWeeks, BookingFlightDetailVO bookingFlightDetailVO) {
        String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.AIRPORT_GRP);
        String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY);
        String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getDestination(),ShipmentDetailsVO.COUNTRY_GRP);
        query.append(" AND ((DSTDAYOPR LIKE ?) ");
        if(bookingFlightDetailVO.getDateDestination() != null){
            query.append("AND (to_date(?,'DD-MON-YYYY') BETWEEN  date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
        }
        query.append(" OR (DSTDAYOPR IS NULL)) ");
        query.append(" AND ((STRPOS(DSTARPCODINC,?)>0 OR STRPOS(DSTARPCODEXC , ?) = 0 )  ");
        if(airportGrp!=null){
            query.append("OR (pkg_frmwrk.fun_check_string_common(DSTARPGRPINC,?,',')>0 OR pkg_frmwrk.fun_check_string_common(DSTARPGRPEXC , ?,',') = 0 ) ");
        }
        if(country!=null){
            query.append("OR (STRPOS(DSTCNTCODINC,?)>0 OR STRPOS(DSTCNTCODEXC , ?) = 0 ) ");
        }
        if(countryGrp!=null){
            query.append("OR (pkg_frmwrk.fun_check_string_common(DSTCNTGRPINC,?,',')>0 OR pkg_frmwrk.fun_check_string_common(DSTCNTGRPEXC , ?,',') = 0 ) ");
        }
        query.append("  OR ( (DSTARPCODINC IS NULL OR DSTARPCODINC ='-') AND  (DSTCNTCODINC IS NULL OR DSTCNTCODINC ='-') AND (DSTARPGRPINC IS NULL OR DSTARPGRPINC='-')  AND (DSTCNTGRPINC IS NULL OR DSTCNTGRPINC = '-') ) ");
        query.append(")");
        query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekDst() + '%');
        if(bookingFlightDetailVO.getDateDestination() != null){
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination());
        }
        query.setParameter(++parcount, bookingFlightDetailVO.getDestination() );
        query.setParameter(++parcount,bookingFlightDetailVO.getDestination());
        if(airportGrp!=null){
            query.setParameter(++parcount,airportGrp);
            query.setParameter(++parcount,airportGrp);
        }
        if(country!=null){
            query.setParameter(++parcount,country);
            query.setParameter(++parcount,country);
        }
        if(countryGrp!=null){
            query.setParameter(++parcount,countryGrp);
            query.setParameter(++parcount,countryGrp);
        }
        dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekDst());
        return parcount;
    }
    public int constructDayOfWeekViaPointQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                               Set<String> dayOfWeeks, BookingFlightDetailVO bookingFlightDetailVO) {
        String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
        String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
        String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
        query.append(" AND ((VIADAYOPR LIKE ?) ");
        if(bookingFlightDetailVO.getDateOrigin() != null){
            query.append("AND(to_date(?,'DD-MON-YYYY') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
        }
        query.append(" OR (VIADAYOPR IS NULL))  AND ((STRPOS(VIAARPCODINC,?)>0 OR STRPOS(VIAARPCODEXC , ?) = 0 )  ");
        if(airportGrp!=null){
            query.append("OR (pkg_frmwrk.fun_check_string_common(VIAARPGRPINC,?,',')>0 OR pkg_frmwrk.fun_check_string_common(VIAARPGRPEXC , ?,',') = 0 ) ");
        }
        if(country!=null){
            query.append("OR (STRPOS(VIACNTCODINC,?)>0 OR STRPOS(VIACNTCODEXC , ?) = 0 ) ");
        }
        if(countryGrp!=null){
            query.append("OR (pkg_frmwrk.fun_check_string_common(VIACNTGRPINC,?,',')>0 OR pkg_frmwrk.fun_check_string_common(VIACNTGRPEXC , ?,',') = 0 ) ");
        }
        query.append("  OR ( (VIAARPCODINC IS NULL OR VIAARPCODINC ='-') AND  (VIACNTCODINC IS NULL OR VIACNTCODINC ='-') AND (VIAARPGRPINC IS NULL OR VIAARPGRPINC='-')  AND (VIACNTGRPINC IS NULL OR VIACNTGRPINC = '-') ) ");
        query.append(")");
        query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekViaPt() + '%');
        if(bookingFlightDetailVO.getDateOrigin() != null){
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin());
        }
        query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
        query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
        if(airportGrp!=null){
            query.setParameter(++parcount,airportGrp);
            query.setParameter(++parcount,airportGrp);
        }
        if(country!=null){
            query.setParameter(++parcount,country);
            query.setParameter(++parcount,country);
        }
        if(countryGrp!=null){
            query.setParameter(++parcount,countryGrp);
            query.setParameter(++parcount,countryGrp);
        }
        dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekViaPt());
        return parcount;
    }
    public int constructDayOfWeekQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, Set<String> dayOfWeeks,
                                       BookingFlightDetailVO bookingFlightDetailVO) {
        String airportGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.AIRPORT_GRP);
        String country= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY);
        String countryGrp= getTypeValue(shipmentVO.getTypeMap(),bookingFlightDetailVO.getOrigin(),ShipmentDetailsVO.COUNTRY_GRP);
        query.append(" AND ((ORGDAYOPR LIKE ?) ");
        if(bookingFlightDetailVO.getDateOrigin() != null){
            query.append("AND(to_date(?,'DD-MON-YYYY') BETWEEN date_trunc('day',STRDAT) AND date_trunc('day',ENDDAT)) ");
        }
        query.append(" OR (ORGDAYOPR IS NULL)) AND ((STRPOS(ORGARPCODINC,?)>0 OR STRPOS(ORGARPCODEXC , ?) = 0 ) ");
        if(airportGrp!=null){
            query.append("OR (pkg_frmwrk.fun_check_string_common(ORGARPGRPINC,?,',')>0 OR pkg_frmwrk.fun_check_string_common(ORGARPGRPEXC , ?,',') = 0 ) ");
        }
        if(country!=null){
            query.append("OR (STRPOS(ORGCNTCODINC,?)>0 OR STRPOS(ORGCNTCODEXC , ?) = 0 ) ");
        }
        if(countryGrp!=null){
            query.append("OR (pkg_frmwrk.fun_check_string_common(ORGCNTGRPINC,?,',')>0 OR pkg_frmwrk.fun_check_string_common(ORGCNTGRPEXC , ?,',') = 0 ) ");
        }
        query.append("  OR ( (ORGARPCODINC IS NULL OR ORGARPCODINC ='-') AND  (ORGCNTCODINC IS NULL OR ORGCNTCODINC ='-') AND (ORGARPGRPINC IS NULL OR ORGARPGRPINC='-')  AND (ORGCNTGRPINC IS NULL OR ORGCNTGRPINC = '-') ) ");
        query.append(")");
        query.setParameter(++parcount,'%' + bookingFlightDetailVO.getDayOfWeekOrg() + '%');
        if(bookingFlightDetailVO.getDateOrigin() != null){
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin());
        }
        query.setParameter(++parcount, bookingFlightDetailVO.getOrigin() );
        query.setParameter(++parcount,bookingFlightDetailVO.getOrigin());
        if(airportGrp!=null){
            query.setParameter(++parcount,airportGrp);
            query.setParameter(++parcount,airportGrp);
        }
        if(country!=null){
            query.setParameter(++parcount,country);
            query.setParameter(++parcount,country);
        }
        if(countryGrp!=null){
            query.setParameter(++parcount,countryGrp);
            query.setParameter(++parcount,countryGrp);
        }
        dayOfWeeks.add(bookingFlightDetailVO.getDayOfWeekOrg());
        return parcount;
    }
    public int constructDateQuery(Query query, int parcount, Set<String> dates) {
        int counter;
        //For applicable on all
        query.append(AND);
        counter = 0;
        for (String dateString : dates) {
            if (counter != 0) {
                query.append(ANDSTRING);
            }
            query.append(" ((pkg_frmwrk.fun_check_string_common(?,ALLDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ALLDATEXC,',')) ");
            query.append(" OR(ALLDATINC IS NULL AND ALLDATEXC IS NULL ) ");
            query.append(" OR (ALLDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ALLDATEXC,',')) )");
            query.setParameter(++parcount, dateString);
            query.setParameter(++parcount, dateString);
            query.setParameter(++parcount, dateString);
            query.setParameter(++parcount, dateString);
            query.setParameter(++parcount, dateString);
            ++counter;
        }
        query.append(" ) ");
        //For applicable on any
        query.append(AND);
        counter = 0;
        for (String dateString : dates) {
            if (counter != 0) {
                query.append(" OR ");
            }
            query.append(" ((pkg_frmwrk.fun_check_string_common(?,ANYDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ANYDATEXC,',')) ");
            query.append(" OR(ANYDATINC IS NULL AND ANYDATEXC IS NULL ) ");
            query.append(" OR (ANYDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ANYDATEXC,',')) )");
            query.setParameter(++parcount, dateString);
            query.setParameter(++parcount, dateString);
            query.setParameter(++parcount, dateString);
            query.setParameter(++parcount, dateString);
            query.setParameter(++parcount, dateString);
            ++counter;
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructDateFilterQuery(Query query, int parcount, Set<String> dates,
                                        BookingFlightDetailVO bookingFlightDetailVO) {
        if (bookingFlightDetailVO.getDateOrigin() != null) {
            query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ORGDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ORGDATEXC,',')) ");
            query.append(" OR ( ORGDATINC IS NULL AND ORGDATEXC IS NULL ) ");
            query.append(" OR (ORGDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ORGDATEXC,',')) )");
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateOrigin().toUpperCase());
            dates.add(bookingFlightDetailVO.getDateOrigin().toUpperCase());
        }
        else {
            query.append(" AND (ORGDATINC IS NULL AND ORGDATEXC IS NULL) ");
        }
        if (bookingFlightDetailVO.getDateViaPoint() != null) {
            query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,VIADATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,VIADATEXC,',')) ");
            query.append(" OR (VIADATINC IS NULL AND VIADATEXC IS NULL) ");
            query.append(" OR (VIADATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,VIADATEXC,',')) )");
            query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateViaPoint().toUpperCase());
            dates.add(bookingFlightDetailVO.getDateViaPoint().toUpperCase());
        } else {
            query.append(" AND (VIADATINC IS NULL AND VIADATEXC IS NULL ) ");
        }
        if (bookingFlightDetailVO.getDateDestination() != null) {
            query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,DSTDATINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,DSTDATEXC,',')) ");
            query.append(" OR ( DSTDATINC IS NULL AND DSTDATEXC IS NULL ) ");
            query.append(" OR (DSTDATINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,DSTDATEXC,',')) )");
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
            query.setParameter(++parcount, bookingFlightDetailVO.getDateDestination().toUpperCase());
            dates.add(bookingFlightDetailVO.getDateDestination().toUpperCase());
        } else {
            query.append(" AND (DSTDATINC IS NULL AND DSTDATEXC IS NULL) ");
        }
        return parcount;
    }
    public int constructTimeQuery(Query query, int parcount, String dataBaseSystemDate, Set<String> times,
                                  int counter) {
        for (String time : times) {
            if (counter != 0) {
                query.append(ANDSTRING);
            }
            query.append(" ((( (");
            query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')|| ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS')=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS')=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYYSTRING);
            // case 2
            query.append(" OR ((TO_DATE(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS')>=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND ALLSTRTIM is  NULL AND ALLENDTIM is not NULL ))");
            // case 3
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND ALLENDTIM is NULL AND ALLSTRTIM is not NULL ))");
            // case 4
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLENDTIM, 'dd-MON-yyyy HH24:MI:SS')>=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ALLSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DATABASE_SYSTEM_DATE);
            query.append("  OR(ALLSTRTIM is NULL AND ALLENDTIM is NULL) ) ))");
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            ++counter;
        }
        query.append(" ) ");
        //For applicable on any
        query.append(AND);
        counter = 0;
        for (String time : times) {
            if (counter != 0) {
                query.append(" OR ");
            }
            query.append(" ((( (");
            query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS')= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS')= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYYSTRING);
            // case 2
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS')>= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND ANYSTRTIM is NULL AND ANYENDTIM is not NULL ))");
            // case 3
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(" AND ANYENDTIM is  NULL AND ANYSTRTIM is not NULL ) )");
            // case 4
            query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYENDTIM, 'dd-MON-yyyy HH24:MI:SS')>= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
            query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ANYSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DATABASE_SYSTEM_DATE);
            query.append("  OR( ANYSTRTIM is  NULL AND ANYENDTIM is NULL ) )))");
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            query.setParameter(++parcount,time);
            ++counter;
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructViaTimes(Query query, int parcount, String dataBaseSystemDate, Set<String> times,
                                 BookingFlightDetailVO bookingFlightDetailVO) {
        // case 1: eq
        query.append(AND_QUERY);
        query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')|| VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS')= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS')= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYYSTRING);
        // case 2
        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS')>= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(" AND VIASTRTIM is NULL AND VIAENDTIM is not NULL ))");
        // case 3
        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(" AND VIAENDTIM is NULL AND VIASTRTIM is not NULL ))");
        // case 4
        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||VIAENDTIM, 'dd-MON-yyyy HH24:MI:SS')>= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||VIASTRTIM, 'dd-MON-yyyy HH24:MI:SS')<=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DATABASE_SYSTEM_DATE);
        query.append("  OR(VIASTRTIM is NULL AND VIAENDTIM is NULL) ) ))");
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeViaPoint());
        times.add(bookingFlightDetailVO.getTimeViaPoint());
        return parcount;
    }
    public int constructDestTimes(Query query, int parcount, String dataBaseSystemDate, Set<String> times,
                                  BookingFlightDetailVO bookingFlightDetailVO) {
        // case 1: eq
        query.append(AND_QUERY);
        query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')|| DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYYSTRING);
        // case 2
        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS')>=TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(" AND DSTSTRTIM is NULL AND DSTENDTIM is not NULL))");
        // case 3
        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(" AND DSTENDTIM is NULL AND DSTSTRTIM is not NULL))");
        // case 4
        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTENDTIM, 'dd-MON-yyyy HH24:MI:SS')>= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||DSTSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DATABASE_SYSTEM_DATE);
        query.append("  OR(DSTSTRTIM is NULL AND DSTENDTIM is NULL) )))");
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeDestination());
        times.add(bookingFlightDetailVO.getTimeDestination());
        return parcount;
    }
    public int constructOriginTimes(Query query, int parcount, String dataBaseSystemDate, Set<String> times,
                                    BookingFlightDetailVO bookingFlightDetailVO) {
        // case 1: eq
        query.append(AND_QUERY);
        query.append(TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ') || ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')|| ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') = TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYYSTRING);
        // case 2
        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS')>= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(" AND ORGSTRTIM is NULL AND ORGENDTIM is not NULL))");
        // case 3
        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(" AND ORGENDTIM is NULL AND ORGSTRTIM is not NULL))");
        // case 4
        query.append(TO_DATE_CONVERSION+dataBaseSystemDate+",'dd-MON-yyyy ')|| ORGENDTIM, 'dd-MON-yyyy HH24:MI:SS') >= TO_TIMESTAMP(to_char("+dataBaseSystemDate+DDMMYYYY);
        query.append(AND_TO_DATE_QUERY+dataBaseSystemDate+",'dd-MON-yyyy ')||ORGSTRTIM, 'dd-MON-yyyy HH24:MI:SS')<= TO_TIMESTAMP(to_char("+dataBaseSystemDate+",'dd-MON-yyyy ')|| ?,'dd-MON-yyyy HH24:MI:SS') ) ) ");
        query.append("  OR(ORGSTRTIM is NULL AND ORGENDTIM is NULL) )))");
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
        query.setParameter(++parcount,bookingFlightDetailVO.getTimeOrigin());
        times.add(bookingFlightDetailVO.getTimeOrigin());
        return parcount;
    }
    public int constructCarrierCodeQuery(Query query, int parcount, Set<String> carrierCodes, int counter) {
        for (String carrier : carrierCodes) {
            if (counter != 0) {
                query.append(ANDSTRING);
            }
			query.append(" (coalesce (strpos (CARRALLINC,?),0) >0 AND 1 > pkg_frmwrk.fun_check_string_common(?,CARRALLEXC,',')) ");
            query.setParameter(++parcount, carrier);
            query.setParameter(++parcount, carrier);
            ++counter;
        }
        counter = 0;
        query.append(" )OR ( ");
        for (String carrier : carrierCodes) {
            if (counter != 0) {
                query.append(ANDSTRING);
            }
			query.append(" (CARRALLINC='-' AND ( 1 > pkg_frmwrk.fun_check_string_common(?,CARRALLEXC,','))) ");
            query.setParameter(++parcount, carrier);
            ++counter;
        }
        query.append(" ) OR ( CARRALLINC IS NULL AND CARRALLEXC IS NULL) ) ");
        //For applicable on any
        query.append("  AND( ( ");
        counter = 0;
        for (String carrier : carrierCodes) {
            if (counter != 0) {
                query.append(" OR ");
            }
			query.append(" (coalesce (strpos (CARRANYINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRANYEXC,',')) ");
            query.setParameter(++parcount, carrier);
            query.setParameter(++parcount, carrier);
            ++counter;
        }
        counter = 0;
        query.append(" )OR ( ");
        for (String carrier : carrierCodes) {
            if (counter != 0) {
                query.append(" OR ");
            }
			query.append(" (CARRANYINC='-' AND ( 1 > pkg_frmwrk.fun_check_string_common(?,CARRANYEXC,','))) ");
            query.setParameter(++parcount, carrier);
            ++counter;
        }
        query.append(" ) OR ( CARRANYINC IS NULL AND CARRANYEXC IS NULL) ) ");
        return parcount;
    }
    public int constructOriginCarrierCode(Query query, int parcount, Set<String> carrierCodes,
                                          BookingFlightDetailVO bookingFlightDetailVO) {
		query.append(" ((coalesce (strpos (CARRORGINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRORGEXC,',')) ");
        query.append(" OR (CARRORGINC IS NULL  AND CARRORGEXC IS NULL) ");
		query.append(" OR (CARRORGINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRORGEXC,',')) )");
        query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
        query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
        query.setParameter(++parcount, bookingFlightDetailVO.getCarrierOrigin());
        carrierCodes.add(bookingFlightDetailVO.getCarrierOrigin());
        return parcount;
    }
    public int constructDestCarrierCode(Query query, int parcount, Set<String> carrierCodes,
                                        BookingFlightDetailVO bookingFlightDetailVO) {
		query.append(" ((coalesce (strpos (CARRDSTINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRDSTEXC,',')) ");
        query.append(" OR(CARRDSTINC IS NULL AND CARRDSTEXC IS NULL) ");
		query.append(" OR (CARRDSTINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRDSTEXC,',')) )");
        query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
        query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
        query.setParameter(++parcount, bookingFlightDetailVO.getCarrierDestination());
        carrierCodes.add(bookingFlightDetailVO.getCarrierDestination());
        return parcount;
    }
    public int constructViaCarrierCode(Query query, int parcount, Set<String> carrierCodes,
                                       BookingFlightDetailVO bookingFlightDetailVO) {
		query.append(" ((coalesce (strpos (CARRVIAINC,?),0) >0 AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRVIAEXC,',')) ");
        query.append(" OR(CARRVIAINC IS NULL AND CARRVIAEXC IS NULL) ");
		query.append(" OR (CARRVIAINC='-' AND  1 > pkg_frmwrk.fun_check_string_common(?,CARRVIAEXC,',')) )");
        query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
        query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
        query.setParameter(++parcount, bookingFlightDetailVO.getCarrierViaPoint());
        carrierCodes.add(bookingFlightDetailVO.getCarrierViaPoint());
        return parcount;
    }
    public int constructParameterFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        for (String parameterCode : shipmentVO.getMap().keySet()) {
            if(ShipmentDetailsVO.MAIL_CLASS.equals(parameterCode)){
                parcount = constructMailClassQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.MAIL_CATEGORY.equals(parameterCode)){
                parcount = constructMailCategoryQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.MAIL_SUB_CLS.equals(parameterCode)){
                parcount = constructMailSubClassFilterQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.MAIL_SUB_CLS_GRP.equals(parameterCode)){
                parcount = constructMailSubClassGroupQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.CARRIER_ORG.equals(parameterCode)){
                parcount = constructCarrierOriginQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.CARRIER_DST.equals(parameterCode)){
                parcount = constructCarrierDestinationQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.CARRIER_VIA.equals(parameterCode)){
                parcount = constructCarrierViaQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.CARRIER_ALL.equals(parameterCode)) {
                parcount = constructCarrierAllQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.SHARED_COMMODITY.equals(parameterCode)){
                parcount = constructSharedCommodityQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.PKGINS.equals(parameterCode)){
                parcount = constructPackageInstructionQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.SHARED_SCC.equals(parameterCode)){
                parcount = constructSharedSCCQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.AGENT.equals(parameterCode)){
                parcount = constructAgentQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.SHIPPER.equals(parameterCode)){
                parcount = constructShipperQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.CONSIGNEE.equals(parameterCode)){
                parcount = constructConsigneeQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.SHARED_PAYTYP.equals(parameterCode)){
                parcount = constructPayTypeQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTNUM_ORG.equals(parameterCode)){
                parcount = constructFlightNumberOriginQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTNUM_DST.equals(parameterCode)){
                parcount = constructFlightNumberDestQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTNUM_VIA.equals(parameterCode)){
                parcount = constructFlightNumViaQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTNUM_ALL.equals(parameterCode)) {
                parcount = constructFlightNumberAllQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.PRODUCT.equals(parameterCode)){
                parcount = constructProductQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.DV_CUSTOMS.equals(parameterCode)){
                parcount = constructDVCustomsQuery(shipmentVO, query, parcount, parameterCode);
            } else if (ShipmentDetailsVO.UNID_WEIGHT.equals(parameterCode)) {
                parcount = constructUnidWeightQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.DV_CARRIAGE.equals(parameterCode)){
                parcount = constructCarriageQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.GOODS.equals(parameterCode)){
                parcount = constructGoodsQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.AWB_PREFIX.equals(parameterCode)){
                parcount = constructAWBPrefixQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTTYPE_ORG.equals(parameterCode)){
                parcount = constructFligthTypeOriginQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTTYPE_DST.equals(parameterCode)){
                parcount = constructFligthTypeDestinationQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTTYPE_VIA.equals(parameterCode)){
                parcount = constructFligthTypeViaQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTTYPE_ALL.equals(parameterCode)) {
                parcount = constructFlightAllQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.SCC_GROUP.equals(parameterCode)){
                parcount = constructSCCGroupQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.AGENTGRP.equals(parameterCode)){
                parcount = constructAgentGroupFilterQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.SHIPPER_GROUP.equals(parameterCode)){
                parcount = constructShipperGroupQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.CONSIGNEE_GROUP.equals(parameterCode)){
                parcount = constructConsigneeGroupQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTOWR_ORG.equals(parameterCode)){
                parcount = constructFlightOwnerOriginQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTOWR_DST.equals(parameterCode)){
                parcount = constructFlightOwnerDestinationQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTOWR_VIA.equals(parameterCode)){
                parcount = constructFlightOwnerViaQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.FLTOWR_ALL.equals(parameterCode)) {
                parcount = constructFlightAllOwnerQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.AIRLINE_GRP_ORG.equals(parameterCode)) {
                parcount = constructAirlineGroupOriginQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.AIRLINE_GRP_DST.equals(parameterCode)) {
                parcount = constructAirlineGroupDstQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.AIRLINE_GRP_VIA.equals(parameterCode)) {
                parcount = constructAirlineGroupViaQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.AIRLINE_GRP_ALL.equals(parameterCode)) {
                parcount = constructAirlineGroupAllQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.UN_NUMBER.equals(parameterCode)){
                parcount = constructUNNumberQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.ULD_POSITION.equals(parameterCode)){
                parcount = constructUldPositionQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.ULD_TYPE.equals(parameterCode)){
                parcount = constructUldTypeQuery(shipmentVO, query, parcount, parameterCode);
            } else if(ShipmentDetailsVO.HEIGHT.equals(parameterCode)){
                parcount = constructHeightQuery(shipmentVO, query, parcount, parameterCode);
			} else if (ShipmentDetailsVO.UNID_PACKGING_GROUP.equals(parameterCode)) {
				parcount = constructUnidPackgingGroupQuery(shipmentVO, query, parcount, parameterCode);
			} else if (ShipmentDetailsVO.UNID_SUB_RISK.equals(parameterCode)) {
				parcount = constructUnidSubRiskQuery(shipmentVO, query, parcount, parameterCode);
			}else{
                parcount = constructFlightParamterQuery(shipmentVO, query, parcount, parameterCode);
            }
        }
        return parcount;
    }
    public int constructFlightParamterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        if(ShipmentDetailsVO.SERVICE_CARGO_CLASS.equals(parameterCode)){
            parcount = constructServiceCargoClassQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.SHIPMENT_TYPE.equals(parameterCode)){
            parcount = constructShipmentTypeQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.CONSOL.equals(parameterCode)){
            parcount = constructConsoleQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.UNIDs.equals(parameterCode)){
            parcount = constructUnidsQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.LENGTH.equals(parameterCode)){
            parcount = constructLengthQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.WIDTH.equals(parameterCode)){
            parcount = constructWidthQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.WEIGHT.equals(parameterCode)){
            parcount = constructWeightQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.PER_PIECE_WEIGHT.equals(parameterCode)){
            parcount = constructPerPieceWeightQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.ULD.equals(parameterCode)){
            parcount = constructULDQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.VOLUME.equals(parameterCode)){
            parcount = constructVolumeQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.NUMSTP.equals(parameterCode)){
            parcount = constructNumOfStopQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.SERVICE_TYPE.equals(parameterCode)){
            parcount = constructServiceTypeQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.SERVICE_TYPE_FOR_TECHNICAL_STOP.equals(parameterCode)){
            parcount = constructServiceTypeForTechnicalStopQuery(shipmentVO, query, parcount, parameterCode);
        } else if("ACRTYPORG".equals(parameterCode)){
            parcount = constructAircraftTypeOriginQuery(shipmentVO, query, parcount, parameterCode);
        } else if("ACRTYPDST".equals(parameterCode)){
            parcount = constructAircraftTypeDestQuery(shipmentVO, query, parcount, parameterCode);
        } else if("ACRTYPVIA".equals(parameterCode)){
            parcount = constructAircraftTypeViaQuery(shipmentVO, query, parcount, parameterCode);
        } else if("ACRTYPALL".equals(parameterCode)) {
            parcount = constructAircraftTypeAllQuery(shipmentVO, query, parcount, parameterCode);
        } else if("ACRTYPGRPORG".equals(parameterCode)){
            parcount = constructAircraftTypeGroupOriginQuery(shipmentVO, query, parcount, parameterCode);
        } else if("ACRTYPGRPDST".equals(parameterCode)){
            parcount = constructAircraftTypeGroupDestQuery(shipmentVO, query, parcount, parameterCode);
        } else if("ACRTYPGRPVIA".equals(parameterCode)){
            parcount = constructAircraftTypeGroupViaQuery(shipmentVO, query, parcount, parameterCode);
        } else if("ACRTYPGRPALL".equals(parameterCode)) {
            parcount = constructAircraftGroupAllQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_ORIGIN.equals(parameterCode)){
            parcount = constructAircraftClassOriginQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_DESTINATION.equals(parameterCode)){
            parcount = constructAircraftClassDestinationQuery(shipmentVO, query, parcount,parameterCode);
        } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_VIA_POINT.equals(parameterCode)){
            parcount = constructAircraftClassViaQuery(shipmentVO, query, parcount, parameterCode);
        } else if(ShipmentDetailsVO.AIRCRAFT_CLASS_ALL.equals(parameterCode)) {
            parcount = constructAircraftClassificationQuery(shipmentVO, query, parcount, parameterCode);
        }else{
            //nothing to do
        }
        return parcount;
    }
    public int constructAircraftTypeGroupOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                     String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ACRTYPGRPORGINC IS NULL OR ACRTYPGRPORGINC='-' ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPORGEXC,',')) ");
                query.append(" OR(ACRTYPGRPORGINC IS NULL AND ACRTYPGRPORGEXC IS NULL) ");
                query.append(" OR (ACRTYPGRPORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPORGEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }
    public int constructAircraftTypeGroupDestQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                   String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ACRTYPGRPDSTINC IS NULL OR ACRTYPGRPDSTINC='-' ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPDSTEXC,',')) ");
                query.append(" OR(ACRTYPGRPDSTINC IS NULL AND ACRTYPGRPDSTEXC IS NULL) ");
                query.append(" OR (ACRTYPGRPDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPDSTEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }
    public int constructAircraftTypeAllQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                             String parameterCode) {
        int count;
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" AND (ACRTYPALLINC IS NULL AND ACRTYPALLEXC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ACRTYPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPALLEXC,',')) ");
                query.append(" OR(ACRTYPALLINC IS NULL AND ACRTYPALLEXC IS NULL) ");
                query.append(" OR (ACRTYPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPALLEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
        }
        count =0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" (ACRTYPANYINC IS NULL AND ACRTYPANYEXC IS NULL) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(" ((pkg_frmwrk.fun_check_string_common(?,ACRTYPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPANYEXC,',')) ");
                query.append(" OR(ACRTYPANYINC IS NULL AND ACRTYPANYEXC IS NULL) ");
                query.append(" OR (ACRTYPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPANYEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructAircraftTypeViaQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                             String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ACRTYPVIAINC IS NULL) ");
            } else if(parameterValue!=null){
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ACRTYPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPVIAEXC,',')) ");
                query.append(" OR(ACRTYPVIAINC IS NULL AND ACRTYPVIAEXC IS NULL) ");
                query.append(" OR (ACRTYPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPVIAEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }else{
                //nothing to do
            }
        }
        return parcount;
    }
    public int constructAircraftTypeDestQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                              String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ACRTYPDSTINC IS NULL) ");
            } else {
            String[] split = parameterValue.split(",");
            query.append(AND);
            int i= 0;
            for(String value : split) {

                if (i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;
                query.append(" ( ((coalesce (strpos (ACRTYPDSTINC,?),0)  >0 " +
                        "AND 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPDSTEXC,',')) ");
                    query.append(" OR(ACRTYPDSTINC IS NULL AND ACRTYPDSTEXC IS NULL) ");
                query.append(" OR (ACRTYPDSTINC='-' AND 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPDSTEXC,',')) ))");
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
            }
            query.append(")");
            }
        }
        return parcount;
    }
    public int constructAircraftTypeOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ACRTYPORGINC IS NULL) ");
            } else {
            String[] split = parameterValue.split(",");
            query.append(AND);
            int i= 0;
            for(String value : split) {

                if (i != 0) {
                    query.append(OR_WITHOUT_BRAKET);
                }
                i++;

                query.append(" ( ((coalesce (strpos (ACRTYPORGINC,?),0)  >0 AND 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPORGEXC,',')) ");
                    query.append(" OR(ACRTYPORGINC IS NULL AND ACRTYPORGEXC IS NULL) ");
                query.append(" OR (ACRTYPORGINC='-' AND 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPORGEXC,','))) )");
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);
                query.setParameter(++parcount, value);

            }
            query.append(")");
            }
        }
        return parcount;
    }
    public int constructServiceTypeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                         String parameterCode) {
        int serviceCount = 0;
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if(serviceCount>0) {
                query.append(OR);
            }
            else {
                query.append(AND);
            }
            if (TILDE.equals(parameterValue)) {
                query.append(" SRVCTYPINC IS NULL ");
            } else {
                query.append(" (pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPEXC),',')) ");
                query.append(" OR (SRVCTYPINC IS NULL AND SRVCTYPEXC IS NULL) ");
                query.append(" OR (SRVCTYPINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPEXC),',')) ");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.append(serviceCount>0 ? ")":" ");
            }
            serviceCount++;
        }
        query.append( ")" );
        return parcount;
    }
    public int constructServiceTypeForTechnicalStopQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                         String parameterCode) {
        int serviceCount = 0;
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if(serviceCount>0) {
                query.append(OR);
            }
            else {
                query.append(AND);
            }
            if (TILDE.equals(parameterValue)) {
                query.append(" SRVCTYPFRTECSTPINC IS NULL ");
            } else {
                query.append(" (pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPFRTECSTPINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPFRTECSTPEXC),',')) ");
                query.append(" OR (SRVCTYPFRTECSTPINC IS NULL AND SRVCTYPFRTECSTPEXC IS NULL) ");
                query.append(" OR (SRVCTYPFRTECSTPINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPFRTECSTPEXC),',')) ");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.append(serviceCount>0 ? ")":" ");
            }
            serviceCount++;
        }
        query.append( ")" );
        return parcount;
    }
    public int constructUnidPackgingGroupQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
			String parameterCode) {
		for (String parameterValue : shipmentVO.getMap().get(parameterCode)) {
			if (TILDE.equals(parameterValue)) {
				query.append(" AND(PKGGRPINC IS NULL) ");
			} else {
				query.append(
						" AND ((pkg_frmwrk.fun_check_string_common(?,PKGGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,PKGGRPEXC,',')) ");
				query.append(" OR(PKGGRPINC IS NULL AND PKGGRPEXC IS NULL ) ");
				query.append(
						" OR (PKGGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,PKGGRPEXC,',')) ");

				query.append(" )");
				query.setParameter(++parcount, parameterValue);
				query.setParameter(++parcount, parameterValue);
				query.setParameter(++parcount, parameterValue);
				query.setParameter(++parcount, parameterValue);
				query.setParameter(++parcount, parameterValue);
			}
		}
		return parcount;
	}
	public int constructUnidSubRiskQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
			String parameterCode){
		for (String parameterValue : shipmentVO.getMap().get(parameterCode)) {
			if (TILDE.equals(parameterValue)) {
				query.append(" AND(SUBRSKINC IS NULL) ");
			} else {
				query.append(
						" AND ((pkg_frmwrk.fun_check_string_common(?,SUBRSKINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SUBRSKEXC,',')) ");
				query.append(" OR(SUBRSKINC IS NULL AND SUBRSKEXC IS NULL ) ");
				query.append(
						" OR (SUBRSKINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SUBRSKEXC,',')) ");

				query.append(" )");
				query.setParameter(++parcount, parameterValue);
				query.setParameter(++parcount, parameterValue);
				query.setParameter(++parcount, parameterValue);
				query.setParameter(++parcount, parameterValue);
				query.setParameter(++parcount, parameterValue);
			}
		}
		return parcount;
	}
    public int constructNumOfStopQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (NUMSTPSTR IS NULL AND NUMSTPEND IS NULL) ");
            } else {
                query.append(AND);
                query.append(" ((((NUMSTPSTR =? AND NUMSTPEND =?)");
                query.append(" OR (TO_NUMBER(NUMSTPEND)>=TO_NUMBER(?)  AND NUMSTPSTR is  NULL)");
                query.append(" OR (TO_NUMBER(NUMSTPSTR)<=TO_NUMBER(?)  AND NUMSTPEND is  NULL)");
                query.append(" OR (NUMSTPSTR IS NULL AND NUMSTPEND IS NULL) ");
                query.append(" OR (TO_NUMBER(NUMSTPEND)>=TO_NUMBER(?) AND TO_NUMBER(NUMSTPSTR)<=TO_NUMBER(?) ))))");
                query.setParameter(++parcount,parameterValue);
                query.setParameter(++parcount,parameterValue);
                query.setParameter(++parcount,parameterValue);
                query.setParameter(++parcount,parameterValue);
                query.setParameter(++parcount,parameterValue);
                query.setParameter(++parcount,parameterValue);
                query.append(" ) ");
            }
        }
        return parcount;
    }
    public int constructUnidsQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(UNCLSINC IS NULL) ");
            } else {
                int unidCounter=0;
                query.append(AND);
                for (String unid : parameterValue.split(",")) {
                    if (unidCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" ((pkg_frmwrk.fun_check_string_common(?,UNCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,UNCLSEXC,',')) ");
                    query.append(" OR(UNCLSINC IS NULL AND UNCLSEXC IS NULL) ");
                    query.append(" OR (UNCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,UNCLSEXC,',')) )");
                    parcount++;
                    query.setParameter(parcount, unid);
                    parcount++;
                    query.setParameter(parcount, unid);
                    parcount++;
                    query.setParameter(parcount, unid);
                    parcount++;
                    query.setParameter(parcount, unid);
                    parcount++;
                    query.setParameter(parcount, unid);
                    ++unidCounter;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }
    public int constructConsoleQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (CNSLINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,CNSLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,CNSLEXC,',')) ");
                query.append(" OR (CNSLINC IS NULL AND CNSLEXC IS NULL) ");
                query.append(" OR (CNSLEXC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,CNSLEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }
    public int constructUldTypeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ULDTYPINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ULDTYPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ULDTYPEXC,',')) ");
                query.append(" OR (ULDTYPINC IS NULL AND ULDTYPEXC IS NULL) ");
                query.append(" OR (ULDTYPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ULDTYPEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }
    public int constructUldPositionQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                         String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ULDPOSINC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ULDPOSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ULDPOSEXC,',')) ");
                query.append(" OR (ULDPOSINC IS NULL AND ULDPOSEXC IS NULL) ");
                query.append(" OR (ULDPOSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ULDPOSEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }
    public int constructFlightAllOwnerQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                            String parameterCode) {
        int count;
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" AND(FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTOWRALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRALLEXC,',')) ");
                query.append(" OR(FLTOWRALLINC IS NULL AND FLTOWRALLEXC IS NULL) ");
                query.append(" OR (FLTOWRALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRALLEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
        }
        count =0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" (FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(" ((pkg_frmwrk.fun_check_string_common(?,FLTOWRANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRANYEXC,',')) ");
                query.append(" OR(FLTOWRANYINC IS NULL AND FLTOWRANYEXC IS NULL) ");
                query.append(" OR (FLTOWRANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTOWRANYEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructAircraftTypeGroupViaQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                  String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (ACRTYPGRPVIAINC IS NULL OR ACRTYPGRPVIAINC='-' ) ");
            } else if(parameterValue!=null){
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPVIAEXC,',')) ");
                query.append(" OR(ACRTYPGRPVIAINC IS NULL AND ACRTYPGRPVIAEXC IS NULL) ");
                query.append(" OR (ACRTYPGRPVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPVIAEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }else{
                //nothing to do
            }
        }
        return parcount;
    }
    public int constructAircraftGroupAllQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                              String parameterCode) {
        int count =0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" (ACRTYPGRPALLINC IS NULL AND ACRTYPGRPALLEXC IS NULL) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(" ((pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPALLEXC,',')) ");
                query.append(" OR(ACRTYPGRPALLINC IS NULL AND ACRTYPGRPALLEXC IS NULL) ");
                query.append(" OR (ACRTYPGRPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPALLEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");
        count =0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" (ACRTYPGRPANYINC IS NULL AND ACRTYPGRPANYEXC IS NULL) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(" ((pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPANYEXC,',')) ");
                query.append(" OR(ACRTYPGRPANYINC IS NULL AND ACRTYPGRPANYEXC IS NULL) ");
                query.append(" OR (ACRTYPGRPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,ACRTYPGRPANYEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructAgentGroupFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                              String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND(AGTGRPINC IS NULL OR AGTGRPINC='-' ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,AGTGRPINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,AGTGRPEXC,',')) ");
                query.append(" OR(AGTGRPINC IS NULL AND AGTGRPEXC IS NULL ) ");
                query.append(" OR (AGTGRPINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,AGTGRPEXC,',')) )");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
            }
        }
        return parcount;
    }
    public int constructFlightAllQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        int count;
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" AND(FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTTYPALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPALLEXC,',')) ");
                query.append(" OR(FLTTYPALLINC IS NULL AND FLTTYPALLEXC IS NULL) ");
                query.append(" OR (FLTTYPALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPALLEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
        }
        count =0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" (FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL ) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(" ((pkg_frmwrk.fun_check_string_common(?,FLTTYPANYINC,',') >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPANYEXC,',')) ");
                query.append(" OR(FLTTYPANYINC IS NULL AND FLTTYPANYEXC IS NULL) ");
                query.append(" OR (FLTTYPANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTTYPANYEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructCarriageQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if ("~".equals(parameterValue)) {
                query.append(" AND(DVCRGSTR IS NULL AND DVCRGEND IS NULL) ");
            } else {
                int dvCounter = 0;
                query.append(AND);
                for (String dvForCarriage : parameterValue.split(",")) {
                    if (dvCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" ((((TO_NUMBER(DVCRGSTR) = TO_NUMBER(?) AND TO_NUMBER(DVCRGEND) =TO_NUMBER(?))");
                    query.append(" \tOR(TO_NUMBER(DVCRGEND)>=TO_NUMBER(?) AND DVCRGSTR is  NULL)");
                    query.append(" \tOR (TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?) AND DVCRGEND is  NULL)");
                    query.append(" OR(DVCRGSTR IS NULL AND DVCRGEND IS NULL ) ");
                    query.append(" \tOR(TO_NUMBER(DVCRGEND)>=TO_NUMBER(?) AND TO_NUMBER(DVCRGSTR)<=TO_NUMBER(?) ))))");
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    parcount++;
                    query.setParameter(parcount, dvForCarriage);
                    dvCounter++;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }
    public int constructUnidWeightQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if ("~".equals(parameterValue)) {
                query.append(" AND (UNWGTSTR IS NULL AND UNWGTEND IS NULL) ");
            } else {
                int weightCounter = 0;
                query.append(AND);
                for (String unWeight : parameterValue.split(",")) {
                    if (weightCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" ((((UNWGTSTR =? AND UNWGTEND =?)");
                    query.append(" \tOR (TO_NUMBER(UNWGTEND)>=TO_NUMBER(?) AND UNWGTSTR is NULL)");
                    query.append(" \tOR (TO_NUMBER(UNWGTSTR)<=TO_NUMBER(?) AND UNWGTEND is NULL)");
                    query.append(" OR (UNWGTSTR IS NULL AND UNWGTEND IS NULL) ");
                    query.append(" \tOR (TO_NUMBER(UNWGTEND)>=TO_NUMBER(?)  AND TO_NUMBER(UNWGTSTR)<=TO_NUMBER(?) ))))");
                    parcount++;
                    query.setParameter(parcount, unWeight);
                    parcount++;
                    query.setParameter(parcount, unWeight);
                    parcount++;
                    query.setParameter(parcount, unWeight);
                    parcount++;
                    query.setParameter(parcount, unWeight);
                    parcount++;
                    query.setParameter(parcount, unWeight);
                    parcount++;
                    query.setParameter(parcount, unWeight);
                    weightCounter++;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }
    public int constructCustomsQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if ("~".equals(parameterValue)) {
                query.append(" AND(DVCSTSTR IS NULL AND DVCSTEND IS NULL) ");
            }else{
                int dvCounter = 0;
                query.append(AND);
                for (String dvForCustoms : parameterValue.split(",")) {
                    if (dvCounter > 0) {
                        query.append(" OR ");
                    }
                    query.append(" ((((DVCSTSTR =? AND  DVCSTEND =?)");
                    query.append(" \tOR (TO_NUMBER(DVCSTEND)>=TO_NUMBER(?) AND DVCSTSTR is NULL)");
                    query.append(" \tOR (TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?) AND DVCSTEND is NULL)");
                    query.append(" OR(DVCSTSTR IS NULL AND DVCSTEND IS NULL ) ");
                    query.append(" \tOR(TO_NUMBER(DVCSTEND)>=TO_NUMBER(?) AND TO_NUMBER(DVCSTSTR)<=TO_NUMBER(?) ))))");
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    parcount++;
                    query.setParameter(parcount, dvForCustoms);
                    dvCounter++;
                }
                query.append(" ) ");
            }
        }
        return parcount;
    }
    public int constructFlightNumberAllQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                             String parameterCode) {
        int count;
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" AND (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL AND FLTNUMALLGTEQ IS NULL AND FLTNUMALLLTEQ IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTNUMALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMALLEXC,',')) ");
                query.append(" OR (FLTNUMALLINC IS NULL AND FLTNUMALLEXC IS NULL AND FLTNUMALLGTEQ IS NULL AND FLTNUMALLLTEQ IS NULL ) ");
                query.append(" OR (FLTNUMALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMALLEXC,','))");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                String[] parameterValues=paramValue.split(",");
                for(int i=0;i<parameterValues.length;i++){
                    if(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY).length()>0){
                        query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMALLGTEQ, '[^0-9]', '','g'))<=?  AND FLTNUMALLLTEQ is  NULL AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMALLLTEQ, '[^0-9]', '','g'))>=?  AND FLTNUMALLGTEQ is  NULL AND (regexp_replace(FLTNUMALLLTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMALLGTEQ, '[^0-9]', '','g'))<=?  AND TO_NUMBER(regexp_replace(FLTNUMALLLTEQ, '[^0-9]', '','g'))>=? AND (regexp_replace(FLTNUMALLGTEQ, '[^A-Z]', '','g')=? OR regexp_replace(FLTNUMALLLTEQ, '[^A-Z]', '','g')=?)) ");
                        query.append("))))");
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                    }
                }
                query.append(" )");
            }
        }
        count =0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL ) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(" ((pkg_frmwrk.fun_check_string_common(?,FLTNUMANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMANYEXC,',')) ");
                query.append(" OR (FLTNUMANYINC IS NULL AND FLTNUMANYEXC IS NULL AND FLTNUMANYGTEQ IS NULL AND FLTNUMANYLTEQ IS NULL) ");
                query.append(" OR (FLTNUMANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMANYEXC,',')) ");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                String[] parameterValues=paramValue.split(",");
                for(int i=0;i<parameterValues.length;i++){
                    if(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY).length()>0){
                        query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMANYGTEQ, '[^0-9]', '','g'))<=?  AND FLTNUMANYLTEQ is  NULL AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMANYLTEQ, '[^0-9]', '','g'))>=?  AND FLTNUMANYGTEQ is  NULL AND (regexp_replace(FLTNUMANYLTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMANYGTEQ, '[^0-9]', '','g'))<=?  AND TO_NUMBER(regexp_replace(FLTNUMANYLTEQ, '[^0-9]', '','g'))>=? AND (regexp_replace(FLTNUMANYGTEQ, '[^A-Z]', '','g')=? OR regexp_replace(FLTNUMANYLTEQ, '[^A-Z]', '','g')=?)) ");
                        query.append("))))");
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                    }
                }
                query.append(" )");
            }
            ++count;
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructFlightNumViaQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                          String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (FLTNUMVIAINC IS NULL AND FLTNUMVIAGTEQ IS NULL AND FLTNUMVIALTEQ IS NULL ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTNUMVIAINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMVIAEXC,',')) ");
                query.append(" OR(FLTNUMVIAINC IS NULL AND FLTNUMVIAEXC IS NULL AND FLTNUMVIAGTEQ IS NULL AND FLTNUMVIALTEQ IS NULL ) ");
                query.append(" OR (FLTNUMVIAINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMVIAEXC,','))");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                String[] parameterValues=parameterValue.split(",");
                for(int i=0;i<parameterValues.length;i++){
                    if(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY).length()>0){
                        query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMVIAGTEQ, '[^0-9]', '','g'))<=?  AND FLTNUMVIALTEQ is  NULL AND (regexp_replace(FLTNUMVIAGTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMVIALTEQ, '[^0-9]', '','g'))>=?  AND FLTNUMVIAGTEQ is  NULL AND (regexp_replace(FLTNUMVIALTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMVIAGTEQ, '[^0-9]', '','g'))<=?  AND TO_NUMBER(regexp_replace(FLTNUMVIALTEQ, '[^0-9]', '','g'))>=? AND (regexp_replace(FLTNUMVIAGTEQ, '[^A-Z]', '','g')=? OR regexp_replace(FLTNUMVIALTEQ, '[^A-Z]', '','g')=?)) ");
                        query.append("))))");
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                    }
                }
                query.append(" )");
            }
        }
        return parcount;
    }
    public int constructFlightNumberDestQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                              String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (FLTNUMDSTINC IS NULL AND FLTNUMDSTGTEQ IS NULL AND FLTNUMDSTLTEQ IS NULL) ");
            } else {query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTNUMDSTINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMDSTEXC,',')) ");
                query.append(" OR (FLTNUMDSTINC IS NULL AND FLTNUMDSTEXC IS NULL AND FLTNUMDSTGTEQ IS NULL AND FLTNUMDSTLTEQ IS NULL ) ");
                query.append(" OR (FLTNUMDSTINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMDSTEXC,','))");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                String[] parameterValues=parameterValue.split(",");
                for(int i=0;i<parameterValues.length;i++){
                    if(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY).length()>0){
                        query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMDSTGTEQ, '[^0-9]', '','g'))<=?  AND FLTNUMDSTLTEQ is  NULL AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMDSTLTEQ, '[^0-9]', '','g'))>=?  AND FLTNUMDSTGTEQ is  NULL AND (regexp_replace(FLTNUMDSTLTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMDSTGTEQ, '[^0-9]', '','g'))<=?  AND TO_NUMBER(regexp_replace(FLTNUMDSTLTEQ, '[^0-9]', '','g'))>=? AND (regexp_replace(FLTNUMDSTGTEQ, '[^A-Z]', '','g')=? OR regexp_replace(FLTNUMDSTLTEQ, '[^A-Z]', '','g')=?)) ");
                        query.append("))))");
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                    }
                }
                query.append(" )");
            }
        }
        return parcount;
    }
    public int constructFlightNumberOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if (TILDE.equals(parameterValue)) {
                query.append(" AND (FLTNUMORGINC IS NULL AND FLTNUMORGGTEQ IS NULL AND FLTNUMORGLTEQ IS NULL ) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,FLTNUMORGINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMORGEXC,',')) ");
                query.append(" OR (FLTNUMORGINC IS NULL AND FLTNUMORGEXC IS NULL AND FLTNUMORGGTEQ IS NULL AND FLTNUMORGLTEQ IS NULL ) ");
                query.append(" OR (FLTNUMORGINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,FLTNUMORGEXC,','))");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                String[] parameterValues=parameterValue.split(",");
                for(int i=0;i<parameterValues.length;i++){
                    if(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY).length()>0){
                        query.append(" \tOR ((((TO_NUMBER(regexp_replace(FLTNUMORGGTEQ, '[^0-9]', '','g'))<=?  AND FLTNUMORGLTEQ is  NULL AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR (TO_NUMBER(regexp_replace(FLTNUMORGLTEQ, '[^0-9]', '','g'))>=?  AND FLTNUMORGGTEQ is  NULL AND (regexp_replace(FLTNUMORGLTEQ, '[^A-Z]', '','g')=?))");
                        query.append(" \tOR ((TO_NUMBER(regexp_replace(FLTNUMORGGTEQ, '[^0-9]', '','g'))<=?  AND TO_NUMBER(regexp_replace(FLTNUMORGLTEQ, '[^0-9]', '','g'))>=? AND (regexp_replace(FLTNUMORGGTEQ, '[^A-Z]', '','g')=? OR regexp_replace(FLTNUMORGLTEQ, '[^A-Z]', '','g')=?)) ");
                        query.append("))))");
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, Integer.parseInt(REGEXNOTNUMBER.matcher(parameterValues[i]).replaceAll(EMPTY)));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                        query.setParameter(++parcount, REGEXNOTALPHA.matcher(parameterValues[i]).replaceAll(EMPTY));
                    }
                }
                query.append(" )");
            }
        }
        return parcount;
    }
    public int constructCarrierAllQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount, String parameterCode) {
        int count;
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" AND (CARRALLINC IS NULL AND CARRALLEXC IS NULL) ");
            } else {
                query.append(" AND ((pkg_frmwrk.fun_check_string_common(?,CARRALLINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,CARRALLEXC,',')) ");
                query.append(" OR (CARRALLINC IS NULL AND CARRALLEXC IS NULL) ");
                query.append(" OR (CARRALLINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,CARRALLEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
        }
        count =0;
        query.append(AND);
        for (String paramValue : shipmentVO.getMap().get(parameterCode)) {
            if (TILDE.equals(paramValue)) {
                query.append(" (CARRANYINC IS NULL AND CARRANYEXC IS NULL) ");
            } else {
                if (count != 0) {
                    query.append(" OR ");
                }
                query.append(" ((pkg_frmwrk.fun_check_string_common(?,CARRANYINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,CARRANYEXC,',')) ");
                query.append(" OR (CARRANYINC IS NULL AND CARRANYEXC IS NULL) ");
                query.append(" OR (CARRANYINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,CARRANYEXC,',')) )");
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
                query.setParameter(++parcount, paramValue);
            }
            ++count;
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructMailSubClassFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount,
                                                String parameterCode) {
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            query.append(" AND (( pkg_frmwrk.fun_check_string_common(?,SUBCLSINC,',')  >0 AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SUBCLSEXC,','))");
            query.append(" OR(SUBCLSINC IS NULL AND SUBCLSEXC IS NULL) ");
            query.append(" OR (SUBCLSINC='-' AND regexp_count(?, ',') + 1 > pkg_frmwrk.fun_check_string_common(?,SUBCLSEXC,',')) )");
            query.setParameter(++parcount, parameterValue);
            query.setParameter(++parcount, parameterValue);
            query.setParameter(++parcount, parameterValue);
            query.setParameter(++parcount, parameterValue);
            query.setParameter(++parcount, parameterValue);
        }
        return parcount;
    }
    public int constructViaIncludeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //via include
        query.append(AND_STR);
        if (shipmentVO.getViaPointStation() != null && !shipmentVO.getViaPointStation().isEmpty() ) {
            query.append(" (pkg_frmwrk.fun_check_string_common(?,REC.VIAARPCODINC,',') >0  OR REC.VIAARPCODINC ='-') ");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
        }
        if (shipmentVO.getViaPntArpGrp() != null && !shipmentVO.getViaPntArpGrp().isEmpty() ) {
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.VIAARPGRPINC,',')  >0 OR REC.VIAARPGRPINC   ='-') ");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
        }
        if (shipmentVO.getViaPointCountry() != null && !shipmentVO.getViaPointCountry().isEmpty()) {
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.VIACNTCODINC,',')  >0 OR REC.VIACNTCODINC   ='-') ");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
        }
        if (shipmentVO.getViaPntCntGrp() != null && !shipmentVO.getViaPntCntGrp().isEmpty() ) {
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.VIACNTGRPINC,',')  >0 OR REC.VIACNTGRPINC   ='-') ");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
        }
        query.append(" ) ");
        //via exclude
        if(shipmentVO.getViaPointStation() != null && !TILDE.equals(shipmentVO.getViaPointStation().iterator().next())){
            parcount = constructViaPointQuery(shipmentVO, query, parcount);
        } else {
            query.append(" AND(REC.VIAARPCODEXC IS NULL AND REC.VIAARPGRPEXC IS NULL AND REC.VIACNTCODEXC IS NULL)");
        }
        query.append(" ) ");
        return parcount;
    }
    public int constructOriginIncludeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //orgINcINclude
        query.append(AND_STR);
        if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
            query.append(" (strpos(REC.ORGARPCODINC,?) >0  OR REC.ORGARPCODINC ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgStation());
        }
        if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){

            query.append(" OR( ");
            query.append(" pkg_frmwrk.fun_check_string_common(?,REC.ORGARPGRPINC,',')  >0 OR ");
            query.setParameter(++parcount, shipmentVO.getOrgArpGrp());
            query.append(" REC.ORGARPGRPINC   ='-')");
        }
        if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
            query.append(" OR (strpos(REC.ORGCNTCODINC,?)  >0 OR REC.ORGCNTCODINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgCountry());
        }
        if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
            query.append(" OR (");
            query.append(" pkg_frmwrk.fun_check_string_common(?,REC.ORGCNTGRPINC,',')  >0 OR ");
            query.setParameter(++parcount, shipmentVO.getOrgCntGrp());

            query.append(" REC.ORGCNTGRPINC   ='-') ");
        }
        if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
            query.append(" OR (strpos(REC.ORGOFCEXGINC,?)  >0 OR REC.ORGOFCEXGINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOoe());
        }
        if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
            query.append( " OR (strpos(REC.ORGGPAINC,?)  >0 OR REC.ORGGPAINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgPaCod());
        }
        //org exclude
        query.append(" )AND NOT ( ");
        if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
            query.append(" coalesce(strpos(REC.ORGARPCODEXC,?),0)>0 ");
            query.setParameter(++parcount, shipmentVO.getOrgStation());
        }
        if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){

            query.append(FUN_CHECK_STRING_COMMON_REC_ORGARPGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getOrgArpGrp());

        }
        if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
            query.append(" OR coalesce(strpos(REC.ORGCNTCODEXC,?),0)        >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgCountry());
        }
        if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){

            query.append(" OR pkg_frmwrk.fun_check_string_common(?,REC.ORGCNTGRPEXC,',')      >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgCntGrp());

            query.append("  AND ( ORGARPCODINC IS NULL OR ORGARPCODINC ='-' ) ");
        }
        if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
            query.append(" OR coalesce(strpos(REC.ORGOFCEXGEXC,?),0)    >0");
            query.setParameter(++parcount, shipmentVO.getOoe());
        }
        if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
            query.append( " OR coalesce(strpos(REC.ORGGPAEXC,?),0)        >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgPaCod());
        }
        query.append(" ) ");
        query.append(" ) ");
        return parcount;
    }
    public int constructDestIncludeQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //dst include
        query.append(" AND( (");
        if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
            query.append(" (strpos(REC.DSTARPCODINC,?) >0  OR REC.DSTARPCODINC ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstStation());
        }
        if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
            query.append("  OR( ");
            query.append(" pkg_frmwrk.fun_check_string_common(?,REC.DSTARPGRPINC,',')  >0 OR  ");
            query.setParameter(++parcount,shipmentVO.getDstArpGrp());
            query.append(" REC.DSTARPGRPINC   ='-') ");
        }
        if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
            query.append(" OR (strpos(REC.DSTCNTCODINC,?)  >0 OR REC.DSTCNTCODINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstCountry());
        }
        if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
            query.append(" OR( ");

            query.append(" pkg_frmwrk.fun_check_string_common(?,REC.DSTCNTGRPINC,',')  >0 OR ");
            query.setParameter(++parcount,shipmentVO.getDstCntGrp());

            query.append(" REC.DSTCNTGRPINC   ='-')  ");
        }
        if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
            query.append(" OR (strpos(REC.DSTOFCEXGINC,?)  >0 OR REC.DSTOFCEXGINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDoe());
        }
        if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
            query.append( " OR (strpos(REC.DSTGPAINC,?)  >0 OR REC.DSTGPAINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstPaCod());
        }
        //dstexclude
        query.append(" )  AND NOT( ");
        if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
            query.append("coalesce( strpos(REC.DSTARPCODEXC,?),0)>0 ");
            query.setParameter(++parcount, shipmentVO.getDstStation());
        }
        if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){

            query.append(OR_PKG_FRMWRK_FUN_CHECK_STRING_COMMON_REC_DSTARPGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getDstArpGrp());

        }
        if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
            query.append(" OR coalesce(strpos(REC.DSTCNTCODEXC,?) ,0)       >0 ");
            query.setParameter(++parcount, shipmentVO.getDstCountry());
        }
        if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){

            query.append(OR_PKG_FRMWRK_FUN_CHECK_STRING_COMMON_REC_DSTCNTGRPEXC_0);
            query.setParameter(++parcount,shipmentVO.getDstCntGrp());

        }
        if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
            query.append(" OR coalesce(strpos(REC.DSTOFCEXGEXC,?),0)    >0");
            query.setParameter(++parcount, shipmentVO.getDoe());
        }
        if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
            query.append( " OR coalesce(strpos(REC.DSTGPAEXC,?),0)        >0 ");
            query.setParameter(++parcount, shipmentVO.getDstPaCod());
        }
        query.append(" ) ");
        query.append(" ) ");
        return parcount;
    }
    public int constructViaPointQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //via filter for excluded case
        query .append(" AND NOT( ") ;
        if (shipmentVO.getViaPointStation() != null && !shipmentVO.getViaPointStation().isEmpty() ) {
            query.append( "pkg_frmwrk.fun_check_string_common( CASE ? WHEN '~'  THEN REC.VIAARPCODEXC   ELSE ? END, REC.VIAARPCODEXC,',') > 0");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointStation().toArray(), ",")));
        }
        if (shipmentVO.getViaPntArpGrp() != null && !shipmentVO.getViaPntArpGrp().isEmpty()) {
            query.append( "OR pkg_frmwrk.fun_check_string_common( CASE ? WHEN '~'  THEN REC.VIAARPGRPEXC   ELSE ? END, REC.VIAARPGRPEXC,',') > 0");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntArpGrp().toArray(), ",")));
        }
        if (shipmentVO.getViaPointCountry() != null && !shipmentVO.getViaPointCountry().isEmpty() ) {
            query.append( "OR pkg_frmwrk.fun_check_string_common( CASE ? WHEN '~'  THEN REC.VIACNTCODEXC   ELSE ? END, REC.VIACNTCODEXC,',') > 0");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPointCountry().toArray(), ",")));
        }
        if (shipmentVO.getViaPntCntGrp() != null && !shipmentVO.getViaPntCntGrp().isEmpty() ) {
            query.append( "OR pkg_frmwrk.fun_check_string_common( CASE ? WHEN '~'  THEN REC.VIACNTGRPEXC   ELSE ? END, REC.VIACNTGRPEXC,',') > 0");
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
            query.setParameter(++parcount, (StringUtils.join(shipmentVO.getViaPntCntGrp().toArray(), ",")));
        }
        query.append(" ) ") ;
        return parcount;
    }
    public int constructDestinationQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //destination filter for excluded case
        query .append(" AND NOT( ") ;
        if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
            query.append( "coalesce(strpos(REC.DSTARPCODEXC,?),0) >0 ");
            query.setParameter(++parcount, shipmentVO.getDstStation());
        }
        if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){

            query.append( "OR pkg_frmwrk.fun_check_string_common(?,REC.DSTARPGRPEXC,',') >0 ");
            query.setParameter(++parcount,  shipmentVO.getDstArpGrp());

        }
        if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
            query.append( "OR coalesce(strpos(REC.DSTCNTCODEXC,?),0) >0 ");
            query.setParameter(++parcount, shipmentVO.getDstCountry());
        }
        if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){

            query.append( "OR pkg_frmwrk.fun_check_string_common(?,REC.DSTCNTGRPEXC,',') >0 ");
            query.setParameter(++parcount, shipmentVO.getDstCntGrp());

        }
        if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
            query.append( "OR coalesce(strpos(REC.DSTOFCEXGEXC,?),0) >0 ");
            query.setParameter(++parcount, shipmentVO.getDoe());
        }
        if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
            query.append( "OR coalesce(strpos(REC.DSTGPAEXC,?),0) >0 ");
            query.setParameter(++parcount, shipmentVO.getDstPaCod());
        }
        query.append(" ) ") ;
        return parcount;
    }
    public int constructOriginQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //origin filter for excluded case
        query .append("  AND NOT ( ") ;
        if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
            query.append( "coalesce(strpos(REC.ORGARPCODEXC,?),0) >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgStation());
        }

        if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
            query.append( "OR pkg_frmwrk.fun_check_string_common(?,REC.ORGARPGRPEXC,',') >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgArpGrp());
        }
        if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
            query.append( "OR coalesce(strpos(REC.ORGCNTCODEXC,?),0) >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgCountry());
        }
        if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
            query.append( "OR pkg_frmwrk.fun_check_string_common(?,REC.ORGCNTGRPEXC,',') >0 ");
            query.setParameter(++parcount,shipmentVO.getOrgCntGrp());

        }
        if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
            query.append( "OR coalesce(strpos(REC.ORGOFCEXGEXC,?),0) >0 ");
            query.setParameter(++parcount, shipmentVO.getOoe());
        }
        if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
            query.append( "OR coalesce(strpos(REC.ORGGPAEXC,?),0) >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgPaCod());
        }
        query.append(" ) ");
        return parcount;
    }

    private int constructQueryForTechnicalStop(ShipmentDetailsVO shipmentVO,String parameterCode,Query query,int parcount) {
        int serviceCount = 0;
        for(String parameterValue : shipmentVO.getMap().get(parameterCode)){
            if(serviceCount>0) {
                query.append(OR);
            }
            else {
                query.append("  AND ( ");
            }
            if (TILDE.equals(parameterValue)) {
                query.append(" SRVCTYPFRTECSTPINC IS NULL ");
            } else {
                query.append(" (pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPFRTECSTPINC),',')  >0 AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPFRTECSTPEXC),',')) ");
                query.append(" OR (SRVCTYPFRTECSTPINC IS NULL AND SRVCTYPFRTECSTPEXC IS NULL) ");
                query.append(" OR (SRVCTYPFRTECSTPINC='-' AND regexp_count(UPPER(?), ',') + 1 > pkg_frmwrk.fun_check_string_contains(UPPER(?),UPPER(SRVCTYPFRTECSTPEXC),',')) ");
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.setParameter(++parcount, parameterValue);
                query.append(serviceCount>0 ? ")":" ");
            }
            serviceCount++;
        }
        query.append( ")" );
        return parcount;
    }

    private class CheckEmbargoRefNumMapper implements
            MultiMapper<EmbargoDetailsVO> {

         CheckEmbargoRefNumMapper() {

        }

        /**
         * This method gets  refnum
         *
         * @param rs
         * @return List<EmbargoDetailsVO>
         * @throws SQLException
         */

        public List<EmbargoDetailsVO> map(ResultSet rs) throws SQLException {
            log.entering("CheckEmbargoRefNumMapper", "map");

            List<EmbargoDetailsVO> list = new ArrayList<>();
            EmbargoDetailsVO embargoDetailsVO = null;
            Map<String,EmbargoDetailsVO> uniqueEmbargos=new HashMap<>();
            while (rs.next()) {

                if ( !uniqueEmbargos.containsKey(rs.getString(REFNUM))) {
                    embargoDetailsVO = new EmbargoDetailsVO();

                    embargoDetailsVO.setEmbargoReferenceNumber(rs
                            .getString(REFNUM));

                        list.add(embargoDetailsVO);
                        uniqueEmbargos.put(rs.getString(REFNUM),embargoDetailsVO);

                }
            }
            if (embargoDetailsVO != null && !uniqueEmbargos.containsKey(embargoDetailsVO.getEmbargoReferenceNumber())) {
                list.add(embargoDetailsVO);
            }

                return list;
        }

    }

    /**
     * 	Method		:	EmbargoRulesSqlDAO.constructFilterQueryForODPairEnhanced
     *	Added by 	:	A-8146 on 27-Apr-2019
     * 	Used for 	:
     *	Parameters	:	@param shipmentVO
     *	Parameters	:	@param mainQuery
     *	Parameters	:	@param parcount
     *	Return type	: 	void
     */
    private void constructFilterQueryForODPairEnhanced(ShipmentDetailsVO shipmentVO,
                                                       Query query, int parcount) {

        if (shipmentVO.getDstStation() == null || shipmentVO.getDstStation().trim().length() <=0 ) {
            query.append("  AND ( DSTARPCODINC IS NULL) ");
        }
        if ((shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0)
                || (shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 )
                || (shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 )
                || (shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 )
                || (shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 )
                || (shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 )) {
            parcount = constructDestinationFilterQuery(shipmentVO, query, parcount);
        } else {
            query.append(AND_DSTARPCODINC_IS_NULL_OR_DSTARPGRPINC_IS_NULL_OR_DSTARPGRPIN);
        }

        if (shipmentVO.getOrgStation() == null || shipmentVO.getOrgStation().trim().length() <=0 ) {
            query.append(AND_ORGARPCODINC_IS_NULL);
        }
        if ((shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 )
                || (shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 )
                || (shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 )
                || (shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 )
                || (shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 )
                || (shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 )) {
            parcount = constructOriginFilterQuery(shipmentVO, query, parcount);
        } else {
            query.append(AND_ORGARPCODINC_IS_NULL_OR_ORGCNTGRPINC + " ");
        }
        if ((shipmentVO.getViaPointStation() != null && !shipmentVO.getViaPointStation().isEmpty() )
                || (shipmentVO.getViaPntArpGrp() != null && !shipmentVO.getViaPntArpGrp().isEmpty())
                || (shipmentVO.getViaPointCountry() != null && !shipmentVO.getViaPointCountry().isEmpty() )
                || (shipmentVO.getViaPntCntGrp() != null && !shipmentVO.getViaPntCntGrp().isEmpty() )) {
            constructViaPointFilterQuery(shipmentVO, query, parcount);
        } else {
            query.append("VIAARPCODINC_IS_NULL_OR_VIAARPCODINC_AND_VIACNTCODINC_IS_NULL_OR_VIACNTCODINC_AND_VIAARPGRPINC_IS_NULL_OR_VIAARPGRPINC_AND_VIACNTGRPINC_IS_NULL_OR_VIACNTGRPINC");
        }
        //main select ends here

    }

    /**
     * Method for oracle db
     * @param shipmentVO
     * @param query
     * @param parcount
     * @return
     */
    public int constructDestinationFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //dst include
        query.append(AND1);
        if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
            query.append(" (pkg_frmwrk.fun_check_string_common(?,REC.DSTARPCODINC,',') >0  OR REC.DSTARPCODINC ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstStation());
        }
        if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.DSTARPGRPINC,',')  >0 OR REC.DSTARPGRPINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstArpGrp());
        }
        if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.DSTCNTCODINC,',')  >0 OR REC.DSTCNTCODINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstCountry());
        }
        if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.DSTCNTGRPINC,',')  >0 OR REC.DSTCNTGRPINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstCntGrp());
        }
        if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.DSTOFCEXGINC,',')  >0 OR REC.DSTOFCEXGINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDoe());
        }
        if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
            query.append( " OR (pkg_frmwrk.fun_check_string_common(?,REC.DSTGPAINC,',')  >0 OR REC.DSTGPAINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getDstPaCod());
        }
        //dstexclude
        query.append(AND_NOT);
        if(shipmentVO.getDstStation() != null && shipmentVO.getDstStation().trim().length() >0 ){
            query.append(" pkg_frmwrk.fun_check_string_common(?,REC.DSTARPCODEXC,',')>0 ");
            query.setParameter(++parcount, shipmentVO.getDstStation());
        }

        if(shipmentVO.getDstArpGrp() != null && shipmentVO.getDstArpGrp().trim().length() >0 ){
            query.append(OR_PKG_FRMWRK_FUN_CHECK_STRING_COMMON_REC_DSTARPGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getDstArpGrp());
        }
        if(shipmentVO.getDstCountry() != null && shipmentVO.getDstCountry().trim().length() >0 ){
            query.append(" OR pkg_frmwrk.fun_check_string_common(?,REC.DSTCNTCODEXC,',')        >0 ");
            query.setParameter(++parcount, shipmentVO.getDstCountry());
        }
        if(shipmentVO.getDstCntGrp() != null && shipmentVO.getDstCntGrp().trim().length() >0 ){
            query.append(OR_PKG_FRMWRK_FUN_CHECK_STRING_COMMON_REC_DSTCNTGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getDstCntGrp());
        }
        if(shipmentVO.getDoe() != null && shipmentVO.getDoe().trim().length() >0 ){
            query.append(" OR pkg_frmwrk.fun_check_string_common(?,REC.DSTOFCEXGEXC,',')    >0");
            query.setParameter(++parcount, shipmentVO.getDoe());
        }
        if(shipmentVO.getDstPaCod() != null && shipmentVO.getDstPaCod().trim().length() >0 ){
            query.append( " OR pkg_frmwrk.fun_check_string_common(?,REC.DSTGPAEXC,',')        >0 ");
            query.setParameter(++parcount, shipmentVO.getDstPaCod());
        }
        query.append(" ) ");
        query.append(" ) ");
        return parcount;
    }


    /**
     * Method for oracle connection
     * @param shipmentVO
     * @param query
     * @param parcount
     * @return
     */
    public int constructOriginFilterQuery(ShipmentDetailsVO shipmentVO, Query query, int parcount) {
        //orgINcINclude

        query.append(AND1);
        if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
            query.append(" (pkg_frmwrk.fun_check_string_common(?,REC.ORGARPCODINC,',') >0  OR REC.ORGARPCODINC ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgStation());
        }
        if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.ORGARPGRPINC,',')  >0 OR REC.ORGARPGRPINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgArpGrp());
        }
        if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.ORGCNTCODINC,',')  >0 OR REC.ORGCNTCODINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgCountry());
        }
        if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.ORGCNTGRPINC,',')  >0 OR REC.ORGCNTGRPINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgCntGrp());
        }
        if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
            query.append(" OR (pkg_frmwrk.fun_check_string_common(?,REC.ORGOFCEXGINC,',')  >0 OR REC.ORGOFCEXGINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOoe());
        }
        if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
            query.append( " OR (pkg_frmwrk.fun_check_string_common(?,REC.ORGGPAINC,',')  >0 OR REC.ORGGPAINC   ='-') ");
            query.setParameter(++parcount, shipmentVO.getOrgPaCod());
        }
        //org exclude
        query.append(AND_NOT);
        if(shipmentVO.getOrgStation() != null && shipmentVO.getOrgStation().trim().length() >0 ){
            query.append(" pkg_frmwrk.fun_check_string_common(?,REC.ORGARPCODEXC,',')>0 ");
            query.setParameter(++parcount, shipmentVO.getOrgStation());
        }

        if(shipmentVO.getOrgArpGrp() != null && shipmentVO.getOrgArpGrp().trim().length() >0 ){
            query.append(FUN_CHECK_STRING_COMMON_REC_ORGARPGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getOrgArpGrp());
        }
        if(shipmentVO.getOrgCountry() != null && shipmentVO.getOrgCountry().trim().length() >0 ){
            query.append(" OR pkg_frmwrk.fun_check_string_common(?,REC.ORGCNTCODEXC,',')        >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgCountry());
        }
        if(shipmentVO.getOrgCntGrp() != null && shipmentVO.getOrgCntGrp().trim().length() >0 ){
            query.append(PKG_FRMWRK_FUN_STRING_CHECK_REC_ORGCNTGRPEXC_0);
            query.setParameter(++parcount, shipmentVO.getOrgCntGrp());
        }
        if(shipmentVO.getOoe() != null && shipmentVO.getOoe().trim().length() >0 ){
            query.append(" OR pkg_frmwrk.fun_check_string_common(?,REC.ORGOFCEXGEXC,',')    >0");
            query.setParameter(++parcount, shipmentVO.getOoe());
        }
        if(shipmentVO.getOrgPaCod() != null && shipmentVO.getOrgPaCod().trim().length() >0 ){
            query.append( " OR pkg_frmwrk.fun_check_string_common(?,REC.ORGGPAEXC,',')        >0 ");
            query.setParameter(++parcount, shipmentVO.getOrgPaCod());
        }
        query.append(" ) ");
        query.append(" ) ");
        return parcount;
    }


}
