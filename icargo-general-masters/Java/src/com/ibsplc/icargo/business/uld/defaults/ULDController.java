/*
 * ULDController.java Created on Aug 1, 2005
 *
 * Copyright 2005 IBS Software Services (P) Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of IBS Software Services (P) Ltd.
 * Use is subject tos license terms.
 */
package com.ibsplc.icargo.business.uld.defaults;

import static com.ibsplc.xibase.server.framework.vo.AbstractVO.FLAG_NO;
import static com.ibsplc.xibase.server.framework.vo.AbstractVO.OPERATION_FLAG_DELETE;
import static com.ibsplc.xibase.server.framework.vo.AbstractVO.OPERATION_FLAG_INSERT;
import static com.ibsplc.xibase.server.framework.vo.AbstractVO.OPERATION_FLAG_UPDATE;

import java.io.Serializable;
import java.rmi.RemoteException;
import java.sql.Blob;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.ibsplc.icargo.business.capacity.booking.CapacityBookingBusinessException;
import com.ibsplc.icargo.business.capacity.booking.vo.FlightAvailabilityFilterVO;
import com.ibsplc.icargo.business.cra.accounting.vo.AccountingFilterVO;
import com.ibsplc.icargo.business.flight.operation.vo.FlightFilterVO;
import com.ibsplc.icargo.business.flight.operation.vo.FlightLegVO;
import com.ibsplc.icargo.business.flight.operation.vo.FlightSegmentForBookingVO;
import com.ibsplc.icargo.business.flight.operation.vo.FlightVO;
import com.ibsplc.icargo.business.flight.operation.vo.FlightValidationFilterVO;
import com.ibsplc.icargo.business.flight.operation.vo.FlightValidationVO;
import com.ibsplc.icargo.business.flight.operation.vo.MarkFlightMovementVO;
import com.ibsplc.icargo.business.mail.operations.vo.ContainerVO;
import com.ibsplc.icargo.business.mail.operations.vo.MailConstantsVO;
import com.ibsplc.icargo.business.mail.operations.vo.OperationalFlightVO;
import com.ibsplc.icargo.business.msgbroker.config.format.vo.MessageRuleDefenitionVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.MessageDespatchDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.MessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.cpm.CPMMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.cpm.CPMULDFlightDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.luc.LUCMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.luc.LUCReceivingPartyDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.luc.LUCTransferringPartyDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.luc.LUCULDConditionDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.luc.LUCULDDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.luc.LUCULDIdentificationVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCMessageIdentificationVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCReceivingPartyDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCTransactionCountVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCTransferDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCTransferringPartyDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCTransmittalDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCULDConditionDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCULDDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.muc.MUCULDIdentificationVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.scm.SCMAirportIdentifierVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.scm.SCMDateTimeIdentifierVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.scm.SCMMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.scm.SCMStockInformationVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.scm.SCMSupplementaryHeaderInfoVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.scm.SCMSupplementaryInfoVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.scm.SCMTotalDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.scm.SCMUldTypeIdentifierVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMAircraftRegistrationVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMFlightIdentificationVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMFlightMovementVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMIncomingULDDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMIncomingULDHeaderVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMMessageIdentifierVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMMessageVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMNilIncomingULDDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMNilOutgoingULDDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMOutgoingULDDetailsVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMOutgoingULDHeaderVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMSupplementaryHeaderInfoVO;
import com.ibsplc.icargo.business.msgbroker.message.vo.ucm.UCMSupplementaryInfoVO;
import com.ibsplc.icargo.business.operations.flthandling.vo.OperationalULDAuditFilterVO;
import com.ibsplc.icargo.business.operations.flthandling.vo.OperationalULDAuditVO;
import com.ibsplc.icargo.business.operations.flthandling.vo.OperationalULDVO;
import com.ibsplc.icargo.business.operations.flthandling.vo.UldManifestVO;
import com.ibsplc.icargo.business.shared.agent.vo.AgentVO;
import com.ibsplc.icargo.business.shared.airline.vo.AirlineAirportParameterFilterVO;
import com.ibsplc.icargo.business.shared.airline.vo.AirlineAirportParameterVO;
import com.ibsplc.icargo.business.shared.airline.vo.AirlineValidationVO;
import com.ibsplc.icargo.business.shared.audit.vo.AuditDetailsVO;
import com.ibsplc.icargo.business.shared.currency.vo.CurrencyConvertorVO;
import com.ibsplc.icargo.business.shared.customer.vo.CustomerFilterVO;
import com.ibsplc.icargo.business.shared.customer.vo.CustomerVO;
import com.ibsplc.icargo.business.shared.defaults.onetime.vo.OneTimeVO;
import com.ibsplc.icargo.business.shared.message.vo.MessageConfigConstants;
import com.ibsplc.icargo.business.shared.uld.vo.ULDTypeVO;
import com.ibsplc.icargo.business.shared.uld.vo.ULDTypeValidationVO;
import com.ibsplc.icargo.business.uld.defaults.feature.createuldloantransaction.SaveULDLoanTransactionFeature;
import com.ibsplc.icargo.business.uld.defaults.feature.lucmessage.LUCMessageFeature;
import com.ibsplc.icargo.business.uld.defaults.feature.returnuld.SaveReturnTransactionFeature;
import com.ibsplc.icargo.business.uld.defaults.feature.sendscmreminder.SCMReminderNotificationsFeature;
import com.ibsplc.icargo.business.uld.defaults.feature.uldcount.ULDCountFeature;
import com.ibsplc.icargo.business.uld.defaults.feature.uldcount.ULDCountFeatureConstants;
import com.ibsplc.icargo.business.uld.defaults.feature.updateulddemurragedetails.UpdateULDDemurrageDetailsFeature;
import com.ibsplc.icargo.business.uld.defaults.message.SCMValidator;
import com.ibsplc.icargo.business.uld.defaults.message.UCMInExistsForStationException;
import com.ibsplc.icargo.business.uld.defaults.message.UCMInOutMismatchException;
import com.ibsplc.icargo.business.uld.defaults.message.UCMValidator;
import com.ibsplc.icargo.business.uld.defaults.message.ULDFlightMessage;
import com.ibsplc.icargo.business.uld.defaults.message.ULDFlightMessageDetails;
import com.ibsplc.icargo.business.uld.defaults.message.ULDFlightMessagePK;
import com.ibsplc.icargo.business.uld.defaults.message.ULDFlightMessageReconcile;
import com.ibsplc.icargo.business.uld.defaults.message.ULDFlightMessageReconcileDetails;
import com.ibsplc.icargo.business.uld.defaults.message.ULDMessageProcessor;
import com.ibsplc.icargo.business.uld.defaults.message.ULDSCMReconcile;
import com.ibsplc.icargo.business.uld.defaults.message.ULDSCMReconcileDetails;
import com.ibsplc.icargo.business.uld.defaults.message.vo.FlightDetailsVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.FlightFilterMessageVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.FlightMessageFilterVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.SCMMessageFilterVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.SCMValidationFilterVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.SCMValidationVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.ULDFlightMessageDetailsVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.ULDFlightMessageFilterVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.ULDFlightMessageReconcileDetailsVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.ULDFlightMessageReconcileVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.ULDFlightMessageVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.ULDInFlightVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.ULDSCMReconcileDetailsVO;
import com.ibsplc.icargo.business.uld.defaults.message.vo.ULDSCMReconcileVO;
import com.ibsplc.icargo.business.uld.defaults.misc.AgreementAlreadyExistForThePartyException;
import com.ibsplc.icargo.business.uld.defaults.misc.DefaultFlagAlreadySetException;
import com.ibsplc.icargo.business.uld.defaults.misc.FacilityCodeInUseException;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDAgreement;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDAirportLocation;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDDamage;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDDamageChecklistMaster;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDDamagePicture;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDDiscrepancy;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDHandledCarrier;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDIntMvt;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDIntMvtDetail;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDMovement;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDMovementDetail;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDPoolOwner;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDPoolSegmentExceptions;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDRepair;
import com.ibsplc.icargo.business.uld.defaults.misc.ULDServiceability;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDAgreementDetailsVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDAgreementExceptionVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDAgreementFilterVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDAgreementVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDAirportLocationVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDamageChecklistVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDamageDeleteVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDamageDetailsListVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDamageFilterVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDamagePictureVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDamageReferenceNumberLovVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDamageRepairDetailsVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDamageVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDiscrepancyFilterVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDDiscrepancyVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDHandledCarrierVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDHistoryVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDIntMvtDetailVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDIntMvtHistoryFilterVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDIntMvtVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDMovementDetailVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDMovementFilterVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDMovementVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDPoolOwnerFilterVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDPoolOwnerVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDRepairDetailsListVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDRepairFilterVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDRepairInvoiceDetailsVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDRepairInvoiceVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDRepairVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.ULDServiceabilityVO;
import com.ibsplc.icargo.business.uld.defaults.misc.vo.UldDmgRprFilterVO;
import com.ibsplc.icargo.business.uld.defaults.proxy.CRAAccountingProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.CapacityBookingProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.ExportProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.FlightOperationsProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.MailOperationsProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.MsgBrokerConfigProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.MsgBrokerMessageProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.OperationsFltHandlingProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.SharedAgentProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.SharedAirlineProductProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.SharedAirlineProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.SharedAreaProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.SharedCurrencyProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.SharedCustomerProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.SharedDefaultsProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.SharedULDProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.WarehouseProxy;
import com.ibsplc.icargo.business.uld.defaults.proxy.WorkflowDefaultsProxy;
import com.ibsplc.icargo.business.uld.defaults.stock.AccessoriesStockConfig;
import com.ibsplc.icargo.business.uld.defaults.stock.ULDStockConfig;
import com.ibsplc.icargo.business.uld.defaults.stock.vo.AccessoriesStockConfigFilterVO;
import com.ibsplc.icargo.business.uld.defaults.stock.vo.AccessoriesStockConfigVO;
import com.ibsplc.icargo.business.uld.defaults.stock.vo.EstimatedULDStockFilterVO;
import com.ibsplc.icargo.business.uld.defaults.stock.vo.EstimatedULDStockVO;
import com.ibsplc.icargo.business.uld.defaults.stock.vo.ExcessStockAirportFilterVO;
import com.ibsplc.icargo.business.uld.defaults.stock.vo.ExcessStockAirportVO;
import com.ibsplc.icargo.business.uld.defaults.stock.vo.ULDStockConfigFilterVO;
import com.ibsplc.icargo.business.uld.defaults.stock.vo.ULDStockConfigVO;
import com.ibsplc.icargo.business.uld.defaults.stock.vo.ULDStockListVO;
import com.ibsplc.icargo.business.uld.defaults.transaction.AccessoryTransaction;
import com.ibsplc.icargo.business.uld.defaults.transaction.ULDChargingInvoice;
import com.ibsplc.icargo.business.uld.defaults.transaction.ULDInTransactionException;
import com.ibsplc.icargo.business.uld.defaults.transaction.ULDTransaction;
import com.ibsplc.icargo.business.uld.defaults.transaction.vo.AccessoryTransactionVO;
import com.ibsplc.icargo.business.uld.defaults.transaction.vo.ChargingInvoiceFilterVO;
import com.ibsplc.icargo.business.uld.defaults.transaction.vo.TransactionFilterVO;
import com.ibsplc.icargo.business.uld.defaults.transaction.vo.TransactionListVO;
import com.ibsplc.icargo.business.uld.defaults.transaction.vo.TransactionVO;
import com.ibsplc.icargo.business.uld.defaults.transaction.vo.ULDChargingInvoiceVO;
import com.ibsplc.icargo.business.uld.defaults.transaction.vo.ULDReturnTxnVO;
import com.ibsplc.icargo.business.uld.defaults.transaction.vo.ULDTransactionDetailsVO;
import com.ibsplc.icargo.business.uld.defaults.vo.RelocateULDVO;
import com.ibsplc.icargo.business.uld.defaults.vo.SCMReminderFeatureVO;
import com.ibsplc.icargo.business.uld.defaults.vo.UCMExceptionFlightVO;
import com.ibsplc.icargo.business.uld.defaults.vo.ULDAuditVO;
import com.ibsplc.icargo.business.uld.defaults.vo.ULDConfigAuditVO;
import com.ibsplc.icargo.business.uld.defaults.vo.ULDListFilterVO;
import com.ibsplc.icargo.business.uld.defaults.vo.ULDListVO;
import com.ibsplc.icargo.business.uld.defaults.vo.ULDNotificationVO;
import com.ibsplc.icargo.business.uld.defaults.vo.ULDNumberVO;
import com.ibsplc.icargo.business.uld.defaults.vo.ULDVO;
import com.ibsplc.icargo.business.uld.defaults.vo.ULDValidationVO;
import com.ibsplc.icargo.business.warehouse.defaults.storageunit.vo.StorageUnitFilterVO;
import com.ibsplc.icargo.business.warehouse.defaults.storageunit.vo.StorageUnitVO;
import com.ibsplc.icargo.business.warehouse.defaults.storageunit.vo.StorageUnitValidationFilterVO;
import com.ibsplc.icargo.business.warehouse.defaults.storageunit.vo.StorageUnitValidationVO;
import com.ibsplc.icargo.business.warehouse.defaults.storageunit.vo.ULDCheckinVO;
import com.ibsplc.icargo.business.warehouse.defaults.vo.WarehouseVO;
import com.ibsplc.icargo.business.workflow.defaults.vo.ParameterConstantsVO;
import com.ibsplc.icargo.business.workflow.defaults.vo.ParameterInProcessVO;
import com.ibsplc.icargo.business.workflow.defaults.vo.WorkflowVO;
import com.ibsplc.icargo.framework.event.annotations.Raise;
import com.ibsplc.icargo.framework.feature.Proxy;
import com.ibsplc.icargo.framework.floworchestration.context.ICargoSproutAdapter;
import com.ibsplc.icargo.framework.floworchestration.context.SpringAdapter;
import com.ibsplc.icargo.framework.model.ImageModel;
import com.ibsplc.icargo.framework.proxy.ProxyException;
import com.ibsplc.icargo.framework.report.agent.ReportAgent;
import com.ibsplc.icargo.framework.report.agent.ReportAgentInstance;
import com.ibsplc.icargo.framework.report.exception.ReportGenerationException;
import com.ibsplc.icargo.framework.report.vo.ReportMetaData;
import com.ibsplc.icargo.framework.report.vo.ReportSpec;
import com.ibsplc.icargo.framework.security.vo.LogonAttributes;
import com.ibsplc.icargo.framework.util.BeanHelper;
import com.ibsplc.icargo.framework.util.time.GMTDate;
import com.ibsplc.icargo.framework.util.time.LocalDate;
import com.ibsplc.icargo.framework.util.time.Location;
import com.ibsplc.icargo.framework.util.uld.ULDFormatter;
import com.ibsplc.icargo.framework.util.unit.Measure;
import com.ibsplc.icargo.framework.util.unit.UnitConstants;
import com.ibsplc.icargo.persistence.dao.uld.defaults.ULDDefaultsDAO;
import com.ibsplc.xibase.client.framework.delegate.Module;
import com.ibsplc.xibase.client.framework.delegate.SubModule;
import com.ibsplc.xibase.server.framework.audit.util.AuditUtils;
import com.ibsplc.xibase.server.framework.exceptions.BusinessException;
import com.ibsplc.xibase.server.framework.exceptions.SystemException;
import com.ibsplc.xibase.server.framework.interceptor.Advice;
import com.ibsplc.xibase.server.framework.interceptor.Phase;
import com.ibsplc.xibase.server.framework.persistence.EntityManager;
import com.ibsplc.xibase.server.framework.persistence.FinderException;
import com.ibsplc.xibase.server.framework.persistence.PersistenceController;
import com.ibsplc.xibase.server.framework.persistence.PersistenceException;
import com.ibsplc.xibase.server.framework.persistence.keygen.provider.Criterion;
import com.ibsplc.xibase.server.framework.persistence.query.Page;
import com.ibsplc.xibase.server.framework.persistence.tx.Transaction;
import com.ibsplc.xibase.server.framework.persistence.tx.TransactionProvider;
import com.ibsplc.xibase.server.framework.util.ContextUtils;
import com.ibsplc.xibase.server.framework.util.error.ErrorUtils;
import com.ibsplc.xibase.server.framework.util.keygen.KeyUtilInstance;
import com.ibsplc.xibase.server.framework.util.keygen.KeyUtils;
import com.ibsplc.xibase.server.framework.vo.ErrorDisplayType;
import com.ibsplc.xibase.server.framework.vo.ErrorVO;
import com.ibsplc.xibase.util.log.Log;
import com.ibsplc.xibase.util.log.factory.LogFactory;
import com.ibsplc.xibase.util.time.TimeConvertor;
//merge solved by A-7794
//import com.ibsplc.icargo.framework.eai.base.vo.CommunicationVO;


/**
 * @author A-1347
 *
 * @generated "UML to Java
 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
 */
@Module("uld")
@SubModule("defaults")
public class ULDController {

	private Log log = LogFactory.getLogger("ULD");

	private static final String NO_SUCH_ULD_EXISTS = "uld.defaults.nosuchuldexists";

	private static final String ULD_ALREADY_EXISTS = "uld.defaults.uldalreadyexists";

	private static final String OPEN_ENDED_AGREEMENT = "Open Ended";

	private static final String MVTSEQNUM = "MVTSEQNUM";

	private static final String MUCSEQNUM = "MUCSEQNUM";

	private static final String DMGREFNUM = "DMGREFNUM";
	private static final String LOANED_TRANSACTION = "L";
    private static final String ULD_COUNT_PER_UCR = "shared.airline.uldCountPerUCR";

	private static final String LOAN_RETURN = "R";
    //Commented by A-3415 for ICRD-114538 since Borrow txn no longer exists
    //private static final String BORROW_TRANSACTION = "B";

	private static final String RETURN_TRANSACTION = "R";

	private static final String FLAG_YES = "Y";

	private static final String DEMMURAGE_FREQUENCY_DAILY = "D";

	private static final String DEMURRAGE_FREQUENCY_WEEKLY = "W";

	private static final String DEMMURAGE_FREQUENCY_MONTHLY = "M";

	private static final String DEMMURAGE_FREQUENCY_FORTNIGHTLY = "F";

	private static final String CTRL_RECP_NUM = "CRLRCPNUM";

	private static final String PARTYTYPE_AIRLINE = "A";

    private static final String PARTYTYPE_AGENT = "G";
    private static final String PARTYTYPE_CUSTOMER = "C";
;
	private static final String EXPORT = "E";

	private static final String IMPORT = "I";

    private static final String ARRIVAL = "AR";
	private static final String OFFLOAD = "O";

	private static final String INTRANSIT = "Y";

	private static final String INSTATION = "N";

    //Added By A-6841 for CRQ ICRD-155382 Starts
	private static final String ISOCCUPIED = "Y";
	private static final String ISNOTOCCUPIED = "N";
	private static final String RELEASE_TRIGGER_POINT_ARR = "ARR";
	private static final String RELEASE_TRIGGER_POINT_BDN = "BDN";
    //Added By A-6841 for CRQ ICRD-155382 Ends
	private static final String ULD_TRANSACTION_REF_NUMBER = "uld.transaction.refnumber";

	private static final String CREATE_ULD = "ULDMSTCPT";

	private static final String UPDATE_ULD = "ULDMSTUPD";

	private static final String DELETE_ULD = "ULDMSTDEL";

	private static final String DELETE_ULDDAMAGE = "ULDDMGDEL";

	private static final String CREATE_ULDDAMAGE = "ULDDMGCPT";

	private static final String UPDATE_ULDDAMAGE = "ULDDMGUPD";

	private static final String CREATE_ULDREPAIR = "ULDRPRCPT";

	private static final String DELETE_ULDREPAIR = "ULDRPRDEL";

	private static final String UPDATE_ULDREPAIR = "ULDRPRUPD";

	private static final String UPDATE_ULDLOANTRANSACTION = "ULDLONTXNUPD";

	private static final String DELETE_ULDLOANTRANSACTION = "ULDLONTXNDEL";

	private static final String CREATE_ULDLOANTRANSACTION = "ULDLONTXNCPT";

    //private static final String CREATE_ULDBORROWTRANSACTION = "ULDBRWTXNCPT";

    //private static final String DELETE_ULDBORROWTRANSACTION = "ULDBRWTXNDEL";

    //private static final String UPDATE_ULDBORROWTRANSACTION = "ULDBRWTXNUPD";

    //private static final String RETURN_ULDBORROWTRANSACTION = "ULDBRWRTNCPT";

	private static final String RETURN_ULDLOANTRANSACTION = "ULDLONRTNCPT";

	private static final String CREATE_ULDAGREEMENT = "ULDAGRCPT";

	private static final String DELETE_ULDAGREEMENT = "ULDAGRDEL";

	private static final String UPDATE_ULDAGREEMENT = "ULDAGRUPD";

	private static final String CREATE_ULDSTOCK = "ULDSTKCPT";

	private static final String DELETE_ULDSTOCK = "ULDSTKDEL";

	private static final String UPDATE_ULDSTOCK = "ULDSTKUPD";

	private static final String CREATE_ULDDISCREPANCY = "ULDDISCPT";

	private static final String DELETE_ULDDISCREPANCY = "ULDDISDEL";

	private static final String UPDATE_ULDDISCREPANCY = "ULDDISUPD";

	private static final String CREATE_ULDMVT = "ULDMVTCPT";

	private static final String GENERATE_ULDTXNINV = "ULDTXNINVGNT";

	private static final String CREATE_FACLOC = "ULDFACLOCCRT";

	private static final String UPDATE_FACLOC = "ULDFACLOCUPD";

	private static final String DELETE_FACLOC = "ULDFACLOCDEL";

	private static final String EMPTY = "E";

	private static final String OCCUPIED = "F";

	private static final String CURRENCY_AT_COMPANY_LEVEL = "system.defaults.unit.currency";

	private static final String RATETYPE_DAILY_FOR_CURRENCYCONVERSION = "DLY";

	private static final String ULD_FOUND_DISCREPANCY = "F";

	private static final String ULD_MISSING_DISCREPANCY = "M";

	private static final String UCR_REPORT_ID_FOR_SINGLE_ULD = "RPTOPR053";

	private static final String UCR_REPORT_ID_FOR_MULTIPLE_ULD = "RPTOPR053";

	private static final String UCR_REPORT_NEEDS_TOBE_PRINTED = "uld.defaults.ucrReportToBePrinted";

	private static final String LOST = "L";

	private static final String OPERATSTATUS_ONETIME = "uld.defaults.operationalStatus";

	private static final String TXNTYPE_ONETIME = "uld.defaults.TxnType";

	private static final String PARTYTYPE_ONETIME = "uld.defaults.PartyType";

	private static final String TXNSTATUS_ONETIME = "uld.defaults.transactionStatus";

	private static final String ACCESSCODE_ONETIME = "uld.defaults.getAccessoryCode()";

	private static final String ULDNATURE_ONETIME = "uld.defaults.uldnature";

	private static final String CLEANSTATUS_ONETIME = "uld.defaults.cleanlinessStatus";

	private static final String DAMAGESTATUS_ONETIME = "uld.defaults.damageStatus";

	private static final String TRANSACTION_TYPE = "uld.defaults.TxnType";

	private static final String AGREEMENT_STATUS = "uld.defaults.agreementstatus";

	private static final String PARTY_TYPE = "uld.defaults.PartyType";

	private static final String PARTY_ALL = "ALL";

	private static final String DAMAGE_SEVERITY = "uld.defaults.damageseverity";

	private static final String DAMAGE_SECTION = "uld.defaults.section";
  //Added by A-8368 as part of user story - 
  	private static final String POINTOFNOTICE_ONETIME = "operations.shipment.pointofnotice";

	private static final String DAMAGE_STATUS = "uld.defaults.damageStatus";

	private static final String ULD_SECTION = "uld.defaults.section";

	private static final String ULD_STATUS = "uld.defaults.overallStatus";

	private static final String STATUS_ONETIME = "uld.defaults.overallStatus";

	private static final String CONTENT_ONETIME = "uld.defaults.contentcodes";

	private static final String LEVEL_TYPE = "uld.defaults.leveltype";

	private static final String FACILITY_TYPE = "uld.defaults.facilitytypes";

	private static final String NONOPERATIONAL = "N";

	private static final String OPERATIONAL = "O";

	private static final String ERROR_TYPE = "uld.defaults.ulderrortype";

	private static final String ERROR_TYPE_ERROR = "E";

	private static final String SYSPAR_CURRENCY = "system.defaults.unit.currency";
	// Added by A-2412
	private static final String KEY_TXNTYPEONTIME = "uld.defaults.invoicetxntype";

	private static final String KEY_PARTYTYPEONTIME = "uld.defaults.PartyType";

	private static final String ALL = "ALL";

	private static final String ULD_NOT_IN_STOCK = "uld.defaults.errortype.notinstock";

	private static final String ULD_NOT_IN_AIRPORT = "uld.defaults.errortype.notinairport";

	private static final String ULD_NOT_IN_AIRLINESTOCK = "uld.defaults.errortype.notinairlinestock";

	private static final String ULD_NONOPERATIONAL = "uld.defaults.errortype.nonoperational";

	private static final String ULD_LOST = "uld.defaults.errortype.lost";

	// Added by a-3278 for QF1382 on 28Oct09
	private static final String ULD_NOT_IN_STOCK_FOR_OAL = "uld.defaults.errortype.notinstockforOAL";

	private static final String ULD_NOT_IN_AIRPORT_FOR_OAL = "uld.defaults.errortype.notinairportforOAL";

	private static final String ULD_NOT_IN_AIRLINESTOCK_FOR_OAL = "uld.defaults.errortype.notinairlinestockforOAL";

	private static final String ULD_NONOPERATIONAL_FOR_OAL = "uld.defaults.errortype.nonoperationalforOAL";

	private static final String ULD_LOST_FOR_OAL = "uld.defaults.errortype.lostforOAL";

	private static final String OAL_ULD_NOT_IN_STOCK_FOR_QFFLIGHT = "uld.defaults.errortype.OALuldnotinstockforQFflight";

	private static final String OAL_ULD_NOT_IN_AIRPORT_FOR_QFFLIGHT = "uld.defaults.errortype.OALuldnotinairportforQFflight";

	private static final String OAL_ULD_NOT_IN_AIRLINESTOCK_FOR_QFFLIGHT = "uld.defaults.errortype.OALuldnotinairlinestockforQFflight";

	private static final String OAL_ULD_NONOPERATIONAL_FOR_QFFLIGHT = "uld.defaults.errortype.OALuldnonoperationalforQFflight";

	private static final String OAL_ULD_LOST_FOR_QFFLIGHT = "uld.defaults.errortype.OALuldlostforQFflight";

	private static final String ULD_STK_UPDATE_FOR_OAL = "uld.defaults.autouldstockupdateforOAL";
	
	private static final String ULD_STK_UPDATE_FOR_OWN = "uld.defaults.cancreateuld";

	private static final String ERROR_TYPE_WARNING = "W";
    //added by A-4443 for bug icrd-3608 starts
	private static final String MUCSTATUS_ONETIME = "uld.defaults.mucstatus";
    //added by A-4443 for bug icrd-3608 ends
	// A-3278 for QF1382 ends

	// Added by Preet for ULD 310
	private static final String WAREHOUSE = "WHS";

	// added by a-3045 for CR AirNZ265 starts
	private static final String DISCREPANCYCODE = "uld.defaults.discrepancyCode";

	// added by a-3045 for CR AirNZ265 ends

	private static final String SYSPAR_BASE = "system.defaults.unit.currency";

	private static final String SYSPAR_EXCHANGERATE = "uld.defaults.exchangeratepriorityorder";

	/**
	 *
	 */
	private static final String ULD_STK_DEV_WRKFLO = "ULDSTKDEVWRKFLO";

	private static final String ULD_STK_DEFNCY_WRKFLO = "ULDSTKDEFNCYWRKFLO";

	/**
	 *
	 */
	private static final String ULD_STK_EXS_WRKFLO = "ULDSTKEXSWRKFLO";

	/**
	 *
	 */
	private static final String ACC_STK_DPL_WRKFLO = "ULDACCSTKDPLWRKFLO";

	/**
	 *
	 */
	private static final String ULD_DIS_WRKFLO = "ULDDISWRKFLO";

	/**
	 *
	 */
	private static final String HST_ULD_WRKFLO = "uld.defaults.hostuldalert";

	private static final String HST_ULD_WRKFLO_VAL = "HSTULDWRKFLO";

	/**
	 *
	 */
	private static final String FRN_ULD_WRKFLO = "uld.defaults.foreignuldalert";

	/**
	 *
	 */
	private static final String FRN_ULD_WRKFLO_VAL = "FRNULDWRKFLO";

	/**
	 *
	 */
	private static final String RECORD_ULD_MOVEMENT = "recorduldmovement";

	private static final String INTERNALLY_MOVED = "internallymoved";

	/**
	 *
	 */
	private static final String CREATE_ULDINTMVT = "ULDINTMVTCPT";

	private static final String DUMMY_MVT = "D";

	private static final String ACTUAL_MVT = "A";

	private static final String AGENT = "G";

	private static final String CUSTOMER = "C";

	private static final String PERMANENT = "P";

	private static final String UCM_CONTENT = "uld.defaults.contentcodes";

	private static final String NON_CARRIERID = "YY";

	private static final String TO_BE_RETURNED = "T";

	private static final String OTHERS = "O";

	private static final String DAMAGED = "D";

	private static final String NOT_DAMAGED = "N";

	private static final String TEMPORARY = "T";

	private static final String DIS_CLOSED = "Y";

	private static final String DIS_OPEN = "N";

	private static final String ULDNATURE_GEN = "GEN";

	private static final String NOT_INTRANSIT = "N";

	private static final String UCM_IN = "IN";

	private static final String UCM_OUT = "OUT";

	private static final String UCM_PROCESSED_AND_SAVED = "O";

	private static final String CONTENT_CARGO = "C";

	private static final String TRANSIT = "T";
	private static final String INTERMEDIATE = "I";
	private static final String ARRIVED = "A";
	/*
	 * Duplicated UCMOUT
	 */
	private static final String E_ONE = "E1";

	/*
	 * Duplicated UCMIN
	 */
	private static final String E_TWO = "E2";

	/*
	 * ULD is not in the System
	 */
	private static final String E_THREE = "E3";

	/*
	 * ULD is NonOperational
	 */
	private static final String E_FOUR = "E4";

	/*
	 * ULD is not int the stationStock and it is in Intransit condition of other
	 * station
	 */
	private static final String E_FIVE = "E5";

	/*
	 * ULD is not in station stock.But it is inStation condition of another
	 * station stock
	 */
	private static final String E_SIX = "E6";

	/*
	 * ULD is not in Airline Stock.
	 */
	private static final String E_SEVEN = "E7";

	/*
	 * The last movement date is greater than the current date
	 */
	private static final String E_EIGHT = "E8";

	/*
	 * The error is logged in when there is any mismatch between the UCMIN AND
	 * COUNTER UCMOUT eg: Suppose 1) out message is completely missing for the
	 * IN 2) When there are some missing ulds in UCMIN when compared to UCMOUT
	 * 3) When there are some extra ulds in UCMIN compared to UCMOUT 4) When a
	 * UCMIN against a dup out has struck the system , then E9 is logged in.
	 *
	 */
	private static final String E_NINE = "E9";

	/*
	 * The error is logged in when a UCMOUT is struck after a UCMIN has strucked
	 */
	private static final String E_TWELVE = "E12";

	/*
	 * The error is caused when a UCMIN is going to b saved againt Duplicate
	 * UCMOUT
	 */
	private static final String E_THIRTEEN = "E13";

	/*
	 * The error is stacked against a ULD when the login Airline is different
	 * from the flight Airline. For reconciliation , do loan transaction to the
	 * flight Airline if uld is ours or of another Airline which is different
	 * from flight airline if uld is that of flight Airline , do return
	 * transaction
	 *
	 */
	private static final String E_FOURTEEN = "E14";

	/*
	 * ErrorCode is attached when the uld is in the station but it is in
	 * INTRANSIT status
	 */
	private static final String E_FIFTEEN = "E15";

	private static final String SCM_RECEIVED = "Y";

	private static final String SCM_PENDING = "N";

	// added by a-3045 for Auditing starts
	private static final String GENERATE_LUCMESSAGE = "ULDLUCGEN";

	private static final String GENERATE_MUCMESSAGE = "ULDMUCGEN";

	private static final String RESENT_MUCMESSAGE = "ULDMUCRNT";

	private static final String PROCESS_LUCMESSAGE = "ULDLUCPRC";

	private static final String PROCESS_SCMMESSAGE = "ULDSCMPRC";

	// added by a-3045 for Auditing ends

	private static final String SENT_SCMMESSAGE = "ULDSCMSNT";

	private static final String MUC_UPDATE = "ULDMUCUPD";

	private static final String CONTENT_EMPTY = "E";

	private static final String FACILITY_REPAIR = "RPR";

	private static final String FACILITY_AGENT = "AGT";

	private static final String BLANK = "";

	private static final String REPAIRHEAD_ONETIME = "uld.defaults.repairStatus";

	private static final String PROCESS_CPMMESSAGE = "ULDCPMPRC";

	private static final String ULDDOESNOTEXISTS_PREFIX = "The ULD(s) ";

	private static final String ULDDOESNOTEXISTS_SUFFIX = " does not exist in the system";

	private static final String DUMMY_LOAN_TRANSACTION = "D";
	private static final String DUMMY_BORROW_TRANSACTION = "B";
	private static final String PAR_CODE = "uld.defaults.airportmechanised";

	public static final String INVALID_AIRLINE = "shared.airline.invalidairline";
	
	/** The Constant SCM_MOVEMENT_REMARKS. */
	private static final String SCM_MOVEMENT_REMARKS = "SCM sent at ";
	
	/** The Constant RECEIVED_SCM_MOVEMENT_REMARKS. */
	private static final String RECEIVED_SCM_MOVEMENT_REMARKS = "via SCM message received at ";
	
	/** The Constant RECEIVED_UCM_MOVEMENT_REMARKS. */
	private static final String RECEIVED_UCM_MOVEMENT_REMARKS = "via UCM message received at ";
	private static final String SCREEN = "SCREEN";

    /** Added for ICRD-192217 and ICRD-192280*/
    public static final String ULDSTK_NOTIFICATION_SOURCE="ULDSTK";
    public static final String UCMMSG_NOTIFICATION_SOURCE="MSGUCM";

    //Added by A-7656 for ICRD-240667
    private static final String SUBSYSTEM_ULD = "U";
    private static final String FUNCTION_POINT_ULD_INVOICING = "UI";
	//Added by A-7359 for ICRD-260301
	private static final String TOAIRLINE = "TOAIRLINE";
	private static final String FROMAIRLINE = "FROMAIRLINE"; 
    private static final String SYS_PARAM_DISPLAYDISONSTOCKCHECK = "uld.defaults.displaydiscrepancyonstockcheck";
    //Added by A-7359 for ICRD-248560
    private static final String SYSPAR_ULDINVCURRENCY = "uld.defaults.uldinvoicingcurrency";
    private static final String TWO_APLHA = "2";
    private static final String MRA = "M";

	private static final String ULD_TRANSACTION_CREATION_BASED_ON = "uld.default.transactioncreationbasedon";

	private static final String ULD_OWNER_CODE = "ULDCARCOD";

	private static final  String ULD_OWNER_AIRLINE_CODE = "OWNAIRCOD";
	
	private static final String AIRLINE1_BASEDON = "uld.default.poolownerairline1basedon";
	private static final String LUC_SEND_FOR_POOLAIRLINE = "uld.default.lucsendingforpoolairline";
	private static final String ULD_DELIVERY = "DL";
	private static final Log LOGGER = LogFactory.getLogger(ULDController.class.getSimpleName()); 
	/**
	 * This method saves the invoice details for the repairs done on a ULD
	 *
	 * @param uldRepairVO
	 * @throws SystemException
	 */
    public void saveRepairInvoice(ULDRepairVO uldRepairVO)
            throws SystemException {
	}

	/**
	 * This method retrieves the repair head details for invoicing.
	 *
	 * @author A-1883
	 * @param companyCode
	 * @param invoiceRefNumber
	 * @return ULDRepairInvoiceVO
	 * @throws SystemException
	 */
    public ULDRepairInvoiceVO findRepairInvoiceDetails(String companyCode,
            String invoiceRefNumber) throws SystemException {
		log.entering("ULDController", "findRepairInvoiceDetails");
        return ULDRepair
                .findRepairInvoiceDetails(companyCode, invoiceRefNumber);
	}

	/**
	 * This method validates if the ULD exists in the system
	 *
	 * @author A-1883
	 * @param companyCode
	 * @param uldNumber
	 * @return ULDValidationVO
	 * @throws SystemException
	 */
    public ULDValidationVO validateULD(String companyCode, String uldNumber)
            throws SystemException {
		log.entering("ULDController", "validateULD");
		return ULD.validateULD(companyCode, uldNumber);
	}

	/**
	 * This method is used to list the damage reports according to the specified
	 * filter criteria
	 *
	 * @param uldDamageFilterVO
	 * @return Collection<ULDDamageListVO>
	 * @throws SystemException
	 */
    public Page<ULDDamageDetailsListVO> findULDDamageList(
            ULDDamageFilterVO uldDamageFilterVO) throws SystemException {
        log.entering("ULDController", "findULDDamageList");
        return ULDDamage.findULDDamageList(uldDamageFilterVO);
	}

	/**
	 *
	 * @param uldDamageDeleteVOs
	 * @throws SystemException
	 */
    public void deleteULDDamages(
            Collection<ULDDamageDeleteVO> uldDamageDeleteVOs)
            throws SystemException {
		log.entering("ULDController", "deleteULDDamages");
		for (ULDDamageDeleteVO uldDamageDeleteVO : uldDamageDeleteVOs) {
            ULDDamage uldDamage = ULDDamage.find(uldDamageDeleteVO
                    .getCompanyCode(), uldDamageDeleteVO.getUldNumber(),
					uldDamageDeleteVO.getDamageSequenceNumber());
			uldDamage.remove();
		}
	}

	/**
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @param pageNumber
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDDamageReferenceNumberLovVO> findULDDamageReferenceNumberLov(
            String companyCode, String uldNumber, int pageNumber)
            throws SystemException {
        log.entering("ULDController", "findULDDamageList");
        return ULDDamage.findULDDamageReferenceNumberLov(companyCode,
                uldNumber, pageNumber);
	}

	/**
	 *
	 * @param uldRepairFilterVO
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDRepairDetailsListVO> listULDRepairDetails(
            ULDRepairFilterVO uldRepairFilterVO) throws SystemException {
		log.entering("ULDController", "listULDRepairDetails");

        return new ULDRepair().listULDRepairDetails(uldRepairFilterVO);
	}

    private ULDVO populateBaseUldDetails(ULDDamageRepairDetailsVO uldDamageRepairDetailsVO)throws SystemException {
    	this.log.entering("ULDController", "populateBaseUldDetails");
	    LogonAttributes logonAttributes = (LogonAttributes)ContextUtils.getSecurityContext().getLogonAttributesVO();
	    ULDVO uldVO = new ULDVO();
	    Collection<ErrorVO> errors = null;

	    String uldNumber = uldDamageRepairDetailsVO.getUldNumber();
	    if ((uldNumber != null) && (uldNumber.trim().length() > 0)) {
	      String uldtyp = uldNumber.substring(0, 3);

	      uldVO.setUldNumber(uldNumber);
	      uldVO.setUldType(uldtyp);
	      String arlDtl = findOwnerCode(logonAttributes.getCompanyCode(), uldNumber.substring(uldNumber.length() - 2), uldNumber.substring(uldNumber.length() - 3));
	      this.log.log(5, new Object[] { "airlineDetails****", arlDtl });
	      if ((arlDtl == null) || (arlDtl.isEmpty())) {
	        ErrorVO error = new ErrorVO("shared.airline.invalidairline", new Object[] { uldNumber });
	        if (errors == null) {
	        	errors = new ArrayList<ErrorVO>();
	        }
	        errors.add(error);
	        throw new SystemException(errors);
	      }
	      String[] arldtlArray = arlDtl.split("~");
	      boolean isTwoAlpha = false;
	      if ("2".equals(arldtlArray[0])) {
	    	  isTwoAlpha = true;  
	      } else {
	        isTwoAlpha = false;
	      }
	      
	      String airlineCode;
	      if (isTwoAlpha)
	        airlineCode = uldNumber.substring(uldNumber.length() - 2);
	      else {
	        airlineCode = uldNumber.substring(uldNumber.length() - 3);
	      }
	      uldVO.setOperationalAirlineCode(airlineCode);
	      uldVO.setOperationalOwnerAirlineCode(airlineCode);
	      uldVO.setOwnerAirlineCode(airlineCode);
	      uldVO.setOperationalAirlineIdentifier(Integer.valueOf(arldtlArray[1]));
	      uldVO.setOwnerAirlineIdentifier(Integer.valueOf(arldtlArray[1]));
	    }

	    uldVO.setCompanyCode(logonAttributes.getCompanyCode());
	    uldVO.setLastUpdateUser(logonAttributes.getUserId());
	    uldVO.setOperationalFlag(OPERATION_FLAG_INSERT);
	    uldVO.setCurrentStation(logonAttributes.getAirportCode());
	    uldVO.setOverallStatus(NONOPERATIONAL);
	    return uldVO;
	}

	/**
	 *
	 * @param uldDamageRepairDetailsVO
	 * @throws SystemException
	 */
    @Raise(module="uld", submodule="defaults", event="SAVE_ULD_DAMAGE_EVENT", methodId="uld.defaults.saveULDDamage")
	public void saveULDDamage(ULDDamageRepairDetailsVO uldDamageRepairDetailsVO)
			throws SystemException, CurrencyConversionException {
		log.entering("ULDController", "saveULDDamage");
        LogonAttributes logonAttributes = ContextUtils
                .getSecurityContext().getLogonAttributesVO();
		ULD uld = new ULD();
		long damageReferenceNumber = 0;
		ULDDamage uldDamage = new ULDDamage();
        Collection<String> uldNos = new ArrayList<String>();
        String companyCode="";
        
        boolean canCreateULD = false;
		Collection<String> systemParameterCodes = new ArrayList<String>();
        systemParameterCodes.add(ULD_STK_UPDATE_FOR_OWN);
        Map parameterMap = new HashMap();
        try {
        	parameterMap = new SharedDefaultsProxy().findSystemParameterByCodes(systemParameterCodes);
        } catch (ProxyException proxyException) {
        	log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
        }
        
        if (uldDamageRepairDetailsVO != null) {
            companyCode=uldDamageRepairDetailsVO.getCompanyCode();
        try {
            	uld = ULD.find(uldDamageRepairDetailsVO.getCompanyCode(), uldDamageRepairDetailsVO.getUldNumber());
			log.log(Log.INFO, "!!!!uld", uld);
		} catch (FinderException finderException) {
			log.log(Log.INFO, "FinderException");
	            if (FLAG_YES.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OWN)))
	              canCreateULD = true;
	            else {
	              throw new SystemException(finderException.getErrorCode());
	            }
	        }
        
	        if (canCreateULD) {
	        	ULDVO uldVO = populateBaseUldDetails(uldDamageRepairDetailsVO);
	            try {
					saveULD(uldVO);
				} catch (DuplicateManufacturerNumberExistsException | ULDInTransactionException
						| DimensionConversionException e1) {
					throw new SystemException("ULD creation failed");
				}
	
	            try {
	              uld = ULD.find(uldDamageRepairDetailsVO.getCompanyCode(), uldDamageRepairDetailsVO.getUldNumber());
	              log.log(Log.INFO, "!!!!uld", uld);
	            } catch (FinderException finderException) {
	              log.log(Log.INFO, "FinderException");
	              throw new SystemException(finderException.getErrorCode());
	            }
	        }
	        
		log.log(Log.INFO, "!!!!GOING TO UPDATE ULD");

		/*
         * added by a-3278 for bug 34185 on 27Jan09 To remove the missed ULDs
         * from discrepency table if transaction exists for that
		 */


			uldNos.add(uldDamageRepairDetailsVO.getUldNumber());

        Collection<ULDDiscrepancy> uldDiscrepancies = ULDDiscrepancy
                .findULDDiscrepancies(
                        companyCode, uldNos);
		if (uldDiscrepancies != null && uldDiscrepancies.size() > 0) {
			for (ULDDiscrepancy uldDiscrepancy : uldDiscrepancies) {
				uldDiscrepancy.setCloseStatus("Y");
			}
		}
		// a-3278 ends

		// Added by Preet on 27Aug starts for QF 1006
		ULDAirportLocationVO uLDAirportLocationVO = null;

		if (uldDamageRepairDetailsVO.getOverallStatus() != null
				&& uldDamageRepairDetailsVO.getOverallStatus().trim().length() > 0) {
            if (null != uld.getOverallStatus() && !uld.getOverallStatus().equalsIgnoreCase(//check added by A-7866 for ICRD-218860
					uldDamageRepairDetailsVO.getOverallStatus())
                    && NONOPERATIONAL.equalsIgnoreCase(uldDamageRepairDetailsVO
                            .getOverallStatus())) {
                log.log(Log.INFO, "Internal movement shud be marked---->");
                // added for bug 17957 on 08Sep08
                uLDAirportLocationVO = ULD.findCurrentLocation(
                        uldDamageRepairDetailsVO.getCompanyCode(), uld
                                .getCurrentStation(), FACILITY_REPAIR);
				if (uLDAirportLocationVO != null) {
					uld.setFacilityType(uLDAirportLocationVO.getFacilityType());
					uld.setLocation(uLDAirportLocationVO.getFacilityCode());
				}
				// a-3278 ends
				ULDIntMvtVO uldIntMvtVO = new ULDIntMvtVO();
				ULDIntMvtDetailVO uldIntMvtDetailVO = new ULDIntMvtDetailVO();
				Collection<ULDIntMvtDetailVO> uldIntMvtDetailVOs = new ArrayList<ULDIntMvtDetailVO>();
				Collection<ULDIntMvtVO> uldIntMvts = new ArrayList<ULDIntMvtVO>();

				uldIntMvtVO.setAirport(uld.getCurrentStation());
                uldIntMvtVO.setCompanyCode(uldDamageRepairDetailsVO
                        .getCompanyCode());
                uldIntMvtVO.setUldNumber(uldDamageRepairDetailsVO
                        .getUldNumber());
                uldIntMvtVO.setLastUpdatedUser(uldDamageRepairDetailsVO
                        .getLastUpdatedUser());

				uldIntMvtDetailVO.setAirport(uld.getCurrentStation());
                uldIntMvtDetailVO.setCompanyCode(uldDamageRepairDetailsVO
                        .getCompanyCode());
                uldIntMvtDetailVO.setFromLocation(uld.getLocation());
                uLDAirportLocationVO = ULDAirportLocation
                        .findLocationforFacility(uldDamageRepairDetailsVO
                                .getCompanyCode(), uld.getCurrentStation(),
                                FACILITY_REPAIR);
                if (uLDAirportLocationVO != null) {
                    uldIntMvtDetailVO.setToLocation(uLDAirportLocationVO
                            .getFacilityCode());
                } else {
                    uldIntMvtDetailVO.setToLocation(BLANK);
                }

                uldIntMvtDetailVO.setMvtType(ULDIntMvtDetailVO.ACTUAL_MOVEMENT);
                if(uldDamageRepairDetailsVO.getLastUpdatedTime() != null) {
                uldIntMvtDetailVO.setMvtDate(new LocalDate(
                        uldDamageRepairDetailsVO.getLastUpdatedTime(), true));
                }
                uldIntMvtDetailVO.setUldNumber(uldDamageRepairDetailsVO
                        .getUldNumber());

                // When ULD is marked Un-Serviciable then RTNSTA will be 'N' and
				// CNT will be set as 'RPR'
                uldIntMvtDetailVO
                        .setContent(ULDAirportLocationVO.FACLITY_REPAIRDOC);
				uldIntMvtDetailVO.setReturnStatus(ULDAirportLocationVO.FLAG_NO);
				if (uldDamageRepairDetailsVO.getUldDamageVOs() != null
						&& uldDamageRepairDetailsVO.getUldDamageVOs().size() > 0) {
                    ULDDamageVO damageVO = uldDamageRepairDetailsVO
                            .getUldDamageVOs().iterator().next();
					uldIntMvtDetailVO.setAgentName(damageVO.getParty());
				}

                // If Facility Type is Ware house --then ULD need to checked Out
				// and Checked In

				Collection<StorageUnitVO> storageUnitVOs = new ArrayList<StorageUnitVO>();

				boolean isWhsDelete = false;
                // If ULD is currenly in Warehouse --delete the storage details
                if (WAREHOUSE.equals(uld.getFacilityType())) {
                    isWhsDelete = true;
                    StorageUnitVO storageUnitVO = new StorageUnitVO();
                    storageUnitVO.setAirportCode(uld.getCurrentStation());
                    storageUnitVO.setCompanyCode(uldDamageRepairDetailsVO
                            .getCompanyCode());
                    storageUnitVO.setWarehouseCode(uld.getLocation());
                    storageUnitVO.setStorageUnitCode(uldDamageRepairDetailsVO
                            .getUldNumber());
                    storageUnitVOs.add(storageUnitVO);
                }
                log.log(Log.INFO, "storageUnitVOs-------->", storageUnitVOs);
                // Check out the ULD from warehouse
                if (isWhsDelete) {
                    WarehouseProxy warehouseProxy = new WarehouseProxy();
                    try {
                        warehouseProxy.deleteStorageUnitDetails(storageUnitVOs);
                    }
                    catch (SystemException systemException) {
						log.log(Log.INFO, "system exception in deleteLocationType()");
						systemException.getErrors();
                    }
                    catch (ProxyException proxyException) {
                        log.log(Log.INFO, "-------proxyException-------",
                                proxyException.getErrors());
                        log.log(Log.INFO, "-------proxyException-------",
                                proxyException.getMessage());
					}
				}

				uldIntMvtDetailVOs.add(uldIntMvtDetailVO);
				uldIntMvtVO.setULDIntMvtDetailVOs(uldIntMvtDetailVOs);
				uldIntMvts.add(uldIntMvtVO);
				saveULDIntMvts(uldIntMvts);
				uld.setFacilityType(ULDAirportLocationVO.FACLITY_REPAIRDOC);
			}
			/*
             * If Non operational ULD is marked as Operational , then we update
             * ULDINTMVTDTL
			 */
			else if (NONOPERATIONAL.equals(uld.getOverallStatus())
                    && OPERATIONAL.equalsIgnoreCase(uldDamageRepairDetailsVO
                            .getOverallStatus())) {

				/*
				 * This is done for updation Location on making a uld
				 * serviceable , by Asharaf on 08Sep08
				 */
                uLDAirportLocationVO = ULD.findCurrentLocation(
                        uldDamageRepairDetailsVO.getCompanyCode(), uld
                                .getCurrentStation(), CONTENT_EMPTY);
				if (uLDAirportLocationVO != null) {
					uld.setFacilityType(uLDAirportLocationVO.getFacilityType());
					uld.setLocation(uLDAirportLocationVO.getFacilityCode());
				} else {
					uld.setFacilityType(ULDVO.NO_LOCATION);
					uld.setLocation(ULDVO.NO_LOCATION);
				}
             
                ULDIntMvtHistoryFilterVO uldIntMvtFilterVO = new ULDIntMvtHistoryFilterVO();
                uldIntMvtFilterVO.setCompanyCode(logonAttributes
                        .getCompanyCode());
                uldIntMvtFilterVO.setUldNumber(uldDamageRepairDetailsVO
                        .getUldNumber());
                uldIntMvtFilterVO
                        .setReasonForMvt(ULDAirportLocationVO.FACLITY_REPAIRDOC);
                Page<ULDIntMvtDetailVO> uldIntMvtVOs = findIntULDMovementHistory(
                        uldIntMvtFilterVO, 1);
                log.log(Log.INFO, " uldIntMvtVOs FOR REPAIR FOUND ARE --->>> ",
                        uldIntMvtVOs);
                if (uldIntMvtVOs != null && uldIntMvtVOs.size() > 0) {
                    ULDIntMvtDetailVO latestMvtVo = uldIntMvtVOs
                            .get(uldIntMvtVOs.size() - 1);
                    if (latestMvtVo != null) {
                        ULDIntMvtDetail latestMvt = null;
                        latestMvt = ULDIntMvtDetail.find(latestMvtVo
                                .getCompanyCode(), latestMvtVo.getUldNumber(),
                                latestMvtVo.getIntSequenceNumber(), latestMvtVo
                                        .getIntSerialNumber());
                        log.log(Log.INFO, " MOVEMENT DEATIL FOUND IS --- ",
                                latestMvt);
                        if (latestMvt != null) {
                            latestMvt
                                    .setReturnStatus(ULDIntMvtDetailVO.FLAG_YES);
                            /*
                             * Update ULD with the default empty location to be
                             * done later
							 */
						}
					}

				}

			}

		}
		// Added by Preet on 27Aug ends for QF 1006

        uld.update(uldDamageRepairDetailsVO.getDamageStatus(),
                uldDamageRepairDetailsVO.getOverallStatus(),
                uldDamageRepairDetailsVO.getDamgePicture(),
                uldDamageRepairDetailsVO.getRepairStatus(),
                uldDamageRepairDetailsVO.getSupervisor(),
                uldDamageRepairDetailsVO.getInvestigationReport(),
                uldDamageRepairDetailsVO.getLastUpdatedUser(),
                uldDamageRepairDetailsVO.getLastUpdatedTime());
        /*
         * if (uldDamageRepairDetailsVO.getUldDamagePictureVO() != null) { if
         * (uldDamageRepairDetailsVO.getUldDamagePictureVO().getImage() != null) {
         * pictureVO = uldDamageRepairDetailsVO.getUldDamagePictureVO(); } } if
		 * (pictureVO != null) { if (pictureVO.isPicturePresent()) {
		 * ULDDamagePicture picture = null; boolean isFound = true; try {
		 * picture = ULDDamagePicture.find(pictureVO.getCompanyCode(),
         * pictureVO.getUldNumber() , pictureVO.getSequenceNumber()); } catch
         * (FinderException ex) { isFound = false; } if (isFound) {
		 * log.log(Log.INFO, "% % % % % % % GOING TO UPDATE PICTURE");
         * picture.update(pictureVO); } else { log.log(Log.INFO, "% % % % % % %
         * GOING TO INSERT PICTURE"); new ULDDamagePicture(pictureVO); } } }
		 */
		if (uldDamageRepairDetailsVO.getUldDamageVOs() != null
				&& uldDamageRepairDetailsVO.getUldDamageVOs().size() > 0) {

            for (ULDDamageVO uldDamageVO : uldDamageRepairDetailsVO
                    .getUldDamageVOs()) {
                if (ULDDamageVO.OPERATION_FLAG_INSERT.equals(uldDamageVO
                        .getOperationFlag())) {
                    Criterion damageCriterion = KeyUtils.getCriterion(
                            uldDamageRepairDetailsVO.getCompanyCode(),
							DMGREFNUM, uldDamageRepairDetailsVO.getUldNumber());
					String key = KeyUtils.getKey(damageCriterion);
					log.log(Log.FINE, "criterion key!!!!!!", key);
					damageReferenceNumber = new Long(key);
                    log.log(Log.INFO, "!!!!!damageReferenceNumber",
                            damageReferenceNumber);
					break;
				}
			}
			String locationCode = "";
			String facilityType = "";
			int seqnumber = -1;
            for (ULDDamageVO uldDamageVO : uldDamageRepairDetailsVO
                    .getUldDamageVOs()) {
                if (ULDDamageVO.OPERATION_FLAG_DELETE.equals(uldDamageVO
                        .getOperationFlag())) {
					log.log(Log.FINE, "From operational Flag D---------");
                    uldDamage = ULDDamage.find(uldDamageRepairDetailsVO
                            .getCompanyCode(), uldDamageRepairDetailsVO
                            .getUldNumber(), uldDamageVO.getSequenceNumber());
                    log.log(Log.FINE, "The uldDamage Details frm  controller",
                            uldDamage);
                    log
                            .log(
                                    Log.FINE,
                                    "The uldDamage Details frm  controller and damageReferencceNumber",
									uldDamage.getDamageReferenceNumber());
                    ULDAuditVO uldAuditVO = new ULDAuditVO(ULDDamageVO.MODULE,
                            ULDDamageVO.SUBMODULE, ULDDamageVO.ENTITY);

                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldDamage, false);

					uldDamage.remove();

					findULDAuditVOForDamage(uldDamage, uldAuditVO, uldDamageVO);
					uldAuditVO.setActionCode(DELETE_ULDDAMAGE);
					uldAuditVO.setAuditRemarks(uldDamageVO.getRemarks());
					AuditUtils.performAudit(uldAuditVO);
                }else{ // Identifying latest Damage captured for the ULD
                	//Commented as part of ICRD-337044
                    //if(uldDamageVO.getSequenceNumber() > seqnumber){
						locationCode = uldDamageVO.getLocation(); 
						facilityType = uldDamageVO.getFacilityType();
                        seqnumber = (int)uldDamageVO.getSequenceNumber();
                   // }
				}
			}
			/*
			 * ULD Location / Facility Type  setting against ULD master . 
			 * changes done by T-1927 for the BUG ICRD-43243
			 */
            if (facilityType != null && facilityType.trim().length() > 0){
				uld.setFacilityType(facilityType);
            }else{
				// added for bug 17957 on 08Sep08
                uLDAirportLocationVO = ULD.findCurrentLocation(
                        uldDamageRepairDetailsVO.getCompanyCode(), uld
                                .getCurrentStation(), FACILITY_REPAIR);
				if (uLDAirportLocationVO != null) {
					uld.setFacilityType(uLDAirportLocationVO.getFacilityType());
					uld.setLocation(uLDAirportLocationVO.getFacilityCode());
				}
				// a-3278 ends
			}
            if (locationCode!=null && locationCode.trim().length() > 0){
				uld.setLocation(locationCode);
			}
			
            for (ULDDamageVO uldDamageVO : uldDamageRepairDetailsVO
                    .getUldDamageVOs()) {
                if (ULDDamageVO.OPERATION_FLAG_UPDATE.equals(uldDamageVO
                        .getOperationFlag())) {

                    log.log(Log.INFO,
                            "entering update/////////////////////////// ");

                    uldDamage = ULDDamage.find(uldDamageRepairDetailsVO
                            .getCompanyCode(), uldDamageRepairDetailsVO
                            .getUldNumber(), uldDamageVO.getSequenceNumber());

                    ULDAuditVO uldAuditVO = new ULDAuditVO(ULDDamageVO.MODULE,
                            ULDDamageVO.SUBMODULE, ULDDamageVO.ENTITY);

                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldDamage, false);
					uldDamage.update(uldDamageVO);

                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldDamage, false);

					findULDAuditVOForDamage(uldDamage, uldAuditVO, uldDamageVO);

					uldAuditVO.setActionCode(UPDATE_ULDDAMAGE);
					uldAuditVO.setAuditRemarks(uldDamageVO.getRemarks());
					AuditUtils.performAudit(uldAuditVO);
                    //removing pictures
                    if("Y".equals(uldDamageVO.getImageUpdated())){
                    	// remove all images of a damage
                    	new ULDDamage().removeDamageImages(uldDamageVO);
                    }
                    if (uldDamageVO.getPictureVOs()!= null && uldDamageVO.getPictureVOs().size() > 0) {
                    	for(ULDDamagePictureVO uldDamagePictureVO:uldDamageVO.getPictureVOs()){
						if (ULDDamagePictureVO.OPERATION_FLAG_UPDATE
	                                .equalsIgnoreCase(uldDamagePictureVO
	                                        .getOperationFlag())) {
	                        	//todo Irshi
	                            if (uldDamagePictureVO.getImage() != null) {
	                                ULDDamagePicture pic = new ULDDamagePicture(uldDamagePictureVO);
	                                /*try {
	                                    pic = ULDDamagePicture.find(uldDamagePictureVO.getCompanyCode(),
	                                    		uldDamagePictureVO
	                                                    .getUldNumber(),
	                                                    uldDamagePictureVO.getSequenceNumber(),uldDamagePictureVO.getImageSequenceNumber());
								} catch (FinderException ex) {
									// just avoid this exception
	                                }*/
	                                /*pic.update(uldDamagePictureVO);
	                                ImageModel imageModel = uldDamageVO.getPictureVO().getImage();
	                                Collection<ULDDamagePictureVO> pictures = uldDamageVO.getPictureVOs();
	                               // log.log(Log.FINE, "The Blob::>", imageModel);
								Blob tBlob = null;
								try {
                                    tBlob = PersistenceUtils
                                            .createBlob(imageModel.getData());
                                } catch (SystemException e) {
                                    // To be reviewed Auto-generated catch block
									e.getMessage();
								}
								pic.setDamagePicture(tBlob);
	                                pic.setPictureType(imageModel.getContentType());*/
							}
						} else if (ULDDamagePictureVO.OPERATION_FLAG_INSERT
                                .equalsIgnoreCase(uldDamageVO.getPictureVO()
                                        .getOperationFlag())) {
	                            if (uldDamagePictureVO.getImage() != null) {
	                                new ULDDamagePicture(uldDamagePictureVO);
							}
						}
                    	}// end of for
					}
                } else if (ULDDamageVO.OPERATION_FLAG_INSERT.equals(uldDamageVO
                        .getOperationFlag())) {
					log.log(Log.FINE, "The Insert frm picture details");
                    log.log(Log.FINE,
                            "The Insert frm picture details from uldDamageVO",
                            uldDamageVO);
					uldDamageVO.setDamageReferenceNumber(damageReferenceNumber);

                    ULDDamage damage = new ULDDamage(uldDamageRepairDetailsVO
                            .getCompanyCode(), uldDamageRepairDetailsVO
                            .getUldNumber(), uldDamageVO);

                    log.log(Log.FINE, "The uldDamage Details frm  controller",
                            damage);
                    log
                            .log(
                                    Log.FINE,
                                    "The uldDamage Details frm  controller and damageReferencceNumber",
									damage.getDamageReferenceNumber());
                    ULDAuditVO uldAuditVO = new ULDAuditVO(ULDDamageVO.MODULE,
                            ULDDamageVO.SUBMODULE, ULDDamageVO.ENTITY);

                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, damage, true);
					// log.log(Log.INFO,"!!!!!!!!!!!
					// uldStockConfig.getUldStockConfigPK()"+uldStockConfig.getUldStockConfigPK());
					findULDAuditVOForDamage(damage, uldAuditVO, uldDamageVO);
					uldAuditVO.setActionCode(CREATE_ULDDAMAGE);
					uldAuditVO.setAuditRemarks(uldDamageVO.getRemarks());
					AuditUtils.performAudit(uldAuditVO);
                    if (uldDamageVO.getPictureVOs() != null&&uldDamageVO.getPictureVOs().size()>0) {
                    	for(ULDDamagePictureVO uldDamagePictureVO:uldDamageVO.getPictureVOs())
						if (ULDDamagePictureVO.OPERATION_FLAG_INSERT
                                .equalsIgnoreCase(uldDamagePictureVO
                                        .getOperationFlag())) {
                            if (uldDamagePictureVO.getImage() != null) {
                            	uldDamagePictureVO.setSequenceNumber(
                                        uldDamageVO.getSequenceNumber());
                            	uldDamagePictureVO.setLastUpdateUser(logonAttributes.getUserId());
                                log
                                        .log(
                                                Log.INFO,
                                                "%%%%%%%%%%%%   GOING TO INSERT PICTURE",
												uldDamageVO.getPictureVO());
                                new ULDDamagePicture(uldDamagePictureVO);
							}
						}
					}
				}
			}
		}
		if (uldDamageRepairDetailsVO.getUldRepairVOs() != null
				&& uldDamageRepairDetailsVO.getUldRepairVOs().size() > 0) {
            for (ULDRepairVO uldRepairVO : uldDamageRepairDetailsVO
                    .getUldRepairVOs()) {
                if (ULDRepairVO.OPERATION_FLAG_DELETE.equals(uldRepairVO
                        .getOperationFlag())) {
                    ULDRepair uldRepair = ULDRepair.find(
                            uldDamageRepairDetailsVO.getCompanyCode(),
                            uldDamageRepairDetailsVO.getUldNumber(),
                            uldRepairVO.getRepairSequenceNumber());

                    ULDAuditVO uldAuditVO = new ULDAuditVO(ULDRepairVO.MODULE,
                            ULDRepairVO.SUBMODULE, ULDRepairVO.ENTITY);

                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldRepair, false);

					uldRepair.remove();

                    findULDAuditVOForULDRepair(uldRepair, uldAuditVO,
                            uldRepairVO);

					uldAuditVO.setActionCode(DELETE_ULDREPAIR);
					uldAuditVO.setAuditRemarks(uldRepairVO.getRemarks());
					AuditUtils.performAudit(uldAuditVO);
				}
			}
            for (ULDRepairVO uldRepairVO : uldDamageRepairDetailsVO
                    .getUldRepairVOs()) {
				log.log(Log.FINE, "The UdRepairVO details ", uldRepairVO);
                if (ULDRepairVO.OPERATION_FLAG_INSERT.equals(uldRepairVO
                        .getOperationFlag())) {
                    log
                            .log(Log.INFO,
                                    "!!!!GOing to insert ULDRepairVO////////////////////////////");

                    ULDAuditVO uldAuditVO = new ULDAuditVO(ULDRepairVO.MODULE,
                            ULDRepairVO.SUBMODULE, ULDRepairVO.ENTITY);
                    ULDRepair uldRepair = new ULDRepair(
                            uldDamageRepairDetailsVO.getCompanyCode(),
                            uldDamageRepairDetailsVO.getUldNumber(),
                            uldRepairVO);
                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldRepair, true);
                    findULDAuditVOForULDRepair(uldRepair, uldAuditVO,
                            uldRepairVO);

					uldAuditVO.setActionCode(CREATE_ULDREPAIR);
					uldAuditVO.setAuditRemarks(uldRepairVO.getRemarks());
					AuditUtils.performAudit(uldAuditVO);

                } else if (ULDRepairVO.OPERATION_FLAG_UPDATE.equals(uldRepairVO
                        .getOperationFlag())) {
                    ULDRepair uldRepair = ULDRepair.find(
                            uldDamageRepairDetailsVO.getCompanyCode(),
                            uldDamageRepairDetailsVO.getUldNumber(),
                            uldRepairVO.getRepairSequenceNumber());

                    ULDAuditVO uldAuditVO = new ULDAuditVO(ULDRepairVO.MODULE,
                            ULDRepairVO.SUBMODULE, ULDRepairVO.ENTITY);

                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldRepair, false);
					uldRepair.update(uldRepairVO);

                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldRepair, false);

                    findULDAuditVOForULDRepair(uldRepair, uldAuditVO,
                            uldRepairVO);

					uldAuditVO.setActionCode(UPDATE_ULDREPAIR);
					uldAuditVO.setAuditRemarks(uldRepairVO.getRemarks());
					AuditUtils.performAudit(uldAuditVO);
				}
			}
		}
	}
    }

	/**
	 * This method is used to list the damage details for the specified damage
	 * reference number for a particular ULD.
	 *
	 * @param uldDamageFilterVO
	 * @return
	 * @throws SystemException
	 */
    public ULDDamageRepairDetailsVO findULDDamageDetails(
            ULDDamageFilterVO uldDamageFilterVO) throws SystemException {
		log.entering("ULDController", "findULDDamageDetails");
		return ULDDamage.findULDDamageDetails(uldDamageFilterVO);
	}

	/**
	 *
	 * @param uldMovementFilterVO
	 * @param displayPage
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 */
    public Page<ULDMovementDetailVO> findULDMovementHistory(
            ULDMovementFilterVO uldMovementFilterVO, int displayPage)
			throws SystemException {
		log.entering("ULDController", "findULDMovementHistory");
		Page<ULDMovementDetailVO> uldMovementDetailList = null;
        uldMovementDetailList = ULDMovement.findULDMovementHistory(
                uldMovementFilterVO, displayPage);
        log.log(Log.FINE, "uldMovementDetailList from the Server ",
                uldMovementDetailList);
		log.exiting("ULDController", "findULDMovementHistory");
		return uldMovementDetailList;
	}

	/**
	 * This method is used to record ULD movement details for a ULD
	 *
	 * @param uldNOs
	 * @param uldMovementVos
	 * @throws SystemException
	 * @throws ULDDoesNotExistsException
	 */
    public void saveULDMovement(Collection<String> uldNOs,
            Collection<ULDMovementVO> uldMovementVos) throws SystemException,
            ULDDoesNotExistsException {
		Collection<ULDDiscrepancy> discrepancys = null;
		String reportingAirport = null;
		String facilityType = null;
		String location = null;
		String remarks = null;
		String discrepancyCode = null;
        LocalDate discrepancyDate = new LocalDate(LocalDate.NO_STATION,
                Location.NONE, false);
        //log.log(Log.FINE, " SIZE OF THE ULDNOS", uldNOs.size());
        //log.log(Log.FINE, " SIZE OF THE ULDMOVENENTVOS", uldMovementVos.size());
		List<ULDMovementVO> uldMovementVOsList = null;
		long movementSequenceNumber = 0;
		Collection<ULDMovementVO> uldMovement = new ArrayList<ULDMovementVO>();

		int count = 0;
		LocalDate localDate = null;
        if (uldMovementVos != null && uldMovementVos.size() > 0
                && uldNOs != null && uldNOs.size() > 0) {
            log.log(Log.FINE, " SIZE OF THE ULDNOS" , uldNOs.size());
            log.log(Log.FINE, " SIZE OF THE ULDMOVENENTVOS", uldMovementVos.size());
			/*
			 * added by a-3278 for bug 34185 on 27Jan09 To remove the missed
			 * ULDs from discrepency table if transaction exists for that
			 */
			Collection<ULDDiscrepancy> uldDiscrepancies = ULDDiscrepancy
                    .findULDDiscrepancies(uldMovementVos.iterator().next()
                            .getCompanyCode(), uldNOs);
			if (uldDiscrepancies != null && uldDiscrepancies.size() > 0) {
				for (ULDDiscrepancy uldDiscrepancy : uldDiscrepancies) {
					uldDiscrepancy.setCloseStatus("Y");
				}
			}
			// a-3278 ends
			uldMovementVOsList = (ArrayList<ULDMovementVO>) uldMovementVos;

			/*
			 * Create a Key using Criterion say MovementSequenceNumber and set
			 * it in ULDMVTMST and ULDMVTDTL
			 */
            Criterion damageCriterion = KeyUtils.getCriterion(
                    uldMovementVOsList.get(0).getCompanyCode(), MVTSEQNUM);
			String key = KeyUtilInstance.getInstance().getKey(damageCriterion);
			movementSequenceNumber = new Long(key);
            log
                    .log(Log.FINE, "KEY IS ALWAYS>>>>>>>>>>",
                            movementSequenceNumber);
            for (String str : uldNOs) {

                ULDMovementVO vo = new ULDMovementVO();
                log.log(Log.FINE, "CREATE ULD MOVEMENT VOS SETTING ULDNUMBERS",
                        uldNOs.size());
				vo.setCompanyCode(uldMovementVOsList.get(0).getCompanyCode());
				vo.setUldNumber(str);
                vo.setLastUpdatedTime(uldMovementVOsList.get(0)
                        .getLastUpdatedTime());
                vo.setLastUpdatedUser(uldMovementVOsList.get(0)
                        .getLastUpdatedUser());
                vo.setCurrentStation(uldMovementVOsList.get(0)
                        .getCurrentStation());
				vo.setRemark(uldMovementVOsList.get(0).getRemark());
				vo.setMovementSequenceNumber(movementSequenceNumber);
				// added by nisha for QF
				vo.setScmDate(uldMovementVOsList.get(0).getScmDate());
				vo.setScmFlag(uldMovementVOsList.get(0).getScmFlag());
                log.log(Log.FINE, "VALUES IN THE CONTROLLER ARE ",
                        uldMovementVOsList.get(0).getUpdateCurrentStation());
                vo.setUpdateCurrentStation(uldMovementVOsList.get(0)
                        .getUpdateCurrentStation());
				log.log(Log.FINE, "VALUES IN THE CONTROLLER ARE ", vo.getUpdateCurrentStation());
				// added by nisha starts for ANA CR code commented by nisha for
				// reverting the change
				// Collection of Handled Carrier ULDs set in each movement VO.
				// vo.setHandledCarrierULDs(uldMovementVOsList.get(0)
				// .getHandledCarrierULDs());
				// vo.setFacilityType(uldMovementVOsList.get(0).getFacilityType());
				// vo.setPouLocation(uldMovementVOsList.get(0).getPouLocation());
				// added by nisha ends for ANA CR
				vo.setContent(uldMovementVOsList.get(0).getContent());
				vo.setFacilityType(uldMovementVOsList.get(0).getFacilityType());
				vo.setPouLocation(uldMovementVOsList.get(0).getPouLocation());
                //Added by A-7131 for ICRD-213319 starts
				vo.setCarrierCode(uldMovementVOsList.get(0).getCarrierCode());
				vo.setFlightNumber(uldMovementVOsList.get(0).getFlightNumber());
				vo.setFlightDate(uldMovementVOsList.get(0).getFlightDate());
				vo.setPointOfLading(uldMovementVOsList.get(0).getPointOfLading());
				vo.setPointOfUnLading(uldMovementVOsList.get(0).getPointOfUnLading());
                //Added by A-7131 for ICRD-213319 ends
				uldMovement.add(vo);
                reportingAirport = uldMovementVOsList.get(0)
                        .getReportingAirport();
				facilityType = uldMovementVOsList.get(0).getFacilityType();
				location = uldMovementVOsList.get(0).getPouLocation();
                discrepancyDate = uldMovementVOsList.get(0)
                        .getDiscrepancyDate();
				remarks = uldMovementVOsList.get(0).getRemarks();
                discrepancyCode = uldMovementVOsList.get(0)
                        .getDiscrepancyCode();

			}
			/*
			 * Sets the MovementSequenceNumber generated using criterion in to
			 * the uldMovementVos from the Client
			 *
			 */
			for (ULDMovementVO vo : uldMovementVos) {
				log.log(Log.FINE, "SETTING THE MVTSEQNUM FOR THE ULDMVTDTL");
				vo.setMovementSequenceNumber(movementSequenceNumber);
                log.log(Log.FINE,
                        "FINDING THE  GREATEST DATE  FOR THE ULDMVTDTL");
				/*
				 * Find the greatest of the Flight date From the UldMovementVOS
				 */
                if (vo.getFlightDate() != null
                        && vo.getFlightDate().toString().trim().length() > 0) {
					if (count == 0) {
						log.log(Log.INFO, "ENTERED ONLY ONCE");
						localDate = vo.getFlightDate();
                        log.log(Log.FINE,
                                "THE VALUE OF THE LOCAL DATE FIRST TIME",
                                localDate);
					} else if (vo.getFlightDate().after(localDate)) {
						localDate = vo.getFlightDate();
					}
					count++;
				}
			}
			log.log(Log.FINE, "THE GREATEST DATE IS FOUND TO BE ", localDate);
			log.log(Log.INFO, "%%%%%%%%%%%%  uldMovement", uldMovement);
			updateCurrentStationForULD(uldMovement, localDate);

			createULDMovement(uldMovement);
			// added by a-3045 for bug 36389 on 26Feb09 starts

            //Commented as part of ICRD-21184
//          String carrierCode = ULD.findCarrierCode(uldMovementVos.iterator()
//					.next().getCompanyCode(), uldMovementVos.iterator().next()
//					.getFlightCarrierIdentifier());

            //Added as part of ICRD-21184

			String carrierCode = null;
			AirlineValidationVO airlineValidationVO = null;
			try {
                airlineValidationVO = Proxy.getInstance().get(SharedAirlineProductProxy.class).findAirline(uldMovementVos.iterator().next().getCompanyCode(), uldMovementVos.iterator().next().getFlightCarrierIdentifier());
				carrierCode = airlineValidationVO.getAlphaCode();
			} catch (ProxyException proxyException) {
				log.log(Log.INFO, "ProxyException", proxyException.getErrors());
				log.log(Log.INFO, "Cannot find airline", proxyException.getMessage());
			}

			log.log(Log.FINE, "showing CarrierCode----->>>", carrierCode);
			for (ULDMovementVO vo : uldMovementVos) {
				vo.setCarrierCode(carrierCode);
			}
			// added by a-3045 for bug 36389 on 26Feb09 ends
            createULDMovementDetaills(uldMovementVos, movementSequenceNumber,
                    uldNOs);

			log.log(Log.INFO, "uldMovementVos--------------", uldMovementVos);
			performULDMovementAudit(uldMovement, uldMovementVos);


		if (uldMovementVos.iterator().next().getUpdateCurrentStation()) {
            String companyCode = uldMovementVos.iterator().next()
                    .getCompanyCode();
			for (String uldNumber : uldNOs) {
				boolean isThereAnyDiscrepancy = true;
                // Finding ULDDiscrepancy objects. - Added by Sreekumar S as a
				// part of AirNZ CR434
                discrepancys = ULDDiscrepancy.findULDDiscrepanciesObjects(
                        companyCode, uldNumber,null);
				if (discrepancys == null || discrepancys.size() == 0) {
					isThereAnyDiscrepancy = false;
				}
				if (isThereAnyDiscrepancy) {
					for (ULDDiscrepancy discrepancy : discrepancys) {
						if (discrepancy.getScmSequenceNumber() != null
                                && discrepancy.getScmSequenceNumber().trim()
                                        .length() > 0) {
                            ULDSCMReconcileDetailsVO detailsVO = new ULDSCMReconcileDetailsVO();
                            ULDSCMReconcileDetails uLDSCMReconcileDetails = null;
                            int airlineIdentifier = ULDSCMReconcile
                                    .findAirlineIdentifierForSCM(discrepancy
                                            .getUldDiscrepancyPK()
                                            .getCompanyCode(), discrepancy
                                            .getUldDiscrepancyPK()
                                            .getUldNumber(), discrepancy
                                            .getScmSequenceNumber(),
                                            discrepancy.getReportingStation());

                            detailsVO.setCompanyCode(discrepancy
                                    .getUldDiscrepancyPK().getCompanyCode());
                            detailsVO.setUldNumber(discrepancy
                                    .getUldDiscrepancyPK().getUldNumber());
                            detailsVO.setAirportCode(discrepancy
                                    .getReportingStation());
                            detailsVO.setSequenceNumber(discrepancy
                                    .getScmSequenceNumber());

							detailsVO.setAirlineIdentifier(airlineIdentifier);
							if (airlineIdentifier > 0) {
                                uLDSCMReconcileDetails = ULDSCMReconcileDetails
                                        .find(detailsVO);
                                if ("ERR1".equals(uLDSCMReconcileDetails
                                        .getErrorCode())||ULDVO.SCM_MISSING_STOCK.equals(uLDSCMReconcileDetails.getUldStatus())) {
									uLDSCMReconcileDetails.remove();
								} else {
									uLDSCMReconcileDetails.setErrorCode(null);
								}
							}
						}
						// added by nisha for bugfix on 11Jul08 starts
						// ULDDiscrepancyVO uLDDiscrepancyVO = new
						// ULDDiscrepancyVO();
						// uLDDiscrepancyVO.setDiscrepencyDate(discrepancyDate);
						// uLDDiscrepancyVO.setReportingStation(reportingAirport);
						// uLDDiscrepancyVO.setLocation(location);
						// uLDDiscrepancyVO.setDiscrepencyCode(discrepancyCode);
						// uLDDiscrepancyVO.setFacilityType(facilityType);
						// uLDDiscrepancyVO.setRemarks(remarks);
						// uLDDiscrepancyVO.setCloseStatus("Y");
						discrepancy.setCloseStatus("Y");
						// ends
					}
				}
			}
		}
	}
    }

	/**
	 *
	 * A-1950
	 *
	 * @param uldDetaills
	 * @param uldMovementVOs
	 */
    private void performULDMovementAudit(Collection<ULDMovementVO> uldDetails,
            Collection<ULDMovementVO> uldMovementVOs) throws SystemException {
		for (ULDMovementVO uldMovementVO : uldDetails) {
			for (ULDMovementVO flightMovementVO : uldMovementVOs) {

                ULDAuditVO uldAuditVO = new ULDAuditVO(ULDMovementVO.MODULE,
                        ULDMovementVO.SUBMODULE, ULDMovementVO.ENTITY);
				// uldAuditVO = (ULDAuditVO) AuditUtils
				// .populateAuditDetails(uldAuditVO, transaction, true);
				StringBuffer additionalInfo = new StringBuffer();

				uldAuditVO.setCompanyCode(uldMovementVO.getCompanyCode());
				uldAuditVO.setUldNumber(uldMovementVO.getUldNumber());

                additionalInfo.append(" FromAirport - ").append(
                        flightMovementVO.getPointOfLading());
                additionalInfo.append(",");
                additionalInfo.append("ToAirport - ").append(
                        flightMovementVO.getPointOfUnLading());
                additionalInfo.append(",");
                additionalInfo.append("MovementType - ").append(
                        flightMovementVO.getDummyMovement() ? "DUMMY"
                                : "ACTUAL");

                additionalInfo.append(",");
                additionalInfo.append("FlightCarrierCode - ").append(
                        flightMovementVO.getCarrierCode());
                additionalInfo.append(",");
                additionalInfo.append("FlightNumber - ").append(
                        flightMovementVO.getFlightNumber());
				additionalInfo.append(",");
				// added by a-3045 for bug 28905 on 15Jan09 starts
				if (flightMovementVO.getFlightDate() != null) {
                    additionalInfo.append("FlightDate - ").append(
                            flightMovementVO.getFlightDate()
                                    .toDisplayDateOnlyFormat());
                } else {
                    additionalInfo.append("FlightDate - ").append(
                            flightMovementVO.getFlightDate());
                }
                additionalInfo.append(",");
                additionalInfo.append("Contents - ").append(
                        flightMovementVO.getContent());
                // added by a-3045 for bug 28905 on 15Jan09 ends

                if (uldAuditVO.getStationCode() != null) {

                    uldAuditVO.setTxnTime(new LocalDate(uldAuditVO
                            .getStationCode(), Location.ARP, true).toGMTDate());
                    uldAuditVO.setTxnLocalTime(new LocalDate(uldAuditVO
                            .getStationCode(), Location.ARP, true));

                } else if (uldAuditVO.getStationCode() == null) {
                    LogonAttributes logonAttributes = ContextUtils
                            .getSecurityContext().getLogonAttributesVO();
                    String airportCode = logonAttributes.getAirportCode();
                    uldAuditVO.setTxnTime(new LocalDate(airportCode,
                            Location.ARP, false).toGMTDate());

                    uldAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                            Location.ARP, false));
				}
				uldAuditVO.setUserId(uldMovementVO.getLastUpdatedUser());
				uldAuditVO.setAdditionalInformation(additionalInfo.toString());
				uldAuditVO.setActionCode(CREATE_ULDMVT);
				uldAuditVO.setAuditRemarks(flightMovementVO.getRemark());
				AuditUtils.performAudit(uldAuditVO);
			}
		}
	}

	/**
	 *
	 * @param accessoriesStockConfigFilterVO
	 * @param displayPage
	 * @return
	 * @throws SystemException
	 */
	public Page<AccessoriesStockConfigVO> findAccessoryStockList(
            AccessoriesStockConfigFilterVO accessoriesStockConfigFilterVO,
            int displayPage) throws SystemException {
		log.entering("ULDController", "findAccessoryStockList");
		Page<AccessoriesStockConfigVO> accessoryStockList = null;
        accessoryStockList = AccessoriesStockConfig.findAccessoryStockList(
                accessoriesStockConfigFilterVO, displayPage);
		log.exiting("ULDController", "findAccessoryStockList");
		return accessoryStockList;
	}

	/**
	 * This method retrieves the uld details of the specified filter condition
	 *
	 * @param uldListFilterVO
	 * @param pageNumber
	 * @return Page<ULDListVO>
	 * @throws SystemException
	 *
	 *
	 * mergingissue
	 */
    public Page<ULDListVO> findULDList(ULDListFilterVO uldListFilterVO,
            int pageNumber) throws SystemException {
		log.entering("INSIDE THE CONTROLLER", "findULDList");
        Page<ULDListVO> ULDlistVOs = ULD.findULDList(uldListFilterVO,
                pageNumber);
		// added by a-3045 for bug20446 starts
		if (ULDlistVOs != null) {
			calculateDayDifference((Collection<ULDListVO>) ULDlistVOs);
		}
		// added by a-3045 for bug20446 ends
		return ULDlistVOs;
	}

	// Added by Preet
	/**
	 * @author A-2667 Added this method for calculating the difference between
	 *         currentDate and the givenDate(LastmovementDate) To set
	 *         DaysElapsed in ListULD page.
	 * @return void
	 * @throws SystemException
	 */
	// Changed by a-3045 for bug20446, The signature is changed from Page to
	// Collection.
    private void calculateDayDifference(Collection<ULDListVO> uldListVOs)
            throws SystemException {
		for (ULDListVO uldListVO : uldListVOs) {
			if (uldListVO != null && uldListVO.getLastMovementDate() != null) {
                LocalDate lastMovementDate = new LocalDate(
                        LocalDate.NO_STATION, Location.NONE, uldListVO
                                .getLastMovementDate(), true);
                LocalDate currentDate = new LocalDate(LocalDate.NO_STATION,
                        Location.NONE, true);
				final int seconds = 3600;
				final int hours = 24;
				final int millis = 1000 * seconds * hours;
				long diff = 0;
				if (lastMovementDate != null) {
					long lDate = lastMovementDate.getTimeInMillis();
					long cDate = currentDate.getTimeInMillis();
					diff = cDate - lDate;
				}
				long dayDiff = (diff / millis);
				uldListVO.setDaysElapsed((int) dayDiff);
			}

		}

	}

	/**
	 * This method retrieves the stock details of the specified accessory code
	 *
	 * @param companyCode
	 * @param accessoryCode
	 * @param stationCode
	 * @param airlineIdentifier
	 * @return
	 * @throws SystemException
	 */
    public AccessoriesStockConfigVO findAccessoriesStockDetails(
            String companyCode, String accessoryCode, String stationCode,
            int airlineIdentifier) throws SystemException {
		log.entering("ULDController", "findAccessoriesStockDetails");
		log.exiting("ULDController", "findAccessoriesStockDetails");
        return AccessoriesStockConfig.findAccessoriesStockDetails(companyCode,
                accessoryCode, stationCode, airlineIdentifier);
	}

	/**
	 * This method saves the accessory stock details
	 *
	 * @param accessoriesStockConfigVO
	 * @throws RemoteException
	 * @throws SystemException
	 */

    public void saveAccessoriesStock(
            AccessoriesStockConfigVO accessoriesStockConfigVO)
            throws SystemException {
		log.entering("ULDController", "saveAccessoriesStock");
        if (AccessoriesStockConfigVO.OPERATION_FLAG_INSERT
                .equals(accessoriesStockConfigVO.getOperationFlag())) {
			createAccessoriesStock(accessoriesStockConfigVO);
		}
        if (AccessoriesStockConfigVO.OPERATION_FLAG_UPDATE
                .equals(accessoriesStockConfigVO.getOperationFlag())) {
			modifyAccessoriesStock(accessoriesStockConfigVO);
		}
        if (AccessoriesStockConfigVO.OPERATION_FLAG_DELETE
                .equals(accessoriesStockConfigVO.getOperationFlag())) {
            try {
                AccessoriesStockConfig accessoriesStockConfig = AccessoriesStockConfig
                        .find(accessoriesStockConfigVO.getCompanyCode(),
                                accessoriesStockConfigVO.getAccessoryCode(),
                                accessoriesStockConfigVO.getStationCode(),
                                accessoriesStockConfigVO.getAirlineIdentifier());
				accessoriesStockConfig.remove();
			} catch (FinderException finderException) {
                throw new SystemException(finderException.getErrorCode(),
                        finderException);
			}
		}
		log.exiting("ULDController", "saveAccessoriesStock");
	}

	/**
	 * This method saves multiple accessory stock details
	 *
	 * @param accessoriesStockConfigVOs
	 * @throws SystemException
	 */
    public void saveAccessories(
            Collection<AccessoriesStockConfigVO> accessoriesStockConfigVOs)
            throws SystemException {
		log.entering("ULDController", "saveAccessories");
        if (accessoriesStockConfigVOs != null
                && accessoriesStockConfigVOs.size() > 0) {
			for (AccessoriesStockConfigVO accessoriesStockConfigVO : accessoriesStockConfigVOs) {
				saveAccessoriesStock(accessoriesStockConfigVO);
			}
		}
		log.exiting("ULDController", "saveAccessories");
	}

    private void createAccessoriesStock(
            AccessoriesStockConfigVO accessoriesStockConfigVO)
            throws SystemException {
		log.entering("ULDController", "createAccessoriesStock");
        AccessoriesStockConfig accessoriesStockConfig = new AccessoriesStockConfig(
                accessoriesStockConfigVO);
		log.exiting("ULDController", "createAccessoriesStock");
	}

	/**
	 *
	 * This method is used to modify the Accessories Stock
	 *
	 * @param accessoriesStockConfigVO
	 * @throws SystemException
	 */
    private void modifyAccessoriesStock(
            AccessoriesStockConfigVO accessoriesStockConfigVO)
            throws SystemException {
		log.entering("ULDController", "modifyAccessoriesStock");
		AccessoriesStockConfig accessoriesStockConfig = null;
		try {
            accessoriesStockConfig = AccessoriesStockConfig.find(
                    accessoriesStockConfigVO.getCompanyCode(),
                    accessoriesStockConfigVO.getAccessoryCode(),
                    accessoriesStockConfigVO.getStationCode(),
					accessoriesStockConfigVO.getAirlineIdentifier());
		} catch (FinderException ex) {
			throw new SystemException(ex.getErrorCode(), ex);
		}
		if (accessoriesStockConfig != null) {
			log.log(Log.FINE, "!!!!!!inside not null");
			accessoriesStockConfig.update(accessoriesStockConfigVO);
		}
		log.exiting("ULDController", "modifyAccessoriesStock");
	}

	/**
	 * This method validates the format of the specified ULD
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 * @throws InvalidULDFormatException
	 */
	public boolean validateULDFormat(String companyCode, String uldNumber)
			throws SystemException, InvalidULDFormatException {
		log.entering("INSIDE THE CONTROLLER", "validateULDFormat");
		return ULD.validateULDFormat(companyCode, uldNumber);
	}

	/**
	 * This method retrieves the details of the specified ULD
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 */
	public ULDVO findULDDetails(String companyCode, String uldNumber)
			throws SystemException, ULDDefaultsBusinessException {
		log.entering("INSIDE THE CONTROLLER", "findULDDetails");
		ULDVO uldVO = ULD.findULDDetails(companyCode, uldNumber);
		if (uldVO != null) {
			return uldVO;
		} else {
            throw new ULDDefaultsBusinessException(
                    ULDDefaultsBusinessException.NO_SUCH_ULD_EXISTS,
					new Object[] { companyCode, uldNumber });
		}
	}

	/**
	 * This method saves the uld details
	 *
	 * @param uldVo
	 * @throws DuplicateManufacturerNumberExistsException
	 * @throws SystemException
	 * @throws ULDInTransactionException
	 */
    public void saveULD(ULDVO uldVo) throws SystemException,
            DuplicateManufacturerNumberExistsException,
            ULDInTransactionException, CurrencyConversionException,
            DimensionConversionException {

		ULDCheckinVO uLDCheckinVO = null;
		Collection<ULDCheckinVO> checkInVos = new ArrayList<ULDCheckinVO>();
		ULDAirportLocationVO uLDAirportLocationVO = null;
        if("W".equals(uldVo.getSource())){
        	updateOperationFlagforWS(uldVo);
        	updateAirlineIdentifier(uldVo);
        }
		if (OPERATION_FLAG_INSERT.equals(uldVo.getOperationalFlag())) {
			if (!"Y".equalsIgnoreCase(uldVo.getFromCollection())) {
                log.log(Log.FINE, "!!!!!!NOT FROM COLLECTION>>SONGLE VO SAVE ",
                        uldVo);
				String companyCode = uldVo.getCompanyCode();
				String airportCode = uldVo.getCurrentStation();
                if (uldVo.getLocation() == null
                        || uldVo.getLocation().trim().length() == 0) {
					// Added by nisha for QF CR 1006
					if (NONOPERATIONAL.equals(uldVo.getOverallStatus())) {
                        uLDAirportLocationVO = ULDAirportLocation
                                .findLocationforFacility(companyCode,
                                        airportCode, FACILITY_REPAIR);
                    } else {
                        uLDAirportLocationVO = ULD.findCurrentLocation(
                                companyCode, airportCode, CONTENT_EMPTY);
                    }
                    if (uLDAirportLocationVO != null) {
                        uldVo.setLocation(uLDAirportLocationVO
                                .getFacilityCode());
                        uldVo.setFacilityType(uLDAirportLocationVO
                                .getFacilityType());

                        if ("WHS"
                                .equals(uLDAirportLocationVO.getFacilityType())) {
                            uLDCheckinVO = new ULDCheckinVO();
                            uLDCheckinVO.setCompanyCode(companyCode);
                            uLDCheckinVO.setStorageUnitCode(uldVo
                                    .getUldNumber());
							uLDCheckinVO.setAirportCode(airportCode);
                            uLDCheckinVO.setWarehouseCode(uLDAirportLocationVO
                                    .getFacilityCode());
							checkInVos.add(uLDCheckinVO);
							try {
								WarehouseProxy warehouseProxy = new WarehouseProxy();
								warehouseProxy.saveAndCheckinULD(checkInVos);
							} catch (ProxyException proxyException) {
                                log.log(Log.INFO,
                                        "-----proxyException--------",
                                        proxyException.getErrors());
                                log
                                        .log(
                                                Log.INFO,
                                                "%%%%%%%%%%%% ULD Cannot be checked into a wareHouse ",
                                                proxyException.getMessage());
                                throw new SystemException(proxyException
                                        .getMessage());
							}
						}
					} else {
						uldVo.setLocation(ULDVO.NO_LOCATION);
						uldVo.setFacilityType(ULDVO.NO_LOCATION);
					}
				}
			}
			createULD(uldVo);

		} else if (OPERATION_FLAG_UPDATE.equals(uldVo.getOperationalFlag())) {

			modifyULD(uldVo);
		} else if (OPERATION_FLAG_DELETE.equals(uldVo.getOperationalFlag())) {
			deleteULD(uldVo);
		}
	}
   /**
    * @author A-7918
    * @param uldVo
    * @throws SystemException
    */
    private void updateOperationFlagforWS(ULDVO uldVo) throws SystemException {
    	ULD uld =null;
    	try {
			uld =	ULD.find(uldVo.getCompanyCode(), uldVo.getUldNumber());
		} catch (FinderException | SystemException e) {			// TODO Auto-generated catch block
		}    	
		if(uld != null){
			if(OPERATION_FLAG_INSERT.equals(uldVo.getOperationalFlag())){
				throw new SystemException("uld.booking.duplicateUldexists");
			}
			else if(uldVo.getOperationalFlag() == null){
				uldVo.setOperationalFlag(OPERATION_FLAG_UPDATE);
			}
		}
		else{
			if(OPERATION_FLAG_UPDATE.equals(uldVo.getOperationalFlag()) || 
					OPERATION_FLAG_DELETE.equals(uldVo.getOperationalFlag()) ){
				throw new SystemException("uld.booking.nouldexists");
			}
			uldVo.setOperationalFlag(OPERATION_FLAG_INSERT);
		}
	}
	/**
	 * @author A-1950
	 * @param uldVo
	 * @param uldNumberVos
	 * @return
	 * @throws SystemException
	 * @throws CurrencyConversionException
	 */
    public Collection<String> createMultipleULDs(ULDVO uldVo,
            Collection<String> uldNumberVos) throws SystemException,
            CurrencyConversionException, DimensionConversionException {
		Collection<String> errors = null;
		boolean isAlreadyThere = false;
		Collection<ULD> removableObjects = null;
		Collection<ULD> uldObjects = null;
		ULDAirportLocationVO uLDAirportLocationVO = null;
		if (uldNumberVos != null && uldNumberVos.size() > 0) {
			// Added by nisha for QF CR1006
			if (NONOPERATIONAL.equals(uldVo.getOverallStatus())) {
                uLDAirportLocationVO = ULDAirportLocation
                        .findLocationforFacility(uldVo.getCompanyCode(), uldVo
                                .getCurrentStation(), FACILITY_REPAIR);
            } else {
                uLDAirportLocationVO = ULD.findCurrentLocation(uldVo
                        .getCompanyCode(), uldVo.getCurrentStation(),
                        CONTENT_EMPTY);
            }
            if (uldVo.getLocation() == null
                    || uldVo.getLocation().trim().length() == 0) {
                if (uLDAirportLocationVO != null) {
                    uldVo.setLocation(uLDAirportLocationVO.getFacilityCode());
                    uldVo.setFacilityType(uLDAirportLocationVO
                            .getFacilityType());
				} else {
					uldVo.setLocation(ULDVO.NO_LOCATION);
					uldVo.setFacilityType(ULDVO.NO_LOCATION);
				}
			}
			uldObjects = new ArrayList<ULD>();
            uldObjects = ULD.findULDObjects(uldVo.getCompanyCode(),
                    uldNumberVos);
			if (uldObjects != null && uldObjects.size() > 0) {
				for (String uldNo : uldNumberVos) {
					isAlreadyThere = false;
					removableObjects = new ArrayList<ULD>();
					for (ULD uldObject : uldObjects) {
						if (uldObject.getUldPK().getUldNumber().equals(uldNo)) {
                            log.entering("CREATE AN ERROR VO",
                                    "CREATE AN ERROR VO");
                            log.entering("CREATE AN ERROR VO",
                                    "CREATE AN ERROR VO");
							if (errors == null) {
								errors = new ArrayList<String>();
							}
							errors.add(uldNo);
							removableObjects.add(uldObject);
							isAlreadyThere = true;
							// uldObjects.remove(uldObject);
							break;
						}
					}
					uldObjects.removeAll(removableObjects);
					if (!isAlreadyThere) {
						uldVo.setUldNumber(uldNo);
                        log
                                .log(Log.INFO,
                                        "CREATE METHOD FOR ULD ENTITY CALLED");

                        ULD uLD = new ULD(uldVo);
                        ULDAuditVO uldAuditVO = new ULDAuditVO(ULDVO.MODULE,
                                ULDVO.SUBMODULE, ULDVO.ENTITY);
                        uldAuditVO = (ULDAuditVO) AuditUtils
                                .populateAuditDetails(uldAuditVO, uLD, true);
						collectULDAuditDetails(uLD, uldAuditVO, uldVo);
						uldAuditVO.setActionCode(CREATE_ULD);
						uldAuditVO.setAuditRemarks(uldVo.getRemarks());
						AuditUtils.performAudit(uldAuditVO);
					}
				}
			} else {
				for (String uldNum : uldNumberVos) {
					uldVo.setUldNumber(uldNum);
					log.log(Log.INFO, "CREATE METHOD FOR ULD ENTITY CALLED");
					ULD uLD = new ULD(uldVo);
                    ULDAuditVO uldAuditVO = new ULDAuditVO(ULDVO.MODULE,
                            ULDVO.SUBMODULE, ULDVO.ENTITY);
                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uLD, true);
					collectULDAuditDetails(uLD, uldAuditVO, uldVo);
					uldAuditVO.setActionCode(CREATE_ULD);
					uldAuditVO.setAuditRemarks(uldVo.getRemarks());
					AuditUtils.performAudit(uldAuditVO);
				}
			}
		}
		/*
		 * uld = checkULDExists(uldVo.getCompanyCode(), uldVo .getUldNumber());
		 * //log.log(Log.FINE, "THE VALUE OF ULD IS" + canAdded);
		 * //log.log(Log.FINE, "THE VALUE OF ULD IS" + canAdded); if (uld !=
		 * null) { log.entering("CREATE AN ERROR VO", "CREATE AN ERROR VO");
         * log.entering("CREATE AN ERROR VO", "CREATE AN ERROR VO"); if (errors ==
         * null) { errors = new ArrayList<String>(); } errors.add(uldNo); }
		 * else { log.log(Log.INFO, "CREATE METHOD FOR ULD ENTITY CALLED"); ULD
		 * uLD = new ULD(uldVo); ULDAuditVO uldAuditVO = new
		 * ULDAuditVO(ULDVO.MODULE, ULDVO.SUBMODULE, ULDVO.ENTITY); uldAuditVO =
		 * (ULDAuditVO) AuditUtils.populateAuditDetails( uldAuditVO, uLD, true);
		 * collectULDAuditDetails(uLD, uldAuditVO , uldVo);
		 * uldAuditVO.setActionCode(CREATE_ULD);
		 * uldAuditVO.setAuditRemarks(uldVo.getRemarks());
		 * AuditUtils.performAudit(uldAuditVO); } } }
		 */
		return errors;
	}

	/**
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 */
    private ULD checkULDExists(String companyCode, String uldNumber)
            throws SystemException {
		ULD uld = null;

		try {
			log.log(Log.INFO, "CHECK WHETER THE ULD ALREADY EXISTS");
			uld = ULD.find(companyCode, uldNumber);
		} catch (FinderException ex) {
			log.log(Log.INFO, "FINDER EXCEPTION IS THROWN");

		}
		return uld;
	}

	/**
	 * This method saves the uld details
	 *
	 * @param uldVo
	 * @throws SystemException
	 * @throws DuplicateManufacturerNumberExistsException
	 */
    private void createULD(ULDVO uldVo) throws SystemException,
            DuplicateManufacturerNumberExistsException,
			CurrencyConversionException, DimensionConversionException {
		log.entering("INSIDE THE ULD_CONTROLLER ", "createULD");
		boolean isDuplicate = false;
        if((uldVo.getManufacturer() != null && uldVo.getManufacturer().length() > 0) && uldVo.getUldSerialNumber()!=null) {
		isDuplicate = checkDuplicateManufacturerNumber(uldVo);
		if (isDuplicate) {
			throw new DuplicateManufacturerNumberExistsException(
					DuplicateManufacturerNumberExistsException.DUPLICATE_EXISTS,
                    new Object[] { uldVo.getManufacturer(),
                            uldVo.getUldSerialNumber(), uldVo.getUldNumber() });
		}
        }
		ULD uld = new ULD(uldVo);
        ULDAuditVO uldAuditVO = new ULDAuditVO(ULDVO.MODULE, ULDVO.SUBMODULE,
                ULDVO.ENTITY);
        uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(uldAuditVO,
                uld, true);
		collectULDAuditDetails(uld, uldAuditVO, uldVo);

		uldAuditVO.setActionCode(CREATE_ULD);
		uldAuditVO.setAuditRemarks(uldVo.getRemarks());
		AuditUtils.performAudit(uldAuditVO);
		log.exiting("INSIDE THE ULD_CONTROLLER ", "createULD");
	}

	/**
	 *
	 * @param uld
	 * @param uldAuditVO
	 */
    private void collectULDAuditDetails(ULD uld, ULDAuditVO uldAuditVO,
            ULDVO uldVo) {
		log.log(Log.FINE, "---------Setting uldAuditVO Details-------");
		StringBuffer additionalInfo = new StringBuffer();
		log.log(Log.INFO, " uld.getUldPK() ", uld.getUldPK());
		uldAuditVO.setCompanyCode(uld.getUldPK().getCompanyCode());
		uldAuditVO.setUldNumber(uld.getUldPK().getUldNumber());
        uldAuditVO.setTxnTime(new LocalDate(uld.getCurrentStation(),
                Location.ARP, true).toGMTDate());

        uldAuditVO.setTxnLocalTime(new LocalDate(uld.getCurrentStation(),
                Location.ARP, true));
		uldAuditVO.setAuditRemarks(uld.getRemarks());
		uldAuditVO.setUserId(uld.getLastUpdateUser());

		// Commented by a-3045 for bug 28905 on 15Jan09
		// if (!ULDVO.OPERATION_FLAG_DELETE.equals(uldVo.getOperationalFlag()))
		// {
        additionalInfo.append("CurrentAirport - ").append(
                uldVo.getCurrentStation()).append(",");
		// additionalInfo.append(",");
        additionalInfo.append("CurrentAirline - ").append(
                uldVo.getOperationalAirlineCode());
        additionalInfo.append(",");
        additionalInfo.append("OwnerAirline - ").append(
                uldVo.getOwnerAirlineCode());
		additionalInfo.append(",FacilityType - ");
        if (uldVo.getFacilityType() != null
                && uldVo.getFacilityType().trim().length() > 0) {
			additionalInfo.append(uldVo.getFacilityType());
		} else {
			additionalInfo.append("NULL");
		}
		additionalInfo.append(",Location - ");
        if (uldVo.getLocation() != null
                && uldVo.getLocation().trim().length() > 0) {
			additionalInfo.append(uldVo.getLocation());
		} else {
			additionalInfo.append("NULL");
		}
        if(uldVo.getTareWeight() != null){
        	additionalInfo.append(",Tare Weight - ").append(uldVo.getTareWeight().getDisplayValue());
        }else{
        	additionalInfo.append(",Tare Weight - ").append("");
        }
        
		additionalInfo.append(",Overall Status - ");

		// modification for bug 38594 on 27Feb09
		/*
		 * if("N".equalsIgnoreCase(uldVo.getOverallStatus())){
		 * additionalInfo.append("UnServiceable"); }else
		 * if("O".equalsIgnoreCase(uldVo.getOverallStatus())){
		 * additionalInfo.append("Serviceable"); }else{
		 * additionalInfo.append("Lost"); }
		 */

        if ("N".equalsIgnoreCase(uldVo.getOverallStatus())
                || "S".equalsIgnoreCase(uldVo.getDamageStatus())) {
			additionalInfo.append("UnServiceable");
		} else if ("O".equalsIgnoreCase(uldVo.getOverallStatus())) {
			additionalInfo.append("Serviceable");
		} else if ("L".equalsIgnoreCase(uldVo.getOverallStatus())) {
			additionalInfo.append("Lost");
		} else {
			if ("N".equalsIgnoreCase(uld.getOverallStatus())) {
				additionalInfo.append("UnServiceable");
			} else if ("O".equalsIgnoreCase(uld.getOverallStatus())) {
				additionalInfo.append("Serviceable");
			} else if ("L".equalsIgnoreCase(uld.getOverallStatus())) {
				additionalInfo.append("Lost");
			}
		}
		// modification for bug 38594 on 27Feb09 ends
		// }
		/*
		 * int x = 0; if (uldAuditVO.getAuditFields() != null &&
		 * uldAuditVO.getAuditFields().size() > 0) { log.log(Log.INFO, "Going to
		 * populate additional info"); for (AuditFieldVO auditField :
		 * uldAuditVO.getAuditFields()) { if (auditField != null) { if(x != 0){
		 * additionalInfo.append(" || "); }
		 * additionalInfo.append(auditField.getFieldName());
		 * additionalInfo.append(" : ");
		 * additionalInfo.append(auditField.getNewValue()); x = 1; } else {
         * log.log(Log.WARNING, "auditField is NULL!!!!!!!!!!!!!!!!!!!!!!!"); } } }
         */
        uldAuditVO.setAdditionalInformation(additionalInfo.toString());
        log.exiting("collectULDAuditDetails",
                "...Finished construction of AuditVO");
	}

	/**
	 * This method modifies the uld details
	 *
	 * @param uldVo
	 * @throws DuplicateManufacturerNumberExistsException
	 * @throws ULDInTransactionException
	 * @throws SystemException
	 */
    private void modifyULD(ULDVO uldVo) throws SystemException,
            DuplicateManufacturerNumberExistsException,
            ULDInTransactionException, CurrencyConversionException,
            DimensionConversionException {
		log.entering("INSIDE THE CONTROLLER", "modifyULD");
		ULD uld = null;
		HashMap<String, ULDAirportLocationVO> hashMap = new HashMap<String, ULDAirportLocationVO>();
		ULDAirportLocationVO uLDAirportLocationVO = null;
		boolean isValid = ULD.validateULDForModification(uldVo);
		if (isValid) {
			try {
				uld = ULD.find(uldVo.getCompanyCode(), uldVo.getUldNumber());
				
				// Code To be removed After Analysis : Added for Fix ICRD-10701
                if(uld.getOverallStatus() == null){
					uld.setOverallStatus(OPERATIONAL);
				}
                // Code To be removed After Analysis : Added for Fix ICRD-10701 - Ends
				
			} catch (FinderException ex) {
				throw new SystemException(ex.getErrorCode(), ex);
			}
			// For Defaulting Location AND Facility Code
            if (uldVo.getCurrentStation() != null
                    && uldVo.getCurrentStation().trim().length() > 0) {
				log.log(Log.FINE, "STATION NOT NULL IN VO");
                if (!uldVo.getCurrentStation().equalsIgnoreCase(
                        uld.getCurrentStation())) {
					log.log(Log.FINE, "STATION IN VO AND DB DIFFER");
					if (!hashMap.containsKey(uldVo.getCurrentStation())) {
						log.log(Log.FINE, "CALL FOR FINDLOCATION");
						// Added by nisha for QF CR1006 starts
						if (NONOPERATIONAL.equals(uldVo.getOverallStatus())
								&& OPERATIONAL.equals(uld.getOverallStatus())) {
                            uLDAirportLocationVO = ULDAirportLocation
                                    .findLocationforFacility(uldVo
                                            .getCompanyCode(), uldVo
                                            .getCurrentStation(),
                                            FACILITY_REPAIR);
						} else if (OPERATIONAL.equals(uldVo.getOverallStatus())
                                && NONOPERATIONAL
                                        .equals(uld.getOverallStatus())) {
                            uLDAirportLocationVO = ULD
                                    .findCurrentLocation(
                                            uldVo.getCompanyCode(), uldVo
                                                    .getCurrentStation(),
                                            CONTENT_EMPTY);
                        } else {
                            uLDAirportLocationVO = ULD
                                    .findCurrentLocation(
                                            uldVo.getCompanyCode(), uldVo
                                                    .getCurrentStation(),
                                            CONTENT_EMPTY);
                        }
                        if (uLDAirportLocationVO != null) {
                            uldVo.setLocation(uLDAirportLocationVO
                                    .getFacilityCode());
                            uldVo.setFacilityType(uLDAirportLocationVO
                                    .getFacilityType());
                        } else {
                            uldVo.setLocation(ULDVO.NO_LOCATION);
                            uldVo.setFacilityType(ULDVO.NO_LOCATION);
                        }
                        hashMap.put(uldVo.getCurrentStation(),
                                uLDAirportLocationVO);
					} else {
						log.log(Log.FINE, "FOUND IN HASHMAP");
                        uLDAirportLocationVO = hashMap.get(uldVo
                                .getCurrentStation());
                        if (uLDAirportLocationVO != null) {
                            uldVo.setLocation(uLDAirportLocationVO
                                    .getFacilityCode());
                            uldVo.setFacilityType(uLDAirportLocationVO
                                    .getFacilityType());
						}

					}

				} else {
					// No external movement...........so internal movement shud
					// be marked
                    if (uldVo.getOverallStatus() != null
                            && uldVo.getOverallStatus().trim().length() > 0) {
                        if (!uldVo.getOverallStatus().equalsIgnoreCase(
                                uld.getOverallStatus())
                                && NONOPERATIONAL.equalsIgnoreCase(uldVo
                                        .getOverallStatus())) {
                            log.log(Log.INFO,
                                    "Internal movement shud be marked---->");
							ULDIntMvtVO uldIntMvtVO = new ULDIntMvtVO();
							ULDIntMvtDetailVO uldIntMvtDetailVO = new ULDIntMvtDetailVO();
							Collection<ULDIntMvtDetailVO> uldIntMvtDetailVOs = new ArrayList<ULDIntMvtDetailVO>();
							Collection<ULDIntMvtVO> uldIntMvts = new ArrayList<ULDIntMvtVO>();

							uldIntMvtVO.setAirport(uldVo.getCurrentStation());
							uldIntMvtVO.setCompanyCode(uldVo.getCompanyCode());
							uldIntMvtVO.setUldNumber(uldVo.getUldNumber());
                            uldIntMvtVO.setLastUpdatedUser(uldVo
                                    .getLastUpdateUser());

                            uldIntMvtDetailVO.setAirport(uldVo
                                    .getCurrentStation());
                            uldIntMvtDetailVO.setCompanyCode(uldVo
                                    .getCompanyCode());
                            uldIntMvtDetailVO
                                    .setFromLocation(uld.getLocation());
                            uLDAirportLocationVO = ULDAirportLocation
                                    .findLocationforFacility(uldVo
                                            .getCompanyCode(), uldVo
                                            .getCurrentStation(),
                                            FACILITY_REPAIR);
                            if (uLDAirportLocationVO != null) {
                                uldIntMvtDetailVO
                                        .setToLocation(uLDAirportLocationVO
                                                .getFacilityCode());
                                uld.setFacilityType(uLDAirportLocationVO
                                        .getFacilityCode());
                                uld.setLocation(uLDAirportLocationVO
                                        .getFacilityCode());
                            } else {
                                uldIntMvtDetailVO.setToLocation(BLANK);
                                //Added for ICRD-341208, same as ICRD-209902
                                uld.setFacilityType(ULDVO.NO_LOCATION);
                                uld.setLocation(ULDVO.NO_LOCATION);
                            }

                            uldIntMvtDetailVO
                                    .setMvtType(ULDIntMvtDetailVO.ACTUAL_MOVEMENT);
                            uldIntMvtDetailVO.setMvtDate(new LocalDate(uldVo
                                    .getLastUpdateTime(), true));

                            uldIntMvtDetailVO
                                    .setUldNumber(uldVo.getUldNumber());

							// Added by Preet on 27Aug08 --starts
							// When ULD is marked Un-Serviciable then RTNSTA
							// will be 'N' and CNT will be set as 'RPR'
                            uldIntMvtDetailVO
                                    .setContent(ULDAirportLocationVO.FACLITY_REPAIRDOC);
                            uldIntMvtDetailVO
                                    .setReturnStatus(uldIntMvtDetailVO.FLAG_NO);
							// Added by Preet on 27Aug08 --ends

							// If Facility Type is Ware house --then ULD need to
							// checked Out and Checked In

							Collection<StorageUnitVO> storageUnitVOs = new ArrayList<StorageUnitVO>();
							Collection<ULDCheckinVO> checkInVos = new ArrayList<ULDCheckinVO>();
							boolean callWhsFlag = false;
							boolean isWhsDelete = false;
							// If ULD is currenly in Warehouse --delete the
							// storage details
							if (WAREHOUSE.equals(uld.getFacilityType())) {
								isWhsDelete = true;
								StorageUnitVO storageUnitVO = new StorageUnitVO();
                                storageUnitVO.setAirportCode(uld
                                        .getCurrentStation());
                                storageUnitVO.setCompanyCode(uldVo
                                        .getCompanyCode());
                                storageUnitVO.setWarehouseCode(uld
                                        .getLocation());
                                storageUnitVO.setStorageUnitCode(uldVo
                                        .getUldNumber());
                                storageUnitVOs.add(storageUnitVO);
                            }
                            log.log(Log.INFO, "storageUnitVOs-------->",
                                    storageUnitVOs);
                            // Check out the ULD from warehouse
                            if (isWhsDelete) {
                                WarehouseProxy warehouseProxy = new WarehouseProxy();
                                try {
                                    warehouseProxy
                                            .deleteStorageUnitDetails(storageUnitVOs);
                                } catch (ProxyException proxyException) {
                                    log.log(Log.INFO,
                                            "-------proxyException-------",
                                            proxyException
                                                            .getErrors());
                                    log.log(Log.INFO,
                                            "-------proxyException-------",
                                            proxyException
                                                            .getMessage());
                                }
                            }

                            if (WAREHOUSE.equals(uld.getFacilityType())) {
                                callWhsFlag = true;
                                ULDCheckinVO uLDCheckinVO = new ULDCheckinVO();
                                uLDCheckinVO.setCompanyCode(uldVo
                                        .getCompanyCode());
                                uLDCheckinVO.setStorageUnitCode(uldVo
                                        .getUldNumber());
                                uLDCheckinVO.setAirportCode(uldVo
                                        .getCurrentStation());
                                uLDCheckinVO.setWarehouseCode(uldVo
                                        .getLocation());
                                checkInVos.add(uLDCheckinVO);
                            }
                            log
                                    .log(Log.INFO, "checkInVos-------->",
                                            checkInVos);
                            if (callWhsFlag) {
                                try {
                                    WarehouseProxy warehouseProxy = new WarehouseProxy();
                                    warehouseProxy
                                            .saveAndCheckinULD(checkInVos);
                                } catch (ProxyException proxyException) {
                                    log.log(Log.INFO,
                                            "-------proxyException-------",
                                            proxyException
                                                            .getErrors());
                                    log.log(Log.INFO,
                                            "-------proxyException-------",
                                            proxyException
                                                            .getMessage());
                                }
                            }

                            uldIntMvtDetailVOs.add(uldIntMvtDetailVO);
                            uldIntMvtVO
                                    .setULDIntMvtDetailVOs(uldIntMvtDetailVOs);
							uldIntMvts.add(uldIntMvtVO);
							saveULDIntMvts(uldIntMvts);
						}
						// Added by Preet on 27Aug starts
						// If Non operational ULD is marked as Operational ,
						// then we update ULDINTMVTDTL
						else if (NONOPERATIONAL.equals(uld.getOverallStatus())
                                && OPERATIONAL.equalsIgnoreCase(uldVo
                                        .getOverallStatus())) {

                            uLDAirportLocationVO = ULD
                                    .findCurrentLocation(
                                            uldVo.getCompanyCode(), uldVo
                                                    .getCurrentStation(),
                                            CONTENT_EMPTY);
                            if (uLDAirportLocationVO != null) {
                                uld.setFacilityType(uLDAirportLocationVO
                                        .getFacilityType());
                                uld.setLocation(uLDAirportLocationVO
                                        .getFacilityCode());
                            } else {
                                uld.setLocation(ULDVO.NO_LOCATION);
                                uld.setFacilityType(ULDVO.NO_LOCATION);
                            }
                            LogonAttributes logonAttributes = ContextUtils
                                    .getSecurityContext()
                                    .getLogonAttributesVO();
                            ULDIntMvtHistoryFilterVO uldIntMvtFilterVO = new ULDIntMvtHistoryFilterVO();
                            uldIntMvtFilterVO.setCompanyCode(logonAttributes
                                    .getCompanyCode());
                            uldIntMvtFilterVO
                                    .setUldNumber(uldVo.getUldNumber());
                            uldIntMvtFilterVO
                                    .setReasonForMvt(ULDAirportLocationVO.FACLITY_REPAIRDOC);
                            Page<ULDIntMvtDetailVO> uldIntMvtVOs = findIntULDMovementHistory(
                                    uldIntMvtFilterVO, 1);
                            log
                                    .log(
                                            Log.INFO,
                                            " uldIntMvtVOs FOR REPAIR FOUND ARE --->>> ",
                                            uldIntMvtVOs);
                            if (uldIntMvtVOs != null && uldIntMvtVOs.size() > 0) {
                                ULDIntMvtDetailVO latestMvtVo = uldIntMvtVOs
                                        .get(uldIntMvtVOs.size() - 1);
                                if (latestMvtVo != null) {
                                    ULDIntMvtDetail latestMvt = null;
                                    latestMvt = ULDIntMvtDetail.find(
                                            latestMvtVo.getCompanyCode(),
                                            latestMvtVo.getUldNumber(),
                                            latestMvtVo.getIntSequenceNumber(),
											latestMvtVo.getIntSerialNumber());
                                    log.log(Log.INFO,
                                            " MOVEMENT DEATIL FOUND IS --- ",
                                            latestMvt);
                                    if (latestMvt != null) {
                                        latestMvt
                                                .setReturnStatus(ULDIntMvtDetailVO.FLAG_YES);
									}
								}

							}

						}
						// Added by Preet on 27Aug ends
					}
				}
			}

            if (uldVo.getManufacturer() != null
                    && uldVo.getUldSerialNumber() != null) {
                if (!(uldVo.getManufacturer().equals(uld.getManufacturer()) && uldVo
                        .getUldSerialNumber().equals(uld.getUldSerialNumber()))) {
					boolean isDuplicated = checkDuplicateManufacturerNumber(uldVo);
					if (isDuplicated) {
                        log.entering(
                                "DUPLICATEMANUFACTURERNUMBEREXISTSEXCEPTION ",
                                "IS THROWN");
                        throw new DuplicateManufacturerNumberExistsException(
                                DuplicateManufacturerNumberExistsException.DUPLICATE_EXISTS,
                                new Object[] { uldVo.getManufacturer(),
                                        uldVo.getUldSerialNumber(),
                                        uldVo.getUldNumber() });
                    }
                }
            }
            ULDAuditVO uldAuditVO = new ULDAuditVO(ULDVO.MODULE,
                    ULDVO.SUBMODULE, ULDVO.ENTITY);
            uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                    uldAuditVO, uld, false);
			uld.update(uldVo);
            uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                    uldAuditVO, uld, false);
			collectULDAuditDetails(uld, uldAuditVO, uldVo);
			uldAuditVO.setActionCode(UPDATE_ULD);

			uldAuditVO.setAuditRemarks(uldVo.getRemarks());
			AuditUtils.performAudit(uldAuditVO);
			log.exiting("INSIDE THE CONTROLLER", "modifyULD");
		}

	}

	/**
	 * This method deletes the uld details
	 *
	 * @param uldVo
	 * @throws ULDInTransactionException
	 * @throws SystemException
	 */
    private void deleteULD(ULDVO uldVo) throws SystemException,
            ULDInTransactionException {
		log.entering("INSIDE THE CONTROLLER", "deleteULD");
		ULD uld = null;
        boolean canDeleted = ULD.checkULDInTransaction(uldVo.getCompanyCode(),
                uldVo.getUldNumber());
		if (canDeleted) {
			log.log(Log.SEVERE, "ULD IS IN TRANSACTION EXCEPTION IS THROWN ");
            throw new ULDInTransactionException(
                    ULDInTransactionException.ULD_IN_TRANSACTION, new Object[] {
                            uldVo.getCompanyCode(), uldVo.getUldNumber() });
		}
		try {
			uld = ULD.find(uldVo.getCompanyCode(), uldVo.getUldNumber());
		} catch (FinderException ex) {
			throw new SystemException(ex.getErrorCode(), ex);
		}
		log.entering("INSIDE THE CONTROLLER", "REMOVE");
        ULDAuditVO uldAuditVO = new ULDAuditVO(ULDVO.MODULE, ULDVO.SUBMODULE,
                ULDVO.ENTITY);
        uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(uldAuditVO,
                uld, false);
		collectULDAuditDetails(uld, uldAuditVO, uldVo);
		uldAuditVO.setActionCode(DELETE_ULD);
		uldAuditVO.setAuditRemarks(uldVo.getRemarks());
		uld.remove();
		AuditUtils.performAudit(uldAuditVO);
		log.exiting("ULD_CONTROLLER", "REMOVE");
	}

	/**
	 * This method retrieves the structural details defined at the ULD Type
	 * specified for the ULD
	 *
	 * @param companyCode
	 * @param uldType
	 * @return
	 * @throws SystemException
	 */
    public ULDTypeVO findULDTypeStructuralDetails(String companyCode,
            String uldType) throws SystemException {
		log.entering("INSIDE THE CONTROLLER", "findULDTypeStructuralDetails");
		return ULD.findULDTypeStructuralDetails(companyCode, uldType);
	}

	/**
	 * This method is used to list the details of the specified ULD Group
	 *
	 * @param companyCode
	 * @param uldGroupCode
	 * @return ULDGroupVO
	 * @throws SystemException
	 */
	// public ULDGroupVO findULDGroupDetails(
	// String companyCode, String uldGroupCode)
	// throws SystemException {
	// return null;
	// }
	/**
	 * This method is used to create a uld group
	 *
	 * @param uldGroupVO
	 * @throws SystemException
	 */
	// public void createULDGroup(ULDGroupVO uldGroupVO)
	// throws SystemException {
	// }
	/**
	 * This method is used to modify a uld group and to update the selected ULD
	 * types with the changes
	 *
	 * @param uldGroupVO
	 * @param Collection
	 *            <String> uldtypes
	 * @throws SystemException
	 */
	// public void modifyULDGroup(ULDGroupVO uldGroupVO, Collection uldTypes)
	// throws SystemException {
	//
	// }
	/**
	 * This method is used to delete the specified ULD Group
	 *
	 * @param companyCode
	 * @param uldGroupCode
	 * @return
	 * @throws SystemException
	 */
	// public void deleteULDGroup(String companyCode, String uldGroupCode)
	// throws SystemException, ULDTypeExistsException {
	//
	// }
	






	/**
	 *
	 * @param companyCode
	 * @param uldTypeCode
	 * @throws SystemException
	 */
    public void updateULDGroupStatus(String companyCode, String uldTypeCode)
            throws SystemException {

    }



	/**
	 * This method is used to find the ULDType details
	 *
	 * @param companyCode
	 * @param agreementNumber
	 * @return ULDAgreementVO
	 * @throws SystemException
	 */
    public ULDAgreementVO findULDAgreementDetails(String companyCode,
            String agreementNumber) throws SystemException {
		log.entering("ULDController", "findULDAgreementDetails");
        return ULDAgreement.findULDAgreementDetails(companyCode,
                agreementNumber);

	}

  //Added by A-8445 as a part of IASCB-28460 Starts
    /**
    * This method is used to find the ULDType details
    *
    * @param companyCode
    * @param agreementNumber
    * @param uldAgreementFilterVO
    * @return
    * @throws SystemException
    */
   // To be reviewed Page<ULDAgreementDetailsVO>
   public Page<ULDAgreementDetailsVO> findULDAgreementDetailsPagination(String companyCode,
           String agreementNumber, ULDAgreementFilterVO uldAgreementFilterVO) throws SystemException {
       log.entering("ULDController", "findULDAgreementDetailsPagination");
       return ULDAgreement.findULDAgreementDetailsPagination(companyCode,agreementNumber,uldAgreementFilterVO);
   }
   //Added by A-8445 as a part of IASCB-28460 Ends

	/**
	 *
	 * @param uldAgreementVO
	 * @return
	 * @throws SystemException
	 * @throws AgreementAlreadyExistForThePartyException
	 * @throws ULDAgreementExistsForULDTransaction
	 */
	public String createULDAgreement(ULDAgreementVO uldAgreementVO)
            throws SystemException, AgreementAlreadyExistForThePartyException,
            ULDAgreementExistsForULDTransaction {
		log.entering("ULDController", "createULDAgreement");
		ULDAgreement uldAgreement = new ULDAgreement();
		String agreementNumber = null;
        if (ULDAgreementVO.OPERATION_FLAG_DELETE.equals(uldAgreementVO
                .getOperationFlag())) {
            uldAgreement = ULDAgreement.find(uldAgreementVO.getCompanyCode(),
                    uldAgreementVO.getAgreementNumber());
            ULDConfigAuditVO uLDConfigAuditVO = new ULDConfigAuditVO(
                    ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
                    ULDAgreementVO.ENTITY);
            uLDConfigAuditVO = (ULDConfigAuditVO) AuditUtils
                    .populateAuditDetails(uLDConfigAuditVO, uldAgreement, false);

            findULDConfigAuditVOForAgreement(uldAgreement, uLDConfigAuditVO,
                    uldAgreementVO);
			// added by a-3045 for bug 28905 on 15Jan09 starts
			uldAgreement.remove();
			// added by a-3045 for bug 28905 on 15Jan09 ends
			uLDConfigAuditVO.setActionCode(DELETE_ULDAGREEMENT);
			uLDConfigAuditVO.setAuditRemarks(uldAgreementVO.getRemark());
			log.log(Log.FINE, "ULDAgreement delete vo", uLDConfigAuditVO);
			AuditUtils.performAudit(uLDConfigAuditVO);

        } else if (ULDAgreementVO.OPERATION_FLAG_UPDATE.equals(uldAgreementVO
                .getOperationFlag())) {
			checkULDAgreementAlreadyExists(uldAgreementVO);
			// Added on 6th april
			/*
			 * if (uldAgreementVO.isValidateFlag()) {
			 * checkForInvoice(uldAgreementVO); }
			 */
			// end
            uldAgreement = ULDAgreement.find(uldAgreementVO.getCompanyCode(),
                    uldAgreementVO.getAgreementNumber());

            ULDConfigAuditVO uLDConfigAuditVO = new ULDConfigAuditVO(
                    ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
                    ULDAgreementVO.ENTITY);
            uLDConfigAuditVO = (ULDConfigAuditVO) AuditUtils
                    .populateAuditDetails(uLDConfigAuditVO, uldAgreement, false);
			uldAgreement.update(uldAgreementVO);

            uLDConfigAuditVO = (ULDConfigAuditVO) AuditUtils
                    .populateAuditDetails(uLDConfigAuditVO, uldAgreement, false);
            findULDConfigAuditVOForAgreement(uldAgreement, uLDConfigAuditVO,
                    uldAgreementVO);
			// added by a-3045 for bug 28905 on 15Jan09 starts
			uLDConfigAuditVO.setActionCode(UPDATE_ULDAGREEMENT);
			// added by a-3045 for bug 28905 on 15Jan09 ends
			uLDConfigAuditVO.setAuditRemarks(uldAgreementVO.getRemark());

			AuditUtils.performAudit(uLDConfigAuditVO);

        } else if (ULDAgreementVO.OPERATION_FLAG_INSERT.equals(uldAgreementVO
                .getOperationFlag())) {
			checkULDAgreementAlreadyExists(uldAgreementVO);

			ULDAgreement uLDAgreement = new ULDAgreement(uldAgreementVO);
			agreementNumber = uldAgreementVO.getAgreementNumber();
			log.log(Log.INFO, "!!!!!! agreementNumber", agreementNumber);
            ULDConfigAuditVO uLDConfigAuditVO = new ULDConfigAuditVO(
                    ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
                    ULDAgreementVO.ENTITY);

            uLDConfigAuditVO = (ULDConfigAuditVO) AuditUtils
                    .populateAuditDetails(uLDConfigAuditVO, uLDAgreement, true);
			// log.log(Log.INFO, "!!!!!!!!!!! pk is "
			// + uLDAgreement.getUldAgreementPK());
            findULDConfigAuditVOForAgreement(uLDAgreement, uLDConfigAuditVO,
                    uldAgreementVO);
			uLDConfigAuditVO.setActionCode(CREATE_ULDAGREEMENT);
			uLDConfigAuditVO.setAuditRemarks(uldAgreementVO.getRemark());
			AuditUtils.performAudit(uLDConfigAuditVO);

		}
		return agreementNumber;
	}

	/**
	 *
	 * @param uldAgreementVO
	 * @throws SystemException
	 * @throws AgreementAlreadyExistForThePartyException
	 */

	private void checkULDAgreementAlreadyExists(ULDAgreementVO uldAgreementVO)
			throws SystemException, AgreementAlreadyExistForThePartyException {
        Collection<ULDAgreementExceptionVO> exceptionVOs = ULDAgreement
                .checkULDAgreementAlreadyExists(uldAgreementVO);
		log.log(Log.INFO, "!!!!!exceptionVOs", exceptionVOs);
		if (exceptionVOs != null && exceptionVOs.size() > 0) {
			Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
			log.log(Log.INFO, "!!!!!!EXCEPTION NEEDS TO B THROWN");
			AgreementAlreadyExistForThePartyException agreementExistForPartyEx = new AgreementAlreadyExistForThePartyException();
			for (ULDAgreementExceptionVO exceptionVO : exceptionVOs) {
                ErrorVO error = ErrorUtils
                        .getError(
								AgreementAlreadyExistForThePartyException.ULDAGREEMENT_ALREADY_EXISTS,
                                new Object[] {
                                        exceptionVO.getAgreementNumber(),
                                exceptionVO.getAgreementFromDate()
                                        .toDisplayDateOnlyFormat(),
								exceptionVO.getAgreementToDate() == null ? OPEN_ENDED_AGREEMENT
                                        : exceptionVO.getAgreementToDate()
                                                .toDisplayDateOnlyFormat()});
				log.log(Log.INFO, "!!!!!ErrorVO", error);
				errors.add(error);
			}
			log.log(Log.INFO, "!!!!!!!!errors", errors);
			agreementExistForPartyEx.addErrors(errors);
            log.log(Log.INFO, "!!!!!!!agreementExistForPartyEx",
                    agreementExistForPartyEx);
			throw agreementExistForPartyEx;
		}
	}



	/**
	 *
	 * @param uldAgreementFilterVO
	 * @return
	 * @throws SystemException
	 */
	// To be reviewed Page<ULDAgreementVO>
    public Page<ULDAgreementVO> listULDAgreements(
            ULDAgreementFilterVO uldAgreementFilterVO) throws SystemException {
		log.entering("ULDController", "listULDAgreements");
		return ULDAgreement.listULDAgreements(uldAgreementFilterVO);
	}

	/**
	 * This method is for populating the uldagreements
	 *
	 * @param companyCode
	 * @param pageNumber
	 * @return
	 * @throws SystemException
	 */
	// To be reviewed Collection<Strings>
    public Page populateULDAgreementLOV(
            ULDAgreementFilterVO uldAgreementFilterVO) throws SystemException {
		log.entering("ULDController", "listULDAgreements");
		return ULDAgreement.populateULDAgreementLOV(uldAgreementFilterVO);

	}

	/**
	 * This method is used to update the status of ULD Agreement to the changed
	 * status.ie Active to Inactive and ViceVeraa
	 *
     * @param companyCode companyCode
     * @param agreementNumbers agreementNumbers
     * @param changedStatus changedStatus
     * @return
     * @throws SystemException SystemException
     * @throws AgreementAlreadyExistForThePartyException AgreementAlreadyExistForThePartyException
	 */

	// public void updateULDAgreementStatus(String companyCode,
	// Collection<String> agreementNumbers, String changedStatus)
	// throws SystemException {
	// log.entering("ULDController", "updateULDAgreementStatus");
	// log.log(Log.INFO, "!!!!!agreementNumbers" + agreementNumbers);
	// ULDAgreement uldAgreement = null;
	// for (String agreementNumber : agreementNumbers) {
	//
	// log.log(Log.INFO, "!!!!!!!!companyCode" + companyCode);
	// log.log(Log.INFO, "!!!!!!!!agreementNumber" + agreementNumber);
	// log.log(Log.INFO, "!!!!!!!!changedStatus" + changedStatus);
	//
	// uldAgreement = ULDAgreement.find(companyCode, agreementNumber);
	//
	// /*ULDConfigAuditVO uLDConfigAuditVO = new ULDConfigAuditVO(
	// ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
	// ULDAgreementVO.ENTITY);
	//
	// uLDConfigAuditVO = (ULDConfigAuditVO) AuditUtils
	// .populateAuditDetails(uLDConfigAuditVO, uldAgreement,
	// false);
	// */
	// uldAgreement.updateULDAgreementStatus(companyCode, agreementNumber,
	// changedStatus);
	// /*
	// uLDConfigAuditVO = (ULDConfigAuditVO) AuditUtils
	// .populateAuditDetails(uLDConfigAuditVO, uldAgreement,
	// false);
	//
	// findULDConfigAuditVOForAgreement(uldAgreement,
	// uLDConfigAuditVO , uldAgreementVO);
	// uLDConfigAuditVO.setActionCode(UPDATE_ULDAGREEMENT);
	// uLDConfigAuditVO.setAuditRemarks(uldAgreementVO.getR);
	//
	// AuditUtils.performAudit(uLDConfigAuditVO);
	// */
	// }
	// }
    public void updateULDAgreementStatus(Collection<ULDAgreementVO> uldAgrVOs,
            String changedStatus) throws SystemException, AgreementAlreadyExistForThePartyException {
		log.entering("ULDController", "updateULDAgreementStatus");
		ULDAgreement uldAgreement = null;
		for (ULDAgreementVO vo : uldAgrVOs) {
			log.log(Log.INFO, "!!!!!!!!companyCode", vo.getCompanyCode());
			log.log(Log.INFO, "!!!!!!!!agreementNumber", vo.getAgreementNumber());
			log.log(Log.INFO, "!!!!!!!!changedStatus", changedStatus);
            uldAgreement = ULDAgreement.find(vo.getCompanyCode(), vo
                    .getAgreementNumber());
            if(uldAgreement!=null && "A".equals(changedStatus))
             {
				vo.setTxnType(uldAgreement.getTxnType());
				vo.setPartyType(uldAgreement.getPartyType());
				vo.setPartyCode(uldAgreement.getPartyCode());
                if(uldAgreement.getAgreementFromDate()!=null){
                vo.setAgreementFromDate(new LocalDate(LocalDate.NO_STATION,
                        Location.NONE, uldAgreement.getAgreementFromDate(),
                        false));
                }
                if(uldAgreement.getAgreementToDate()!=null){
                vo.setAgreementToDate(new LocalDate(LocalDate.NO_STATION,
                        Location.NONE, uldAgreement.getAgreementToDate(),
                        false));
                }
                if(uldAgreement.getAgreementDate()!=null){
                vo.setAgreementDate(new LocalDate(LocalDate.NO_STATION,
                        Location.NONE, uldAgreement.getAgreementDate(),
                        false));
				}
				checkULDAgreementAlreadyExists(vo);
			 }
			uldAgreement.updateULDAgreementStatus(vo, changedStatus);
			// added by a-3045 for bug 28905 on 15Jan09 starts
			if ("D".equals(changedStatus)) {
                ULDConfigAuditVO uLDConfigAuditVO = new ULDConfigAuditVO(
                        ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
                        ULDAgreementVO.ENTITY);
                uLDConfigAuditVO = (ULDConfigAuditVO) AuditUtils
                        .populateAuditDetails(uLDConfigAuditVO, uldAgreement,
                                false);
                findULDConfigAuditVOForAgreement(uldAgreement,
                        uLDConfigAuditVO, vo);
				uLDConfigAuditVO.setActionCode(DELETE_ULDAGREEMENT);
				uLDConfigAuditVO.setAuditRemarks(vo.getRemark());
                log.log(Log.FINE, "inside when changed status is D, vo",
                        uLDConfigAuditVO);
				AuditUtils.performAudit(uLDConfigAuditVO);
			}
			// added by a-3045 for bug 28905 on 15Jan09 ends

		}

	}

	/**
	 *
	 * @param uldStockConfigVOs
	 * @throws SystemException
	 */
    public void saveULDStockConfig(
            Collection<ULDStockConfigVO> uldStockConfigVOs)
            throws SystemException {
		log.entering("ULDController", "saveULDStockConfig");

		for (ULDStockConfigVO uldStockConfigVO : uldStockConfigVOs) {
            if (ULDStockConfigVO.OPERATION_FLAG_DELETE.equals(uldStockConfigVO
                    .getOperationFlag())) {
				log.log(Log.INFO, "!!!!GOING TO REMOVE This");

                ULDStockConfig uldStockConfig = ULDStockConfig.find(
                        uldStockConfigVO.getCompanyCode(), uldStockConfigVO
                                .getAirlineIdentifier(), uldStockConfigVO
                                .getStationCode(), uldStockConfigVO
                                .getUldTypeCode(), uldStockConfigVO
                                .getUldNature());

                ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                        ULDStockConfigVO.MODULE, ULDStockConfigVO.SUBMODULE,
                        ULDStockConfigVO.ENTITY);

                uldConfigAuditVO = (ULDConfigAuditVO) AuditUtils
                        .populateAuditDetails(uldConfigAuditVO, uldStockConfig,
								false);

				uldStockConfig.remove();

                findULDStockConfigAuditVO(uldStockConfig, uldConfigAuditVO,
                        uldStockConfigVO);
				uldConfigAuditVO.setActionCode(DELETE_ULDSTOCK);
				AuditUtils.performAudit(uldConfigAuditVO);
			}
		}
		for (ULDStockConfigVO uldStockConfigVO : uldStockConfigVOs) {
            if (ULDStockConfigVO.OPERATION_FLAG_INSERT.equals(uldStockConfigVO
                    .getOperationFlag())) {
				log.log(Log.INFO, "!!!!GOING TO INSERT THIS ");
				/** ** Doubt ******* */

                ULDStockConfig uldStockConfig = new ULDStockConfig(
                        uldStockConfigVO);

                ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                        ULDStockConfigVO.MODULE, ULDStockConfigVO.SUBMODULE,
                        ULDStockConfigVO.ENTITY);

                uldConfigAuditVO = (ULDConfigAuditVO) AuditUtils
                        .populateAuditDetails(uldConfigAuditVO, uldStockConfig,
                                true);

                log.log(Log.INFO,
                        "!!!!!!!!!!! uldStockConfig.getUldStockConfigPK()",
                        uldStockConfig.getUldStockConfigPK());
                findULDStockConfigAuditVO(uldStockConfig, uldConfigAuditVO,
                        uldStockConfigVO);

				uldConfigAuditVO.setActionCode(CREATE_ULDSTOCK);
				AuditUtils.performAudit(uldConfigAuditVO);

            } else if (ULDStockConfigVO.OPERATION_FLAG_UPDATE
                    .equals(uldStockConfigVO.getOperationFlag())) {
				log.log(Log.INFO, "!!!!GOING TO UPDATE THIS ");

                ULDStockConfig uldStockConfig = ULDStockConfig.find(
                        uldStockConfigVO.getCompanyCode(), uldStockConfigVO
                                .getAirlineIdentifier(), uldStockConfigVO
                                .getStationCode(), uldStockConfigVO
                                .getUldTypeCode(), uldStockConfigVO
                                .getUldNature());

                ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                        ULDStockConfigVO.MODULE, ULDStockConfigVO.SUBMODULE,
                        ULDStockConfigVO.ENTITY);

                uldConfigAuditVO = (ULDConfigAuditVO) AuditUtils
                        .populateAuditDetails(uldConfigAuditVO, uldStockConfig,
								false);
				uldStockConfig.update(uldStockConfigVO);

                uldConfigAuditVO = (ULDConfigAuditVO) AuditUtils
                        .populateAuditDetails(uldConfigAuditVO, uldStockConfig,
                                false);
                findULDStockConfigAuditVO(uldStockConfig, uldConfigAuditVO,
                        uldStockConfigVO);
				uldConfigAuditVO.setActionCode(UPDATE_ULDSTOCK);
				AuditUtils.performAudit(uldConfigAuditVO);
			}
		}
	}

	/**
	 *
	 * @param uldStockConfigFilterVO
	 * @return
	 * @throws SystemException
	 */
	// To be reviewed Page<ULDStockConfigVO>
    public Collection<ULDStockConfigVO> listULDStockConfig(
            ULDStockConfigFilterVO uldStockConfigFilterVO)
			throws SystemException {
		log.entering("ULDController", "listULDStockConfig");
		ULDStockConfig uldStockConfig = new ULDStockConfig();
		return uldStockConfig.listULDStockConfig(uldStockConfigFilterVO);
	}





	/**
	 *
	 * @param companyCode
	 * @param stationCode
	 * @param airlineIdentifier
	 * @return
	 * @throws SystemException
	 */
    public Page<String> findStationUlds(String companyCode, String uldNumber,
            String stationCode, String transactionType, int airlineIdentifier,
            int displayPage) throws SystemException {
		log.entering("INSIDE THE CONTROLER", "findStationUlds");
        return ULD.findStationUlds(companyCode, uldNumber, stationCode,
                transactionType, airlineIdentifier, displayPage);

    }



	/**
	 *
	 * @param transactionVO
	 * @return
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 */
	public Collection<ErrorVO> saveULDTransaction(TransactionVO transactionVO)
            throws SystemException, ULDDefaultsBusinessException,
            CurrencyConversionException, DimensionConversionException,
            MessageConfigException {
		/*
		 * if(transactionVO.getUldTransactionDetailsVOs() != null &&
		 * transactionVO.getUldTransactionDetailsVOs().size() > 0){
		 * if(LOANED_TRANSACTION.equals(transactionVO.getTransactionType())){
		 * for(ULDTransactionDetailsVO trnDetailsVO :
		 * transactionVO.getUldTransactionDetailsVOs()){ int
		 * returnPartyIdentifier = 0;
		 * if(OPERATION_FLAG_INSERT.equals(transactionVO.getOperationalFlag())){
		 *
		 * //*** //returnPartyIdentifier =
		 * //findOperationalAirlineForULD(transactionVO.getCompanyCode() ,
		 * trnDetailsVO.getUldNumber());
		 *
		 * //String airlineCode =
		 * //ULD.findCarrierCode(transactionVO.getCompanyCode() ,
		 * returnPartyIdentifier);
		 *
		 * trnDetailsVO.setReturnPartyCode(trnDetailsVO.getFromPartyCode());
		 *
		 * trnDetailsVO.setReturnPartyIdentifier(returnPartyIdentifier);
		 * trnDetailsVO.setReturnPartyCode(airlineCode); } } } }
		 */
		Collection<ErrorVO> errors = null;
		if (OPERATION_FLAG_INSERT.equals(transactionVO.getOperationalFlag())) {
			// QF1507 - agent Return

			if (LOAN_RETURN.equals(transactionVO.getTransactionType())) {
                //errors = createULDDummyLoanAndReturnTransaction(transactionVO);
				errors = returnWithoutPriorLoan(transactionVO);
			} else {
				// Modified by A-3415 for ICRD-114538
				try {
					errors = createULDLoanTransactionFeature(transactionVO);
				} catch (BusinessException e) {
					throw new ULDDefaultsBusinessException(e);
				}
			}
		}
		if (OPERATION_FLAG_UPDATE.equals(transactionVO.getOperationalFlag())) {
			// Modified by A-3415 for ICRD-114538
			errors = modifyULDLoanTransaction(transactionVO);
		}
		if (OPERATION_FLAG_DELETE.equals(transactionVO.getOperationalFlag())) {
			// Modified by A-3415 for ICRD-114538
			errors = deleteULDLoanTransaction(transactionVO);
		}

		return errors;
	}

	/**
	 * Commented by A-3415 for ICRD-114538
	 * @param transactionVO
	 * @return
	 * @throws SystemException
	 * @throws DimensionConversionException
	 * @throws CurrencyConversionException
     *//*
    private Collection<ErrorVO> createULDDummyLoanAndReturnTransaction(
            TransactionVO transactionVO) throws SystemException,
            DimensionConversionException, CurrencyConversionException {
        log.entering("createULDDummyLoanAndReturnTransaction",
                "Dummy Loan and return");
        Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
        if (transactionVO.getUldTransactionDetailsVOs() != null
                && transactionVO.getUldTransactionDetailsVOs().size() > 0) {
            for (ULDTransactionDetailsVO uldTransactionDetailVO : transactionVO
                    .getUldTransactionDetailsVOs()) {
                ULDAirportLocationVO uLDAirportLocationVO = null;
                ULD uld = null;
                boolean isValid = false;
                // Added by A-2052 for the bug 103872 starts
                boolean isDummyTransaction = false;
                    boolean isBorrowTransaction = false;
                ULDTransaction uldTransaction = null;
                isValid = checkLoanedULDAlreadyLoaned(uldTransactionDetailVO
                        .getCompanyCode(), uldTransactionDetailVO
                        .getUldNumber(), LOANED_TRANSACTION);
                if (!isValid) {
                         isValid = checkLoanedULDAlreadyLoaned(
                                    uldTransactionDetailVO.getCompanyCode(),

                                    uldTransactionDetailVO.getUldNumber(),BORROW_TRANSACTION);
                         if(isValid){
                             isBorrowTransaction = true;
                         }
                     }
                    if (!isValid) {
                         String dummyTransactionType = createDummyTransaction(uldTransactionDetailVO.getUldNumber(),
                                uldTransactionDetailVO.getFromPartyCode(),
                                uldTransactionDetailVO.getToPartyCode());
                         if(DUMMY_BORROW_TRANSACTION.equals(dummyTransactionType)){
                             uldTransactionDetailVO.setTransactionType(BORROW_TRANSACTION);

                         }else{
                             uldTransactionDetailVO.setTransactionType(LOANED_TRANSACTION);
                         }
                    if (uldTransactionDetailVO.getTransactionDate() == null) {
                        uldTransactionDetailVO
                                .setTransactionDate(uldTransactionDetailVO
                                        .getReturnDate());
                    } else {
                        LocalDate currentDate = new LocalDate(
                                LocalDate.NO_STATION, Location.NONE, true);
                        uldTransactionDetailVO.setTransactionDate(currentDate);
                    }
                         uldTransactionDetailVO.setReturnCRN(uldTransactionDetailVO.getControlReceiptNumber());
                            String crn = null;

                            String ctrlRcptNo = findCRNForULDTransaction(uldTransactionDetailVO
                                    .getCompanyCode(), uldTransactionDetailVO.getToPartyCode());

                             crn = new StringBuilder().append(ctrlRcptNo.substring(0,4))
                            .append("0").append(ctrlRcptNo.substring(5,12)).toString();
                            uldTransactionDetailVO.setControlReceiptNumber(crn);
                    uldTransaction = new ULDTransaction(uldTransactionDetailVO);
                    uldTransaction.setPartyCode(uldTransactionDetailVO
                            .getFromPartyCode());
                    uldTransaction.setPartyName(uldTransactionDetailVO
                            .getFromPartyName());
                    uldTransaction.setReturnPartyCode(uldTransactionDetailVO
                            .getToPartyCode());
                    uldTransaction
                            .setReturnPartyidentifier(uldTransactionDetailVO
                                    .getToPartyIdentifier());
                    int loanReferenceNumber = uldTransaction
                            .getUldTransactionPK().getTransactionRefNumber();
                    errors.add(new ErrorVO("uld.transaction.refnumber",
                            new Object[] { uldTransactionDetailVO
                                    .getUldNumber() }));
                    String uldType = "";
                    try {
                        uld = ULD.find(uldTransactionDetailVO.getCompanyCode(),
                                uldTransactionDetailVO.getUldNumber());
                    } catch (FinderException finderException) {
                        log.log(Log.INFO, "ULD not existing in system");
                        uld = null;
                    }
                    if (uld == null) {

                         * find the uldtype alone from ULDNumber

                        uldType = parseULDType(uldTransactionDetailVO
                                .getUldNumber());
                        log.log(Log.FINE, "THE ULDTYPE IS ULDTYPE IS", uldType);
                        log
                                .log(Log.INFO,
                                        "fFIND ULD STRUCTURAL DETAILS CALLED");

                         * Call findStructural Details since in case of a
                         * Borrowed Transaction we are introducing an new ULD in
                         * the ULDMST containing the BORREFNUM in ULDMST as same
                         * as TXNREFNUM in ULDTXNMST
                         *


                            ULDTypeVO typeVo = findULDTypeStructuralDetails(uldTransactionDetailVO
                                      .getCompanyCode(),uldType);
                            int length = uldTransactionDetailVO.getUldNumber().trim().length();
                            String ownerCode = uldTransactionDetailVO.getUldNumber().substring(length - 2);
                            LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                                            .getLogonAttributesVO();
                            String ownairlineCode=logonAttributes.getOwnAirlineCode();
                            if (ownairlineCode.equals(ownerCode)){
                            errors.add(new ErrorVO(
                                    "uld.defaults.uld.doesnot.exists",
                                    new Object[] { uldTransactionDetailVO
                                            .getUldNumber() }));
                            return errors;
                            // Added by A-2052 for the bug 102803 ends
                            // done for bug 102720 starts
                        } else {
                            // Added by A-2052 for the bug 103872 starts
                            ULDVO uldVo = createULDVo(uldTransactionDetailVO,
                                    typeVo, uldType, loanReferenceNumber,
                                    isDummyTransaction);
                            // Added by A-2052 for the bug 103872 ends
                            log
                                    .log(
                                            Log.INFO,
                                            "DUMMY LOAN ULD TRANSACTION CALLING CONSTRUCTOR FOR ADDING A NEW ENTRY IN ULDMST");
                            uld = new ULD(uldVo);
                        }
                    }
                    // audit start - Audit not required for dummy loan
                        uldTransactionDetailVO.setTransactionStatus(ULDTransactionDetailsVO.TO_BE_INVOICED);
                    if (uldTransactionDetailVO.getTransactionDate() != null) {
                        uldTransactionDetailVO
                                .setReturnDate(uldTransactionDetailVO
                                        .getTransactionDate());
                    } else if (uldTransactionDetailVO.getReturnDate() != null) {
                        uldTransactionDetailVO
                                .setReturnDate(uldTransactionDetailVO
                                        .getReturnDate());
                    } else {
                        LocalDate currentDate = new LocalDate(
                                LocalDate.NO_STATION, Location.NONE, true);
                        uldTransactionDetailVO.setReturnDate(currentDate);
                    }
                        uldTransactionDetailVO.setReturnStationCode(uldTransactionDetailVO.getTransactionStationCode());
                        uldTransaction.setReturnStationCode(uldTransactionDetailVO.getTransactionStationCode());
                    uld = checkULDExistsForReturn(uldTransactionDetailVO);
                    // Added by A-3268 for Bug 102024 starts
                    if (uldTransactionDetailVO.getTotal() == 0) {
                        // modified for the bug 102486 by a-2052 starts
                            uldTransaction.setTotal(uldTransactionDetailVO.getTotal());
                            uldTransaction.setCurrency(uldTransactionDetailVO.getCurrency());
                    }
                         uldTransaction.setPartyCode(uldTransactionDetailVO.getFromPartyCode());
                        uldTransaction.setPartyName(uldTransactionDetailVO.getFromPartyName());
                        uldTransaction.setPartyIdentifier(String.valueOf(uldTransactionDetailVO.getFromPartyIdentifier()));
                        uldTransaction.setReturnPartyCode(uldTransactionDetailVO.getToPartyCode());
                        uldTransaction.setReturnPartyidentifier(uldTransactionDetailVO.getToPartyIdentifier());
                        uldTransaction.update(uldTransactionDetailVO);
                        uLDAirportLocationVO = ULD.findCurrentLocation(uldTransactionDetailVO.getCompanyCode(),
                                        uldTransactionDetailVO.getReturnStationCode() != null ?
                                           uldTransactionDetailVO.getReturnStationCode(): uldTransactionDetailVO.getTransactionStationCode()
                                       ,CONTENT_EMPTY);
                    if (uLDAirportLocationVO != null) {
                        uld.setFacilityType(uLDAirportLocationVO
                                .getFacilityType());
                        uld.setLocation(uLDAirportLocationVO.getFacilityCode());
                    } else {
                        uld.setLocation(ULDVO.NO_LOCATION);
                        uld.setFacilityType(ULDVO.NO_LOCATION);
                    }
                    uld.setScmDate(null);
                    uld.setScmFlag(null);
                    uld.setReleasedTo(null);
                    uld.setAgentCode(null);
                    uld.setAgentStation(null);
                    uld.setLoanReferenceNumber(0);
                    if (new LocalDate(uld.getCurrentStation(), Location.ARP,
                            uld.getLastMovementDate(), true).toGMTDate()
                            .before(
                                    uldTransactionDetailVO.getReturnDate()
                                            .toGMTDate())) {
                        uld.setCurrentStation(uldTransactionDetailVO
                                .getReturnStationCode());
                        *//**
                         * Added By A-3830 for Bug 101908 If last movement date
                         * is less than date of return transaction, then last
                         * movement date needs to be updated with return date.
                         *//*
                        uld.setLastMovementDate(uldTransactionDetailVO
                                .getReturnDate());

                    }
                    // uld.setLoanReferenceNumber(loaned);
                    // Added by A-2052 for the bug 102232 starts
                    // Added by A-2052 for the bug 106143 starts
                    if (uldTransactionDetailVO.getToPartyIdentifier() == 0) {
                        uld
                                .setOperationalAirlineIdentifier(Integer
                                        .parseInt(new StringBuilder()
                                                .append("1")
                                                .append(
                                                        uldTransactionDetailVO
                                                                .getControlReceiptNumberPrefix())
                                                .toString()));
                    } else {
                        uld
                                .setOperationalAirlineIdentifier(uldTransactionDetailVO
                                        .getToPartyIdentifier());
                    }
                    if (uldTransactionDetailVO.getFromPartyCode() == null) {
                        AirlineValidationVO airlineValidationVO = null;
                        try {
                            airlineValidationVO = new SharedAirlineProxy()
                                    .findAirline(uldTransactionDetailVO
                                            .getCompanyCode(), uld
                                            .getOperationalAirlineIdentifier());
                        } catch (ProxyException e) {
                        }
                        uldTransactionDetailVO
                                .setFromPartyCode(airlineValidationVO
                                        .getAlphaCode());
                    }
                    // Added by A-2052 for the bug 106143 ends
                    // Added by A-2052 for the bug 102232 ends
                    uld.setControlReceiptNumber(uldTransactionDetailVO
                            .getReturnCRN());
                    if (!PARTYTYPE_AIRLINE.equals(uldTransactionDetailVO
                            .getPartyType())) {


						 * log.log(Log.INFO,
						 * "TransactionStatus"+uldTransactionDetailVO.getTransactionStatus());


                        // To update the stock of the station where ULD is
                        // returned
                        // When Agent Loan Txn is returned, the RTNSTA for the
                        // ULDINTMVTDTL is updated to 'R'
                        LogonAttributes logonAttributes = ContextUtils
                                .getSecurityContext().getLogonAttributesVO();
                        ULDIntMvtHistoryFilterVO uldIntMvtFilterVO = new ULDIntMvtHistoryFilterVO();
                        uldIntMvtFilterVO.setCompanyCode(logonAttributes
                                .getCompanyCode());
                        uldIntMvtFilterVO.setUldNumber(uldTransactionDetailVO
                                .getUldNumber());
                        uldIntMvtFilterVO
                                .setReasonForMvt(ULDAirportLocationVO.FACLITY_AGENTLOC);
                        Page<ULDIntMvtDetailVO> uldIntMvtVOs = findIntULDMovementHistory(
                                uldIntMvtFilterVO, 1);
                        log.log(Log.INFO, " uldIntMvtVOs FOUND ARE --->>> ",
                                uldIntMvtVOs);
                        if (uldIntMvtVOs != null && uldIntMvtVOs.size() > 0) {
                            ULDIntMvtDetailVO latestMvtVo = uldIntMvtVOs
                                    .get(uldIntMvtVOs.size() - 1);
                            if (latestMvtVo != null) {
                                ULDIntMvtDetail latestMvt = null;
                                latestMvt = ULDIntMvtDetail.find(latestMvtVo
                                        .getCompanyCode(), latestMvtVo
                                        .getUldNumber(), latestMvtVo
                                        .getIntSequenceNumber(), latestMvtVo
                                        .getIntSerialNumber());
                                log.log(Log.INFO,
                                        " MOVEMENT DEATIL FOUND IS --- ",
                                        latestMvt);
                                if (latestMvt != null) {
                                    latestMvt
                                            .setReturnStatus(ULDIntMvtDetailVO.FLAG_YES);
                                }
                            }
                        }
                        // Added by Preet on 27Aug08 --ends
                    }

                        ULDAuditVO uldAuditVOForReturn = new ULDAuditVO(TransactionVO.MODULE,
                      TransactionVO.SUBMODULE,TransactionVO.ENTITY);
                        uldAuditVOForReturn = (ULDAuditVO) AuditUtils.populateAuditDetails(
    uldAuditVOForReturn,uldTransaction, false);
                        uldTransactionDetailVO.setReturnCRN(uldTransaction.getControlReceiptNumber());
                        collectReturnTransactionDetails(uldTransaction, uldAuditVOForReturn,
                       uldTransactionDetailVO);
                        uldAuditVOForReturn.setActionCode(RETURN_ULDLOANTRANSACTION);
                    uldAuditVOForReturn.setAuditRemarks(uldTransactionDetailVO
                            .getReturnRemark());
                    AuditUtils.performAudit(uldAuditVOForReturn);
                } else {
                    // to move to new method

                        log.log(Log.INFO, " Already LOANED/Borrowed");
                    uld = checkULDExistsForReturn(uldTransactionDetailVO);
                        //Added by A-2052 for the bug 107031 starts
                        if(isBorrowTransaction){
                            uldTransaction = ULDTransaction.find(
                                    uldTransactionDetailVO.getCompanyCode(),
                                    uldTransactionDetailVO.getUldNumber(),
                                    uld.getBorrowReferenceNumber());
                            //Added by A-2052 for the bug 108726 starts
                            uldTransactionDetailVO.setTransactionType(BORROW_TRANSACTION);
                            //Added by A-2052 for the bug 108726 ends
                        }else{
                            uldTransaction = ULDTransaction.find(
                                    uldTransactionDetailVO.getCompanyCode(),
                                    uldTransactionDetailVO.getUldNumber(),
                                    uld.getLoanReferenceNumber());
                            //Added by A-2052 for the bug 108726 starts
                            uldTransactionDetailVO.setTransactionType(LOANED_TRANSACTION);
                            //Added by A-2052 for the bug 108726 ends
                        }
                        log.log(Log.INFO, "CALLING THE UPDATE METHOD",
                                uldTransactionDetailVO);
                    ULDAuditVO uldAuditVO = new ULDAuditVO(
                            TransactionVO.MODULE, TransactionVO.SUBMODULE,
                            TransactionVO.ENTITY);

                     * uldAuditVO = (ULDAuditVO)
                     * AuditUtils.populateAuditDetails( uldAuditVO,
					 * uldTransaction, false);

                    // added by a-3045 for bug20383 starts
                    uldTransactionDetailVO
                            .setTransactionStatus(ULDTransactionDetailsVO.TO_BE_INVOICED);
                    log.log(Log.INFO, "TransactionStatus",
                            uldTransactionDetailVO.getTransactionStatus());
                    log.log(Log.FINE, "Time before updation : ",
                            uldTransactionDetailVO.getLastUpdateTime());
                    LocalDate currentDate = new LocalDate(LocalDate.NO_STATION,
                            Location.NONE, true);
                    if (uldTransactionDetailVO.getLastUpdateTime() == null) {
                        uldTransactionDetailVO.setLastUpdateTime(currentDate);
                    }
                    *//**
                     * **********commented for bug 102920 starts
                     * **************************
                     *//*
                    LocalDate txndate = new LocalDate(LocalDate.NO_STATION,
                            Location.NONE, uldTransaction.getTransactionDate(),
                            true);
                    log.log(Log.INFO, " date of last transaction", txndate.toString());
                    uldTransactionDetailVO.setTransactionDate(txndate);
                    // uldTransactionDetailVO.setReturnDate(uldTransactionDetailVO.getTransactionDate());
                    *//**
                     * **********commented for bug 102920 ends
                     * **************************
                     *//*
                    log.log(log.INFO,
                            "Inside else caseeeeeeeeeeeeeeeeeeeeeeeee>>>>>>>>");
                    uldTransactionDetailVO
                            .setReturnStationCode(uldTransactionDetailVO
                                    .getTransactionStationCode());
                    log.log(Log.INFO, "CALLING THE UPDATE METHOD");
                    // Added by A-3268 for Bug 102024 starts
                    if (uldTransactionDetailVO.getTotal() == 0) {
                        // modified for the bug 102486 by a-2052 starts
                        findDemurrageDetails(uldTransactionDetailVO,
                                uldTransaction.getControlReceiptNumber(),
                                LOANED_TRANSACTION, uldTransaction
                                        .getPartyCode());
                        // modified for the bug 102486 by a-2052 ends
                    }
                    if ("R".equals(uldTransactionDetailVO.getTransactionType())) {
                        uldTransactionDetailVO.setReturnCRN(uldTransactionDetailVO.getControlReceiptNumber());
                        uldTransactionDetailVO.setControlReceiptNumber(uldTransaction.getControlReceiptNumber());
                        //Added by A-4138 for the bug 103998  starts
                        //uldTransactionDetailVO.setReturnRemark(transactionVO.getReturnRemark());
                        //Added by A-4138 for the bug 103998 ends

                        }else{
                             uldTransactionDetailVO.setReturnCRN(uldTransactionDetailVO.getControlReceiptNumber());
                             //uldTransactionDetailVO.setControlReceiptNumber(uldTransaction.getControlReceiptNumber());
                             uldTransactionDetailVO.setReturnRemark(uldTransactionDetailVO.getTransactionRemark());
                    }
                    // Added by A-3268 Bug 102024 ends
                    // added by a-3045 for bug20383 ends
                    uldTransaction.update(uldTransactionDetailVO);
                    // uldTransactionDetailVO.setReturnCRN(uldTransactionDetailVO.getControlReceiptNumber());
                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldTransaction, false);

                    collectReturnTransactionDetails(uldTransaction, uldAuditVO,
                            uldTransactionDetailVO);
                        //Modified by A-2052 for the bug 109554 starts
                        if(isBorrowTransaction){
                            uldAuditVO.setActionCode(RETURN_ULDBORROWTRANSACTION);
                        }else{
                    uldAuditVO.setActionCode(RETURN_ULDLOANTRANSACTION);
                        }
                        //Modified by A-2052 for the bug 109554 ends
                    uldAuditVO.setAuditRemarks(uldTransactionDetailVO
                            .getReturnRemark());
                    AuditUtils.performAudit(uldAuditVO);

                    if (PARTYTYPE_AIRLINE.equals(uldTransactionDetailVO
                            .getPartyType())) {
                        uld = checkULDExistsForReturn(uldTransactionDetailVO);
                        log.entering("saveReturnTransaction",
                                "TRANSCTION IS LOANED CALLING THE UPDATE");
                        log.log(Log.FINE,
                                "THE OWNERAIRLINEIDENTIFIER FROM THE ULDMST ",
                                uld.getOwnerAirlineIdentifier());
                        log
                                .log(
                                        Log.FINE,
                                        "THE CURRENT OWNER CODE FROM THE ULDTRANSACTION DETAILS VO",
                                        uldTransactionDetailVO
                                                .getCurrOwnerCode());
                            //Added by A-2052 for the bug 107031 starts
                            if(isBorrowTransaction){
                                uld.setBorrowReferenceNumber(0);
                            }else{
                        uld.setLoanReferenceNumber(0);
                            }
                            //uld.setLoanReferenceNumber(0);
                            //Added by A-2052 for the bug 107031 ends
                            uld.setOperationalAirlineIdentifier(uldTransactionDetailVO
                                        .getCurrOwnerCode());

                         * modified by a-3278 for 28897 on 06Jan09 a new CRN is
                         * maintained to save the latest and the old CRN
                         * seperately the newCRN is updated as the CRN for the
                         * ULD

                        // uld.setControlReceiptNumber(null);
                        uld.setControlReceiptNumber(uldTransactionDetailVO
                                .getReturnCRN());
                        // Added by Preet on Feb 19th --starts
                        // To update the stock of the station where ULD is
                        // returned
                        if (new LocalDate(uld.getCurrentStation(),
                                Location.ARP, uld.getLastMovementDate(), true)
                                .toGMTDate().before(
                                        uldTransactionDetailVO.getReturnDate()
                                                .toGMTDate())) {
                            uld.setCurrentStation(uldTransactionDetailVO
                                    .getReturnStationCode());
                            *//**
                             * Added By A-3830 for Bug 101908 If last movement
                             * date is less than date of return transaction,
                             * then last movement date needs to be updated with
                             * return date.
                             *//*
                            uld.setLastMovementDate(uldTransactionDetailVO
                                    .getReturnDate());
                        }
                        // added by nisha for QF1013 starts
                        uld.setScmDate(null);
                        uld.setScmFlag(null);
                        // QF1501
                        uld.setAgentCode(null);
                        uld.setAgentStation(null);
                        // ends
                        // Added by Preet on Feb 19th --ends
                        // Added by a-3278 for bug 18010 on 08Sep08
                    } else {
                        uld = checkULDExistsForReturn(uldTransactionDetailVO);
                        uLDAirportLocationVO = ULD.findCurrentLocation(
                                uldTransactionDetailVO.getCompanyCode(),
                                uldTransactionDetailVO.getReturnStationCode(),
                                CONTENT_EMPTY);
                        if (uLDAirportLocationVO != null) {
                            uld.setFacilityType(uLDAirportLocationVO
                                    .getFacilityType());
                            uld.setLocation(uLDAirportLocationVO
                                    .getFacilityCode());
                        } else {
                            uld.setLocation(ULDVO.NO_LOCATION);
                            uld.setFacilityType(ULDVO.NO_LOCATION);
                        }
                            //Added by A-2052 for the bug 107031 starts
                            if(isBorrowTransaction){
                                uld.setBorrowReferenceNumber(0);
                            }else{
                        uld.setLoanReferenceNumber(0);
                            }
                            //uld.setLoanReferenceNumber(0);
                            //Added by A-2052 for the bug 107031 ends
                        // Added by Preet on Feb 19th --starts
                        // To update the stock of the station where ULD is
                        // returned
                        if (new LocalDate(uld.getCurrentStation(),
                                Location.ARP, uld.getLastMovementDate(), true)
                                .toGMTDate().before(
                                        uldTransactionDetailVO.getReturnDate()
                                                .toGMTDate())) {
                            uld.setCurrentStation(uldTransactionDetailVO
                                    .getReturnStationCode());
                            *//**
                             * Added By A-3830 for Bug 101908 If last movement
                             * date is less than date of return transaction,
                             * then last movement date needs to be updated with
                             * return date.
                             *//*
                            uld.setLastMovementDate(uldTransactionDetailVO
                                    .getReturnDate());
                        }
                        // added by nisha for QF1013 starts
                        uld.setScmDate(null);
                        uld.setScmFlag(null);
                        // QF1501
                        uld.setAgentCode(null);
                        uld.setAgentStation(null);
                        // ends
                        // Added by Preet on Feb 19th --ends
                        // In case of AGENT and OTHERS , relasedTo will be set
                        // to null on returning
                        uld.setReleasedTo(null);
                        log.log(Log.INFO, " uldTransactionDetailVO --->>> ",
                                uldTransactionDetailVO);
                        uld
                                .setOperationalAirlineIdentifier(uldTransactionDetailVO
                                        .getToPartyIdentifier());
                        log.log(Log.INFO, " uld --->>> ", uld);
                        // Added by Preet on 27Aug08 --starts
                        // When Agent Loan Txn is returned, the RTNSTA for the
                        // ULDINTMVTDTL is updated to 'R'
                        LogonAttributes logonAttributes = ContextUtils
                                .getSecurityContext().getLogonAttributesVO();
                        ULDIntMvtHistoryFilterVO uldIntMvtFilterVO = new ULDIntMvtHistoryFilterVO();
                        uldIntMvtFilterVO.setCompanyCode(logonAttributes
                                .getCompanyCode());
                        uldIntMvtFilterVO.setUldNumber(uldTransactionDetailVO
                                .getUldNumber());
                        uldIntMvtFilterVO
                                .setReasonForMvt(ULDAirportLocationVO.FACLITY_AGENTLOC);
                        Page<ULDIntMvtDetailVO> uldIntMvtVOs = findIntULDMovementHistory(
                                uldIntMvtFilterVO, 1);
                        log.log(Log.INFO, " uldIntMvtVOs FOUND ARE --->>> ",
                                uldIntMvtVOs);
                        if (uldIntMvtVOs != null && uldIntMvtVOs.size() > 0) {
                            ULDIntMvtDetailVO latestMvtVo = uldIntMvtVOs
                                    .get(uldIntMvtVOs.size() - 1);
                            if (latestMvtVo != null) {
                                ULDIntMvtDetail latestMvt = null;
                                latestMvt = ULDIntMvtDetail.find(latestMvtVo
                                        .getCompanyCode(), latestMvtVo
                                        .getUldNumber(), latestMvtVo
                                        .getIntSequenceNumber(), latestMvtVo
                                        .getIntSerialNumber());
                                log.log(Log.INFO,
                                        " MOVEMENT DEATIL FOUND IS --- ",
                                        latestMvt);
                                if (latestMvt != null) {
                                    latestMvt
                                            .setReturnStatus(ULDIntMvtDetailVO.FLAG_YES);
                                }
                            }

                        }
                        // Added by Preet on 27Aug08 --ends
                    }

                }
                // to move
            }
            if (PARTYTYPE_AIRLINE.equals(transactionVO.getPartyType())) {
                LUCMessageVO lucMessageVO = createLUCMessageVO(transactionVO
                        .getUldTransactionDetailsVOs());
                try {
                    new ULDMessageProcessor()
                            .sendManualLUCMessage(lucMessageVO);
                } catch (MessageConfigException messageConfigException) {
                    log.log(Log.SEVERE, " Configuration Exception");

                }
            }
        }
        if (transactionVO.getAccessoryTransactionVOs() != null
                && transactionVO.getAccessoryTransactionVOs().size() > 0) {
            try {
                returnAcessoryTransactions(transactionVO
                        .getAccessoryTransactionVOs());
            } catch (ULDDefaultsBusinessException e) {
                log.log(Log.FINE, "exception catched -0--------");
                e.getMessage();
            }
        }

        return errors;
    }*/
        /**
         *
         * @param companyCode
         * @param uldNumber
         * @param transactionType
         * @return
         * @throws SystemException
         */
        private String createDummyTransaction(String uldNumber,
                String fromPartyCode, String toPartyCode) throws SystemException {
			log.entering("INSIDE THE CONTROLLER", "createDummyTransaction");
			log.log(Log.INFO, "uldNumber --------->", uldNumber);
			log.log(Log.INFO, "fromPartyCode --------->", fromPartyCode);
			log.log(Log.INFO, "toPartyCode --------->", toPartyCode);
            LogonAttributes logonAttributes = ContextUtils
            .getSecurityContext().getLogonAttributesVO();
            String dummyTransactionType = DUMMY_LOAN_TRANSACTION ;
			int len = uldNumber.length();
			String twoalphacode = uldNumber.substring(len - 2);
			String threealphacode = uldNumber.substring(len - 3);
			log.log(Log.INFO, "twoalphacode --------->", twoalphacode);
			log.log(Log.INFO, "threealphacode --------->", threealphacode);
			String arldtl = findOwnerCode(logonAttributes.getCompanyCode(), twoalphacode, threealphacode);
			log.log(Log.INFO, "arldtl --------->", arldtl);
            //Null check  and ownerAirlineId initialization added as part of ICRD-21184
            int ownerAirlineId  = 0;
            if(arldtl != null) {
				String airlineDetailArr[] = arldtl.split("~");
				ownerAirlineId = Integer.valueOf(airlineDetailArr[1]);
			}

			log.log(Log.INFO, "ownerAirlineId --------->", ownerAirlineId);
            log.log(Log.INFO,
                    "logonAttributes.getOwnAirlineIdentifier() --------->",
                    logonAttributes.getOwnAirlineIdentifier());
            if(fromPartyCode !=null && fromPartyCode.trim().length()>0){
                if((fromPartyCode.equalsIgnoreCase(logonAttributes.getCompanyCode()))
                        &&  !(ownerAirlineId == logonAttributes.getOwnAirlineIdentifier())){
					dummyTransactionType = DUMMY_BORROW_TRANSACTION;
				}
			}
            log.log(Log.INFO, "dummyTransactionType --------->",
                    dummyTransactionType);
			return dummyTransactionType;
		}
	/**
	 * @author A-3268
	 * @param uldTransactionDetailVO
	 * @param controlReceiptNumber
	 * @param transactionType
	 * @throws SystemException
	 */
    private void findDemurrageDetails(
            ULDTransactionDetailsVO uldTransactionDetailVO,
            String controlReceiptNumber, String transactionType,
            String partyCode) throws SystemException {
		log.entering("ULDController", "findDemurrageDetails");
		TransactionFilterVO uldTransactionFilterVO = new TransactionFilterVO();
        uldTransactionFilterVO.setUldNumber(uldTransactionDetailVO
                .getUldNumber());
        uldTransactionFilterVO.setCompanyCode(uldTransactionDetailVO
                .getCompanyCode());
		log.log(Log.FINE, " partyCode::::::::: ", partyCode);
		// modified for the bug 102486 by a-2052 starts
		// uldTransactionFilterVO.setFromPartyCode(uldTransactionDetailVO.getFromPartyCode());
		uldTransactionFilterVO.setFromPartyCode(partyCode);

		// modified for the bug 102486 by a-2052 ends

		// Transaction Status --> to be Returned
		uldTransactionFilterVO.setTransactionStatus(TO_BE_RETURNED);
		uldTransactionFilterVO.setControlReceiptNo(controlReceiptNumber);
        uldTransactionFilterVO.setTransactionStationCode(uldTransactionDetailVO
                .getTransactionStationCode());
        uldTransactionFilterVO.setToPartyCode(uldTransactionDetailVO
                .getToPartyCode());
        uldTransactionFilterVO.setPartyType(uldTransactionDetailVO
                .getPartyType());
        uldTransactionFilterVO.setUldTypeCode(uldTransactionDetailVO
                .getUldType());
		uldTransactionFilterVO.setTransactionType(transactionType);

        ULDTransactionDetailsVO txnVO = ULDTransaction
                .listULDTransactionDetailsForDemurrage(uldTransactionFilterVO);
		if (txnVO != null) {
            log
                    .log(Log.FINE, " DemurrageAmount : ", txnVO.getDemurrageAmount());
			log.log(Log.FINE, " Taxes : ", txnVO.getTaxes());
			log.log(Log.FINE, " OtherCharges : ", txnVO.getOtherCharges());
			log.log(Log.FINE, " Waived : ", txnVO.getWaived());
            uldTransactionDetailVO.setTotal((txnVO.getDemurrageAmount()
                    + txnVO.getTaxes() + txnVO.getOtherCharges())
                    - txnVO.getWaived());
			uldTransactionDetailVO.setCurrency(txnVO.getCurrency());
		}
		log.exiting("ULDController", "findDemurrageDetails");
	}

	/**
	 *
	 * @param uldTransactionDetailsVOs
	 * @return
	 * @throws SystemException
	 */
    private LUCMessageVO createLUCMessageVO(
            Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs)
			throws SystemException {

		LUCMessageVO messageVO = new LUCMessageVO();
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        //messageVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
		messageVO.setAirlineCode(logonAttributes.getOwnAirlineCode());
		messageVO.setCompanyCode(logonAttributes.getCompanyCode());
		messageVO.setStationCode(logonAttributes.getStationCode());
		messageVO.setMessageStandard("AHM");
		messageVO.setMessageType("LUC");
		messageVO.setLastUpdateUser(logonAttributes.getUserId());
        LocalDate dateOfTransfer = new LocalDate(logonAttributes
                .getAirportCode(), Location.ARP, true);
		Collection<LUCULDDetailsVO> uldDetailsVOs = new ArrayList<LUCULDDetailsVO>();
        String toParty = null;
		for (ULDTransactionDetailsVO detailsVO : uldTransactionDetailsVOs) {
			LUCULDDetailsVO uldDetailsVO = new LUCULDDetailsVO();
			dateOfTransfer = detailsVO.getTransactionDate();
            toParty = detailsVO.getToPartyCode();
            log.log(Log.FINE, "date of transfer--++---++++++++++-->",
                    dateOfTransfer);
			StringBuilder dateoFTransfer = new StringBuilder();
            dateoFTransfer.append(dateOfTransfer.toDisplayDateOnlyFormat()
                    .substring(0, 2));
            dateoFTransfer.append(dateOfTransfer.toDisplayDateOnlyFormat()
                    .substring(3, 6).toUpperCase());
            dateoFTransfer.append(dateOfTransfer.toDisplayDateOnlyFormat()
                    .substring(9, 11));
            log.log(Log.FINE,
                    "date of transfer after formatting--------------->",
                    dateoFTransfer);
			StringBuilder time = new StringBuilder();
            String times[] = dateOfTransfer.toDisplayTimeOnlyFormat()
                    .split(":");
			time.append(times[0]);
			time.append(times[1]);
			log.log(Log.FINE, "time of transfer---------------->", time);
			// added by a-3045 for bug 36242 on 09Feb09 ends
			// if-else check added by a-3278 for bug 33991 on 19Jan09
            if (detailsVO.getReturnCRN() != null
                    && detailsVO.getReturnCRN().trim().length() > 0) {
				uldDetailsVO.setUldReceiptNumber(detailsVO.getReturnCRN());
			} else {
                uldDetailsVO.setUldReceiptNumber(detailsVO
                        .getControlReceiptNumber());
			}
			uldDetailsVO.setDateofTransfer(dateoFTransfer.toString());
            uldDetailsVO.setDestinationLocation(detailsVO
                    .getReturnStationCode() != null ? detailsVO
                    .getReturnStationCode() : detailsVO
                    .getTransactionStationCode());
            uldDetailsVO
                    .setLocationOftransfer(detailsVO.getReturnStationCode() != null ? detailsVO
                            .getReturnStationCode()
                            : detailsVO.getTransactionStationCode());
			uldDetailsVO.setTimeofTransfer(Integer.parseInt(time.toString()));

			LUCULDIdentificationVO identificationVO = new LUCULDIdentificationVO();
			String uldNumber = detailsVO.getUldNumber();
			identificationVO.setUldType(uldNumber.substring(0, 3));
            identificationVO.setUldOwnerCode(uldNumber.substring(uldNumber
                    .length() - 2));
            identificationVO.setUldSerialNumber(uldNumber.substring(3,
                    uldNumber.length() - 2));
			uldDetailsVO.setUldIdentificationVO(identificationVO);
			LUCReceivingPartyDetailsVO recevingPartyDetailsVO = new LUCReceivingPartyDetailsVO();
			LUCTransferringPartyDetailsVO transferringPartyDetailsVO = new LUCTransferringPartyDetailsVO();
			// if("A".equals(detailsVO.getPartyType())){
            transferringPartyDetailsVO.setCarrierCode(detailsVO
                    .getFromPartyCode());
			/*
			 * }else{ transferringPartyDetailsVO.setCarrierCode("YY");
             * transferringPartyDetailsVO.setNonCarrierId(detailsVO.getToPartyCode()); }
			 */
			recevingPartyDetailsVO.setCarrierCode(detailsVO.getToPartyCode());
            /*
             * Added by J-1191 as part of ICRD-323994
             */
            if(detailsVO.getTransactionStatus()!=null && detailsVO.getTransactionStatus().trim().length()>0) {
            	if("T".equals(detailsVO.getTransactionStatus())){
            		if("A".equals(detailsVO.getPartyType())){
            			recevingPartyDetailsVO.setCarrierCode(detailsVO.getToPartyCode());
            		}else{
            			recevingPartyDetailsVO.setCarrierCode("YY");
            			recevingPartyDetailsVO.setNonCarrierId(detailsVO.getToPartyCode());
            		}
            		transferringPartyDetailsVO.setCarrierCode(detailsVO.getFromPartyCode());
            	}else{
            		if("A".equals(detailsVO.getPartyType())){
            			transferringPartyDetailsVO.setCarrierCode(detailsVO.getToPartyCode());
            		}else{
            			transferringPartyDetailsVO.setCarrierCode("YY");
            			transferringPartyDetailsVO.setNonCarrierId(detailsVO.getToPartyCode());
            		}
            		recevingPartyDetailsVO.setCarrierCode(detailsVO.getFromPartyCode());
            	}
            }
            /*
             * Added by J-1191 as part of ICRD-323994 ends
             */			
            uldDetailsVO
                    .setTransferringPartyDetailsVO(transferringPartyDetailsVO);
			uldDetailsVO.setReceivingPartyDetailsVO(recevingPartyDetailsVO);
			LUCULDConditionDetailsVO conditionDetailsVO = new LUCULDConditionDetailsVO();
			conditionDetailsVO.setUldCondition(detailsVO.getUldConditionCode());
            conditionDetailsVO.setServiceableCode(detailsVO.getUldConditionCode() !=null ? detailsVO.getUldConditionCode() : "SER");
			uldDetailsVO.setUldConditionDetailsVO(conditionDetailsVO);
			uldDetailsVOs.add(uldDetailsVO);
		}
//      Added for ICRD-218982
        if(toParty != null){
            messageVO.setCarrierCode(toParty);
        }

		log.log(Log.FINE, "uld details vos------------------->", uldDetailsVOs);
		messageVO.setUldDetails(uldDetailsVOs);
		return messageVO;
	}

	/**
	 *
	 * @param transactionVO
	 * @return Collection
	 * @throws SystemException
	 */
    private Collection<ErrorVO> modifyULDLoanTransaction(TransactionVO transactionVO)
            throws SystemException {
        if (transactionVO.getUldTransactionDetailsVOs() != null
                && transactionVO.getUldTransactionDetailsVOs().size() > 0) {
            for (ULDTransactionDetailsVO uldTransactionDetailsVO : transactionVO
                    .getUldTransactionDetailsVOs()) {
                ULDTransaction uldTransaction = ULDTransaction.find(
                        uldTransactionDetailsVO.getCompanyCode(),
                        uldTransactionDetailsVO.getUldNumber(),
                        uldTransactionDetailsVO.getTransactionRefNumber());

                ULDAuditVO uldAuditVO = new ULDAuditVO(TransactionVO.MODULE,
                        TransactionVO.SUBMODULE, TransactionVO.ENTITY);
                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                        uldAuditVO, uldTransaction, false);
                log.log(Log.INFO, "inside modidy transaction*****",
                        uldTransactionDetailsVO);
                uldTransaction.setTransactionDate(uldTransactionDetailsVO
                        .getTransactionDate().toCalendar());
                if(Objects.nonNull(uldTransactionDetailsVO
                        .getLeaseEndDate())){
                	uldTransaction.setLeaseEndDate(uldTransactionDetailsVO
                			.getLeaseEndDate().toCalendar());
                	uldTransaction.setLeaseEndDateUtc(uldTransactionDetailsVO
                			.getLeaseEndDate().toGMTDate().toCalendar());
                }else{
                	uldTransaction.setLeaseEndDate(null);
                	uldTransaction.setLeaseEndDateUtc(null);
                }
                uldTransaction.setTransactionRemark(uldTransactionDetailsVO
                        .getTransactionRemark());

				// Added by Preet on 5 th Jan for newly added fields CRN and uld
				// condition in modify txn screen--starts
                uldTransaction.setControlReceiptNumber(uldTransactionDetailsVO
                        .getControlReceiptNumber());
                uldTransaction.setReturnCRN(uldTransactionDetailsVO
                        .getReturnCRN());
                uldTransaction.setUldConditionCode(uldTransactionDetailsVO
                        .getUldConditionCode());
				// Added by Preet on 5 th Jan ends
                uldTransaction.setAwbNumber(uldTransactionDetailsVO
                        .getAwbNumber());
                uldTransaction.setEmptyStatus(uldTransactionDetailsVO
                        .getEmptyStatus());
				// Added by a-3278 for CR QF1015 on 08Jul08 starts
				if (uldTransactionDetailsVO.getReturnDate() != null) {
                    uldTransaction.setReturnDate(uldTransactionDetailsVO
                            .getReturnDate().toCalendar());
                }
                uldTransaction.setReturnRemarks(uldTransactionDetailsVO
                        .getReturnRemark());
                uldTransaction.setReturnStationCode(uldTransactionDetailsVO
                        .getReturnStationCode());
                uldTransaction
                        .setTransactionStationCode(uldTransactionDetailsVO
                                .getTransactionStationCode());
                uldTransaction.setDestinationAirport(uldTransactionDetailsVO
                        .getTxStationCode());
                uldTransaction.setDemurrageAmount(uldTransactionDetailsVO
                        .getDemurrageAmount());
				uldTransaction.setWaived(uldTransactionDetailsVO.getWaived());
				uldTransaction.setTaxes(uldTransactionDetailsVO.getTaxes());
				uldTransaction.setTotal(uldTransactionDetailsVO.getTotal());
				// Added by a-3278 for CR QF1015 on 08Jul08 ends
				// added by a-3045 for CR QF1142 starts
				// For MUC Generation
				// Added the check for poolOwner aslo in MUC Generation on
				// 03Apr09
				/* 
                 * Modified by A-3415 for ICRD-114538
                 * MUC status will be set using setMucStatus method
				 * 
                 * if (("L").equals(uldTransactionDetailsVO.getTransactionType())) {
                    if (("ZZZ").equals(uldTransactionDetailsVO.getUldConditionCode())
                            || AGENT.equals(uldTransactionDetailsVO
                                    .getPartyType())
                            || OTHERS.equals(uldTransactionDetailsVO
                                    .getPartyType())
                            || "Y".equals(uldTransactionDetailsVO
                                    .getPoolOwnerFlag())) {
                        uldTransaction.setMucIsSent("N");
                    } else {
                        uldTransaction.setMucIsSent("Q");
                    }
                } else {
                    uldTransaction.setMucIsSent("N");
                }*/
				// added by a-3045 for CR QF1142 ends
				// added by A-2619 begins
                uldTransaction.setLastUpdateTime(uldTransactionDetailsVO
                        .getLastUpdateTime());
                uldTransaction.setLastUpdateUser(uldTransactionDetailsVO
                        .getLastUpdateUser());
				// added by A-2619 ends
				// Added by nisha for QF1018 CR on 14Jul08 starts
				// This is to check whether the txn is btw poolowners
				boolean isPoolOwner = false;
				ULDPoolOwnerFilterVO poolFilterVO = new ULDPoolOwnerFilterVO();
                poolFilterVO.setCompanyCode(uldTransactionDetailsVO
                        .getCompanyCode());
               
               /* poolFilterVO.setAirlineIdentifierOne(uldTransactionDetailsVO
                        .getFromPartyIdentifier());*/
                poolFilterVO.setAirlineIdentifierOne(getAirline1(uldTransactionDetailsVO));
                poolFilterVO.setAirlineIdentifierTwo(uldTransactionDetailsVO
                        .getToPartyIdentifier());
                poolFilterVO.setAirport(uldTransactionDetailsVO
                        .getTransactionStationCode());
                poolFilterVO.setOrigin(uldTransactionDetailsVO
                        .getTransactionStationCode());
                poolFilterVO.setDestination(uldTransactionDetailsVO
                        .getTxStationCode());
				HashMap<String, String> odpairs = new HashMap<String, String>();
				// Commented by a-3045 for bug 45275 on 18Apr09 starts,because
				// this od pair will not contain correct orgin-destination, it
				// will contain datas of the last ULD
				/*
				 * for (ULDTransactionDetailsVO vo : transactionVO
				 * .getUldTransactionDetailsVOs()) {
				 */
                odpairs.put(
                        uldTransactionDetailsVO.getTransactionStationCode(),
						uldTransactionDetailsVO.getTxStationCode());
				// }
				poolFilterVO.setOdpairs(odpairs);
				isPoolOwner = checkforPoolOwner(poolFilterVO);
				log.log(Log.INFO, "is a Pool Owner", isPoolOwner);
				if (isPoolOwner) {
					uldTransaction.setPoolOwnerFlag("Y");
				} else {
					uldTransaction.setPoolOwnerFlag("N");
				}
				// ends
				/*
				 * Change for MUC Stamping
				 */
                if("S".equals(uldTransaction.getMucIsSent())){
					uldTransaction.setMucIsSent("S");
                }else {
					setMucStatus(uldTransactionDetailsVO);
				  	uldTransaction.setMucIsSent(uldTransactionDetailsVO.getMucIataStatus());
			     }

                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                        uldAuditVO, uldTransaction, false);
                collectModifiedTransactionDetails(uldTransaction, uldAuditVO,
                        uldTransactionDetailsVO);
                /* Modified by A-3415 for ICRD-114538.
                 * Going forward only Loan transaction will be present
                 * if (TransactionVO.BORROW.equals(uldTransaction
                        .getTransactionType())) {
                    uldAuditVO.setActionCode(UPDATE_ULDBORROWTRANSACTION);
                } else if (TransactionVO.LOAN.equals(uldTransaction
                        .getTransactionType())) {
                    uldAuditVO.setActionCode(UPDATE_ULDLOANTRANSACTION);
                }*/
                uldAuditVO.setActionCode(UPDATE_ULDLOANTRANSACTION);
                uldAuditVO
                        .setAuditRemarks(transactionVO.getTransactionRemark());
                AuditUtils.performAudit(uldAuditVO);
            }
        }
        return null;
    }

    /**
     *
     * @param transactionVO
     * @return Collection
     * @throws SystemException
     */
    private Collection<ErrorVO> deleteULDLoanTransaction(TransactionVO transactionVO)
            throws SystemException {
		boolean canDeleted = false;
		boolean errorVar = true;
		int loanedReferenceNumber = 0;
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		if (transactionVO.getUldTransactionDetailsVOs() != null
				&& transactionVO.getUldTransactionDetailsVOs().size() > 0) {
            for (ULDTransactionDetailsVO uldTransactionDetailsVO : transactionVO
                    .getUldTransactionDetailsVOs()) {
				canDeleted = true;
				ULD uld = null;
                ULDTransaction uldTransaction = ULDTransaction.find(
                        uldTransactionDetailsVO.getCompanyCode(),
                        uldTransactionDetailsVO.getUldNumber(),
                        uldTransactionDetailsVO.getTransactionRefNumber());
				if (uldTransaction.getDemurrageAmount() != 0) {
					log.log(Log.FINE, "DEMURRAGE EXISTS CANNOT BE DELETED");
					// if check added by a-3278 for bug 33835 on 16Jan09
					if (errorVar) {
                        errors
                                .add(new ErrorVO(
                                        "uld.defaults.transaction.demmurageamount.exists",
                                        new Object[] { uldTransactionDetailsVO
                                                .getUldNumber() }));
						errorVar = false;
					}
					canDeleted = false;
				}
				if (canDeleted) {
					log.log(Log.FINE, "CALLING THE REMOVE METHOD");
					uldTransaction.remove();
					uld = checkULDExistsForTransaction(uldTransactionDetailsVO);
                    if (uld != null
                            && LOANED_TRANSACTION
                                    .equals(uldTransactionDetailsVO
                                            .getTransactionType())) {
						log.log(Log.INFO, "DELETE LOANED ULD UPADATE ULDMST");
						log.log(Log.FINE, "THE OPERATIONAL IDENTIFIER IS",
                                uldTransactionDetailsVO
                                        .getOperationalAirlineIdentifier());
                        int fromPartyAirlineIdentifier = uldTransactionDetailsVO
                                .getFromPartyIdentifier();

                        log.log(Log.INFO,
                                "%%%%%%%  fromPartyAirlineIdentifier",
                                fromPartyAirlineIdentifier);
                        uld
                                .setOperationalAirlineIdentifier(fromPartyAirlineIdentifier);
						uld.setLoanReferenceNumber(loanedReferenceNumber);
						log.log(Log.FINE, "THE REFERENCE NUMBER IS", uld.getLoanReferenceNumber());
                    }/* Modified by A-3415 for ICRD-114538.
                       Going forward only Loan Transaction will be present.
                    else if (uld != null
                            && BORROW_TRANSACTION
                                    .equals(uldTransactionDetailsVO
                                            .getTransactionType())) {
                        log.log(Log.INFO,
                                "DELETE BORROWED ULD DELETING ULD ULDMST");
                    //  uld.remove();
// As per ICRD-138808 instead of removing uld from system.just update the airlineIdentifier
                  uld.setOperationalAirlineIdentifier(uld.getOwnerAirlineIdentifier());
                  uld.setCurrentStation(uldTransactionDetailsVO.getReturnStationCode());
                    }*/
                    ULDAuditVO uldAuditVO = new ULDAuditVO(
                            TransactionVO.MODULE, TransactionVO.SUBMODULE,
                            TransactionVO.ENTITY);
                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldTransaction, false);

                    collectULDTransactionDetails(uldTransaction, uldAuditVO,
                            uldTransactionDetailsVO);

                    /*Modified by A-3415 for ICRD-114538.
                       Going forward only Loan Transaction will be present.
                     * if (TransactionVO.BORROW.equals(uldTransaction
                            .getTransactionType())) {
                        uldAuditVO.setActionCode(DELETE_ULDBORROWTRANSACTION);
                    } else if (TransactionVO.LOAN.equals(uldTransaction
                            .getTransactionType())) {
                        uldAuditVO.setActionCode(DELETE_ULDLOANTRANSACTION);
                    }*/
                    uldAuditVO.setActionCode(DELETE_ULDLOANTRANSACTION);
                    uldAuditVO.setAuditRemarks(transactionVO
                            .getTransactionRemark());

					AuditUtils.performAudit(uldAuditVO);
				}
			}
		}

		return errors;
	}

	/**
	 * This method retrieves the uld movement history
	 *
	 * @param uldMovementFilterVO
	 * @return Collection<ULDMovementDetailVO>
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 */
    public Map<String, Object> printExternalMovementsReport(
            ReportSpec reportSpec) throws ULDDefaultsBusinessException,
            RemoteException, SystemException {
        ULDMovementFilterVO uldMovementFilterVO = (ULDMovementFilterVO) reportSpec
                .getFilterValues().get(0);

		log.entering("INSIDE THE SERVICES EJB", "printExternalMovementsReport");
		ULDNumberVO uldNumberVO = findULDHistoryCounts(uldMovementFilterVO);
        Collection<ULDMovementDetailVO> uldMovementDetails = findULDMovementHistory(
                uldMovementFilterVO, uldMovementFilterVO.getPageNumber());
		int pageSize=Objects.nonNull(uldMovementDetails) ? uldMovementDetails.size() : 0;		
		log.log(Log.FINE, "Page Sizeis ------->>", pageSize);
		Collection<ULDMovementDetailVO> uldMovementDetailscol = new ArrayList<ULDMovementDetailVO>();
		for (int i = 0; i < pageSize; i++) {
			uldMovementDetailscol
                    .add((ULDMovementDetailVO) new ArrayList<ULDMovementDetailVO>(
                            uldMovementDetails).get(i));
        }
        //added by A-4443 for icrd-4490 starts
		if (uldMovementDetailscol == null || uldMovementDetailscol.size() <= 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
        //added by A-4443 for icrd-4490 ends
		reportSpec.addParameter(uldMovementFilterVO);
		reportSpec.addParameter(uldNumberVO);
		reportSpec.setData(uldMovementDetailscol);

		return ReportAgent.generateReport(reportSpec);
	}

	/**
	 * This method is used to save ULDs and Accessories participating in a
	 * Loan/Borrow Transaction
	 *
	 * 2.check whether the ULD is in operations
	 *
	 * @param transactionVO
	 * @return
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 */
    /*public Collection<ErrorVO> createULDTransaction(TransactionVO transactionVO)
            throws SystemException, ULDDefaultsBusinessException,
            CurrencyConversionException, DimensionConversionException,
            MessageConfigException {
        log.entering("INSIDE THE CONTROLLER", "INSIDE THE CONTROLLER");
        log.entering("INSIDE THE CONTROLLER", "INSIDE THE CONTROLLER");
        Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
        ULDTransactionDetailsVO uldTransactionDetailsVO = null;
        boolean isValidULDFormat = false;
        boolean isValid = false;
        boolean canTransactionPersisted = false;
        boolean isDummyMovement = false;
        String dummyUldNumber = null;
        String dummyCurrentStation = null;
        StringBuilder uldNumber = null;
        StringBuilder currentStation = null;

        if (transactionVO != null
                && transactionVO.getUldTransactionDetailsVOs() != null) {

             * added by a-3278 for bug 34185 on 27Jan09 To remove the missed
             * ULDs from discrepency table if transaction exists for that

            Collection<String> uldNos = new ArrayList<String>();
            for (ULDTransactionDetailsVO transactionDetailsVo : transactionVO
                    .getUldTransactionDetailsVOs()) {
                uldNos.add(transactionDetailsVo.getUldNumber());
            }
            Collection<ULDDiscrepancy> uldDiscrepancies = ULDDiscrepancy
                    .findULDDiscrepancies(transactionVO.getCompanyCode(),
                            uldNos);
            if (uldDiscrepancies != null && uldDiscrepancies.size() > 0) {
                for (ULDDiscrepancy uldDiscrepancy : uldDiscrepancies) {
                    uldDiscrepancy.setCloseStatus("Y");
                }
            }
            // a-3278 ends
            // Added by A-2052 for the bug 103386 starts
            StringBuilder uldsAlreadyExistsStrBlder = null;
            String uldsAlreadyExists = null;
            int index = 0;
            // Added by A-2052 for the bug 103386 ends

            for (ULDTransactionDetailsVO transactionDetailsVo : transactionVO
                    .getUldTransactionDetailsVOs()) {
                isValid = true;
                canTransactionPersisted = true;
                ULD uld = null;

                isValidULDFormat = checkvalidateULDFormat(transactionDetailsVo
                        .getCompanyCode(), transactionDetailsVo.getUldNumber());
                log.log(Log.FINE, "THE ULD FORMAT IS ULD FORMAT IS ",
                        isValidULDFormat);
                if (!isValidULDFormat) {
                    log
                            .log(Log.INFO,
                                    "INVALID ULD FORMAT EXCEPTION THROWN ERRRVO CREATED");
                    errors
                            .add(new ErrorVO(
                                    InvalidULDFormatException.INVALID_ULD_FORMAT,
                                    new Object[] { transactionDetailsVo
                                            .getUldNumber() }));
                }

                if (isValidULDFormat) {
                    uld = checkULDExistsForTransaction(transactionDetailsVo);
                    log.log(Log.FINE, "THE VALUE FOR ULDEXISTS ULDEXISTS IS",
                            uld);
                    if (uld == null) {

                         * Added by a-3278 for the bug 101305 on 07Oct10 If a
                         * loan transaction happens between two OAL ulds and if
                         * the uld to be loaned does not exist in the system,
                         * the loan transaction happens and the uld will get
                         * added in to the system

                        //Added as part of bug 107203 bu A-3767 on 04Mar11
                        uldNumber=new StringBuilder(transactionDetailsVo.getUldNumber());
                        String ownerCode="";
                        if(transactionDetailsVo.getFromPartyCode().length()==2){
                            ownerCode=uldNumber.substring(uldNumber.length() - 2);
                        }
                        else{
                            ownerCode=uldNumber.substring(uldNumber.length() - 3);
                        }
                        if (transactionDetailsVo.getTransactionType().equals(
                                LOANED_TRANSACTION)
                                && !(ownerCode.equals(transactionDetailsVo
                                        .getFromPartyCode()))) {
                            createOALLoanTransaction(transactionDetailsVo);
                        }// For bug 101305 ends
                        else {
                            log.log(Log.INFO, "ULD IS NULL ULD IS NULL");
                            if (transactionDetailsVo.getTransactionType()
                                    .equals(LOANED_TRANSACTION)) {
                                errors.add(new ErrorVO(
                                        "uld.defaults.uld.doesnot.exists",
                                        new Object[] { transactionDetailsVo
                                                .getUldNumber() }));
                            }
                            canTransactionPersisted = transactionDetailsVo
                                    .getTransactionType().equals(
                                            LOANED_TRANSACTION) ? false : true;
                            log.log(Log.FINE, "CAN TRANSCTION PERSISTED ",
                                    canTransactionPersisted);
                            isValid = false;
                        }
                    }
                    // Added By Ashraf Binu

					 * Checks whether the uld is operational or not

                    if (uld != null
                            && transactionDetailsVo.getTransactionType()
                                    .equals(LOANED_TRANSACTION)) {
                        // QF1507 loaded check added
                        // modified by a-3278 for bug 101307 on 07Oct10;new
                        // condition added
                        if (("N".equals(uld.getOverallStatus()) && "Y"
                                .equals(transactionVO.getEmptyStatus()))
                                || ("N".equals(uld.getOverallStatus())
                                        && "N".equals(transactionVO
                                                .getEmptyStatus()) && !(AGENT
                                        .equals(transactionDetailsVo
                                                .getPartyType())))) {
                            log.log(Log.INFO, "THe ULD is NONOPERATIONAL",
                                    transactionDetailsVo.getUldNumber());
                            errors.add(new ErrorVO(
                                    "uld.defaults.uld.nonoperational",
                                    new Object[] { transactionDetailsVo
                                            .getUldNumber() }));
                            canTransactionPersisted = false;
                        }
                    }
                    if (uld != null
                            && !(transactionDetailsVo.getTransactionType()
                                    .equals(LOANED_TRANSACTION))) {
                        log
                                .log(Log.INFO,
                                        "CHECK WHETHER THE ULD TRYING TO BE BORROWED HAS OPRIDR AND OWNER SAME");
                        if (uld.getOperationalAirlineIdentifier() == transactionDetailsVo
                                .getToPartyIdentifier()
                                || (uld.getLoanReferenceNumber() != 0 && uld
                                        .getBorrowReferenceNumber() == 0)) {
                            log
                                    .log(Log.INFO,
                                            "CHEWCK1 CHEWCK1 CHEWCK1 CHEWCK1 CHEWCK1 CHEWCK1 ");

                            // Added by A-2052 for the bug 103386 starts
                            errors.add(new ErrorVO(
                                    "uld.defaults.sameuldexixts.cannotborrow",
                                    new Object[] { transactionDetailsVo
                                            .getUldNumber() }));

                             * index++; log.log(Log.INFO,
                             * "ErrorCode------------>E3-ULD not in system");
							 * if(index == 1){ uldsAlreadyExistsStrBlder = new
                             * StringBuilder().append("Loan/Borrow Transaction
                             * already exists for
                             * ").append(transactionDetailsVo.getUldNumber());
                             * }else{ uldsAlreadyExistsStrBlder =
                             * uldsAlreadyExistsStrBlder.append(",").append(transactionDetailsVo.getUldNumber()); }

                            // Added by A-2052 for the bug 103386 ends

                        canTransactionPersisted = false;
                        isValid = false;
                    }

                    }

                     * Check whether the LoanedULD IS Already Loaned check
                     * wether the Borroed ULD is AlreadyBorrowed

                    if (isValid) {
                        isValid = checkLoanedULDAlreadyLoaned(
                                transactionDetailsVo.getCompanyCode(),
                                transactionDetailsVo.getUldNumber(),
                                transactionDetailsVo.getTransactionType());

                        if (isValid) {
                            log
                                    .entering(
                                            "LOANED/BORROWED ULD IS ALREADY LOANED/BORROWED",
                                            "ERRORS CREATED ");
                            if (transactionDetailsVo.getTransactionType()
                                    .equals(LOANED_TRANSACTION)) {
                                log
                                        .log(Log.FINE,
                                                "LOAN  ULD IS ALREDAY LOANED");
                                errors
                                        .add(new ErrorVO(
                                                "uld.defaults.transaction.loaneduld.alreadyloaned",
                                                new Object[] { transactionDetailsVo
                                                        .getUldNumber() }));
                            } else {
                                log.log(Log.FINE,
                                        "BORROW ULD IS ALREDAY LOANED");
                                errors
                                        .add(new ErrorVO(
                                                "uld.defaults.transaction.borroweduld.alreadyborrowed",
                                                new Object[] { transactionDetailsVo
                                                        .getUldNumber() }));
                            }
                            canTransactionPersisted = false;
                        }

                        *//**
                         * checks whether we are trying to loan an Uld which is
                         * Already Borrowed checks whether we are trying to
                         * borrow a ULD which we have Already Loaned to the same
                         * party; Actually if these alternatives it is a RETURN
                         * TRANSACTION
                         *//*


                         * Here when loan Transaction is being performed ,
                         * partyCode is set as toPartyCode and if it is Borrow
                         * it is partyCode is fromPartyCode.

                        String partyCode = null;
                        if (LOANED_TRANSACTION.equals(transactionDetailsVo
                                .getTransactionType())) {
                            partyCode = transactionDetailsVo.getToPartyCode();
                        } else {
                            partyCode = transactionDetailsVo.getFromPartyCode();
                        }
                        // ***changed
                        if (!isValid) {
                            isValid = checkBorrowedULDLoanedToSameParty(
                                    transactionDetailsVo.getCompanyCode(),
                                    transactionDetailsVo.getUldNumber(),
                                    transactionDetailsVo.getPartyType(),

                                    // transactionDetailsVo.getPartyCode(),
                                    partyCode, transactionDetailsVo
                                            .getTransactionType());

                            if (isValid) {
                                log
                                        .log(
                                                Log.INFO,
                                                "CANNOT  LOAN/BORROW A ULD WHICH IS ACTUALLY BORROW LOANED FROM THE SAME PARTY  ERRORS CREATED ");
                                if (transactionDetailsVo.getTransactionType()
                                        .equals(LOANED_TRANSACTION)) {
                                    errors.add(new ErrorVO(
                                            "uld.defaults.loanuld.borrowed",
                                            new Object[] { transactionDetailsVo
                                                    .getUldNumber() }));
                                } else {
                                    errors.add(new ErrorVO(
                                            "uld.defaults.borrowuld.loaned",
                                            new Object[] { transactionDetailsVo
                                                    .getUldNumber() }));
                                }
                                canTransactionPersisted = false;

                            }
                        }
                    }
                    // Added by nisha for QF1018 CR on 14Jul08 starts
                    // This is to check whether the txn is btw poolowners
                    boolean isPoolOwner = false;
                    ULDPoolOwnerFilterVO poolFilterVO = new ULDPoolOwnerFilterVO();
                    poolFilterVO.setCompanyCode(transactionDetailsVo
                            .getCompanyCode());
                    poolFilterVO.setAirlineIdentifierOne(transactionDetailsVo
                            .getFromPartyIdentifier());
                    poolFilterVO.setAirlineIdentifierTwo(transactionDetailsVo
                            .getToPartyIdentifier());
                    poolFilterVO.setAirport(transactionDetailsVo
                            .getTransactionStationCode());
                    poolFilterVO.setOrigin(transactionDetailsVo
                            .getTransactionStationCode());
                    poolFilterVO.setDestination(transactionDetailsVo
                            .getTxStationCode());
                    HashMap<String, String> odpairs = new HashMap<String, String>();
                    // Commented by a-3045 for bug 45275 on 18Apr09
                    // starts,because this od pair will not contain correct
                    // orgin-destination, it will contain datas of the last ULD

                     * for (ULDTransactionDetailsVO vo : transactionVO
                     * .getUldTransactionDetailsVOs()) {

                    odpairs.put(transactionDetailsVo
                            .getTransactionStationCode(), transactionDetailsVo
                            .getTxStationCode());
                    // }
                    poolFilterVO.setOdpairs(odpairs);
                    isPoolOwner = checkforPoolOwner(poolFilterVO);
                    log.log(Log.INFO, "is a Pool Owner", isPoolOwner);
                    if (isPoolOwner) {
                        transactionDetailsVo.setPoolOwnerFlag("Y");
                    } else {
                        transactionDetailsVo.setPoolOwnerFlag("N");
                    }
                    // ends

                     * Try for inserton in case of the Loan Transaction

                    if (canTransactionPersisted
                            && transactionDetailsVo.getTransactionType()
                                    .equals(LOANED_TRANSACTION)) {
                        if (uld != null) {
                            log.log(Log.FINE, "THE ULD CAN BE LOANED");
                            ULDTransaction transaction = new ULDTransaction(
                                    transactionDetailsVo);
                            errors
                                    .add(new ErrorVO(
                                            ULD_TRANSACTION_REF_NUMBER,
                                            new Object[] { new StringBuilder()
                                                    .append(
                                                            transactionDetailsVo
                                                                    .getUldNumber())
                                                    .append("~")
                                                    .append(
                                                            transactionDetailsVo
                                                                    .getTransactionRefNumber())
                                                    .toString() }));
                            log
                                    .log(
                                            Log.INFO,
                                            "UPDATE METHOD CALLED FOR THE ULDMST ,TRANSACTION  LOANED TRANSACTION IS ABOUT TO BE COMPLETED");
                            log
                                    .log(
                                            Log.FINE,
                                            "transaction.getUldTransactionPK().getTransactionRefNumber()",
                                            transaction.getUldTransactionPK()
                                                    .getTransactionRefNumber());
                            // Added by Preet on 19th Apr for ULD 350--starts
                            // To save the Agent Code to whom ULD is released to
                            if (ULDTransactionDetailsVO.AGENT
                                    .equals(transactionDetailsVo.getPartyType())
                                    || ULDTransactionDetailsVO.OTHERS
                                            .equals(transactionDetailsVo
                                                    .getPartyType())) {
                                uld.setReleasedTo(transactionDetailsVo
                                        .getToPartyCode());
                                // QF1501
                                uld.setAgentCode(transactionDetailsVo
                                        .getToPartyCode());
                                uld.setAgentStation(transactionDetailsVo
                                        .getTransactionStationCode());
                            }
                            // Added by Preet on 19th Apr for ULD 350 --ends

                            uld.setLoanReferenceNumber(transaction
                                    .getUldTransactionPK()
                                    .getTransactionRefNumber());

                            *//** Not needed for Transaction to an Agent *//*

                            if (PARTYTYPE_AIRLINE.equals(transactionDetailsVo
                                    .getPartyType())) {
                                uld
                                        .setOperationalAirlineIdentifier(transactionDetailsVo
                                                .getOperationalAirlineIdentifier());
                            }
                            // Added as CR
                            // added by nisha for bugix on 27Jun08
                            if (transactionDetailsVo.getUldNature() != null
                                    && transactionDetailsVo.getUldNature()
                                            .trim().length() > 0) {
                                uld.setUldNature(transactionDetailsVo
                                        .getUldNature());
                            } else {
                                uld.setUldNature("GEN");
                            }
                            // ends
                            uld.setControlReceiptNumber(transactionDetailsVo
                                    .getControlReceiptNumber());
                            // upto here
                            uld.setLastUpdateTime(transactionDetailsVo
                                    .getUldLastUpdateTime());
                            LogonAttributes logonAttributes = ContextUtils
                            .getSecurityContext()
                            .getLogonAttributesVO();
                            uld.setLastUpdateUser(logonAttributes
                                    .getUserId());
                            // Audit
                            ULDAuditVO uldAuditVO = new ULDAuditVO(
                                    TransactionVO.MODULE,
                                    TransactionVO.SUBMODULE,
                                    TransactionVO.ENTITY);
                            uldAuditVO = (ULDAuditVO) AuditUtils
                                    .populateAuditDetails(uldAuditVO,
                                            transaction, true);
                            collectULDTransactionDetails(transaction,
                                    uldAuditVO, transactionDetailsVo);
                            uldAuditVO.setActionCode(CREATE_ULDLOANTRANSACTION);

                            uldAuditVO.setAuditRemarks(transactionDetailsVo
                                    .getTransactionRemark());
                            AuditUtils.performAudit(uldAuditVO);
                            log.log(Log.FINE,
                                    "\n\n\n#### Audit Performed ###\n\n\n");
                            // Audit end
                        }
                    }

                     * Try for insertion in case of the BorrowTransaction



                     * Starts by Nisha on 12/06/08 Purpose:Borrow transactions
                     * needs be recorded even if the uld is in system

                    else if (uld == null
                            && canTransactionPersisted
                            && transactionDetailsVo.getTransactionType()
                                    .equals(BORROW_TRANSACTION)) {
                        createBorrowTransactions(transactionDetailsVo);
                    } else if (uld != null
                            && canTransactionPersisted
                            && transactionDetailsVo.getTransactionType()
                                    .equals(BORROW_TRANSACTION)) {
                        log.log(Log.INFO,
                                "%%%%%%%%%%%%%%% Do Borrow Transaction ");
                        ULDTransaction transaction = new ULDTransaction(
                                transactionDetailsVo);
                        int borrowReferenceNumber = transaction
                                .getUldTransactionPK()
                                .getTransactionRefNumber();
                        uld.setBorrowReferenceNumber(borrowReferenceNumber);
                        uld.setLastUpdateTime(transactionDetailsVo
                                .getUldLastUpdateTime());
                        uld.setLastUpdateUser(transactionDetailsVo
                                .getLastUpdateUser());
                        // added by nisha for bugdix on 27Jun08 starts
                        if (transactionDetailsVo.getUldNature() != null
                                && transactionDetailsVo.getUldNature().trim()
                                        .length() > 0) {
                            uld.setUldNature(transactionDetailsVo
                                    .getUldNature());
                        } else {
                            uld.setUldNature("GEN");
                        }
                        // ends
                        uld.setControlReceiptNumber(transactionDetailsVo
                                .getControlReceiptNumber());
                        uld
                                .setOperationalAirlineIdentifier(transactionDetailsVo
                                        .getOperationalAirlineIdentifier());
                    }

					 * Ends by Nisha



                     * CHECK WHETHER THE ULD CURRENTSTATION IS DIFFERENT FROM
                     * THE LOANED STATION

                    // if check by a-3278 added for bug 38605 on 26Feb09
                    if (uld != null
                            && new LocalDate(uld.getCurrentStation(),
                                    Location.ARP, uld.getLastMovementDate(),
                                    true).toGMTDate().before(
                                    transactionDetailsVo.getTransactionDate()
                                            .toGMTDate())) {
                        if (uld != null
                                && canTransactionPersisted
                                && (!transactionDetailsVo
                                        .getTransactionStationCode().equals(
                                                uld.getCurrentStation()))) {
                            log
                                    .log(Log.INFO,
                                            "ERRORS CREATED WHEN THE ULD CURRENTSTATION DIFFERENT FROM LOANED STATION");

                             * isDummyMovement = true; if (uldNumber == null) {
                             * uldNumber = new StringBuilder(uld.getUldPK()
                             * .getUldNumber()).append(","); } else {
                             * uldNumber.append(uld.getUldPK().getUldNumber())
                             * .append(","); } if (currentStation == null) {
                             * currentStation = new StringBuilder(uld
                             * .getCurrentStation()).append(","); } else {
                             * currentStation.append(uld.getCurrentStation())
							 * .append(","); }

                            // Added by Preet on 11Sep08 starts
                            // If the Txn Airport and ULD s Current Airport are
                            // Diff , then Dummy Mvt is required
                            // Construct MovementVO
                            ULDMovementVO uldMovementVO = new ULDMovementVO();
                            Collection<ULDMovementVO> uldMovementVOs = new ArrayList<ULDMovementVO>();
                            Collection<String> uldNOs = new ArrayList<String>();
                            LogonAttributes logonAttributes = ContextUtils
                                    .getSecurityContext()
                                    .getLogonAttributesVO();
                            uldMovementVO.setPointOfLading(uld
                                    .getCurrentStation());
                            uldMovementVO
                                    .setPointOfUnLading(transactionDetailsVo
                                            .getTransactionStationCode());
                            uldMovementVO
                                    .setCurrentStation(transactionDetailsVo
                                            .getTransactionStationCode());
                            LocalDate mvtdate = new LocalDate(uldMovementVO
                                    .getPointOfUnLading(), Location.ARP, true);
                            uldMovementVO.setLastUpdatedTime(mvtdate);
                            uldMovementVO.setCompanyCode(transactionDetailsVo
                                    .getCompanyCode());
                            uldMovementVO.setLastUpdatedUser(logonAttributes
                                    .getUserId());
                            uldMovementVO.setUpdateCurrentStation(true);
                            uldMovementVO.setDummyMovement(true);
                            // QF1506
                            uldMovementVO.setRemark(transactionDetailsVo
                                    .getAwbNumber());
                            uldMovementVOs.add(uldMovementVO);
                            uldNOs.add(transactionDetailsVo.getUldNumber());
                            log.log(Log.INFO, "uldNOs-----------", uldNOs);
                            log.log(Log.INFO, "uldMovementVOs-----------",
                                    uldMovementVOs);
                            try {
                                saveULDMovement(uldNOs, uldMovementVOs);
                            } catch (ULDDoesNotExistsException e) {
                                log.log(Log.INFO, "WILL NOT ENTER HERE");
                            }
                            // Added by Preet on 11Sep08 ends

                        }
                    }

                    // Added by nisha for QF1006 starts
                    if (uld != null
                            && canTransactionPersisted
                            && LOANED_TRANSACTION.equals(transactionDetailsVo
                                    .getTransactionType())
                            && ULDTransactionDetailsVO.AGENT
                                    .equals(transactionDetailsVo.getPartyType())) {
                        uld
                                .setFacilityType(ULDAirportLocationVO.FACLITY_AGENTLOC);
                        log.log(Log.INFO,
                                "Internal movement shud be marked---->>>>",
                                transactionDetailsVo);
                        ULDIntMvtVO uldIntMvtVO = new ULDIntMvtVO();
                        ULDIntMvtDetailVO uldIntMvtDetailVO = new ULDIntMvtDetailVO();
                        Collection<ULDIntMvtDetailVO> uldIntMvtDetailVOs = new ArrayList<ULDIntMvtDetailVO>();
                        Collection<ULDIntMvtVO> uldIntMvts = new ArrayList<ULDIntMvtVO>();

                        uldIntMvtVO.setAirport(transactionDetailsVo
                                .getTransactionStationCode());
                        uldIntMvtVO.setCompanyCode(transactionDetailsVo
                                .getCompanyCode());
                        uldIntMvtVO.setUldNumber(transactionDetailsVo
                                .getUldNumber());
                        uldIntMvtVO.setLastUpdatedUser(transactionDetailsVo
                                .getLastUpdateUser());

                        uldIntMvtDetailVO.setAirport(transactionDetailsVo
                                .getTransactionStationCode());
                        uldIntMvtDetailVO.setCompanyCode(transactionDetailsVo
                                .getCompanyCode());

                        uldIntMvtDetailVO.setAgentCode(transactionDetailsVo
                                .getToPartyCode());
                        uldIntMvtDetailVO.setAgentName(transactionDetailsVo
                                .getToPartyName());

                        uldIntMvtDetailVO.setFromLocation(uld.getLocation());
                        // Added by Preet on 27Aug08 --starts
                        // When ULD loaned to agent, CNT column in ULDINTMVTDTL
                        // will be set to AGT
                        // RTNSTA will be set to 'N'
                        uldIntMvtDetailVO
                                .setContent(ULDAirportLocationVO.FACLITY_AGENTLOC);
                        uldIntMvtDetailVO
                                .setReturnStatus(ULDAirportLocationVO.FLAG_NO);
                        // Added by Preet on 27Aug08 --ends
                        ULDAirportLocationVO uLDAirportLocationVO = null;
                        uLDAirportLocationVO = ULDAirportLocation
                                .findLocationforFacility(transactionDetailsVo
                                        .getCompanyCode(), transactionDetailsVo
                                        .getTransactionStationCode(),
                                        FACILITY_AGENT);
                        if (uLDAirportLocationVO != null) {
                            uldIntMvtDetailVO
                                    .setToLocation(uLDAirportLocationVO
                                            .getFacilityCode());
                            uld.setLocation(uLDAirportLocationVO
                                    .getFacilityCode());
                        } else {
                            uldIntMvtDetailVO.setToLocation(BLANK);
                        }
                        // QF1506
                        uldIntMvtDetailVO.setRemark(transactionDetailsVo
                                .getAwbNumber());
                        uldIntMvtDetailVO
                                .setMvtType(ULDIntMvtDetailVO.ACTUAL_MOVEMENT);
                        uldIntMvtDetailVO
                                .setMvtDate(new LocalDate(transactionDetailsVo
                                        .getTransactionDate(), true));
                        //Added as part of ICRD-3995 by A-3767 on 12Sep11
                        uldIntMvtDetailVO.setDisplayMvtDate(transactionDetailsVo
                                        .getTransactionDate().toDisplayFormat(false));
                        uldIntMvtDetailVO.setUldNumber(transactionDetailsVo
                                .getUldNumber());

                        // If Facility Type is Ware house --then ULD need to
                        // checked Out and Checked In

                        Collection<StorageUnitVO> storageUnitVOs = new ArrayList<StorageUnitVO>();
                        Collection<ULDCheckinVO> checkInVos = new ArrayList<ULDCheckinVO>();
                        boolean callWhsFlag = false;
                        boolean isWhsDelete = false;
                        // If ULD is currenly in Warehouse --delete the storage
                        // details
                        if (WAREHOUSE.equals(uld.getFacilityType())) {
                            isWhsDelete = true;
                            StorageUnitVO storageUnitVO = new StorageUnitVO();
                            storageUnitVO.setAirportCode(uld
                                    .getCurrentStation());
                            storageUnitVO.setCompanyCode(transactionDetailsVo
                                    .getCompanyCode());
                            storageUnitVO.setWarehouseCode(uld.getLocation());
                            storageUnitVO
                                    .setStorageUnitCode(transactionDetailsVo
                                            .getUldNumber());
                            storageUnitVOs.add(storageUnitVO);
                        }
                        log.log(Log.INFO, "storageUnitVOs-------->",
                                storageUnitVOs);
                        // Check out the ULD from warehouse
                        if (isWhsDelete) {
                            WarehouseProxy warehouseProxy = new WarehouseProxy();
                            try {
                                warehouseProxy
                                        .deleteStorageUnitDetails(storageUnitVOs);
                            } catch (ProxyException proxyException) {
                                log.log(Log.INFO,
                                        "-------proxyException-------",
                                        proxyException.getErrors());
                                log.log(Log.INFO,
                                        "-------proxyException-------",
                                        proxyException.getMessage());
                            }
                        }

                        if (WAREHOUSE.equals(uld.getFacilityType())) {
                            callWhsFlag = true;
                            ULDCheckinVO uLDCheckinVO = new ULDCheckinVO();
                            uLDCheckinVO.setCompanyCode(transactionDetailsVo
                                    .getCompanyCode());
                            uLDCheckinVO
                                    .setStorageUnitCode(transactionDetailsVo
                                            .getUldNumber());
                            uLDCheckinVO.setAirportCode(transactionDetailsVo
                                    .getTransactionStationCode());
                            uLDCheckinVO.setWarehouseCode(transactionDetailsVo
                                    .getLocation());
                            checkInVos.add(uLDCheckinVO);
                        }
                        log.log(Log.INFO, "checkInVos-------->", checkInVos);
                        if (callWhsFlag) {
                            try {
                                WarehouseProxy warehouseProxy = new WarehouseProxy();
                                warehouseProxy.saveAndCheckinULD(checkInVos);
                            } catch (ProxyException proxyException) {
                                log.log(Log.INFO,
                                        "-------proxyException-------",
                                        proxyException.getErrors());
                                log.log(Log.INFO,
                                        "-------proxyException-------",
                                        proxyException.getMessage());
                            }
                        }

                        log.log(Log.INFO,
                                "-------uldIntMvtDetailVO--*******-----",
                                uldIntMvtDetailVO);
                        uldIntMvtDetailVOs.add(uldIntMvtDetailVO);
                        uldIntMvtVO.setULDIntMvtDetailVOs(uldIntMvtDetailVOs);
                        uldIntMvts.add(uldIntMvtVO);
                        saveULDIntMvts(uldIntMvts);
                    }
                    // ends
                }
            }

            // Added by A-2052 for the bug 103386 starts
            // if(uldsAlreadyExistsStrBlder != null){
            // uldsAlreadyExists =uldsAlreadyExistsStrBlder.append(" - Open
            // transaction exists").toString();
            // throw new MessageConfigException(
            // MessageConfigException.ULD_NOT_IN_STOCK,new Object[] {
            // uldsAlreadyExists });
            // }
            // Added by A-2052 for the bug 103386 ends
        }


         * if (isDummyMovement) { log.log(Log.INFO, "ERRORS CREATED FOR THE
         * DUMMYMOVEMENT"); if (uldNumber != null && uldNumber.length() > 0) {
         * uldNumber = uldNumber.deleteCharAt(uldNumber.length() - 1);
         * dummyUldNumber = uldNumber.toString(); } if (currentStation != null &&
         * currentStation.length() > 0) { currentStation =
         * currentStation.deleteCharAt(currentStation .length() - 1);
         * dummyCurrentStation = currentStation.toString(); } }


        if (transactionVO != null
                && transactionVO.getAccessoryTransactionVOs() != null
                && transactionVO.getAccessoryTransactionVOs().size() > 0) {
            log
                    .log(Log.INFO,
                            "TRYING TO EXECUTE THE  LOAN/BORROW  ACCESSORY TRANSACTIONS");
            log.log(Log.FINE, "THE SIZE BEFORE ACCESSORIES", errors.size());
            errors = maintainAccessoriesStock(transactionVO
                    .getAccessoryTransactionVOs(), errors);
        }
        log.log(Log.FINE, "THE SIZE OF THE ERRORS FINALLY IS FOUND TO BE",
                errors.size());
        Collection<ErrorVO> errorsTobeThrown = new ArrayList<ErrorVO>();
        if (errors != null && errors.size() > 0) {
            for (ErrorVO errorVo : errors) {
                if (!ULD_TRANSACTION_REF_NUMBER.equals(errorVo.getErrorCode())) {
                    errorsTobeThrown.add(errorVo);
                    log.log(Log.INFO,
                            "ULD DEFAULTS BUSINESS EXCEPTION TO BE THROWN ",
                            errorsTobeThrown);
                }
            }
        }

         * Here all the exceptions , due to which persistence of loan
         * transaction should not happen , are thrown

        if (errorsTobeThrown.size() > 0) {
            ULDDefaultsBusinessException ex = new ULDDefaultsBusinessException();
            ex.addErrors(errorsTobeThrown);
            throw ex;
        }
        log.log(Log.FINE, "THE BOOLEAN DUMMY MOVEMENT IS ", isDummyMovement);
        log.log(Log.FINE, "THE DUMMY CURRENT STATION IS", dummyCurrentStation);
        log.log(Log.FINE, "THE DUMMY ULD NUMBER IS ", dummyUldNumber);

         * if (isDummyMovement) { log.log(Log.INFO, "DUMMY MOVEMENT EXISTS");
         * errors.add(new ErrorVO("uld.defaults.uldcurrentstation.different",
         * new Object[] { dummyUldNumber, dummyCurrentStation })); }

        // Collection<String> systemparameterCodes = new ArrayList<String>();
        // systemparameterCodes.add(UCR_REPORT_NEEDS_TOBE_PRINTED);
        // try {
        // Map reportMap = new SharedDefaultsProxy()
        // .findSystemParameterByCodes(systemparameterCodes);
        // if ("Y".equals(reportMap.get(UCR_REPORT_NEEDS_TOBE_PRINTED))) {

         * if(transactionVO.isToBePrinted()){ {
         * transactionVO.setToBePrinted(true); } log.log(Log.INFO, "reached Here
         * A"); if (transactionVO != null &&
         * transactionVO.getUldTransactionDetailsVOs() != null) {
         * log.log(Log.INFO, "reached Here D"); if
         * (transactionVO.isToBePrinted() &&
         * LOANED_TRANSACTION.equals(transactionVO
         * .getUldTransactionDetailsVOs().iterator()
         * .next().getTransactionType())) { log.log(Log.INFO, "reached Here B");
         *
         * for (ULDTransactionDetailsVO transactionDetailsVO : transactionVO
         * .getUldTransactionDetailsVOs()) {
         *
         * log.log(Log.INFO, "reached Here C");
         *
         * String uldNo = transactionDetailsVO.getUldNumber(); String uldType =
         * transactionDetailsVO.getUldType();
         *
         * int length = uldNo.length(); String twoalphacode =
         * uldNo.substring(length - 2); String threealphacode =
         * uldNo.substring(length - 3);
         *
         * String ownerCode = null; String serNumber = null;
         *
         * String arldtl = new ULDController().findOwnerCode(
         * transactionDetailsVO.getCompanyCode(), twoalphacode, threealphacode);
         * String arldtlArray[] = arldtl.split("~"); if
         * ("2".equals(arldtlArray[0])) { ownerCode = twoalphacode; } else {
         * ownerCode = threealphacode; }
         *
         * serNumber = uldNo.substring(3, length -
         * (Integer.valueOf(arldtlArray[0])));
         * transactionDetailsVO.setUldSerialNumber(serNumber);
         * transactionDetailsVO.setUldOwnerCode(ownerCode);
         * transactionDetailsVO.setUldType(uldType); // Added by A-2412 on 2 nd
         * Nov For UCR print String trnDate = null; String trnTime = null;
         * String time=null;
         *
         * if (transactionDetailsVO.getTransactionDate() != null) { LocalDate ld =
         * new LocalDate(transactionDetailsVO .getTransactionDate(), true);
         *
         * trnDate = ld.toStringFormat("ddMMMyy"); trnDate =
         * trnDate.substring(0, 7); trnTime = ld.toDisplayTimeOnlyFormat();
         *
         * log.log(Log.INFO, " Date trnDate in String(only date) " + trnDate);
         * log.log(Log.INFO, " Date trnTime in String " + trnTime); if (trnTime !=
         * null) { String timearr[] = trnTime.split(":"); time = new
         * StringBuilder() .append(timearr[0]).append(timearr[1]) .toString(); }
         * transactionDetailsVO .setStrTxnDate(new StringBuffer(trnDate)
         * .append("-").append(time) .toString()); }
         *
         *
         * //Added by A-2412 on 2 nd Nov For UCR print ends }
         *
         * log.log(Log.INFO, "GOING TO UCR SERVER PRINT" +
         * transactionVO.getUldTransactionDetailsVOs()); ReportSpec reportSpec =
         * new ReportSpec(); // reportSpec.addExtraInfo(notocDetailsVO);
         * //reportSpec.setData(transactionVO.getUldTransactionDetailsVOs());
         * Added by A-2412 on 25th Oct for UCR printing // sorting based on CRN
         * number
         *
         * List<ULDTransactionDetailsVO> uldDetailsVo = new ArrayList<ULDTransactionDetailsVO>(transactionVO.getUldTransactionDetailsVOs());
         * for(ULDTransactionDetailsVO vo:uldDetailsVo){ log.log(Log.FINE,
         * "befor sorting----"+vo.getControlReceiptNumber()); }
         * Collections.sort(uldDetailsVo, new CRNComparator());
         * for(ULDTransactionDetailsVO vo:uldDetailsVo){ log.log(Log.FINE,
         * "after sorting----"+vo.getControlReceiptNumber()); }
         * reportSpec.setData(uldDetailsVo); Addition by A-2412 on 25th Oct for
         * UCR printing ends if
         * (transactionVO.getUldTransactionDetailsVOs().size() > 1) { reportSpec
         * .setReportId(UCR_REPORT_ID_FOR_MULTIPLE_ULD); } else { reportSpec
         * .setReportId(UCR_REPORT_ID_FOR_SINGLE_ULD); } log.log(Log.INFO,
         * "*******************reportSpec*********************************" +
         * reportSpec); ReportAgent.generateReport(reportSpec);
         * log.log(Log.INFO, "^^^^^^^^^^^^^^^66Generated Report^^^^^^^^^^^"); } } } }
         * catch (ProxyException proxyException) { throw new
         * SystemException(proxyException.getMessage()); }

        return errors;

    }*/
    /**
     * 
     * 	Method		:	ULDController.createULDLoanTransactionFeature
     *	Added on 	:	24-Apr-2023
     * 	Used for 	:	invoking CreateULDLoanTransactionFeature
     *	Parameters	:	@param transactionVO
     *	Parameters	:	@return
     *	Parameters	:	@throws SystemException
     *	Parameters	:	@throws BusinessException 
     *	Return type	: 	Collection<ErrorVO>
     */
    public Collection<ErrorVO> createULDLoanTransactionFeature(TransactionVO transactionVO)
  		  throws SystemException, BusinessException  {
  	  SaveULDLoanTransactionFeature createULDLoanTransactionFeature = (SaveULDLoanTransactionFeature)ICargoSproutAdapter
  				.getBean("SaveULDLoanTransactionFeature", true);
  	  return createULDLoanTransactionFeature.execute(transactionVO);
    }
    /**
     * @author A-3353
     * @param transactionVO
     * @return
     * @throws SystemException
     * @throws ULDDefaultsBusinessException
     * @throws CurrencyConversionException
     * @throws DimensionConversionException
     * @throws MessageConfigException
     */
    public Collection<ErrorVO> createULDLoanTransaction(TransactionVO transactionVO)
    throws SystemException, ULDDefaultsBusinessException, CurrencyConversionException,
            DimensionConversionException, MessageConfigException {
        /**
         * This method will be used when ever a new transaction is created
         * ULD validations --> if not found then check if OAL then create new ULD else throw error
         * All other ULD and TXN Validations throw error
         * if all validations successfull set canTransactionPersisted as true & continue with saving TXN
         * Check if toParty is Owner of ULD then it will be a Return Transaction
         * if Return need to check whether this is an exact Return or Loan_Return
         */
        Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
        Collection<String> uldNos = new ArrayList<String>();
        String uldNumber = null;
        String uldOwner = null;
        String fromParty = null;
        String toParty = null;
        String uldType = null;
        ULD uld = null;
        String configurableOwner = null;
        String uldTransactionBasedOn = null;
        boolean canTransactionPersisted = true;
        boolean isValidULDFormat = false;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext() .getLogonAttributesVO();
        String companyCode=logonAttributes.getCompanyCode();
        String owrArlCode = logonAttributes.getOwnAirlineCode();
        Map<String,String> map = new HashMap<String,String>();
		Collection<String> systemParameterCodes = new ArrayList<String>();
        systemParameterCodes.add(ULD_TRANSACTION_CREATION_BASED_ON);
        //systemParameterCodes.add(THIRDPARTY_TRANSFER_ENABLED);
        /*
         * Getting system parameters for Partner Airline
         */
        try {
          map = Proxy.getInstance().get(SharedDefaultsProxy.class).findSystemParameterByCodes(systemParameterCodes);
        } catch (ProxyException proxyException) {
         new SystemException(proxyException.getErrors());
        }
        uldTransactionBasedOn  = map.get(ULD_TRANSACTION_CREATION_BASED_ON);
        //String thirdPartyEnabled  = map.get(THIRDPARTY_TRANSFER_ENABLED);
        //Added by A-7131 for ICRD-154607
		ArrayList<ULDTransactionDetailsVO> lucMsgTransactionDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
        if (transactionVO != null
                && transactionVO.getUldTransactionDetailsVOs() != null) {
			for (ULDTransactionDetailsVO transactionDetailsVo : transactionVO.getUldTransactionDetailsVOs()) {
				fromParty = transactionDetailsVo.getFromPartyCode();
				toParty = transactionDetailsVo.getToPartyCode();
				uldNumber = transactionDetailsVo.getUldNumber().trim().toUpperCase();
                if(ULD_OWNER_CODE.equals(uldTransactionBasedOn)) {
					configurableOwner = uldNumber;
				} else if(ULD_OWNER_AIRLINE_CODE.equals(uldTransactionBasedOn)) {
                	ULDValidationVO uldValidationVO = validateULD(companyCode,uldNumber);
                	if(uldValidationVO != null) {
					AirlineValidationVO validationVO = null;
						if(uldValidationVO!=null) {
							try {
								validationVO = new SharedAirlineProxy().findAirline(companyCode, uldValidationVO.getOwnerAirlineIdentifier());
							} catch (ProxyException e) {
								e.printStackTrace();
							}
							String twoalphacode = validationVO.getAlphaCode();
							String threealphacode = validationVO.getThreeAlphaCode();
							String arldtl = findOwnerCode(logonAttributes.getCompanyCode(), twoalphacode, threealphacode);
							String airlineDetailArr[] = arldtl.split("~");
							if ("2".equals(airlineDetailArr[0])) {
								fromParty = twoalphacode;
							} else {
								fromParty = threealphacode;
							}
							configurableOwner = uldValidationVO.getOwnerAirlineCode();
						} else {
							configurableOwner = uldNumber;
						}
					} else {
						configurableOwner = uldNumber;
					}
				} else {
					configurableOwner = uldNumber;
				}

                int length =uldNumber.trim().length();
                if(uldNumber != null){
					uldNos.add(uldNumber);
                    isValidULDFormat = checkvalidateULDFormat(transactionDetailsVo
                            .getCompanyCode(), transactionDetailsVo.getUldNumber());
					log.log(Log.FINE, "THE ULD FORMAT IS ULD FORMAT IS ", isValidULDFormat);
					if (!isValidULDFormat) {
                        log.log(Log.INFO,"INVALID ULD FORMAT EXCEPTION THROWN ERRRVO CREATED");
						errors.add(new ErrorVO(InvalidULDFormatException.INVALID_ULD_FORMAT,
										new Object[] { transactionDetailsVo.getUldNumber() }));
                    }else{
						uld = checkULDExistsForTransaction(transactionDetailsVo);     
                        if(uld == null){
							log.log(Log.FINE, "THE VALUE FOR ULD NOTEXISTS IS");
							uldType = parseULDType(uldNumber);
                            log.log(Log.FINE, "THE ULDTYPE IS ULDTYPE IS" , uldType);
							log.log(Log.INFO, "FIND ULD STRUCTURAL DETAILS CALLED");
							/* 
                             * Call findStructural Details since in case of a Borrowed Transaction
                             * we are introducing an new ULD in the ULDMST containing the BORREFNUM
                             * in ULDMST as same as TXNREFNUM in ULDTXNMST
                             */
                            
                            ULDTypeVO typeVo = null;
                            if(uldNumber != null && uldNumber.length() > 0) {
                            	typeVo = findULDTypeStructuralDetails(logonAttributes.getCompanyCode(), uldNumber);
                            }
                            else {
                            	typeVo = findULDTypeStructuralDetails(logonAttributes.getCompanyCode(), uldType);
                            }
                            
                            if (configurableOwner.endsWith(logonAttributes.getOwnAirlineCode())){
                                errors.add(new ErrorVO("uld.defaults.uld.doesnot.exists",new Object[] { uldNumber }));
                                return errors;
                            }else{
								ULDVO uldVo = createULDVo(transactionDetailsVo, typeVo, uldType);
                                log.log(Log.INFO,"OAL LOAN ULD TRANSACTION CALLING CONSTRUCTOR FOR ADDING A NEW ENTRY IN ULDMST");
								uld = new ULD(uldVo);	
							}							
						}
						log.log(Log.FINE, "THE VALUE FOR ULDEXISTS IS", uld);
						if (uld != null) {
                            if (("N".equals(uld.getOverallStatus()) && "Y".equals(transactionVO.getEmptyStatus())) ||
                                ("N".equals(uld.getOverallStatus()) && "N".equals(transactionVO.getEmptyStatus()) &&
                                        !(AGENT.equals(transactionDetailsVo.getPartyType())))) {
								log.log(Log.INFO, "THe ULD is NONOPERATIONAL", transactionDetailsVo.getUldNumber());
                                errors.add(new ErrorVO( "uld.defaults.uld.nonoperational",new Object[] { transactionDetailsVo
                                                .getUldNumber() }));
								canTransactionPersisted = false;
							}
							/**
							 * Any additional validations need to be added here
							 */
                            if(canTransactionPersisted){
                             if(!checkThirdPartyTransaction(transactionDetailsVo,logonAttributes,null,configurableOwner)){
								/**
                                 * Check whether the uldowner is the toparty then
                                 * transaction becomes a retun transaction else
                                 * normal loan transaction
                                 */
                                if(configurableOwner.endsWith(toParty)){
                                    /**
                                     * Finding any return Loan exists with same
                                     * From party and To party
									 */   
									Collection<ULDTransaction> uldTransactionDetails = null;
									TransactionFilterVO filterVO = new TransactionFilterVO();
									filterVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
									filterVO.setUldNumber(transactionDetailsVo.getUldNumber());
									filterVO.setFromPartyCode(transactionDetailsVo.getToPartyCode());
									/*
                                     * For partner airline can be stoped with a system parameter
                                     * Partner Airline will be replaced with Owner in Loan
                                     */
                                    /*if(AbstractVO.FLAG_YES.equals(partnerEnabled)){
                                        String partnerAirline = findPartnerCarriers();
                                        if(partnerAirline!=null && partnerAirline.trim().length()>0
                                                && partnerAirline.contains(fromParty)
                                                && !(partnerAirline.contains(toParty) || owrArlCode.equals(toParty))){
                                            filterVO.setToPartyCode(owrArlCode);
                                        }else{
                                    filterVO.setToPartyCode(transactionDetailsVo.getFromPartyCode());
                                        }
                                    }else{*/
                                        filterVO.setToPartyCode(transactionDetailsVo.getFromPartyCode());
                                    //}
                                    try {
                                        uldTransactionDetails = ULDTransaction.findOpenTxnULDObjects(filterVO);
                                    } catch (PersistenceException e) {
                                        log.log(Log.FINEST, e.getMessage());
                                    }
                                    if(uldTransactionDetails != null &&
                                            uldTransactionDetails.size() > 0) {
                                        int duplicateLoanReturns = 0;
                                        for(ULDTransaction uldTransaction:uldTransactionDetails){
                                            transactionDetailsVo.setSysRtnFlag(ULDTransactionDetailsVO.FLAG_NO);
                                            if(transactionDetailsVo.getReturnStationCode()==null ||
                                                    transactionDetailsVo.getReturnStationCode().trim().length() == 0){
                                                transactionDetailsVo.setReturnStationCode(transactionDetailsVo.getTransactionStationCode());
                                            }
                                            returnULDLoanTransaction(transactionDetailsVo,uldTransaction,transactionVO);
                                            //Added by A-7131 for ICRD-154607
                                            if (transactionDetailsVo.getToPartyCode().equals(uldTransaction.getPartyCode())) {
                                                duplicateLoanReturns++;
                                            }
                                        }
                                        //Added by A-7131 for ICRD-154607
										if (duplicateLoanReturns < uldTransactionDetails.size()) {
                                            if (PARTYTYPE_AIRLINE.equals(transactionDetailsVo.getPartyType()) &&
                                            		shouldSendLUC(transactionDetailsVo)) {
                                            	transactionDetailsVo.setLUCMessageRequired(true);
												lucMsgTransactionDetailsVOs.add(transactionDetailsVo);
											}
										}
									log.log(Log.INFO, "CLOSING LOAN RETURN");
                                    }else{
										/**
                                         * Special Case: ULD needs to be returned, ie a Transaction happens
                                         * as ULD owner will be toParty and fromParty, Then if any Existing Open transaction
                                         * exists for any Agent or Airline needs to be returned only
										 */
										boolean owrReturn = false;
                                        if(configurableOwner.endsWith(fromParty)){
											TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
                                            transactionFilterVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
											transactionFilterVO.setTransactionStatus(TO_BE_RETURNED);
											transactionFilterVO.setUldNumber(transactionDetailsVo.getUldNumber());
											transactionFilterVO.setPageNumber(1);
											owrReturn = true;
                                            TransactionListVO transactionListVO = listULDTransactionDetails(transactionFilterVO);
                                            if(transactionListVO!=null){
                                                Collection<ULDTransactionDetailsVO> detailsVOs = transactionListVO
                                                    .getTransactionDetailsPage();
                                                if(detailsVOs!=null && detailsVOs.size() > 0){
                                                    for(ULDTransactionDetailsVO transactionDetailsVO : detailsVOs){
                                                        try {
                                                            owrReturn = true;
                                                            transactionDetailsVO.setReturnDate(transactionDetailsVo.getTransactionDate());
                                                            transactionDetailsVO.setReturnStationCode(transactionDetailsVo.getTransactionStationCode());
                                                            transactionDetailsVo.setSysRtnFlag(ULDTransactionDetailsVO.FLAG_NO);
                                                            closeIfAnyOpenLoanTxnExists(transactionDetailsVO);
                                                            if (PARTYTYPE_AIRLINE.equals(transactionDetailsVo.getPartyType()) &&
                                                            		shouldSendLUC(transactionDetailsVo)) {
                                                            	transactionDetailsVO.setLUCMessageRequired(true);
                                                                lucMsgTransactionDetailsVOs.add(transactionDetailsVO);
                                                            }
                                                        } catch (PersistenceException e) {
                                                            //Do nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if(!owrReturn){
										log.log(Log.INFO, "RETURN WITHOUT PRIOR LOAN");
										/**
                                         * no return Loan exists with same
                                         * From party and To party
                                         * ie a return without prior loan
                                         * creating a new Txn
										 */
										ULDTransactionDetailsVO returnTxnVO = new ULDTransactionDetailsVO();
										BeanHelper.copyProperties(returnTxnVO, transactionDetailsVo);										
										ULDTransaction uldTransaction = null;
										swapFromAndToPartyForReturn(returnTxnVO);
										uldTransaction = saveNewULDTransaction(uld, returnTxnVO);
                                        if(uldTransaction != null){
                                            errors.add(new ErrorVO(ULD_TRANSACTION_REF_NUMBER,new Object[] { new StringBuilder()
                                            .append(transactionDetailsVo.getUldNumber()).append("~")
                                            .append(transactionDetailsVo.getTransactionRefNumber()).toString() }));
											/**  
											 * returning the txn created
											 */
											transactionDetailsVo.setSysRtnFlag(ULDTransactionDetailsVO.FLAG_NO);
                                            returnULDLoanTransaction(transactionDetailsVo,uldTransaction,transactionVO);
                                            //Added by A-7131 for ICRD-154607
                                            if (PARTYTYPE_AIRLINE.equals(transactionDetailsVo.getPartyType())&&
                                            		shouldSendLUC(transactionDetailsVo)) {
                                            	transactionDetailsVo.setLUCMessageRequired(true);
												lucMsgTransactionDetailsVOs.add(transactionDetailsVo);
											}
										}
									}
									}
                                }else{
									/**
									 * Normal Loan Transaction
									 */
									ULDTransaction transaction = saveNewULDTransaction(uld, transactionDetailsVo);
                                    if(transaction!= null){
                                        errors.add(new ErrorVO(ULD_TRANSACTION_REF_NUMBER,new Object[] { new StringBuilder()
                                        .append(transactionDetailsVo.getUldNumber())
                                        .append("~")
										.append(transactionDetailsVo.getTransactionRefNumber())
										.toString() }));
										
                                        //Added by A-7131 for ICRD-154607
                                        if (PARTYTYPE_AIRLINE.equals(transactionDetailsVo.getPartyType()) || 
                                        		PARTYTYPE_AGENT.equals(transactionDetailsVo.getPartyType())||
                                        		PARTYTYPE_CUSTOMER.equals(transactionDetailsVo.getPartyType())){
                                        	/****###Collection<GeneralParameterConfigurationVO> generalParameterConfigurationVOs = new ArrayList<GeneralParameterConfigurationVO>();
                                        	GeneralParameterConfigurationVO generalParameterConfigurationVO = new GeneralParameterConfigurationVO();
                                        	generalParameterConfigurationVO.setCompanyCode(logonAttributes.getCompanyCode());
                                        	generalParameterConfigurationVO.setMasterType("Customer code mapping for LUC messages");
                                        	generalParameterConfigurationVOs.add(generalParameterConfigurationVO);
                                        	generalParameterConfigurationVOs = Proxy.getInstance().get(SharedDefaultsProxy.class).findGeneralParameterConfigurations(generalParameterConfigurationVOs);
	                                    if(generalParameterConfigurationVOs !=null){
	                                    	for (GeneralParameterConfigurationVO ParameterConfigurationVO : generalParameterConfigurationVOs) {
	                                    		if((ParameterConfigurationVO.getConfigurationReferenceOne().equals(transactionDetailsVo.getFromPartyCode()))&&
	                                        			(ParameterConfigurationVO.getConfigurationReferenceTwo().equals(transactionDetailsVo.getTransactionStationCode()))&&
	                                        			(ParameterConfigurationVO.getParmeterCode().equals(transactionDetailsVo.getToPartyCode()))){
	                                        			transactionDetailsVo.setToPartyCode(ParameterConfigurationVO.getParameterValue());
	                                    		}
	                                    	}
	                                     }***/
                                        	/***Above lines are moved to LUC message feature**/
                                        	transactionDetailsVo.setLUCMessageRequired(true);
											lucMsgTransactionDetailsVOs.add(transactionDetailsVo);
										}
									}
								}
                             }else{
                                 ULDTransaction transaction =  saveThirdPartyTransaction(transactionDetailsVo,uld);
                                    if(transaction!= null){
                                        errors.add(new ErrorVO(ULD_TRANSACTION_REF_NUMBER,new Object[] { new StringBuilder()
                                        .append(transactionDetailsVo.getUldNumber())
                                        .append("~")
                                        .append(transactionDetailsVo.getTransactionRefNumber())
                                        .toString() }));
                                    }
                             }
                         }//Can persisted ends
                        }
                }
             }
          }
        }
        /**
         * Sending LUC Message
         * Added by A-7131 for ICRD-154607
         */
        if (lucMsgTransactionDetailsVOs.size() > 0) {
        	createAndSendLUCMessage(transactionVO);
		}
		/**
		 * Any Discrepencies found for ULD is closed.
		 */
        Collection<ULDDiscrepancy> uldDiscrepancies = ULDDiscrepancy.findULDDiscrepancies(transactionVO.getCompanyCode(),
                uldNos);
		if (uldDiscrepancies != null && uldDiscrepancies.size() > 0) {
			for (ULDDiscrepancy uldDiscrepancy : uldDiscrepancies) {
				uldDiscrepancy.setCloseStatus("Y");
            }
        }
                    if (transactionVO.getAccessoryTransactionVOs() != null
                            && transactionVO.getAccessoryTransactionVOs().size() > 0) {
                        log.log(Log.INFO,"TRYING TO EXECUTE THE  LOAN ACCESSORY TRANSACTIONS");
						errors = maintainAccessoriesStock(transactionVO.getAccessoryTransactionVOs(), errors);
					}
                    Collection<ErrorVO> errorsTobeThrown = new ArrayList<ErrorVO>();
                    if (errors != null && errors.size() > 0) {
					log.log(Log.FINE, "THE SIZE OF THE ERRORS FINALLY IS FOUND TO BE", errors.size());
						for (ErrorVO errorVo : errors) {
							if (!ULD_TRANSACTION_REF_NUMBER.equals(errorVo.getErrorCode())) {
								errorsTobeThrown.add(errorVo);
                                log.log(Log.INFO,"ULD DEFAULTS BUSINESS EXCEPTION TO BE THROWN "
                                                , errorsTobeThrown);
							}
						}
					}
					if (errorsTobeThrown.size() > 0) {
						ULDDefaultsBusinessException ex = new ULDDefaultsBusinessException();
						ex.addErrors(errorsTobeThrown);
						throw ex;
					}
					return errors;
	}

	/**
	 *
	 * A-1950
	 *
	 * @param uldTransaction
	 * @param uldAuditVO
	 * @param uldTransactionDetailsVO
	 * @throws SystemException
	 */
    private void collectULDTransactionDetails(ULDTransaction uldTransaction,
            ULDAuditVO uldAuditVO,
            ULDTransactionDetailsVO uldTransactionDetailsVO)
            throws SystemException {
        log.log(Log.FINE, "---------Setting uldAuditVO Details-------");
        StringBuffer additionalInfo = new StringBuffer();

        uldAuditVO.setCompanyCode(uldTransaction.getUldTransactionPK()
                .getCompanyCode());

        uldAuditVO.setUldNumber(uldTransaction.getUldTransactionPK()
                .getUldNumber());

        if (LOANED_TRANSACTION.equals(uldTransactionDetailsVO
                .getTransactionType())) {
            additionalInfo.append(" LoanedToParty - ").append(
                    uldTransactionDetailsVO.getToPartyCode());
            additionalInfo.append(" ,CRN - ").append(
                    uldTransactionDetailsVO.getControlReceiptNumber());
            additionalInfo.append(" ,Supporting info - ").append(
                    uldTransactionDetailsVO.getAwbNumber());
            additionalInfo.append(" ,Origin - ").append(
                    uldTransactionDetailsVO.getTransactionStationCode());
            // added by a-3278 for 38603 on 26Feb09
            additionalInfo.append(" ,TxnDate - ").append(
                    uldTransactionDetailsVO.getTransactionDate()
                            .toDisplayFormat());
            // a-3278 ends
        }/* Mofified by A-3415 for ICRD-114538.
            We shall only have Loan transaction henceforth.
        else if (BORROW_TRANSACTION.equals(uldTransactionDetailsVO
                .getTransactionType())) {
            additionalInfo.append(" BorrowedFromParty - ").append(
                    uldTransactionDetailsVO.getFromPartyCode());
            additionalInfo.append(" ,CRN - ").append(
                    uldTransactionDetailsVO.getControlReceiptNumber());
            additionalInfo.append(" ,Supporting info - ").append(
                    uldTransactionDetailsVO.getAwbNumber());
            additionalInfo.append(" ,Origin - ").append(
                    uldTransactionDetailsVO.getTransactionStationCode());
            // added by a-3278 for 38603 on 26Feb09
            additionalInfo.append(" ,TxnDate - ").append(
                    uldTransactionDetailsVO.getTransactionDate()
                            .toDisplayFormat());
            // a-3278 ends
        }*/
        if (uldAuditVO.getStationCode() != null) {

            uldAuditVO.setTxnTime(new LocalDate(uldAuditVO.getStationCode(),
                    Location.ARP, true).toGMTDate());

            uldAuditVO.setTxnLocalTime(new LocalDate(uldAuditVO
                    .getStationCode(), Location.ARP, true));

        } else if (uldAuditVO.getStationCode() == null) {
            LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                    .getLogonAttributesVO();
            String airportCode = logonAttributes.getAirportCode();
            uldAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP,
                    false).toGMTDate());
            uldAuditVO.setTxnLocalTime(new LocalDate(airportCode, Location.ARP,
                    false));

        }
        uldAuditVO.setUserId(uldTransaction.getLastUpdateUser());
        uldAuditVO.setAuditRemarks(uldTransactionDetailsVO
                .getTransactionRemark());
        uldAuditVO.setAdditionalInformation(additionalInfo.toString());

        log.exiting("collectULDAuditDetails",
                "...Finished construction of AuditVO");
    }

    /**
     *
     * A-1950
     *
     * @param uldTransaction
     * @param uldAuditVO
     * @param uldTransactionDetailsVO
     * @throws SystemException
     */
    private void collectModifiedTransactionDetails(
            ULDTransaction uldTransaction, ULDAuditVO uldAuditVO,
            ULDTransactionDetailsVO uldTransactionDetailsVO)
            throws SystemException {
        log.log(Log.FINE, "---------Setting uldAuditVO Details-------");
        StringBuffer additionalInfo = new StringBuffer();

        uldAuditVO.setCompanyCode(uldTransaction.getUldTransactionPK()
                .getCompanyCode());

        uldAuditVO.setUldNumber(uldTransaction.getUldTransactionPK()
                .getUldNumber());

        additionalInfo.append(" CRN - ").append(
                uldTransactionDetailsVO.getControlReceiptNumber());
		if (uldTransactionDetailsVO.getReturnCRN() != null
				&& uldTransactionDetailsVO.getReturnCRN().trim().length() > 0) {
            additionalInfo.append(" ,RTNCRN - ").append(
                    uldTransactionDetailsVO.getReturnCRN());
        }
        additionalInfo.append(" ,Supporting info - ").append(
                uldTransactionDetailsVO.getAwbNumber());
        additionalInfo.append(" ,Origin - ").append(
                uldTransactionDetailsVO.getTransactionStationCode());
		// modified for displaying the formatted date
        additionalInfo.append(" ,TxnDate - ").append(
                uldTransactionDetailsVO.getTransactionDate().toDisplayFormat());
		// modification ends
		if (uldAuditVO.getStationCode() != null) {

            uldAuditVO.setTxnTime(new LocalDate(uldAuditVO.getStationCode(),
                    Location.ARP, true).toGMTDate());

            uldAuditVO.setTxnLocalTime(new LocalDate(uldAuditVO
                    .getStationCode(), Location.ARP, true));

        } else if (uldAuditVO.getStationCode() == null) {
            LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                    .getLogonAttributesVO();

            String airportCode = logonAttributes.getAirportCode();
            uldAuditVO.setTxnLocalTime(new LocalDate(airportCode, Location.ARP,
                    false));

            uldAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP,
                    false).toGMTDate());
		}
		uldAuditVO.setUserId(uldTransaction.getLastUpdateUser());
		uldAuditVO.setAuditRemarks(uldTransaction.getTransactionRemark());
		uldAuditVO.setAdditionalInformation(additionalInfo.toString());

        log.exiting("collectULDAuditDetails",
                "...Finished construction of AuditVO");
	}

	/**
	 *
	 * A-1950
	 *
	 * @param uldTransaction
	 * @param uldAuditVO
	 * @param uldTransactionDetailsVO
	 * @throws SystemException
	 */
    private void collectReturnTransactionDetails(ULDTransaction uldTransaction,
            ULDAuditVO uldAuditVO,
            ULDTransactionDetailsVO uldTransactionDetailsVO)
            throws SystemException {
        log.log(Log.FINE, "---------Setting uldAuditVO Details-------");
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        StringBuffer additionalInfo = new StringBuffer();

        uldAuditVO.setCompanyCode(uldTransaction.getUldTransactionPK()
                .getCompanyCode());

        uldAuditVO.setUldNumber(uldTransaction.getUldTransactionPK()
                .getUldNumber());
        if (LOANED_TRANSACTION.equals(uldTransactionDetailsVO
                .getTransactionType())) {
            additionalInfo.append(" ReturnByParty - ").append(
                    uldTransactionDetailsVO.getToPartyCode());
		} else if ("R".equals(uldTransactionDetailsVO.getTransactionType())) {
            additionalInfo.append(" ReturnByParty - ").append(
                    uldTransactionDetailsVO.getFromPartyCode());
        } else {
            additionalInfo.append(" ReturnToParty - ").append(
                    uldTransactionDetailsVO.getFromPartyCode());
        }
        additionalInfo.append(" ,CRN - ").append(
                uldTransactionDetailsVO.getReturnCRN());
        additionalInfo.append(" ,Supporting info - ").append(
                uldTransactionDetailsVO.getAwbNumber());
        additionalInfo.append(" ,ReturningAirport - ").append(
                uldTransactionDetailsVO.getReturnStationCode());
        // added by a-3278 for 38603 on 26Feb09
        additionalInfo.append(" ,ReturnDate - ").append(
                uldTransactionDetailsVO.getReturnDate().toDisplayFormat());
        // a-3278 ends
        if (uldAuditVO.getStationCode() != null) {

            uldAuditVO.setTxnTime(new LocalDate(uldAuditVO.getStationCode(),
                    Location.ARP, true).toGMTDate());

            uldAuditVO.setTxnLocalTime(new LocalDate(uldAuditVO
                    .getStationCode(), Location.ARP, true));

        } else if (uldAuditVO.getStationCode() == null) {

            String airportCode = logonAttributes.getAirportCode();
            uldAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP,
                    false));

            uldAuditVO.setTxnLocalTime(new LocalDate(airportCode, Location.ARP,
                    false));
        }
        if (uldTransaction.getLastUpdateUser() != null
                && uldTransaction.getLastUpdateUser().trim().length() > 0) {
			uldAuditVO.setUserId(uldTransaction.getLastUpdateUser());
		} else {
			uldAuditVO.setUserId(logonAttributes.getUserId());
		}
		uldAuditVO.setAdditionalInformation(additionalInfo.toString());
        uldAuditVO.setAuditRemarks(uldTransactionDetailsVO
                .getTransactionRemark());
        log.exiting("collectULDAuditDetails",
                "...Finished construction of AuditVO");
    }

    /**
     * Commented by A-3415 for ICRD-114538
     * @param transactionDetailsVo
     * @throws SystemException
     *//*
    private void createBorrowTransactions(
            ULDTransactionDetailsVO transactionDetailsVo)
            throws SystemException, CurrencyConversionException,
            DimensionConversionException {
        log.log(Log.INFO, "INSIDE THE CREATE BORROW TRANSACTIONS ");
        ULDTransaction transaction = new ULDTransaction(transactionDetailsVo);
        int borrowReferenceNumber = transaction.getUldTransactionPK()
                .getTransactionRefNumber();
        String uldType = "";

         * find the uldtype alone from ULDNumber

        uldType = parseULDType(transactionDetailsVo.getUldNumber());
        log.log(Log.FINE, "THE ULDTYPE IS ULDTYPE IS", uldType);
        log.log(Log.INFO, "fFIND ULD STRUCTURAL DETAILS CALLED");

         * Call findStructural Details since in case of a Borrowed Transaction
         * we are introducing an new ULD in the ULDMST containing the BORREFNUM
         * in ULDMST as same as TXNREFNUM in ULDTXNMST
         *


        ULDTypeVO typeVo = findULDTypeStructuralDetails(transactionDetailsVo
                .getCompanyCode(), uldType);

        ULDVO uldVo = createULDVo(transactionDetailsVo, typeVo, uldType,
                borrowReferenceNumber, false);
        log
                .log(Log.INFO,
                        "BORROW ULD TRANSACTION CALLING CONSTRUCTOR FOR ADDING A NEW ENTRY IN ULDMST");
        new ULD(uldVo);
        // audit start
        ULDAuditVO uldAuditVO = new ULDAuditVO(TransactionVO.MODULE,
                TransactionVO.SUBMODULE, TransactionVO.ENTITY);
        uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(uldAuditVO,
                transaction, true);
        collectULDTransactionDetails(transaction, uldAuditVO,
                transactionDetailsVo);
        uldAuditVO.setActionCode(CREATE_ULDBORROWTRANSACTION);
        uldAuditVO.setAuditRemarks(transactionDetailsVo.getTransactionRemark());
        AuditUtils.performAudit(uldAuditVO);
        log.log(Log.FINE, "\n\n\n#### Audit Performed For\n\n\n");

log.log(Log.FINE, "\n\n\n#### ULDNUMBER : ", uldAuditVO.getUldNumber());
    }*/

	/**
	 * This method is used to create the new ULDVO
	 *
	 * @param transactionDetailsVo
	 * @param typeVo
	 * @param uldType
	 * @param borrowReferenceNumber
	 * @return
	 * @throws SystemException
	 *//*
     *Commented by A-3415 for ICRD-114538
    private ULDVO createULDVo(ULDTransactionDetailsVO transactionDetailsVo,
            ULDTypeVO typeVo, String uldType, int borrowReferenceNumber,
            boolean isDummyTransaction) throws SystemException {
        log.log(Log.INFO, "CREATE NEW ULDVO");
        ULDAirportLocationVO uldAirportLocationVO = null;
        ULDVO uldVo = new ULDVO();

        uldVo.setCompanyCode(transactionDetailsVo.getCompanyCode());
        uldVo.setUldNumber(transactionDetailsVo.getUldNumber());
        uldVo.setUldType(uldType);
        uldVo.setUldGroupCode(typeVo.getUldGroupCode());
        uldVo.setOperationalAirlineIdentifier(transactionDetailsVo
                .getOperationalAirlineIdentifier());
        // here curent owner code is used only to get OwnerId at this point

		 * uldVo .setOwnerAirlineIdentifier(transactionDetailsVo
		 * .getCurrOwnerCode());

        // Added by nisha for changing owner airlinecode
        // When ULD is borrowed , the OwnerAirlineIdenfier should be owner of
        // ULD , not the From party identifier
        String uldNumber = transactionDetailsVo.getUldNumber();
        String fromPartyCode = transactionDetailsVo.getFromPartyCode();
        if (uldNumber != null && uldNumber.trim().length() > 0) {
            if (fromPartyCode != null && fromPartyCode.trim().length() > 0) {
                if (uldNumber.endsWith(fromPartyCode)) {
                    uldVo.setOwnerAirlineIdentifier(transactionDetailsVo
                            .getCurrOwnerCode());
                }else {

                    log.log(Log.INFO, "from party is not uld owner");
                    int len = uldNumber.length();
                    String twoalphacode = uldNumber.substring(len - 2);
                    String threealphacode = uldNumber.substring(len - 3);

                    log.log(Log.INFO, "twoalphacode ", twoalphacode);
                    log.log(Log.INFO, "threealphacode ", threealphacode);
                    String arldtl = findOwnerCode(transactionDetailsVo
                            .getCompanyCode(), twoalphacode, threealphacode);

                    log.log(Log.INFO, "----arldtl ", arldtl);
                    //Null Check added as part of ICRD-21184
                    if(arldtl != null) {
                        String airlineDetailArr[] = arldtl.split("~");
                        int ownerAirlineId = Integer.valueOf(airlineDetailArr[1]);
                        log
                                .log(Log.INFO, "----ownerAirlineId ",
                                        ownerAirlineId);
                        uldVo.setOwnerAirlineIdentifier(ownerAirlineId);
                    }
                }
            } else {
                int len = uldNumber.length();
                String twoalphacode = uldNumber.substring(len - 2);
                String threealphacode = uldNumber.substring(len - 3);

                log.log(Log.INFO, "%%%%%%%% twoalphacode ", twoalphacode);
                log.log(Log.INFO, "%%%%%%%% threealphacode ", threealphacode);
                String arldtl = findOwnerCode(transactionDetailsVo
                        .getCompanyCode(), twoalphacode, threealphacode);

                log.log(Log.INFO, "----arldtl ", arldtl);
                //Null Check added as part of ICRD-21184
                if(arldtl != null) {
                    String airlineDetailArr[] = arldtl.split("~");
                    int ownerAirlineId = Integer.valueOf(airlineDetailArr[1]);
                    log.log(Log.INFO, "%%%%%%%% ownerAirlineId ",
                            ownerAirlineId);
                    uldVo.setOwnerAirlineIdentifier(ownerAirlineId);
                }
            }
        }
        // ends
        uldVo.setLastUpdateTime(transactionDetailsVo.getLastUpdateTime());
        // Added by A-2052 for the bug 103872 starts
        // uldVo.setBorrowReferenceNumber(borrowReferenceNumber);
        if (isDummyTransaction) {
            uldVo.setLoanReferenceNumber(borrowReferenceNumber);
        } else {
            uldVo.setBorrowReferenceNumber(borrowReferenceNumber);
        }
        // Added by A-2052 for the bug 103872 ends
        uldVo.setLastUpdateUser(transactionDetailsVo.getLastUpdateUser());
        uldVo.setDisplayBaseHeight(typeVo.getBaseDimHeight());
        uldVo.setDisplayBaseLength(typeVo.getBaseDimLength());
        uldVo.setDisplayBaseWidth(typeVo.getBaseDimWidth());
        uldVo.setDisplayDimensionUnit(typeVo.getBaseDimUnit());
        uldVo.setDisplayStructuralWeight(typeVo.getStructuralWtLmt());
        uldVo.setDisplayStructuralWeightUnit(typeVo.getStructuralWtLmtUnit());
        uldVo.setDisplayIataReplacementCost(typeVo.getIATARepCost());
        uldVo.setDisplayIataReplacementCostUnit(typeVo.getIATARepCostUnit());
        uldVo.setCurrentStation(transactionDetailsVo
                .getTransactionStationCode());
        uldVo.setOwnerStation(transactionDetailsVo.getTransactionStationCode());
        uldVo.setDamageStatus(ULDVO.DAMAGED_STATUS);

        uldVo.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
        uldVo.setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
        uldVo.setDisplayTareWeight(typeVo.getTareWt());
        uldVo.setDisplayTareWeightUnit(typeVo.getTareWtUnit());
        uldVo.setBaseHeight(typeVo.getBaseDimHeight());
        uldVo.setBaseLength(typeVo.getBaseDimLength());
        uldVo.setBaseWidth(typeVo.getBaseDimWidth());
        uldVo.setOperationalFlag(ULDVO.OPERATION_FLAG_INSERT);
        // Added by AG
        uldVo.setTransitStatus("N");

        // Added As CR
        // added by nisha for bugfix on 27Jun08 starts
        if (transactionDetailsVo.getUldNature() != null
                && transactionDetailsVo.getUldNature().trim().length() > 0) {
            uldVo.setUldNature(transactionDetailsVo.getUldNature());
        } else {
            uldVo.setUldNature("GEN");
        }
        // ends
        uldVo.setControlReceiptNumber(transactionDetailsVo
                .getControlReceiptNumber());
        // upto here

        // End by AG
        // Added By Ashraf
        if (transactionDetailsVo.getControlReceiptNumber() != null
                && transactionDetailsVo.getControlReceiptNumber().trim()
                        .length() > 0) {
            uldVo.setControlReceiptNumber(transactionDetailsVo
                    .getControlReceiptNumber());
        }
        log.log(Log.FINE, "CURRENT STATION TO BE SET IN THE ULDMST",
                transactionDetailsVo.getTransactionStationCode());
        uldVo.setLastUpdateTime(transactionDetailsVo.getLastUpdateTime());
        uldVo.setLastUpdateUser(transactionDetailsVo.getLastUpdateUser());

        uldAirportLocationVO = ULD.findCurrentLocation(transactionDetailsVo
                .getCompanyCode(), transactionDetailsVo
                .getTransactionStationCode(), CONTENT_EMPTY);
        if (transactionDetailsVo.getFacilityType() != null
                && transactionDetailsVo.getFacilityType().trim().length() > 0
                && transactionDetailsVo.getLocation() != null
                && transactionDetailsVo.getLocation().trim().length() > 0) {

            uldVo.setFacilityType(transactionDetailsVo.getFacilityType());
            uldVo.setLocation(transactionDetailsVo.getLocation());
        } else if (uldAirportLocationVO != null) {
            uldVo.setLocation(uldAirportLocationVO.getFacilityCode());
            uldVo.setFacilityType(uldAirportLocationVO.getFacilityType());
        } else {
            uldVo.setLocation(ULDVO.NO_LOCATION);
            uldVo.setFacilityType(ULDVO.NO_LOCATION);
        }
        log.exiting("ULD_CONTROLLER", "CREATEULDVO");
        return uldVo;
    }*/

	/**
	 *
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 */
	private String parseULDType(String uldNumber) throws SystemException {
		log.log(Log.INFO, "INSIDE THE PARSING THE ULDTYPE ");
		int startIndex = 0;
		int endIndex = 0;
		String uldType = "";
		char charAtfourthPosition = uldNumber.charAt(3);

		try {
			Integer.parseInt(String.valueOf(charAtfourthPosition));
			endIndex = 3;
		} catch (NumberFormatException e) {
            endIndex = 3;// Changed for ICRD-167181 , while processing FFM uld was not getting created in case we use uld with 4th digit as alphabet, but as per new cr  ICRD-143324, 4th digit may be alphanumeric,that digit is not part of uldtypevalue and thus need not consider that digit while finding uldtype from uldnumber
		}
		uldType = uldNumber.substring(startIndex, endIndex);
		log.log(Log.FINE, "THE ULDTYPE AFTER PARSING IS FOUND TO BE", uldType);
		return uldType;

	}

	/**
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 */
    private boolean checkvalidateULDFormat(String companyCode, String uldNumber)
            throws SystemException {
		boolean isValidULDFormat = true;
		try {
			log.log(Log.FINE, "CHECK WHETHER THE ULD FORMAT IS VALID");
			isValidULDFormat = validateULDFormat(companyCode, uldNumber);
            log.log(Log.FINE, " AFTER CHECK  ULD FORMAT IS VALID",
                    isValidULDFormat);
		} catch (InvalidULDFormatException ex) {
			log.log(Log.INFO, "INVALID ULD FORMAT EXCEPTION IS THROWN");
			isValidULDFormat = false;
		}
		return isValidULDFormat;

	}

	/**
	 *
	 * @param accessoryTransactionVos
	 * @param errors
	 * @return
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 */
	/*
	 * Once all the Loan\Borrow Tranasction has been over .The
	 * TransactionDetails For Accessories has to be carried out. check whether
	 * at the particular airlineIdentifier at that station has that
	 * accessorycode and also the quantity demanded can be loaned
	 */

    private Collection<ErrorVO> maintainAccessoriesStock(
            Collection<AccessoryTransactionVO> accessoryTransactionVos,
            Collection<ErrorVO> errors) throws SystemException,
            ULDDefaultsBusinessException {
		AccessoriesStockConfig accessoriesStockConfigForOwner = null;
		AccessoriesStockConfig accessoriesForOperational = null;
		boolean canAccessoriesPersisted = false;
		int loaned = 0;

		log.log(Log.INFO, "CREATING THE LIST CREATING THE LIST");
		ArrayList<AccessoryTransactionVO> accessoryTransactionVosList = (ArrayList<AccessoryTransactionVO>) accessoryTransactionVos;
		log.log(Log.INFO, "CREATING THE LIST  IS CREATED");
        if (accessoryTransactionVosList != null
                && accessoryTransactionVosList.size() > 0
                && accessoryTransactionVosList.get(0).getTransactionType()
                        .equals(LOANED_TRANSACTION)) {
			for (AccessoryTransactionVO accessoryTransactionVo : accessoryTransactionVos) {
				accessoriesStockConfigForOwner = null;
				accessoriesForOperational = null;
				canAccessoriesPersisted = true;
				loaned = 0;
                log
                        .log(Log.INFO,
                                " FIND ACCESSORY STOCK CONFIG FOR OWNER  IN CASE OF LOANED ");
				/*
				 * CHECK WHETHER THE ACCESSORY STOCK CONFIG FOR OWNER EXISTS
				 */
				accessoriesStockConfigForOwner = checkAccessoriesForOwner(accessoryTransactionVo);

				if (accessoriesStockConfigForOwner == null) {
                    log.log(Log.INFO,
                            "ACCESSORIESSTOCK CONFIG  FOR THE OWNER IS NULL");
                    log
                            .log(
                                    Log.INFO,
									" OWNER NOT AVAILANLE/REQUESTED ACCESSORY DOES NOT EXIST AT THE STATION FOR THE AIRLINE .. CREATE THE ERRORS OWNER NOT AVILABLE");
					errors.add((new ErrorVO("uld.defaults.notavialable.owner",
                            new Object[] {
                                    accessoryTransactionVo.getAccessoryCode(),
                                    accessoryTransactionVo.getCurrOwnerCode(),
                                    accessoryTransactionVo
                                            .getTransactionStationCode() })));
					canAccessoriesPersisted = false;
				}

				if (accessoriesStockConfigForOwner != null
                        && (accessoriesStockConfigForOwner.getAvailable() < accessoryTransactionVo
                                .getQuantity())) {
                    log.log(Log.FINE,
                            "THE AVAILABLE QTY TAT CAN BE LOANED IS>>>>>>",
                            accessoriesStockConfigForOwner
                                            .getAvailable());
                    log.log(Log.FINE, "THE REQUESTED QTY IS FOUND TO BE ",
                            accessoryTransactionVo.getQuantity());
                    log
                            .log(
                                    Log.INFO,
									"ACCESSORY IS AVAILABLE BUT REQUESTED QTY IS MORE THAN THE AVAILABLE ERRORS CREATED ");
                    errors.add(new ErrorVO(
                            "uld.defaults.requestedmorethan.available",
                            new Object[] {
                                    accessoryTransactionVo.getAccessoryCode(),
                                    accessoryTransactionVo.getCurrOwnerCode(),
                                    accessoryTransactionVo
                                            .getTransactionStationCode(),
                                    accessoriesStockConfigForOwner
                                            .getAvailable() }));
					canAccessoriesPersisted = false;
				}

				if (canAccessoriesPersisted) {
					updateLoanedAccessoryStocks(accessoryTransactionVo);
                    log.log(Log.FINE,
                            "ACCESSORY TRANSACTION PERSISTED IN ULDACCTXNMST");
                    log
                            .log(Log.FINE,
                                    "TRYING FOR THE UPDATIONS FOR OWNER/OPERATIONAL IN ULDACCSTKCFG ");

                    accessoriesStockConfigForOwner
                            .setLoaned(accessoriesStockConfigForOwner
                                    .getLoaned()
                                    + accessoryTransactionVo.getQuantity());
                    accessoriesStockConfigForOwner
                            .setAvailable(accessoriesStockConfigForOwner
                                    .getAvailable()
                                    - accessoryTransactionVo.getQuantity());

                    log
                            .log(Log.INFO,
                                    " FIND ACCESSORY STOCK CONFIG FOR OPERATIONAL  IN CASE OF LOANED ");
					/*
					 * CHECK WHETHER THE ACCESSORY STOCK CONFIG FOR OPERATIONAL
					 * EXISTS
					 */
					accessoriesForOperational = checkAccessoriesForOperational(accessoryTransactionVo);

					if (accessoriesForOperational == null) {
                        log
                                .log(Log.INFO,
                                        "  LOAN ACCESSORY .OPERTIONAL IDENTIFIER NOT AVAILABLE");
                        AccessoriesStockConfigVO accessoriesStockVo = new AccessoriesStockConfigVO();
                        accessoriesStockVo
                                .setAccessoryCode(accessoryTransactionVo
                                        .getAccessoryCode());
                        accessoriesStockVo
                                .setCompanyCode(accessoryTransactionVo
                                        .getCompanyCode());
                        accessoriesStockVo
                                .setAirlineIdentifier(accessoryTransactionVo
                                        .getOperationalAirlineIdentifier());
                        accessoriesStockVo.setAvailable(accessoryTransactionVo
                                .getQuantity());
						accessoriesStockVo.setLoaned(loaned);
                        accessoriesStockVo
                                .setLastUpdateTime(accessoryTransactionVo
                                        .getLastUpdateTime());
                        accessoriesStockVo
                                .setLastUpdateUser(accessoryTransactionVo
                                        .getLastUpdateUser());
                        accessoriesStockVo
                                .setStationCode(accessoryTransactionVo
                                        .getTransactionStationCode());
                        new AccessoriesStockConfig(accessoriesStockVo);

                    }
                    if (accessoriesForOperational != null) {
                        accessoriesForOperational
                                .setAvailable(accessoriesForOperational
                                        .getAvailable()
                                        + accessoryTransactionVo.getQuantity());

					}
				}
			}
		} else {
			log.log(Log.INFO, " ACCESSORY TRANSACTION IS ACTUALLY BORROWED ");
            log
                    .log(
                            Log.FINE,
                            "THE SIZE OF THE ERRORS BEFORE UPDATE BORROW ACCESSORY STOCKS",
                            errors.size());
			updateBorrowAccessoryStocks(accessoryTransactionVos);

		}

		return errors;

	}

	/**
	 *
	 * @param accessoryTransactionVo
	 * @return
	 * @throws SystemException
	 */
    private AccessoriesStockConfig checkAccessoriesForOwner(
            AccessoryTransactionVO accessoryTransactionVo)
			throws SystemException {
		log.log(Log.INFO, "\n\nINSIDE THE CHECK ACCESSORIES FOR THE OWNER");
		log.log(Log.INFO, "COMPANY", accessoryTransactionVo.getCompanyCode());
		log.log(Log.INFO, "ACCESSORY CODE", accessoryTransactionVo.getAccessoryCode());
		log.log(Log.INFO, "TRANSACTION STATION CODE", accessoryTransactionVo.getTransactionStationCode());
		log.log(Log.INFO, "CURRENT OWNER CODE", accessoryTransactionVo.getCurrOwnerCode());
		AccessoriesStockConfig accessoriesStockConfigForOwner = null;
		try {
            accessoriesStockConfigForOwner = AccessoriesStockConfig.find(
                    accessoryTransactionVo.getCompanyCode(),
                    accessoryTransactionVo.getAccessoryCode(),
                    accessoryTransactionVo.getTransactionStationCode(),
                    accessoryTransactionVo.getCurrOwnerCode());
            log.log(Log.FINE, "THE OWNERAIRLINEIDENTIFIER IS ",
                    accessoryTransactionVo.getCurrOwnerCode());
        } catch (FinderException ex) {
            log
                    .log(Log.INFO,
                            "ACCESSORY STOCK CONFIGB FOR OWNER NOT AVIALABLE FINDER THROWN");
		}

		return accessoriesStockConfigForOwner;
	}

	/**
	 *
	 * @param accessoryTransactionVo
	 * @return
	 * @throws SystemException
	 */
    private AccessoriesStockConfig checkAccessoriesForOperational(
            AccessoryTransactionVO accessoryTransactionVo)
			throws SystemException {
		AccessoriesStockConfig accessoriesForOperational = null;
		log.log(Log.INFO, "INSIDE THE CHECK ACCESSORIES FOR THE OPERATIONAL");
		try {
            accessoriesForOperational = AccessoriesStockConfig.find(
                    accessoryTransactionVo.getCompanyCode(),
                    accessoryTransactionVo.getAccessoryCode(),
                    accessoryTransactionVo.getTransactionStationCode(),
                    accessoryTransactionVo.getOperationalAirlineIdentifier());
            log.log(Log.FINE, "THE OPERATIONAL IDENTIFIER IS ",
                    accessoryTransactionVo.getOperationalAirlineIdentifier());
            log.log(Log.FINE, "THE OPERATIONAL IDENTIFIER IS ",
                    accessoryTransactionVo.getOperationalAirlineIdentifier());
        } catch (FinderException ex) {
            log
                    .log(Log.INFO,
                            "ACCESSORY STOCK CONFIGB FOR OWNER NOT AVIALABLE FINDER THROWN");
		}

		return accessoriesForOperational;

	}

	/*
	 * This method is used to check whether the ULD is In OPERATIONS ON THE
	 * IMPORT EXPORT WAREHOUSE
	 */
	/*
	 * private boolean checkULDInOperations(String companyCode,String uldNumber)
	 * throws SystemException{ boolean isULDInTransaction=false; try{
	 * log.entering("INSIDE THE CONTROLLER","checkULDInOperations");
	 * isULDInTransaction=ULD.checkULDInOperations(companyCode,uldNumber);
//printStackTraccee()(); } return
     * isULDInTransaction; }
	 */

	/**
	 * @param uldTransactionVOs
	 * @throws SystemException
	 */
	// To be reviewed Collection<ULDTransactionVO>
    public void updateLoanedULDStocks(
            Collection<ULDTransactionDetailsVO> uldTransactionVOs)
            throws SystemException {

	}

	/*
	 * The method will do the post ULD Loan Transaction like ULD and Accessory
	 * Stock Updates
	 *
	 * @param Collection<AccessoryTransactionVO>
	 *
	 * @throws SystemException
	 *
	 */
	// To be reviewed Collection<AccessoryTransactionVO>
	/**
	 * @param accessoryTransactionVOs
	 * @throws SystemException
	 */
    private void updateBorrowAccessoryStocks(
            Collection<AccessoryTransactionVO> accessoryTransactionVOs)
			throws SystemException {
		int loaned = 0;

		AccessoriesStockConfig accessoriesForOperational = null;
		AccessoriesStockConfig accessoriesStockConfigForOwner = null;
        log
                .log(Log.INFO,
                        "  CALLED FOR THE BORROWEED ACCESSORY CALLED FOR THE ACCESSORY TRANSACTION");
		for (AccessoryTransactionVO accessoryTransactionVO : accessoryTransactionVOs) {
            log.log(Log.FINE, "ACCESSORY TRANSACTIONS SIZE IS FOUND TO BE ",
                    accessoryTransactionVOs.size());
            log.log(Log.FINE, "ACCESSORY TRANSACTIONS SIZE IS FOUND TO BE ",
                    accessoryTransactionVOs.size());
            log.log(Log.FINE, "ACCESSORY TRANSACTIONS SIZE IS FOUND TO BE ",
                    accessoryTransactionVOs.size());
            accessoriesStockConfigForOwner = null;
            accessoriesForOperational = null;
            loaned = 0;

            new AccessoryTransaction(accessoryTransactionVO);

            log
                    .log(Log.INFO,
                            "INSIDE THE UPDATE BORROW STOCKS FIND WHETHER THE CURRENT OWNER ALREADY EXISTS");
			/*
			 * CHECK ACCESSORIES FOR OWNER EXISTS OR NOT
			 */
			accessoriesStockConfigForOwner = checkAccessoriesForOwner(accessoryTransactionVO);
            log.log(Log.FINE, "ACCESSORY STOCK CONFIG FOR OWNER IS",
                    accessoriesStockConfigForOwner);
            if (accessoriesStockConfigForOwner == null) {
                log
                        .log(
                                Log.INFO,
                                "INSIDE THE UPDATE BORROW STOCKS FINDER EXCEPTION THROWN  CURRENT OWNER NOT THERE");
                AccessoriesStockConfigVO accessoriesStockVo = new AccessoriesStockConfigVO();
                accessoriesStockVo.setAccessoryCode(accessoryTransactionVO
                        .getAccessoryCode());
                accessoriesStockVo.setCompanyCode(accessoryTransactionVO
                        .getCompanyCode());
                accessoriesStockVo.setAirlineIdentifier(accessoryTransactionVO
                        .getCurrOwnerCode());
				/*
				 * accessoriesStockVo.setAvailable(accessoryTransactionVO
				 * .getQuantity()); accessoriesStockVo.setLoaned(loaned);
				 */
				// Added by Preet on 6th Feb for ULD 170 --starts
				accessoriesStockVo.setAvailable(0);
                accessoriesStockVo.setLoaned(accessoryTransactionVO
                        .getQuantity());
                // Added by Preet on 6th Feb for ULD 170 --ends
                accessoriesStockVo.setLastUpdateTime(accessoryTransactionVO
                        .getLastUpdateTime());
                accessoriesStockVo.setLastUpdateUser(accessoryTransactionVO
                        .getLastUpdateUser());
                accessoriesStockVo.setStationCode(accessoryTransactionVO
                        .getTransactionStationCode());
				log.entering("OWNER NOT THERE ", " CREATE CALLED");
				new AccessoriesStockConfig(accessoriesStockVo);

			}
			if (accessoriesStockConfigForOwner != null) {
                log
                        .log(Log.INFO,
                                "INSIDE THE UPDATE FOR ACCESSORIES STOCK CONFIG FOR OWNER ALREDY THERE");
                /*
                 * accessoriesStockConfigForOwner
                 * .setAvailable(accessoriesStockConfigForOwner .getAvailable() +
                 * accessoryTransactionVO.getQuantity());
                 */
                // Added by Preet on 6th Feb for ULD 170 --starts
                accessoriesStockConfigForOwner
                        .setAvailable(accessoriesStockConfigForOwner
                                .getAvailable() != 0 ? !(accessoriesStockConfigForOwner
                                .getAvailable()
                                - accessoryTransactionVO.getQuantity() < 0) ? accessoriesStockConfigForOwner
                                .getAvailable()
                                - accessoryTransactionVO.getQuantity()
								: loaned
								: loaned);

				accessoriesStockConfigForOwner
                        .setLoaned(accessoriesStockConfigForOwner.getLoaned()
                                + accessoryTransactionVO.getQuantity());
				// Added by Preet on 6th Feb for ULD 170 --ends
			}

            log
                    .log(
                            Log.INFO,
							"INSIDE THE UPDATE BORROW STOCKS  FIND accessoriesStockConfigForOwner FIND WHETHER THE OPERATIONAL ALREADY EXISTS");
			log.log(Log.FINE, "accessoryTransactionVO--------->>>>",
					accessoryTransactionVO.getOperationalAirlineIdentifier());
			accessoriesForOperational = checkAccessoriesForOperational(accessoryTransactionVO);
			if (accessoriesForOperational == null) {
                log
                        .log(
                                Log.INFO,
								"INSIDE THE UPDATE BORROW STOCKs FINDER EXCEPTION THROWN OPERATIONAL AIRLINE IDENTIFIER DOES NOT EXISTS");
				AccessoriesStockConfigVO accessoriesStockVo = new AccessoriesStockConfigVO();
                accessoriesStockVo.setAccessoryCode(accessoryTransactionVO
                        .getAccessoryCode());
                accessoriesStockVo.setCompanyCode(accessoryTransactionVO
                        .getCompanyCode());
                accessoriesStockVo.setAirlineIdentifier(accessoryTransactionVO
                        .getOperationalAirlineIdentifier());
				/*
				 * accessoriesStockVo.setAvailable(loaned);
				 * accessoriesStockVo.setLoaned(accessoryTransactionVO
				 * .getQuantity());
				 */
				// Added by Preet on 6th Feb for ULD 170 --starts
                accessoriesStockVo.setAvailable(accessoryTransactionVO
                        .getQuantity());
				accessoriesStockVo.setLoaned(0);
				// Added by Preet on 6th Feb for ULD 170 --ends

                accessoriesStockVo.setLastUpdateTime(accessoryTransactionVO
                        .getLastUpdateTime());
                accessoriesStockVo.setLastUpdateUser(accessoryTransactionVO
                        .getLastUpdateUser());
                accessoriesStockVo.setStationCode(accessoryTransactionVO
                        .getTransactionStationCode());
                log.entering("CONSTRUCTOR CALLED FOR INSERTION OF OPERATIONAL",
                        "CONSTRUCTOR CALLED");
                new AccessoriesStockConfig(accessoriesStockVo);

            }

            if (accessoriesForOperational != null) {
                log
                        .log(Log.INFO,
                                "INSIDE THE UPDATE FOR ACCESSORIES STOCK CONFIG FOR OPERATIONAL  ALREDY THERE");
				/*
				 * accessoriesForOperational
				 * .setAvailable(accessoriesForOperational.getAvailable() != 0 ?
				 * !(accessoriesForOperational .getAvailable() -
				 * accessoryTransactionVO.getQuantity() < 0) ?
				 * accessoriesForOperational .getAvailable() -
				 * accessoryTransactionVO.getQuantity() : loaned : loaned);
				 * accessoriesForOperational.setLoaned(accessoriesForOperational
				 * .getLoaned() + accessoryTransactionVO.getQuantity());
				 */

				accessoriesForOperational
                        .setAvailable(accessoriesForOperational.getAvailable()
                                + accessoryTransactionVO.getQuantity());

			}
		}

	}

	/**
	 *
	 * @param uldTransactionVOs
	 * @throws SystemException
	 */
	// To be reviewed Collection<ULDTransactionVO>
	/*
     * Commented by A-3415 for ICRD-114538
     * public void updateBorrowULDStocks(
            Collection<ULDTransactionDetailsVO> uldTransactionVOs)
            throws SystemException {

    }*/

	/*
	 * The method will do the post ULD Borrow Transaction like ULD and Accessory
	 * Stock Updates
	 *
	 * @param Collection<AccessoryTransactionVO>
	 *
	 * @throws SystemException
	 *
	 */
	// To be reviewed Collection<AccessoryTransactionVO>
	/**
	 * @param accessoryTransactionVO
	 * @throws SystemException
	 */
    public void updateLoanedAccessoryStocks(
            AccessoryTransactionVO accessoryTransactionVO)
            throws SystemException {
        log
                .log(
                        Log.INFO,
						"CREATE METHOD CALLED FOR THE BORROWEED ACCESSORY CONSTRUCTOR CALLED FOR THE ACCESSORY TRANSACTION");
		new AccessoryTransaction(accessoryTransactionVO);

	}



	/**
	 * This method is used for listing uld transaction
	 *
	 * @author A-1883
	 * @param uldTransactionFilterVO
	 * @return TransactionListVO
	 * @throws SystemException
	 */

    public TransactionListVO listULDTransactionDetails(
            TransactionFilterVO uldTransactionFilterVO) throws SystemException {
		log.entering("UldController", "listULDChargingInvoice");
        TransactionListVO transactionListVO = ULDTransaction
                .listULDTransactionDetails(uldTransactionFilterVO);
        log
                .log(Log.FINE,
                        "Calling listAccessoryTransactionDetails() FOR collecting AccessoryDetails");
		TransactionListVO accessoryDetails = AccessoryTransaction
				.listAccessoryTransactionDetails(uldTransactionFilterVO);
		if (transactionListVO != null) {
            transactionListVO.setAccessoryTransactions(accessoryDetails
                    .getAccessoryTransactions());
		}
		log.exiting("UldController", "listULDChargingInvoice");
		return transactionListVO;
	}

	/**
	 *
	 * This method is used fot load testing of loan borrow uld report. ss
	 *
	 * @param uldTransactionFilterVO
	 * @return
	 * @throws SystemException
	 */
    public TransactionListVO findULDTransactionDetailsCol(
            TransactionFilterVO uldTransactionFilterVO) throws SystemException {
        return ULDTransaction
                .findULDTransactionDetailsCol(uldTransactionFilterVO);
	}

	/**
	 * @author A-3278 for QF1015 on 24Jul08 to find the total demmurage
	 *         calculated
	 * @param transactionFilterVO
	 * @return ULDTransactionDetailsVO
	 * @throws SystemException
	 */
    public ULDTransactionDetailsVO findTotalDemmurage(
            TransactionFilterVO transactionFilterVO) throws SystemException {
		return ULDTransaction.findTotalDemmurage(transactionFilterVO);
	}

	/**
	 * This method is used to calculate the Demmurage charges for ULD
	 *
	 * @param uldTransactionDetailsVOs
	 * @return
	 * @throws SystemException
	 * @throws AgreementDoesNotExistsException
	 */
	public Collection<ULDTransactionDetailsVO> calculateULDDemmurage(
			Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs)
            throws SystemException, AgreementDoesNotExistsException,
            CurrencyConversionException {
        log.entering("INSIDE THE CONTROLLER", "calculateReturnULDCharges");
        log.log(Log.INFO, "%%%%%%%%%%%%%%  uldTransactionDetailsVOs ",
                uldTransactionDetailsVOs);
		Collection<ULDTransactionDetailsVO> uldTransactionDetailsVO = new ArrayList<ULDTransactionDetailsVO>();
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		String companyCode = null;
		LocalDate returnDate = null;
		int dayDif = 0;
		double demmurrage = 0;
		double tax = 0;
		double totalDemmurrage = 0;
        if (uldTransactionDetailsVOs != null
                && uldTransactionDetailsVOs.size() > 0) {
            companyCode = uldTransactionDetailsVOs.iterator().next()
                    .getCompanyCode();
            for (ULDTransactionDetailsVO uldTransactionDetailsVo : uldTransactionDetailsVOs) {
                if (!"Y".equalsIgnoreCase(uldTransactionDetailsVo
                        .getPoolOwnerFlag())) {
                    ULDAgreementVO uldAgreementVO = null;
                    ULDAgreementFilterVO uldAgreementFilterVo = new ULDAgreementFilterVO();
                    uldAgreementFilterVo.setCompanyCode(uldTransactionDetailsVo
                            .getCompanyCode());

                    if (LOANED_TRANSACTION.equals(uldTransactionDetailsVo
                            .getTransactionType())) {
                        uldAgreementFilterVo
                                .setPartyCode(uldTransactionDetailsVo
                                        .getToPartyCode());
                    } else {
                        uldAgreementFilterVo
                                .setPartyCode(uldTransactionDetailsVo
                                        .getFromPartyCode());
                    }
                    uldAgreementFilterVo.setPartyType(uldTransactionDetailsVo
                            .getPartyType());
                    uldAgreementFilterVo.setTxnType(uldTransactionDetailsVo
                            .getTransactionType());

                    log.log(Log.INFO, "date before--->",
                            uldTransactionDetailsVo.getTransactionDate());
                    LocalDate tranDate = new LocalDate(LocalDate.NO_STATION,
                            Location.NONE, false);
                    if (uldTransactionDetailsVo.getTransactionDate() != null) {
                        tranDate = new LocalDate(uldTransactionDetailsVo
                                .getTransactionDate(), false);
                        tranDate
                                .setDate(uldTransactionDetailsVo
                                        .getTransactionDate()
                                        .toDisplayDateOnlyFormat());
                        uldAgreementFilterVo.setTransactionDate(tranDate);
                    }
                    log.log(Log.INFO, "date after--->", uldAgreementFilterVo.getTransactionDate());
                    uldAgreementFilterVo.setUldTypeCode(uldTransactionDetailsVo
                            .getUldNumber().substring(0, 3));

                    uldAgreementFilterVo
                            .setTransactionStation(uldTransactionDetailsVo
                                    .getTransactionStationCode());
                    uldAgreementVO = ULDAgreement
                            .findULDAgreementForReturnTransaction(uldAgreementFilterVo);

                    log.log(Log.INFO, "%%%%%%%%%%%%%%  uldAgreementVO ",
                            uldAgreementVO);
					if (uldAgreementVO != null) {
						if (uldTransactionDetailsVo.getReturnDate() != null) {
                            returnDate = new LocalDate(uldTransactionDetailsVo
                                    .getTransactionStationCode(), Location.ARP,
                                    uldTransactionDetailsVo.getReturnDate(),
                                    false);
                        } else {
                            returnDate = new LocalDate(uldTransactionDetailsVo
                                    .getTransactionStationCode(), Location.ARP,
                                    false);
                        }
                        final int seconds = 3600;
                        final int hours = 24;
                        final int millis = 1000 * seconds * hours;
                        if (DEMMURAGE_FREQUENCY_DAILY.equals(uldAgreementVO
                                .getDemurrageFrequency())) {
                            dayDif = new Long(returnDate
                                    .findDifference(tranDate)).intValue();
							dayDif = dayDif / millis;
							if (uldAgreementVO.getFreeLoanPeriod() == 0) {
								if (dayDif == 0) {
                                    demmurrage = uldAgreementVO
                                            .getDemurrageRate();
                                    tax = demmurrage * uldAgreementVO.getTax()
                                            / 100;
                                    totalDemmurrage = demmurrage * tax;
                                } else {
                                    demmurrage = dayDif
                                            * uldAgreementVO.getDemurrageRate();
                                    tax = demmurrage * uldAgreementVO.getTax()
                                            / 100;
									totalDemmurrage = demmurrage * tax;
								}
							} else {
								if (dayDif < 0) {
									demmurrage = 0;
									tax = 0;
									totalDemmurrage = 0;
								} else {
                                    demmurrage = (dayDif - uldAgreementVO
                                            .getFreeLoanPeriod())
                                            * uldAgreementVO.getDemurrageRate();
                                    tax = demmurrage * uldAgreementVO.getTax()
                                            / 100;
                                    totalDemmurrage = demmurrage * tax;
                                }
                            }
                        } else if (DEMURRAGE_FREQUENCY_WEEKLY
                                .equals(uldAgreementVO.getDemurrageFrequency())) {
                            dayDif = new Long(returnDate
                                    .findDifference(tranDate)).intValue();
                            dayDif = dayDif / millis;
                            demmurrage = ((dayDif - uldAgreementVO
                                    .getFreeLoanPeriod()) / 7 + 1)
                                    * uldAgreementVO.getDemurrageRate();
                            tax = demmurrage * uldAgreementVO.getTax() / 100;
                            totalDemmurrage = demmurrage * tax;
                        } else if (DEMMURAGE_FREQUENCY_FORTNIGHTLY
                                .equals(uldAgreementVO.getDemurrageFrequency())) {
                            dayDif = new Long(returnDate
                                    .findDifference(tranDate)).intValue();
                            dayDif = dayDif / millis;
                            demmurrage = ((dayDif - uldAgreementVO
                                    .getFreeLoanPeriod()) / (double)14)
                                    * uldAgreementVO.getDemurrageRate();
                            tax = demmurrage * uldAgreementVO.getTax() / 100;
                            totalDemmurrage = demmurrage * tax;
                        } else if (DEMMURAGE_FREQUENCY_MONTHLY
                                .equals(uldAgreementVO.getDemurrageFrequency())) {
                            int monDif = calculateMonthDifference(returnDate,
                                    tranDate);
                            demmurrage = (monDif
                                    - uldAgreementVO.getFreeLoanPeriod() + 1)
                                    * uldAgreementVO.getDemurrageRate();
                            tax = demmurrage * uldAgreementVO.getTax() / 100;
                            totalDemmurrage = demmurrage * tax;
                        }
                    } else {
                        log.log(Log.INFO,
                                "AGREEMENT DOES NOT EXIXTS ERRORS CREATED");
                        errors.add(new ErrorVO(
                                "uld.defaults.agreementdoesnotexists",
                                new Object[] {

                                        uldTransactionDetailsVo.getUldType(),
                                        uldTransactionDetailsVo
                                                .getTransactionStationCode(),
                                        uldTransactionDetailsVo.getPartyType(),
                                        uldTransactionDetailsVo
                                                .getTransactionType() }));
					}
				} else {
					demmurrage = 0;
				}

				if (errors.size() > 0) {
					log.log(Log.INFO, "ERROR VOS THROWN ");
					AgreementDoesNotExistsException agreementDoesNotExistsException = new AgreementDoesNotExistsException();
					agreementDoesNotExistsException.addErrors(errors);
					throw agreementDoesNotExistsException;
				}
				uldTransactionDetailsVo.setDemurrageAmount(demmurrage);
                uldTransactionDetailsVo.setTotal(totalDemmurrage
                        - uldTransactionDetailsVo.getWaived());
				uldTransactionDetailsVo.setTaxes(tax);

				uldTransactionDetailsVO.add(uldTransactionDetailsVo);
			}
		}
		return uldTransactionDetailsVO;

	}

	/**
	 * This method is used to calculate the Demmurage Details
	 *
	 * @param uldTransactionDetailsVOs
	 * @return
	 * @throws SystemException
	 * @throws AgreementDoesNotExistsException
	 */
	public Collection<ULDTransactionDetailsVO> calculateReturnULDCharges(
			Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs)
            throws SystemException, AgreementDoesNotExistsException,
            CurrencyConversionException {
        log.entering("INSIDE THE CONTROLLER", "calculateReturnULDCharges");
        log.log(Log.INFO, "%%%%%%%%%%%%%%  uldTransactionDetailsVOs ",
                uldTransactionDetailsVOs);
		Collection<ULDTransactionDetailsVO> uldTransactionDetailsVO = new ArrayList<ULDTransactionDetailsVO>();
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		double demuurageFrequency = 0;
		double demurrageAmount = 0;
		String companyCode = null;

        if (uldTransactionDetailsVOs != null
                && uldTransactionDetailsVOs.size() > 0) {
			// Added by Ashraf
			// This is for currencyConversion
            companyCode = uldTransactionDetailsVOs.iterator().next()
                    .getCompanyCode();
			// Added by Ashraf

			for (ULDTransactionDetailsVO uldTransactionDetailsVo : uldTransactionDetailsVOs) {
                if (!"Y".equalsIgnoreCase(uldTransactionDetailsVo
                        .getPoolOwnerFlag())) {
                    ULDAgreementVO uldAgreementVO = null;
                    ULDAgreementFilterVO uldAgreementFilterVo = new ULDAgreementFilterVO();
                    uldAgreementFilterVo.setCompanyCode(uldTransactionDetailsVo
                            .getCompanyCode());

                    // ***change

                    if (LOANED_TRANSACTION.equals(uldTransactionDetailsVo
                            .getTransactionType())) {
                        uldAgreementFilterVo
                                .setPartyCode(uldTransactionDetailsVo
                                        .getToPartyCode());
                    } else {
                        uldAgreementFilterVo
                                .setPartyCode(uldTransactionDetailsVo
                                        .getFromPartyCode());
                    }
                    uldAgreementFilterVo.setPartyType(uldTransactionDetailsVo
                            .getPartyType());
                    uldAgreementFilterVo.setTxnType(uldTransactionDetailsVo
                            .getTransactionType());

                    log.log(Log.INFO, "date before--->",
                            uldTransactionDetailsVo.getTransactionDate());
                    LocalDate tranDate = new LocalDate(LocalDate.NO_STATION,
                            Location.NONE, false);
                    if (uldTransactionDetailsVo.getTransactionDate() != null) {
                        tranDate
                                .setDate(uldTransactionDetailsVo
                                        .getTransactionDate()
                                        .toDisplayDateOnlyFormat());
                        uldAgreementFilterVo.setTransactionDate(tranDate);
                    }
                    log.log(Log.INFO, "date after--->", uldAgreementFilterVo.getTransactionDate());
                    uldAgreementFilterVo.setUldTypeCode(uldTransactionDetailsVo
                            .getUldType());
                    uldAgreementFilterVo
                            .setTransactionStation(uldTransactionDetailsVo
                                    .getTransactionStationCode());
                    uldAgreementVO = ULDAgreement
                            .findULDAgreementForReturnTransaction(uldAgreementFilterVo);

                    log.log(Log.INFO, "%%%%%%%%%%%%%%  uldAgreementVO ",
                            uldAgreementVO);
                    if (uldAgreementVO != null) {
                        log.entering("INSIDE THE CONTROLLER",
                                "ULDAGREEMENT VO NOT NULL");
                        uldTransactionDetailsVo
                                .setAgreementNumber(uldAgreementVO
                                        .getAgreementNumber());
                        uldTransactionDetailsVo.setTaxes(uldAgreementVO
                                .getTax());

                        uldTransactionDetailsVo.setCurrency(uldAgreementVO
                                .getCurrency());

                        if (uldAgreementVO.getDemurrageFrequency().equals(
                                DEMMURAGE_FREQUENCY_DAILY)) {
							demuurageFrequency = 1;
                        } else if (uldAgreementVO.getDemurrageFrequency()
                                .equals(DEMURRAGE_FREQUENCY_WEEKLY)) {
							demuurageFrequency = 7;
                        } else if (uldAgreementVO.getDemurrageFrequency()
                                .equals(DEMMURAGE_FREQUENCY_FORTNIGHTLY)) {
							demuurageFrequency = 14;
                        } else if (uldAgreementVO.getDemurrageFrequency()
                                .equals(DEMMURAGE_FREQUENCY_MONTHLY)) {
                            LocalDate txnDate = uldTransactionDetailsVo
                                    .getTransactionDate();
							log.log(Log.FINE, "THE TRANSACTION DATE ALONE",
                                    uldTransactionDetailsVo
                                            .getTransactionDate());
							txnDate.addDays(uldAgreementVO.getFreeLoanPeriod());
                            log
                                    .log(
                                            Log.FINE,
                                            "THE TRANSACTION DATE WITH FREE LOAN PERIOD ",
                                            txnDate);
                            log.log(Log.FINE, "THE RETURN DATE  ",
                                    uldTransactionDetailsVo.getReturnDate());
                            LocalDate returnDate = uldTransactionDetailsVo
                                    .getReturnDate();
							returnDate.addDays(1);

                            log.log(Log.FINE,
                                    "THE RETURN DATE WITH ONE EXCESS  ",
                                    returnDate);
							if (returnDate.isGreaterThan(txnDate)) {
                                log
                                        .log(Log.INFO,
                                                "RETURN DATE GREATER THAN TRANSCATIONPERIOD+FREELOANPERIOD");

                                int numberOfMonths = calculateMonthDifference(
                                        uldTransactionDetailsVo.getReturnDate(),
                                        txnDate);

                                log.log(Log.FINE, "THE NO OF MONTHS  ",
                                        numberOfMonths);
                                demurrageAmount = numberOfMonths
                                        * uldAgreementVO.getDemurrageRate();

                                log
                                        .log(
                                                Log.FINE,
                                                "THE DEMMURAGE AMOUNT IN CASE OF THE MONTHLY  ",
                                                numberOfMonths);
                            }
                            uldTransactionDetailsVo
                                    .setDemurrageAmount(demurrageAmount);
                            uldTransactionDetailsVO
                                    .add(uldTransactionDetailsVo);

                        }
                        log
                                .log(
                                        Log.FINE,
                                        "THE  INTEGER VALUE OF THE DEMURRAGEFREQUENCY IS >>>>>>>>>> EQUAL TO ======",
										demuurageFrequency);
                        if (!uldAgreementVO.getDemurrageFrequency().equals(
                                DEMMURAGE_FREQUENCY_MONTHLY)) {

                            if ((Double.parseDouble(uldTransactionDetailsVo
                                    .getTransationPeriod()) - (double) uldAgreementVO
                                    .getFreeLoanPeriod()) > 0) {
								demurrageAmount = Math
                                        .ceil((Double
                                                .parseDouble(uldTransactionDetailsVo
                                                        .getTransationPeriod()) - (double) uldAgreementVO
                                                .getFreeLoanPeriod())
                                                / demuurageFrequency)
                                        * uldAgreementVO.getDemurrageRate();
                                log.log(Log.FINE, "THE DEMURRAGE AMOUNT IS ",
                                        demurrageAmount);
                            }

                            log
                                    .log(
                                            Log.FINE,
                                            "THE TRANSACTIONPERIOD  TRANSACTION PERIOD  IS ",
                                            uldTransactionDetailsVo
                                                    .getTransationPeriod());
                            log.log(Log.FINE,
                                    "THE NO OF MONTHS NO OF MONTHS  ",
                                    uldTransactionDetailsVo
                                                            .getNumberMonths());
                            uldTransactionDetailsVo
                                    .setDemurrageAmount(demurrageAmount);
                            log.log(Log.INFO,
                                    "%%%%%%%%%%%%%%%%%%%%  damageStatus",
                                    uldTransactionDetailsVo
                                                    .getDamageStatus());
                            uldTransactionDetailsVO
                                    .add(uldTransactionDetailsVo);

                        }
                    } else {
                        log.log(Log.INFO,
                                "AGREEMENT DOES NOT EXIXTS ERRORS CREATED");
                        errors.add(new ErrorVO(
                                "uld.defaults.agreementdoesnotexists",
                                new Object[] {

                                        uldTransactionDetailsVo.getUldType(),
                                        uldTransactionDetailsVo
                                                .getTransactionStationCode(),
                                        uldTransactionDetailsVo.getPartyType(),
                                        uldTransactionDetailsVo
                                                .getTransactionType() }));
                    }
                } else {
                    uldTransactionDetailsVO.add(uldTransactionDetailsVo);
                }
            }
        }
        log
                .log(
                        Log.FINE,
                        "THE SIZE OF THE ULDTRANSACTIONDETAILSVO IS EQUAL TO ==========",
						uldTransactionDetailsVO.size());
		if (errors.size() > 0) {
			log.log(Log.INFO, "ERROR VOS THROWN ");
			AgreementDoesNotExistsException agreementDoesNotExistsException = new AgreementDoesNotExistsException();
			agreementDoesNotExistsException.addErrors(errors);
			throw agreementDoesNotExistsException;
		}
        log.log(Log.FINE, "THE ULD TRANSCATION DETAILS VOS ARE ",
                uldTransactionDetailsVO);
		/*
		 * Doing currency conversion from currency specified in the Agreement
		 * and the company Currency Done by AshrafBinu
		 */
		int airlineId = 0;
		String systemCurrecy = "";
		CurrencyConvertorVO currencyConvertorVO = new CurrencyConvertorVO();
		Collection<String> systemparameterCodes = new ArrayList<String>();
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		Map<String, String> map = new HashMap<String, String>();
		systemparameterCodes.add(SYSPAR_BASE);
		systemparameterCodes.add(SYSPAR_EXCHANGERATE);
		/**
		 * Implementing Exchange Rates according to CRINT1122
		 */
		/*
		 * Getting system parameters for Exchange Rates and base Currency
		 */
		try {
            map = new SharedDefaultsProxy()
                    .findSystemParameterByCodes(systemparameterCodes);
		} catch (ProxyException proxyException) {
			new SystemException(proxyException.getErrors());
		}
		String sysparBaseCurrency = map.get(SYSPAR_BASE);
		String sysparExchangeRate = map.get(SYSPAR_EXCHANGERATE);
		String[] sysparRate = sysparExchangeRate.split(",");
		int length = sysparRate.length;

		for (ULDTransactionDetailsVO transactionDetailsVO : uldTransactionDetailsVO) {
			if (!"Y".equalsIgnoreCase(transactionDetailsVO.getPoolOwnerFlag())) {
				if (!systemCurrecy.equals(transactionDetailsVO.getCurrency())) {
                    if (LOANED_TRANSACTION.equals(transactionDetailsVO
                            .getTransactionType())) {
                        airlineId = transactionDetailsVO
                                .getFromPartyIdentifier();
					} else {
						airlineId = transactionDetailsVO.getToPartyIdentifier();
					}
					// try{
					currencyConvertorVO.setCompanyCode(companyCode);
                    currencyConvertorVO.setAirlineIdentifier(logonAttributes
                            .getOwnAirlineIdentifier());
					currencyConvertorVO.setToCurrencyCode(sysparBaseCurrency);
                    currencyConvertorVO.setRatePickUpDate(new LocalDate(
                            LocalDate.NO_STATION, Location.NONE, false));

                    currencyConvertorVO
                            .setFromCurrencyCode(transactionDetailsVO
                                    .getCurrency());
					double conversionRate = 0;
					for (int i = 0; i < length; i++) {
						currencyConvertorVO.setRatingBasisType(sysparRate[i]);
                        conversionRate = new SharedCurrencyProxy()
                                .findExchangeRate(currencyConvertorVO);
						if (conversionRate != 0) {
							break;
						}
					}
                    log.log(Log.INFO, "%%%%%%%%%%%% currencyVO ",
                            conversionRate);
					if (conversionRate == 0) {
						CurrencyConversionException currencyConversionException = new CurrencyConversionException();

						currencyConversionException
                                .addError(new ErrorVO(
                                        CurrencyConversionException.CURRENCY_CONVERSION_IS_NOT_DEFINED,
                                        new Object[] { transactionDetailsVO
                                                .getCurrency() }));
						throw currencyConversionException;
					}
					systemCurrecy = sysparBaseCurrency;
					transactionDetailsVO.setCurrency(sysparBaseCurrency);
                    transactionDetailsVO
                            .setDemurrageAmount(transactionDetailsVO
                                    .getDemurrageAmount()
                                    * conversionRate);
                    log.log(Log.INFO, "CURRENCY CONVERSION RATE IS ----->",
                            conversionRate);
                    log.log(Log.INFO, "transactionDetailsVO.getTaxes() ----->",
                            transactionDetailsVO.getTaxes());
					// Added by Preet on 3rd Apr for AirNZ 517 starts
					// Taxes= Tax percentage of Demurrage Amount
					double demAmt = transactionDetailsVO.getDemurrageAmount();
                    log.log(Log.INFO, "DEM AMOUNNT AFTER CONVERSION ----->",
                            demAmt);
					double taxPercent = transactionDetailsVO.getTaxes();
                    log.log(Log.INFO, "TAX PERCENT DEFINES IS ----->",
                            taxPercent);
					double taxPercentOfDem = (taxPercent / 100) * demAmt;
                    log.log(Log.INFO, "TAX PERCENT OF DEM IS ----->",
                            taxPercentOfDem);
					transactionDetailsVO.setTaxes(taxPercentOfDem);
					/*
                     * transactionDetailsVO.setTaxes(transactionDetailsVO.getTaxes()
                     * currencyVO.getConversionRate());
					 */
					// Added by Preet on 3rd Apr for AirNZ 517 ends
					// }catch(ProxyException proxyException){
					// log.log(Log.INFO,"%%%%%%%%%%%% CurrencyException
					// "+proxyException.getErrors());
					// errors.add(new
					// ErrorVO(AgreementDoesNotExistsException.CURRENCY_CONVERSION_IS_NOT_DEFINED
					// ,
					// new Object[] {transactionDetailsVO.getCurrency()}));
					// }
				}
			}
		}
		if (errors.size() > 0) {
			AgreementDoesNotExistsException agreementDoesNotExistsException = new AgreementDoesNotExistsException();
			agreementDoesNotExistsException.addErrors(errors);
			throw agreementDoesNotExistsException;
		}
        log.log(Log.INFO, "@@@@@@@@@@@  returning from calculatereturnCharges",
                uldTransactionDetailsVO);
		return uldTransactionDetailsVO;
	}

	/**
	 *
	 * @param returnDate
	 * @param transdate
	 * @return
	 * @throws SystemException
	 */
	/*
	 * This method is used to calculate the no of months between the two dates
	 * taking in to account the months involved (i.e irrespective of the no of
	 * days).
	 */

    private int calculateMonthDifference(LocalDate returnDate,
            LocalDate transdate) throws SystemException {
        log.entering("CALCULATE THE MONTHDIFFERENCE ",
                "calculateMonthDifference");

		log.log(Log.FINE, "transdate==========", transdate);
		log.log(Log.FINE, "returnDate==========", returnDate);
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

        LocalDate transactionDate = new LocalDate(logonAttributes
                .getAirportCode(), Location.ARP, true);
        transactionDate.setDateAndTime(transdate.toDisplayFormat("dd-MMM-yyyy hh:mm:ss"));/*Modified by A-5782 for ICRD-109193*/

		final int seconds = 3600;
		final int hours = 24;
		final int millis = 1000 * seconds * hours;
		final int days = 365;

		/** Find Out Day Difference Start * */

		long tDate = transdate.getTimeInMillis();
		long rDate = returnDate.getTimeInMillis();
		long diff = rDate - tDate;
		long dayDiff = (diff / millis);

		/** Find Out Day Difference End * */

		/** Find Out Month Difference Start * */
		int monthDiff = (int) (dayDiff / days) * 12;
		// LocalDate temp = transdate.addMonths(monthDiff);
		LocalDate temp = transactionDate.addMonths(monthDiff);

		long tDiff = 0;

		log.log(Log.FINE, "be4 transdate==========", transdate);
		log.log(Log.FINE, "be4 transdate==========", transactionDate);
		while (temp.isLesserThan(returnDate)) {
			temp.addMonths(1);
			log.log(Log.FINE, "after transdate==========", transdate);
			log.log(Log.FINE, "after transdate==========", transactionDate);
			tDiff += 1;
		}

		/*
		 * if (transdate.get(Calendar.DAY_OF_MONTH) >= returnDate
		 * .get(Calendar.DAY_OF_MONTH)) { tDiff += 1; }
		 */

        log.log(Log.FINE, "transdate.get(Calendar.DAY_OF_MONTH==========",
                transdate.get(Calendar.DAY_OF_MONTH));
        log.log(Log.FINE, "returnDate.get(Calendar.DAY_OF_MONTH==========",
                returnDate.get(Calendar.DAY_OF_MONTH));
		log.log(Log.FINE, "transdate.get(Calendar.YEAR==========", transdate.get(Calendar.YEAR));
		log.log(Log.FINE, "returnDate.get(Calendar.YEAR==========", returnDate.get(Calendar.YEAR));
        if ((transdate.get(Calendar.DAY_OF_MONTH) >= returnDate
                .get(Calendar.DAY_OF_MONTH))
                && (returnDate.get(Calendar.YEAR) > transdate
                        .get(Calendar.YEAR))) {
			tDiff += 1;
			log.log(Log.ALL, "inside if");
		}
		// Added by A-2412 ends

		monthDiff += tDiff;

        log.log(Log.FINE,
                " INSIDE CALCULATE MONTHDIFFERENCE THE MONTH DIFFRENCE  IS ",
                monthDiff);
		return monthDiff;
	}

	/**
	 * This method is used for listing uld Invoice
	 *
	 * @author A-1883
	 * @param chargingInvoiceFilterVO
	 * @param pageNumber
	 * @return Page<ULDChargingInvoiceVO>
	 * @throws SystemException
	 */
    public Page<ULDChargingInvoiceVO> listULDChargingInvoice(
            ChargingInvoiceFilterVO chargingInvoiceFilterVO, int pageNumber)
            throws SystemException {
        log.entering("UldController", "listULDChargingInvoice");
        return ULDChargingInvoice.listULDChargingInvoice(
                chargingInvoiceFilterVO, pageNumber);
	}

	/**
	 * This method is used for listing uld Invoice Details
	 *
	 * @author A-1883
	 * @param companyCode
	 * @param invoiceRefNumber
	 * @return Collection<ULDTransactionDetailsVO>
	 * @throws SystemException
	 */
    public Collection<ULDTransactionDetailsVO> viewULDChargingInvoiceDetails(
            String companyCode, String invoiceRefNumber) throws SystemException {
		log.entering("UldController", "viewULDChargingInvoiceDetails");
        //Added by A-7359 for ICRD-248560 starts here
        Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs= new ArrayList<ULDTransactionDetailsVO>();
        uldTransactionDetailsVOs=ULDChargingInvoice.viewULDChargingInvoiceDetails(companyCode,
                invoiceRefNumber);
        Collection<String> systemParameterCodes = new ArrayList<String>();
		Map<String, String> systemParameterMap = new HashMap<String, String>();
        systemParameterCodes.add(SYSPAR_ULDINVCURRENCY);
        try {
			systemParameterMap = new SharedDefaultsProxy().findSystemParameterByCodes(systemParameterCodes);
		} catch (ProxyException ex) {
			throw new SystemException(ex.getMessage());
		}
		String sysparUldInvCurrency = systemParameterMap.get(SYSPAR_ULDINVCURRENCY);
        for (ULDTransactionDetailsVO detailsVO : uldTransactionDetailsVOs) {
        	double conversionValue=0.0;
			try {
				conversionValue = convertCurrency(companyCode,detailsVO.getOperationalAirlineIdentifier(),detailsVO.getCurrency(),sysparUldInvCurrency);
			} catch (CurrencyConversionException e) {
				throw new SystemException(e.getErrors());
			}
			detailsVO.setDemurrageAmount(detailsVO.getDemurrageAmount()*conversionValue);
			detailsVO.setWaived(detailsVO.getWaived()*conversionValue);
			detailsVO.setTotal(detailsVO.getTotal()*conversionValue);
        }
        log.exiting("UldController", "viewULDChargingInvoiceDetails");
        //Added by A-7359 for ICRD-248560 ends here
        return uldTransactionDetailsVOs;
	}

	/**
	 *
	 * @param uldChargingInvoiceVO
	 * @param uldTransactionDetailsVOs
	 * @return
	 * @throws SystemException
	 */
    public String generateInvoiceForReturnedUlds(
            ULDChargingInvoiceVO uldChargingInvoiceVO,
            Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs)
            throws SystemException {
        log.entering("UldController", "generateInvoiceForReturnedUlds"
                + uldTransactionDetailsVOs);
        Collection<String> systemParameterCodes = new ArrayList<String>();
		Map<String, String> systemParameterMap = new HashMap<String, String>();
        systemParameterCodes.add(SYSPAR_ULDINVCURRENCY);
        try {
        	systemParameterMap = Proxy.getInstance().get(SharedDefaultsProxy.class).findSystemParameterByCodes(systemParameterCodes);
		} catch (ProxyException ex) {
			throw new SystemException(ex.getMessage());
		}
		String sysparUldInvCurrency = systemParameterMap.get(SYSPAR_ULDINVCURRENCY);
		if(sysparUldInvCurrency!=null){
			uldChargingInvoiceVO.setCurrencyCode(sysparUldInvCurrency);
		}
        if (uldTransactionDetailsVOs != null
                && uldTransactionDetailsVOs.size() > 0) {
        for (ULDTransactionDetailsVO detailsVO : uldTransactionDetailsVOs) {

        	double conversionValue=0.0;
        	if(Objects.nonNull(detailsVO.getCurrency())){
				try {
					conversionValue = convertCurrency(detailsVO.getCompanyCode(),detailsVO.getOperationalAirlineIdentifier(),detailsVO.getCurrency(),sysparUldInvCurrency);
				} catch (CurrencyConversionException e) {
					LOGGER.log(Log.SEVERE, e);		
					throw new SystemException(e.getErrors());
				}	
			}
			// Added by a-3278 for AirNZCR417 begins
            uldChargingInvoiceVO.setTotalAmount(uldChargingInvoiceVO
                    .getTotalAmount()
                     + ((detailsVO.getDemurrageAmount() + detailsVO.getWaived())*conversionValue));
            uldChargingInvoiceVO.setWaiverAmount(uldChargingInvoiceVO
                    .getWaiverAmount()
                     + (detailsVO.getWaived()*conversionValue));
            uldChargingInvoiceVO.setNetAmount(uldChargingInvoiceVO
                    .getNetAmount()
                     + (detailsVO.getDemurrageAmount()*conversionValue));
			// Added by a-3278 for AirNZCR417 ends
		}
        }
        ULDChargingInvoice uLDChargingInvoice = new ULDChargingInvoice(
                uldChargingInvoiceVO);
		log.log(Log.FINE, "ULDCharging InvoiceVO : ", uLDChargingInvoice);
        String invoiceRefNumber = uLDChargingInvoice.getUldChargingInvoicePK()
                .getInvoiceRefNumber();

        log.log(Log.FINE, "Invoice Generated with Ref Number :",
                invoiceRefNumber);
        if (uldTransactionDetailsVOs != null
                && uldTransactionDetailsVOs.size() > 0) {
		performAuditForInvoice(uldChargingInvoiceVO, uldTransactionDetailsVOs);

			if (uldChargingInvoiceVO.isRepairInvoice()) {
				log.log(Log.FINE, "Repair Invoice");
				for (ULDTransactionDetailsVO detailsVO : uldTransactionDetailsVOs) {
                    ULDRepair uLDRepair = ULDRepair.find(detailsVO
                            .getCompanyCode(), detailsVO.getUldNumber(),
							detailsVO.getRepairSeqNumber());
					uLDRepair.setInvoiceRefNumber(invoiceRefNumber);
                    log.log(Log.FINE, "detailsVO.getLastUpdateTime()------->>",
                            detailsVO.getLastUpdateTime());
					uLDRepair.setLastUpdateTime(detailsVO.getLastUpdateTime());
					uLDRepair.setLastUpdateUser(detailsVO.getLastUpdateUser());
				}
			} else {
				log.log(Log.FINE, "Transaction Invoice");
				for (ULDTransactionDetailsVO detailsVO : uldTransactionDetailsVOs) {

					log.log(Log.FINE, "Transaction Invoice");
                    ULDTransaction uLDTransaction = ULDTransaction.find(
                            detailsVO.getCompanyCode(), detailsVO
                                    .getUldNumber(), detailsVO
                                    .getTransactionRefNumber());
					uLDTransaction.setInvoiceRefNumber(invoiceRefNumber);
					// Added new
					uLDTransaction.setWaived(detailsVO.getWaived());
					uLDTransaction.setTotal(detailsVO.getDemurrageAmount());
                    uLDTransaction
                            .setTransactionStatus(ULDTransactionDetailsVO.INVOICED);

                    log
                            .log(Log.FINE,
                                    "---***setting partytype,Tot,Net,Waiver amt****---");

                    uLDTransaction.setLastUpdateUser(detailsVO
                            .getLastUpdateUser());
                    uLDTransaction.setLastUpdateTime(detailsVO
                            .getLastUpdateTime());

					log.log(Log.FINE, "---***Values are set ****---");

				}
			}
		}

        //Added by A-7656 for ICRD-240667
        try {
            LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
            AccountingFilterVO accountingFilterVO = new AccountingFilterVO();
            accountingFilterVO.setCompanyCode(logonAttributes.getCompanyCode());
            accountingFilterVO.setLastUpdatedUser(logonAttributes.getUserName());
            accountingFilterVO.setInvoiceNumber(invoiceRefNumber);
            accountingFilterVO.setSubSystem(SUBSYSTEM_ULD);
            accountingFilterVO.setFunctionPoint(FUNCTION_POINT_ULD_INVOICING);
            new CRAAccountingProxy().generateULDAccountingEntries(accountingFilterVO);
        } catch (ProxyException e) {
            log.log(Log.SEVERE, "Error occured during accounting entry creation");
        }


		log.exiting("UldController", "generateInvoiceForReturnedUlds");
		return invoiceRefNumber;
	}

	/**
	 * 	Method		:	ULDController.convertCurrency
	 *	Added by 	:	A-7359 on 09-Jun-2018
	 * 	Used for 	:	ICRD-248560
	 *	Parameters	:	@param totalAmount
	 *	Parameters	:	@param currency
	 *	Parameters	:	@return 
	 *	Return type	: 	double
     * @param uldChargingInvoiceVO 
     * @throws SystemException 
     * @throws CurrencyConversionException 
	 */
	private double convertCurrency( String companyCode,int airlineIdentifier, String fromCurrency,String toCurrency) throws SystemException, CurrencyConversionException {
		log.entering("UldController", "convertCurrency");
		Collection<String> systemParameterCodes = new ArrayList<String>();
		Map<String, String> systemParameterMap = new HashMap<String, String>();
		systemParameterCodes.add(SYSPAR_EXCHANGERATE);
		try {
			systemParameterMap = Proxy.getInstance().get(SharedDefaultsProxy.class).findSystemParameterByCodes(systemParameterCodes);
		} catch (ProxyException ex) {
			throw new SystemException(ex.getMessage());
		}
		String sysparExchangeRate = systemParameterMap.get(SYSPAR_EXCHANGERATE);
		String[] sysparRate = sysparExchangeRate.split(",");
		int length = sysparRate.length;
		double converRate = 0.0;
		log.log(Log.INFO, "!!!!!From currency", fromCurrency);
		log.log(Log.INFO, "!!!!!To currency", toCurrency);
//		try {
		if(Objects.nonNull(fromCurrency)){ 
			if (fromCurrency.equals(toCurrency) ) {
				converRate = 1.0;
			} else {
				CurrencyConvertorVO currencyConvertorVO = new CurrencyConvertorVO();
				currencyConvertorVO.setCompanyCode(companyCode);
				currencyConvertorVO.setAirlineIdentifier(airlineIdentifier);
				currencyConvertorVO.setToCurrencyCode(toCurrency);
				currencyConvertorVO.setRatePickUpDate(new LocalDate(
						LocalDate.NO_STATION, Location.NONE, false));
				currencyConvertorVO.setFromCurrencyCode(fromCurrency);
				for (int i = 0; i < length; i++) {
					currencyConvertorVO.setRatingBasisType(sysparRate[i]);
					converRate = new SharedCurrencyProxy()
							.findExchangeRate(currencyConvertorVO);
					if (!(converRate == 0)) {
						break;
					}
				}
			} 
			}
			if (converRate == 0) {
				CurrencyConversionException currencyConversionException = new CurrencyConversionException();
				currencyConversionException
						.addError(new ErrorVO(
								CurrencyConversionException.CURRENCY_CONVERSION_IS_NOT_DEFINED,
								new Object[] { fromCurrency }));
				throw currencyConversionException;
			} 
//		}catch (CurrencyConversionException e) {
//			log.log(Log.FINE, " \n %^%^%^%^%^");
//			throw new CurrencyConversionException(
//					CurrencyConversionException.CURRENCY_CONVERSION_IS_NOT_DEFINED,
//					new Object[] { fromCurrency });
//		}
		log.exiting("UldController", "convertCurrency");
		return Double.valueOf(converRate);
	}
	/**
	 *
	 * A-1950
	 *
	 * @param chargingInvoiceVO
	 * @param uldTransactionDetailsVOs
	 * @throws SystemException
	 */
	public void performAuditForInvoice(ULDChargingInvoiceVO chargingInvoiceVO,
            Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs)
            throws SystemException {
        log
                .log(Log.FINE,
                        "---------setting uldAuditVO VO-------***************************************");

		for (ULDTransactionDetailsVO transactionDetailsVO : uldTransactionDetailsVOs) {

            ULDAuditVO uldAuditVO = new ULDAuditVO(ULDChargingInvoiceVO.MODULE,
                    ULDChargingInvoiceVO.SUBMODULE, ULDChargingInvoiceVO.ENTITY);

			// uldAuditVO = (ULDAuditVO) AuditUtils
			// .populateAuditDetails(uldAuditVO, uLDChargingInvoice ,
			// true);

			uldAuditVO.setActionCode(GENERATE_ULDTXNINV);

			uldAuditVO.setAuditRemarks(chargingInvoiceVO.getInvoiceRemark());
			// AuditUtils.performAudit(uldAuditVO);
			StringBuffer additionalInfo = new StringBuffer();

			uldAuditVO.setCompanyCode(chargingInvoiceVO.getCompanyCode());
			uldAuditVO.setUldNumber(transactionDetailsVO.getUldNumber());

            LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                    .getLogonAttributesVO();
            String airportCode = logonAttributes.getAirportCode();

            uldAuditVO
                    .setTxnTime(new LocalDate(airportCode, Location.ARP, true)
                            .toGMTDate());

            uldAuditVO.setTxnLocalTime(new LocalDate(airportCode, Location.ARP,
                    true));
			uldAuditVO.setAuditRemarks(chargingInvoiceVO.getInvoiceRemark());
			uldAuditVO.setUserId(chargingInvoiceVO.getLastUpdatedUser());

			additionalInfo.append("PartyCode - ");
			additionalInfo.append(chargingInvoiceVO.getInvoicedToCode());

			additionalInfo.append(",");
			additionalInfo.append("DemurragAmount - ");
			additionalInfo.append(transactionDetailsVO.getDemurrageAmount());

			additionalInfo.append(",");
			additionalInfo.append("WaiverAmount - ");
			additionalInfo.append(transactionDetailsVO.getWaived());

			additionalInfo.append(",");
			additionalInfo.append("TotalAmount - ");
			additionalInfo.append(transactionDetailsVO.getTotal());

			uldAuditVO.setAdditionalInformation(additionalInfo.toString());
            log
                    .log(
                            Log.FINE,
                            "---------setting uldAuditVO.getAdditionalInformation()------*****************",
							uldAuditVO.getAdditionalInformation());
			AuditUtils.performAudit(uldAuditVO);
			// added by a-3045 for bug 28905 ends
            log.exiting("performAuditForInvoice",
                    "...Finished audit for performAuditForInvoice");
		}
	}

	/**
	 *
	 * @param transactionListVO
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 */
	/*
	 * This method is used for Saving the Returned ULDs and Accessories
	 */
	public void saveReturnTransaction(TransactionListVO transactionListVO)
            throws SystemException, MessageConfigException,
            ULDDefaultsBusinessException, CurrencyConversionException,
			DimensionConversionException {
		log.entering("INSIDE THE CONTROLLER", "saveReturnTransaction");
		if (transactionListVO.getTransactionType().equals(LOANED_TRANSACTION)) {
			returnLoanTransactions(transactionListVO);
        } /* Commented by A-3415 for ICRD-114538 since we will no longer have Borrow transaction
        else {
            returnBorrowTransactions(transactionListVO);
        }*/

	}

	/**
	 *
	 * @param transactionListVO
	 * @throws SystemException
	 */
    private void returnLoanTransactions(TransactionListVO transactionListVO)
            throws SystemException {
        int loaned = 0;
        if (transactionListVO.getUldTransactionsDetails() != null) {
            for (ULDTransactionDetailsVO uldTransactionDetailVO : transactionListVO
                    .getUldTransactionsDetails()) {
				ULDAirportLocationVO uLDAirportLocationVO = null;
				ULD uld = null;
				loaned = 0;
				log.entering("saveReturnTransaction", "TRANSCTION IS LOANED");
                ULDTransaction uldTransaction = ULDTransaction.find(
                        uldTransactionDetailVO.getCompanyCode(),
                        uldTransactionDetailVO.getUldNumber(),
                        uldTransactionDetailVO.getTransactionRefNumber());
                log.log(Log.INFO, "CALLING THE UPDATE METHOD");

                ULDAuditVO uldAuditVO = new ULDAuditVO(TransactionVO.MODULE,
                        TransactionVO.SUBMODULE, TransactionVO.ENTITY);
                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                        uldAuditVO, uldTransaction, false);
                log.log(Log.INFO, "TransactionStatus", uldTransactionDetailVO.getTransactionStatus());
                uldTransactionDetailVO
                        .setTransactionStatus(ULDTransactionDetailsVO.TO_BE_INVOICED);
                log.log(Log.INFO, "TransactionStatus", uldTransactionDetailVO.getTransactionStatus());
                log.log(Log.INFO, "CALLING THE UPDATE METHOD");
                // added by a-3045 for bug20383 ends
                uldTransaction.update(uldTransactionDetailVO);

                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                        uldAuditVO, uldTransaction, false);

                collectReturnTransactionDetails(uldTransaction, uldAuditVO,
                        uldTransactionDetailVO);

                uldAuditVO.setActionCode(RETURN_ULDLOANTRANSACTION);
                uldAuditVO.setAuditRemarks(uldTransactionDetailVO
                        .getReturnRemark());
                AuditUtils.performAudit(uldAuditVO);

                if (PARTYTYPE_AIRLINE.equals(uldTransactionDetailVO
                        .getPartyType())) {
                    uld = checkULDExistsForReturn(uldTransactionDetailVO);
                    log.entering("saveReturnTransaction",
                            "TRANSCTION IS LOANED CALLING THE UPDATE");
                    log.log(Log.FINE,
                            "THE OWNERAIRLINEIDENTIFIER FROM THE ULDMST ", uld.getOwnerAirlineIdentifier());
                    log
                            .log(
                                    Log.FINE,
                                    "THE CURRENT OWNER CODE FROM THE ULDTRANSACTION DETAILS VO",
                                    uldTransactionDetailVO
                                            .getCurrOwnerCode());
                    uld.setLoanReferenceNumber(loaned);
                    uld.setOperationalAirlineIdentifier(uldTransactionDetailVO
                            .getCurrOwnerCode());
					/*
					 * modified by a-3278 for 28897 on 06Jan09 a new CRN is
					 * maintained to save the latest and the old CRN seperately
					 * the newCRN is updated as the CRN for the ULD
					 */
					// uld.setControlReceiptNumber(null);
                    uld.setControlReceiptNumber(uldTransactionDetailVO
                            .getReturnCRN());
                    // Added by Preet on Feb 19th --starts
                    // To update the stock of the station where ULD is returned
                    if (new LocalDate(uld.getCurrentStation(), Location.ARP,
                            uld.getLastMovementDate(), true).toGMTDate()
                            .before(
                                    uldTransactionDetailVO.getReturnDate()
                                            .toGMTDate())) {
                        uld.setCurrentStation(uldTransactionDetailVO
                                .getReturnStationCode());
					}
					// added by nisha for QF1013 starts
					uld.setScmDate(null);
					uld.setScmFlag(null);
					// QF1501
					uld.setAgentCode(null);
					uld.setAgentStation(null);
					// ends
					// Added by Preet on Feb 19th --ends
					// Added by a-3278 for bug 18010 on 08Sep08
				} else {
					uld = checkULDExistsForReturn(uldTransactionDetailVO);
                    uLDAirportLocationVO = ULD.findCurrentLocation(
                            uldTransactionDetailVO.getCompanyCode(),
                            uldTransactionDetailVO.getReturnStationCode(),
                            CONTENT_EMPTY);
                    if (uLDAirportLocationVO != null) {
                        uld.setFacilityType(uLDAirportLocationVO
                                .getFacilityType());
						uld.setLocation(uLDAirportLocationVO.getFacilityCode());
					} else {
						uld.setLocation(ULDVO.NO_LOCATION);
						uld.setFacilityType(ULDVO.NO_LOCATION);
					}
					uld.setLoanReferenceNumber(loaned);
					// Added by Preet on Feb 19th --starts
					// To update the stock of the station where ULD is returned
                    if (new LocalDate(uld.getCurrentStation(), Location.ARP,
                            uld.getLastMovementDate(), true).toGMTDate()
                            .before(
                                    uldTransactionDetailVO.getReturnDate()
                                            .toGMTDate())) {
                        uld.setCurrentStation(uldTransactionDetailVO
                                .getReturnStationCode());
					}
					// added by nisha for QF1013 starts
					uld.setScmDate(null);
					uld.setScmFlag(null);
					// QF1501
					uld.setAgentCode(null);
					uld.setAgentStation(null);
					// ends
					// Added by Preet on Feb 19th --ends
					// In case of AGENT and OTHERS , relasedTo will be set to
					// null on returning
					uld.setReleasedTo(null);

					// Added by Preet on 27Aug08 --starts
					// When Agent Loan Txn is returned, the RTNSTA for the
					// ULDINTMVTDTL is updated to 'R'
                    LogonAttributes logonAttributes = ContextUtils
                            .getSecurityContext().getLogonAttributesVO();
                    ULDIntMvtHistoryFilterVO uldIntMvtFilterVO = new ULDIntMvtHistoryFilterVO();
                    uldIntMvtFilterVO.setCompanyCode(logonAttributes
                            .getCompanyCode());
                    uldIntMvtFilterVO.setUldNumber(uldTransactionDetailVO
                            .getUldNumber());
                    uldIntMvtFilterVO
                            .setReasonForMvt(ULDAirportLocationVO.FACLITY_AGENTLOC);
                    Page<ULDIntMvtDetailVO> uldIntMvtVOs = findIntULDMovementHistory(
                            uldIntMvtFilterVO, 1);
                    log.log(Log.INFO, " uldIntMvtVOs FOUND ARE --->>> ",
                            uldIntMvtVOs);
                    if (uldIntMvtVOs != null && uldIntMvtVOs.size() > 0) {
                        ULDIntMvtDetailVO latestMvtVo = uldIntMvtVOs
                                .get(uldIntMvtVOs.size() - 1);
                        if (latestMvtVo != null) {
                            ULDIntMvtDetail latestMvt = null;
                            latestMvt = ULDIntMvtDetail.find(latestMvtVo
                                    .getCompanyCode(), latestMvtVo
                                    .getUldNumber(), latestMvtVo
                                    .getIntSequenceNumber(), latestMvtVo
                                    .getIntSerialNumber());
                            log.log(Log.INFO, " MOVEMENT DEATIL FOUND IS --- ",
                                    latestMvt);
                            if (latestMvt != null) {
                                latestMvt
                                        .setReturnStatus(ULDIntMvtDetailVO.FLAG_YES);
                            }
                        }

                    }
                    // Added by Preet on 27Aug08 --ends
                }
            }
        }
        if (transactionListVO.getAccessoryTransactions() != null
                && transactionListVO.getAccessoryTransactions().size() > 0) {
            try {
                returnAcessoryTransactions(transactionListVO
                        .getAccessoryTransactions());
            } catch (ULDDefaultsBusinessException e) {
                log.log(Log.FINE, "exception catched -0--------");
                e.getMessage();
            }
        }
    }

    /**
     *
     * @param uldTransactionDetailVO
     * @return
     * @throws SystemException
     */
    private ULD checkULDExistsForReturn(
            ULDTransactionDetailsVO uldTransactionDetailVO)
            throws SystemException {
        log.log(Log.INFO,
                "CHECK ULDEXISTS IN THE ULDMST FOR RETURN  ULD/ACCESSORIES");
        ULD uld = null;
        try {
            uld = ULD.find(uldTransactionDetailVO.getCompanyCode(),
                    uldTransactionDetailVO.getUldNumber());
        } catch (FinderException ex) {
            log
                    .log(Log.INFO,
                            "SYSTEM EXCEPTION IS THROWN IN CASE OF checkULDExistsForReturn");
			// throw new SystemException(ex.getErrorCode(), ex);
		}
		return uld;
	}

	/**
	 * Commented by A-3415 for ICRD-114538
	 * @param transactionListVO
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 *//*
    private void returnBorrowTransactions(TransactionListVO transactionListVO)
            throws SystemException, MessageConfigException,
            ULDDefaultsBusinessException, CurrencyConversionException,
            DimensionConversionException {
        Collection<ErrorVO> errors = null;
        if (transactionListVO.getUldTransactionsDetails() != null) {
            log.entering("saveReturnTransaction", "TRANSCTION IS BORROWED");
            for (ULDTransactionDetailsVO uldTransactionDetailVo : transactionListVO
                    .getUldTransactionsDetails()) {
                ULD uld = null;
                log.entering("saveReturnTransaction", "TRANSCTION IS BORROWED");
                ULDTransaction uldTransaction = ULDTransaction.find(
                        uldTransactionDetailVo.getCompanyCode(),
                        uldTransactionDetailVo.getUldNumber(),
                        uldTransactionDetailVo.getTransactionRefNumber());

                ULDAuditVO uldAuditVO = new ULDAuditVO(TransactionVO.MODULE,
                        TransactionVO.SUBMODULE, TransactionVO.ENTITY);
                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                        uldAuditVO, uldTransaction, false);
                // added by a-3045 for bug20383 starts
                uldTransactionDetailVo
                        .setTransactionStatus(ULDTransactionDetailsVO.TO_BE_INVOICED);
                // added by a-3045 for bug20383 ends
                uldTransaction.update(uldTransactionDetailVo);

                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                        uldAuditVO, uldTransaction, false);

                collectReturnTransactionDetails(uldTransaction, uldAuditVO,
                        uldTransactionDetailVo);
                uldAuditVO.setActionCode(RETURN_ULDBORROWTRANSACTION);
                uldAuditVO.setAuditRemarks(uldTransactionDetailVo
                        .getReturnRemark());

                AuditUtils.performAudit(uldAuditVO);
                uld = checkULDExistsForReturn(uldTransactionDetailVo);
                log.entering("createBorrowTransactions if uld is null",
                        "TRANSCTION IS BORROWED CALLING REMOVE");
                // Added by A-2052 for the issue LUC processing resultg in RTE
                // starts
                // OAL ULDs in non-handled arps details wont be maintained
                // in ULDMST,so processg LUC result in error
                if (uld == null
                        && uldTransactionDetailVo.getTransactionType().equals(
                                BORROW_TRANSACTION)) {
                    // Added by A-2052 for the bug 104723 starts
                    if (!"U"
                            .equals(uldTransactionDetailVo.getOperationalFlag())) {
                        createBorrowTransactions(uldTransactionDetailVo);
                    }
                }
                // Added by A-2052 for the issue LUC processing resultg in RTE
                // ends
                if (uld != null) {
                    if (uld.getLoanReferenceNumber() > 0) {
                        if (errors == null) {
                            log.log(Log.INFO, "WILL BE ENTERED ONLY ONCE ");
                            errors = new ArrayList<ErrorVO>();
                        }

                        // Added by a-3353 July03 for NCA 1262 starts
                        // Show the Party which currently has the ULD

                        String partyCode = "";
                        TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
                        TransactionListVO partyDetailVO = new TransactionListVO();
                        Collection<String> uldNumbers = new ArrayList<String>();
                        uldNumbers.add(uldTransactionDetailVo.getUldNumber());
                        transactionFilterVO
                                .setCompanyCode(uldTransactionDetailVo
                                        .getCompanyCode());
                        transactionFilterVO.setUldNumbers(uldNumbers);
                        transactionFilterVO
                                .setIsLoanUcrPrint(TransactionFilterVO.FLAG_YES);
                        partyDetailVO = listUCRULDTransactionDetails(transactionFilterVO);
                        if (partyDetailVO != null) {
                            Collection<ULDTransactionDetailsVO> uldDetailsVOs = partyDetailVO
                                    .getUldTransactionsDetails();
                            if (uldDetailsVOs != null
                                    && uldDetailsVOs.size() > 0) {
                                for (ULDTransactionDetailsVO vo : uldDetailsVOs) {
                                    partyCode = vo.getToPartyCode();
                                }
                            }
                        }
                        // Added by a-3353 July03 for NCA 1262 starts
                        errors
                                .add(new ErrorVO(
                                        ULDDefaultsBusinessException.ULD_DEFAULTS_CANNOT_RETURN,
                                        new Object[] {
                                                uldTransactionDetailVo
                                                        .getUldNumber(),
                                                partyCode }));

                    }
                    if (errors == null || errors.size() == 0) {
                        log
                                .log(Log.INFO,
                                        "NO LOAN ASSOCIATED WITH THE BORROWED ULD,GOING TO DELETE FROM ULDMST");
                        // commented and added by a-3045 for bug19629 starts
                        // This is to retain the ULD in the system even after
                        // ULD is returned.
                        // uld.remove();
                        uld.setBorrowReferenceNumber(0);
                        uld
                                .setOperationalAirlineIdentifier(uldTransactionDetailVo
                                        .getFromPartyIdentifier());
                        // commented and added by a-3045 for bug19629 ends
                    }

                }
                // Added by A-2052 for the bug 104723 ends
            }
            if (errors != null && errors.size() > 0) {
                log.log(Log.FINE, "THE COLLECTION SIZE IS FOUND TO BE", errors.size());
                log
                        .log(Log.INFO,
                                "INSIDE THE RETURN BORROW TRANSACTIONS ,LOAN ALSO EXISTS CANNOT RETURN ");
                log.log(Log.INFO, "EXCEPTION TO BE THROWN ");
                ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
                uldDefaultsBusinessException.addErrors(errors);
                throw uldDefaultsBusinessException;
            }

            // Collection<String> systemparameterCodes = new
            // ArrayList<String>();
            // systemparameterCodes.add(UCR_REPORT_NEEDS_TOBE_PRINTED);
            // try {
            // Map reportMap = new SharedDefaultsProxy()
            // .findSystemParameterByCodes(systemparameterCodes);
            // if ("Y".equals(reportMap.get(UCR_REPORT_NEEDS_TOBE_PRINTED))) {
            // transactionListVO.setToBePrinted(true);

			 * log.log(Log.INFO, "reached Here A"); if
             * (transactionListVO.isToBePrinted()) { for
             * (ULDTransactionDetailsVO transactionDetailsVO : transactionListVO
             * .getUldTransactionsDetails()) {
             *
             * String uldNo = transactionDetailsVO.getUldNumber(); String
             * uldType = uldNo.substring(0, 3);
             *
             * int length = uldNo.length(); String twoalphacode =
             * uldNo.substring(length - 2); String threealphacode =
             * uldNo.substring(length - 3);
             *
             * String ownerCode = null; String serNumber = null;
             *
             * String arldtl = new ULDController().findOwnerCode(
             * transactionDetailsVO.getCompanyCode(), twoalphacode,
             * threealphacode); String arldtlArray[] = arldtl.split("~"); if
             * ("2".equals(arldtlArray[0])) { ownerCode = twoalphacode; } else {
             * ownerCode = threealphacode; }
             *
             * serNumber = uldNo.substring(3, length -
             * (Integer.valueOf(arldtlArray[0])));
             * transactionDetailsVO.setUldSerialNumber(serNumber);
             * transactionDetailsVO.setUldOwnerCode(ownerCode);
             * transactionDetailsVO.setUldType(uldType); // Added by A-2412 on 2
             * nd Nov For UCR print String trnDate = null; String trnTime =
             * null; String time=null;
             *
             * if (transactionDetailsVO.getTransactionDate() != null) {
             * LocalDate ld = new LocalDate(transactionDetailsVO
             * .getTransactionDate(), true);
             *
             * trnDate = ld.toStringFormat("ddMMMyy"); trnDate =
             * trnDate.substring(0, 7); trnTime = ld.toDisplayTimeOnlyFormat();
             *
             * log.log(Log.INFO, " Date trnDate in String(only date) " +
             * trnDate); log.log(Log.INFO, " Date trnTime in String " +
             * trnTime); if (trnTime != null) { String timearr[] =
             * trnTime.split(":"); time = new StringBuilder()
             * .append(timearr[0]).append(timearr[1]) .toString(); }
             * transactionDetailsVO .setStrTxnDate(new StringBuffer(trnDate)
             * .append("-").append(time) .toString()); }
             *
             * //Added by A-2412 on 2 nd Nov For UCR print ends }
             *
             * log .log(Log.INFO, "GOING TO UCR SERVER PRINT" +
             * transactionListVO .getUldTransactionsDetails()); ReportSpec
             * reportSpec = new ReportSpec();

            // reportSpec.addExtraInfo(notocDetailsVO);
             Added by A-2412 on 25th Oct for UCR printing
            // sorting based on CRN number
            // reportSpec.setData(transactionListVO.getUldTransactionsDetails());

             * List<ULDTransactionDetailsVO> uldDetailsVo = new ArrayList<ULDTransactionDetailsVO>(transactionListVO.getUldTransactionsDetails());
             * for(ULDTransactionDetailsVO vo:uldDetailsVo){ log.log(Log.FINE,
             * "befor sorting----"+vo.getControlReceiptNumber()); }
             * Collections.sort(uldDetailsVo, new CRNComparator());
             * for(ULDTransactionDetailsVO vo:uldDetailsVo){ log.log(Log.FINE,
             * "after sorting----"+vo.getControlReceiptNumber()); }
             * reportSpec.setData(uldDetailsVo); /* Addition by A-2412 on 25th
             * Oct for UCR printing ends


			 * if (transactionListVO.getUldTransactionsDetails() .size() > 1) {
			 * reportSpec .setReportId(UCR_REPORT_ID_FOR_MULTIPLE_ULD); } else {
			 * reportSpec .setReportId(UCR_REPORT_ID_FOR_SINGLE_ULD); }
			 * log.log(Log.INFO,
			 * "*******************reportSpec*********************************" +
			 * reportSpec); ReportAgent.generateReport(reportSpec);
             * log.log(Log.INFO, "^^^^^^^^^^^^^^^66Generated
             * Report^^^^^^^^^^^"); }

            // }
            // } catch (ProxyException proxyException) {
            // throw new SystemException(proxyException.getMessage());
            // }
            // Generate LUC
            // log.log(Log.INFO,"%%%%%%%%%%%
            // transactionListVO"+transactionListVO);
            // Commented by Preet --NO automatic LUC generation is needed

             * String fromtoPartyCode = null; String fromtoPartCode2 = null; Set<String>
             * partyCodes = new HashSet<String>(); LUCMessageVO messageVO =
             * null;
             *
             * LogonAttributes logonAttributes =
             * ContextUtils.getSecurityContext() .getLogonAttributesVO();
             *
             * Collection<LUCULDDetailsVO> uldDetailsVOs = null;
             * LUCULDDetailsVO uldDetailsVO = null;
			 *
			 * String ctrlRcptNo = null;
			 *
			 * LocalDate currentDate = new LocalDate(logonAttributes
             * .getAirportCode(), Location.ARP, true); StringBuilder
             * dateoFTransfer = new StringBuilder();
			 * dateoFTransfer.append(currentDate.toString().substring(0, 2));
			 * dateoFTransfer.append(currentDate.toString().substring(3, 6)
			 * .toUpperCase());
			 * dateoFTransfer.append(currentDate.toString().substring(9, 11));
			 *
			 * StringBuilder time = new StringBuilder();
			 * time.append(currentDate.toString().substring(12, 14));
			 * time.append(currentDate.toString().substring(15, 17)); for
             * (ULDTransactionDetailsVO uldTransactionDetailVo :
             * transactionListVO .getUldTransactionsDetails()) {
			 *
			 * fromtoPartyCode = new StringBuilder().append(
			 * uldTransactionDetailVo.getFromPartyCode()).append("~")
			 * .append(uldTransactionDetailVo.getToPartyCode()) .toString();
			 *
			 * if (!partyCodes.contains(fromtoPartyCode)) { //
			 * log.log(Log.INFO,"%%%%fromtoPartyCode"+fromtoPartyCode);
			 * partyCodes.add(fromtoPartyCode);
			 *
             * messageVO = new LUCMessageVO(); uldDetailsVOs = new ArrayList<LUCULDDetailsVO>();
			 *
			 * messageVO.setCarrierCode(logonAttributes .getOwnAirlineCode());
			 * messageVO.setAirlineCode(logonAttributes .getOwnAirlineCode());
			 * messageVO.setCompanyCode(logonAttributes.getCompanyCode());
			 *
             * messageVO.setMessageStandard("AHM");
             * messageVO.setMessageType("LUC");
			 * messageVO.setLastUpdateUser(logonAttributes.getUserId());
			 * messageVO.setStationCode(logonAttributes.getAirportCode());
			 * ctrlRcptNo = findCRNForULDTransaction(logonAttributes
			 * .getCompanyCode(), uldTransactionDetailVo .getFromPartyCode());
			 *
			 * ctrlRcptNo=uldTransactionDetailVo.getControlReceiptNumber(); for
			 * (ULDTransactionDetailsVO uldTxnDetailVo : transactionListVO
			 * .getUldTransactionsDetails()) {
			 *
			 * fromtoPartCode2 = new StringBuilder().append(
			 * uldTxnDetailVo.getFromPartyCode()).append("~")
			 * .append(uldTxnDetailVo.getToPartyCode()) .toString(); if
			 * (fromtoPartyCode.equals(fromtoPartCode2)) { //
			 * log.log(Log.INFO,"%%%%%"+fromtoPartCode2); uldDetailsVO = new
			 * LUCULDDetailsVO();
			 *
			 * uldDetailsVO.setDateofTransfer(dateoFTransfer .toString());
			 * uldDetailsVO.setDestinationLocation(uldTxnDetailVo
			 * .getTxStationCode());
			 *
			 * uldDetailsVO.setLocationOftransfer(logonAttributes
			 * .getAirportCode()); uldDetailsVO.setTimeofTransfer(Integer
			 * .parseInt(time.toString()));
			 *
             * uldDetailsVO.setUldReceiptNumber(ctrlRcptNo);
             * LUCULDIdentificationVO identificationVO = new
             * LUCULDIdentificationVO(); String uldNumber =
			 * uldTxnDetailVo.getUldNumber();
			 *
			 * for(String str:txnrefnums){ String[] uldnum=str.split("~");
			 * if(uldNumber.equals(uldnum[0])){
             * identificationVO.setTransactionRefNumber((int)Integer.parseInt(uldnum[1])); } }
			 *
			 * identificationVO.setUldType(uldNumber.substring(0, 3));
			 *
			 * identificationVO.setUldOwnerCode(uldNumber
			 * .substring(uldNumber.length() - 2));
			 * identificationVO.setUldSerialNumber(uldNumber .substring(3,
			 * uldNumber.length() - 2)); uldDetailsVO
			 * .setUldIdentificationVO(identificationVO); // For Return Borrow ,
			 * receiving party is the one // from whom the ulfd is borrowed
			 * LUCReceivingPartyDetailsVO recevingPartyDetailsVO = new
             * LUCReceivingPartyDetailsVO(); // If KZ return a borrowed ULD to
             * QF , the // transferring party is KZ and receiving party is // QF
			 * recevingPartyDetailsVO .setCarrierCode(uldTxnDetailVo
			 * .getFromPartyCode()); uldDetailsVO
			 * .setReceivingPartyDetailsVO(recevingPartyDetailsVO);
			 *
			 * LUCTransferringPartyDetailsVO transferringPartyDetailsVO = new
			 * LUCTransferringPartyDetailsVO();
			 *
			 * transferringPartyDetailsVO .setCarrierCode(uldTxnDetailVo
			 * .getToPartyCode()); uldDetailsVO
			 * .setTransferringPartyDetailsVO(transferringPartyDetailsVO);
			 * LUCULDConditionDetailsVO conditionDetailsVO = new
			 * LUCULDConditionDetailsVO(); if
			 * ("Y".equals(uldTxnDetailVo.getDamageStatus())) {
			 * conditionDetailsVO.setDamageCode("DAM"); } else {
			 * conditionDetailsVO.setDamageCode("SER"); }
             * conditionDetailsVO.setDamageCode(uldTxnDetailVo.getUldConditionCode());
             * uldDetailsVO .setUldConditionDetailsVO(conditionDetailsVO);
             * uldDetailsVOs.add(uldDetailsVO); } } if (uldDetailsVOs.size() >
             * 0) { messageVO.setUldDetails(uldDetailsVOs); log.log(Log.INFO,
             * "%%%%%%%%%%% lucMessageVO " + messageVO); //commented by nisha
             * for CR-15 //generateLUCMessage(messageVO); } } }

        }
        if (transactionListVO.getAccessoryTransactions() != null
                && transactionListVO.getAccessoryTransactions().size() > 0) {
            returnAcessoryTransactions(transactionListVO
                    .getAccessoryTransactions());
        }
    }*/

    /**
     *
     * @param accessoryTransactionVos
     * @throws SystemException
     * @throws ULDDefaultsBusinessException
     */
    private void returnAcessoryTransactions(
            Collection<AccessoryTransactionVO> accessoryTransactionVos)
			throws SystemException, ULDDefaultsBusinessException {
		int loaned = 0;
		AccessoriesStockConfig accessoriesStockConfigForOwner = null;
		AccessoriesStockConfig accessoriesForOperational = null;
		AccessoryTransaction accessoryTransaction = null;
		if (accessoryTransactionVos != null) {
			for (AccessoryTransactionVO accessoryTransactionVo : accessoryTransactionVos) {
                log.log(Log.FINE, "accessoryTransactionVo is --->>> ",
                        accessoryTransactionVo);
				accessoriesStockConfigForOwner = null;
				accessoriesForOperational = null;
				accessoryTransaction = null;
                accessoryTransaction = AccessoryTransaction.find(
                        accessoryTransactionVo.getCompanyCode(),
                        accessoryTransactionVo.getAccessoryCode(),
                        accessoryTransactionVo.getTransactionRefNumber());
				log.log(Log.FINE, "THE PK FOR THE ACESSORY TRANSACTION ARE ",
                        new StringBuilder(accessoryTransactionVo
                                .getCompanyCode()).append("-").append(
                                accessoryTransactionVo.getAccessoryCode())
                                .append("-").append(
                                        accessoryTransactionVo
                                                .getTransactionRefNumber())
                                .toString());
                log.log(Log.INFO,
                        "CALLING THE UPDATE FOR THE ACCESSSORY TRANSACTION");
                accessoryTransaction.setQuantity((accessoryTransaction
                        .getQuantity()
                        - accessoryTransactionVo.getQuantity() < 0) ? loaned
                        : accessoryTransaction.getQuantity()
                                - accessoryTransactionVo.getQuantity());
                log.log(Log.FINE, "THE ACESSORY QUANTITY IS REDUCED TO ",
                        accessoryTransaction.getQuantity());
                log.log(Log.FINE, "THE ACESSORY QUANTITY IS REDUCED TO ",
                        accessoryTransaction.getQuantity());
                log.entering("INSIDE THE RETURN LOAN ACCESSORY TRANSACTIONS",
                        "FIND LOANED PARTY EXISTS");
                accessoriesStockConfigForOwner = checkAccessoriesForOwner(accessoryTransactionVo);
                log.log(Log.FINE, "ACCESSORY STOCK CONFIG FOR OWNER IS NULL",
                        accessoriesStockConfigForOwner);
				// Commented by Preet for ULD 170
				/*
				 * if (accessoriesStockConfigForOwner == null) { log .log(
				 * Log.INFO, "INSIDE THE RETURN LOAN ACCESSORY TRANSACTIONS
				 * FINDER EXCEPTION THROWN LOANED PARTY NOT THERE)");
				 * AccessoriesStockConfigVO accessoriesStockVo = new
				 * AccessoriesStockConfigVO();
				 * accessoriesStockVo.setAccessoryCode(accessoryTransactionVo
				 * .getAccessoryCode());
				 * accessoriesStockVo.setCompanyCode(accessoryTransactionVo
				 * .getCompanyCode()); accessoriesStockVo
				 * .setAirlineIdentifier(accessoryTransactionVo
				 * .getCurrOwnerCode()); accessoriesStockVo
				 * .setAvailable(accessoryTransactionVo
				 * .getTransactionType().equals( LOANED_TRANSACTION) ?
				 * accessoryTransactionVo .getQuantity() : loaned);
				 * accessoriesStockVo .setLoaned(accessoryTransactionVo
				 * .getTransactionType().equals( LOANED_TRANSACTION) ? loaned :
				 * loaned);
				 * accessoriesStockVo.setLastUpdateTime(accessoryTransactionVo
				 * .getLastUpdateTime());
				 * accessoriesStockVo.setLastUpdateUser(accessoryTransactionVo
				 * .getLastUpdateUser());
				 * accessoriesStockVo.setStationCode(accessoryTransactionVo
                 * .getTransactionStationCode()); log.entering("LOANED PARTY ", "
                 * CREATE CALLED"); new
				 * AccessoriesStockConfig(accessoriesStockVo); }
				 */
				if (accessoriesStockConfigForOwner != null) {
                    log
                            .log(
                                    Log.INFO,
									"INSIDE THE UPDATE FOR ACCESSORIES STOCK CONFIG FOR LOANED PARTY ALREDY THERE In  RETURN TRANSACTION");
					/*
					 * accessoriesStockConfigForOwner
					 * .setAvailable(accessoryTransactionVo
					 * .getTransactionType().equals( LOANED_TRANSACTION) ?
					 * accessoriesStockConfigForOwner .getAvailable() +
					 * accessoryTransactionVo.getQuantity() :
					 * !(accessoriesStockConfigForOwner .getAvailable() -
					 * accessoryTransactionVo .getQuantity() < 0) ?
					 * accessoriesStockConfigForOwner .getAvailable() -
					 * accessoryTransactionVo .getQuantity() : loaned);
					 */

                    log
                            .log(
                                    Log.INFO,
                                    "accessoriesStockConfigForOwner.getAvailable()----",
                                    accessoriesStockConfigForOwner
                                            .getAvailable());
                    log.log(Log.INFO,
                            " accessoryTransactionVo.getQuantity()----",
                            accessoryTransactionVo.getQuantity());
                    accessoriesStockConfigForOwner
                            .setAvailable(accessoriesStockConfigForOwner
                                    .getAvailable()
                                    + accessoryTransactionVo.getQuantity());

                    accessoriesStockConfigForOwner
                            .setLoaned(!(accessoriesStockConfigForOwner
                                    .getLoaned()
                                    - accessoryTransactionVo.getQuantity() < 0) ? accessoriesStockConfigForOwner
                                    .getLoaned()
                                    - accessoryTransactionVo.getQuantity()
                                    : loaned);
                    log.log(Log.FINE,
                            "THE AVAILABLE QUANTITY THE AVIALABLE QUANTITY",
                            accessoriesStockConfigForOwner
                                    .getAvailable());
                }

                log
                        .log(
                                Log.INFO,
								"INSIDE THE  RETURN  LOAN ACESSORY  STOCKS FIND WHETHER THE  RETURNING PARTY  ALREADY EXISTS");
				accessoriesForOperational = checkAccessoriesForOperational(accessoryTransactionVo);
                log.log(Log.FINE, "ACCESSORY STOCK CONFIG FOR OPEARTIONAL ",
                        accessoriesForOperational);
				// Commented by Preet for ULD 170
				/*
				 * if (accessoriesForOperational == null) { log.entering("INSIDE
                 * THE RETURN LOAN ACESSORY STOCKS", " FINDER EXCEPTION THROWN " + "
                 * RETURNING PARTY NOT THERE)"); AccessoriesStockConfigVO
				 * accessoriesStockVo = new AccessoriesStockConfigVO();
				 * accessoriesStockVo.setAccessoryCode(accessoryTransactionVo
				 * .getAccessoryCode());
				 * accessoriesStockVo.setCompanyCode(accessoryTransactionVo
				 * .getCompanyCode()); accessoriesStockVo
				 * .setAirlineIdentifier(accessoryTransactionVo
				 * .getOperationalAirlineIdentifier()); accessoriesStockVo
				 * .setAvailable(accessoryTransactionVo
				 * .getTransactionType().equals( LOANED_TRANSACTION) ? loaned :
				 * accessoryTransactionVo.getQuantity()); accessoriesStockVo
				 * .setLoaned(accessoryTransactionVo
				 * .getTransactionType().equals( LOANED_TRANSACTION) ? loaned :
				 * loaned);
				 * accessoriesStockVo.setLastUpdateTime(accessoryTransactionVo
				 * .getLastUpdateTime());
				 * accessoriesStockVo.setLastUpdateUser(accessoryTransactionVo
				 * .getLastUpdateUser());
				 * accessoriesStockVo.setStationCode(accessoryTransactionVo
				 * .getTransactionStationCode()); log.entering("RETURNING PARTY
				 * NOT THERE ", " CREATE CALLED"); new
				 * AccessoriesStockConfig(accessoriesStockVo); }
				 */
				if (accessoriesForOperational != null) {
                    log
                            .entering("INSIDE THE UPDATE FOR",
                                    "ACCESSORIES STOCK CONFIG FOR RETURNING PARTY ALREDY THERE");

                    Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
                    /* Commented by A-3415 for ICRD-114538
                     * if (BORROW_TRANSACTION.equals(accessoryTransactionVo
                            .getTransactionType())) {
                        if (accessoriesForOperational.getAvailable() < accessoryTransactionVo
                                .getQuantity()) {
                            errors.add(new ErrorVO(
                                    "uld.defaults.returndmorethan.available"));
                        }
                        if (errors.size() > 0) {
                            ULDDefaultsBusinessException ex = new ULDDefaultsBusinessException();
                            ex.addErrors(errors);
                            throw ex;
                        }
                    }*/

					/*
					 * accessoriesForOperational
					 * .setAvailable(accessoryTransactionVo
					 * .getTransactionType().equals( LOANED_TRANSACTION) ?
					 * !(accessoriesForOperational .getAvailable() -
					 * accessoryTransactionVo.getQuantity() < 0) ?
					 * accessoriesForOperational .getAvailable() -
					 * accessoryTransactionVo.getQuantity() : loaned :
					 * accessoriesForOperational.getAvailable() +
					 * accessoryTransactionVo .getQuantity()); if
					 * (!accessoryTransactionVo.getTransactionType().equals(
					 * LOANED_TRANSACTION)) { accessoriesForOperational
					 * .setLoaned(accessoriesForOperational .getLoaned() -
					 * accessoryTransactionVo.getQuantity() > 0 ?
					 * accessoriesForOperational .getLoaned() -
					 * accessoryTransactionVo.getQuantity() : loaned);
					 */

					// Added by Preet on 7th Feb For ULD 170--starts
					// The operational airline s available stock is decreased
					// and Loaned remains as it is
					// Check if the quantity returned is available
                    accessoriesForOperational
                            .setAvailable(!(accessoriesForOperational
                                    .getAvailable()
                                    - accessoryTransactionVo.getQuantity() < 0) ? accessoriesForOperational
                                    .getAvailable()
                                    - accessoryTransactionVo.getQuantity()
									: loaned);
					// Added by Preet on 7th Feb For ULD 170--ends

				}
			}

		}
	}

	/**
	 */
	public void findULDGroupList() {
	}

	/**
	 *
	 * @param uldVo
	 * @return
	 * @throws SystemException
	 * @throws DuplicateManufacturerNumberExistsException
	 */
	private boolean checkDuplicateManufacturerNumber(ULDVO uldVo)
			throws SystemException, DuplicateManufacturerNumberExistsException {
        log.entering("INSIDE THE CONTROLLER",
                "checkDuplicateManufacturerNumber");
		return ULD.checkDuplicateManufacturerNumber(uldVo);
	}

	/**
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 */
    public ULDValidationVO findCurrentULDDetails(String companyCode,
            String uldNumber) throws SystemException {
		log.entering("ULDController", "findCurrentULDDetails");
		return ULDMovement.findCurrentULDDetails(companyCode, uldNumber);
	}

	/***************************************************************************
	 * To implement audit
	 **************************************************************************/
	/*
	 * private void audit() { }
	 */

	/**
	 *
	 * @param uldVos
	 * @throws ULDInTransactionException
	 * @throws DuplicateManufacturerNumberExistsException
	 * @throws SystemException
	 */
	public void saveULDs(Collection<ULDVO> uldVos)
            throws ULDInTransactionException,
            DuplicateManufacturerNumberExistsException, SystemException,
			CurrencyConversionException, DimensionConversionException {
		log.entering("INSIDE THE CONTROLLER", "saveULDs");
		String companyCode = null;
		String airportCode = null;
		// Added by A-2572 for BUG 102678 and 102653
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		ULDAirportLocationVO uLDAirportLocationVO = null;
		if (uldVos != null && uldVos.size() > 0) {
			for (ULDVO vo : uldVos) {
                if (ULDVO.OPERATION_FLAG_INSERT.equalsIgnoreCase(vo
                        .getOperationalFlag())) {
					companyCode = vo.getCompanyCode();
					airportCode = vo.getCurrentStation();
					// Added by A-2572 for BUG 102678 and 102653 starts
					if (vo.getOperationalAirlineIdentifier() == 0) {
                        vo.setOperationalAirlineIdentifier(logonAttributes
                                .getOwnAirlineIdentifier());
					}
					// Added by nisha for QF CR1006 starts
					if (NONOPERATIONAL.equalsIgnoreCase(vo.getOverallStatus())) {
                        uLDAirportLocationVO = ULDAirportLocation
                                .findLocationforFacility(companyCode,
                                        airportCode, FACILITY_REPAIR);
						vo.setFacilityType(FACILITY_REPAIR);
					} else {
                        uLDAirportLocationVO = ULD.findCurrentLocation(
                                companyCode, airportCode, CONTENT_EMPTY);
					}
					break;
				}
			}
		}
		// currentLocation =ULD.findCurrentLocation(
		// companyCode,airportCode);

		log.log(Log.INFO, "%%%%%%%%%%%%%%%%%  Collection<ULDVO>", uldVos);
		if (uldVos != null && uldVos.size() > 0) {
			for (ULDVO vo : uldVos) {
                if (ULDVO.OPERATION_FLAG_INSERT.equalsIgnoreCase(vo
                        .getOperationalFlag())) {
                    if (vo.getLocation() == null
                            || vo.getLocation().trim().length() == 0) {
                        if (uLDAirportLocationVO != null) {
                            vo.setLocation(uLDAirportLocationVO
                                    .getFacilityCode());
                            vo.setFacilityType(uLDAirportLocationVO
                                    .getFacilityType());
						} else {
							vo.setLocation(ULDVO.NO_LOCATION);
							vo.setFacilityType(ULDVO.NO_LOCATION);
						}

					}

				}
				log.log(Log.FINE, "!!!!!! FROM COLLECTION SAVE ");
				vo.setFromCollection("Y");
				saveULD(vo);
			}
		}
	}

	/**
	 *
	 * @param uldMovement
	 * @param localDate
	 * @throws SystemException
	 * @throws ULDDoesNotExistsException
	 */
	/*
	 * Update the CurrentStation for the Ulds in the ULDMST
	 *
	 */
    private void updateCurrentStationForULD(
            Collection<ULDMovementVO> uldMovement, LocalDate localDate)
			throws SystemException, ULDDoesNotExistsException {
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		String companyCode = null;
		String currentStation = null;
		String pouLocation = null;
		String facilityType = null;
		String content = null;
		ULDAirportLocationVO uLDAirportLocationVO = null;
		ULDCheckinVO uLDCheckinVO = null;
		Collection<ULDCheckinVO> checkInVos = new ArrayList<ULDCheckinVO>();
		boolean callWhsFlag = false;
		boolean checkFlag = false;
		log.log(Log.FINE, "---------uldMovement.SIZE()------->>", uldMovement.size());
		log.log(Log.FINE, "---------uldMovement------->>", uldMovement);
		for (ULDMovementVO vo : uldMovement) {
			companyCode = vo.getCompanyCode();
			currentStation = vo.getCurrentStation();
			if (vo.getContent() != null && vo.getContent().trim().length() > 0) {
				content = vo.getContent();
			} else {
				content = CONTENT_EMPTY;
			}
			pouLocation = vo.getPouLocation();
			facilityType = vo.getFacilityType();
            if (vo.getPouLocation() != null
                    && vo.getPouLocation().trim().length() > 0) {
				checkFlag = true;
			}
			break;
		}
		log.log(Log.FINE, "polLocation--------->>", pouLocation);
		log.log(Log.FINE, "facilityType-------->>", facilityType);
		// Added by Sreekumar S AirNZCR 434
		if (!checkFlag) {
			log.log(Log.FINE, "Finding Current Station");
            uLDAirportLocationVO = ULD.findCurrentLocation(companyCode,
                    currentStation, content);
		} else {
			uLDAirportLocationVO = new ULDAirportLocationVO();
			uLDAirportLocationVO.setFacilityCode(pouLocation);
			uLDAirportLocationVO.setFacilityType(facilityType);			
		}
		/*
		 * uLDAirportLocationVO = ULD.findCurrentLocation(companyCode,
		 * currentStation);
		 */
		ULD uld = null;
		log.log(Log.INFO, "%%%%%%%%%%%%%%  uldMovement", uldMovement);
		for (ULDMovementVO vo : uldMovement) {

			log.log(Log.INFO, "%%%%%%%%%%%%%%  vo", vo);
			uld = null;
			uld = checkULDExists(vo.getCompanyCode(), vo.getUldNumber());
			log.entering("ERRORS CREATED FOR THE UPDATE CURRENT STATION",
					"ERRORS CREATED FOR THE UPDATE CURRENT STATION");
			if (uld == null) {
                errors.add(new ErrorVO(
                        ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS,
                        new Object[] { vo.getUldNumber() }));
				// code removed for reverting handled carrier CR.......
			}

			if (uld != null && errors.size() == 0) {
                //Added by A-7131 for ICRD-213319 starts
				uld.setLastMovementDetails(getLastMovementDetails(vo));
                //Added by A-7131 for ICRD-213319 ends
				log.entering("GOING TO  UPDATE THE", "ULDMST");
				log.log(Log.INFO, "updateCurrentStation check-------->>", vo.getUpdateCurrentStation());
				if (vo.getUpdateCurrentStation()) {
					log.log(Log.INFO, "currentStation", vo.getCurrentStation());
					// log.log(Log.INFO,"currentLocation"+uLDAirportLocationVO.getFacilityCode());
					uld.setCurrentStation(vo.getCurrentStation());
					log.log(Log.INFO, "Content Code---->", vo.getContent());
					uld.setContent(vo.getContent());
					// ends
					// added by nisha for QF1013 starts
					if (vo.getScmDate() != null) {
						if (uld.getScmDate() != null) {
							log.log(Log.INFO, "SCM already recived");
						} else {
							uld.setScmDate(vo.getScmDate());
						}
					} else {
						uld.setScmDate(vo.getScmDate());
					}
					uld.setScmFlag(vo.getScmFlag());
					// ends

					/*
					 * Added by a-3278 for CR QF1449 on 02Mar10 A new field
					 * LSTSCMDAT in the ULDMST table is added to keep track of
					 * the last SCM date for a ULD, populated every time an SCM
					 * strikes the system with the ULD
					 */
					if (vo.getScmDate() != null) {
						uld.setLastSCMDate(vo.getScmDate());
					}
					// QF1449 ends
					if (uLDAirportLocationVO != null) {
						log.log(Log.INFO, "Inside Setting Facility Type");
						uld.setLocation(uLDAirportLocationVO.getFacilityCode());
                        uld.setFacilityType(uLDAirportLocationVO
                                .getFacilityType());
						// Added by AG for Updating Ware House if the Facility
						// Type is set as WareHouse
                        if ("WHS"
                                .equals(uLDAirportLocationVO.getFacilityType())) {
							callWhsFlag = true;
							uLDCheckinVO = new ULDCheckinVO();
							uLDCheckinVO.setCompanyCode(companyCode);
							uLDCheckinVO.setStorageUnitCode(vo.getUldNumber());
							uLDCheckinVO.setAirportCode(currentStation);
                            uLDCheckinVO.setWarehouseCode(uLDAirportLocationVO
                                    .getFacilityCode());
							checkInVos.add(uLDCheckinVO);
						}
					} else {
                        log
                                .log(
                                        Log.INFO,
                                        "%%%%%%%%%%%  DEFAULT FACCOD and FACTYP are not defined for the station",
										vo.getCurrentStation());
                        uld.setLocation(ULDVO.NO_LOCATION);
                        uld.setFacilityType(ULDVO.NO_LOCATION);
					}
					uld.setLastMovementDate(vo.getLastUpdatedTime());
                    log.log(Log.FINE,
                            "THE MOVEMENTDATE SET IS FINALLY in ELSE PART", uld.getLastMovementDate());
				}
			}
		}
		/*
		 * Show the ULDs tat does not Exist by appeneded commas Say
		 * AKE12345AV,AKE1234AV,AKE12457AV ....
		 *
		 */
		if (errors.size() > 0) {
            log.entering("ULD DOESNOT EXISTS EXCEPTION IS THROWN",
                    "ULD DOESNOT EXISTS EXCEPTION IS THROWN");
			ULDDoesNotExistsException ex = new ULDDoesNotExistsException();
			ex.addErrors(errors);
			throw ex;
		}
		if (callWhsFlag && checkInVos != null && checkInVos.size() > 0) {
			try {
				WarehouseProxy warehouseProxy = new WarehouseProxy();
				warehouseProxy.saveAndCheckinULD(checkInVos);
			} catch (ProxyException proxyException) {
                log.log(Log.INFO, "-------proxyException-------",
                        proxyException.getErrors());
                log.log(Log.INFO, "-------proxyException-------",
                        proxyException.getMessage());
            }
        }

    }
    /**
     * The method is to create a ULD during record ULD movement for OAL ULDs
     * if is not there A-3415
	 *
	 * @param uldMovementVO
	 * @param ownerAirlineIdentifier
	 * @throws SystemException
	 */
	private void createULD(ULDMovementVO uldMovementVO, int ownerAirlineIdentifier)
            throws SystemException, CurrencyConversionException,
            DimensionConversionException {
        log.entering("ULDController", "createULD");
        ULDAirportLocationVO uldAirportLocationVO = null;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		String currentStation = null;		
		currentStation = logonAttributes.getAirportCode();
		String uldType = parseULDType(uldMovementVO.getUldNumber());
        ULDTypeVO typeVo = null;
        if(uldMovementVO.getUldNumber() != null && uldMovementVO.getUldNumber().length() > 0) {
        	typeVo = findULDTypeStructuralDetails(uldMovementVO
                    .getCompanyCode(), uldMovementVO.getUldNumber());
        }
        else {
        	typeVo = findULDTypeStructuralDetails(uldMovementVO
                    .getCompanyCode(), uldType);
        }
		ULDVO uldVo = new ULDVO();
		uldVo.setCompanyCode(uldMovementVO.getCompanyCode());
		uldVo.setUldNumber(uldMovementVO.getUldNumber());
		uldVo.setUldGroupCode(typeVo.getUldGroupCode());
		uldVo.setUldType(uldType);
		// note that the naure of the uld is estimated as GEN
		uldVo.setUldNature("GEN");
		if (uldMovementVO.getFlightCarrierIdentifier() != 0) {
            uldVo.setOperationalAirlineIdentifier(uldMovementVO
                    .getFlightCarrierIdentifier());
        } else {
            uldVo.setOperationalAirlineIdentifier(logonAttributes
                    .getOwnAirlineIdentifier());
		}		
		uldVo.setOwnerAirlineIdentifier(ownerAirlineIdentifier);		
		//uldVo.setDisplayBaseHeight(typeVo.getBaseDimHeight());
		//uldVo.setDisplayBaseLength(typeVo.getBaseDimLength());
		//uldVo.setDisplayBaseWidth(typeVo.getBaseDimWidth());
		//uldVo.setDisplayDimensionUnit(typeVo.getBaseDimUnit());
		//uldVo.setDisplayStructuralWeight(typeVo.getStructuralWtLmt());
		//uldVo.setDisplayStructuralWeightUnit(typeVo.getStructuralWtLmtUnit());
		uldVo.setDisplayIataReplacementCost(typeVo.getIATARepCost());
		uldVo.setDisplayIataReplacementCostUnit(typeVo.getIATARepCostUnit());
		uldVo.setCurrentStation(currentStation);
		uldVo.setOwnerStation(currentStation);
		uldVo.setDamageStatus(ULDVO.DAMAGED_STATUS);
		uldVo.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
		uldVo.setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
		uldVo.setTransitStatus("N");
		//uldVo.setDisplayTareWeight(typeVo.getTareWt());
		//uldVo.setDisplayTareWeightUnit(typeVo.getTareWtUnit());
		uldVo.setBaseHeight(typeVo.getBaseDimHeight());
		uldVo.setBaseLength(typeVo.getBaseDimLength());
		uldVo.setBaseWidth(typeVo.getBaseDimWidth());
		uldVo.setOperationalFlag(ULDVO.OPERATION_FLAG_INSERT);
        uldVo.setLastUpdateTime(new LocalDate(currentStation, Location.ARP,
                false));
        uldVo.setLastUpdateUser(logonAttributes.getUserId());
        uldAirportLocationVO = ULD.findCurrentLocation(uldMovementVO
                .getCompanyCode(), currentStation, CONTENT_EMPTY);
		if (uldAirportLocationVO != null) {
			uldVo.setLocation(uldAirportLocationVO.getFacilityCode());
			uldVo.setFacilityType(uldAirportLocationVO.getFacilityType());
		} else {
			uldVo.setLocation(ULDVO.NO_LOCATION);
			uldVo.setFacilityType(ULDVO.NO_LOCATION);
		}
		log.log(Log.INFO, "%%%%%%%%  uldVO", uldVo);
		new ULD(uldVo);
	}
	/*
	 * This method is used to persist the Details of the ULDNUmbers for the
	 * RecordULDMovement @Table ULDMVTMST
	 *
	 */

	/**
	 * @param uldMovement
	 * @throws SystemException
	 */
    private void createULDMovement(Collection<ULDMovementVO> uldMovement)
            throws SystemException {
		for (ULDMovementVO vo : uldMovement) {
			new ULDMovement(vo);
			log.log(Log.FINE, "SIZE OF THE CREATEULDMOVEMENT", uldMovement.size());
		}
	}

	/*
	 * This method is used to save the details of the Flight for the ULD @table
	 * ULDMVTDTL
	 */
	/**
	 * @param uldMovementVos
	 * @param movementSequenceNumber
	 * @throws SystemException
	 */
    private void createULDMovementDetaills(
            Collection<ULDMovementVO> uldMovementVos,
            Long movementSequenceNumber, Collection<String> uldnums)
            throws SystemException {
		for (String uldnum : uldnums) {
			for (ULDMovementVO vo : uldMovementVos) {
				ULDMovementDetailVO uldMovementDetailVo = new ULDMovementDetailVO();
				uldMovementDetailVo.setCompanyCode(vo.getCompanyCode());
				log.log(Log.FINE, "creating uld detail movement-----", vo.getUldNumber());
				uldMovementDetailVo.setUldNumber(uldnum);
				uldMovementDetailVo.setContent(vo.getContent());
                uldMovementDetailVo.setFlightCarrierIdentifier(vo
                        .getFlightCarrierIdentifier());
				uldMovementDetailVo.setCarrierCode(vo.getCarrierCode());
				uldMovementDetailVo.setAgentCode(vo.getAgentCode());
				uldMovementDetailVo.setAgentName(vo.getAgentName());
				uldMovementDetailVo.setFlightDate(vo.getFlightDate());
                //Added by A-8368 as part of bug -
                uldMovementDetailVo.setFlightATA(vo.getFlightDate());
              //Added by A-8368 as part of bug -  ends
				uldMovementDetailVo.setFlightNumber(vo.getFlightNumber());
				uldMovementDetailVo.setPointOfLading(vo.getPointOfLading());
				uldMovementDetailVo.setPointOfUnLading(vo.getPointOfUnLading());
                log.log(Log.FINE, "INSIDE THE FLIGHTDETAILS VALUES ARE >>>>>>",
                        vo.getDummyMovement());
                log.log(Log.FINE, "INSIDE THE FLIGHTDETAILS VALUES ARE >>>>>>",
                        vo.getDummyMovement());
				uldMovementDetailVo.setIsDummyMovement(vo.getDummyMovement());
				uldMovementDetailVo.setRemark(vo.getRemark());
                uldMovementDetailVo
                        .setMovementSequenceNumber(movementSequenceNumber);
				uldMovementDetailVo.setLastUpdatedTime(vo.getLastUpdatedTime());
				uldMovementDetailVo.setLastUpdatedUser(vo.getLastUpdatedUser());
                log.entering("CREATE METHOD CALLED FOR THE  ",
                        "ULD MOVEMENT DETAILS");
                log.entering("CREATE METHOD CALLED FOR THE  ",
                        "ULD MOVEMENT DETAILS");
				log.log(Log.FINE, "", uldMovementVos.size());
                ULDMovementDetail movementDetail = new ULDMovementDetail(
                        uldMovementDetailVo);

			}
		}
	}

	/**
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @param transactionType
	 * @return
	 * @throws SystemException
	 */
    private boolean checkLoanedULDAlreadyLoaned(String companyCode,
            String uldNumber, String transactionType) throws SystemException {
		log.entering("INSIDE THE CONTROLLER", "CHECKLOANEDULDALREADYLOANED");
		log.entering("INSIDE THE CONTROLLER", "CHECKLOANEDULDALREADYLOANED");
        return ULDTransaction.checkLoanedULDAlreadyLoaned(companyCode, uldNumber, transactionType);
	}

	/**
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @param partyType
	 * @param partyCode
	 * @param transactionType
	 * @return
	 * @throws SystemException
	 */
    /*Commented by A-3415 for ICRD-114538
     * private boolean checkBorrowedULDLoanedToSameParty(String companyCode,
            String uldNumber, String partyType, String partyCode,
            String transactionType) throws SystemException {
        log.entering("INSIDE THE CONTROLLER",
                "CHECKBORROWEDULDLOANEDTOSAMEPARTY");
        boolean canLoaned = ULDTransaction.checkBorrowedULDLoanedToSameParty(
                companyCode, uldNumber, partyType, partyCode, transactionType);
        return canLoaned;
    }*/

	/*
	 * This method is used to validate whether the ULDs currentStation different
	 * from the Loaned Station
	 *
	 *
	 */
	// validateULDStationForTransaction();
	/**
	 * For InvoiceRefNumber LOV
	 *
	 * @author A-1883
	 * @param companyCode
	 * @param displayPage
	 * @return Page<String>
	 * @throws SystemException
	 */
    public Page<String> findInvoiceRefNumberLov(String companyCode,
            int displayPage, String invRefNo) throws SystemException {
		log.entering("UldController", "findInvoiceRefNumberLov");
        return ULDChargingInvoice.findInvoiceRefNumberLov(companyCode,
                displayPage, invRefNo);
	}

	/**
	 * @author A-1883
	 * @param companyCode
	 * @param uldNumbers
	 * @return Collection<String>
	 * @throws SystemException
	 */
    public Collection<String> validateMultipleULDFormats(String companyCode,
            Collection<String> uldNumbers) throws SystemException {
		log.entering("UldController", "validateMultipleULDFormats");
		Collection<String> inavlidUldNumbers = null;
		boolean isValidULD = false;
		if (uldNumbers != null && uldNumbers.size() > 0) {
			for (String uldNumber : uldNumbers) {
				isValidULD = checkvalidateULDFormat(companyCode, uldNumber);
				if (!isValidULD) {
					if (inavlidUldNumbers == null) {
						inavlidUldNumbers = new ArrayList<String>();
					}
					inavlidUldNumbers.add(uldNumber);
				}
			}
		}
		log.log(Log.FINE, "inavlidUldNumbers are", inavlidUldNumbers);
		log.exiting("UldController", "validateMultipleULDFormats");
		return inavlidUldNumbers;
	}

	/**
	 * This method is used to update ULD Repair InvoiceDetails (waived amount
	 * and remarks)
	 *
	 * @param uLDRepairInvoiceDetailsVOs
	 * @throws SystemException
	 */
    public void updateULDRepairInvoiceDetails(
            Collection<ULDRepairInvoiceDetailsVO> uLDRepairInvoiceDetailsVOs)
			throws SystemException {
		log.entering("UldController", "updateULDRepairInvoiceDetails");
		if (uLDRepairInvoiceDetailsVOs != null) {
			for (ULDRepairInvoiceDetailsVO uLDRepairInvoiceDetailsVO : uLDRepairInvoiceDetailsVOs) {
				if (ULDRepairInvoiceDetailsVO.OPERATION_FLAG_UPDATE
						.equals(uLDRepairInvoiceDetailsVO.getOperationFlag())) {
                    ULDRepair uLDRepair = ULDRepair.find(
                            uLDRepairInvoiceDetailsVO.getCompanyCode(),
                            uLDRepairInvoiceDetailsVO.getUldNumber(),
                            uLDRepairInvoiceDetailsVO.getRepairSeqNumber());
                    uLDRepair.setWaivedAmount(uLDRepairInvoiceDetailsVO
                            .getWaivedAmount());
                    uLDRepair.setRepairRemarks(uLDRepairInvoiceDetailsVO
                            .getRepairRemarks());
                    uLDRepair.setLastUpdateTime(uLDRepairInvoiceDetailsVO
                            .getLastUpdatedTime());

				}
			}
		}
		log.exiting("UldController", "updateULDRepairInvoiceDetails");
	}

	/**
	 *
	 * @param transactionDetailsVo
	 * @return
	 * @throws SystemException
	 */
    public ULD checkULDExistsForTransaction(
            ULDTransactionDetailsVO transactionDetailsVo)
            throws SystemException {
        ULD uld = null;
        try {
            log.log(Log.INFO, "CHECK WHETER THE ULD ALREADY EXISTS");
            uld = ULD.find(transactionDetailsVo.getCompanyCode(),
                    transactionDetailsVo.getUldNumber());
		} catch (FinderException ex) {
			log.log(Log.INFO, "FINDER EXCEPTION IS THROWN");
		}

		return uld;
	}

	/**
	 * This method is used to Monitor ULD stock
	 *
	 * @author A-1883
	 * @param uLDStockConfigFilterVO
	 * @param displayPage
	 * @return Page<ULDStockListVO>
	 * @throws SystemException
	 */
    public Page<ULDStockListVO> findULDStockList(
            ULDStockConfigFilterVO uLDStockConfigFilterVO, int displayPage)
			throws SystemException {
		log.entering("UldController", "findULDStockList");
        //Page<ULDStockListVO> sortedPage =null;

        return ULD.findULDStockList(uLDStockConfigFilterVO, displayPage);
        //====Added for sorting Balance cloumn in the parent row of tree structure======
        /*ArrayList<ULDStockListVO> sortedparentStockListVO =null;
        sortedparentStockListVO =new ArrayList<ULDStockListVO>(page);
        if(uLDStockConfigFilterVO.getSort()!=null) {
        if(uLDStockConfigFilterVO.getSort().equals(ULD_SORTING_ORDER_DESC))
            Collections.sort(sortedparentStockListVO,new ParentBalanceComparatorDesc());
        else if(uLDStockConfigFilterVO.getSort().equals(ULD_SORTING_ORDER_ASC))
            Collections.sort(sortedparentStockListVO,new ParentBalanceComparatorAsc());

        }
        log.entering("UldController", "findULDStockList22222222222222");
        sortedPage = new Page<ULDStockListVO>(sortedparentStockListVO,0,0,0,0,0,false);
        //================ends===========================================================

        return sortedPage;*/
    }
    /**
     *
     * A-2934
     * Comparator to sort in descending order
	 */
	private static class ParentBalanceComparatorDesc implements Comparator<ULDStockListVO> {


        public int compare(ULDStockListVO firstULDStockListVO,
                ULDStockListVO secondULDStockListVO) {
            return (firstULDStockListVO.getBalance() < secondULDStockListVO.getBalance() ? 1 : 0) ;
        }
    }
    /**
     *
     * A-2934
     * Comparator to sort in ascending order
	 */
	private static class ParentBalanceComparatorAsc implements Comparator<ULDStockListVO> {


        public int compare(ULDStockListVO firstULDStockListVO,
                ULDStockListVO secondULDStockListVO) {
            return (firstULDStockListVO.getBalance() > secondULDStockListVO.getBalance() ? 1 : 0) ;
		}
	}

	/**
	 *
	 * A-1950
	 *
	 * @param uldStockConfig
	 * @param uldConfigAuditVO
	 * @param uldStockConfigVO
	 */
    private void findULDStockConfigAuditVO(ULDStockConfig uldStockConfig,
            ULDConfigAuditVO uldConfigAuditVO, ULDStockConfigVO uldStockConfigVO) {

		log.log(Log.FINE, "---------setting uldStockConfigAuditVO VO-------");
		StringBuffer additionalInfo = new StringBuffer();

        log.log(Log.INFO, "!!!!!!!!!!!! uldStockConfig.getUldStockConfigPK() ",
                uldStockConfig.getUldStockConfigPK());
        uldConfigAuditVO.setCompanyCode(uldStockConfig.getUldStockConfigPK()
                .getCompanyCode());

		if (uldStockConfig.getUldStockConfigPK().getStationCode() != null) {
			uldConfigAuditVO
                    .setTxnTime(new LocalDate(uldStockConfig
                            .getUldStockConfigPK().getStationCode(),
                            Location.ARP, true).toGMTDate());
            uldConfigAuditVO
                    .setTxnLocalTime(new LocalDate(uldStockConfig
                            .getUldStockConfigPK().getStationCode(),
                            Location.ARP, true));
		}

		uldConfigAuditVO.setUserId(uldStockConfig.getLastUpdatedUser());
		// uldConfigAuditVO.setAuditRemarks(uldStockConfig.ge)
		// Commented by a-3045 for bug 28905 on 15Jan09
		// if (!ULDStockConfigVO.OPERATION_FLAG_DELETE.equals(uldStockConfigVO
		// .getOperationFlag())) {

		additionalInfo.append(" AirlineCode - ");
		additionalInfo.append(uldStockConfigVO.getAirlineCode());
		additionalInfo.append(",");

		additionalInfo.append(" AirportCode - ");
		additionalInfo.append(uldStockConfigVO.getStationCode());
		additionalInfo.append(",");

		additionalInfo.append(" MaxQty - ");
		additionalInfo.append(uldStockConfigVO.getMaxQty());
		additionalInfo.append(",");

		additionalInfo.append(" MinQty - ");
		additionalInfo.append(uldStockConfigVO.getMinQty());
		// }
		uldConfigAuditVO.setAdditionalInformation(additionalInfo.toString());

        log.exiting("findULDStockConfigAuditVO",
                "...Finished construction of vo");
	}

	/**
	 *
	 * @param uLDAgreement
	 * @param uLDConfigAuditVO
	 * @return
	 * @throws SystemException
	 */
    private void findULDConfigAuditVOForAgreement(ULDAgreement uLDAgreement,
            ULDConfigAuditVO uLDConfigAuditVO, ULDAgreementVO uldAgreementVO)
            throws SystemException {

        log.log(Log.FINE, "---------setting ULDConfigsAuditVO VO-------");
        StringBuffer additionalInfo = new StringBuffer();

        log.log(Log.INFO, "!!!!!!!!!!!! uLDAgreement.getUldAgreementPK() ",
                uLDAgreement.getUldAgreementPK());
        uLDConfigAuditVO.setCompanyCode(uLDAgreement.getUldAgreementPK()
                .getCompanyCode());

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        String airportCode = logonAttributes.getAirportCode();

        uLDConfigAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP,
                true).toGMTDate());
        uLDConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                Location.ARP, true));
		uLDConfigAuditVO.setUserId(uLDAgreement.getLastUpdatedUser());
		uLDConfigAuditVO.setAuditRemarks(uLDAgreement.getRemark());

		additionalInfo.append("AgreementCode - ");
        additionalInfo.append(uLDAgreement.getUldAgreementPK()
                .getAgreementNumber());
		additionalInfo.append(",");

		additionalInfo.append("AgreementDate - ");
		additionalInfo.append(uldAgreementVO.getAgreementDate());
		additionalInfo.append(",");

		additionalInfo.append("ApplicableRate - ");
		additionalInfo.append(uldAgreementVO.getDemurrageRate());

        if (uldAgreementVO.getUldAgreementDetailVOs() != null
                && uldAgreementVO.getUldAgreementDetailVOs().size() > 0) {
            for (ULDAgreementDetailsVO agreementDetailsVO : uldAgreementVO
                    .getUldAgreementDetailVOs()) {
				additionalInfo.append(",");
				additionalInfo.append("AirportCode - ");
				additionalInfo.append(agreementDetailsVO.getStation());

				additionalInfo.append(" AND ");
				additionalInfo.append("ULDTypeCode - ");
				additionalInfo.append(agreementDetailsVO.getUldTypeCode());
			}
		}
		uLDConfigAuditVO.setAdditionalInformation(additionalInfo.toString());
        log.log(Log.FINE, "findULDConfigAuditVOForAgreement  vo",
                uLDConfigAuditVO);
		log.exiting("findULDConfigAuditVO", "...Finished construction of vo");
	}

	/**
	 *
	 * A-1950
	 *
	 * @param uldDamage
	 * @param uldAuditVO
	 * @throws SystemException
	 */
    private void findULDAuditVOForDamage(ULDDamage uldDamage,
            ULDAuditVO uldAuditVO, ULDDamageVO uldDamageVO)
            throws SystemException {

        log
                .log(
                        Log.FINE,
                        "---------setting uldAuditVO VO-------***************************************",
                        uldDamageVO);
		StringBuffer additionalInfo = new StringBuffer();
		uldAuditVO.setCompanyCode(uldDamage.getUldDamagePK().getCompanyCode());
		uldAuditVO.setUldNumber(uldDamage.getUldDamagePK().getUldNumber());
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        String airportCode = logonAttributes.getAirportCode();

        uldAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP, true)
                .toGMTDate());
        uldAuditVO.setTxnLocalTime(new LocalDate(airportCode, Location.ARP,
                true));
		uldAuditVO.setAuditRemarks(uldDamage.getDamageRemarks());
		uldAuditVO.setUserId(uldDamage.getLastUpdatedUser());
		// Commented by a-3045 for bug 28905 on 15Jan09
		// if (!ULDDamageVO.OPERATION_FLAG_DELETE.equals(uldDamageVO
		// .getOperationFlag())) {
		additionalInfo.append("DamageSequenceNumber - ");
        additionalInfo.append(uldDamage.getUldDamagePK()
                .getDamageSequenceNumber());

		additionalInfo.append(",");
		additionalInfo.append("DamageCode - ");
		additionalInfo.append(uldDamageVO.getDamageCode());

		if (uldDamageVO.getSeverity() != null) {
			additionalInfo.append(",");
			additionalInfo.append("Severity - ");
			additionalInfo.append(uldDamageVO.getSeverity());
		}
		// }

		/*
		 * if (uldAuditVO.getAuditFields() != null &&
		 * uldAuditVO.getAuditFields().size() > 0) { log.log(Log.INFO, "Going to
		 * populate additional info"); for (AuditFieldVO auditField :
		 * uldAuditVO.getAuditFields()) { if (auditField != null) {
		 * additionalInfo.append(" || "); additionalInfo.append(
		 * auditField.getFieldName()); additionalInfo.append(" : ");
		 * additionalInfo.append(auditField.getNewValue()); } else {
		 * log.log(Log.WARNING, "auditField is NULL"); } } }
		 */
		uldAuditVO.setAdditionalInformation(additionalInfo.toString());
        log.exiting("findULDStockConfigAuditVO",
                "...Finished construction ofuldDamageAuditVO vo");
	}

	/**
	 *
	 * A-1950
	 *
	 * @param uldRepair
	 * @param uldAuditVO
	 * @throws SystemException
	 */
    private void findULDAuditVOForULDRepair(ULDRepair uldRepair,
            ULDAuditVO uldAuditVO, ULDRepairVO uldRepairVO)
            throws SystemException {

        log
                .log(
                        Log.FINE,
                        "---------setting uldAuditVO VO-------############uldRepairVO######################",
						uldRepairVO);
		StringBuffer additionalInfo = new StringBuffer();

		uldAuditVO.setCompanyCode(uldRepair.getUldRepairPK().getCompanyCode());
		uldAuditVO.setUldNumber(uldRepair.getUldRepairPK().getUldNumber());
		// uldAuditVO
		// .setRepairSequenceNumber(uldRepair.getUldRepairPK().getRepairSequenceNumber());
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        String airportCode = logonAttributes.getAirportCode();

        uldAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP, true)
                .toGMTDate());
        uldAuditVO.setTxnLocalTime(new LocalDate(airportCode, Location.ARP,
                true));
		uldAuditVO.setAuditRemarks(uldRepairVO.getRemarks());
		uldAuditVO.setUserId(uldRepair.getLastUpdateUser());

        additionalInfo.append(" RepairCode - ").append(
                uldRepairVO.getRepairHead());
        additionalInfo.append(",");
        additionalInfo.append("RepairAmount - ")
                .append(uldRepairVO.getAmount());
		/*
		 * if (uldAuditVO.getAuditFields() != null &&
		 * uldAuditVO.getAuditFields().size() > 0) { log.log(Log.INFO, "Going to
		 * populate additional info"); for (AuditFieldVO auditField :
		 * uldAuditVO.getAuditFields()) { if (auditField != null) {
		 * additionalInfo.append(" || ");
		 * additionalInfo.append(auditField.getFieldName());
		 * additionalInfo.append(" : ");
		 * additionalInfo.append(auditField.getNewValue()); } else {
		 * log.log(Log.WARNING, "auditField is NULL###############"); } } }
		 */
		uldAuditVO.setAdditionalInformation(additionalInfo.toString());
        log.exiting("findULDStockAuditVO",
                "...Finished construction of uldRepairAuditVO vo");
	}

	/**
	 *
	 * @param uldTransactionDetailsVos
	 * @return
	 * @throws SystemException
	 * @throws AgreementDoesNotExistsException
	 */
	public Collection<String> findAgreementNumberForTransaction(
			Collection<ULDTransactionDetailsVO> uldTransactionDetailsVos)
			throws SystemException, AgreementDoesNotExistsException {
        log.entering("INSIDE THE CONTROLLER",
                "findAgreementNumberForTransaction");
        log.entering("INSIDE THE CONTROLLER",
                "findAgreementNumberForTransaction");
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		Collection<String> uldAgreementVos = new ArrayList<String>();

        if (uldTransactionDetailsVos != null
                && uldTransactionDetailsVos.size() > 0) {
			for (ULDTransactionDetailsVO uldTransactionDetailsVo : uldTransactionDetailsVos) {
				ULDAgreementVO uldAgreementVO = null;
				ULDAgreementFilterVO uldAgreementFilterVo = new ULDAgreementFilterVO();
                uldAgreementFilterVo.setCompanyCode(uldTransactionDetailsVo
                        .getCompanyCode());
                // ***change
                if (LOANED_TRANSACTION.equals(uldTransactionDetailsVo
                        .getTransactionType())) {
                    uldAgreementFilterVo.setPartyCode(uldTransactionDetailsVo
                            .getToPartyCode());
                    uldAgreementFilterVo.setFromPartyCode(uldTransactionDetailsVo
                          .getFromPartyCode());
                } else {
                    uldAgreementFilterVo.setPartyCode(uldTransactionDetailsVo
                            .getFromPartyCode());
                    uldAgreementFilterVo.setFromPartyCode(uldTransactionDetailsVo
                            .getToPartyCode());//A-7764 ICRD-289360
                }
                //currently Loan and borrow are handling using trasaction type L
                //added as part of ICRD-232684 by A-4393 starts 
               /* uldAgreementFilterVo.setPartyCode(uldTransactionDetailsVo
                        .getToPartyCode()); A-7764 ICRD-289360*/
                uldAgreementFilterVo.setFromPartyType("A");
//                uldAgreementFilterVo.setFromPartyCode(uldTransactionDetailsVo
//                        .getFromPartyCode()); A-7764 ICRD-289360
                //added as part of ICRD-232684 by A-4393 ends 
                 uldAgreementFilterVo.setUldTypeCode(uldTransactionDetailsVo.getUldType());
                uldAgreementFilterVo.setPartyType(uldTransactionDetailsVo
                        .getPartyType());
                uldAgreementFilterVo.setTxnType(uldTransactionDetailsVo
                        .getTransactionType());
				// Added by A-3268 for Bug 101916
                if (RETURN_TRANSACTION.equals(uldTransactionDetailsVo
                        .getTransactionType())) {
					uldAgreementFilterVo.setTxnType(LOANED_TRANSACTION);
					/**
					 * **********set Return date for bug 102920 starts
					 * **************************
					 */
                    uldAgreementFilterVo
                            .setTransactionDate(uldTransactionDetailsVo
                                    .getReturnDate());
					/**
					 * **********set Return date for bug 102920 ends
					 * **************************
					 */
				} else {
                    uldAgreementFilterVo
                            .setTransactionDate(uldTransactionDetailsVo
                                    .getTransactionDate());
                }

                uldAgreementFilterVo.setUldTypeCode(uldTransactionDetailsVo
                        .getUldType());
                uldAgreementFilterVo
                        .setTransactionStation(uldTransactionDetailsVo
                                .getTransactionStationCode());
                uldAgreementVO = ULDAgreement
                        .findULDAgreementForReturnTransaction(uldAgreementFilterVo);
                if (uldAgreementVO != null) {
                    log
                            .log(Log.INFO,
                                    "ULDAGREEMENTVOS ADDED TO THE COLLECTION");
					uldAgreementVos.add(uldAgreementVO.getAgreementNumber());

				} else {
					log.log(Log.FINE, "ULDAGREEMENTVO IS NULL");
                    log
                            .log(Log.INFO,
                                    "ERRORS CREATED FOR THE AGREEMENT .. AGREEMENT DOES NOT EXISTS");
					// modified by a-3278 for 53471(Agreement validation in LUC
					// message processing)
					// ULD number also added to the error data
                    errors.add(new ErrorVO(
                            "uld.defaults.agreementdoesnotexists",
                            new Object[] {
                                    uldTransactionDetailsVo.getUldType(),
                                    uldTransactionDetailsVo
                                            .getTransactionStationCode(),
                                    uldTransactionDetailsVo.getPartyType(),
                                    uldTransactionDetailsVo
                                            .getTransactionType(),
									uldTransactionDetailsVo.getUldNumber() }));
				}
			}
		}
		if (errors.size() > 0) {
			log.log(Log.INFO, "ERROR VOS THROWN ");
			AgreementDoesNotExistsException agreementDoesNotExistsException = new AgreementDoesNotExistsException();
			agreementDoesNotExistsException.addErrors(errors);
			throw agreementDoesNotExistsException;
		}
		return uldAgreementVos;
	}

	/**
	 *
	 * @param ucmMessageVO
	 * @throws SystemException
	 */
    public void generateUCMMessage(UCMMessageVO ucmMessageVO)
            throws SystemException {
		log.entering("ULDController", "generateUCMMessage");
		log.log(Log.INFO, "%%%%%%%%%%%%%%%%%  ucmMessageVO", ucmMessageVO);
		new ULDMessageProcessor().sendManualUCMMessage(ucmMessageVO);
	}

	/**
	 *
	 * @param ucmMessageVO
	 * @throws SystemException
	 */
	/*
	 * private void uldStockUpdate(UCMMessageVO ucmMessageVO) throws
	 * SystemException { log.entering("ULDController", "uldStockUpdate"); String
	 * ownerCode = ""; String uldNumber = ""; ULD uldMessage = new ULD(); ULD
     * uldMessaging = new ULD(); if (ucmMessageVO.getUcmIncomingULDDetailsVOs() !=
     * null && ucmMessageVO.getUcmIncomingULDDetailsVOs().size() > 0) { for
	 * (UCMIncomingULDDetailsVO ucmIncomingULDDetailsVO : ucmMessageVO
	 * .getUcmIncomingULDDetailsVOs()) {
	 *
	 * if (ucmIncomingULDDetailsVO.getUldOwnerCode() == null) { ownerCode =
	 * ucmMessageVO.getUcmFlightIdentificationVO() .getCarrierCode(); } else {
	 * ownerCode = ucmIncomingULDDetailsVO.getUldOwnerCode(); } uldNumber = new
	 * StringBuilder().append( ucmIncomingULDDetailsVO.getUldType()).append(
	 * ucmIncomingULDDetailsVO.getUldSerialNumber()).append(
	 * ownerCode).toString(); log.log(Log.INFO, "%%%%%%%%%%%%% uldNumber " +
	 * uldNumber); try { uldMessage = ULD.find(ucmMessageVO.getCompanyCode(),
	 * uldNumber); } catch (FinderException finderException) { throw new
	 * SystemException(finderException.getErrorCode()); }
	 * uldMessage.setTransitStatus("N");
	 * uldMessage.setCurrentStation(ucmMessageVO.getAirportCode()); } } if
	 * (ucmMessageVO.getUcmOutgoingULDDetailsVOs() != null &&
	 * ucmMessageVO.getUcmOutgoingULDDetailsVOs().size() > 0) { for
	 * (UCMOutgoingULDDetailsVO ucmOutgoingULDDetailsVO : ucmMessageVO
	 * .getUcmOutgoingULDDetailsVOs()) { if
	 * (ucmOutgoingULDDetailsVO.getUldOwnerCode() == null) { ownerCode =
	 * ucmMessageVO.getUcmFlightIdentificationVO() .getCarrierCode(); } else {
	 * ownerCode = ucmOutgoingULDDetailsVO.getUldOwnerCode(); } uldNumber = new
	 * StringBuilder().append( ucmOutgoingULDDetailsVO.getUldType()).append(
	 * ucmOutgoingULDDetailsVO.getUldSerialNumber()).append(
	 * ownerCode).toString(); log.log(Log.INFO, "%%%%%%%%%%%%% uldNumber " +
	 * uldNumber); try { uldMessaging = ULD.find(ucmMessageVO.getCompanyCode(),
	 * uldNumber); } catch (FinderException finderException) { throw new
	 * SystemException(finderException.getErrorCode()); }
	 * uldMessaging.setTransitStatus("Y"); } } }
	 */
	/**
	 *
	 * @param scmMessageVO
	 * @throws SystemException
	 */
    public void generateSCMMessage(SCMMessageVO scmMessageVO)
            throws SystemException, MessageConfigException {
		log.entering("ULDController", "generateSCMMessage");
		new ULDMessageProcessor().sendManualSCMMessage(scmMessageVO);
		log.log(Log.INFO, "%%%%%%%%%   Message sent seccessfully");
	}

    /**
     * Used for 	:   IASCB-162396 for sending UCMMessage
     * Parameters	:	@param Collection<UCMMessageVO> ucmMessageVOs
     * Parameters	:	@throws SystemException
     * Parameters	:	@throws ULDDefaultsBusinessException
     * Return type	: 	void
     */
    public void generateUCMMessage(Collection<UCMMessageVO> ucmMessageVOs)
            throws SystemException, ULDDefaultsBusinessException {
        for (UCMMessageVO ucmMessageVO : ucmMessageVOs) {
            new ULDMessageProcessor().sendManualUCMMessage(ucmMessageVO);
        }
    }
    /**
	 *
	 * @param lucMessageVO
	 * @throws SystemException
	 */
	/**
	 * @param lucMessageVO
	 * @return
	 * @throws SystemException
	 * @throws MessageConfigException
	 */
	public Collection<MessageVO> generateLUCMessage(LUCMessageVO lucMessageVO)
			throws SystemException, MessageConfigException {
		log.entering("ULDController", "generateLUCMessage");

		/*
		 * Commented by Ashraf binu since LUC and MUC have been separated into
		 * two methods only LUC will be sent by thi s method boolean isMUC =
		 * false; boolean isCRNGenerated = false; if
		 * (lucMessageVO.getUldDetails() != null &&
		 * lucMessageVO.getUldDetails().size() > 0) { if
		 * (lucMessageVO.getUldDetails().iterator().next()
		 * .getUldReceiptNumber() == null) { isCRNGenerated = true; long
		 * controlReceiptNumber = 0; long modifiedReceiptNumber = 0; Criterion
		 * receiptNumber = KeyUtils.getCriterion(lucMessageVO .getCompanyCode(),
		 * CTRL_RECP_NUM, lucMessageVO .getAirlineCode()); String key =
		 * KeyUtils.getKey(receiptNumber); log.log(Log.FINE, "criterion
		 * key!!!!!!" + key); controlReceiptNumber = new Long(key);
		 * log.log(Log.INFO, "!!!!!controlReceiptNumber" +
		 * controlReceiptNumber); modifiedReceiptNumber = controlReceiptNumber +
		 * 999; log.log(Log.INFO, "!!!!!modifiedReceiptNumber adding 999" +
		 * modifiedReceiptNumber);
		 *
		 * String airlineId = ULD.findAirlineCode(lucMessageVO
         * .getCompanyCode(),
         * lucMessageVO.getUldDetails().iterator().next().getTransferringPartyDetailsVO().getCarrierCode());
		 *
		 * if (lucMessageVO.getUldDetails() != null &&
		 * lucMessageVO.getUldDetails().size() > 0) { int count = 1; for
		 * (LUCULDDetailsVO detailsVO : lucMessageVO .getUldDetails()) { String
		 * number = new StringBuilder().append(
		 * modifiedReceiptNumber).append(count).toString(); String receipt = new
		 * StringBuilder().append(airlineId)
		 * .append("-").append(number).toString(); log.log(Log.INFO,
		 * "%%%%%%%%%%%%% Control Receipt Number which is attacheed with LUC " +
         * receipt); detailsVO.setUldReceiptNumber(receipt); count++; } } }else { } }
		 */
		/*
		 * String secondPart = null; String ctrlRecpt = null; int i = 0; for
		 * (LUCULDDetailsVO detailsVO : lucMessageVO.getUldDetails()) { //
		 * detailsVO.setUldReceiptNumber("205-10000012"); //
		 * detailsVO.setUldReceiptNumber("933-10000012"); if
		 * (detailsVO.getUldReceiptNumber() != null &&
		 * detailsVO.getUldReceiptNumber().trim().length() > 0) { if (i == 0) {
		 * ctrlRecpt = detailsVO.getUldReceiptNumber(); log.log(Log.INFO,
		 * "%%%%%%%%%%%%%%%ctrlRecpt" + ctrlRecpt); //secondPart =
		 * ctrlRecpt.substring(8, 12); secondPart = ctrlRecpt.substring(5,
		 * ctrlRecpt.length());
		 *
		 * log.log(Log.INFO, "%%%%%%%% secondPart" + secondPart); i++; } else {
		 * if (!secondPart.equals(detailsVO.getUldReceiptNumber() .substring(5,
		 * ctrlRecpt.length()))) { isMUC = true; break; } } } }
		 */

        log
                .log(Log.ALL, "return borrow sendManualLUCMessage====",
                        lucMessageVO);
		// added by a-3045 for QF1022 starts
        Collection<MessageVO> messageVOs = new ULDMessageProcessor()
                .sendManualLUCMessage(lucMessageVO);
		if (messageVOs != null && messageVOs.size() > 0) {
            ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                    ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
                    ULDAgreementVO.ENTITY);
            LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                    .getLogonAttributesVO();
            log.log(Log.FINE, "---------setting ULDConfigsAuditVO VO-------");
            StringBuffer additionalInfo = new StringBuffer();
            uldConfigAuditVO.setCompanyCode(logonAttributes.getCompanyCode());
            String airportCode = logonAttributes.getAirportCode();
            uldConfigAuditVO.setTxnTime(new LocalDate(airportCode,
                    Location.ARP, true).toGMTDate());
            uldConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                    Location.ARP, true));
            uldConfigAuditVO.setUserId(logonAttributes.getUserId());
            log.log(Log.FINE, "---------AuditRemarks-------");
            if (lucMessageVO.getSupplInfoVO() != null) {
                log.log(Log.FINE, "---------AuditRemarks-------", lucMessageVO.getSupplInfoVO().getRemarks());
                uldConfigAuditVO.setAuditRemarks(lucMessageVO.getSupplInfoVO()
                        .getRemarks());
            }
            if (lucMessageVO.getUldDetails() != null
                    && lucMessageVO.getUldDetails().size() > 0) {
                for (LUCULDDetailsVO uldDetailsVO : lucMessageVO
                        .getUldDetails()) {
                    additionalInfo.append("ULDNo. - ");
                    additionalInfo.append(new StringBuilder(uldDetailsVO
                            .getUldIdentificationVO().getUldType()).append(
                            uldDetailsVO.getUldIdentificationVO()
                                    .getUldSerialNumber()).append(
                            uldDetailsVO.getUldIdentificationVO()
                                    .getUldOwnerCode()));
                    additionalInfo.append("/CRNNo. - ");
                    additionalInfo.append(uldDetailsVO.getUldReceiptNumber());
                }
            }
            uldConfigAuditVO
                    .setAdditionalInformation(additionalInfo.toString());
			uldConfigAuditVO.setActionCode(GENERATE_LUCMESSAGE);
            log.log(Log.FINE, "---------uldConfigAuditVO-------",
                    uldConfigAuditVO.getAdditionalInformation());
			AuditUtils.performAudit(uldConfigAuditVO);
		}
		// added by a-3045 for QF1022 ends
		return messageVOs;
		/*
		 * }
		 *
		 * return null;
		 */}


	/**
	 *
	 * @param uldDiscrepancyVOs
	 * @return
	 * @throws SystemException
	 * @throws DiscrepancyAlreadyCaughtException
	 */
    public String saveULDDiscrepencyDetails(
            Collection<ULDDiscrepancyVO> uldDiscrepancyVOs)
			throws SystemException, DiscrepancyAlreadyCaughtException {

		log.entering("ULDController", "saveULDDiscrepencyDetails");
		String returnValue = null;
		String code = null;
		boolean isFoundA = true;
		boolean isFoundB = true;
		boolean isFoundC = true;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        Collection<ULDDiscrepancy> discrepancys = null;
        for (ULDDiscrepancyVO uldDiscrepancyVO : uldDiscrepancyVOs) {
            if (ULDDiscrepancyVO.OPERATION_FLAG_DELETE.equals(uldDiscrepancyVO
                    .getOperationFlag())) {
				// Change done by Sreekumar S as a part of AirNZ CR434
                Collection<ULDDiscrepancy> uldDiscrepancys = ULDDiscrepancy
                        .findULDDiscrepanciesObjects(uldDiscrepancyVO
                                .getCompanyCode(), uldDiscrepancyVO
                                .getUldNumber(),null);
				if (uldDiscrepancys != null && uldDiscrepancys.size() > 0) {
					for (ULDDiscrepancy uldDiscrepancy : uldDiscrepancys) {
						if (uldDiscrepancy.getScmSequenceNumber() != null
                                && uldDiscrepancy.getScmSequenceNumber().trim()
                                        .length() > 0) {
                            log
                                    .log(Log.INFO,
                                            "SCMSEQNUM EXISTS $ DISCREPANCY>>>GOING TO FIND SCM");

                            ULDSCMReconcileDetailsVO detailsVO = new ULDSCMReconcileDetailsVO();
                            ULDSCMReconcileDetails uLDSCMReconcileDetails = null;

                            detailsVO.setCompanyCode(uldDiscrepancy
                                    .getUldDiscrepancyPK().getCompanyCode());
                            detailsVO.setUldNumber(uldDiscrepancy
                                    .getUldDiscrepancyPK().getUldNumber());
                            detailsVO.setAirportCode(uldDiscrepancy
                                    .getReportingStation());
                            detailsVO.setSequenceNumber(uldDiscrepancy
                                    .getScmSequenceNumber());

                            detailsVO.setAirlineIdentifier(logonAttributes
                                    .getOwnAirlineIdentifier());

                            uLDSCMReconcileDetails = ULDSCMReconcileDetails
                                    .find(detailsVO);
                            uLDSCMReconcileDetails.setErrorCode(null);

                            // Added by Sreekumar S as a part of AirNZ CR434
                            uldDiscrepancyVO.setCloseStatus("Y");
                            uldDiscrepancy.update(uldDiscrepancyVO);
                            // Added by Sreekumar S as a part of AirNZ CR434
                            // ends
                            ULDAuditVO uldAuditVO = new ULDAuditVO(
                                    ULDDiscrepancyVO.MODULE,
                                    ULDDiscrepancyVO.SUBMODULE,
                                    ULDDiscrepancyVO.ENTITY);

                            uldAuditVO = (ULDAuditVO) AuditUtils
                                    .populateAuditDetails(uldAuditVO,
                                            uldDiscrepancy, false);
							// Commented by Sreekumar S
							// uldDiscrepancy.remove();

                            findULDAuditVOForDiscrepancy(uldDiscrepancy,
                                    uldAuditVO, uldDiscrepancyVO);
                            uldAuditVO.setActionCode(DELETE_ULDDISCREPANCY);
                            log
                                    .log(
                                            Log.INFO,
                                            "uldAuditVO for delete discrepancy 1111----->",
                                            uldAuditVO);
							AuditUtils.performAudit(uldAuditVO);

						} else {
							// Else part Added by Sreekumar S as a part of AirNZ
							// CR434
							uldDiscrepancyVO.setCloseStatus("Y");
							uldDiscrepancy.update(uldDiscrepancyVO);
                            ULDAuditVO uldAuditVO = new ULDAuditVO(
                                    ULDDiscrepancyVO.MODULE,
                                    ULDDiscrepancyVO.SUBMODULE,
                                    ULDDiscrepancyVO.ENTITY);

                            uldAuditVO = (ULDAuditVO) AuditUtils
                                    .populateAuditDetails(uldAuditVO,
                                            uldDiscrepancy, false);
                            findULDAuditVOForDiscrepancy(uldDiscrepancy,
                                    uldAuditVO, uldDiscrepancyVO);
                            uldAuditVO.setActionCode(DELETE_ULDDISCREPANCY);
                            log
                                    .log(
                                            Log.INFO,
                                            "uldAuditVO for delete discrepancy 2222----->",
                                            uldAuditVO);
                            AuditUtils.performAudit(uldAuditVO);
                        }
                    }
                }
            }
        }
        for (ULDDiscrepancyVO uldDiscrepancyVO : uldDiscrepancyVOs) {
            if (ULDDiscrepancyVO.OPERATION_FLAG_INSERT.equals(uldDiscrepancyVO
                    .getOperationFlag())) {
                ULD uld = null;
                if (("M").equals(uldDiscrepancyVO.getDiscrepencyCode())) {
                    uld = new ULD();
                    try {
                        uld = ULD.find(uldDiscrepancyVO.getCompanyCode(),
                                uldDiscrepancyVO.getUldNumber());
					} catch (FinderException finderException) {
						isFoundB = false;
					}
					// Added by Sreekumar S
                    discrepancys = ULDDiscrepancy.findULDDiscrepanciesObjects(
                            uldDiscrepancyVO.getCompanyCode(), uldDiscrepancyVO
                                    .getUldNumber(),null);
					if (discrepancys == null || discrepancys.size() == 0) {
						log.log(Log.FINE, "********DISCREPANCY NULL****");
						isFoundA = false;
					}
                    log.log(Log.FINE, "------------isFoundB---------->>>>",
                            isFoundB);
                    log.log(Log.FINE, "------------isFoundA------------>>",
                            isFoundA);
					if (uldDiscrepancyVO.getReportingStation() == null) {
						uldDiscrepancyVO.setReportingStation("NULL");
					}
					if (uldDiscrepancyVO.getReportingStation() == null) {
						uldDiscrepancyVO.setReportingStation("NULL");
					}
					if (uldDiscrepancyVO.getFacilityType() == null) {
						uldDiscrepancyVO.setFacilityType("NULL");
					}
					if (uldDiscrepancyVO.getLocation() == null) {
						uldDiscrepancyVO.setLocation("NULL");
					}
					if (isFoundB) {
						if (!isFoundA) {
                            if (!uldDiscrepancyVO.getReportingStation().equals(
                                    uld.getCurrentStation())
                                    && (uldDiscrepancyVO.getFacilityType()
                                            .equals(uld.getFacilityType()))
                                    && (!uldDiscrepancyVO.getLocation().equals(
                                            uld.getLocation()))) {
                                log.log(Log.FINE,
                                        "inside ULD_IS_NOT_IN_THE_STOCK");
								// Discrepancy Code -M
								// This if block throws exception if the ULD is
								// in the airport stock.
                                ErrorVO errorVO = ErrorUtils
                                        .getError(
												DiscrepancyAlreadyCaughtException.ULD_IS_NOT_IN_THE_STOCK,
                                                uldDiscrepancyVO.getUldNumber(),
                                                uldDiscrepancyVO
                                                        .getReportingStation(),
                                                uldDiscrepancyVO.getLocation());
                                DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
                                discrepancyAlreadyCaughtException
                                        .addError(errorVO);
								throw discrepancyAlreadyCaughtException;
							}
							// Added by Sreekumar S on 24thMar08 - AirNZ CR 434
							
                            else if ((!uldDiscrepancyVO.getReportingStation()
                                    .equals(uld.getCurrentStation()))
                                    ) {
                                log.log(Log.FINE,
                                        "inside ULD_CANNOT_BE_MISSING");
                                // Throws Exception if we are trying to capture
                                // a missing discrepancy at an unexcepted
                                // airport/facilitytype/location.
                                // ie.
                                ErrorVO errorVO = ErrorUtils
                                        .getError(
                                                DiscrepancyAlreadyCaughtException.ULD_CANNOT_BE_MISSING,
                                                new Object[] {
                                                        uldDiscrepancyVO.getUldNumber(),
                                                        uldDiscrepancyVO
                                                                .getReportingStation(),
                                                        uldDiscrepancyVO.getLocation()!=null?uldDiscrepancyVO.getLocation():" " });
                                DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
                                discrepancyAlreadyCaughtException
                                        .addError(errorVO);
                                throw discrepancyAlreadyCaughtException;
                            }
                            else if(uldDiscrepancyVO.getFacilityType()!=null&&uldDiscrepancyVO.getFacilityType().trim().length()>0&&uldDiscrepancyVO.getLocation()!=null&&uldDiscrepancyVO.getLocation().trim().length()>0)
                            {
								//Modified by A-7359 for ICRD-260693 starts here
								String factyp=ULDVO.NO_LOCATION;
								String loc=ULDVO.NO_LOCATION;
								if(uld.getFacilityType()!=null){
									factyp=uld.getFacilityType();
								}
								if(uld.getLocation()!=null){
									loc=uld.getLocation();
								}
                                if( (!uldDiscrepancyVO.getFacilityType()
										.equals(factyp))
										|| (!uldDiscrepancyVO.getLocation().equals(loc)))
									//Modified by A-7359 for ICRD-260693 ends here
                            {
                                log.log(Log.FINE,
                                        "inside ULD_CANNOT_BE_MISSING");
                                // Throws Exception if we are trying to capture
                                // a missing discrepancy at an unexcepted
                                // airport/facilitytype/location.
                                // ie.
                                ErrorVO errorVO = ErrorUtils
                                        .getError(
                                                DiscrepancyAlreadyCaughtException.ULD_CANNOT_BE_MISSING,
                                                new Object[] {
                                                        uldDiscrepancyVO.getUldNumber(),
                                                        uldDiscrepancyVO
                                                                .getReportingStation(),
                                                        uldDiscrepancyVO.getLocation() });
                                DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
                                discrepancyAlreadyCaughtException
                                        .addError(errorVO);
                                throw discrepancyAlreadyCaughtException;
                                }
                            }
                        }
                    }
                } else {
                    uld = new ULD();
                    try {
                        uld = ULD.find(uldDiscrepancyVO.getCompanyCode(),
                                uldDiscrepancyVO.getUldNumber());
					} catch (FinderException finderException) {
						isFoundC = false;
					}
					if (isFoundC) {
                        if (uldDiscrepancyVO.getReportingStation().equals(
                                uld.getCurrentStation())
                                && (uldDiscrepancyVO.getFacilityType()
                                        .equals(uld.getFacilityType()))
                                && (uldDiscrepancyVO.getLocation().equals(uld
                                        .getLocation()))) {
							// throws exception when trying to capture
							// discrepancy for ULD which is already at the same
							// location.
							// Eg. AKE123AV is at AKL/OPS/OPN1 and if im trying
							// to capture FOUND Discrepancy at the same
							// location,
							// system wont allow to do so.Will throw exception
                            log.log(Log.FINE,
                                    "inside ULD_ALREADY_IN_THE_SAME_LOCATION");
                            ErrorVO errorVO = ErrorUtils
                                    .getError(
                                            DiscrepancyAlreadyCaughtException.ULD_ALREADY_IN_THE_SAME_LOCATION,
                                            new Object[] {
                                            uldDiscrepancyVO.getUldNumber(),
                                            uldDiscrepancyVO
                                                    .getReportingStation(),
                                            uldDiscrepancyVO.getLocation()});
							DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
							discrepancyAlreadyCaughtException.addError(errorVO);
							throw discrepancyAlreadyCaughtException;

						}
					}
				}
				log.log(Log.FINE, "i***************************");
                discrepancys = ULDDiscrepancy.findULDDiscrepanciesObjects(
                        uldDiscrepancyVO.getCompanyCode(), uldDiscrepancyVO
                                .getUldNumber(),uldDiscrepancyVO.getReportingStation());
				log.log(Log.FINE, "****************************");
				if (discrepancys == null || discrepancys.size() == 0) {
					log.log(Log.FINE, "********DISCREPANCY NULL****");
					isFoundA = false;
				}
                log.log(Log.FINE, "*******       isFoundA        ******",
                        isFoundA);
				if (isFoundA) {
					if (discrepancys != null && discrepancys.size() > 0) {
						for (ULDDiscrepancy discrepancy : discrepancys) {
                            if (uldDiscrepancyVO.getDiscrepencyCode().equals(
                                    discrepancy.getDiscrepancyCode())) {
                                log.log(Log.FINE,
                                        "inside DISCREPANCY_ALREADY_CAUGHT");
								// throws exception when trying to create
								// discrepancy for a ULD which has already
								// caught exception
                                if (("M").equals(discrepancy.getDiscrepancyCode()))
                                {
                                    code = "Missing";
                                } else {
                                    code = "Found";
                                }
                                String date = TimeConvertor.toStringFormat(
                                        discrepancy.getDiscrepancyDate(),
										TimeConvertor.CALENDAR_DATE_FORMAT);
								ErrorVO errorVO = ErrorUtils.getError(
												DiscrepancyAlreadyCaughtException.DISCREPANCY_ALREADY_CAUGHT,
                                        new Object[] {uldDiscrepancyVO.getUldNumber(),
                                        code, date, discrepancy.getLocation(),
                                        discrepancy.getReportingStation()});
                                DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
                                discrepancyAlreadyCaughtException
                                        .addError(errorVO);
                                throw discrepancyAlreadyCaughtException;
                            } else if (!uldDiscrepancyVO.getDiscrepencyCode()
                                    .equals(discrepancy.getDiscrepancyCode())
                                    && (uldDiscrepancyVO.getFacilityType()
                                            .equals(discrepancy
                                                    .getFacilityType()))
                                    && (uldDiscrepancyVO.getLocation()
                                            .equals(discrepancy.getLocation()))
									&& (uldDiscrepancyVO.getReportingStation()
                                            .equals(discrepancy
                                                    .getReportingStation()))) {
                                log.log(Log.FINE,
                                        "DISCREPANCY AT THE SAME LOCATION");
                                if (("M").equals(uldDiscrepancyVO.getDiscrepencyCode()))
                                {
                                    code = "Missing";
                                } else {
                                    code = "Found";
                                }

                                ErrorVO errorVO = ErrorUtils
                                        .getError(
                                                DiscrepancyAlreadyCaughtException.DISCREPANCY_AT_SAME_LOCATION,
                                                code, uldDiscrepancyVO
                                                        .getUldNumber(),
                                                uldDiscrepancyVO.getLocation(),
                                                uldDiscrepancyVO
                                                        .getReportingStation());

                                DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
                                discrepancyAlreadyCaughtException
                                        .addError(errorVO);
								throw discrepancyAlreadyCaughtException;
							} else if (!uldDiscrepancyVO.getReportingStation()
									.equals(discrepancy.getReportingStation())) {
                                log.log(Log.FINE,
                                        "inside DISCREPANCY_TOBE_SOLVED");
                                String date = TimeConvertor.toStringFormat(
                                        discrepancy.getDiscrepancyDate(),
                                        TimeConvertor.CALENDAR_DATE_FORMAT);

                                if (("M").equals(discrepancy.getDiscrepancyCode()))
                                {
                                    code = "Missing";
                                } else {
                                    code = "Found";
                                }
                                uld = new ULD();
                                try {
                                    uld = ULD.find(uldDiscrepancyVO
                                            .getCompanyCode(), uldDiscrepancyVO
                                            .getUldNumber());
                                } catch (FinderException finderException) {
                                    log
                                            .log(Log.FINE,
                                                    "inside Finder Exception DISCREPANCY_AT_SAME_LOCATION");
                                }
                                if (("M").equals(uldDiscrepancyVO.getDiscrepencyCode()))
                                {
									if ((uld.getCurrentStation() != null && uld.getCurrentStation().equalsIgnoreCase(uldDiscrepancyVO.getReportingStation()))
											&& (uld.getFacilityType() != null && uld.getFacilityType().equalsIgnoreCase(uldDiscrepancyVO.getFacilityType()))
											&& (uld.getLocation() != null && uld.getLocation().equalsIgnoreCase(uldDiscrepancyVO.getLocation()))) {
                                        /*
                                         * ErrorVO errorVO = ErrorUtils
                                         * .getError(
                                         * DiscrepancyAlreadyCaughtException.DISCREPANCY_TOBE_SOLVED,
										 * uldDiscrepancyVO.getUldNumber(),
										 * code, date, discrepancy
										 * .getReportingStation(),
										 * uldDiscrepancyVO
										 * .getReportingStation());
										 * DiscrepancyAlreadyCaughtException
										 * discrepancyAlreadyCaughtException =
										 * new
										 * DiscrepancyAlreadyCaughtException();
										 * discrepancyAlreadyCaughtException
										 * .addError(errorVO);
										 */

										// To be reviewed
										uldDiscrepancyVO.setCloseStatus("Y");
										// new ULDDiscrepancy(uldDiscrepancyVO);

										// Added by Preet for bug number 18685
										// on 15Oct08 starts
										// Movement will be marked automatically
										// and discrepancy will get updated
										uld = new ULD();
										try {
                                            uld = ULD.find(uldDiscrepancyVO
                                                    .getCompanyCode(),
                                                    uldDiscrepancyVO
                                                            .getUldNumber());
                                        } catch (FinderException finderException) {
                                            log
                                                    .log(Log.FINE,
                                                            "inside Finder Exception DISCREPANCY_AT_SAME_LOCATION");
                                        }
                                        ULDMovementVO movVO = new ULDMovementVO();
                                        movVO.setCompanyCode(logonAttributes
                                                .getCompanyCode());
                                        movVO.setUldNumber(uldDiscrepancyVO
                                                .getUldNumber());
                                        // changed by a-3045 for bug18685 on
                                        // 02Nov08 starts
                                        movVO.setPointOfLading(uldDiscrepancyVO
                                                .getReportingStation());
                                        movVO.setPointOfUnLading(discrepancy
                                                .getReportingStation());
                                        movVO.setCurrentStation(discrepancy
                                                .getReportingStation());
                                        // changed by a-3045 for bug18685 on
                                        // 02Nov08 ends
                                        movVO.setDummyMovement(true);
                                        if (uld.getContent() != null
                                                && uld.getContent().trim()
                                                        .length() > 0) {
                                            movVO.setContent(uld.getContent());
                                        } else {
                                            movVO.setContent(CONTENT_EMPTY);
                                        }
                                        movVO.setUpdateCurrentStation(true);
                                        movVO
                                                .setLastUpdatedUser(logonAttributes
                                                        .getUserId());
                                        if (uldDiscrepancyVO
                                                .getReportingStation() != null
                                                && uldDiscrepancyVO
                                                        .getReportingStation()
                                                        .trim().length() > 0) {
                                            movVO
                                                    .setLastUpdatedTime(new LocalDate(
                                                            uldDiscrepancyVO
                                                                    .getReportingStation(),
                                                            Location.ARP, true));
                                        } else {
                                            movVO
                                                    .setLastUpdatedTime(new LocalDate(
                                                            logonAttributes
                                                                    .getAirportCode(),
                                                            Location.ARP, true));
                                        }
                                        Collection<ULDMovementVO> movementVOs = new ArrayList<ULDMovementVO>();
                                        Collection<String> uldnos = new ArrayList<String>();
                                        movementVOs.add(movVO);
                                        uldnos.add(uldDiscrepancyVO
                                                .getUldNumber());
                                        try {
                                            log
                                                    .log(Log.INFO,
                                                            "GOING TO RECORD ULD MOVEMENT");
                                            saveULDMovement(uldnos, movementVOs);
                                        } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                                            // ULDdoes not exists
                                        }
                                        // added by a-3045 for bug18685 on
                                        // 02Nov08 starts
                                        returnValue = new StringBuilder()
                                                .append(
                                                        uldDiscrepancyVO
                                                                .getUldNumber())
                                                .append("-")
                                                .append(code)
                                                .append("-")
                                                .append(date)
                                                .append("-")
                                                .append(
                                                        discrepancy
                                                                .getReportingStation())
                                                .append("-")
                                                .append(
                                                        uldDiscrepancyVO
                                                                .getReportingStation())
                                                .append("-").append(
                                                        RECORD_ULD_MOVEMENT)
                                                .toString();
                                        // added by a-3045 for bug18685 on
                                        // 02Nov08 ends
                                        discrepancy.update(uldDiscrepancyVO);
                                        if(uldDiscrepancyVO.getLocation()!=null){
                                        	uld.setFacilityType(uldDiscrepancyVO.getFacilityType());
                                            uld.setLocation(uldDiscrepancyVO.getLocation());
                                        }else{
                                        	uld.setFacilityType(ULDVO.NO_LOCATION);
                                            uld.setLocation(ULDVO.NO_LOCATION);
                                        }
										// Added by Preet for bug number 18685
										// on 15Oct08 ends
										return returnValue;
									} else {
										// To be reviewed
                                        if (("M").equals(uldDiscrepancyVO
                                                .getDiscrepencyCode()))
                                        {
                                            code = "Missing";
                                        } else {
                                            code = "Found";
                                        }
                                        ErrorVO errorVO = ErrorUtils
                                                .getError(
                                                        DiscrepancyAlreadyCaughtException.DISCREPANCY_AT_SAME_LOCATION,
                                                        code,
                                                        uldDiscrepancyVO
                                                                .getUldNumber(),
                                                        uldDiscrepancyVO
                                                                .getLocation(),
                                                        uldDiscrepancyVO
                                                                .getReportingStation());

                                        DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
                                        discrepancyAlreadyCaughtException
                                                .addError(errorVO);
										throw discrepancyAlreadyCaughtException;
									}
								} else {
									// To be reviewed
									// uldDiscrepancyVO.setCloseStatus("Y");
									// new ULDDiscrepancy(uldDiscrepancyVO);
									// return String = "RECORDULDMVT"
									/*
									 * ErrorVO errorVO = ErrorUtils.getError(
                                     * DiscrepancyAlreadyCaughtException.DISCREPANCY_TOBE_SOLVED,
									 * uldDiscrepancyVO.getUldNumber(), code,
									 * date, discrepancy .getReportingStation(),
									 * uldDiscrepancyVO .getReportingStation());
									 * DiscrepancyAlreadyCaughtException
									 * discrepancyAlreadyCaughtException = new
									 * DiscrepancyAlreadyCaughtException();
									 * discrepancyAlreadyCaughtException
									 * .addError(errorVO); throw
									 * discrepancyAlreadyCaughtException;
									 */

									uldDiscrepancyVO.setCloseStatus("Y");
									// new ULDDiscrepancy(uldDiscrepancyVO);
									// Added by Preet for bug number 18685 on
									// 15Oct08 starts
									// Movement will be marked automatically and
									// discrepancy will get updated
									uld = new ULD();
									try {
                                        uld = ULD
                                                .find(uldDiscrepancyVO
                                                        .getCompanyCode(),
                                                        uldDiscrepancyVO
                                                                .getUldNumber());
                                    } catch (FinderException finderException) {
                                        log
                                                .log(Log.FINE,
                                                        "inside Finder Exception DISCREPANCY_AT_SAME_LOCATION");
                                    }
                                    ULDMovementVO movVO = new ULDMovementVO();
                                    movVO.setCompanyCode(logonAttributes
                                            .getCompanyCode());
                                    movVO.setUldNumber(uldDiscrepancyVO
                                            .getUldNumber());
                                    movVO.setPointOfLading(discrepancy
                                            .getReportingStation());
                                    movVO.setPointOfUnLading(uldDiscrepancyVO
                                            .getReportingStation());
                                    movVO.setCurrentStation(uldDiscrepancyVO
                                            .getReportingStation());
                                    movVO.setDummyMovement(true);
                                    movVO.setUpdateCurrentStation(true);
                                    movVO.setLastUpdatedUser(logonAttributes
                                            .getUserId());
                                    if (uld.getContent() != null
                                            && uld.getContent().trim().length() > 0) {
                                        movVO.setContent(uld.getContent());
                                    } else {
                                        movVO.setContent(CONTENT_EMPTY);
                                    }
                                    if (uldDiscrepancyVO.getReportingStation() != null
                                            && uldDiscrepancyVO
                                                    .getReportingStation()
                                                    .trim().length() > 0) {
                                        movVO.setLastUpdatedTime(new LocalDate(
                                                uldDiscrepancyVO
                                                        .getReportingStation(),
                                                Location.ARP, true));
                                    } else {
                                        movVO.setLastUpdatedTime(new LocalDate(
                                                logonAttributes
                                                        .getAirportCode(),
                                                Location.ARP, true));
                                    }
                                    Collection<ULDMovementVO> movementVOs = new ArrayList<ULDMovementVO>();
                                    Collection<String> uldnos = new ArrayList<String>();
                                    movementVOs.add(movVO);
                                    uldnos.add(uldDiscrepancyVO.getUldNumber());
                                    try {
                                        log.log(Log.INFO,
                                                "GOING TO RECORD ULD MOVEMENT");
                                        saveULDMovement(uldnos, movementVOs);
                                    } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                                        // ULDdoes not exists
                                    }
                                    // added by a-3045 for bug18685 on 02Nov08
                                    // ends
                                    returnValue = new StringBuilder()
                                            .append(
                                                    uldDiscrepancyVO
                                                            .getUldNumber())
                                            .append("-")
                                            .append(code)
                                            .append("-")
                                            .append(date)
                                            .append("-")
                                            .append(
                                                    discrepancy
                                                            .getReportingStation())
                                            .append("-")
                                            .append(
                                                    uldDiscrepancyVO
                                                            .getReportingStation())
                                            .append("-").append(
                                                    RECORD_ULD_MOVEMENT)
                                            .toString();
                                    // added by a-3045 for bug18685 on 02Nov08
                                    // ends
                                    discrepancy.update(uldDiscrepancyVO);

                                    if(uldDiscrepancyVO.getLocation()!=null && uldDiscrepancyVO.getFacilityType()!=null){
                                    	uld.setFacilityType(uldDiscrepancyVO.getFacilityType());
                                        uld.setLocation(uldDiscrepancyVO.getLocation());
                                    }
									// Added by Preet for bug number 18685 on
									// 15Oct08 ends
									return returnValue;
								}
								// To be reviewed

							} else if ((uldDiscrepancyVO.getReportingStation()
									.equals(discrepancy.getReportingStation()))
                                    && ((!uldDiscrepancyVO.getLocation()
                                            .equalsIgnoreCase(
                                                    discrepancy.getLocation())) || (!uldDiscrepancyVO
                                            .getFacilityType().equals(
                                                    discrepancy
                                                            .getFacilityType())))) {
                                // To be reviewed Here u are not verifying FACILITYTYPE
                                uld = new ULD();
                                try {
                                    uld = ULD.find(uldDiscrepancyVO
                                            .getCompanyCode(), uldDiscrepancyVO
                                            .getUldNumber());
                                } catch (FinderException finderException) {
                                    log
                                            .log(Log.FINE,
                                                    "inside Finder Exception DISCREPANCY_AT_SAME_LOCATION");
                                }
                                // To be reviewed
                                uldDiscrepancyVO.setCloseStatus("Y");
                                new ULDDiscrepancy(uldDiscrepancyVO);
                                if (("M").equals(uldDiscrepancyVO.getDiscrepencyCode()))
                                {
                                    //Modified as part of ICRD-201445
                                    if (uld.getCurrentStation().equals(
                                            uldDiscrepancyVO
                                                    .getReportingStation())
                                            && (uld.getFacilityType()!= null &&
                                            uld.getFacilityType().equals(
                                                    uldDiscrepancyVO
                                                            .getFacilityType()))
                                            && (uld.getLocation() != null &&
                                            uld.getLocation().equals(
                                                    uldDiscrepancyVO
                                                            .getLocation()))) {
                                        // Added by Preet for ULD 310 starts
                                        // Get the Facility Type of ULD s
                                        // current Airport
                                        String fromFacilityType = uld
                                                .getFacilityType();
                                        // Get the Facility Type where
                                        // discrepancy is created
                                        String toFacilityType = uldDiscrepancyVO
                                                .getFacilityType();
                                        log.log(Log.INFO,
                                                "fromFacilityType------->",
                                                fromFacilityType);
                                        log.log(Log.INFO,
                                                "toFacilityType------->",
                                                toFacilityType);
                                        // Added by Preet for ULD 310 ends
                                        if(discrepancy.getLocation()!=null && discrepancy.getFacilityType()!=null){
                                        	uld.setLocation(discrepancy.getLocation());
                                            uld.setFacilityType(discrepancy.getFacilityType());
                                        }
                                        String previousLocation = discrepancy
                                                .getLocation();
                                        ULDIntMvtVO uldIntMvtVO = new ULDIntMvtVO();
                                        ULDIntMvtDetailVO uldIntMvtDetailVO = new ULDIntMvtDetailVO();
                                        Collection<ULDIntMvtDetailVO> uldIntMvtDetailVOs = new ArrayList<ULDIntMvtDetailVO>();
                                        Collection<ULDIntMvtVO> uldIntMvts = new ArrayList<ULDIntMvtVO>();

                                        uldIntMvtVO.setAirport(uldDiscrepancyVO
                                                .getReportingStation());
                                        uldIntMvtVO
                                                .setCompanyCode(uldDiscrepancyVO
                                                        .getCompanyCode());
                                        uldIntMvtVO
                                                .setUldNumber(uldDiscrepancyVO
                                                        .getUldNumber());
                                        uldIntMvtVO
                                                .setLastUpdatedUser(logonAttributes
                                                        .getUserId());

                                        uldIntMvtDetailVO
                                                .setAirport(uldDiscrepancyVO
                                                        .getReportingStation());
                                        uldIntMvtDetailVO
                                                .setCompanyCode(uldDiscrepancyVO
                                                        .getCompanyCode());
                                        uldIntMvtDetailVO
                                                .setFromLocation(discrepancy
                                                        .getLocation());
                                        uldIntMvtDetailVO
                                                .setToLocation(uldDiscrepancyVO
                                                        .getLocation());

                                        uldIntMvtDetailVO
                                                .setMvtType(ULDIntMvtDetailVO.DUMMY_MOVEMENT);
                                        uldIntMvtDetailVO
                                                .setMvtDate(new LocalDate(
                                                        uldDiscrepancyVO
                                                                .getDiscrepencyDate(),
                                                        true));
                                        uldIntMvtDetailVO
                                                .setUldNumber(uldDiscrepancyVO
                                                        .getUldNumber());
                                        // Added by Preet for ULD 310 starts
                                        // If Facility Type is Ware house --then
                                        // ULD need to checked Out and Checked
                                        // In

                                        Collection<ULDCheckinVO> checkInVos = new ArrayList<ULDCheckinVO>();
                                        boolean callWhsFlag = true;

                                        // If ULD is currenly in Warehouse
                                        // --delete the storage details
                                        if (WAREHOUSE.equals(fromFacilityType)) {

                                            StorageUnitFilterVO storageUnitFilterVO = new StorageUnitFilterVO();
                                            storageUnitFilterVO.setCompanyCode(uldDiscrepancyVO.getCompanyCode());
                                            storageUnitFilterVO.setAirportCode(uld.getCurrentStation());
                                            storageUnitFilterVO.setStorageUnitCode(uldDiscrepancyVO.getUldNumber());

                                            WarehouseProxy warehouseProxy = new WarehouseProxy();
                                            try {
                                            Page<StorageUnitVO> storageUnitVOs = warehouseProxy.findStorageUnitDetails(storageUnitFilterVO,1);
                                            log.log(Log.INFO,"storageUnitVOs-------->",storageUnitVOs);
                                            if(storageUnitVOs != null && storageUnitVOs.size() > 0){
                                                warehouseProxy.deleteStorageUnitDetails((Collection<StorageUnitVO>)storageUnitVOs);
                                            }
                                            } catch (ProxyException proxyException) {
                                                callWhsFlag = false;
                                                log.log(Log.INFO,
                                                                "-------proxyException-------",
                                                                proxyException
                                                                                .getErrors());
                                                log.log(Log.INFO,
                                                                "-------proxyException-------",
                                                                proxyException
                                                                                .getMessage());
                                            }
                                        }
                                        if (WAREHOUSE.equals(toFacilityType) && callWhsFlag) {
                                            ULDCheckinVO uLDCheckinVO = new ULDCheckinVO();
                                            uLDCheckinVO
                                                    .setCompanyCode(uldDiscrepancyVO
                                                            .getCompanyCode());
                                            uLDCheckinVO
                                                    .setStorageUnitCode(uldDiscrepancyVO
                                                            .getUldNumber());
                                            uLDCheckinVO
                                                    .setAirportCode(uldDiscrepancyVO
                                                            .getReportingStation());
                                            uLDCheckinVO
                                                    .setWarehouseCode(uldDiscrepancyVO
                                                            .getLocation());
                                            checkInVos.add(uLDCheckinVO);

                                        log.log(Log.INFO,
                                                "checkInVos-------->",
                                                checkInVos);






                                            try {









                                                WarehouseProxy warehouseProxy = new WarehouseProxy();
                                                warehouseProxy
                                                        .saveAndCheckinULD(checkInVos);
                                            } catch (ProxyException proxyException) {
                                                log
                                                        .log(
                                                                Log.INFO,
                                                                "-------proxyException-------",
                                                                proxyException
                                                                                .getErrors());
                                                log
                                                        .log(
                                                                Log.INFO,
                                                                "-------proxyException-------",
                                                                proxyException
                                                                                .getMessage());
                                            }
                                        }
                                        // Added by Preet for ULD 310 ends

                                        uldIntMvtDetailVOs
                                                .add(uldIntMvtDetailVO);
                                        uldIntMvtVO
                                                .setULDIntMvtDetailVOs(uldIntMvtDetailVOs);
                                        uldIntMvts.add(uldIntMvtVO);
                                        saveULDIntMvts(uldIntMvts);
                                        uldDiscrepancyVO.setCloseStatus("Y");
                                        discrepancy.update(uldDiscrepancyVO);

                                        return new StringBuilder().append(uldDiscrepancyVO.getUldNumber()).append("-").append(uldDiscrepancyVO.getLocation()).append("-").append(previousLocation).append("-").append(uldDiscrepancyVO.getReportingStation()).append("-").append(INTERNALLY_MOVED).toString();
                                    } else {
                                    	ErrorVO errorVO = ErrorUtils
                                                .getError(
                                                        DiscrepancyAlreadyCaughtException.ULD_CANNOT_BE_MISSING,
                                                        new Object[] {           //Modified by A-7924 as part of ICRD-288390 bug
                                                        		uldDiscrepancyVO
                                                        			.getUldNumber(),
                                                        		uldDiscrepancyVO
                                                        			.getReportingStation(),
                                                        		uldDiscrepancyVO
                                                        			.getLocation()});
                                        DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
                                        discrepancyAlreadyCaughtException
                                                .addError(errorVO);
                                        throw discrepancyAlreadyCaughtException;
                                        /*
                                         * //To be reviewed : check if this will come.
                                         * log.log(Log.FINE,"inside
                                         * DISCREPANCY_AT_SAME_LOCATION -
                                         * avoiding internal movement"); if
                                         * (uldDiscrepancyVO.getDiscrepencyCode().equals("M")) {
                                         * code = "Missing"; } else { code =
                                         * "Found"; } ErrorVO errorVO =
                                         * ErrorUtils .getError(
                                         * DiscrepancyAlreadyCaughtException.DISCREPANCY_AT_SAME_LOCATION,
                                         * code,uldDiscrepancyVO.getUldNumber(),
                                         * uldDiscrepancyVO.getLocation(),
                                         * uldDiscrepancyVO.getReportingStation());
                                         *
                                         * DiscrepancyAlreadyCaughtException
                                         * discrepancyAlreadyCaughtException =
                                         * new
                                         * DiscrepancyAlreadyCaughtException();
                                         * discrepancyAlreadyCaughtException
                                         * .addError(errorVO); throw
                                         * discrepancyAlreadyCaughtException;
                                         */
                                    }
                                } else {
                                    log
                                            .log(Log.FINE,
                                                    "-------INSIDE INTERNAL MOVEMNT >>FOUND");
                                    if (uld.getCurrentStation().equals(
                                            uldDiscrepancyVO
                                                    .getReportingStation())) {
                                        // Added by Preet for ULD 310 starts
                                        // Get the Facility Type of ULD s
                                        // current Airport
                                        String fromFacilityType = uld
                                                .getFacilityType();
                                        // Get the Facility Type where
                                        // discrepancy is created
                                        String toFacilityType = uldDiscrepancyVO
                                                .getFacilityType();
                                        log.log(Log.INFO,
                                                "fromFacilityType------->",
                                                fromFacilityType);
                                        log.log(Log.INFO,
                                                "toFacilityType------->",
                                                toFacilityType);
                                        // Added by Preet for ULD 310 ends
                                        if(uldDiscrepancyVO.getLocation()!=null && uldDiscrepancyVO.getFacilityType()!=null){
                                        	uld.setLocation(uldDiscrepancyVO.getLocation());
                                            uld.setFacilityType(uldDiscrepancyVO.getFacilityType());
                                        }
                                        String previousLocation = discrepancy
                                                .getLocation();
                                        ULDIntMvtVO uldIntMvtVO = new ULDIntMvtVO();
                                        ULDIntMvtDetailVO uldIntMvtDetailVO = new ULDIntMvtDetailVO();
                                        Collection<ULDIntMvtDetailVO> uldIntMvtDetailVOs = new ArrayList<ULDIntMvtDetailVO>();
                                        Collection<ULDIntMvtVO> uldIntMvts = new ArrayList<ULDIntMvtVO>();

                                        uldIntMvtVO.setAirport(uldDiscrepancyVO
                                                .getReportingStation());
                                        uldIntMvtVO
                                                .setCompanyCode(uldDiscrepancyVO
                                                        .getCompanyCode());
                                        uldIntMvtVO
                                                .setUldNumber(uldDiscrepancyVO
                                                        .getUldNumber());
                                        uldIntMvtVO
                                                .setLastUpdatedUser(logonAttributes
                                                        .getUserId());

                                        uldIntMvtDetailVO
                                                .setAirport(uldDiscrepancyVO
                                                        .getReportingStation());
                                        uldIntMvtDetailVO
                                                .setCompanyCode(uldDiscrepancyVO
                                                        .getCompanyCode());
                                        uldIntMvtDetailVO
                                                .setFromLocation(discrepancy
                                                        .getLocation());
                                        uldIntMvtDetailVO
                                                .setToLocation(uldDiscrepancyVO
                                                        .getLocation());

                                        uldIntMvtDetailVO
                                                .setMvtType(ULDIntMvtDetailVO.DUMMY_MOVEMENT);
                                        uldIntMvtDetailVO
                                                .setMvtDate(new LocalDate(
                                                        uldDiscrepancyVO
                                                                .getDiscrepencyDate(),
                                                        true));

                                        uldIntMvtDetailVO
                                                .setUldNumber(uldDiscrepancyVO
                                                        .getUldNumber());
                                        // Added by Preet for ULD 310 starts
                                        // If Facility Type is Ware house --then
                                        // ULD need to checked Out and Checked
                                        // In


                                        Collection<ULDCheckinVO> checkInVos = new ArrayList<ULDCheckinVO>();
                                        boolean callWhsFlag = true;

                                        // If ULD is currenly in Warehouse
                                        // --delete the storage details
                                        if (WAREHOUSE.equals(fromFacilityType)) {

                                            StorageUnitFilterVO storageUnitFilterVO = new StorageUnitFilterVO();
                                            storageUnitFilterVO.setCompanyCode(uldDiscrepancyVO.getCompanyCode());
                                            storageUnitFilterVO.setAirportCode(uld.getCurrentStation());
                                            storageUnitFilterVO.setStorageUnitCode(uldDiscrepancyVO.getUldNumber());

                                            WarehouseProxy warehouseProxy = new WarehouseProxy();
                                            try {
                                            Page<StorageUnitVO> storageUnitVOs = warehouseProxy.findStorageUnitDetails(storageUnitFilterVO,1);
                                            log.log(Log.INFO,"storageUnitVOs-------->",storageUnitVOs);
                                            if(storageUnitVOs != null && storageUnitVOs.size() > 0){
                                                warehouseProxy.deleteStorageUnitDetails((Collection<StorageUnitVO>)storageUnitVOs);
                                            }
                                            } catch (ProxyException proxyException) {
                                                callWhsFlag = false;
                                                log.log(Log.INFO,
                                                                "-------proxyException-------",
                                                                proxyException
                                                                                .getErrors());
                                                log.log(Log.INFO,
                                                                "-------proxyException-------",
                                                                proxyException
                                                                                .getMessage());
                                            }
                                        }

                                        if (WAREHOUSE.equals(toFacilityType) && callWhsFlag) {

                                            ULDCheckinVO uLDCheckinVO = new ULDCheckinVO();
                                            uLDCheckinVO
                                                    .setCompanyCode(uldDiscrepancyVO
                                                            .getCompanyCode());
                                            uLDCheckinVO
                                                    .setStorageUnitCode(uldDiscrepancyVO
                                                            .getUldNumber());
                                            uLDCheckinVO
                                                    .setAirportCode(uldDiscrepancyVO
                                                            .getReportingStation());
                                            uLDCheckinVO
                                                    .setWarehouseCode(uldDiscrepancyVO
                                                            .getLocation());
                                            checkInVos.add(uLDCheckinVO);




                                            try {








                                                WarehouseProxy warehouseProxy = new WarehouseProxy();
                                                warehouseProxy
                                                        .saveAndCheckinULD(checkInVos);
                                            } catch (ProxyException proxyException) {
                                                log
                                                        .log(
                                                                Log.INFO,
                                                                "-------proxyException-------",
                                                                proxyException
                                                                                .getErrors());
                                                log
                                                        .log(
                                                                Log.INFO,
                                                                "-------proxyException-------",
                                                                proxyException
                                                                                .getMessage());
                                            }
                                        }
                                        // Added by Preet for ULD 310 ends

                                        uldIntMvtDetailVOs
                                                .add(uldIntMvtDetailVO);
                                        uldIntMvtVO
                                                .setULDIntMvtDetailVOs(uldIntMvtDetailVOs);
                                        uldIntMvts.add(uldIntMvtVO);
                                        saveULDIntMvts(uldIntMvts);
                                        uldDiscrepancyVO.setCloseStatus("Y");
                                        discrepancy.update(uldDiscrepancyVO);

                                        return new StringBuilder().append(uldDiscrepancyVO.getUldNumber()).append("-").append(previousLocation).append("-").append(uldDiscrepancyVO.getLocation()).append("-").append(uldDiscrepancyVO.getReportingStation()).append("-").append(INTERNALLY_MOVED).toString();
                                    } else {
                                        /*
                                         * ErrorVO errorVO = ErrorUtils
                                         * .getError(
                                         * DiscrepancyAlreadyCaughtException.ULD_CANNOT_BE_MISSING,
										 * uldDiscrepancyVO.getUldNumber(),
										 * uldDiscrepancyVO
										 * .getReportingStation(),
										 * uldDiscrepancyVO.getLocation());
										 * DiscrepancyAlreadyCaughtException
										 * discrepancyAlreadyCaughtException =
										 * new
										 * DiscrepancyAlreadyCaughtException();
										 * discrepancyAlreadyCaughtException
										 * .addError(errorVO); throw
										 * discrepancyAlreadyCaughtException;
										 *
                                         * //To be reviewed : check if this will come.
                                         * log.log(Log.FINE,"inside
										 * DISCREPANCY_AT_SAME_LOCATION -
										 * avoiding internal movement"); if
                                         * (uldDiscrepancyVO.getDiscrepencyCode().equals("M")) {
                                         * code = "Missing"; } else { code =
                                         * "Found"; } ErrorVO errorVO =
                                         * ErrorUtils .getError(
                                         * DiscrepancyAlreadyCaughtException.DISCREPANCY_AT_SAME_LOCATION,
                                         * code,uldDiscrepancyVO.getUldNumber(),
                                         * uldDiscrepancyVO.getLocation(),
                                         * uldDiscrepancyVO.getReportingStation());
										 *
										 * DiscrepancyAlreadyCaughtException
										 * discrepancyAlreadyCaughtException =
										 * new
										 * DiscrepancyAlreadyCaughtException();
										 * discrepancyAlreadyCaughtException
										 * .addError(errorVO); throw
										 * discrepancyAlreadyCaughtException;
										 */
									}
								}

							} else {
								// To be reviewed check if this come.
                                returnValue = new StringBuilder().append(
                                        uldDiscrepancyVO.getUldNumber())
                                        .append("-").append(
                                                discrepancy
                                                        .getReportingStation())
                                        .toString();

								// Auditing

                                ULDAuditVO uldAuditVO = new ULDAuditVO(
                                        ULDDiscrepancyVO.MODULE,
                                        ULDDiscrepancyVO.SUBMODULE,
                                        ULDDiscrepancyVO.ENTITY);

                                uldAuditVO = (ULDAuditVO) AuditUtils
                                        .populateAuditDetails(uldAuditVO,
                                                discrepancy, false);

								// discrepancy.remove();

                                findULDAuditVOForDiscrepancy(discrepancy,
                                        uldAuditVO, uldDiscrepancyVO);
                                uldAuditVO.setActionCode(DELETE_ULDDISCREPANCY);
                                uldAuditVO.setAuditRemarks(uldDiscrepancyVO
                                        .getRemarks());
                                log
                                        .log(
                                                Log.INFO,
                                                "uldAuditVO for delete discrepancy  3333----->",
                                                uldAuditVO);
								AuditUtils.performAudit(uldAuditVO);
							}
						}
					}
				} else {
					uldDiscrepancyVO.setCloseStatus("N");
					log.log(Log.FINE, "inside insertion into discrepancy");
                    ULDDiscrepancy uldDisc = new ULDDiscrepancy(
                            uldDiscrepancyVO);

                    ULDAuditVO uldAuditVO = new ULDAuditVO(
                            ULDDiscrepancyVO.MODULE,
                            ULDDiscrepancyVO.SUBMODULE, ULDDiscrepancyVO.ENTITY);

                    uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                            uldAuditVO, uldDisc, true);

                    findULDAuditVOForDiscrepancy(uldDisc, uldAuditVO,
                            uldDiscrepancyVO);
					uldAuditVO.setActionCode(CREATE_ULDDISCREPANCY);
					uldAuditVO.setAuditRemarks(uldDiscrepancyVO.getRemarks());
					AuditUtils.performAudit(uldAuditVO);
				}
            } else if (ULDDiscrepancyVO.OPERATION_FLAG_UPDATE
                    .equals(uldDiscrepancyVO.getOperationFlag())) {
				log.log(Log.FINE, "inside update discrepancy details");
                Collection<ULDDiscrepancy> uldDiscrepancys = ULDDiscrepancy
                        .findULDDiscrepanciesObjects(uldDiscrepancyVO
                                .getCompanyCode(), uldDiscrepancyVO
                                .getUldNumber(),null);
                ULD uld = null;
                try {
                    uld = ULD.find(uldDiscrepancyVO.getCompanyCode(),
                            uldDiscrepancyVO.getUldNumber());
                } catch (FinderException e) {
                    // To be reviewed Auto-generated catch block
                    e.getErrorCode();
                }
                if (uldDiscrepancys != null && uldDiscrepancys.size() > 0) {
                    for (ULDDiscrepancy uldDiscrepancy : uldDiscrepancys) {
                        ULDAuditVO uldAuditVO = new ULDAuditVO(
                                ULDDiscrepancyVO.MODULE,
                                ULDDiscrepancyVO.SUBMODULE,
                                ULDDiscrepancyVO.ENTITY);

                        uldAuditVO = (ULDAuditVO) AuditUtils
                                .populateAuditDetails(uldAuditVO,
                                        uldDiscrepancy, false);
                        log.log(Log.FINE,
                                "getDiscrepancyCode from table---->>",
                                uldDiscrepancy.getDiscrepancyCode());
                        log.log(Log.FINE,
                                "getDiscrepencyCode from VO------>>>",
                                uldDiscrepancyVO.getDiscrepencyCode());
                        if (("M").equals(uldDiscrepancyVO.getDiscrepencyCode())) {
                            if (!uld.getCurrentStation().equals(
                                    uldDiscrepancyVO.getReportingStation())
                                    && ((!uld.getFacilityType().equals(
                                            uldDiscrepancyVO.getFacilityType())) || (!uld
                                            .getLocation().equals(
                                                    uldDiscrepancyVO
                                                            .getLocation())))) {
                                code = "Missing";
                                ErrorVO errorVO = ErrorUtils
                                        .getError(
                                                DiscrepancyAlreadyCaughtException.ULD_CANNOT_BE_MISSING,
                                                uldDiscrepancyVO.getUldNumber(),
                                                code, uldDiscrepancyVO
                                                        .getReportingStation());
                                DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
                                discrepancyAlreadyCaughtException
                                        .addError(errorVO);
                                throw discrepancyAlreadyCaughtException;
                            } else {
                                uldDiscrepancyVO.setCloseStatus("N");
                                uldDiscrepancy.update(uldDiscrepancyVO);
                            }
                        } else if (("F").equals(uldDiscrepancyVO.getDiscrepencyCode()))
                        {
                            log
                                    .log(Log.FINE,
                                            "-inside uld is ther is the stock--upadte discrepancy");
                            if (uld.getCurrentStation().equals(
                                    uldDiscrepancyVO.getReportingStation())
                                    && (uld.getFacilityType()
                                            .equals(uldDiscrepancyVO
                                                    .getFacilityType()))
                                    && (uld.getLocation()
                                            .equals(uldDiscrepancyVO
                                                    .getLocation()))) {
								log.log(Log.FINE, "-----------inside---------");
								code = "Found";
                                ErrorVO errorVO = ErrorUtils
                                        .getError(
												DiscrepancyAlreadyCaughtException.ULD_IS_THERE_IN_THE_STOCK,
                                                uldDiscrepancyVO.getUldNumber(),
                                                code, uldDiscrepancyVO
                                                        .getReportingStation());
                                DiscrepancyAlreadyCaughtException discrepancyAlreadyCaughtException = new DiscrepancyAlreadyCaughtException();
                                discrepancyAlreadyCaughtException
                                        .addError(errorVO);
								throw discrepancyAlreadyCaughtException;
							} else {
								uldDiscrepancyVO.setCloseStatus("N");
								uldDiscrepancy.update(uldDiscrepancyVO);
							}
						}
						if (!(uldDiscrepancy.getDiscrepancyCode())
                                .equalsIgnoreCase(uldDiscrepancyVO
                                        .getDiscrepencyCode())) {
                            log
                                    .log(Log.FINE,
                                            "----- INSIDE SAVING NEW DISCREPANCY --------");
                            uldDiscrepancyVO.setCloseStatus("Y");
                            new ULDDiscrepancy(uldDiscrepancyVO);
                            if (("N").equalsIgnoreCase(uldDiscrepancy.getCloseStatus()))
                            {
                                uldDiscrepancyVO.setCloseStatus("Y");
                                uldDiscrepancy.update(uldDiscrepancyVO);
                            }
                        } else {
                            log.log(Log.FINE,
                                    "----- INSIDE ESLE UPDATE --------");
							uldDiscrepancyVO.setCloseStatus("N");
							uldDiscrepancy.update(uldDiscrepancyVO);
						}
						// Added by Sreekumar S as a part of AirNZ CR434 ends

                        uldAuditVO = (ULDAuditVO) AuditUtils
                                .populateAuditDetails(uldAuditVO,
                                        uldDiscrepancy, false);

                        findULDAuditVOForDiscrepancy(uldDiscrepancy,
                                uldAuditVO, uldDiscrepancyVO);
						uldAuditVO.setActionCode(UPDATE_ULDDISCREPANCY);
                        uldAuditVO.setAuditRemarks(uldDiscrepancyVO
                                .getRemarks());
                        log.log(Log.INFO,
                                "uldAuditVO for update discrepancy%%%%%%%%%%%",
                                uldAuditVO);
						AuditUtils.performAudit(uldAuditVO);
					}
				}
			}
		}
		return returnValue;
	}

	/**
	 *
	 * @param discrepancyFilterVO
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDDiscrepancyVO> listUldDiscrepancyDetails(
            ULDDiscrepancyFilterVO discrepancyFilterVO) throws SystemException {
		log.entering("ULDController", "listUldDiscrepancyDetails");
        return ULDDiscrepancy.listULDDiscrepancyDetails(discrepancyFilterVO);
    }


	public Map<String,ULDDiscrepancyVO> findUldDiscrepancyDetails(
			ULDDiscrepancyFilterVO discrepancyFilterVO) throws SystemException {
		log.entering("ULDController", "listUldDiscrepancyDetails");
		return  ULDDiscrepancy
				.findUldDiscrepancyDetails(discrepancyFilterVO);
	}



	/**
	 *
	 * @param reconcileVO
	 * @throws SystemException
	 *             method changed ny nisha for QF CR 1013 USED FOR CREATING AND
	 *             RESOLVING ULD DISCREPENCIES WHILE SCM PROCESSING
	 */
	public void processSCMMessage(ULDSCMReconcileVO reconcileVO)
            throws SystemException, MessageConfigException,
            CurrencyConversionException, DimensionConversionException {
		log.entering("ULDCoontroller", "processSCMMessage");
        log.log(Log.INFO, "%%%%%%%%%%%   ULDSCMReconcileVO  %%%%%%",
                reconcileVO);
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		// ULDDiscrepancy uldDis = null;
		ULD uldmst = null;
		String companyCode = reconcileVO.getCompanyCode();
		String station = reconcileVO.getAirportCode();
		Collection<String> uldnos = null;
		Collection<String> totULDs = new ArrayList<String>();
		Collection<String> scmULDs = new ArrayList<String>();
		Collection<ULDMovementVO> movementVOs = null;
		Collection<ULDListVO> uldList = new ArrayList<ULDListVO>();
        Collection<ULDSCMReconcileDetailsVO> scmULDDetails = reconcileVO
                .getReconcileDetailsVOs();
		ULDListFilterVO uldListFilterVO = new ULDListFilterVO();
		uldListFilterVO.setCompanyCode(companyCode);
		uldListFilterVO.setCurrentStation(station);
        uldListFilterVO.setAirlineidentifier(logonAttributes
                .getOwnAirlineIdentifier());
		uldListFilterVO.setUldRangeFrom(-1);
		uldListFilterVO.setUldRangeTo(-1);
		boolean isMatched = false;
		boolean doesAnyDiscrepancy = false;
		int pageNumber = 1;
		// added by a-3045 for CR QF1022 for Auditing
		Collection<String> auditULDs = new ArrayList<String>();
        log.log(Log.INFO, "%%%%%%%%%%%%%uldListFilterVO%%%%%%%%",
                uldListFilterVO);
		/*
		 * Bug 41910 on 20Mar09 Added as a part of performance issue in SCM
		 * Processing Instead of findULDList() method, a new method
		 * findULDsForSCM() is called
		 */
		// Collection<ULDListVO> uldCol = ULD.findULDList(uldListFilterVO,
		// pageNumber);
		Collection<ULDListVO> uldCol = ULD.findULDsForSCM(uldListFilterVO);
		log.log(Log.INFO, "%%%%%%%%%%%%%uldCol", uldCol);
		// Null Check added by a-3278 for bug 32231 on 02Jan09
		if (uldCol != null) {
			uldList.addAll(uldCol);
		}
		// a-3278 ends
		// pageNumber++;
		/*
		 * if (uldCol.size() == 0) { break; }
		 */

		// }
		// log.log(Log.INFO,"%%%%%%%%%%% uldList" + uldList);
		// log.log(Log.INFO, "%%%%%%%%%%%uldVOs" + scmULDDetails);
		ArrayList<ULDListVO> missingULDs = new ArrayList<ULDListVO>();
		ArrayList<String> newFoundULDs = new ArrayList<String>();
		ArrayList<String> scmReceivedUlds = new ArrayList<String>();
		ArrayList<String> scmPendingUlds = new ArrayList<String>();
		ArrayList<ULDSCMReconcileDetailsVO> foundULDs = new ArrayList<ULDSCMReconcileDetailsVO>();
        log
                .log(Log.INFO, "##############uldList(((%%%%%%%%%%%", uldList.size());
		for (ULDListVO uldListVO : uldList) {
			isMatched = false;
			String uldNumber = uldListVO.getUldNumber();
			for (ULDSCMReconcileDetailsVO uldDetailsVO : scmULDDetails) {
				if (uldDetailsVO.getUldNumber().equals(uldNumber)) {
					isMatched = true;
					scmReceivedUlds.add(uldNumber);
					break;
				}
			}
			if (!isMatched) {
				missingULDs.add(uldListVO);
			}
		}
		// added by a-3045 for bug 35952 on 05Feb09 starts
        ULDDiscrepancy.updateULDDiscrepancy(companyCode, station,
                scmReceivedUlds);
        log.log(Log.INFO, "##############scmULDDetails(((%%%%%%%%%%%",
                scmULDDetails.size());
		for (ULDSCMReconcileDetailsVO uldDetailsVO : scmULDDetails) {
			String uldNumber = uldDetailsVO.getUldNumber();
			scmULDs.add(uldNumber);
			isMatched = false;
			for (ULDListVO uldListVO : uldList) {
				if (uldNumber.equals(uldListVO.getUldNumber())) {
					isMatched = true;
					break;
				}
			}
			if (!isMatched) {
				foundULDs.add(uldDetailsVO);
			}
			// added by a-3045 for CR QF1022 for Auditing
			auditULDs.add(uldDetailsVO.getUldNumber());
			// added by a-3045 for CR QF1022 for Auditing

		}
		log.log(Log.INFO, "found ULDs", foundULDs);
		log.log(Log.INFO, "missing ULDs", missingULDs);
        log.log(Log.INFO, "##############scmReceivedUlds^^^^%%%%%%%%%%%",
                scmReceivedUlds.size());
		if (scmReceivedUlds != null && scmReceivedUlds.size() > 0) {
            Collection<ULD> receivedUlds = ULD.findULDObjects(companyCode,
                    scmReceivedUlds);
            for (ULD uld : receivedUlds) {
                uld.setScmFlag(SCM_RECEIVED);
                if (uld.getScmDate() != null) {
                    log.log(Log.INFO, "SCM already recived from this station");
                } else {
                    uld.setScmDate(reconcileVO.getStockCheckDate());
                }
                /*
                 * Added by a-3278 for CR QF1449 on 02Mar10 A new field
                 * LSTSCMDAT in the ULDMST table is added to keep track of the
                 * last SCM date for a ULD, populated every time an SCM strikes
                 * the system with the ULD
                 */
                uld.setLastSCMDate(reconcileVO.getStockCheckDate());
                // QF1449 ends
                // added by a-3045 for bug 24476 starts
				/*commented for IASCB-79704
				 */
                // added by a-3045 for bug 24476 ends
            }
		}

		// ends

		// added by a-3278 for bug 45850 on 22Apr09-->Performance issue on SCM
		// Processing

        log.log(Log.INFO, "##############missingULDs****%%%%%%%%%%%",
                missingULDs.size());
		log.log(Log.INFO, "##############foundULDs!!!!!%%%%%%%%%%%", foundULDs.size());
		Collection<String> missULDs = new ArrayList<String>();
		Collection<String> fndULDs = new ArrayList<String>();
		Collection<ULDDiscrepancy> discrepencies = null;

		for (ULDListVO missULD : missingULDs) {
			String uldNo = missULD.getUldNumber();
			missULDs.add(uldNo);
		}
		for (ULDSCMReconcileDetailsVO foundULD : foundULDs) {
			String uldNo = foundULD.getUldNumber();
			fndULDs.add(uldNo);
		}
		totULDs.addAll(missULDs);
		totULDs.addAll(fndULDs);
        discrepencies = ULDDiscrepancy.findULDDiscrepancies(companyCode,
                totULDs);

		for (String missedULD : missULDs) {
			doesAnyDiscrepancy = false;
			if (discrepencies != null && discrepencies.size() > 0) {
				for (ULDDiscrepancy discrepancy : discrepencies) {
                    if (missedULD.equals(discrepancy.getUldDiscrepancyPK()
                            .getUldNumber())) {
                        if (ULD_FOUND_DISCREPANCY.equals(discrepancy
                                .getDiscrepancyCode())) {
                            log
                                    .log(Log.INFO,
                                            "############inside  ULD_FOUND_DISCREPANCY%%%%%%%");
                            String destinationStation = discrepancy
                                    .getReportingStation();
							// set CLSSTA as Y and save new counter dis
							discrepancy.setCloseStatus(DIS_CLOSED);
							ULDDiscrepancyVO uldDiscrepancyVO = new ULDDiscrepancyVO();
							uldDiscrepancyVO.setCompanyCode(companyCode);
                            uldDiscrepancyVO.setUldNumber(discrepancy
                                    .getUldDiscrepancyPK().getUldNumber()); // pls
                            // check
                            // localDate
                            uldDiscrepancyVO.setDiscrepencyDate(new LocalDate(
                                    logonAttributes.getAirportCode(),
                                    Location.ARP, false));
                            uldDiscrepancyVO
                                    .setOperationFlag(ULDDiscrepancyVO.OPERATION_FLAG_INSERT);
                            uldDiscrepancyVO.setReportingStation(station);
                            uldDiscrepancyVO
                                    .setDiscrepencyCode(ULD_MISSING_DISCREPANCY);
                            uldDiscrepancyVO.setCloseStatus(DIS_CLOSED);
                            uldDiscrepancyVO.setLastUpdatedTime(new LocalDate(
                                    logonAttributes.getAirportCode(),
                                    Location.ARP, true));
                            uldDiscrepancyVO.setLastUpdatedUser(logonAttributes
                                    .getUserId());
                            ULDAirportLocationVO uldAirportLocationVO = ULD
                                    .findCurrentLocation(companyCode, station,
                                            CONTENT_EMPTY);
                            if (uldAirportLocationVO != null) {
                                uldDiscrepancyVO
                                        .setFacilityType(uldAirportLocationVO
                                                .getFacilityType());
                                uldDiscrepancyVO
                                        .setLocation(uldAirportLocationVO
                                                .getFacilityCode());
                            } else {
                                uldDiscrepancyVO
                                        .setFacilityType(ULDVO.NO_LOCATION);
                                uldDiscrepancyVO.setLocation(ULDVO.NO_LOCATION);
                            }
                            new ULDDiscrepancy(uldDiscrepancyVO);
                            try {
                                uldmst = ULD.find(companyCode, discrepancy
                                        .getUldDiscrepancyPK().getUldNumber());
							} catch (FinderException ex) {

                            	ErrorVO errVO = new ErrorVO("uld.defaults.uld.doesnot.existss",
                    					new Object[] { discrepancy
                                        .getUldDiscrepancyPK().getUldNumber() });
                            	Collection<ErrorVO> errorVOs = new ArrayList<ErrorVO>();
                            	errorVOs.add(errVO);
                                throw new SystemException(errorVOs);  
							}
							// Do Dummy movement
							if (!uldmst.getCurrentStation().equals(destinationStation)) {
							ULDMovementVO movVO = new ULDMovementVO();
							movVO.setCompanyCode(companyCode);
                            movVO.setUldNumber(discrepancy
                                    .getUldDiscrepancyPK().getUldNumber());
							movVO.setPointOfLading(uldmst.getCurrentStation());
							movVO.setPointOfUnLading(destinationStation);
							movVO.setCurrentStation(destinationStation);
							movVO.setDummyMovement(true);
							movVO.setUpdateCurrentStation(true);
                            movVO.setLastUpdatedUser(logonAttributes
                                    .getUserId());
                            if (destinationStation != null
                                    && destinationStation.trim().length() > 0) {
                                movVO
                                        .setLastUpdatedTime(new LocalDate(
                                                destinationStation,
                                                Location.ARP, true));
                            } else {
                                movVO.setLastUpdatedTime(new LocalDate(
                                        logonAttributes.getAirportCode(),
                                        Location.ARP, true));
                            }

                            //Added by A-5265 for ICRD-47486 starts
                            LocalDate remarksDate = new LocalDate(
                                    destinationStation, Location.ARP, true);
                            movVO.setRemark(RECEIVED_SCM_MOVEMENT_REMARKS
                                    + remarksDate.toDisplayFormat());
                            //Added by A-5265 for ICRD-47486 ends

                            movementVOs = new ArrayList<ULDMovementVO>();
                            uldnos = new ArrayList<String>();
                            movementVOs.add(movVO);
                            uldnos.add(discrepancy.getUldDiscrepancyPK()
                                    .getUldNumber());
                            try {
                                saveULDMovement(uldnos, movementVOs);
                            } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                                // ULDdoes not exists
                            }
                            }
                            // added bya-3045 for bug 24476 starts
							/*commented for IASCB-79704
							 * .setOverallStatus(ULDVO.OPERATIONAL_STATUS); }
							 */
                            // added bya-3045 for bug 24476 ends
                        } else {
                            String destinationStation = discrepancy
                                    .getReportingStation();
							// Do Dummymovement ---no need for dummy movement
							// kw????
							discrepancy.setReportingStation(destinationStation);
						}
						doesAnyDiscrepancy = true;
						break;
					}
				}

			}
			if (!doesAnyDiscrepancy) {
				scmPendingUlds.add(missedULD);
			}

		}

		for (String fndULD : fndULDs) {
			doesAnyDiscrepancy = false;

			if (discrepencies != null && discrepencies.size() > 0) {
				for (ULDDiscrepancy discrepancy : discrepencies) {
                    if (fndULD.equals(discrepancy.getUldDiscrepancyPK()
                            .getUldNumber())) {
                        if (discrepancy.getDiscrepancyCode().equals(
                                ULD_MISSING_DISCREPANCY)) {
                            log
                                    .log(Log.INFO,
                                            "############inside  ULD_MISSING_DISCREPANCY%%%%%%%");
							// String destinationStation =
							// uldDis.getReportingStation();
							discrepancy.setCloseStatus(DIS_CLOSED);
							ULDDiscrepancyVO uldDiscrepancyVO = new ULDDiscrepancyVO();
							uldDiscrepancyVO.setCompanyCode(companyCode);
                            uldDiscrepancyVO.setUldNumber(discrepancy
                                    .getUldDiscrepancyPK().getUldNumber()); // pls
                            // check
                            // localDate
                            uldDiscrepancyVO.setDiscrepencyDate(new LocalDate(
                                    logonAttributes.getAirportCode(),
                                    Location.ARP, false));
                            uldDiscrepancyVO
                                    .setOperationFlag(ULDDiscrepancyVO.OPERATION_FLAG_INSERT);
                            uldDiscrepancyVO.setReportingStation(station);
                            uldDiscrepancyVO
                                    .setDiscrepencyCode(ULD_FOUND_DISCREPANCY);
                            uldDiscrepancyVO.setCloseStatus(DIS_CLOSED);
                            uldDiscrepancyVO.setLastUpdatedTime(new LocalDate(
                                    logonAttributes.getAirportCode(),
                                    Location.ARP, true));
                            uldDiscrepancyVO.setLastUpdatedUser(logonAttributes
                                    .getUserId());
                            ULDAirportLocationVO uldAirportLocationVO = ULD
                                    .findCurrentLocation(companyCode, station,
                                            CONTENT_EMPTY);
                            if (uldAirportLocationVO != null) {
                                uldDiscrepancyVO
                                        .setFacilityType(uldAirportLocationVO
                                                .getFacilityType());
                                uldDiscrepancyVO
                                        .setLocation(uldAirportLocationVO
                                                .getFacilityCode());
                            } else {
                                uldDiscrepancyVO
                                        .setFacilityType(ULDVO.NO_LOCATION);
                                uldDiscrepancyVO.setLocation(ULDVO.NO_LOCATION);
                            }
                            new ULDDiscrepancy(uldDiscrepancyVO);
                            try {
                                uldmst = ULD.find(companyCode, discrepancy
                                        .getUldDiscrepancyPK().getUldNumber());
							} catch (FinderException ex) {
                            	ErrorVO errVO = new ErrorVO("uld.defaults.uld.doesnot.exists",
                    					new Object[] { discrepancy
                                        .getUldDiscrepancyPK().getUldNumber() });
                            	Collection<ErrorVO> errorVOs = new ArrayList<ErrorVO>();
                            	errorVOs.add(errVO);
                                throw new SystemException(errorVOs);  
							}
							/*
							 * if-else chk added for bug 51716 by a-3278 on
							 * 23Jun09 if the uld is not occupied then do Dummy
							 * movement else update the SCM Flag and SCM date,no
							 * need to mark movement
							 */
							if ("N".equals(uldmst.getTransitStatus())) {
								// Do Dummy Movement
								/*
                                 * Dummy movement not required when origin and destination
                                 * are same
								 */
								if (!uldmst.getCurrentStation().equals(station)) {
								ULDMovementVO movVO = new ULDMovementVO();
								movVO.setCompanyCode(companyCode);
                                movVO.setUldNumber(discrepancy
                                        .getUldDiscrepancyPK().getUldNumber());
                                movVO.setPointOfLading(uldmst
                                        .getCurrentStation());
                                movVO.setPointOfUnLading(station);
                                movVO.setCurrentStation(station);
                                movVO.setDummyMovement(true);
                                movVO.setUpdateCurrentStation(true);
                                movVO.setLastUpdatedUser(logonAttributes
                                        .getUserId());
                                if (station != null
                                        && station.trim().length() > 0) {
                                    movVO.setLastUpdatedTime(new LocalDate(
                                            station, Location.ARP, true));
                                } else {
                                    movVO.setLastUpdatedTime(new LocalDate(
                                            logonAttributes.getAirportCode(),
                                            Location.ARP, true));
                                }
                                // added by nisha starts
                                movVO.setScmFlag(SCM_RECEIVED);

                                movVO.setScmDate(reconcileVO
                                        .getStockCheckDate());

                                //Added by A-5265 for ICRD-47486 starts
                                LocalDate remarksDate = new LocalDate(
                                        station, Location.ARP, true);
                                movVO.setRemark(RECEIVED_SCM_MOVEMENT_REMARKS
                                        + remarksDate.toDisplayFormat());
                                //Added by A-5265 for ICRD-47486 ends

                                // ends
                                movementVOs = new ArrayList<ULDMovementVO>();
                                uldnos = new ArrayList<String>();
                                movementVOs.add(movVO);
                                uldnos.add(discrepancy.getUldDiscrepancyPK()
                                        .getUldNumber());
								try {
									saveULDMovement(uldnos, movementVOs);
								} catch (ULDDoesNotExistsException uldDoesNotExistsException) {
									// ULDdoes not exists
								}
								}
							} else {
								// update the SCM Flag and SCM Date
								uldmst.setScmFlag(SCM_RECEIVED);
                                uldmst.setScmDate(reconcileVO
                                        .getStockCheckDate());
								/*
								 * Added by a-3278 for CR QF1449 on 02Mar10 A
								 * new field LSTSCMDAT in the ULDMST table is
								 * added to keep track of the last SCM date for
								 * a ULD, populated every time an SCM strikes
								 * the system with the ULD
								 */
                                uldmst.setLastSCMDate(reconcileVO
                                        .getStockCheckDate());
                                // QF1449 ends
                            }
                            // added bya-3045 for bug 24476 starts
							/*commented for IASCB-79704
							 */
                            // added bya-3045 for bug 24476 ends
						} else {
							discrepancy.setReportingStation(station);
						}
						doesAnyDiscrepancy = true;
						break;
					}
				}

			}
			if (!doesAnyDiscrepancy) {
				newFoundULDs.add(fndULD);
			}
		}

        log.log(Log.INFO, "##############scmPendingUlds&&&&%%%%%%%%%%%",
                scmPendingUlds.size());
		// commented for bug 45850 starts
		/*
		 * for(ULDListVO missULD:missingULDs){ log.log(Log.INFO,
         * "##############inside missingULDs****%%%%%%%%%%%" ); Collection<ULDDiscrepancy>
         * discrepencies = null; doesAnyDiscrepancy = false; String uldNo =
         * missULD.getUldNumber(); discrepencies=
		 * ULDDiscrepancy.findULDDiscrepanciesObjects(companyCode,uldNo); if(
		 * discrepencies!=null && discrepencies.size()>0){ log.log(Log.INFO,
         * "##############inside missingULDs*doesAnyDiscrepancy***%%%%%%%%%%%" );
         * uldDis = discrepencies.iterator().next(); doesAnyDiscrepancy = true;
         * }else{ doesAnyDiscrepancy = false; }
		 *
		 *
		 * if(doesAnyDiscrepancy) {
		 *
		 * if(ULD_FOUND_DISCREPANCY.equals(uldDis.getDiscrepancyCode())){
		 * log.log(Log.INFO, "############inside ULD_FOUND_DISCREPANCY%%%%%%%");
		 * String destinationStation = uldDis.getReportingStation(); //set
		 * CLSSTA as Y and save new counter dis
         * uldDis.setCloseStatus(DIS_CLOSED); ULDDiscrepancyVO uldDiscrepancyVO =
         * new ULDDiscrepancyVO(); uldDiscrepancyVO.setCompanyCode(companyCode);
		 * uldDiscrepancyVO.setUldNumber(uldNo); // pls check localDate
		 * uldDiscrepancyVO.setDiscrepencyDate(new
		 * LocalDate(logonAttributes.getAirportCode(), Location.ARP, false));
         * uldDiscrepancyVO.setOperationFlag(ULDDiscrepancyVO.OPERATION_FLAG_INSERT);
		 * uldDiscrepancyVO.setReportingStation(station);
		 * uldDiscrepancyVO.setDiscrepencyCode(ULD_MISSING_DISCREPANCY);
		 * uldDiscrepancyVO.setCloseStatus(DIS_CLOSED);
		 * uldDiscrepancyVO.setLastUpdatedTime(new
		 * LocalDate(logonAttributes.getAirportCode(), Location.ARP, true));
		 * uldDiscrepancyVO.setLastUpdatedUser(logonAttributes.getUserId());
		 * ULDAirportLocationVO uldAirportLocationVO =
		 * ULD.findCurrentLocation(companyCode,station,CONTENT_EMPTY);
		 * if(uldAirportLocationVO != null){
         * uldDiscrepancyVO.setFacilityType(uldAirportLocationVO.getFacilityType());
		 * uldDiscrepancyVO.setLocation(uldAirportLocationVO.getFacilityCode());
		 * }else{ uldDiscrepancyVO.setFacilityType(ULDVO.NO_LOCATION);
		 * uldDiscrepancyVO.setLocation(ULDVO.NO_LOCATION); } new
		 * ULDDiscrepancy(uldDiscrepancyVO); try { uldmst =
		 * ULD.find(companyCode, uldNo); } catch (FinderException fe) { throw
		 * new SystemException(fe.getErrorCode()); } //Do Dummy movement
		 * ULDMovementVO movVO = new ULDMovementVO();
		 * movVO.setCompanyCode(companyCode); movVO.setUldNumber(uldNo);
		 * movVO.setPointOfLading(uldmst.getCurrentStation());
		 * movVO.setPointOfUnLading(destinationStation);
		 * movVO.setCurrentStation(destinationStation);
		 * movVO.setDummyMovement(true); movVO.setUpdateCurrentStation(true);
		 * movVO.setLastUpdatedUser(logonAttributes.getUserId());
		 * if(destinationStation!=null && destinationStation.trim().length()>0){
		 * movVO.setLastUpdatedTime(new LocalDate(destinationStation,
		 * Location.ARP, true)); }else{ movVO.setLastUpdatedTime(new
		 * LocalDate(logonAttributes.getAirportCode(), Location.ARP, true)); }
         * movementVOs = new ArrayList<ULDMovementVO>(); uldnos = new ArrayList<String>();
         * movementVOs.add(movVO); uldnos.add(uldNo); try{
		 * saveULDMovement(uldnos,movementVOs); }catch(ULDDoesNotExistsException
		 * uldDoesNotExistsException){ //ULDdoes not exists }
		 * //uldmst.update(destinationStation); //added bya-3045 for bug 24476
		 * starts if("L".equals(uldmst.getOverallStatus())){
		 * uldmst.setOverallStatus(ULDVO.OPERATIONAL_STATUS); } //added bya-3045
		 * for bug 24476 ends }else{ String destinationStation =
		 * uldDis.getReportingStation(); // Do Dummymovement ---no need for
         * dummy movement kw???? uldDis.setReportingStation(destinationStation); } }
         * else { scmPendingUlds.add(uldNo); } }
		 */
		// commented for bug 45850 ends
		if (scmPendingUlds != null && scmPendingUlds.size() > 0) {
            log.log(Log.INFO, "############## uldListFilterVO%%%%%%",
                    uldListFilterVO);
            if (uldListFilterVO != null) {
                log
                        .log(Log.INFO,
                                "############## befor updateSCMStatusForPendingULDs%%%%%%");
				/*
				 * added by a-3278 for bug 34065 on 20Jan09.. StockCheckDate
				 * from reconcileVO is set as the lastMovementDate in the
				 * uldListFilterVO And this lastMovementDate is set as the
				 * SCMDate for the pendingUlds in ULDMST table
				 */
                uldListFilterVO.setLastMovementDate(reconcileVO
                        .getStockCheckDate());
				// a-3278 ends
				ULD.updateSCMStatusForPendingULDs(uldListFilterVO);
                log
                        .log(Log.INFO,
                                "############## after updateSCMStatusForPendingULDs%%%%%%");
            }
        }


        log.log(Log.INFO, "##############newFoundULDs))))%%%%%%%%%%%",
                newFoundULDs.size());
		ArrayList<String> newULDs = new ArrayList<String>();
		// ArrayList<String> newDisULDs = new ArrayList<String>();
		if (newFoundULDs != null && newFoundULDs.size() > 0) {
            Collection<ULD> ulds = ULD
                    .findULDObjects(companyCode, newFoundULDs);
			if (ulds != null && ulds.size() > 0) {
				log.log(Log.INFO, "ULD objects present");
				for (String newULD : newFoundULDs) {
					boolean isPresent = false;
					for (ULD uld : ulds) {

						if (newULD.equals(uld.getUldPK().getUldNumber())) {
							isPresent = true; 
							if (uld.getLastMovementDate() == null
                                    || uld.getLastMovementDate().before(
                                            reconcileVO.getStockCheckDate()
                                                    .toCalendar())) {
								log.log(Log.INFO, "ULD object present", newULD);
								/*
								 * if-else chk added for bug 51716 by a-3278 on
								 * 23Jun09 if the uld is not occupied then do
								 * Dummy movement else update the SCM Flag and
								 * SCM date,no need to mark movement
								 */
								if ("N".equals(uld.getTransitStatus())) {
									/*
                                     * Dummy movement not required if origin and destination
                                     * are same - ICRD-159635 (Added by A-7131)
									 */
									if (!uld.getCurrentStation().equals(station)) {
									ULDMovementVO movVO = new ULDMovementVO();
									movVO.setCompanyCode(companyCode);
									movVO.setUldNumber(newULD);
                                    movVO.setPointOfLading(uld
                                            .getCurrentStation());
									movVO.setPointOfUnLading(station);
									movVO.setCurrentStation(station);
									movVO.setDummyMovement(true);
									movVO.setUpdateCurrentStation(true);
                                    movVO.setLastUpdatedUser(logonAttributes
                                            .getUserId());
                                    if (station != null
                                            && station.trim().length() > 0) {
                                        movVO.setLastUpdatedTime(new LocalDate(
                                                station, Location.ARP, true));
                                    } else {
                                        movVO.setLastUpdatedTime(new LocalDate(
                                                logonAttributes
                                                        .getAirportCode(),
                                                Location.ARP, true));
                                    }
                                    // added by nisha starts
                                    movVO.setScmFlag(SCM_RECEIVED);
                                    movVO.setScmDate(reconcileVO
                                            .getStockCheckDate());

                                    // ends

                                    //Added by A-5265 for ICRD-47486 starts
                                    LocalDate remarksDate = new LocalDate(
                                            station, Location.ARP, true);
                                    movVO.setRemark(RECEIVED_SCM_MOVEMENT_REMARKS
                                            + remarksDate.toDisplayFormat());
                                    //Added by A-5265 for ICRD-47486 ends
									movementVOs = new ArrayList<ULDMovementVO>();
									uldnos = new ArrayList<String>();
									movementVOs.add(movVO);
									uldnos.add(newULD);
									try {
										saveULDMovement(uldnos, movementVOs);
									} catch (ULDDoesNotExistsException uldDoesNotExistsException) {
										// ULDdoes not exists
										}
									}
								} else {
									uld.setScmFlag(SCM_RECEIVED);
                                    uld.setScmDate(reconcileVO
                                            .getStockCheckDate());
									/*
									 * Added by a-3278 for CR QF1449 on 02Mar10
									 * A new field LSTSCMDAT in the ULDMST table
									 * is added to keep track of the last SCM
									 * date for a ULD, populated every time an
									 * SCM strikes the system with the ULD
									 */
                                    uld.setLastSCMDate(reconcileVO
                                            .getStockCheckDate());
                                    // QF1449 ends
                                }
                            }
                            // added bya-3045 for bug 24476 starts
							/*//COMMENTED for IASCB-79704
							 */
                            // added bya-3045 for bug 24476 ends
                            break;
                        }
					}
					if (!isPresent) {
						log.log(Log.INFO, "ULD object not present", newULD);
						newULDs.add(newULD);
					}
				}
			} else {
				newULDs.addAll(newFoundULDs);
			}
		}
		// added by a-3278 for QF1178 on 23Dec08
		AirlineValidationVO airlineValidationVO = null;
		try {
            airlineValidationVO = new SharedAirlineProxy().findAirline(
                    reconcileVO.getCompanyCode(), reconcileVO
                            .getAirlineIdentifier());
		} catch (ProxyException e) {
			// proxy exception
		}
		String airlineCode = airlineValidationVO.getAlphaCode();
		log.log(Log.INFO, "@@@@airlineCode@@@@@", airlineCode);
		// added by a-3045 for bug 41213 on 22Mar09 starts
		// Constructing a string which consists of all the own airline stock
		// ulds which are not in the system , but mentioned in message.
		Collection<String> systemparameterCodes = new ArrayList<String>();
		systemparameterCodes.add(ULD_STK_UPDATE_FOR_OAL);
		systemparameterCodes.add(ULD_STK_UPDATE_FOR_OWN);
		Map parameterMap = new HashMap();
		try {
            parameterMap = new SharedDefaultsProxy()
                        .findSystemParameterByCodes(systemparameterCodes);
		} catch (ProxyException e) {
			// proxy exception
		}
		StringBuilder uldsDoesNotExistsStrBlder = null;
		String uldsDoesNotExists = null;
		int index = 0;
		for (String uldnum : newULDs) {
			if (uldnum.endsWith(airlineCode) && !FLAG_YES.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OWN))) {
				index++;
				log.log(Log.INFO, "ERROR--------->ULD not in system");
				if (index == 1) {
                    uldsDoesNotExistsStrBlder = new StringBuilder().append(
                            ULDDOESNOTEXISTS_PREFIX).append(uldnum);
                } else {
                    uldsDoesNotExistsStrBlder = uldsDoesNotExistsStrBlder
                            .append(",").append(uldnum);
                }
            }/*else if(!uldnum.endsWith(airlineCode) && !FLAG_YES.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))){
                index++;
                log.log(Log.INFO, "ERROR--------->ULD not in system");
                if (index == 1) {
                    uldsDoesNotExistsStrBlder = new StringBuilder().append(
                            ULDDOESNOTEXISTS_PREFIX).append(uldnum);
                } else {
                    uldsDoesNotExistsStrBlder = uldsDoesNotExistsStrBlder
                            .append(",").append(uldnum);
                }
            }*/
        }
        if (uldsDoesNotExistsStrBlder != null) {
            uldsDoesNotExists = uldsDoesNotExistsStrBlder.append(
                    ULDDOESNOTEXISTS_SUFFIX).toString();
            throw new MessageConfigException(
                    MessageConfigException.ULD_NOT_IN_STOCK,
                    new Object[] { uldsDoesNotExists });
        }
        //Modified by A-3415 for ICRD-114538. We shall create the ULDs based on the system parameter
        HashMap<String, Collection<ULDTransactionDetailsVO>> transactionMap=new HashMap<String, Collection<ULDTransactionDetailsVO>>();
		for (String uldno : newULDs) {
			/*
			 * added by a-3278 for CR QF1178 on 22Dec08 Throws exception if the
			 * own airline stock ULD doesnot exist in the system and the message
			 * will not be processed successfully else borrow
			 */
			if (uldno.endsWith(airlineCode) && FLAG_YES.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OWN))) {
                //throw new MessageConfigException(
				//		MessageConfigException.ULD_NOT_IN_STOCK);
                createULDForSCM(uldno,reconcileVO);
				/*
				 * commented the part of autocreating the ULD by a-3278 as per
				 * the CR QF1178 autocreation of uld should not happen
				 */
				/*
				 * ULDVO uldVO = new ULDVO(); String
				 * uldType=uldno.substring(0,3); ULDTypeVO typeVo =
				 * findULDTypeStructuralDetails(companyCode, uldType);
				 * uldVO.setCompanyCode(companyCode); uldVO.setUldNumber(uldno);
				 * uldVO.setUldType(uldType);
				 * uldVO.setUldGroupCode(typeVo.getUldGroupCode());
				 *
				 * log.log(Log.INFO,"inside create"+uldno);
				 *
                 * uldVO.setOperationalAirlineIdentifier(logonAttributes.getOwnAirlineIdentifier()); //
                 * here curent owner code is used only to get OwnerId at this
                 * point
                 * uldVO.setOwnerAirlineIdentifier(logonAttributes.getOwnAirlineIdentifier());
				 *
				 * uldVO.setLastUpdateTime(new LocalDate(station, Location.ARP,
				 * true));
				 *
				 * uldVO.setBorrowReferenceNumber(0);
				 * uldVO.setLastUpdateUser(logonAttributes.getUserId());
				 * uldVO.setDisplayBaseHeight(typeVo.getBaseDimHeight());
				 * uldVO.setDisplayBaseLength(typeVo.getBaseDimLength());
				 * uldVO.setDisplayBaseWidth(typeVo.getBaseDimWidth());
				 * uldVO.setDisplayDimensionUnit(typeVo.getBaseDimUnit());
                 * uldVO.setDisplayStructuralWeight(typeVo.getStructuralWtLmt());
                 * uldVO.setDisplayStructuralWeightUnit(typeVo.getStructuralWtLmtUnit());
				 * uldVO.setDisplayIataReplacementCost(typeVo.getIATARepCost());
                 * uldVO.setDisplayIataReplacementCostUnit(typeVo.getIATARepCostUnit());
                 * uldVO.setCurrentStation(station);
				 * uldVO.setOwnerStation(station);
				 * uldVO.setDamageStatus(ULDVO.DAMAGED_STATUS);
				 * uldVO.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
				 * uldVO.setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
				 * uldVO.setDisplayTareWeight(typeVo.getTareWt());
				 * uldVO.setDisplayTareWeightUnit(typeVo.getTareWtUnit());
				 * uldVO.setBaseHeight(typeVo.getBaseDimHeight());
				 * uldVO.setBaseLength(typeVo.getBaseDimLength());
				 * uldVO.setBaseWidth(typeVo.getBaseDimWidth());
				 * uldVO.setTransitStatus(NOT_INTRANSIT);
				 * uldVO.setUldNature(ULDNATURE_GEN);
				 * uldVO.setScmFlag(SCM_RECEIVED);
				 * uldVO.setScmDate(reconcileVO.getStockCheckDate());
				 * ULDAirportLocationVO uldAirportLocationVO =
				 * ULD.findCurrentLocation(companyCode,station,CONTENT_EMPTY);
				 *
				 * if (uldAirportLocationVO != null) {
				 * uldVO.setLocation(uldAirportLocationVO.getFacilityCode());
                 * uldVO.setFacilityType(uldAirportLocationVO.getFacilityType());
                 * }else{ uldVO.setLocation(ULDVO.NO_LOCATION);
				 * uldVO.setFacilityType(ULDVO.NO_LOCATION); } new ULD(uldVO);
				 */
            } else if(!uldno.endsWith(airlineCode) && parameterMap.get(ULD_STK_UPDATE_FOR_OAL)!=null
                    && !FLAG_NO.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))) {
                ULD uld = createULDForSCM(uldno,reconcileVO);
                createTransactionsVOForSCM(uld,reconcileVO,transactionMap,true);
				// Borrow of the ULD
				// Commented by a-3045 for bug 45335 on 20Apr09
                //log.log(Log.INFO,
				//		"%%%Non QF ULDs will be ignored in SCM!!!!!!!!!!!!!");
				/*
				 * log.log(Log.INFO, "%%%Borrow of ULD%%%" + uldno);
				 * ULDTransactionDetailsVO transactionDetailsVO = new
				 * ULDTransactionDetailsVO();
				 * transactionDetailsVO.setCompanyCode(logonAttributes
				 * .getCompanyCode());
				 * transactionDetailsVO.setDamageStatus(ULDVO.DAMAGED_STATUS);
				 * int len = uldno.length(); String twoalphacode =
				 * uldno.substring(len - 2); String threealphacode =
				 * uldno.substring(len - 3); String arldtl =
				 * findOwnerCode(logonAttributes.getCompanyCode(), twoalphacode,
				 * threealphacode); String airlineDetailArr[] =
				 * arldtl.split("~"); int ownerAirlineId =
				 * Integer.valueOf(airlineDetailArr[1]); String oprAirlineCode =
				 * null; if (airlineDetailArr[0].equals("2")) {
				 * transactionDetailsVO.setFromPartyCode(twoalphacode);
				 * oprAirlineCode = twoalphacode; } else {
				 * transactionDetailsVO.setFromPartyCode(threealphacode);
				 * oprAirlineCode = threealphacode; }
				 * transactionDetailsVO.setFromPartyIdentifier(ownerAirlineId);
				 * transactionDetailsVO.setLastUpdateUser(logonAttributes
				 * .getUserId()); transactionDetailsVO
				 * .setOperationalAirlineIdentifier(reconcileVO
				 * .getAirlineIdentifier());
				 * transactionDetailsVO.setCurrOwnerCode(ownerAirlineId);
				 * transactionDetailsVO.setPartyType(PARTYTYPE_AIRLINE);
				 * transactionDetailsVO.setUldNature("GEN");
				 * transactionDetailsVO.setUldConditionCode("SER"); String crn =
				 * null; String ctrlRcptNo =
				 * findCRNForULDTransaction(logonAttributes .getCompanyCode(),
				 * oprAirlineCode); crn = new
				 * StringBuilder().append(ctrlRcptNo.substring(0, 4))
				 * .append("0").append(ctrlRcptNo.substring(4, 11)) .toString();
				 * transactionDetailsVO.setControlReceiptNumber(crn); //******
				 * transactionDetailsVO.setToPartyCode(airlineCode);
				 * transactionDetailsVO.setToPartyIdentifier(reconcileVO
				 * .getAirlineIdentifier());
				 * transactionDetailsVO.setUldNumber(uldno);
				 * transactionDetailsVO.setTransactionStationCode(reconcileVO
				 * .getAirportCode());
				 * transactionDetailsVO.setTxStationCode(reconcileVO
				 * .getAirportCode());
				 * transactionDetailsVO.setTransactionType(BORROW_TRANSACTION);
				 * transactionDetailsVO.setTransactionStatus("T");
				 * transactionDetailsVO.setTransactionRemark(reconcileVO
				 * .getRemarks());
				 * transactionDetailsVO.setTransactionNature("T");
				 * transactionDetailsVO.setUldType(uldno.substring(0, 3));
				 * transactionDetailsVO.setTransactionDate(reconcileVO
				 * .getStockCheckDate()); try {
				 * createBorrowTransactions(transactionDetailsVO); } catch
				 * (CurrencyConversionException currencyConversionException) { }
				 * catch (DimensionConversionException
				 * dimensionConversionException) { }
				 */

			}
		}
		// a-3278 ends
        //-- Modified by A-3415 for ICRD-114538 Starts --
		// We shall create/close Transactions from SCM
        if(scmULDs!=null && scmULDs.size()>0){
            Collection<ULD> ulds = ULD
                        .findULDObjects(companyCode, scmULDs);
            if(ulds!=null && ulds.size()>0){
                for(ULD uld : ulds){
                    if(uld.getOperationalAirlineIdentifier()!= reconcileVO
                            .getAirlineIdentifier()){
                        createTransactionsVOForSCM(uld,reconcileVO,transactionMap,false);
                    }
                }
            }
            if(transactionMap!= null ){
                Collection<ULDTransactionDetailsVO> returnTransactionVOs = transactionMap.get(LOAN_RETURN);
                Collection<ULDTransactionDetailsVO> loanTransactionVOs = transactionMap.get(LOANED_TRANSACTION);
                if(loanTransactionVOs!=null && loanTransactionVOs.size()>0){
                    TransactionVO transactionVO = new TransactionVO();
                    transactionVO.setCompanyCode(logonAttributes.getCompanyCode());
                    transactionVO.setOperationalFlag(TransactionVO.OPERATION_FLAG_INSERT);
                    transactionVO.setUldTransactionDetailsVOs(loanTransactionVOs);
                    log.log(Log.INFO,"transaction details for save",transactionVO);
                    try {
                        saveULDTransaction(transactionVO);
                    } catch (ULDDefaultsBusinessException e) {
                        //Transaction save failed
                    }
                }
                if(returnTransactionVOs!=null && returnTransactionVOs.size()>0){
                    for(ULDTransactionDetailsVO transactionDetailsVO : returnTransactionVOs){
                        try {
                            closeIfAnyOpenLoanTxnExists(transactionDetailsVO);
                        } catch (PersistenceException e) {
                            //Do nothing
                        }
                    }
                }
            }
        }
        //-- Modified by A-3415 for ICRD-114538 Ends --
		// added by a-3045 for Auditing starts
		ULDConfigAuditVO uldConfigAuditVO = null;
        log.log(Log.FINE,
                "---------setting ULDConfigsAuditVO VO----auditULDs---",
                auditULDs);
		StringBuffer additionalInfo = null;
		int i = 0;
		StringBuilder uldNumberString = null;
		for (String uldnumb : auditULDs) {
			if (i == 0) {
				uldNumberString = new StringBuilder();
				uldNumberString.append(uldnumb);
			} else {
				uldNumberString.append(",").append(uldnumb);
			}
			if (i == 15) {
                uldConfigAuditVO = new ULDConfigAuditVO(ULDAgreementVO.MODULE,
                        ULDAgreementVO.SUBMODULE, ULDAgreementVO.ENTITY);
                additionalInfo = new StringBuffer();
                uldConfigAuditVO.setCompanyCode(logonAttributes
                        .getCompanyCode());
                String airportCode = logonAttributes.getAirportCode();
                uldConfigAuditVO.setTxnTime(new LocalDate(airportCode,
                        Location.ARP, true).toGMTDate());
                uldConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                        Location.ARP, true));
                uldConfigAuditVO.setUserId(logonAttributes.getUserId());
                uldConfigAuditVO.setAuditRemarks(reconcileVO.getRemarks());
                additionalInfo.append("Airport - ");
                if (reconcileVO.getAirportCode() != null
                        && reconcileVO.getAirportCode().trim().length() > 0) {
                    additionalInfo.append(reconcileVO.getAirportCode());
                } else {
                    additionalInfo.append(airportCode);
                }
                additionalInfo.append("/Date -");
                additionalInfo.append(reconcileVO.getStockCheckDate()
                        .toDisplayFormat());
                additionalInfo.append("/ULDNos. - ");
                additionalInfo.append(uldNumberString.toString());
                uldConfigAuditVO.setAdditionalInformation(additionalInfo
                        .toString());
				uldConfigAuditVO.setActionCode(PROCESS_SCMMESSAGE);
				log.log(Log.FINE, "GOING TO PERFORM AUDIT ", uldNumberString);
				AuditUtils.performAudit(uldConfigAuditVO);
				i = 0;
			} else {
				i++;
			}
		}
		if (i > 0) {
			log.log(Log.INFO, "count of ULDs is less than 15", uldNumberString);
            uldConfigAuditVO = new ULDConfigAuditVO(ULDAgreementVO.MODULE,
                    ULDAgreementVO.SUBMODULE, ULDAgreementVO.ENTITY);
			additionalInfo = new StringBuffer();
			uldConfigAuditVO.setCompanyCode(logonAttributes.getCompanyCode());
			String airportCode = logonAttributes.getAirportCode();
            uldConfigAuditVO.setTxnTime(new LocalDate(airportCode,
                    Location.ARP, true).toGMTDate());
            uldConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                    Location.ARP, true));
            uldConfigAuditVO.setUserId(logonAttributes.getUserId());
            uldConfigAuditVO.setAuditRemarks(reconcileVO.getRemarks());
            additionalInfo.append("Airport - ");
            if (reconcileVO.getAirportCode() != null
                    && reconcileVO.getAirportCode().trim().length() > 0) {
                additionalInfo.append(reconcileVO.getAirportCode());
            } else {
                additionalInfo.append(airportCode);
            }
            additionalInfo.append("/Date -");
            additionalInfo.append(reconcileVO.getStockCheckDate()
                    .toDisplayFormat());
            additionalInfo.append("/ULDNos. - ");
            additionalInfo.append(uldNumberString.toString());
            uldConfigAuditVO
                    .setAdditionalInformation(additionalInfo.toString());
			uldConfigAuditVO.setActionCode(PROCESS_SCMMESSAGE);
			log.log(Log.FINE, "GOING TO PERFORM AUDIT ", uldConfigAuditVO);
			AuditUtils.performAudit(uldConfigAuditVO);

		}
		// added by a-3045 for Auditing ends
        //added by A-5844 for ICRD-139341 starts
		reconcileVO.setMessageSendFlag(ULDSCMReconcileVO.OPERATION_FLAG_INSERT);
		Collection<ULDSCMReconcileDetailsVO> scmULDDets = new ArrayList<ULDSCMReconcileDetailsVO>();
        for(ULDSCMReconcileDetailsVO ULDSCMRecDetVO:scmULDDetails){
            if(scmULDDets.size()==0){
				scmULDDets.add(ULDSCMRecDetVO);
            }else{
                boolean exist=false;
                for(ULDSCMReconcileDetailsVO ULDSCMRecDetVOs:scmULDDets){
                    if(ULDSCMRecDetVOs.getCompanyCode().equals(ULDSCMRecDetVO.getCompanyCode())&&
                            ULDSCMRecDetVOs.getAirportCode().equals(ULDSCMRecDetVO.getAirportCode())&&
                            ULDSCMRecDetVOs.getUldNumber().equals(ULDSCMRecDetVO.getUldNumber())&&
                            ULDSCMRecDetVOs.getOperationFlag().equals(ULDSCMRecDetVO.getOperationFlag())){
                        exist=true;
                        break;
                    }
                }
                if(!exist){
					scmULDDets.add(ULDSCMRecDetVO);
				}
			}
		}
		reconcileVO.setReconcileDetailsVOs(scmULDDets);
		new ULDSCMReconcile(reconcileVO);
        //added by A-5844 for ICRD-139341 ends
	}

	/**
	 *
	 * @param mucMessageVO
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 */
    public void processMUCMessage(MUCMessageVO mucMessageVO)
            throws SystemException, MessageConfigException,
            ULDDefaultsBusinessException, CurrencyConversionException,
            DimensionConversionException {
		log.entering("ULDController", "processMUCMessage");
		// log.log(Log.INFO,"%%%%%%% transactionVOs "+transactionVOs);
		ULD uld = new ULD();
		boolean isFoundA = true;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		String companyCode = logonAttributes.getCompanyCode();
		int airlineIdentifier = logonAttributes.getOwnAirlineIdentifier();

        //Commented as part of ICRD-21184
//		String carrierCode = ULD
//				.findCarrierCode(companyCode, airlineIdentifier);

		Collection<ULDTransactionDetailsVO> transactionDetailsA = new ArrayList<ULDTransactionDetailsVO>();

        //Added as part of ICRD-21184

		String carrierCode = null;
		AirlineValidationVO airlineValidationVO = null;
		try {
			airlineValidationVO  = new SharedAirlineProxy().findAirline(companyCode, airlineIdentifier);
			carrierCode = airlineValidationVO.getAlphaCode();
		} catch (ProxyException proxyException) {
			log.log(Log.INFO, "ProxyException", proxyException.getErrors());
			log.log(Log.INFO, "Cannot find airline", proxyException.getMessage());
		}

		Collection<ULDTransactionDetailsVO> trnDetailsVOsA = new ArrayList<ULDTransactionDetailsVO>();
		Set<String> carrierCodes = new HashSet<String>();
		Set<String> ulds = new HashSet<String>();

		log.log(Log.INFO, "%%%%%%%%%% airlineIdentifier", airlineIdentifier);
        MUCTransferDetailsVO transferDetailsVO = mucMessageVO
                .getTransferDetailsVO();

		if (transferDetailsVO.getUldDetails() != null) {
            for (MUCULDDetailsVO uldDetailsVO : transferDetailsVO
                    .getUldDetails()) {
                if (uldDetailsVO.getReceivingPartyDetailsVO().getCarrierCode()
                        .equals(carrierCode)
                        || uldDetailsVO.getTransferringPartyDetailsVO()
                                .getCarrierCode().equals(carrierCode)) {
                    String uldNumber = new StringBuilder().append(
                            uldDetailsVO.getUldIdentificationVO().getUldType())
                            .append(
                                    uldDetailsVO.getUldIdentificationVO()
                                            .getUldSerialNumber()).append(
                                    uldDetailsVO.getUldIdentificationVO()
                                            .getUldOwnerCode()).toString();
					ulds.add(uldNumber);
				}
                carrierCodes.add(uldDetailsVO.getTransferringPartyDetailsVO()
                        .getCarrierCode());
                carrierCodes.add(uldDetailsVO.getReceivingPartyDetailsVO()
                        .getCarrierCode());
			}

			Collection<ULDTransactionDetailsVO> transactions = ULDTransaction
					.listULDTransactionsForMUCReconciliation(companyCode, ulds);

            //Commented as part of ICRD 21184
            //HashMap<String, Integer> airlineIdentifiers = ULD
			//		.listAirlineIdentifiers(companyCode, carrierCodes);
			// Dealing with only airline

            //Added as part of ICRD 21184 starts
			Map<String, AirlineValidationVO> airlineIdentifiers = null;
			try {
            airlineIdentifiers=new SharedAirlineProxy().validateAlphaCodes(companyCode, carrierCodes);
			} catch (ProxyException e) {
				// proxy exception
			}
            //Added as part of ICRD 21184 ends

            for (MUCULDDetailsVO uldDetailsVO : transferDetailsVO
                    .getUldDetails()) {

				isFoundA = true;

                String airlineCode = uldDetailsVO.getReceivingPartyDetailsVO()
                        .getCarrierCode();
				String currentStation = uldDetailsVO.getDestinationLocation();

                String uldType = uldDetailsVO.getUldIdentificationVO()
                        .getUldType();
                String serNum = uldDetailsVO.getUldIdentificationVO()
                        .getUldSerialNumber();
                String uldOwnerCode = uldDetailsVO.getUldIdentificationVO()
                        .getUldOwnerCode();
                String uldNumber = new StringBuilder().append(uldType).append(
                        serNum).append(uldOwnerCode).toString();
                if ((uldDetailsVO.getReceivingPartyDetailsVO().getCarrierCode())
                        .equals(carrierCode)
                        || (uldDetailsVO.getTransferringPartyDetailsVO()
                                .getCarrierCode()).equals(carrierCode)) {

					for (ULDTransactionDetailsVO trnDetailsVO : transactions) {
						if (uldNumber.equals(trnDetailsVO.getUldNumber())) {
                            LocalDate ld = new LocalDate(logonAttributes
                                    .getAirportCode(), Location.ARP, true);
							String date = uldDetailsVO.getDateOfTransfer();
                            StringBuilder dateAndTime = new StringBuilder()
                                    .append(date);
                            String stringDateAndTime = dateAndTime.append(
                                    uldDetailsVO.getTimeOfTransfer())
                                    .toString();
                            log.log(Log.INFO,
                                    "@@@@@@@@@@@@@  stringDateAndTime",
                                    stringDateAndTime);
							// Since id already contains the time component
							// ld.setDateAndTime(StringDateAndTime,
							// "ddMMMyyhhmm");
							trnDetailsVO.setReturnDate(ld);
							transactionDetailsA.add(trnDetailsVO);
							try {
                                uld = ULD.find(trnDetailsVO.getCompanyCode(),
                                        uldNumber);
							} catch (FinderException ex) {
								isFoundA = false;
							}
							if (isFoundA) {
                                //Commented as part of ICRD 21184
                                //uld.update(currentStation, airlineIdentifiers
								//		.get(airlineCode));

                                //Added as part of ICRD 21184 starts
                                uld.update(currentStation, airlineIdentifiers
                                        .get(airlineCode).getAirlineIdentifier());
                                //Added as part of ICRD 21184 ends
							}
						}
					}
				} else {
					try {
						uld = ULD.find(companyCode, uldNumber);
					} catch (FinderException ex) {
						isFoundA = false;
					}
					if (isFoundA) {
                        //Commented as part of ICRD 21184
                        //uld.update(currentStation, airlineIdentifiers
						//		.get(airlineCode));

                        //Added as part of ICRD 21184 starts
                        uld.update(currentStation, airlineIdentifiers
                                .get(airlineCode).getAirlineIdentifier());
                        //Added as part of ICRD 21184 ends
					}
					// pls deal with Chain.update ULDMST(CURSTN , )
				}
			}
			try {
				trnDetailsVOsA = calculateReturnULDCharges(transactionDetailsA);
			} catch (AgreementDoesNotExistsException ex) {
				throw new ULDDefaultsBusinessException(ex);
			}
			Collection<ULDTransactionDetailsVO> trnDetailsVOsB = new ArrayList<ULDTransactionDetailsVO>();
			for (ULDTransactionDetailsVO trnDetailsVO : trnDetailsVOsA) {
				trnDetailsVO.setOperationalFlag("I");
				trnDetailsVOsB.add(trnDetailsVO);
			}
			TransactionListVO transactionListVO = new TransactionListVO();
			transactionListVO.setUldTransactionsDetails(trnDetailsVOsB);
			saveReturnTransaction(transactionListVO);
		}
	}

	/**
	 * @param companyCode
	 * @param airportCode
	 * @return
	 * @throws SystemException
	 */
    public HashMap<String, Collection<String>> populateLocation(
            String companyCode, String airportCode) throws SystemException {
		log.entering("ULDController", "populateLocation");
		return ULD.populateLocation(companyCode, airportCode);
	}

	/**
	 *
	 * A-1950
	 *
	 * @param uldVOs
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 */
    public void setLocationForULD(Collection<ULDVO> uldVOs)
            throws SystemException {
		log.entering("ULDController", "setLocationForULD");
		Collection<ULDCheckinVO> uLDCheckinVOs = new ArrayList<ULDCheckinVO>();
		Collection<StorageUnitVO> storageUnitVOs = new ArrayList<StorageUnitVO>();
		ULDIntMvtVO uldIntMvtVO = null;
		
		Collection<ULDIntMvtDetailVO> intMvtdetails = null;
		Collection<ULDIntMvtVO> intMvtVOs = new ArrayList<ULDIntMvtVO>();
        //Commented as part of ICRD-194518 by A-7426
        //ULDIntMvtDetailVO intMvtDetailsVO = new ULDIntMvtDetailVO();
		ULDCheckinVO uLDCheckinVO = null;
		StorageUnitVO storageUnitVO = null;
		boolean isWhsDelete = false;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

		if (uldVOs != null && uldVOs.size() > 0) {
			for (ULDVO uldVO : uldVOs) {
				ULD uld = null;
				try {
                    uld = ULD
                            .find(uldVO.getCompanyCode(), uldVO.getUldNumber());
					log.log(Log.FINE, "Inside ULD Find..........");
				} catch (FinderException ex) {
					throw new SystemException(ex.getErrorCode(), ex);
				}

				intMvtdetails = new ArrayList<ULDIntMvtDetailVO>();
                //Added as part of ICRD-194518 by A-7426 starts
				ULDIntMvtDetailVO intMvtDetailsVO = new ULDIntMvtDetailVO();
                //Added as part of ICRD-194518 by A-7426 ends
				intMvtDetailsVO.setFromLocation(uld.getLocation());
				intMvtDetailsVO.setAirport(uld.getCurrentStation());
                intMvtDetailsVO
                        .setCompanyCode(logonAttributes.getCompanyCode());
                intMvtDetailsVO.setMvtDate(new LocalDate(intMvtDetailsVO
                        .getAirport(), Location.ARP, true));
				intMvtDetailsVO.setMvtType(ULDIntMvtVO.DUMMY);
				intMvtDetailsVO.setRemark(uldVO.getRemarks());
				// Added by Preet on 15th Apr for ULD 331-starts
				intMvtDetailsVO.setUldNumber(uldVO.getUldNumber());
				intMvtDetailsVO.setToLocation(uldVO.getLocation());
				// Added by Preet on 15th Apr for ULD 331-ends
				intMvtdetails.add(intMvtDetailsVO);

				uldIntMvtVO = new ULDIntMvtVO();
				uldIntMvtVO.setCompanyCode(logonAttributes.getCompanyCode());
				uldIntMvtVO.setAirport(uld.getCurrentStation());
				uldIntMvtVO.setLastUpdatedUser(logonAttributes.getUserId());
				uldIntMvtVO.setUldNumber(uldVO.getUldNumber());
				uldIntMvtVO.setULDIntMvtDetailVOs(intMvtdetails);

				intMvtVOs.add(uldIntMvtVO);

                if ("WHS".equals(uld.getFacilityType())
                        && !"WHS".equals(uldVO.getFacilityType())) {
                    isWhsDelete = true;
                    log.log(Log.INFO,
                            "\n Previous Location WHS and Current Location ",
                            uldVO.getFacilityType());
					storageUnitVO = new StorageUnitVO();
					storageUnitVO.setAirportCode(uldVO.getCurrentStation());
					storageUnitVO.setCompanyCode(uldVO.getCompanyCode());
					storageUnitVO.setWarehouseCode(uld.getLocation());
					storageUnitVO.setStorageUnitCode(uldVO.getUldNumber());
					storageUnitVOs.add(storageUnitVO);
				}
                if(uldVO.getLocation()!=null){
				uld.setLocation(uldVO.getLocation());
				uld.setFacilityType(uldVO.getFacilityType());
                }else{
                	uld.setLocation(ULDVO.NO_LOCATION);
                    uld.setFacilityType(ULDVO.NO_LOCATION);
                }
                log.log(Log.FINE,
                        "uldVO.getLastUpdateTime().toSqlDate()----->>", uldVO.getLastUpdateTime());
                uld.setLastUpdateTime(new LocalDate(LocalDate.NO_STATION,
                        Location.NONE, uldVO.getLastUpdateTime(), true));
				// uld.setLastUpdateUser(uldVO.getLastUpdateUser());
				if ("WHS".equalsIgnoreCase(uldVO.getFacilityType())) {
					uLDCheckinVO = new ULDCheckinVO();

					uLDCheckinVO.setCompanyCode(uldVO.getCompanyCode());
					uLDCheckinVO.setStorageUnitCode(uldVO.getUldNumber());
					// uLDCheckinVO.setStorageUnitTypeName(uldVO.getLocation());
					uLDCheckinVO.setAirportCode(uldVO.getCurrentStation());
					uLDCheckinVO.setWarehouseCode(uldVO.getLocation());

					uLDCheckinVOs.add(uLDCheckinVO);
				}

			}
		}

		if (uLDCheckinVOs != null && uLDCheckinVOs.size() > 0) {
			WarehouseProxy warehouseProxy = new WarehouseProxy();
            log.log(Log.INFO, "!!!!!!   GOING TO WAREHOUSE---uLDCheckinVOs",
                    uLDCheckinVOs);
			try {
				warehouseProxy.saveAndCheckinULD(uLDCheckinVOs);
			} catch (ProxyException proxyException) {
                log
                        .log(
                                Log.INFO,
                                "--------------proxyException for saveAndCheckinULD-------------",
                                proxyException.getErrors());
                log
                        .log(
                                Log.INFO,
                                "--------------proxyException for saveAndCheckinULD-------------",
								proxyException.getMessage());
				throw new SystemException(proxyException.getMessage());
				// throw new ULDDefaultsBusinessException(proxyException);
			}
		}
		if (isWhsDelete && storageUnitVOs != null && storageUnitVOs.size() > 0) {
			try {
				WarehouseProxy warehouseProxy = new WarehouseProxy();
                log.log(Log.INFO,
                        "!!!!!!   GOING TO WAREHOUSE---storageUnitVOs",
                        storageUnitVOs);
				warehouseProxy.deleteStorageUnitDetails(storageUnitVOs);
			} catch (ProxyException proxyException) {
				log.log(Log.INFO, "\n ExceptionMessage: ", proxyException);
                log
                        .log(
                                Log.INFO,
                                "--------------proxyException for deleteStorageUnitDetails-------------",
                                proxyException.getErrors());
                log
                        .log(
                                Log.INFO,
                                "--------------proxyException for deleteStorageUnitDetails-------------",
                                proxyException.getMessage());
                throw new SystemException(proxyException.getMessage());
            }
        catch(SystemException systemException)
        {
			systemException.getErrors();
		}
		}
		if (intMvtVOs != null && intMvtVOs.size() > 0) {
			saveULDIntMvts(intMvtVOs);
		}
	}

	/**
	 * @author A-1950
	 * @param companyCode
	 * @param uldNumber
	 * @param sequenceNumber
	 * @return
	 * @throws SystemException
	 */
    public ULDDamagePictureVO findULDDamagePicture(String companyCode,
            String uldNumber, long sequenceNumber , int imageSequenceNumber) throws SystemException {
		log.entering("ULDController", "findULDDamagePicture");
		ULDDamagePictureVO damagePictureVO = new ULDDamagePictureVO();
		ULDDamagePicture damagePicture = null;
		boolean isFound = true;
		try {
            damagePicture = ULDDamagePicture.find(companyCode, uldNumber,
                    sequenceNumber ,imageSequenceNumber);
		} catch (FinderException ex) {
			isFound = false;
		}
		if (isFound) {
			try {
				ImageModel image = new ImageModel();
				image.setContentType("image/gif");
				Blob blob = damagePicture.getDamagePicture();
				int sizeOFBlob = (int) blob.length();
				byte[] imageData = new byte[sizeOFBlob];
				long startIndex = 1;
				imageData = blob.getBytes(startIndex, sizeOFBlob);
				image.setSize(sizeOFBlob);
				image.setData(imageData);

				log.log(Log.FINE, "Image data is ", imageData);
				log.log(Log.FINE, "Image length is ", sizeOFBlob);
				damagePictureVO.setImage(image);
			} catch (SQLException ex) {
				throw new SystemException(ex.getMessage());
			}
		}
		return damagePictureVO;
	}

	/**
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 */
    public int findOperationalAirlineForULD(String companyCode, String uldNumber)
            throws SystemException {
		log.entering("ULDController", "findOperationalAirlineForULD");
		ULD uld = null;
		int zero = 0;
		try {
			uld = ULD.find(companyCode, uldNumber);
		} catch (FinderException ex) {
			log.log(Log.FINE, "Finder Exception caught..returning zero");
			return zero;
		}
		return uld.getOperationalAirlineIdentifier();

	}








    /**
     *
     * @param uldFlightMessageVO
     * @throws SystemException
     */
    public void saveULDFlightMessage(ULDFlightMessageVO uldFlightMessageVO)
            throws SystemException {
		log.entering("ULDController", "saveULDFlightMessage");
		// new ULDFlightMessage(uldFlightMessageVO);
		updateFlightMessageForCPM(uldFlightMessageVO);
	}

	/**
	 * added by A-6025 for ICRD-55710 
	 * @param reconcileVO
	 * @return
	 * @throws SystemException
	 */
    public UCMMessageVO generateUCMMessageVOforFWD(ULDFlightMessageReconcileVO reconcileVO) throws SystemException{
		log.entering("ULDController", "generateUCMMessageVOforFWD");
		UCMMessageVO uCMMessageVO = new UCMMessageVO();
        //  String triggeringPoint = ContextUtils.getRequestContext().getParameter(AbstractControl.REQ_TRIGGER_POINT);
		//	if("MSG005".equals(triggeringPoint)){ 
		uCMMessageVO.setTransactionId(MessageConfigConstants.TXN_FORWARD);
		uCMMessageVO.setCompanyCode(reconcileVO.getCompanyCode());
		uCMMessageVO.setMessageStandard("AHM");
		uCMMessageVO.setMessageType("UCM");
		uCMMessageVO.setAirportCode(reconcileVO.getAirportCode());
        uCMMessageVO.setStationCode(reconcileVO.getAirportCode());//Added for ICRD-347385
		UCMFlightIdentificationVO fltVO = new UCMFlightIdentificationVO();
		fltVO.setCarrierCode(reconcileVO.getCompanyCode());
		fltVO.setFirstFlightnumber(reconcileVO.getFlightNumber());
		fltVO.setDateOfMonth(reconcileVO.getFlightDate().get(Calendar.DAY_OF_MONTH));
		fltVO.setFlightDate(reconcileVO.getFlightDate());
		uCMMessageVO.setUcmFlightIdentificationVO(fltVO);
		UCMFlightMovementVO movVO = new UCMFlightMovementVO();
		movVO.setAirportCode(reconcileVO.getAirportCode());
		uCMMessageVO.setUcmFlightMovementVO(movVO);
		UCMMessageIdentifierVO ucmMessageIdentifierVO = new UCMMessageIdentifierVO();
		ucmMessageIdentifierVO.setUcmMessageIdentifier("UCM");
		uCMMessageVO.setUcmMessageIdentifierVO(ucmMessageIdentifierVO);
		UCMIncomingULDHeaderVO incomVO = new UCMIncomingULDHeaderVO();
		incomVO.setUldIdentifier("IN");
		uCMMessageVO.setUcmIncomingULDHeaderVO(incomVO);	
        UCMOutgoingULDHeaderVO headVO= new UCMOutgoingULDHeaderVO();
		headVO.setUldIdentifier("OUT");
		uCMMessageVO.setUcmOutgoingULDHeaderVO(headVO);
		FlightOperationsProxy fltProxy = new FlightOperationsProxy();
		FlightVO flightVO = null;
		try {
            flightVO = fltProxy.findFlightDetails(reconcileVO.getCompanyCode(), reconcileVO.getFlightCarrierIdentifier(),
                    reconcileVO.getFlightNumber(), reconcileVO.getFlightSequenceNumber());
            if(flightVO != null){
			String route = flightVO.getRoute();
			String[] airports =  route.split("-");
			boolean canAddRoute = false;
			StringBuilder ucmRouteBuilder = null;
			String ucmRoute = null;
            if(airports!=null && airports.length > 1){
				
                for(String airport : airports){
                    if(reconcileVO.getAirportCode().equals(airport)){
						canAddRoute = true;
					}
                    if(canAddRoute){
                        if(ucmRouteBuilder == null){
							ucmRouteBuilder = new StringBuilder();
						}
						ucmRouteBuilder.append(airport).append("-");
					}
				}
                if(ucmRouteBuilder != null && ucmRouteBuilder.toString().length() > 0){
					ucmRoute = ucmRouteBuilder.toString();
                    if(ucmRoute.endsWith("-")){
                        ucmRoute = ucmRoute.substring(0, ucmRoute.length()-1);
					}
				}
				
			}

            if(ucmRoute != null && ucmRoute.length() > 0 && ucmRoute.contains("-")){
				uCMMessageVO.setFlightRoute(ucmRoute);
				}
			}
			uCMMessageVO.setRawMessage(reconcileVO.getRawMessage());
		} catch (ProxyException e) {
            throw new SystemException(e.getErrors().iterator().next()
                    .getErrorCode());
        }
        //}
		generateUCMMessage(uCMMessageVO);
		return uCMMessageVO;		
	}


	/**
	 *
	 * @param cpmMessageVO
	 * @throws SystemException
	 */
    public void saveCPMDetails(CPMMessageVO cpmMessageVO)
            throws SystemException {
		log.entering("ULDController", "saveCPMDetails");
		Collection<ULDFlightMessageVO> uldFlightMessageVOs = constructULDFlightMessageVO(cpmMessageVO);
		log.log(Log.INFO, "\nULDFlightMessageVo for CPM", uldFlightMessageVOs);
		for (ULDFlightMessageVO uldFlightMessageVO : uldFlightMessageVOs) {
			saveULDFlightMessage(uldFlightMessageVO);
		}
		log.exiting("ULDController", "saveCPMDetails");
	}

    private Collection<ULDFlightMessageVO> constructULDFlightMessageVO(
            CPMMessageVO cpmMessageVO) throws SystemException {
		log.entering("ULDController", "constructULDFlightMessageVO");
		Collection<ULDFlightMessageVO> uldFlightMessageVOs = new ArrayList<ULDFlightMessageVO>();
        CPMULDFlightDetailsVO cpmULDFltDtlsVO = cpmMessageVO
                .getCpmUldFlightDetailsVOs().iterator().next();
		String[] stations = cpmULDFltDtlsVO.getFlightRoute().split("-");
		if (cpmMessageVO.getCpmUldFlightDetailsVOs() != null) {
            for (CPMULDFlightDetailsVO cpmUldFlightDetailsVO : cpmMessageVO
                    .getCpmUldFlightDetailsVOs()) {
				ULDFlightMessageVO uldFlightMessageVO = new ULDFlightMessageVO();
				uldFlightMessageVOs.add(uldFlightMessageVO);
                uldFlightMessageVO
                        .setCompanyCode(cpmMessageVO.getCompanyCode());
                uldFlightMessageVO.setFlightCarrierId(cpmMessageVO
                        .getFlightCarrierId());
				GMTDate gmtDate = cpmMessageVO.getFlightDate();
				gmtDate.set(Calendar.MILLISECOND, 0);
				gmtDate.set(Calendar.SECOND, 0);
				gmtDate.set(Calendar.MINUTE, 0);
				gmtDate.set(Calendar.HOUR_OF_DAY, 0);
				uldFlightMessageVO.setFlightDate(gmtDate);
                uldFlightMessageVO.setFlightNumber(cpmMessageVO
                        .getFlightNumber());
                uldFlightMessageVO.setAircraftRegistration(cpmMessageVO
                        .getAircraftRegistration());
                uldFlightMessageVO
                        .setLegDestination(stations[stations.length - 1]);
				uldFlightMessageVO.setLegOrigin(stations[0]);
                uldFlightMessageVO
                        .setFlightSequenceNumber((int) cpmUldFlightDetailsVO
                                .getFlightSequenceNumber());
                uldFlightMessageVO.setLegSerialNumber(cpmUldFlightDetailsVO
                        .getLegSerialNumber());
                uldFlightMessageVO
                        .setStationCode(cpmMessageVO.getStationCode());
                uldFlightMessageVO
                        .setUldFlightMessageDetailsVOs(new ArrayList<ULDFlightMessageDetailsVO>());
                if (cpmMessageVO.getCpmUldFlightDetailsVOs() != null) {
                    for (CPMULDFlightDetailsVO cpmUldChildDetailsVO : cpmMessageVO
                            .getCpmUldFlightDetailsVOs()) {
						if (cpmUldChildDetailsVO.getUldNumber() != null
                                && cpmUldChildDetailsVO.getUldNumber().trim()
                                        .length() > 0) {
                            ULDFlightMessageDetailsVO flightMessageDetailsVO = new ULDFlightMessageDetailsVO();
                            flightMessageDetailsVO
                                    .setUldNumber(cpmUldChildDetailsVO
                                            .getUldNumber());
							flightMessageDetailsVO.setUldWeight(new Measure(UnitConstants.WEIGHT,cpmUldChildDetailsVO.getUldWeight()));
                            flightMessageDetailsVO
                                    .setContent(cpmUldChildDetailsVO
                                            .getUldContent());
                            flightMessageDetailsVO
                                    .setPointOfUnloading(cpmUldChildDetailsVO
                                            .getPointOfUnloading());
                            uldFlightMessageVO.getUldFlightMessageDetailsVOs()
                                    .add(flightMessageDetailsVO);
						}
					}
				}
				break;
			}
		}
		log.exiting("ULDController", "constructULDFlightMessageVO");
		return uldFlightMessageVOs;
	}















	/**
	 * @author A-2667 This method was added as a part of ANA CR 1409
	 * @param flightDetailsVO
	 * @throws SystemException
	 * @throws ULDDoesNotExistsException
	 */
	public void validateULDsForOperation(FlightDetailsVO flightDetailsVO)
			throws SystemException, ULDDoesNotExistsException {
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		log.entering("ULDController", "validateULDsForOperation");
		Map parameterMap = null;
		Collection<String> uldnos = new ArrayList<String>();
		Collection<String> existingULDNos = new ArrayList<String>();
        //Added by A-3415 for ICRD-141337
		Collection<String> invalidULDnos = new ArrayList<String>();
		Collection<ULD> uldObjects = new ArrayList<ULD>();
		Collection<String> systemparameterCodes = new ArrayList<String>();
		Collection<ErrorVO> errorCollection = new ArrayList<ErrorVO>();
		Collection<ErrorVO> warningCollection = new ArrayList<ErrorVO>();
		StringBuilder uldsNotInArp = new StringBuilder();
		StringBuilder uldsNotInArlStck = new StringBuilder();
		StringBuilder uldsLost = new StringBuilder();
		StringBuilder uldsNonOpr = new StringBuilder();
		StringBuilder uldsNotInStck = new StringBuilder();
		systemparameterCodes.add(ULD_NOT_IN_STOCK);
		systemparameterCodes.add(ULD_NOT_IN_AIRPORT);
		systemparameterCodes.add(ULD_NOT_IN_AIRLINESTOCK);
		systemparameterCodes.add(ULD_NONOPERATIONAL);
		systemparameterCodes.add(ULD_LOST);
		// Added for CR QF1382 on 28Oct09
		StringBuilder otheruldsNotInArp = new StringBuilder();
		StringBuilder otheruldsNotInArlStck = new StringBuilder();
		StringBuilder otheruldsLost = new StringBuilder();
		StringBuilder otheruldsNonOpr = new StringBuilder();
		StringBuilder otheruldsNotInStck = new StringBuilder();
		systemparameterCodes.add(ULD_NOT_IN_STOCK_FOR_OAL);
		systemparameterCodes.add(ULD_NOT_IN_AIRPORT_FOR_OAL);
		systemparameterCodes.add(ULD_NOT_IN_AIRLINESTOCK_FOR_OAL);
		systemparameterCodes.add(ULD_NONOPERATIONAL_FOR_OAL);
		systemparameterCodes.add(ULD_LOST_FOR_OAL);

		StringBuilder otheruldsNotInArpForQFFlt = new StringBuilder();
		StringBuilder otheruldsNotInArlStckForQFFlt = new StringBuilder();
		StringBuilder otheruldsLostForQFFlt = new StringBuilder();
		StringBuilder otheruldsNonOprForQFFlt = new StringBuilder();
		StringBuilder otheruldsNotInStckForQFFlt = new StringBuilder();
		systemparameterCodes.add(OAL_ULD_NOT_IN_STOCK_FOR_QFFLIGHT);
		systemparameterCodes.add(OAL_ULD_NOT_IN_AIRPORT_FOR_QFFLIGHT);
		systemparameterCodes.add(OAL_ULD_NOT_IN_AIRLINESTOCK_FOR_QFFLIGHT);
		systemparameterCodes.add(OAL_ULD_NONOPERATIONAL_FOR_QFFLIGHT);
		systemparameterCodes.add(OAL_ULD_LOST_FOR_QFFLIGHT);
        //Added by A-3415 for ICRD-114051
		systemparameterCodes.add(ULD_STK_UPDATE_FOR_OAL);
		systemparameterCodes.add(ULD_STK_UPDATE_FOR_OWN);
		// CR QF1382 ends		
        //Added as part of bug ICRD-222399
        boolean isWetLeased = false;
        if(flightDetailsVO.getFlightNumber() != null
                && flightDetailsVO.getFlightNumber().trim().length()>0){
        isWetLeased = isWetLeasedFlt(flightDetailsVO);
        }
        //Added as part of bug ICRD-222399 ends

        parameterMap = new HashMap();
        try {
            parameterMap = new SharedDefaultsProxy()
                    .findSystemParameterByCodes(systemparameterCodes);

            if (flightDetailsVO.getUldInFlightVOs() != null
                    && flightDetailsVO.getUldInFlightVOs().size() > 0) {
                for (ULDInFlightVO uldInFlightVO : flightDetailsVO
                        .getUldInFlightVOs()) {
                    if (uldInFlightVO.getUldNumber() != null
                            && uldInFlightVO.getUldNumber().trim().length() > 0) {
						uldnos.add(uldInFlightVO.getUldNumber());
					}
				}
			}
            if (flightDetailsVO.getCompanyCode() != null
                    && flightDetailsVO.getCompanyCode().trim().length() > 0
                    && uldnos!=null && uldnos.size()>0) {
                uldObjects = ULD.findULDObjects(flightDetailsVO
                        .getCompanyCode(), uldnos);
            }
            //Added by A-3415 for ICRD-141337 --Starts
			if (uldObjects == null || uldObjects.size() != uldnos.size()) {
                if(uldObjects!=null && uldObjects.size()>0){
                    for(ULD uld : uldObjects){
						existingULDNos.add(uld.getUldPK().getUldNumber());
					}
				}				
				// uld not in stock					
				for (String uldNumber : uldnos) {						
                    if (existingULDNos==null || !existingULDNos.contains(uldNumber)) {
						invalidULDnos.add(uldNumber);
					}
				}
			}
            //Added by A-3415 for ICRD-141337 --Ends
			log.log(Log.FINE, "uldObjects-------->>", uldObjects);
			if (uldObjects != null && uldObjects.size() > 0) {
				// for(ULDInFlightVO uldInFlightVO :
				// flightDetailsVO.getUldInFlightVOs()){
				for (ULD uld : uldObjects) {
					log.log(Log.FINE, "ulds from ULDObjects-------->>", uld);
					// To get the ownerCode of the ULD
					String uldNumber = uld.getUldPK().getUldNumber();
					int length = uldNumber.length();
					String twoalphacode = uldNumber.substring(length - 2);
					String threealphacode = uldNumber.substring(length - 3);

					String ownerCode = null;
                    String arldtl = findOwnerCode(flightDetailsVO
                            .getCompanyCode(), twoalphacode, threealphacode);
                    //Null Check added as part of ICRD-21184
                    if(arldtl != null) {
					String arldtlArray[] = arldtl.split("~");
					if ("2".equals(arldtlArray[0])) {
						ownerCode = twoalphacode;
					} else {
						ownerCode = threealphacode;
						}
					}
					if (flightDetailsVO.getCurrentAirport() != null
                            && flightDetailsVO.getCurrentAirport().trim()
                                    .length() > 0) {
						//Added by A-6991 for ICRD-243040
                    	//Modified by A-7794 as part of ICRD-297323
						if(MRA.equals(flightDetailsVO.getSubSystem())){
						 if (flightDetailsVO.getFlightRoute() != null
		                            && flightDetailsVO.getFlightRoute().trim()
		                                    .length() > 0) {
						 String route = flightDetailsVO.getFlightRoute();
						 String[] routeArr = route.split("-");
						 String pol = "";
						 for(int i=routeArr.length-1;i>=0;i--){
							 if(routeArr[i].equals(logonAttributes.getAirportCode())){
								 pol = routeArr[i-1];
								 break;
							 }
							 }
						if (!uld.getCurrentStation().equalsIgnoreCase(
								flightDetailsVO.getCurrentAirport())
							&& 	!uld.getCurrentStation().equalsIgnoreCase(pol)) 
								{
							//modified by A-6991 for ICRD-243040
							// uld not in airport
                            if (ownerCode.equals(logonAttributes
                                    .getOwnAirlineCode())) {
                                log.log(Log.INFO, "uld not in airport",
                                        uldsNotInArp);
                                uldsNotInArp.append(
                                        uld.getUldPK().getUldNumber()).append(
                                        ",");
                            } else {
                                log.log(Log.INFO,
                                        "uld not in airport--For OAL",
                                        uldsNotInArp);
                                otheruldsNotInArp.append(
                                        uld.getUldPK().getUldNumber()).append(
                                        ",");
                            }
                        }
					}
						}else{
							if (!uld.getCurrentStation().equalsIgnoreCase(
									flightDetailsVO.getCurrentAirport())) 
									{
	                            if (ownerCode.equals(logonAttributes
	                                    .getOwnAirlineCode())) {
	                                log.log(Log.INFO, "uld not in airport",
	                                        uldsNotInArp);
	                                uldsNotInArp.append(
	                                        uld.getUldPK().getUldNumber()).append(
	                                        ",");
                            } /*
                            Commented by A-3415 for ICRD-159937.
                            This parameter is used as part of QF code. This is not required in Base.

                            else if (flightDetailsVO
                                    .getFlightCarrierIdentifier() == logonAttributes
                                    .getOwnAirlineIdentifier()
                                    && !(ownerCode.equals(logonAttributes
                                            .getOwnAirlineCode()))) {
                                log.log(Log.INFO, "uld not in airport-@@--",
                                        otheruldsNotInArpForQFFlt);
                                otheruldsNotInArpForQFFlt.append(
                                        uld.getUldPK().getUldNumber()).append(
                                        ",");
                            }*/ else {
                                log.log(Log.INFO,
                                        "uld not in airport--For OAL",
                                        uldsNotInArp);
                                otheruldsNotInArp.append(
                                        uld.getUldPK().getUldNumber()).append(
                                        ",");
                            }
                        }
						}
                    }
                    //Added as part of bug ICRD-222399
                    if(isWetLeased){
                        flightDetailsVO.setCarrierCode(logonAttributes.getCompanyCode()) ;
                        flightDetailsVO.setFlightCarrierIdentifier(logonAttributes.getOwnAirlineIdentifier());
                    }
                    //Added as part of bug ICRD-222399 ends
                    if (flightDetailsVO.getFlightCarrierIdentifier() != 0) {
                        if (uld.getOperationalAirlineIdentifier() != flightDetailsVO
                                .getFlightCarrierIdentifier()) {
							// uld not in airline stock
                            if (ownerCode.equals(logonAttributes
                                    .getOwnAirlineCode())) {
                                log.log(Log.INFO, "uld not in airline stock",
                                        uldsNotInArlStck);
                                uldsNotInArlStck.append(
                                        uld.getUldPK().getUldNumber()).append(
                                        ",");
                            }/*
                            Commented by A-3415 for ICRD-159937.
                            This parameter is used as part of QF code. This is not required in Base.

                             else if (flightDetailsVO
                                    .getFlightCarrierIdentifier() == logonAttributes
                                    .getOwnAirlineIdentifier()
                                    && !(ownerCode.equals(logonAttributes
                                            .getOwnAirlineCode()))) {
                                log.log(Log.INFO,
                                        "uld not in airline stock--@@--",
                                        otheruldsNotInArlStckForQFFlt);
                                otheruldsNotInArlStckForQFFlt.append(
                                        uld.getUldPK().getUldNumber()).append(
                                        ",");
                            }*/ else {
                                log.log(Log.INFO,
                                        "uld not in airline stock--For OAL",
                                        uldsNotInArlStck);
                                otheruldsNotInArlStck.append(
                                        uld.getUldPK().getUldNumber()).append(
                                        ",");
							}
						}
					}

					if (("L").equalsIgnoreCase(uld.getOverallStatus())) {
						// uld lost
                        if (ownerCode.equals(logonAttributes
                                .getOwnAirlineCode())) {
							log.log(Log.INFO, "uld lost", uldsLost);
                            uldsLost.append(uld.getUldPK().getUldNumber())
                                    .append(",");
                        } /*
                            Commented by A-3415 for ICRD-159937.
                            This parameter is used as part of QF code. This is not required in Base.

                        else if (flightDetailsVO.getFlightCarrierIdentifier() == logonAttributes
                                .getOwnAirlineIdentifier()
                                && !(ownerCode.equals(logonAttributes
                                        .getOwnAirlineCode()))) {
                            log.log(Log.INFO, " uld lost--@@--",
                                    otheruldsLostForQFFlt);
                            otheruldsLostForQFFlt.append(
                                    uld.getUldPK().getUldNumber()).append(",");
                        }*/ else {
							log.log(Log.INFO, "uld lost--For OAL", uldsLost);
                            otheruldsLost.append(uld.getUldPK().getUldNumber())
                                    .append(",");
						}
					}
					if (("N").equalsIgnoreCase(uld.getOverallStatus())) {
						// uld nonoperational
                        if (ownerCode.equals(logonAttributes
                                .getOwnAirlineCode())) {
							log.log(Log.INFO, "uld nonoperational", uldsNonOpr);
                            uldsNonOpr.append(uld.getUldPK().getUldNumber())
                                    .append(",");
                        } /*
                        Commented by A-3415 for ICRD-159937.
                            This parameter is used as part of QF code. This is not required in Base.

                        else if (flightDetailsVO.getFlightCarrierIdentifier() == logonAttributes
                                .getOwnAirlineIdentifier()
                                && !(ownerCode.equals(logonAttributes
                                        .getOwnAirlineCode()))) {
                            log.log(Log.INFO, " uld nonoperational--@@--",
                                    otheruldsNonOprForQFFlt);
                            otheruldsNonOprForQFFlt.append(
                                    uld.getUldPK().getUldNumber()).append(",");
                        }*/ else {
                            log.log(Log.INFO, "uld nonoperational--For OAL",
                                    uldsNonOpr);
                            otheruldsNonOpr.append(
                                    uld.getUldPK().getUldNumber()).append(",");
                        }
                    }
                }
                // }
            }
            //Commented by A-3415 for ICRD-141337 else {
                // uld not in stock
            //Modified by A-3415 for ICRD-141337 Starts
            if (invalidULDnos != null
                    && invalidULDnos.size() > 0) {
				for (String invalidULD : invalidULDnos) {
                    if (invalidULD != null
                            && invalidULD.trim().length() > 0) {
						int length = invalidULD.length();
						String twoalphacode = invalidULD.substring(length - 2);
						String threealphacode = invalidULD.substring(length - 3);
							String ownerCode = null;
                            String arldtl = findOwnerCode(flightDetailsVO
                                    .getCompanyCode(), twoalphacode,
                                    threealphacode);
                            //Null Check added as part of ICRD-21184
                            if(arldtl != null) {
							String arldtlArray[] = arldtl.split("~");
							if ("2".equals(arldtlArray[0])) {
								ownerCode = twoalphacode;
							} else {
								ownerCode = threealphacode;
							}
                            
                            if (ownerCode.equals(logonAttributes
                                    .getOwnAirlineCode())) {
                                log.log(Log.INFO, "uld not in stock",
                                        uldsNotInStck);
                                uldsNotInStck.append(
                                    invalidULD).append(
                                        ",");
                            }/*
                            Commented by A-3415 for ICRD-159937.
                            This parameter is used as part of QF code. This is not required in Base.

                            else if (flightDetailsVO
                                    .getFlightCarrierIdentifier() == logonAttributes
                                    .getOwnAirlineIdentifier()
                                    && !(ownerCode.equals(logonAttributes
                                            .getOwnAirlineCode()))) {
                                log.log(Log.INFO, " uld not in stock--@@--",
                                        otheruldsNotInStckForQFFlt);
                                otheruldsNotInStckForQFFlt.append(
                                    invalidULD).append(
                                        ",");
                            } */else {
                                log.log(Log.INFO, "uld not in stock--For OAL",
                                        uldsNotInStck);
                                otheruldsNotInStck.append(
                                    invalidULD).append(
                                        ",");
							}
						}
					}
				}
                }
			// }
			//	Added by A-3415 for ICRD-141337 Ends
			// Change Added by Sreekumar S - ANACR-1438 -starts
			/*
			 * if(uldObjects != null && uldObjects.size() > 0){ for(ULD uld :
			 * uldObjects){ if(logonAttributes.getAirlineIdentifier() !=
			 * flightDetailsVO.getFlightCarrierIdentifier() && ){
			 * uld.getOwnerAirlineIdentifier() } } }
			 */
			// Change Added by Sreekumar S - ANACR-1438 -ends
			// Adding to ErrorVO - uld not in airport
			// Case:- for QF owned ULDs or QF Flights
			if (uldsNotInArp.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_IN_AIRPORT_ERROR,
                        new String[] { (uldsNotInArp.substring(0, uldsNotInArp
                                .length() - 1)).toString() });
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(ULD_NOT_IN_AIRPORT))) {
					log.log(log.FINE, "Adding to Error - uld not in airport");
					errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
					errorCollection.add(errorVO);
				} else {
                    log
                            .log(log.FINE,
                                    "Adding to Warning  - uld not in airport");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_IN_AIRPORT_WARNING,
                            new String[] { (uldsNotInArp.substring(0,
                                    uldsNotInArp.length() - 1)).toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}

			}
			// Added as a part of QF1382
			// Case:- For other airline ulds and QF Flight
			if (otheruldsNotInArpForQFFlt.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_IN_AIRPORT_ERROR,
                        new String[] { (otheruldsNotInArpForQFFlt.substring(0,
                                otheruldsNotInArpForQFFlt.length() - 1))
                                .toString() });
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(OAL_ULD_NOT_IN_AIRPORT_FOR_QFFLIGHT))) {
                    log.log(log.FINE,
                            "Adding to Error -For OAL- uld not in airport");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(OAL_ULD_NOT_IN_AIRPORT_FOR_QFFLIGHT))) {
                    log.log(log.FINE,
                            "Adding to Warning -For OAL- uld not in airport");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_IN_AIRPORT_WARNING,
                            new String[] { (otheruldsNotInArpForQFFlt
                                    .substring(0, otheruldsNotInArpForQFFlt
                                            .length() - 1)).toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}

			}
			// Added as a part of QF1382
			// Case:- For other airline ulds/flights
			if (otheruldsNotInArp.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_IN_AIRPORT_ERROR,
                        new String[] { (otheruldsNotInArp.substring(0,
                                otheruldsNotInArp.length() - 1)).toString() });
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(ULD_NOT_IN_AIRPORT_FOR_OAL))) {
                    log.log(log.FINE,
                            "Adding to Error -For OAL- uld not in airport");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(ULD_NOT_IN_AIRPORT_FOR_OAL))) {
                    log.log(log.FINE,
                            "Adding to Warning -For OAL- uld not in airport");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_IN_AIRPORT_WARNING,
                            new String[] { (otheruldsNotInArp.substring(0,
                                    otheruldsNotInArp.length() - 1)).toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}

			}

			// Adding to ErrorVO - uld not in airline stock
			// Case:- for QF owned ULDs or QF Flights
			if (uldsNotInArlStck.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_NOT_IN_AIRLINE_STOCK_ERROR,
                        new String[] { (uldsNotInArlStck.substring(0,
                                uldsNotInArlStck.length() - 1)).toString() });
                /*
                 * Modified by A-3415 for ICRD-114051 so that in case parent parameter
                 * "cancreateULD" is not Y then need to consider this as error case only
                 */
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(ULD_NOT_IN_AIRLINESTOCK))) {
                    log.log(log.FINE,
                            "Adding to Error  - uld not in airline stock");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else {
                    log.log(log.FINE,
                            "Adding to Warning  - uld not in airline stock");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_NOT_IN_AIRLINE_STOCK_WARNING,
                            new String[] { (uldsNotInArlStck.substring(0,
                                    uldsNotInArlStck.length() - 1)).toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}
			}
			// Added as a part of QF1382
			// Case:- For other airline ulds and QF Flight
			if (otheruldsNotInArlStckForQFFlt.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_NOT_IN_AIRLINE_STOCK_ERROR,
                        new String[] { (otheruldsNotInArlStckForQFFlt
                                .substring(0, otheruldsNotInArlStckForQFFlt
                                        .length() - 1)).toString() });
                /*
                 * Modified by A-3415 for ICRD-114051 so that in case parent parameter
                 * "autouldstockupdateforOAL" is not Y then need to consider this as error case only
                 */
                //Added by A-4072
                /*
                 * System parameter uld.defaults.cancreateuld values has been changed as part of CR
                 */

                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(OAL_ULD_NOT_IN_AIRLINESTOCK_FOR_QFFLIGHT))|| parameterMap.get(ULD_STK_UPDATE_FOR_OAL)==null ||
                                FLAG_NO.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))) {
                    log
                            .log(log.FINE,
                                    "Adding to Error  - uld not in airline stock--For OAL");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(OAL_ULD_NOT_IN_AIRLINESTOCK_FOR_QFFLIGHT))) {
                    log
                            .log(log.FINE,
                                    "Adding to Warning  - uld not in airline stock--For OAL");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_NOT_IN_AIRLINE_STOCK_WARNING,
                            new String[] { (otheruldsNotInArlStckForQFFlt
                                    .substring(0, otheruldsNotInArlStckForQFFlt
                                            .length() - 1)).toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}
			}
			// Added as a part of QF1382
			// Case:- For other airline ulds/flights
			if (otheruldsNotInArlStck.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_NOT_IN_AIRLINE_STOCK_ERROR,
                        new String[] { (otheruldsNotInArlStck.substring(0,
                                otheruldsNotInArlStck.length() - 1)).toString() });
                /*
                 * Modified by A-3415 for ICRD-114051 so that in case parent parameter
                 * "autouldstockupdateforOAL" is not Y then need to consider this as error case only
                 */
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(ULD_NOT_IN_AIRLINESTOCK_FOR_OAL))) {
                    log
                            .log(log.FINE,
                                    "Adding to Error  - uld not in airline stock--For OAL");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(ULD_NOT_IN_AIRLINESTOCK_FOR_OAL))) {
                    log
                            .log(log.FINE,
                                    "Adding to Warning  - uld not in airline stock--For OAL");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_NOT_IN_AIRLINE_STOCK_WARNING,
                            new String[] { (otheruldsNotInArlStck.substring(0,
                                    otheruldsNotInArlStck.length() - 1))
                                    .toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}
			}

			// Adding to ErrorVO - uld lost
			// Case:- for QF owned ULDs or QF Flights
			if (uldsLost.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_LOST_ERROR,
                        new String[] { (uldsLost.substring(0,
                                uldsLost.length() - 1)).toString() });
				if (ERROR_TYPE_ERROR.equals(parameterMap.get(ULD_LOST))) {
					log.log(log.FINE, "Adding to Error  - uld lost");
					errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
					errorCollection.add(errorVO);
				} else {
					log.log(log.FINE, "Adding to Warning  - uld lost");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_LOST_WARNING,
                            new String[] { (uldsLost.substring(0, uldsLost
                                    .length() - 1)).toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}
			}
			// Added as a part of QF1382
			// Case:- For other airline ulds and QF Flight
			if (otheruldsLostForQFFlt.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_LOST_ERROR,
                        new String[] { (otheruldsLostForQFFlt.substring(0,
                                otheruldsLostForQFFlt.length() - 1)).toString() });
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(OAL_ULD_LOST_FOR_QFFLIGHT))) {
                    log.log(log.FINE, "Adding to Error  - uld lost--For OAL");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(OAL_ULD_LOST_FOR_QFFLIGHT))) {
                    log.log(log.FINE, "Adding to Warning  - uld lost--For OAL");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_LOST_WARNING,
                            new String[] { (otheruldsLostForQFFlt.substring(0,
                                    otheruldsLostForQFFlt.length() - 1))
                                    .toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}
			}
			// Added as a part of QF1382
			// Case:- For other airline ulds/flights
			if (otheruldsLost.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_LOST_ERROR,
                        new String[] { (otheruldsLost.substring(0,
                                otheruldsLost.length() - 1)).toString() });
				if (ERROR_TYPE_ERROR.equals(parameterMap.get(ULD_LOST_FOR_OAL))) {
					log.log(log.FINE, "Adding to Error  - uld lost--For OAL");
					errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
					errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(ULD_LOST_FOR_OAL))) {
                    log.log(log.FINE, "Adding to Warning  - uld lost--For OAL");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_LOST_WARNING,
                            new String[] { (otheruldsLost.substring(0,
                                    otheruldsLost.length() - 1)).toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}
			}

			// Adding to ErrorVO - uld nonoperational
			// Case:- for QF owned ULDs or QF Flights
            if ((uldsNonOpr.length() > 0) && (!(IMPORT.equalsIgnoreCase(flightDetailsVO.getDirection()) || 
            		ARRIVAL.equalsIgnoreCase(flightDetailsVO.getDirection())))){
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_OPERATIONAL_ERROR,
                        new String[] { (uldsNonOpr.substring(0, uldsNonOpr
                                .length() - 1)).toString() });
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(ULD_NONOPERATIONAL))) {
					log.log(log.FINE, "Adding to Error  - uld nonoperational");
					errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
					errorCollection.add(errorVO);
				} else {
					log.log(log.FINE, "Adding to Warning - uld nonoperational");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_OPERATIONAL_WARNING,
                            new String[] { (uldsNonOpr.substring(0, uldsNonOpr
                                    .length() - 1)).toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}
			}
			// Added as a part of QF1382
			// Case:- For other airline ulds and QF Flight
			if (otheruldsNonOprForQFFlt.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_OPERATIONAL_ERROR,
                        new String[] { (otheruldsNonOprForQFFlt.substring(0,
                                otheruldsNonOprForQFFlt.length() - 1))
                                .toString() });
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(OAL_ULD_NONOPERATIONAL_FOR_QFFLIGHT))) {
                    log.log(log.FINE,
                            "Adding to Error  - uld nonoperational--For OAL");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(OAL_ULD_NONOPERATIONAL_FOR_QFFLIGHT))) {
                    log.log(log.FINE,
                            "Adding to Warning - uld nonoperational--For OAL");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_OPERATIONAL_WARNING,
                            new String[] { (otheruldsNonOprForQFFlt.substring(
                                    0, otheruldsNonOprForQFFlt.length() - 1))
                                    .toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}
			}
			// Added as a part of QF1382
			// Case:- For other airline ulds/flights
            if ((otheruldsNonOpr.length() > 0)&& (!(IMPORT.equalsIgnoreCase(flightDetailsVO.getDirection()) || 
            		ARRIVAL.equalsIgnoreCase(flightDetailsVO.getDirection())))) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_OPERATIONAL_ERROR,
                        new String[] { (otheruldsNonOpr.substring(0,
                                otheruldsNonOpr.length() - 1)).toString() });
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(ULD_NONOPERATIONAL_FOR_OAL))) {
                    log.log(log.FINE,
                            "Adding to Error  - uld nonoperational--For OAL");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(ULD_NONOPERATIONAL_FOR_OAL))) {
                    log.log(log.FINE,
                            "Adding to Warning - uld nonoperational--For OAL");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_OPERATIONAL_WARNING,
                            new String[] { (otheruldsNonOpr.substring(0,
                                    otheruldsNonOpr.length() - 1)).toString() });
                    errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
                    warningCollection.add(errorVO);
                }
            }

            // Adding to ErrorVO - uld not in stock
            // Case:- for QF owned ULDs or QF Flights
            if (uldsNotInStck.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_IN_THE_SYSTEM_ERROR,
                        new String[] { (uldsNotInStck.substring(0,
                                uldsNotInStck.length() - 1)).toString() });
                /*
                 * Modified by A-3415 for ICRD-114051 so that in case parent parameter
                 * "cancreateULD" is not Y then need to consider this as error case only
                 */
                if (ERROR_TYPE_ERROR.equals(parameterMap.get(ULD_NOT_IN_STOCK)) || !FLAG_YES.equals(parameterMap
                        .get(ULD_STK_UPDATE_FOR_OWN))) {
					log.log(log.FINE, "Adding to Error  - uld not in stock");
					errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
					errorCollection.add(errorVO);
				} else {
					log.log(log.FINE, "Adding to Warning  - uld not in stock");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_IN_THE_SYSTEM_WARNING,
                            new String[] { (uldsNotInStck.substring(0,
                                    uldsNotInStck.length() - 1)).toString() });
					errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
					warningCollection.add(errorVO);
				}
			}
			// Added as a part of QF1382
			// Case:- For other airline ulds and QF Flights
			if (otheruldsNotInStckForQFFlt.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_IN_THE_SYSTEM_ERROR,
                        new String[] { (otheruldsNotInStckForQFFlt.substring(0,
                                otheruldsNotInStckForQFFlt.length() - 1))
                                .toString() });
                /*
                 * Modified by A-3415 for ICRD-114051 so that in case parent parameter
                 * "autouldstockupdateforOAL" is not Y then need to consider this as error case only
                 */
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(OAL_ULD_NOT_IN_STOCK_FOR_QFFLIGHT)) || parameterMap.get(ULD_STK_UPDATE_FOR_OAL)==null ||
                                FLAG_NO.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))) {
                    log.log(log.FINE,
                            "Adding to Error  - uld not in stock--For OAL");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(OAL_ULD_NOT_IN_STOCK_FOR_QFFLIGHT)) || parameterMap.get(ULD_STK_UPDATE_FOR_OAL)==null ||
                                FLAG_NO.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))) {
                    log.log(log.FINE,
                            "Adding to Warning  - uld not in stock--For OAL");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_IN_THE_SYSTEM_WARNING,
                            new String[] { (otheruldsNotInStckForQFFlt
                                    .substring(0, otheruldsNotInStckForQFFlt
                                            .length() - 1)).toString() });
                    errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
                    warningCollection.add(errorVO);
                }
            }
            // Added as a part of QF1382
            // Case:- For other airline ulds/flights
            if (otheruldsNotInStck.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_IN_THE_SYSTEM_ERROR,
                        new String[] { (otheruldsNotInStck.substring(0,
                                otheruldsNotInStck.length() - 1)).toString() });
                /*
                 * Modified by A-3415 for ICRD-114051 so that in case parent parameter
                 * "autouldstockupdateforOAL" is not Y then need to consider this as error case only
                 */
                if (ERROR_TYPE_ERROR.equals(parameterMap
                        .get(ULD_NOT_IN_STOCK_FOR_OAL))) {
                    log.log(log.FINE,
                            "Adding to Error  - uld not in stock--For OAL");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else if (ERROR_TYPE_WARNING.equals(parameterMap
                        .get(ULD_NOT_IN_STOCK_FOR_OAL))) {
                    log.log(log.FINE,
                            "Adding to Warning  - uld not in stock--For OAL");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_IN_THE_SYSTEM_WARNING,
                            new String[] { (otheruldsNotInStck.substring(0,
                                    otheruldsNotInStck.length() - 1))
                                    .toString() });
                    errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
                    warningCollection.add(errorVO);
                }
            }

        } catch (ProxyException proxyException) {
            log.log(Log.INFO, "Proxy Exception when ERROR TYPE is picked up",
                    proxyException.getErrors());
            throw new SystemException(proxyException.getMessage());
        }
        log.log(Log.INFO, "-------------ERROR COLLECTION--------------",
                errorCollection.size());
        log.log(Log.INFO, "-----------WARNING COLLECTION--------------",
                warningCollection.size());
        // If Both Warning and Errors are there,then show error messages only
        // Throwing Warnings If nd only if no error messages are there.
        // Throwing error messages If nd only if no warning messages are there..
        if (errorCollection != null && errorCollection.size() > 0) {
            log.log(Log.INFO, "---BOTH WARNING AND ERROR ARE PRESENT-----");
            ULDDoesNotExistsException uldDoesNotExist = new ULDDoesNotExistsException();
            uldDoesNotExist.addErrors(errorCollection);
            throw uldDoesNotExist;
        } else if (warningCollection != null && warningCollection.size() > 0) {
            log.log(Log.INFO, "---WARNING PRESENT-----");
            ULDDoesNotExistsException uldDoesNotExist = new ULDDoesNotExistsException();
            uldDoesNotExist.addErrors(warningCollection);
            throw uldDoesNotExist;
        }
        log.exiting("ULDController", "validateULDsForOperation");
    }

    /**
     *
     * @param reconcileVOs
     * @throws SystemException
     */
    public void saveIncomingUCM(
            Collection<ULDFlightMessageReconcileVO> reconcileVOs)
            throws SystemException {
        log.entering("ULDController", "processUCMMessage");
        log.log(Log.INFO,
                "%%%%%%%%%  Collection<ULDFlightMessageReconcileVO> ",
                reconcileVOs);
		for (ULDFlightMessageReconcileVO reconcileVO : reconcileVOs) {
			boolean isThereAnyError = false;
			ULDFlightMessageReconcileVO messageReconcileVO = null;
            messageReconcileVO = ULDFlightMessageReconcile
                    .findCounterUCM(reconcileVO);
			if (messageReconcileVO == null) {
				reconcileVO = new UCMValidator().validateUCM(reconcileVO);
				new ULDFlightMessageReconcile(reconcileVO);
				if (reconcileVO.getErrorCode() != null) {
					isThereAnyError = true;
				} else {
					if (reconcileVO.getReconcileDetailsVOs() != null
							&& reconcileVO.getReconcileDetailsVOs().size() > 0) {
                        for (ULDFlightMessageReconcileDetailsVO detailsVO : reconcileVO
                                .getReconcileDetailsVOs()) {
							if (detailsVO.getErrorCode() != null) {
								isThereAnyError = true;
							}
						}
					}
				}
				if (!isThereAnyError) {
					if (reconcileVO.getReconcileDetailsVOs() != null
							&& reconcileVO.getReconcileDetailsVOs().size() > 0) {
                        for (ULDFlightMessageReconcileDetailsVO detailsVO : reconcileVO
                                .getReconcileDetailsVOs()) {
                            boolean isFound = true;
                            if ("OUT".equalsIgnoreCase(reconcileVO
                                    .getMessageType())) {
                                ULD uld = null;
                                try {
                                    uld = ULD.find(
                                            reconcileVO.getCompanyCode(),
                                            detailsVO.getUldNumber());
								} catch (FinderException finderException) {
									isFound = false;
								}
								if (isFound) {
									uld.setTransitStatus("Y");
									// Added by Preet on 10Feb09 for bug 36338
									// starts
									// When ULD is marked In Transit , the
									// flight details are also persisted
                                    StringBuilder flightInfo = new StringBuilder(
                                            reconcileVO.getCarrierCode());
                                    flightInfo
                                            .append(
                                                    reconcileVO
                                                            .getFlightNumber())
                                            .append(",")
                                            .append(
                                                    reconcileVO
                                                            .getFlightDate()
                                                            .toDisplayDateOnlyFormat())
                                                            .append(",")
                                                            .append(detailsVO.getPou());
                                    uld.setFlightInfo(flightInfo.toString());
                                    // Added by Preet on 10Feb09 for bug 36338
                                    // ends
                                }
                            } else if ("IN".equalsIgnoreCase(reconcileVO
                                    .getMessageType())) {
                                ULD uld = null;
                                try {
                                    uld = ULD.find(
                                            reconcileVO.getCompanyCode(),
                                            detailsVO.getUldNumber());
                                } catch (FinderException finderException) {
                                    isFound = false;
                                }
                                if (isFound) {
                                    uld.setTransitStatus("N");
                                    // Added by Preet on 10Feb09 for bug 36338
                                    // starts
                                    uld.setFlightInfo(null);
                                    // Added by Preet on 10Feb09 for bug 36338
                                    // ends
                                    uld.setCurrentStation(detailsVO
                                            .getAirportCode());
                                    // added by nisha for QF1013 starts
                                    uld.setScmDate(null);
                                    uld.setScmFlag(null);
                                    // ends
                                }
                            }

                        }
                    }
                }
            }
        }
    }

    /**
     *
     * @param flightMessageFilterVO
     * @return
     * @throws SystemException
     * @throws RemoteException
     */
    public FlightDetailsVO findUCMFlightDetails(
            FlightMessageFilterVO flightMessageFilterVO) throws SystemException {
		log.entering("ULDController", "findUCMFlightDetails");
		return ULDFlightMessage.findUCMFlightDetails(flightMessageFilterVO);
	}

	/**
	 *
	 * @param locationVOs
	 * @throws SystemException
	 * @throws DefaultFlagAlreadySetException
	 * @throws FacilityCodeInUseException
	 */
    public void saveULDAirportLocation(
            Collection<ULDAirportLocationVO> locationVOs)
            throws SystemException, DefaultFlagAlreadySetException,
            FacilityCodeInUseException {
		log.entering("ULDController", "saveULDAirportLocation");
		Collection<ULDAirportLocationVO> defaultflagVO = null;
		String companyCode = null;
		String airportCode = null;
		StringBuilder sbd = new StringBuilder();
		int count = 0;
		boolean isError = false;
		ArrayList<String> contents = new ArrayList<String>();
		Collection<ErrorVO> defaultErrors = new ArrayList<ErrorVO>();

		Collection<ULDAirportLocationVO> deleteVos = new ArrayList<ULDAirportLocationVO>();
		Collection<ULDAirportLocationVO> insertVos = new ArrayList<ULDAirportLocationVO>();

		if (locationVOs != null && locationVOs.size() > 0) {
			for (ULDAirportLocationVO locationVO : locationVOs) {
				companyCode = locationVO.getCompanyCode();
				airportCode = locationVO.getAirportCode();
				break;
			}
			for (ULDAirportLocationVO locationVO : locationVOs) {
                if (ULDAirportLocationVO.OPERATION_FLAG_DELETE
                        .equalsIgnoreCase(locationVO.getOperationFlag())) {
					deleteVos.add(locationVO);
                    int result = ULDAirportLocation.checkForULDLocation(
                            locationVO.getCompanyCode(), locationVO
                                    .getFacilityCode(), locationVO
                                    .getAirportCode());
					if (result > 0) {
						isError = true;
                        sbd = sbd.append(locationVO.getFacilityCode()).append(
                                ",");
					}
					locationVO.setDefaultFlag("N");
					ULDAirportLocation uLDAirportLocation = null;
					uLDAirportLocation = ULDAirportLocation.find(locationVO);

					// added by a-3045 for bug 28905 on 15 Jan starts
                    ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                            ULDAirportLocationVO.MODULE,
                            ULDAirportLocationVO.SUBMODULE,
                            ULDAirportLocationVO.ENTITY);
					log.log(Log.INFO, "----before delete---", uldConfigAuditVO);
					uLDAirportLocation.remove();

                    findAuditVOAirportLocation(uLDAirportLocation,
                            uldConfigAuditVO, locationVO);
					uldConfigAuditVO.setActionCode(DELETE_FACLOC);
                    uldConfigAuditVO.setAuditRemarks(locationVO
                            .getDescription());
                    log
                            .log(
                                    Log.INFO,
                                    " ULDAirportLocationVO.OPERATION_FLAG_DELETE uldConfigAuditVO ---> ",
									uldConfigAuditVO);
					AuditUtils.performAudit(uldConfigAuditVO);
				}
				contents.add(locationVO.getContent());
			}
            defaultflagVO = ULDAirportLocation.findDefaultFlag(companyCode,
                    airportCode, contents);
			log.log(Log.INFO, "defaultflagVO --->>>>", defaultflagVO);
			if (defaultflagVO != null && defaultflagVO.size() > 0) {
				for (ULDAirportLocationVO defVo : defaultflagVO) {
					count = 0;
					for (ULDAirportLocationVO locationVO : locationVOs) {
                        if (locationVO.getContent().equalsIgnoreCase(
                                defVo.getContent())) {
                            if (defVo.getFacilityType().equalsIgnoreCase(
                                    locationVO.getFacilityType())
                                    && defVo
                                            .getSequenceNumber()
                                            .equalsIgnoreCase(
                                                    locationVO
                                                            .getSequenceNumber())
                                    && defVo.getContent().equalsIgnoreCase(
                                            locationVO.getContent())) {
                                count = 0;
                                break;
                            } else if ("Y".equalsIgnoreCase(locationVO
                                    .getDefaultFlag())) {
								count++;
							}
						}
					}
					if (count > 0) {

						log.log(Log.INFO, " Default flag found in vo ");
                        defaultErrors
                                .add(new ErrorVO(
                                        DefaultFlagAlreadySetException.DEFAULTFLAG_ALREADY_SET,
                                        new String[] { defVo.getFacilityType(),
                                                defVo.getFacilityCode(),
                                                defVo.getContent() }));

					}

				}
			} else {
				log.log(Log.INFO, "NO DEFAULT FLAG ");
			}

			// Added by Sreekumar S
			Collection<String> facilityCode = null;

			for (ULDAirportLocationVO locationVO : locationVOs) {
				if (("I").equalsIgnoreCase(locationVO.getOperationFlag())) {
					boolean checkDuplicate = true;
					log.log(Log.INFO, "locationVO-------------", locationVO);
					log.log(Log.INFO, "deleteVos-------###$$------", deleteVos);
					for (ULDAirportLocationVO delVO : deleteVos) {
						log.log(Log.INFO, "delVO-------------", delVO);
                        if (locationVO.getCompanyCode().equalsIgnoreCase(
                                delVO.getCompanyCode())
                                && locationVO.getAirportCode()
                                        .equalsIgnoreCase(
                                                delVO.getAirportCode())
                                && locationVO.getFacilityCode()
                                        .equalsIgnoreCase(
                                                delVO.getFacilityCode())
                                && locationVO.getFacilityType()
                                        .equalsIgnoreCase(
                                                delVO.getFacilityType())
                                && locationVO.getContent().equalsIgnoreCase(
                                        delVO.getContent())
                                && locationVO.getDefaultFlag()
                                        .equalsIgnoreCase(
                                                delVO.getDefaultFlag())) {
                            log.log(Log.INFO,
                                    "ROW GETTING INSERTED AND DELETED IS SAME");
                            checkDuplicate = false;

                        }
                        log.log(Log.INFO, "checkDuplicate-----------",
                                checkDuplicate);
						if (checkDuplicate) {
                            log.log(Log.INFO, "GOING TO CHECK FOR DUPLICATE ",
                                    locationVO);
                            facilityCode = ULDAirportLocation
                                    .checkForDuplicateFacilityCode(locationVO
                                            .getCompanyCode(), locationVO
                                            .getAirportCode(), locationVO
                                            .getFacilityCode(), locationVO
                                            .getFacilityType(), locationVO
                                            .getContent());
							log.log(Log.FINE, "inside loop");
						}
					}
				}
				if (facilityCode != null && facilityCode.size() > 0) {
					log.log(Log.FINE, "----------DUPLICATE_FACILITY_CODE");
					for (String FacilityCode : facilityCode) {
                        throw new FacilityCodeInUseException(
                                FacilityCodeInUseException.DUPLICATE_FACILITY_CODE,
								new String[] { FacilityCode });
					}

				} else {
					log.log(Log.INFO, "NO DUPLICATION ");
				}

			}

			for (ULDAirportLocationVO locationVO : locationVOs) {

                if (ULDAirportLocationVO.OPERATION_FLAG_INSERT
                        .equalsIgnoreCase(locationVO.getOperationFlag())) {
					ULDAirportLocation loc = new ULDAirportLocation(locationVO);

					// added by a-3045 for bug 28905 on 15 Jan starts
                    ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                            ULDAirportLocationVO.MODULE,
                            ULDAirportLocationVO.SUBMODULE,
                            ULDAirportLocationVO.ENTITY);
                    // added by a-3045 for bug 28905 on 15 Jan ends

                    findAuditVOAirportLocation(loc, uldConfigAuditVO,
                            locationVO);
					uldConfigAuditVO.setActionCode(CREATE_FACLOC);
                    uldConfigAuditVO.setAuditRemarks(locationVO
                            .getDescription());
                    log
                            .log(
                                    Log.INFO,
                                    " ULDAirportLocationVO.OPERATION_FLAG_INSERT uldConfigAuditVO ---> ",
                                    uldConfigAuditVO);
                    AuditUtils.performAudit(uldConfigAuditVO);

                } else if (ULDAirportLocationVO.OPERATION_FLAG_UPDATE
                        .equalsIgnoreCase(locationVO.getOperationFlag())) {

					ULDAirportLocation uLDAirportLocation = null;

					uLDAirportLocation = ULDAirportLocation.find(locationVO);
					uLDAirportLocation.update(locationVO);

					// added by a-3045 for bug 28905 on 15 Jan starts
                    ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                            ULDAirportLocationVO.MODULE,
                            ULDAirportLocationVO.SUBMODULE,
                            ULDAirportLocationVO.ENTITY);
                    // added by a-3045 for bug 28905 on 15 Jan ends

                    findAuditVOAirportLocation(uLDAirportLocation,
                            uldConfigAuditVO, locationVO);
					uldConfigAuditVO.setActionCode(UPDATE_FACLOC);
                    uldConfigAuditVO.setAuditRemarks(locationVO
                            .getDescription());
                    log
                            .log(
                                    Log.INFO,
                                    " ULDAirportLocationVO.OPERATION_FLAG_UPDATE uldConfigAuditVO ---> ",
									uldConfigAuditVO);
					AuditUtils.performAudit(uldConfigAuditVO);
				}
			}
		}
		if (isError) {
			log.log(Log.INFO, "LOCATION EXCEPTION IS THROWN ");
			sbd = sbd.deleteCharAt(sbd.length() - 1);
            throw new FacilityCodeInUseException(
                    FacilityCodeInUseException.FACILITYCODE_IN_USE,
					new String[] { sbd.toString() });
		}

		if (defaultErrors.size() > 0) {
			log.log(Log.INFO, "DEFAULTFLAG EXCEPTION IS THROWN ");
			DefaultFlagAlreadySetException defaultFlagAlreadySetException = new DefaultFlagAlreadySetException();
			defaultFlagAlreadySetException.addErrors(defaultErrors);
			throw defaultFlagAlreadySetException;
		}

	}

    private void findAuditVOAirportLocation(ULDAirportLocation location,
            ULDConfigAuditVO uldConfigAuditVO, ULDAirportLocationVO locationVO)
            throws SystemException {

        log
                .log(Log.FINE,
                        "---------setting uldAuditVO VO-------***************************************");
		StringBuffer additionalInfo = new StringBuffer();
		uldConfigAuditVO.setCompanyCode(locationVO.getCompanyCode());

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

		String airportCode = logonAttributes.getAirportCode();

        uldConfigAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP,
                true).toGMTDate());
        uldConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                Location.ARP, true));
		uldConfigAuditVO.setAuditRemarks(location.getFacilityDescription());
		uldConfigAuditVO.setUserId(location.getLastUpdatedUser());
		// Commented by a-3045 for bug 28905 on 15Jan09
		// if (!ULDDamageVO.OPERATION_FLAG_DELETE.equals(locationVO
		// .getOperationFlag())) {

		additionalInfo.append(" AirportCode - ");
		additionalInfo.append(locationVO.getAirportCode());
		additionalInfo.append(",");

		additionalInfo.append(" FacilityType - ");
		additionalInfo.append(locationVO.getFacilityType());

		if (locationVO.getFacilityCode() != null) {
			additionalInfo.append(",");
			additionalInfo.append(" FacilityCode - ");
			additionalInfo.append(locationVO.getFacilityCode());
		}
		// }
		uldConfigAuditVO.setAdditionalInformation(additionalInfo.toString());
        log.log(Log.FINE, "findAuditVOAirportLocation***uldConfigAuditVO****",
                uldConfigAuditVO);
        log.exiting("findAuditVOAirportLocation",
                "...Finished construction uldConfigAuditVO vo");
	}

	/**
	 *
	 * @param companyCode
	 * @param airportCode
	 * @param facilityType
	 * @return
	 * @throws SystemException
	 */
    public Collection<ULDAirportLocationVO> listULDAirportLocation(
            String companyCode, String airportCode, String facilityType)
            throws SystemException {
		log.entering("ULDController", "listULDAirportLocation");
        return ULDAirportLocation.listULDAirportLocation(companyCode,
                airportCode, facilityType);
    }



	/**
	 * This method validates the flight to check if the flight exists and
	 * returns the flight specific details.
	 *
	 * @param flightFilterVo
	 * @return Collection<FlightValidationVO>
	 * @throws SystemException
	 * @throws ProxyException
	 *
	 */
    public Collection<FlightValidationVO> fetchFlightDetails(
            FlightFilterVO flightFilterVo) throws SystemException {
		log.entering("ULDController", "fetchFlightDetails" + flightFilterVo);
		try {
            return new FlightOperationsProxy()
                    .fetchFlightDetails(flightFilterVo);
        } catch (ProxyException e) {
            throw new SystemException(e.getErrors().iterator().next()
                    .getErrorCode());
		}

	}

	/**
	 *
	 * @param reconcileVOs
	 * @return
	 * @throws SystemException
	 * @throws UCMInExistsForStationException
	 */

	public Collection<ULDFlightMessageReconcileVO> saveULDFlightMessageReconcile(
			Collection<ULDFlightMessageReconcileVO> reconcileVOs)
			throws SystemException, UCMInExistsForStationException {
		log.entering("ULDController", "saveULDFlightMessageReconcile");

		int flag = 0;
		StringBuilder arpCod = new StringBuilder();

		Collection<ULDFlightMessageReconcileVO> messageReconcileVOs = new ArrayList<ULDFlightMessageReconcileVO>();

		Collection<ULDFlightMessageReconcileVO> errorStampedReconcileVOs = new ArrayList<ULDFlightMessageReconcileVO>();

		boolean isError = false;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

		if (reconcileVOs != null && reconcileVOs.size() > 0) {
			for (ULDFlightMessageReconcileVO reconcileVO : reconcileVOs) {
				if (ULDFlightMessageReconcileVO.OPERATION_FLAG_DELETE
						.equalsIgnoreCase(reconcileVO.getOperationFlag())) {
					ULDFlightMessageReconcile reconcile = null;
					try {
						reconcile = ULDFlightMessageReconcile.find(reconcileVO);
					} catch (FinderException e) {
						throw new SystemException(e.getErrorCode());
					}
					reconcile.remove();
				}
			}
			/*
			 * added by a-3278 for bug 34185 on 27Jan09 To remove the missed
			 * ULDs from discrepency table if transaction exists for that
			 */
			for (ULDFlightMessageReconcileVO flightReconcileVO : reconcileVOs) {
				Collection<String> uldNos = new ArrayList<String>();
				for (ULDFlightMessageReconcileDetailsVO reconcileULDDetailsVO : flightReconcileVO
						.getReconcileDetailsVOs()) {
					uldNos.add(reconcileULDDetailsVO.getUldNumber());
				}
				Collection<ULDDiscrepancy> uldDiscrepancies = ULDDiscrepancy
                        .findULDDiscrepancies(logonAttributes.getCompanyCode(),
                                uldNos);
				if (uldDiscrepancies != null && uldDiscrepancies.size() > 0) {
					for (ULDDiscrepancy uldDiscrepancy : uldDiscrepancies) {
						uldDiscrepancy.setCloseStatus("Y");
					}
				}
			}
			// a-3278 ends
			for (ULDFlightMessageReconcileVO flightReconcileVO : reconcileVOs) {
				if ("Q".equals(flightReconcileVO.getOperationFlag())) {
                    log.log(Log.INFO, "%%%%%%%%%%%%%%%%%   flightReconcileVO",
                            flightReconcileVO);
					ULD uld = null;
					boolean isFound = true;
					for (ULDFlightMessageReconcileDetailsVO reconcileULDDetailsVO : flightReconcileVO
							.getReconcileDetailsVOs()) {
                        log.log(Log.INFO,
                                "%%%%%%%%%%%%%%%%%   reconcileULDDetailsVO",
                                reconcileULDDetailsVO);
                        try {
                            uld = ULD.find(reconcileULDDetailsVO
                                    .getCompanyCode(), reconcileULDDetailsVO
                                    .getUldNumber());
						} catch (FinderException finderException) {
							isFound = false;
						}
						if (isFound) {
							uld.setTransitStatus("N");
							uld.setFlightInfo(null);
						}
					}
				} else if (ULDFlightMessageReconcileVO.OPERATION_FLAG_INSERT
						.equals(flightReconcileVO.getOperationFlag())) {
					ULDFlightMessageReconcileVO messageVO = null;
                    log.log(Log.INFO,
                            "%%%%%%%%%%  toUCMValidator   %%%%%%%%%%%%%%%");
					if (!flightReconcileVO.isToBeAvoidedFromValidationCheck()) {
                        messageVO = new UCMValidator()
                                .validateUCM(flightReconcileVO);
                    } else {
                        log.log(Log.INFO,
                                "%%%%%%%%%  Avoided from validation Check");
						messageVO = flightReconcileVO;
					}
					if ("OUT".equalsIgnoreCase(messageVO.getMessageType())) {
                        Collection<String> airportCodes = ULDFlightMessageReconcile
                                .findInMesssageAirports(messageVO);
						if (airportCodes != null && airportCodes.size() > 0) {
							for (String airportCode : airportCodes) {
								if (flag == 0) {
									arpCod.append(airportCode);
								} else {
									arpCod.append(",").append(airportCode);
								}
								flag = 1;
							}
							throw new UCMInExistsForStationException(
									UCMInExistsForStationException.UCMINMESSAGE_EXISTS_FOR_STATION,
									new String[] { arpCod.toString() });
						}
					}
					// Added new
                    //Modified by A-5116 for ICRD-50252
                    if (!"B".equals(flightReconcileVO.getMessageSendFlag()) && flightReconcileVO.getMessageSendFlag() != null) {
						flightReconcileVO.setMessageSendFlag("P");
					}
                    log.log(Log.INFO, "******  Message VO ********",
							flightReconcileVO);	 
					//Added by A-7359 for ICRD-238782 starts here
					if(messageVO.getReconcileDetailsVOs()!=null){
						ArrayList<ULDFlightMessageReconcileDetailsVO> forInTransitupdationULDs= new ArrayList<ULDFlightMessageReconcileDetailsVO>();
						for(ULDFlightMessageReconcileDetailsVO updateULD:messageVO.getReconcileDetailsVOs()){
							if (ULDFlightMessageReconcileVO.OPERATION_FLAG_DELETE
									.equalsIgnoreCase((updateULD.getOperationFlag()))) {
								forInTransitupdationULDs.add(updateULD);
							}
						}
						if(forInTransitupdationULDs!=null && forInTransitupdationULDs.size() > 0){
							updateInTransitforULDs(forInTransitupdationULDs);
						}
						messageVO.getReconcileDetailsVOs().removeAll(forInTransitupdationULDs);
					}  
					//Added by A-7359 for ICRD-238782 ends here
                    new ULDFlightMessageReconcile(messageVO);
                    if (messageVO.getErrorCode() == null) {
                        for (ULDFlightMessageReconcileDetailsVO reconcileULDDetailsVO : messageVO
								.getReconcileDetailsVOs()) {
							if (reconcileULDDetailsVO.getErrorCode() != null) {
								isError = true;
								break;
							}
						}
						if (!isError) {
							// flightReconcileVO.setMessageSendFlag("S");
							if (!flightReconcileVO.isBlocked()) {
								messageReconcileVOs.add(flightReconcileVO);
							}
						} else {
							// flightReconcileVO.setMessageSendFlag("P");
						}
					}
					errorStampedReconcileVOs.add(messageVO);

				} else if (ULDFlightMessageReconcileVO.OPERATION_FLAG_UPDATE
						.equalsIgnoreCase(flightReconcileVO.getOperationFlag())) {

                    log.log(Log.INFO, "%%%%%%%%%%%%%%%%%%%%flightReconcileVO",
                            flightReconcileVO);
                    ULDFlightMessageReconcile reconcile = null;
                    try {
                        reconcile = ULDFlightMessageReconcile
                                .find(flightReconcileVO);
                    } catch (FinderException e) {
                        throw new SystemException(e.getErrorCode());
                    }

                    ULDFlightMessageReconcileVO messageVO = new UCMValidator()
                            .validateUCM(flightReconcileVO);
                    log.log(Log.INFO, "%%%%%%%%%%%%%%%%%%%%flightReconcileVO",
                            messageVO);
					reconcile.update(messageVO);

					errorStampedReconcileVOs.add(messageVO);

                    log.log(Log.INFO,
                            "%%%%%%%%%%%%%%%%%%%%errorStampedReconcileVOs",
                            errorStampedReconcileVOs);

				}
			}
		}
		if (messageReconcileVOs.size() > 0) {
            log.log(Log.INFO, "%%%%%%%%%%%%%  messageReconcileVOs",
                    messageReconcileVOs);
            formUCMMessageVO(messageReconcileVOs, null);
			for (ULDFlightMessageReconcileVO vo : messageReconcileVOs) {
				ULDFlightMessageReconcile msg = null;
                ULDFlightMessageReconcileDetails msgreconcileDtls = null;
				try {
					msg = ULDFlightMessageReconcile.find(vo);
                    //Added by A-7426 for ICRD-223377 starts here
                    Collection<ULDFlightMessageReconcileDetails> uldMessageReconcileDetails = new ArrayList<ULDFlightMessageReconcileDetails>();
                    if(vo.getReconcileDetailsVOs() != null && vo.getReconcileDetailsVOs().size() > 0){
                        for(ULDFlightMessageReconcileDetailsVO dtls : vo.getReconcileDetailsVOs()){
                            msgreconcileDtls = ULDFlightMessageReconcileDetails.find(dtls);
                            uldMessageReconcileDetails.add(msgreconcileDtls);
                        }
                        HashSet tmp=new HashSet<ULDFlightMessageReconcileDetails>();
                        tmp.addAll(uldMessageReconcileDetails);
                        msg.setReconcileDetails(tmp);
                    }
                    //Added by A-7426 for ICRD-223377 ends here
				} catch (FinderException finderException) {
					// x
				}
				if (msg != null) {
					msg.setMessageSendFlag("S");
                    //Added by A-7359 for ICRD-192413
                    if(msg.getReconcileDetails()!= null&& msg.getReconcileDetails().size()>0 ){
                        for(ULDFlightMessageReconcileDetails msgDetail:msg.getReconcileDetails()){
                            //Modified by A-7359 for ICRD-229935
                            if("S".equalsIgnoreCase(msgDetail.getUldStatus())||"R".equalsIgnoreCase(msgDetail.getUldStatus())){
                            msgDetail.setUldStatus("R");
                            }else{
                            msgDetail.setUldStatus("S");
                            }
                        }
                    }
				}
			}
		}

		return errorStampedReconcileVOs;
	}








    /**
     *
     * @param filterVO
     * @return
     * @throws SystemException
     */
    public ULDFlightMessageReconcileVO listUCMMessage(
            FlightFilterMessageVO filterVO) throws SystemException {
		log.entering("ULDController", "listUCMMessage");
		if ("IN".equalsIgnoreCase(filterVO.getMessageType())) {
			return ULDFlightMessageReconcile.listUCMINMessage(filterVO);
		} else if ("OUT".equalsIgnoreCase(filterVO.getMessageType())) {
			return ULDFlightMessageReconcile.listUCMOUTMessage(filterVO);
		}
		return ULDFlightMessageReconcile.listUCMMessage(filterVO);
	}

	/**
	 *
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDFlightMessageReconcileVO> listUCMErrors(
            FlightFilterMessageVO filterVO) throws SystemException {
		log.entering("ULDController", "listUCMErrors");
		return ULDFlightMessageReconcile.listUCMErrors(filterVO);
	}

	/**
	 * @author A-1950
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public Collection<String> findUCMNoLOV(FlightFilterMessageVO filterVO)
            throws SystemException {
		log.entering("ULDController", "findUCMNoLOV");
		log.log(Log.INFO, "%%%%%%%%%%filterVO ", filterVO);
        Collection<String> ucmnos = ULDFlightMessageReconcile
                .findUCMNoLOV(filterVO);
		log.log(Log.INFO, "%%%%%%%%%%%% ucmnos", ucmnos);
		return ucmnos;
	}

	/**
	 *
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDFlightMessageReconcileDetailsVO> listUldErrors(
            FlightFilterMessageVO filterVO) throws SystemException {
		log.entering("ULDController", "listUldErrors");
		return ULDFlightMessageReconcile.listUldErrors(filterVO);
	}

	/**
	 * @author A-1950
	 *
	 * @param flightFilterVO
	 * @return
	 * @throws SystemException
	 */
    public Collection<ULDFlightMessageReconcileVO> listUCMsForComparison(
            FlightFilterMessageVO flightFilterVO) throws SystemException {
		log.entering("ULDController", "listUCMsForComparison");
		return ULDFlightMessageReconcile.listUCMsForComparison(flightFilterVO);

	}

	/**
	 *
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public Collection<ULDFlightMessageReconcileDetailsVO> listUCMINOUTMessage(
            FlightFilterMessageVO filterVO) throws SystemException {
		log.entering("ULDController", "listUCMINOUTMessage");
		return ULDFlightMessageReconcile.listUCMINOUTMessage(filterVO);
	}

	/**
	 *
	 * @param uldReconcileDetailsVO
	 * @throws SystemException
	 */
    public String reconcileUCMULDError(
            ULDFlightMessageReconcileDetailsVO uldReconcileDetailsVO)
			throws SystemException {
		log.entering("ULDController", "reconcileUCMULDError");
		return new UCMValidator().reconcileUCMULDError(uldReconcileDetailsVO);
	}

	/**
	 *
	 * @param flightFilterVO
	 * @return
	 * @throws SystemException
	 * @throws UCMInOutMismatchException
	 */
	public Collection<ULDFlightMessageReconcileDetailsVO> listUCMOUTForInOutMismatch(
            FlightFilterMessageVO flightFilterVO) throws SystemException,
            UCMInOutMismatchException {
		log.entering("ULDController", "listUCMOUTForInOutMismatch");
		Collection<String> airportCodes = new ArrayList<String>();
		// Collection<String> ucmNumbers = new ArrayList<String>();
		// Collection<String> duplicateUCMS = new ArrayList<String>();
		Collection<String> ucmsWithUlderrors = new ArrayList<String>();
		Collection<ULDFlightMessageReconcileDetailsVO> detailsVOs = null;
		StringBuilder dupArpcod = new StringBuilder();
		StringBuilder uldError = new StringBuilder();

		int flagA = 0;
		int flagB = 0;
        detailsVOs = ULDFlightMessageReconcile
                .listUCMOUTForInOutMismatch(flightFilterVO);
		if (detailsVOs != null && detailsVOs.size() > 0) {
			for (ULDFlightMessageReconcileDetailsVO detailsVO : detailsVOs) {

                if (detailsVO.getUcmErrorCode() != null
                        && detailsVO.getUcmErrorCode().trim().length() > 0) {
					if (!airportCodes.contains(detailsVO.getAirportCode())) {
						airportCodes.add(detailsVO.getAirportCode());

					}
				}

				/*
				 * if(ucmNumbers.contains(detailsVO.getSequenceNumber())) {
				 * //log.log(Log.INFO,"%%%%%%%%date in String"+dat);
				 * if(airportCodes.contains(detailsVO.getAirportCode())) {
				 * duplicateUCMS.add(detailsVO.getSequenceNumber()); }
				 *
				 * }else { ucmNumbers.add(detailsVO.getAirportCode()); }
				 *
				 * if(!airportCodes.contains(detailsVO.getAirportCode())) {
				 * airportCodes.add(detailsVO.getAirportCode()); }
				 */

                if (detailsVO.getErrorCode() != null
                        && detailsVO.getErrorCode().trim().length() > 0) {
					ucmsWithUlderrors.add(detailsVO.getErrorCode());
				}
			}
		}
		if (airportCodes != null && airportCodes.size() > 0) {
			for (String airportCode : airportCodes) {
				if (flagA == 0) {
					dupArpcod.append(airportCode);
				} else {
					dupArpcod.append(",").append(airportCode);
				}
				flagA = 1;
			}
            throw new UCMInOutMismatchException(
                    UCMInOutMismatchException.DUPLICATE_UCMOUT_EXISTS_FORSTATION,
					new String[] { dupArpcod.toString() });
		}
		if (ucmsWithUlderrors != null && ucmsWithUlderrors.size() > 0) {
			for (String airportCode : ucmsWithUlderrors) {
				if (flagB == 0) {
					uldError.append(airportCode);
				} else {
					uldError.append(",").append(airportCode);
				}
				flagB = 1;
			}

            throw new UCMInOutMismatchException(
                    UCMInOutMismatchException.ULDERRORS_IN_UCM,
					new String[] { uldError.toString() });
		}

		return detailsVOs;
	}

	/**
	 * @author A-1950
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 */
    public String findULDCurrentStation(String companyCode, String uldNumber)
            throws SystemException {
		log.entering("ULDController", "findULDCurrentStation");
		ULD uld = null;
		try {
			uld = ULD.find(companyCode, uldNumber);
		} catch (FinderException finderException) {
			throw new SystemException(finderException.getErrorCode());
		}
		return uld.getCurrentStation();
	}

	/**
	 * @author A-1950
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @throws SystemException
	 * @throws RemoteException
	 */
    public void updateULDTransitStatus(String companyCode, String uldNumber)
            throws SystemException {
		log.entering("ULDController", "updateULDTransitStatus");
		ULD uld = null;
		try {
			uld = ULD.find(companyCode, uldNumber);
		} catch (FinderException finderException) {
			throw new SystemException(finderException.getErrorCode());
		}
		uld.setTransitStatus("N");
	}

	/**
	 * @author A-1950
	 *
	 * @param reconcileVOs
	 * @throws SystemException
	 */
    private void formUCMMessageVO(
            Collection<ULDFlightMessageReconcileVO> reconcileVOs,Collection<MessageDespatchDetailsVO> despatchDetailVO)
            throws SystemException {
		log.entering("ULDController", "formUCMMessageVO");
		boolean isIN = false;
		boolean isOUT = false;

		UCMMessageVO ucmMessageVO = new UCMMessageVO();
		UCMMessageIdentifierVO ucmMessageIdentifierVO = null;
		UCMFlightIdentificationVO ucmFlightIdentificationVO = null;
		UCMFlightMovementVO ucmFlightMovementVO = null;
		UCMIncomingULDHeaderVO ucmIncomingULDHeaderVO = null;
		UCMOutgoingULDHeaderVO ucmOutgoingULDHeaderVO = null;
		UCMIncomingULDDetailsVO ucmIncomingULDDetailsVO = null;
		UCMOutgoingULDDetailsVO ucmOutgoingULDDetailsVO = null;
		UCMNilIncomingULDDetailsVO nilIncomingVO = null;
		UCMNilOutgoingULDDetailsVO nilOutgoingVO = null;
        UCMSupplementaryHeaderInfoVO ucmSupplementaryHeaderInfoVO = null;
        UCMSupplementaryInfoVO ucmSupplementaryInfoVO = null;
        Collection<FlightValidationVO> flightValidationVOs = null;
        FlightValidationFilterVO flightValidationFilterVO = new FlightValidationFilterVO();
        ucmMessageVO
                .setUcmOutgoingULDDetailsVOs(new ArrayList<UCMOutgoingULDDetailsVO>());
        ucmMessageVO
                .setUcmIncomingULDDetailsVOs(new ArrayList<UCMIncomingULDDetailsVO>());

        ucmMessageVO.setCompanyCode(reconcileVOs.iterator().next()
                .getCompanyCode());

        ucmMessageVO.setLastUpdateUser(reconcileVOs.iterator().next()
                .getLastUpdatedUser());
        //Added by A-6991 for CR ICRD-177310
        if (reconcileVOs != null && reconcileVOs.size() > 0) {
            if(despatchDetailVO != null){
                ucmMessageVO.setDespatchDetails(despatchDetailVO);
            }else{
                ucmMessageVO.setDespatchDetails(reconcileVOs.iterator().next()
                        .getMsgDsptcDetailsVOs());
            }
        }

		// LogonAttributes logonAttributes =
		// ContextUtils.getSecurityContext().getLogonAttributesVO();

		// ucmMessageVO.setCarrierCode(logonAttributes.getOwnAirlineCode());

		ucmMessageVO.setMessageStandard("AHM");
		ucmMessageVO.setMessageType("UCM");
        //Added by A-7359 for ICRD 249795 starts here
        if(reconcileVOs.iterator().next().isFlightfromFinalization()){
            ucmMessageVO.setTransactionId(MessageConfigConstants.TXN_OPR_SCREEN);
        }else{
        ucmMessageVO.setTransactionId(MessageConfigConstants.TXN_SCREEN);
        }
        //Added by A-7359 for ICRD 249795 ends here
        ucmMessageVO.setStationCode(reconcileVOs.iterator().next()
                .getAirportCode());
        ucmMessageVO.setAirportCode(reconcileVOs.iterator().next()
                .getAirportCode());
        //Added as part of ICRD-1071 by A-3767 on 11Aug11
        ucmMessageVO.setCarrierCode(reconcileVOs.iterator().next()
                .getCarrierCode());
		ucmMessageIdentifierVO = new UCMMessageIdentifierVO();
		ucmMessageIdentifierVO.setUcmMessageIdentifier("UCM");
		ucmMessageVO.setUcmMessageIdentifierVO(ucmMessageIdentifierVO);

		ucmFlightIdentificationVO = new UCMFlightIdentificationVO();
        ucmFlightIdentificationVO.setCarrierCode(reconcileVOs.iterator().next()
                .getCarrierCode());
		// Set Date Of Month
		LocalDate date = reconcileVOs.iterator().next().getFlightDate();
        if(date !=null){
		String dat = date.toDisplayDateOnlyFormat();
		log.log(Log.INFO, "%%%%%%%%date in String", dat);
        ucmFlightIdentificationVO.setDateOfMonth(Integer.valueOf(dat.substring(
                0, 2)));
        ucmFlightIdentificationVO.setFirstFlightnumber(reconcileVOs.iterator()
                .next().getFlightNumber());
        //Bug ICRD-124980 - A-5127 added
            ucmFlightIdentificationVO.setFlightDate(date);
        //Bug ICRD-124980 - A-5127 added -end
			ucmFlightIdentificationVO.setFlightDate(date);
		}
		ucmMessageVO.setUcmFlightIdentificationVO(ucmFlightIdentificationVO);
		ucmFlightIdentificationVO.setUcmAircraftRegistrationVOs(new ArrayList<UCMAircraftRegistrationVO>());
        UCMAircraftRegistrationVO uAircraftRegistrationVO=new UCMAircraftRegistrationVO();
//      uAircraftRegistrationVO.setAircraftRegistration(reconcileVOs.iterator()             .next().getTailNumber());
		ucmFlightIdentificationVO.getUcmAircraftRegistrationVOs().add(uAircraftRegistrationVO);
		ucmFlightMovementVO = new UCMFlightMovementVO();
        ucmFlightMovementVO.setAirportCode(reconcileVOs.iterator().next()
                .getAirportCode());
		ucmMessageVO.setUcmFlightMovementVO(ucmFlightMovementVO);

		ucmIncomingULDHeaderVO = new UCMIncomingULDHeaderVO();
		ucmIncomingULDHeaderVO.setUldIdentifier("IN");
		ucmMessageVO.setUcmIncomingULDHeaderVO(ucmIncomingULDHeaderVO);

		ucmOutgoingULDHeaderVO = new UCMOutgoingULDHeaderVO();
		ucmOutgoingULDHeaderVO.setUldIdentifier("OUT");
		ucmMessageVO.setUcmOutgoingULDHeaderVO(ucmOutgoingULDHeaderVO);
        //Added by A-7359 for ICRD-230378 starts here
        if((reconcileVOs.iterator().next().getSpecialInformation()!=null)){
            Collection<UCMSupplementaryInfoVO> ucmSupplementaryInfoVOs= new ArrayList<UCMSupplementaryInfoVO>();
            ucmSupplementaryHeaderInfoVO = new UCMSupplementaryHeaderInfoVO();
            ucmSupplementaryInfoVO= new UCMSupplementaryInfoVO();

            ucmSupplementaryInfoVO.setRemarks(reconcileVOs.iterator().next().getSpecialInformation());
            ucmSupplementaryInfoVOs.add(ucmSupplementaryInfoVO);

            ucmSupplementaryHeaderInfoVO.setSuppIdentifier("SI");
            ucmSupplementaryHeaderInfoVO.setUcmSupplementaryInfoVOs(ucmSupplementaryInfoVOs);
            ucmMessageVO.setUcmSupplementaryHeaderInfoVO(ucmSupplementaryHeaderInfoVO);
        }
        //Added by A-7359 for ICRD-230378 ends here

        for (ULDFlightMessageReconcileVO reconcileVO : reconcileVOs) {
            if (reconcileVO.getReconcileDetailsVOs() != null
                    && reconcileVO.getReconcileDetailsVOs().size() > 0) {
				if (("IN").equals(reconcileVO.getMessageType())) {
                    for (ULDFlightMessageReconcileDetailsVO detailsVO : reconcileVO
                            .getReconcileDetailsVOs()) {
						isIN = true;
						ucmIncomingULDDetailsVO = new UCMIncomingULDDetailsVO();
						String uldNumber = detailsVO.getUldNumber();
						int length = uldNumber.length();

						String uldType = uldNumber.substring(0, 3);

						/*
						 * String nextPart = uldNumber.substring(3, length); int
						 * count = 0; while (count < (length - 3)) { char ch =
						 * nextPart.charAt(count); if (Character.isLetter(ch)) {
						 * break; } count++; } String ownerCode =
						 * nextPart.substring(count, length - 3); String
						 * serNumber = nextPart.substring(0, count);
						 */

						String twoalphacode = uldNumber.substring(length - 2);
						String threealphacode = uldNumber.substring(length - 3);

						String ownerCode = null;
						String serNumber = null;
                        String arldtl = findOwnerCode(reconcileVO
                                .getCompanyCode(), twoalphacode, threealphacode);

                        //Null Check added as part of ICRD-21184
                        if(arldtl != null) {
						String arldtlArray[] = arldtl.split("~");
						if ("2".equals(arldtlArray[0])) {
							ownerCode = twoalphacode;
						} else {
							ownerCode = threealphacode;
						}
                            serNumber = uldNumber.substring(3, length
                                    - (Integer.valueOf(arldtlArray[0])));
						}

						log.log(Log.INFO, "%%%%%%%%%  uldType", uldType);
						log.log(Log.INFO, "%%%%%%%%%  ownerCode", ownerCode);
						log.log(Log.INFO, "%%%%%%%%%  serNumber", serNumber);
						ucmIncomingULDDetailsVO.setUldType(uldType);
						ucmIncomingULDDetailsVO.setUldSerialNumber(serNumber);
						ucmIncomingULDDetailsVO.setUldOwnerCode(ownerCode);
                        ucmMessageVO.getUcmIncomingULDDetailsVOs().add(
                                ucmIncomingULDDetailsVO);
					}

				} else {
                    for (ULDFlightMessageReconcileDetailsVO detailsVO : reconcileVO
                            .getReconcileDetailsVOs()) {

						isOUT = true;
						ucmOutgoingULDDetailsVO = new UCMOutgoingULDDetailsVO();
						String uldNumber = detailsVO.getUldNumber();
						int length = uldNumber.length();

						String uldType = uldNumber.substring(0, 3);
						/*
						 * String nextPart = uldNumber.substring(3, length); int
						 * count = 0; while (count < (length - 3)) { char ch =
						 * nextPart.charAt(count); if (Character.isLetter(ch)) {
						 * break; } count++; } String ownerCode =
						 * nextPart.substring(count, length - 3); String
						 * serNumber = nextPart.substring(0, count);
						 */

						String twoalphacode = uldNumber.substring(length - 2);
						String threealphacode = uldNumber.substring(length - 3);
						String ownerCode = null;
						String serNumber = null;
                        String arldtl = findOwnerCode(reconcileVO
                                .getCompanyCode(), twoalphacode, threealphacode);

                        //Null Check added as part of ICRD-21184
                        if(arldtl != null) {
						String arldtlArray[] = arldtl.split("~");
						if ("2".equals(arldtlArray[0])) {
							ownerCode = twoalphacode;
						} else {
							ownerCode = threealphacode;
						}

                        serNumber = uldNumber.substring(3, length
                                - (Integer.valueOf(arldtlArray[0])));
						}

						log.log(Log.INFO, "%%%%%%%%%  uldType", uldType);
						log.log(Log.INFO, "%%%%%%%%%  ownerCode", ownerCode);
						log.log(Log.INFO, "%%%%%%%%%  serNumber", serNumber);
						ucmOutgoingULDDetailsVO.setUldType(uldType);
						ucmOutgoingULDDetailsVO.setUldSerialNumber(serNumber);
						ucmOutgoingULDDetailsVO.setUldOwnerCode(ownerCode);
                        ucmOutgoingULDDetailsVO.setAirportCode(detailsVO
                                .getPou());
                        ucmOutgoingULDDetailsVO.setContentCode((detailsVO
                                .getContent()==null)?"C":detailsVO
                                .getContent());
                        ucmMessageVO.getUcmOutgoingULDDetailsVOs().add(
                                ucmOutgoingULDDetailsVO);

                      //Added by A-8445 as a part of IASCB-22297 Starts
                        if(ucmMessageVO.getFlightType() == null) {
                            flightValidationFilterVO.setFlightNumber(detailsVO.getFlightNumber());
                            flightValidationFilterVO.setFlightCarrierId(detailsVO.getFlightCarrierIdentifier());
                            flightValidationFilterVO.setCompanyCode(detailsVO.getCompanyCode());
                            if(detailsVO.getFlightSequenceNumber()>0) {
                                flightValidationFilterVO.setFlightSequenceNumber((int) detailsVO.getFlightSequenceNumber());
                            }else {
                                flightValidationFilterVO.setFlightDate(detailsVO.getFlightDate());
                            }
                            try {
                                flightValidationVOs = new FlightOperationsProxy().validateFlight(flightValidationFilterVO);
                            } catch (ProxyException e) {
                                log.log(Log.INFO, "formUCMMessageVO - ProxyException ");
                            } catch (SystemException e) {
                                log.log(Log.INFO, "formUCMMessageVO - SystemException ");
                            }
                            if (flightValidationVOs != null && flightValidationVOs.size() > 0) {
                                ucmMessageVO.setFlightType(flightValidationVOs.iterator().next().getFlightType());
                            }
                        }
                		//Added by A-8445 as a part of IASCB-22297 Ends
                    }
                }
            }
            ucmMessageVO.setPous(reconcileVO.getPous());
        }
        //Added by J-1191 as part of ICRD-323347
        if(ucmMessageVO.getPous()==null || ucmMessageVO.getPous().size()==0) {
        	ucmMessageVO.setPous(populatePOUsForUCM(reconcileVOs.iterator().next()));
        }
      //Added by J-1191 as part of ICRD-323347 ends
		if (!isIN) {
			nilIncomingVO = new UCMNilIncomingULDDetailsVO();
			nilIncomingVO.setNilCode("N");
			ucmMessageVO.setUcmNilIncomingULDDetailsVO(nilIncomingVO);
		}
		if (!isOUT) {
			nilOutgoingVO = new UCMNilOutgoingULDDetailsVO();
			nilOutgoingVO.setNilCode("N");
			ucmMessageVO.setUcmNilOutgoingULDDetailsVO(nilOutgoingVO);
		}

		log.log(Log.INFO, "#%%%%%#%%##%#%%#%#%#%# UCMMessageVO", ucmMessageVO);
		// Here both station and Transit status updation takes place .
		// Also record uld movement is also noted
		updateULDStock(reconcileVOs);
		generateUCMMessage(ucmMessageVO);
	}
    /**
     * //Added by J-1191 as part of ICRD-323347
     * @param uldFlightMessageReconcileVO
     */
    private ArrayList<String> populatePOUsForUCM(ULDFlightMessageReconcileVO uldFlightMessageReconcileVO) {
    	log.entering("ULDController", "populatePOUsForUCM");
    	ArrayList<String> stationsFromRoute = null;
    	try {
    		//Get flight validation VO
			FlightValidationVO flightValidationVO = getFlightDetails(getFlightFilterVO(uldFlightMessageReconcileVO));
			if (flightValidationVO != null) {
			//	log.log(Log.FINE, "flightValidationVO ************"+flightValidationVO.toDisplayString());
				 stationsFromRoute = new ArrayList<String>();
				if (UCMMessageVO.OUT.equals(uldFlightMessageReconcileVO.getMessageType())) {
					String[] stations = flightValidationVO.getFlightRoute()
							.split(uldFlightMessageReconcileVO.getAirportCode());
					if (stations.length > 1) {
						for (String stn:stations[1].split("-")) {
							if (stn!= null && stn.trim().length() > 0) {
								stationsFromRoute.add(stn);
							}
						}
						log.log(Log.FINE, "\n\n\nStations to be set in combo------------->", stationsFromRoute);
					}
				} else {
					stationsFromRoute.add(uldFlightMessageReconcileVO.getAirportCode());
				}
				//uldFlightMessageReconcileVO.setPous(stationsFromRoute);
			}
		} catch (SystemException e) {
			//empty catch
		}
    	return stationsFromRoute;
	}
    /**
     * //Added by J-1191 as part of ICRD-323347
     * @param logonAttributes
     * @param uldFlightMessageReconcileVO
     * @return
     * @throws SystemException 
     */
    private FlightFilterVO getFlightFilterVO(ULDFlightMessageReconcileVO uldFlightMessageReconcileVO) {
    	log.entering("ULDController", "getFlightFilterVO");
    	FlightFilterVO flightFilterVO =null;
    	//Populate filterVo if all filters present
    	if(isNotEmpty(uldFlightMessageReconcileVO.getCompanyCode())
    			&& isNotEmpty(uldFlightMessageReconcileVO.getFlightNumber())
    			&& isNotEmpty(uldFlightMessageReconcileVO.getAirportCode())
    			&& isNotEmpty(uldFlightMessageReconcileVO.getMessageType())
    			&& uldFlightMessageReconcileVO.getFlightCarrierIdentifier()>0
    			&& uldFlightMessageReconcileVO.getFlightSequenceNumber()>0) {
    		flightFilterVO = new FlightFilterVO();
    		flightFilterVO.setCompanyCode(uldFlightMessageReconcileVO.getCompanyCode());
    		flightFilterVO.setStation(uldFlightMessageReconcileVO.getAirportCode());
    		flightFilterVO.setFlightNumber(uldFlightMessageReconcileVO.getFlightNumber());
    		flightFilterVO.setFlightCarrierId(uldFlightMessageReconcileVO.getFlightCarrierIdentifier());
    		if ("OUT".equals(uldFlightMessageReconcileVO.getMessageType())) {
    			flightFilterVO.setDirection(FlightFilterVO.OUTBOUND);
    		} else {
    			flightFilterVO.setDirection(FlightFilterVO.INBOUND);
    		}
    		flightFilterVO.setFlightSequenceNumber(uldFlightMessageReconcileVO.getFlightSequenceNumber());
    	}
    	return flightFilterVO;
    }
    /**
	 * //Added by J-1191 as part of ICRD-323347
	 * @param arg
	 * @return
	 */
	private boolean isNotEmpty(String arg) {
		return (arg!=null && arg.trim().length()>0);
	}
	/**
	 * //Added by J-1191 as part of ICRD-323347
	 * @param flightFilterVO
	 * @return
	 * @throws SystemException
	 */
	private FlightValidationVO getFlightDetails(FlightFilterVO flightFilterVO) throws SystemException {
		log.entering("ULDController", "getFlightDetails");
		Collection<FlightValidationVO> flightValidationVOs = null;
		//Flight validatio to be called if filter present
		if (flightFilterVO != null) {			
			flightValidationVOs = fetchFlightDetails(flightFilterVO);
			if (flightValidationVOs != null && flightValidationVOs.size() > 0) {
				return flightValidationVOs.iterator().next();
			}
		}
		return null;
	}
	/**
	 *
	 * @param reconcileVOs
	 * @throws SystemException
	 */
    private void updateULDStock(
            Collection<ULDFlightMessageReconcileVO> reconcileVOs)
            throws SystemException {
		log.entering("ULDController", "updateULDStock");
        log.log(Log.INFO, "#%%%%%#%%##%#%%#GOING TO UPDATE with reconcileVOs",
                reconcileVOs);
		for (ULDFlightMessageReconcileVO msgReconcileVO : reconcileVOs) {
			if ("IN".equalsIgnoreCase(msgReconcileVO.getMessageType())) {
				HashMap<String, Collection<String>> map = new HashMap<String, Collection<String>>();
				Collection<String> ulds = null;
				String station = null;
                List<String> pous=null;
                int index=0;
				if (msgReconcileVO.getReconcileDetailsVOs() != null
						&& msgReconcileVO.getReconcileDetailsVOs().size() > 0) {
                    for (ULDFlightMessageReconcileDetailsVO detailsVO : msgReconcileVO
                            .getReconcileDetailsVOs()) {
                        ULD uldMessage = null;
                        boolean isFound = true;
                        try {
                            uldMessage = ULD.find(detailsVO.getCompanyCode(),
                                    detailsVO.getUldNumber());
						} catch (FinderException finderException) {
							isFound = false;
						}
						if (isFound) {
							uldMessage.setTransitStatus("N");
							uldMessage.setFlightInfo(null);
							station = uldMessage.getCurrentStation();
							//No need to mark movement as part of flight close here, it is getting marked as part of updateULDForOperation
							//Added as part of ICRD-285071
							if(!FlightDetailsVO.CLOSURE.equals(msgReconcileVO.getActionCode())){ 
                                boolean isDummyMovementExists=ULD.isDummyULDMovementPresent(detailsVO.getCompanyCode(),detailsVO
                                        .getFlightCarrierIdentifier(),detailsVO
                                        .getFlightNumber(),detailsVO
                                        .getFlightDate(),detailsVO.getUldNumber(),station,detailsVO.getPou());
                            if (!detailsVO.getPou().equals(station)&&!isDummyMovementExists) {
                                if(pous==null){
                                    pous=new ArrayList<String>();
								}
								pous.add(detailsVO.getPou());
								if (!map.containsKey(station)) {
									ulds = new ArrayList<String>();
									ulds.add(detailsVO.getUldNumber());
									map.put(station, ulds);
								} else {
                                    map.get(station).add(
                                            detailsVO.getUldNumber());
								}
							}
						}
					}
				}
				}
				log.log(Log.INFO, "%%%%%%%%%%%%%%%%%%%%%%   map ", map);
				// do Dummy movement
				if (!map.isEmpty()) {
					for (String stationCode : map.keySet()) {

						Collection<ULDMovementVO> uldMovementVOs = new ArrayList<ULDMovementVO>();
						ULDMovementVO movementVO = new ULDMovementVO();
                        movementVO.setCarrierCode(msgReconcileVO
                                .getCarrierCode());
                        movementVO.setCompanyCode(msgReconcileVO
                                .getCompanyCode());
						// movementVO.setContent(ucmMessageVO.get.getContent());
                        movementVO.setCurrentStation(msgReconcileVO
                                .getAirportCode());
                        movementVO.setDummyMovement(false);
                        movementVO.setFlightCarrierIdentifier(msgReconcileVO
                                .getFlightCarrierIdentifier());
                        movementVO
                                .setFlightDate(msgReconcileVO.getFlightDate());
						// movementVO.setFlightDateString()
                        movementVO.setFlightNumber(msgReconcileVO
                                .getFlightNumber());
						// movementVO.setLastUpdatedTime(flightDetailsVO.getLastUpdatedTime());
                        LogonAttributes logonAttributes = ContextUtils
                                .getSecurityContext().getLogonAttributesVO();

                        movementVO.setLastUpdatedUser(logonAttributes
                                .getUserId());
                        movementVO.setLastUpdatedTime(new LocalDate(movementVO
                                .getCurrentStation(), Location.ARP, true));
						// movementVO.setMovementSequence)
						movementVO.setPointOfLading(stationCode);
                        if(pous!=null&&(pous.get(index)!=null&&pous.get(index).trim().length()>0)){
							movementVO.setPointOfUnLading(pous.get(index));
                        }else{
							movementVO.setPointOfUnLading(msgReconcileVO.getAirportCode());
						}
						
						// movementVO.setRemark(flightDetailsVO.getRemark());
						index++;
						movementVO.setUpdateCurrentStation(true);
						uldMovementVOs.add(movementVO);
						// movementVO.setUldNumber()
						try {
                            saveULDMovement(map.get(stationCode),
                                    uldMovementVOs);
                        } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                            log
                                    .log(Log.INFO,
                                            "%%%%%%%%%%%%%  wil never throw this exception");
						}
					}
				}
			} else {
				if ("OUT".equalsIgnoreCase(msgReconcileVO.getMessageType())) {
					if (msgReconcileVO.getReconcileDetailsVOs() != null
							&& msgReconcileVO.getReconcileDetailsVOs().size() > 0) {
                        for (ULDFlightMessageReconcileDetailsVO detailsVO : msgReconcileVO
                                .getReconcileDetailsVOs()) {
							StringBuilder flightInfo;
							ULD uldMessage = null;
							boolean isFound = true;
							try {
                                uldMessage = ULD.find(detailsVO
                                        .getCompanyCode(), detailsVO
                                        .getUldNumber());
                            } catch (FinderException finderException) {
                                isFound = false;
                            }
                            if (isFound){
								uldMessage.setTransitStatus("Y");
                                flightInfo = new StringBuilder(
                                        msgReconcileVO.getCarrierCode());
                                flightInfo
                                        .append(
                                                msgReconcileVO
                                                        .getFlightNumber())
                                        .append(",")
                                        .append(
                                                msgReconcileVO
                                                        .getFlightDate()
                                                        .toDisplayDateOnlyFormat())
                                                        .append(",")
														.append(detailsVO.getPou());
								uldMessage.setFlightInfo(flightInfo.toString());
                                log.log(Log.INFO,
                                        "===========> Updated the flight Info",
                                        flightInfo);
								}
						}
					}
				}
			}
		}
	}

	/**
	 *
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public Collection<ULDVO> findUldDetailsForSCM(SCMMessageFilterVO filterVO)
            throws SystemException {
		log.entering("ULDController", "getUldDetailsForSCM");
		return ULD.findUldDetailsForSCM(filterVO);
	}
	
	/**
	 *
	 * @param reconcileVOs
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException 
	 * @throws ULDDoesNotExistsException 
	 */
    public String saveSCMReconcialtionDetails(
            Collection<ULDSCMReconcileVO> reconcileVOs) throws SystemException,
            MessageConfigException, ULDDoesNotExistsException {
		log.entering("ULDController", "saveSCMReconcialtionDetails");
		ULDSCMReconcileVO reconcileVOFromClient = null;
        String returnSeqnum=null;
        String toBeRemovedDraftSeqnum=null;
		if (reconcileVOs != null && reconcileVOs.size() > 0) {
            
            Iterator reconcileVOsIterator = reconcileVOs.iterator();

            while (reconcileVOsIterator.hasNext()) {
            	                
             reconcileVOFromClient = (ULDSCMReconcileVO) reconcileVOsIterator.next();

         LogonAttributes logonAttributes =
             ContextUtils.getSecurityContext().getLogonAttributesVO();
         reconcileVOFromClient.setLastUpdatedUser(logonAttributes.getUserId());//changed by A-5953 for ICRD-104959
         reconcileVOFromClient.setStockCheckDate( new LocalDate(
                    LocalDate.NO_STATION, Location.NONE, true));
        if (reconcileVOFromClient != null) {
            String sequenceNum=ULD.findSCMSequenceNum(logonAttributes.getCompanyCode(),
                    reconcileVOFromClient.getAirportCode(),reconcileVOFromClient.getAirlineIdentifier()+"");
            returnSeqnum=sequenceNum;
            if(reconcileVOFromClient.isCustomFilterPresent()){
            	//done to prevent taking seqnum if custom filter is used
            	toBeRemovedDraftSeqnum=sequenceNum;
            	sequenceNum=null;
            }
		reconcileVOFromClient.setSequenceNumber(sequenceNum);
			reconcileVOFromClient.setMessageSendFlag("D");
			if (reconcileVOFromClient.getSequenceNumber() != null) {
				for (ULDSCMReconcileDetailsVO uldSCMReconcileDetailsVO : reconcileVOFromClient
						.getReconcileDetailsVOs()) {
					uldSCMReconcileDetailsVO.setErrorCode(null);
					try {
                        ULD.find(reconcileVOFromClient.getCompanyCode(),
                                uldSCMReconcileDetailsVO.getUldNumber());
					} catch (FinderException e1) {
						uldSCMReconcileDetailsVO.setUldStatus("N");
					}
					try {
						uldSCMReconcileDetailsVO.setSequenceNumber(sequenceNum);
						ULDSCMReconcileDetails.find(uldSCMReconcileDetailsVO);
                        if (!"D".equals(uldSCMReconcileDetailsVO
                                .getOperationFlag())) {
							uldSCMReconcileDetailsVO.setOperationFlag("U");
						}
					} catch (SystemException e) {
						// if details row not inserted
                        if ("D".equals(uldSCMReconcileDetailsVO
                                .getOperationFlag())) {
							uldSCMReconcileDetailsVO.setOperationFlag("NOOP");
						}
					}
					uldSCMReconcileDetailsVO.setSequenceNumber(sequenceNum);
				}
				if (reconcileVOFromClient.getReconcileDetailsVOs() != null
                        && reconcileVOFromClient.getReconcileDetailsVOs()
                                .size() > 0) {
                    ULDSCMReconcile uldscmReconcile=null;

                    try {
                        uldscmReconcile=ULDSCMReconcile.find(reconcileVOFromClient);
						uldscmReconcile.update(reconcileVOFromClient);
					} catch (FinderException e) {
					}
					
				}
			} else {
				if (reconcileVOFromClient.getReconcileDetailsVOs() != null
                        && reconcileVOFromClient.getReconcileDetailsVOs()
                                .size() > 0) {
					
						for (ULDSCMReconcileDetailsVO uldSCMReconcileDetailsVO : reconcileVOFromClient
								.getReconcileDetailsVOs()) {
								try {
                                    ULD.find(
                                            reconcileVOFromClient.getCompanyCode(),
                                            uldSCMReconcileDetailsVO.getUldNumber());
								} catch (FinderException e) {
									uldSCMReconcileDetailsVO.setUldStatus("N");
								} catch (SystemException e1) {
								uldSCMReconcileDetailsVO.setUldStatus("N");
							}
							uldSCMReconcileDetailsVO.setSequenceNumber(sequenceNum);
						}
						

					}
					new ULDSCMReconcile(reconcileVOFromClient);
                    returnSeqnum= reconcileVOFromClient.getSequenceNumber();
                    if(reconcileVOFromClient.isCustomFilterPresent() ){
                    	// need to remove the ULDs from draft
                        for (ULDSCMReconcileDetailsVO uldSCMReconcileDetailsVO : reconcileVOFromClient
                                .getReconcileDetailsVOs()) { 
                            try {
                            	reconcileVOFromClient.setSequenceNumber(toBeRemovedDraftSeqnum); 
                                uldSCMReconcileDetailsVO.setSequenceNumber(toBeRemovedDraftSeqnum);
                                ULDSCMReconcileDetails.find(uldSCMReconcileDetailsVO);
                                    uldSCMReconcileDetailsVO.setOperationFlag("D");
                            } catch (SystemException e) {
                                    uldSCMReconcileDetailsVO.setOperationFlag("NOOP");
                            }
                        }
                        if (reconcileVOFromClient.getReconcileDetailsVOs() != null
                                && reconcileVOFromClient.getReconcileDetailsVOs()
                                        .size() > 0) {
                            ULDSCMReconcile uldscmReconcile=null;

                            try {
                                uldscmReconcile=ULDSCMReconcile.find(reconcileVOFromClient);
                                uldscmReconcile.update(reconcileVOFromClient);
                            } catch (FinderException e) {
                            }

                        } 
                    
                    }
                }
        }
        }
     }
        if (reconcileVOs != null && reconcileVOs.size() > 0) {
            return  returnSeqnum; 
        }else{
			return null;
		}
	}
	/**
	 *
	 * @param reconcileVOFromClient
	 * @param reconcileDetailsVO
	 * @throws SystemException
	 * @throws MessageConfigException 
	 * @throws ULDDoesNotExistsException 
	 */
    public boolean updateSightedDiscrepancy(ULDSCMReconcileVO reconcileVOFromClient,ULDSCMReconcileDetailsVO reconcileDetailsVO,ULDListFilterVO uldListFilterVO) throws SystemException, MessageConfigException, ULDDoesNotExistsException{
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();
            boolean isUldPresentinStock=true;
                    ULD uld = null;
                    try {
                        uld = ULD.find(reconcileDetailsVO.getCompanyCode(),
                                reconcileDetailsVO.getUldNumber());
                    } catch (FinderException finderException) {
                        log
                                .log(
                                        Log.INFO,
                                        "%%%%ERR2%% before entering the if logonAttributes.getOwnAirlineNumericCode()%%%",
                                        logonAttributes
                                                .getOwnAirlineCode());
                        // Changed by Nishanth ,ve doubt
                        if (reconcileDetailsVO.getUldNumber().endsWith(
                                logonAttributes.getOwnAirlineCode())) {
                            log.log(Log.INFO,
                                    "%%%%ERR2%%Creating a new ULD%%%",
                                    reconcileDetailsVO.getUldNumber());
                            log
                                    .log(
                                            Log.INFO,
                                            "%%%%ERR2%%after entering the if logonAttributes.getOwnAirlineNumericCode()%%%",
                                            logonAttributes
                                                            .getOwnAirlineNumericCode());
                            // Creation of ULD
                            ULDVO uldVO = new ULDVO();
                            String uldType = reconcileDetailsVO.getUldNumber()
                                    .substring(0, 3);
                            
                            ULDTypeVO typeVo = null;
                            if(reconcileDetailsVO.getUldNumber() != null && reconcileDetailsVO.getUldNumber().length() > 0) {
                            	typeVo = findULDTypeStructuralDetails(
                                        reconcileDetailsVO.getCompanyCode(),
                                        reconcileDetailsVO.getUldNumber());
                            }
                            else {
                            	typeVo = findULDTypeStructuralDetails(
                                        reconcileDetailsVO.getCompanyCode(),
                                        uldType);
                            }
                            
                            uldVO.setCompanyCode(reconcileVOFromClient
                                    .getCompanyCode());
                            uldVO.setUldNumber(reconcileDetailsVO
                                    .getUldNumber());
                            uldVO.setUldType(uldType);
                            uldVO.setUldGroupCode(typeVo.getUldGroupCode());
                            uldVO
                                    .setOperationalAirlineIdentifier(reconcileVOFromClient
                                            .getAirlineIdentifier());
                            // here curent owner code is used only to get
                            // OwnerId at this point

                            int len = reconcileDetailsVO.getUldNumber()
                                    .length();
                            String twoalphacode = reconcileDetailsVO
                                    .getUldNumber().substring(len - 2);
                            String threealphacode = reconcileDetailsVO
                                    .getUldNumber().substring(len - 3);
                            String arldtl = findOwnerCode(reconcileDetailsVO
                                    .getCompanyCode(), twoalphacode,
                                    threealphacode);
                            //Null Check added as part of ICRD-21184
                            if(arldtl != null) {
                            String airlineDetailArr[] = arldtl.split("~");
                            int ownerAirlineId = Integer
                                    .valueOf(airlineDetailArr[1]);

                            uldVO.setOwnerAirlineIdentifier(ownerAirlineId);
                            }

                            uldVO.setLastUpdateTime(new LocalDate(
                                    reconcileVOFromClient.getAirportCode(),
                                    Location.ARP, true));
                            uldVO.setBorrowReferenceNumber(0);
                            uldVO
                                    .setLastUpdateUser(logonAttributes
                                            .getUserId());
							/*uldVO.setBaseHeight(typeVo
                                    .getBaseDimHeight());
							uldVO.setBaseLength(typeVo
									.getBaseDimLength());
							uldVO.setBaseWidth(typeVo.getBaseDimWidth());
							uldVO.setDisplayDimensionUnit(typeVo
								.getBaseDimUnit());*/	
							uldVO.setStructuralWeight(typeVo
									.getStructuralWtLmt());
							//uldVO.setStructuralWeightUnit(typeVo
							//		.getStructuralWtLmtUnit());
                            uldVO.setDisplayIataReplacementCost(typeVo
                                    .getIATARepCost());
                            uldVO.setDisplayIataReplacementCostUnit(typeVo
                                    .getIATARepCostUnit());
                            uldVO.setCurrentStation(reconcileVOFromClient
                                    .getAirportCode());
                            uldVO.setOwnerStation(reconcileVOFromClient
                                    .getAirportCode());
                            uldVO.setDamageStatus(ULDVO.DAMAGED_STATUS);
                            uldVO.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
                            uldVO
                                    .setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
							uldVO.setTareWeight(typeVo.getTareWt());
							//uldVO.setDisplayTareWeightUnit(typeVo
							//		.getTareWtUnit());
                            uldVO.setBaseHeight(typeVo.getBaseDimHeight());
                            uldVO.setBaseLength(typeVo.getBaseDimLength());
                            uldVO.setBaseWidth(typeVo.getBaseDimWidth());
                            uldVO.setTransitStatus(NOT_INTRANSIT);
                            uldVO.setUldNature(ULDNATURE_GEN);
                            uldVO.setScmFlag(SCM_RECEIVED);
                            uldVO.setScmDate(reconcileVOFromClient
                                    .getStockCheckDate());
                            /*
                             * Added by a-3278 for CR QF1449 on 02Mar10 A new
                             * field LSTSCMDAT in the ULDMST table is added to
                             * keep track of the last SCM date for a ULD,
                             * populated every time an SCM strikes the system
                             * with the ULD
                             */
                            uldVO.setLastSCMDate(reconcileVOFromClient
                                    .getStockCheckDate());
                            // QF1449 ends
                            uldVO
                                    .setOperationalFlag(ULDVO.OPERATION_FLAG_INSERT);
                            if (reconcileDetailsVO.getFacilityType() != null
                                    && reconcileDetailsVO.getLocation() != null) {
                                uldVO.setLocation(reconcileDetailsVO
                                        .getLocation());
                                uldVO.setFacilityType(reconcileDetailsVO
                                        .getFacilityType());
                            } else {
                                ULDAirportLocationVO uldAirportLocationVO = ULD
                                        .findCurrentLocation(
                                                reconcileVOFromClient
                                                        .getCompanyCode(),
                                                reconcileVOFromClient
                                                        .getAirportCode(),
                                                CONTENT_EMPTY);
                                log.log(Log.INFO,
                                        "%%%%ULDAirportLocationVO%%%",
                                        uldAirportLocationVO);
                                if (uldAirportLocationVO != null) {
                                    uldVO.setLocation(uldAirportLocationVO
                                            .getFacilityCode());
                                    uldVO.setFacilityType(uldAirportLocationVO
                                            .getFacilityType());
                                } else {
                                    uldVO.setFacilityType(ULDVO.NO_LOCATION);
                                    uldVO.setLocation(ULDVO.NO_LOCATION);
                                }
                            }
                            try {
                                Collection<String> parCodes=new ArrayList<String>();
                                parCodes.add("uld.defaults.cancreateuld");
                                String parameter=null;
                                try {
                                    Map<String,String> parameterVal=new SharedDefaultsProxy().findSystemParameterByCodes(parCodes);
                                    if(parameterVal!=null) {
                                        parameter=parameterVal.get("uld.defaults.cancreateuld");
                                    }
                                } catch (ProxyException e) {
                                    // To be reviewed Auto-generated catch block
//printStackTraccee()();
                                }
                                if(ULDVO.FLAG_YES.equals(parameter)){
                                    new ULD(uldVO);
                                } else {
                                    isUldPresentinStock =false;
                                    //throw new ULDDoesNotExistsException(ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS, new Object[]{uldVO.getUldNumber()});
                                }
                            } catch (CurrencyConversionException currencyConversionException) {
                            } catch (DimensionConversionException dimensionConversionException) {
                            }
                        } else {
                            log.log(Log.INFO, "%%%%ERR2%%Borrow of ULD%%%",
                                    reconcileDetailsVO.getUldNumber());
                            ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
                            transactionDetailsVO
                                    .setCompanyCode(reconcileVOFromClient
                                            .getCompanyCode());
                            transactionDetailsVO
                                    .setDamageStatus(ULDVO.DAMAGED_STATUS);
                            int len = reconcileDetailsVO.getUldNumber()
                                    .length();
                            String twoalphacode = reconcileDetailsVO
                                    .getUldNumber().substring(len - 2);
                            String threealphacode = reconcileDetailsVO
                                    .getUldNumber().substring(len - 3);
                            String arldtl = findOwnerCode(reconcileDetailsVO
                                    .getCompanyCode(), twoalphacode,
                                    threealphacode);

                            //Null Check added as part of ICRD-21184
                            int ownerAirlineId = 0;
                            // Changed by Nishanth ,ve doubt
                            String oprAirlineCode = null;
                            if(arldtl != null) {
                                String airlineDetailArr[] = arldtl.split("~");
                                ownerAirlineId = Integer
                                        .valueOf(airlineDetailArr[1]);
                            if (("2").equals(airlineDetailArr[0])) {
                                transactionDetailsVO
                                        .setFromPartyCode(twoalphacode);
                                // Changed by Nishanth ,ve doubt
                                oprAirlineCode = twoalphacode;
                            } else {
                                transactionDetailsVO
                                        .setFromPartyCode(threealphacode);
                                // Changed by Nishanth ,ve doubt
                                oprAirlineCode = threealphacode;
                                }
                            }
                            transactionDetailsVO
                                    .setFromPartyIdentifier(ownerAirlineId);
                            transactionDetailsVO
                                    .setLastUpdateUser(logonAttributes
                                            .getUserId());
                            transactionDetailsVO
                                    .setOperationalAirlineIdentifier(reconcileVOFromClient
                                            .getAirlineIdentifier());
                            transactionDetailsVO
                                    .setCurrOwnerCode(ownerAirlineId);
                            transactionDetailsVO
                                    .setPartyType(PARTYTYPE_AIRLINE);
                            transactionDetailsVO.setUldNature("GEN");
                            transactionDetailsVO.setUldConditionCode("SER");
                            // Changed by Nishanth ,ve doubt
                            String crn = null;
                            String ctrlRcptNo = findCRNForULDTransaction(
                                    logonAttributes.getCompanyCode(),
                                    oprAirlineCode);
                            //Changed for ICRD-6983 by A-4803 on 21Sep11
                            crn = new StringBuilder().append(
                                    ctrlRcptNo.substring(0, 4)).append("0")
                                    .append(ctrlRcptNo.substring(4, 11))
                                    .toString();
                            transactionDetailsVO.setControlReceiptNumber(crn);
                            // To be reviewed.QF should be passed from client
                            // Changed by Nishanth ,ve doubt
                            transactionDetailsVO.setToPartyCode(uldListFilterVO
                                    .getAirlineCode());
                            transactionDetailsVO
                                    .setToPartyIdentifier(reconcileVOFromClient
                                            .getAirlineIdentifier());
                            transactionDetailsVO
                                    .setUldNumber(reconcileDetailsVO
                                            .getUldNumber());
                            transactionDetailsVO
                                    .setTransactionStationCode(reconcileVOFromClient
                                            .getAirportCode());
                            transactionDetailsVO
                                    .setTxStationCode(reconcileVOFromClient
                                            .getAirportCode());
                            //Modified by A-3415 for ICRD-114538
                            transactionDetailsVO
                                    .setTransactionType(LOANED_TRANSACTION);
                            transactionDetailsVO.setTransactionStatus("T");
                            transactionDetailsVO
                                    .setTransactionRemark(reconcileVOFromClient
                                            .getRemarks());
                            transactionDetailsVO.setTransactionNature("T");
                            transactionDetailsVO.setUldType(reconcileDetailsVO
                                    .getUldNumber().substring(0, 3));
                            transactionDetailsVO
                                    .setTransactionDate(reconcileVOFromClient
                                            .getStockCheckDate());
                            transactionDetailsVO
                                    .setFacilityType(reconcileDetailsVO
                                            .getFacilityType());
                            transactionDetailsVO.setLocation(reconcileDetailsVO
                                    .getLocation());

							//Updating from Party for ICRD-349648
							transactionDetailsVO = populateFromParty(transactionDetailsVO);

                            //Modified by A-3415 for ICRD-114538
							TransactionVO transactionVO = new TransactionVO();
							ArrayList<ULDTransactionDetailsVO> transactionDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
							transactionDetailsVOs.add(transactionDetailsVO);
							transactionVO.setCompanyCode(logonAttributes.getCompanyCode());
							transactionVO.setUldTransactionDetailsVOs(transactionDetailsVOs);
							createULDLoan(transactionVO);
						}
					}
					if (uld != null) {
						// Only if current station is different movement need to
						// be marked else found discrepancy will be saved
                        if (!uld.getCurrentStation().equalsIgnoreCase(
                                reconcileVOFromClient.getAirportCode())) {
                            log.log(Log.INFO,
                                    "%%%%ERR2%%Marking the Movement%%%",
                                    reconcileDetailsVO
                                                            .getUldNumber());
							// Doing ULD Movement if uld not in airport
							Collection<String> uldnos = new ArrayList<String>();
							uldnos.add(reconcileDetailsVO.getUldNumber());
							Collection<ULDMovementVO> movementVOs = null;
							ULDMovementVO movVO = new ULDMovementVO();
                            movVO.setCompanyCode(reconcileVOFromClient
                                    .getCompanyCode());
                            movVO.setUldNumber(reconcileDetailsVO
                                    .getUldNumber());
                            movVO.setPointOfLading(uld.getCurrentStation());
                            movVO.setPointOfUnLading(reconcileVOFromClient
                                    .getAirportCode());
                            movVO.setCurrentStation(reconcileVOFromClient
                                    .getAirportCode());
							movVO.setDummyMovement(true);
							movVO.setUpdateCurrentStation(true);
							movVO.setFacilityType(reconcileDetailsVO.getFacilityType());
							movVO.setLocation(reconcileDetailsVO.getLocation());
							movVO.setPouLocation(reconcileDetailsVO.getLocation());
                            movVO.setLastUpdatedUser(logonAttributes
                                    .getUserId());
							if (reconcileVOFromClient.getAirportCode() != null
                                    && reconcileVOFromClient.getAirportCode()
                                            .trim().length() > 0) {
                                movVO.setLastUpdatedTime(new LocalDate(
                                        reconcileVOFromClient.getAirportCode(),
                                        Location.ARP, true));
                            } else {
                                movVO.setLastUpdatedTime(new LocalDate(
                                        reconcileVOFromClient.getAirportCode(),
                                        Location.ARP, true));
                            }
                            movVO.setScmFlag(SCM_RECEIVED);
                            movVO.setScmDate(reconcileVOFromClient
                                    .getStockCheckDate());

                            //Added by A-5265 for ICRD-47486 starts
                            LocalDate remarksDate = new LocalDate(
                                    reconcileVOFromClient.getAirportCode(),
                                    Location.ARP, true);
                            movVO.setRemark(SCM_MOVEMENT_REMARKS
                                    + remarksDate.toDisplayFormat());
                            //Added by A-5265 for ICRD-47486 ends

                            movementVOs = new ArrayList<ULDMovementVO>();
                            movementVOs.add(movVO);
                            try {
                                saveULDMovement(uldnos, movementVOs);
                            } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                                // ULDdoes not exists
                            }
                            if ("L".equals(uld.getOverallStatus())) {
                                uld.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
                            }
                        } else {
                            ULDDiscrepancyVO uldDiscrepancyVO = new ULDDiscrepancyVO();
                            uldDiscrepancyVO
                                    .setCompanyCode(reconcileVOFromClient
                                            .getCompanyCode());
                            uldDiscrepancyVO.setUldNumber(reconcileDetailsVO
                                    .getUldNumber());
                            uldDiscrepancyVO
                                    .setDiscrepencyDate(reconcileVOFromClient
                                            .getStockCheckDate());
                            uldDiscrepancyVO
                                    .setOperationFlag(ULDDiscrepancyVO.OPERATION_FLAG_INSERT);
                            uldDiscrepancyVO
                                    .setReportingStation(reconcileVOFromClient
                                            .getAirportCode());
                            uldDiscrepancyVO
                                    .setDiscrepencyCode(ULD_FOUND_DISCREPANCY);
                            uldDiscrepancyVO
                                    .setUldStatus(ULD_FOUND_DISCREPANCY);
                            uldDiscrepancyVO.setCloseStatus(DIS_OPEN);
                            uldDiscrepancyVO.setLastUpdatedTime(new LocalDate(
                                    logonAttributes.getAirportCode(),
                                    Location.ARP, true));
                            uldDiscrepancyVO.setLastUpdatedUser(logonAttributes
                                    .getUserId());
                            if (reconcileDetailsVO.getLocation() != null
                                    && reconcileDetailsVO.getFacilityType() != null) {
                                uldDiscrepancyVO
                                        .setFacilityType(reconcileDetailsVO
                                                .getFacilityType());
                                uldDiscrepancyVO.setLocation(reconcileDetailsVO
                                        .getLocation());
                            } else {
                                ULDAirportLocationVO uldAirportLocationVO = ULD
                                        .findCurrentLocation(reconcileDetailsVO
                                                .getCompanyCode(),
                                                reconcileDetailsVO
                                                        .getAirportCode(),
                                                CONTENT_EMPTY);
                                if (uldAirportLocationVO != null) {
                                    uldDiscrepancyVO
                                            .setFacilityType(uldAirportLocationVO
                                                    .getFacilityType());
                                    uldDiscrepancyVO
                                            .setLocation(uldAirportLocationVO
                                                    .getFacilityCode());
                                } else {
                                    uldDiscrepancyVO
                                            .setFacilityType(ULDVO.NO_LOCATION);
                                    uldDiscrepancyVO
                                            .setLocation(ULDVO.NO_LOCATION);
								}
							}
							try {
								updateULDStockStatusForHHT(uldDiscrepancyVO);
							} catch (DimensionConversionException e) {
							} catch (ULDDefaultsBusinessException e) {
							} catch (CurrencyConversionException e) {
							}
						}
					}
					// added by a-3045 starts, otherwise the reconcile buttons
					// will be shown in SCM error log screens.
					reconcileDetailsVO.setErrorCode(null);
					// added by a-3045 ends.
					return isUldPresentinStock;
			
		}
	
	/**
	 *
	 * @param reconcileVOFromClient
	 * @param reconcileDetailsVO
	 * @throws SystemException
	 * @throws MessageConfigException 
	 */
	
    public void updateMissingDiscrepancy(ULDSCMReconcileVO reconcileVOFromClient,ULDSCMReconcileDetailsVO reconcileDetailsVO) throws SystemException, MessageConfigException{
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();
		ULDDiscrepancyVO uldDiscrepancyVO = new ULDDiscrepancyVO();
        uldDiscrepancyVO.setCompanyCode(reconcileVOFromClient
                .getCompanyCode());
        uldDiscrepancyVO.setUldNumber(reconcileDetailsVO
                .getUldNumber());
        uldDiscrepancyVO
                .setDiscrepencyDate(reconcileVOFromClient
                        .getStockCheckDate());
        uldDiscrepancyVO
                .setOperationFlag(ULDDiscrepancyVO.OPERATION_FLAG_INSERT);
        uldDiscrepancyVO
                .setReportingStation(reconcileVOFromClient
                        .getAirportCode());
        uldDiscrepancyVO
                .setDiscrepencyCode(ULD_MISSING_DISCREPANCY);
        uldDiscrepancyVO.setUldStatus(ULD_MISSING_DISCREPANCY);
        uldDiscrepancyVO.setCloseStatus(DIS_OPEN);
        uldDiscrepancyVO.setLastUpdatedTime(new LocalDate(
                logonAttributes.getAirportCode(), Location.ARP,
                true));
        uldDiscrepancyVO.setLastUpdatedUser(logonAttributes
                .getUserId());
        if (reconcileDetailsVO.getLocation() != null
                && reconcileDetailsVO.getFacilityType() != null) {
            uldDiscrepancyVO.setFacilityType(reconcileDetailsVO
                    .getFacilityType());
            uldDiscrepancyVO.setLocation(reconcileDetailsVO
                    .getLocation());
        } else {
            ULDAirportLocationVO uldAirportLocationVO = ULD
                    .findCurrentLocation(
                            reconcileDetailsVO.getCompanyCode(),
                            reconcileDetailsVO.getAirportCode(),
                            CONTENT_EMPTY);
            if (uldAirportLocationVO != null) {
                uldDiscrepancyVO
                        .setFacilityType(uldAirportLocationVO
                                .getFacilityType());
                uldDiscrepancyVO
                        .setLocation(uldAirportLocationVO
                                .getFacilityCode());
            } else {
				//Modified by A-7359 for ICRD-260693 starts here
				if (reconcileDetailsVO.getFacilityType() != null) {
					uldDiscrepancyVO.setFacilityType(reconcileDetailsVO
							.getFacilityType());
				} else {
					uldDiscrepancyVO.setFacilityType(ULDVO.NO_LOCATION);
				}
				if (reconcileDetailsVO.getLocation() != null) {
					uldDiscrepancyVO.setLocation(reconcileDetailsVO
							.getLocation());
				} else {
                uldDiscrepancyVO.setLocation(ULDVO.NO_LOCATION);
				}
				//Modified by A-7359 for ICRD-260693 ends here
			}
		}
		try {
			updateULDStockStatusForHHT(uldDiscrepancyVO);
		} catch (DimensionConversionException e) {
		} catch (ULDDefaultsBusinessException e) {
		} catch (CurrencyConversionException e) {
		}
		// added by a-3045 starts, otherwise the reconcile
		// buttons will be shown in SCM error log screens.
		reconcileDetailsVO.setErrorCode(null);
		// added by a-3045 ends
	}


	/**
	 *
	 * @param reconcileVOs
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException 
	 * @throws ULDDoesNotExistsException 
	 */
	// this metho signature changed by A-2408 for SCM CR onj 26/11/07
	// Now it retruns a hashmap...with sequence no as the key and collection of
	// encoded msg vos as value..
	// if the encoded vos are not present ..ie in case of error...v sent the seq
	// no alone with a empty coll of msg vos
	// for generating message a new method is called....which will retrun the
	// encoded Message Vo.
    public HashMap<String, Collection<MessageVO>> saveSCMMessage(
            Collection<ULDSCMReconcileVO> reconcileVOs,
            ULDListFilterVO uldListFilterVO, Collection<MessageDespatchDetailsVO> additionaldespatchDetailsVOs) throws SystemException,
            MessageConfigException, ULDDoesNotExistsException {

		// Here ReconcileDetailsVO from client should include AirlineId ,
		// AirportCode , Company Code,uldnumber
        Collection<ULDSCMReconcileDetailsVO> completeReconcileDetailsVOs=new ArrayList<ULDSCMReconcileDetailsVO>();
    	
    	Collection<String> systemParameterCodes = new ArrayList<String>();
		Map parameterMap = new HashMap();
		 boolean includeDiscrepancyCheck=false;
		systemParameterCodes.add(SYS_PARAM_DISPLAYDISONSTOCKCHECK);
		try {
			parameterMap = new SharedDefaultsProxy()
					.findSystemParameterByCodes(systemParameterCodes);
		} catch (ProxyException proxyException) {
			log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
		}
		 if(parameterMap!=null&&parameterMap.get(SYS_PARAM_DISPLAYDISONSTOCKCHECK)!=null){
			 includeDiscrepancyCheck=OneTimeVO.FLAG_YES.equals(parameterMap.get(SYS_PARAM_DISPLAYDISONSTOCKCHECK));
		 }
		 
		 
        StringBuilder uldNumbers=null;
		log.entering("ULDController", "saveSCMMessage");
		log.log(Log.INFO, "%%%%reconcileVOs%%%%%", reconcileVOs);
		log.log(Log.INFO, "%%%%ULDListFilterVO%%%%%%%%%", uldListFilterVO);
		
		ULDSCMReconcileVO reconcileVOFromClient = null;

		Collection<String> uldnums = new ArrayList<String>();
        Collection<String> stkuldnums = new ArrayList<String>();

		if (reconcileVOs != null && reconcileVOs.size() > 0) {
			reconcileVOFromClient = reconcileVOs.iterator().next();
		}
        /**
         * Updating the pending status moved to start of transaction.
         */
        Transaction tx = null;
        boolean success = false;
        try {
            ULDListFilterVO updatingVO = new ULDListFilterVO();
            TransactionProvider tm = PersistenceController
                    .getTransactionProvider();
            tx = tm.getNewTransaction(false);

            updatingVO.setCompanyCode(reconcileVOFromClient
                    .getCompanyCode());
            updatingVO.setCurrentStation(reconcileVOFromClient
                    .getAirportCode());
            updatingVO.setAirlineidentifier(reconcileVOFromClient
                    .getAirlineIdentifier());
            updatingVO.setLastMovementDate(reconcileVOFromClient
                    .getStockCheckDate());
            ULD.updateSCMStatusForPendingULDs(updatingVO);

            success = true;
        } finally {
            if (success) {
                tx.commit();
            } else {
                tx.rollback();
            }
        }
        
		ULDSCMReconcile uldSCMReconcile = null;
		try {
			uldSCMReconcile = ULDSCMReconcile.find(reconcileVOFromClient);
		} catch (FinderException e1) {
			
		}
        if(uldSCMReconcile!=null &&
        		uldListFilterVO.getDynamicQueryString()!=null &&
        		uldListFilterVO.getDynamicQueryString().trim().length()>0){
        	//uldSCMReconcile.setReconcileDetails(null);   
        	//setting the missing ULDVOs to prevent the same in message
        	if(reconcileVOFromClient
        			.getReconcileDetailsVOs()!=null && reconcileVOFromClient
        			.getReconcileDetailsVOs().size()>0){
        		for (ULDSCMReconcileDetailsVO reconcileDetailsVO : reconcileVOFromClient
        				.getReconcileDetailsVOs()) {
        			if (ULDVO.SCM_MISSING_STOCK.equals(reconcileDetailsVO.getUldStatus())) {
        				completeReconcileDetailsVOs.add(reconcileDetailsVO);
        			}
        		}
        	} 
        }
		List<ULDSCMReconcileDetailsVO> sightedULDSCMReconcileDetailsVO = new ArrayList<ULDSCMReconcileDetailsVO>();
        Collection<ULDSCMReconcileDetailsVO> reconcileDetailsVOs=new ArrayList<ULDSCMReconcileDetailsVO>();
       // Collection<ULDSCMReconcileDetailsVO> completeReconcileDetailsVOs=new ArrayList<ULDSCMReconcileDetailsVO>();
        if (uldSCMReconcile!=null && uldSCMReconcile.getReconcileDetails() != null) {
            for (ULDSCMReconcileDetails uldscmReconcileDetails : uldSCMReconcile
                    .getReconcileDetails()) {
				ULDSCMReconcileDetailsVO uldscmReconcileDetailsVO = new ULDSCMReconcileDetailsVO();
				uldscmReconcileDetailsVO
                        .setAirlineIdentifier(uldscmReconcileDetails
                                .getDetailsPK().getAirlineIdentifier());
                uldscmReconcileDetailsVO.setAirportCode(uldscmReconcileDetails
                        .getDetailsPK().getAirportCode());
                uldscmReconcileDetailsVO.setCompanyCode(uldscmReconcileDetails
                        .getDetailsPK().getCompanyCode());
                uldscmReconcileDetailsVO.setErrorCode(uldscmReconcileDetails
                        .getErrorCode());
                uldscmReconcileDetailsVO.setFacilityType(uldscmReconcileDetails
                        .getFacilityType());
                uldscmReconcileDetailsVO.setLocation(uldscmReconcileDetails
                        .getLocation());
                uldscmReconcileDetailsVO
                        .setSequenceNumber(uldscmReconcileDetails
                                .getDetailsPK().getSequenceNumber());
                uldscmReconcileDetailsVO.setUldNumber(uldscmReconcileDetails
                        .getDetailsPK().getUldNumber());
                uldscmReconcileDetailsVO.setUldStatus(uldscmReconcileDetails
                        .getUldStatus());
                completeReconcileDetailsVOs.add(uldscmReconcileDetailsVO);
                if (ULDVO.SCM_FOUND_STOCK.equals(uldscmReconcileDetails
                        .getUldStatus())) {
                    sightedULDSCMReconcileDetailsVO
                            .add(uldscmReconcileDetailsVO);
                }
                if (!ULDVO.SCM_SYSTEM_STOCK.equals(uldscmReconcileDetails
                        .getUldStatus())) {
					reconcileDetailsVOs.add(uldscmReconcileDetailsVO);
                }else{
                	stkuldnums.add(uldscmReconcileDetails
                            .getDetailsPK().getUldNumber());
                	
				}
			}
		}
		reconcileVOFromClient.setReconcileDetailsVOs(reconcileDetailsVOs);
		
        /*ULDSCMReconcileVO reconcileVOFinal = new ULDSCMReconcileVO();
        reconcileVOFinal.setAirportCode(reconcileVOFromClient.getAirportCode());
        reconcileVOFinal.setRemarks(reconcileVOFromClient.getRemarks());
        reconcileVOFinal.setStockCheckDate(reconcileVOFromClient
                .getStockCheckDate());
        reconcileVOFinal.setCompanyCode(reconcileVOFromClient.getCompanyCode());
        reconcileVOFinal.setAirlineIdentifier(reconcileVOFromClient
                .getAirlineIdentifier());
        */

		
		boolean discripencyUpdate = false;
		HashMap<String, Collection<MessageVO>> encodedMsg = new HashMap<String, Collection<MessageVO>>();
        int nonStockUldCount=0;
        if(reconcileVOFromClient
                .getReconcileDetailsVOs()!=null && reconcileVOFromClient
                .getReconcileDetailsVOs().size()>0){
            for (ULDSCMReconcileDetailsVO reconcileDetailsVO : reconcileVOFromClient
                    .getReconcileDetailsVOs()) {
				
				if (ULDVO.SCM_MISSING_STOCK.equals(reconcileDetailsVO.getUldStatus())) {
                    log.log(Log.INFO,
                            "%%%%ERR1%%MArking MISSING Discrepancy%%%",
                            reconcileDetailsVO.getUldNumber());
					updateMissingDiscrepancy(reconcileVOFromClient, reconcileDetailsVO);
                    //reconcileDetailsVO.setErrorCode(null);
					continue;
				} 
				uldnums.add(reconcileDetailsVO.getUldNumber());
                discripencyUpdate=true;
                if (ULDVO.SCM_FOUND_STOCK.equals(reconcileDetailsVO.getUldStatus())||"N".equals(reconcileDetailsVO.getUldStatus())) {

                     if(!updateSightedDiscrepancy(reconcileVOFromClient, reconcileDetailsVO, uldListFilterVO)){
                        if( uldNumbers==null){
                            uldNumbers=new StringBuilder(reconcileDetailsVO.getUldNumber());
                        }else{
							uldNumbers.append(", ").append(reconcileDetailsVO.getUldNumber());
						}
						nonStockUldCount++;
                        if(nonStockUldCount%6 ==0){
							uldNumbers.append("<br>");
						}
					 }
					// reconcileDetailsVO.setErrorCode(null);
				}
			}
		}
		if (uldNumbers != null && uldNumbers.length() > 0) {
            String uldNumber=uldNumbers.toString();
            throw new ULDDoesNotExistsException(ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS, new Object[]{uldNumber});
		}

		/*
		 * added by a-3278 for bug 34825 on 29Jan09 To populate the SCMFLG ang
		 * SCMDAT for the ULDs on generating SCM Value Y will be SCMFLG value
		 * for the scm generated ULDs,and N for the other ULDs stockCheckDate is
		 * set for the SCMDAT
		 */
        SCMMessageFilterVO filterVO =new SCMMessageFilterVO();
		filterVO.setSequenceNumber(reconcileVOFromClient.getSequenceNumber());
		filterVO.setCompanyCode(reconcileVOFromClient.getCompanyCode());
		filterVO.setAirportCode(reconcileVOFromClient.getAirportCode());
        filterVO.setDynamicQueryString(uldListFilterVO.getDynamicQueryString());
		filterVO.setFlightCarrierIdentifier(reconcileVOFromClient.getAirlineIdentifier());
		ULDSCMReconcileVO reconcileVOFinal =  ULDSCMReconcile.sendSCMMessage(filterVO);
		reconcileVOFinal.setAirportCode(reconcileVOFromClient.getAirportCode());
		reconcileVOFinal.setRemarks(reconcileVOFromClient.getRemarks());
        reconcileVOFinal.setStockCheckDate(reconcileVOFromClient
                .getStockCheckDate());
        reconcileVOFinal.setCompanyCode(reconcileVOFromClient.getCompanyCode());
        reconcileVOFinal.setAirlineIdentifier(reconcileVOFromClient
                .getAirlineIdentifier());
		Collection<ULDSCMReconcileDetailsVO> reconcileDetailsVOsFinal = reconcileVOFinal.getReconcileDetailsVOs();
		
		 
		 //if the uld status is N or F,then it will not be removed
		  if(includeDiscrepancyCheck){
			  Iterator<ULDSCMReconcileDetailsVO> iterator=reconcileDetailsVOsFinal.iterator();
			while (iterator.hasNext()) {
				ULDSCMReconcileDetailsVO currentULDSCMReconcileDetailsVO = iterator
						.next();
				//MOdified by A-4393 for ICRD-269577 
					if (completeReconcileDetailsVOs != null
							&& !completeReconcileDetailsVOs.isEmpty()) {
						for (ULDSCMReconcileDetailsVO uLDSCMReconcileDetailsVO : completeReconcileDetailsVOs) {

							if (uLDSCMReconcileDetailsVO.getUldNumber().equals(
									currentULDSCMReconcileDetailsVO
											.getUldNumber())
									&& (ULDVO.SCM_MISSING_STOCK
											.equals(uLDSCMReconcileDetailsVO
													.getUldStatus()))) {
								iterator.remove();
					}else if(uLDSCMReconcileDetailsVO.getUldNumber().equals(
							currentULDSCMReconcileDetailsVO
							.getUldNumber())
					&& (!ULDVO.SCM_FOUND_STOCK
							.equals(uLDSCMReconcileDetailsVO
									.getUldStatus()))){
						currentULDSCMReconcileDetailsVO.setMissingDiscrepancyCaptured(false);	
					}
				}
			}
			//remove the uld already marked as dis
			if (currentULDSCMReconcileDetailsVO
					.isMissingDiscrepancyCaptured()) {
				/*if (completeReconcileDetailsVOs != null
						&& !completeReconcileDetailsVOs.isEmpty()) {
					for (ULDSCMReconcileDetailsVO uLDSCMReconcileDetailsVO : completeReconcileDetailsVOs) {
						if (uLDSCMReconcileDetailsVO.getUldNumber().equals(
								currentULDSCMReconcileDetailsVO
										.getUldNumber())
								&& (ULDVO.SCM_MISSING_STOCK
										.equals(uLDSCMReconcileDetailsVO
												.getUldStatus()))) {
					iterator.remove();
				}
			}
				} else {*/
					iterator.remove();
				//}
				}
			}
			
			if(stkuldnums!=null&&!stkuldnums.isEmpty()){
				discripencyUpdate=true;
				uldnums.addAll(stkuldnums); 
			}
		  }
		Collection<String> uldNos = new ArrayList<String>();
        if (reconcileDetailsVOsFinal != null
                && reconcileDetailsVOsFinal.size() > 0) {
			for (ULDSCMReconcileDetailsVO reconcileDetailsVOFinal : reconcileDetailsVOsFinal) {
				uldNos.add(reconcileDetailsVOFinal.getUldNumber());
			}
		}
		if (uldNos != null && uldNos.size() > 0) {
            Collection<ULD> uldObjects = ULD.findULDObjects(
                    reconcileVOFromClient.getCompanyCode(), uldNos);
			for (ULD uld : uldObjects) {
				try {
					PersistenceController.getEntityManager().refresh(uld);
				} catch (PersistenceException e) {
                    throw new SystemException(e.getErrorCode(),e);
				}
                String uldNum=uld.getUldPK().getUldNumber();
                if(sightedULDSCMReconcileDetailsVO!=null){
                for(ULDSCMReconcileDetailsVO uldscmReconcileDetailsVO:sightedULDSCMReconcileDetailsVO){
                    if(uldscmReconcileDetailsVO!=null && ("F".equals(uldscmReconcileDetailsVO.getUldStatus()) || "N".equals(uldscmReconcileDetailsVO.getUldStatus()))
                            && uldNum.equals(uldscmReconcileDetailsVO.getUldNumber()) &&
                            uldscmReconcileDetailsVO.getLocation()!=null &&uldscmReconcileDetailsVO.getLocation().trim().length()>0
                            && uldscmReconcileDetailsVO.getFacilityType()!=null && uldscmReconcileDetailsVO.getFacilityType().trim().length()>0){
						uld.setFacilityType(uldscmReconcileDetailsVO.getFacilityType());
						uld.setLocation(uldscmReconcileDetailsVO.getLocation());
					}
				}
				}
				uld.setScmFlag("Y");
					uld.setScmDate(reconcileVOFromClient.getStockCheckDate());
				uld.setLastSCMDate(reconcileVOFromClient.getStockCheckDate());

			}

		}

		// a-3278 ends

        /*if (lostULDs != null && lostULDs.size() > 0) {
            Collection<ULD> uldObjects = ULD.findULDObjects(
                    reconcileVOFromClient.getCompanyCode(), lostULDs);
            for (ULD uld : uldObjects) {
                if ("L".equals(uld.getOverallStatus())) {
                    uld.setOverallStatus("O");
                }
            }
        }*/
			reconcileVOFromClient.setMessageSendFlag("P");
		
		String scmSequenceNumber = reconcileVOFromClient.getSequenceNumber();
		reconcileVOFromClient.setSequenceNumber(scmSequenceNumber);

        //Added as part of ICRD-876 by A-3767 on 11Aug11
        //if(!reconcileVOFromClient.isFromFinalize()){
            /*if (reconcileVOFromClient.getReconcileDetailsVOs() != null
                    && reconcileVOFromClient.getReconcileDetailsVOs().size() > 0) {

                for (ULDSCMReconcileDetailsVO reconcileDetailsVO : reconcileVOFromClient
                        .getReconcileDetailsVOs()) {
                    if (reconcileDetailsVO.getErrorCode() != null
                            && reconcileDetailsVO.getErrorCode().length() > 0) {
                        //hasErrors = true;
                        break;
                    }
                }
            }*/
        if(!reconcileVOFromClient.isFromFinalize()){
			uldSCMReconcile.setMessageSendFlag("S");
        }else{
				uldSCMReconcile.setMessageSendFlag("P");
		}
        //ICRD-876  ends
        scmSequenceNumber = new StringBuilder(reconcileVOFromClient
                .getSequenceNumber()).append("-").append(
                reconcileVOFromClient.getCompanyCode()).append("-").append(
                reconcileVOFromClient.getAirlineIdentifier()).append("-")
				.append(reconcileVOFromClient.getAirportCode()).toString();

		// Auding Starts From Here
		/*
         * ULDConfigAuditVO uldConfigAuditVO = null; StringBuffer additionalInfo =
         * null; int i = 0; StringBuilder uldNumberString = null;
		 * for(ULDSCMReconcileDetailsVO auditingVO :
		 * reconcileVOFinal.getReconcileDetailsVOs()){ if(i == 0){
		 * uldNumberString = new StringBuilder();
		 * uldNumberString.append(auditingVO.getUldNumber()); }else{
         * uldNumberString.append(",").append(auditingVO.getUldNumber()); } if(i ==
         * 15){ uldConfigAuditVO = new ULDConfigAuditVO(ULDAgreementVO.MODULE,
         * ULDAgreementVO.SUBMODULE, ULDAgreementVO.ENTITY); additionalInfo =
         * new StringBuffer();
		 * uldConfigAuditVO.setCompanyCode(logonAttributes.getCompanyCode());
		 * String airportCode = logonAttributes.getAirportCode();
		 * uldConfigAuditVO.setTxnTime( new LocalDate(airportCode,
		 * Location.ARP,true).toGMTDate()); uldConfigAuditVO.setTxnLocalTime(new
		 * LocalDate(airportCode, Location.ARP, true));
		 * uldConfigAuditVO.setUserId(logonAttributes.getUserId());
		 * uldConfigAuditVO.setAuditRemarks(reconcileVOFromClient.getRemarks());
		 * additionalInfo.append("Aiport - ");
		 * additionalInfo.append(reconcileVOFromClient.getAirportCode());
		 * additionalInfo.append("/Date -");
		 * additionalInfo.append(reconcileVOFromClient.getStockCheckDate());
		 * additionalInfo.append("/ULDNos. - ");
		 * additionalInfo.append(uldNumberString.toString());
		 * uldConfigAuditVO.setAdditionalInformation(additionalInfo.toString());
		 * uldConfigAuditVO.setActionCode(SENT_SCMMESSAGE);
		 * AuditUtils.performAudit(uldConfigAuditVO); i = 0; }else{ i++; } } if
		 * (i > 0){ log.log(Log.INFO, " sent audit count of ULDs is less than
		 * 15"+uldNumberString); uldConfigAuditVO = new
		 * ULDConfigAuditVO(ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
		 * ULDAgreementVO.ENTITY); additionalInfo = new StringBuffer();
		 * uldConfigAuditVO.setCompanyCode(logonAttributes.getCompanyCode());
		 * String airportCode = logonAttributes.getAirportCode();
		 * uldConfigAuditVO.setTxnTime( new LocalDate(airportCode,
		 * Location.ARP,true).toGMTDate()); uldConfigAuditVO.setTxnLocalTime(new
		 * LocalDate(airportCode, Location.ARP, true));
		 * uldConfigAuditVO.setUserId(logonAttributes.getUserId());
		 * uldConfigAuditVO.setAuditRemarks(reconcileVOFromClient.getRemarks());
		 * additionalInfo.append("Aiport - ");
		 * additionalInfo.append(reconcileVOFromClient.getAirportCode());
		 *
		 * additionalInfo.append("/Date -");
		 * additionalInfo.append(reconcileVOFromClient.getStockCheckDate());
		 * additionalInfo.append("/ULDNos. - ");
		 * additionalInfo.append(uldNumberString.toString());
		 * uldConfigAuditVO.setAdditionalInformation(additionalInfo.toString());
		 * uldConfigAuditVO.setActionCode(SENT_SCMMESSAGE); log.log(Log.FINE,
		 * "GOING TO PERFORM AUDIT "+uldConfigAuditVO);
		 * AuditUtils.performAudit(uldConfigAuditVO); }
		 */
		// No need to update for creating new ULD with out SystemStock
		// authour A-5125 BUG ID ICRD-25915
        if(discripencyUpdate){
        	
			
			// auditing the discrepancy
			LogonAttributes logonAttributes = ContextUtils
					.getSecurityContext().getLogonAttributesVO();
			ULDDiscrepancyFilterVO uLDDiscrepancyFilterVO=new ULDDiscrepancyFilterVO();
			uLDDiscrepancyFilterVO.setCompanyCode(logonAttributes.getCompanyCode());
			uLDDiscrepancyFilterVO.setUldNumbers(uldnums);
			uLDDiscrepancyFilterVO.setDiscrepancyStatus(ULDVO.SCM_MISSING_STOCK);
			Map<String,ULDDiscrepancyVO> uLDDiscrepancyMap  =findUldDiscrepancyDetails(uLDDiscrepancyFilterVO);
			for (String uldnum : uldnums) {
				ULDDiscrepancyVO uLDDiscrepancyVO=new ULDDiscrepancyVO();
				if(uLDDiscrepancyMap!=null){
					uLDDiscrepancyVO=uLDDiscrepancyMap.get(uldnum);
				}
				StringBuffer additionalInfo = new StringBuffer();
				ULDAuditVO uldAuditVO = new ULDAuditVO(ULDDiscrepancyVO.MODULE,
						ULDDiscrepancyVO.SUBMODULE, ULDDiscrepancyVO.ENTITY);
				uldAuditVO.setCompanyCode(reconcileVOFinal.getCompanyCode());
				uldAuditVO.setUldNumber(uldnum);
				String airportCode = logonAttributes.getAirportCode();
				uldAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP,
						true).toGMTDate());
				uldAuditVO.setTxnLocalTime(new LocalDate(airportCode,
						Location.ARP, true));
				uldAuditVO.setActionCode(DELETE_ULDDISCREPANCY);
				additionalInfo.append("DiscrepancyCode - ");
				additionalInfo.append(ULDVO.SCM_MISSING_STOCK);
				additionalInfo.append(",");
				additionalInfo.append("DiscrepancyDate - ");
				if(uLDDiscrepancyVO!=null&&uLDDiscrepancyVO.getDiscrepencyDate()!=null){  
				additionalInfo.append(uLDDiscrepancyVO.getDiscrepencyDate());
				}  
				uldAuditVO.setAdditionalInformation(additionalInfo.toString());
				AuditUtils.performAudit(uldAuditVO);
			}
			ULDDiscrepancy.updateULDDiscrepancy(
					reconcileVOFinal.getCompanyCode(),
                reconcileVOFinal.getAirportCode(), uldnums);
		}
		
        Collection<MessageVO> msgVOs =null;
        log.log(Log.FINE,"reconcileVOFinal.getReconcileDetailsVOs()---------->"+reconcileVOFinal.getReconcileDetailsVOs());
        log.log(Log.FINE,"additionaldespatchDetailsVOs--------->"+additionaldespatchDetailsVOs);
        if (reconcileVOFinal.getReconcileDetailsVOs() != null
                && reconcileVOFinal.getReconcileDetailsVOs().size() > 0) {
            if(!reconcileVOFromClient.isFromFinalize()){
                if(sightedULDSCMReconcileDetailsVO.size()>0){
					reconcileVOFinal.setReconcileDetailsVOs(sightedULDSCMReconcileDetailsVO);
				}
                msgVOs = encodeSCMMessage(reconcileVOFinal,additionaldespatchDetailsVOs);
                log.log(Log.FINE,"msgVOs--------->"+msgVOs);
				encodedMsg.put(scmSequenceNumber, msgVOs);
            }else{
				encodedMsg.put(scmSequenceNumber, null);
			}
		}
        //Added by A-6204 for ICRD-101067 starts
        else{
			encodedMsg.put(scmSequenceNumber, null);
		}
        //Added by A-6204 for ICRD-101067 ends
        //}
		return encodedMsg;
	}

	/**
	 * @param reconcileVO
	 * @return
	 * @throws SystemException
	 * @throws MessageConfigException
	 *             new method added by A-2408 this method will return the
	 *             encoded message VOs
	 */
    public Collection<MessageVO> encodeSCMMessage(ULDSCMReconcileVO reconcileVO, Collection<MessageDespatchDetailsVO> additionaldespatchDetailsVOs)
			throws SystemException, MessageConfigException {

		log.entering("ULDController", "generateSCMMessageVO");
		// boolean hasErrors =false;
		int day = 0;
		String month = null;
		String timeA = null;
		String timeB = null;
		String time = null;
		int totalNoOfUlds = 0;
		Collection<String> uldTypes = new ArrayList<String>();
		List<ULDSCMReconcileDetailsVO> detailsVOs = null;

		SCMMessageVO sCMMessageVO = new SCMMessageVO();

		log.log(Log.FINE, "NO ERRORS IN SCM----");

		sCMMessageVO.setCompanyCode(reconcileVO.getCompanyCode());
		sCMMessageVO.setLastUpdateUser(reconcileVO.getLastUpdatedUser());
		sCMMessageVO.setStationCode(reconcileVO.getAirportCode());
		sCMMessageVO.setMessageStandard("AHM");
		sCMMessageVO.setMessageType("SCM");
		sCMMessageVO.setTransactionId(MessageConfigConstants.TXN_SCREEN);

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

		// sCMMessageVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
		// Added by A-2052 for the bug 103514 starts
		AirlineValidationVO airlineValidationVO = null;
		try {
            airlineValidationVO = new SharedAirlineProxy().findAirline(
                    reconcileVO.getCompanyCode(), reconcileVO
                            .getAirlineIdentifier());
		} catch (ProxyException e) {
			// proxy exception
		}
		String airlineCode = airlineValidationVO.getAlphaCode();
		log.log(Log.FINE, "airlineCode-----|||---", airlineCode);
		if (airlineCode != null) {
			sCMMessageVO.setCarrierCode(airlineCode);
		} else {
			sCMMessageVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
		}
		log.log(Log.FINE, "sCMMessageVO-----|||---", sCMMessageVO);
		// Added by A-2052 for the bug 103514 ends
		SCMAirportIdentifierVO airportIdentifierVO = new SCMAirportIdentifierVO();
		airportIdentifierVO.setAirportCode(reconcileVO.getAirportCode());

		sCMMessageVO.setScmAirportIdentifierVO(airportIdentifierVO);

        log.log(Log.INFO, "reconcileVO.getStockCheckDate() -&*&-----",
                reconcileVO.getStockCheckDate());
        if (reconcileVO.getStockCheckDate() != null) {
            log.log(Log.INFO,
                    "reconcileVO.getStockCheckDate() -&*&*&*--not null ",
                    reconcileVO.getStockCheckDate());
            log
                    .log(
                            Log.INFO,
                            "reconcileVO.getStockCheckDate().toString() -&*&*&*--not null ",
							reconcileVO.getStockCheckDate().toString());
            log
                    .log(
                            Log.INFO,
                            "reconcileVO.getStockCheckDate().toDisplayDateOnlyFormat() -&*&*&*--not null ",
                            reconcileVO.getStockCheckDate()
                                    .toDisplayDateOnlyFormat());
            log
                    .log(
                            Log.INFO,
                            "reconcileVO.getStockCheckDate().toDisplayTimeOnlyFormat()---- ",
                            reconcileVO.getStockCheckDate()
                                    .toDisplayTimeOnlyFormat());
            String dateString = reconcileVO.getStockCheckDate()
                    .toDisplayFormat("dd-MMM-yyyy HH:mm:ss");
            String dateStringTimeFormat = reconcileVO.getStockCheckDate()
                    .toDisplayFormat("HH:mm:ss");

			day = Integer.parseInt(dateString.substring(0, 2));
			log.log(Log.INFO, " day -&*&*&*--not null ", day);
			month = dateString.substring(3, 6);
			log.log(Log.INFO, " month -&*&*&*--not null ", month);
			if (dateStringTimeFormat != null) {
				timeA = dateStringTimeFormat.substring(0, 2);
				log.log(Log.INFO, "%%%%%%timeA %%%%%%", timeA);
				timeB = dateStringTimeFormat.substring(3, 5);
				log.log(Log.INFO, "%%%%%%timeB %%%%%%", timeB);
				time = timeA.concat(timeB);

				if (time.length() < 2) {
					time = new StringBuilder(time).append("000").toString();
				} else if (time.length() < 3) {
					time = new StringBuilder(time).append("00").toString();
				} else if (time.length() < 4) {
					time = new StringBuilder(time).append("0").toString();
				}

				// time = Integer.parseInt(time1.concat(time2));
			}

		}

		SCMDateTimeIdentifierVO timeIdentifierVO = new SCMDateTimeIdentifierVO();

		timeIdentifierVO.setDayOfMonth(day);
		timeIdentifierVO.setMonthCode(month);
		timeIdentifierVO.setTime(time);

		log.log(Log.INFO, "%%%%%%%%%%  time %%%%%%%%%", timeIdentifierVO.getTime());
		sCMMessageVO.setScmDateTimeIdentifierVO(timeIdentifierVO);

		// SCMSupplementaryInfoVO sCMSupplementaryInfoVO = new
		// SCMSupplementaryInfoVO();
		// sCMSupplementaryInfoVO.getRemarks();
		// sCMMessageVO.getScmSupplementaryInfoVOs().

		SCMUldTypeIdentifierVO sCMUldTypeIdentifierVO = null;
		SCMTotalDetailsVO sCMTotalDetailsVO = null;
		Collection<SCMUldTypeIdentifierVO> sCMUldTypeIdentifierVOs = new ArrayList<SCMUldTypeIdentifierVO>();
		Collection<SCMStockInformationVO> sCMStockSystemInformationVOs = null;
		Collection<SCMStockInformationVO> sCMStockSightedInformationVOs = null;
		SCMStockInformationVO sCMStockInformationVO = null;
        //added by a-4752 as part od ICRD-65468
		HashMap<String, SCMUldTypeIdentifierVO> uldTypeMap = new HashMap<String, SCMUldTypeIdentifierVO>();
		

        log.log(Log.FINE, "reconcileVO.getReconcileDetailsVOs()----->>",
                reconcileVO.getReconcileDetailsVOs());
        if (reconcileVO.getReconcileDetailsVOs() != null
                && reconcileVO.getReconcileDetailsVOs().size() > 0) {
			log.log(Log.FINE, "inside setting detailsVOS----->>", detailsVOs);
            detailsVOs = new ArrayList<ULDSCMReconcileDetailsVO>(reconcileVO
                    .getReconcileDetailsVOs());
		}

		if (detailsVOs != null && detailsVOs.size() > 0) {
			Collections.sort(detailsVOs, new DesignComparator());
		}
        log.log(Log.FINE, "detailsVOs    in   encodeSCMMessage----->>",
                detailsVOs);
        if (detailsVOs != null && detailsVOs.size() > 0) {
            for (ULDSCMReconcileDetailsVO detailsVO : detailsVOs) {
                //Added by A-5116 for ICRD-48149
                if(detailsVO.getUldNumber() != null && detailsVO.getUldNumber().length() > 0){
                //Null check and length check added by A-5233 for ICRD-25671
				if (detailsVO.getUldNumber() != null && (detailsVO.getUldNumber()).length() >= 3) {
                    if (uldTypes.contains(detailsVO.getUldNumber().substring(0,
                            3))) {
					log.log(Log.FINE, "OLD ULD TYPE--------", detailsVO.getUldNumber().substring(0, 3));
					sCMStockInformationVO = new SCMStockInformationVO();
					int length = detailsVO.getUldNumber().length();

					/*
                     * String nextPart = detailsVO.getUldNumber().substring(3,
                     * length); int count = 0; while (count < (length - 3)) {
                     * char ch = nextPart.charAt(count); if
                     * (Character.isLetter(ch)) { break; } count++; } String
                     * ownerCode = nextPart.substring(count, length - 3); String
                     * serNumber = nextPart.substring(0, count);
                     *
                     */

                    String twoalphacode = detailsVO.getUldNumber().substring(
                            length - 2);
                    String threealphacode = detailsVO.getUldNumber().substring(
                            length - 3);
                    String ownerCode = null;
                    String serNumber = null;
                    String arldtl = findOwnerCode(reconcileVO.getCompanyCode(),
                            twoalphacode, threealphacode);
                    log.log(Log.INFO, "%%%%%%%%   arldtl", arldtl);
                    //Null Check added as part of ICRD-21184
                    if(arldtl != null) {
                    String arldtlArray[] = arldtl.split("~");
                    if ("2".equals(arldtlArray[0])) {
                        ownerCode = twoalphacode;
                    } else {
                        ownerCode = threealphacode;
                    }
                    serNumber = detailsVO.getUldNumber().substring(3,
                            length - (Integer.valueOf(arldtlArray[0])));
                    }

                    log.log(Log.INFO, "%%%%%%%%%  ownerCode", ownerCode);
                    log.log(Log.INFO, "%%%%%%%%%  serNumber", serNumber);
                    sCMStockInformationVO.setUldSerialNumber(serNumber);
                    sCMStockInformationVO.setUldOwnerCode(ownerCode);
                    if(ULDVO.SCM_SIGHTED_STOCK.equals(detailsVO.getUldStatus()) || "N".equals(detailsVO.getUldStatus())){
                        sCMStockSightedInformationVOs.add(sCMStockInformationVO);
                    }else if(detailsVO.getUldStatus()==null || ULDVO.SCM_SYSTEM_STOCK.equals(detailsVO.getUldStatus())){
                        sCMStockSystemInformationVOs.add(sCMStockInformationVO);
                    }
                    totalNoOfUlds++;
                } else {
                    log.log(Log.FINE, "NEW ULD TYPE----", detailsVO.getUldNumber().substring(0, 3));

                    //commented by a-4752 as part of ICRD-65468
                    /*if (sCMUldTypeIdentifierVO != null) {

                        sCMTotalDetailsVO.setNoOfUlds(totalNoOfUlds);
                        sCMTotalDetailsVO.setTotalIdentifier("T");
                        sCMUldTypeIdentifierVO
                                .setScmTotalDetailsVO(sCMTotalDetailsVO);
                        sCMUldTypeIdentifierVO
                                .setScmStockInformationVOs(sCMStockInformationVOs);

                        sCMUldTypeIdentifierVOs.add(sCMUldTypeIdentifierVO);
                        sCMUldTypeIdentifierVO = null;
                    }*/
					totalNoOfUlds = 0;
					uldTypes.add(detailsVO.getUldNumber().substring(0, 3));

					sCMUldTypeIdentifierVO = new SCMUldTypeIdentifierVO();
					sCMTotalDetailsVO = new SCMTotalDetailsVO();
					sCMStockSystemInformationVOs = new ArrayList<SCMStockInformationVO>();
					sCMStockSightedInformationVOs = new ArrayList<SCMStockInformationVO>();
                    sCMUldTypeIdentifierVO.setUldTypeCode(detailsVO
                            .getUldNumber().substring(0, 3));

					sCMStockInformationVO = new SCMStockInformationVO();

					int length = detailsVO.getUldNumber().length();
					/*
                     * String nextPart = detailsVO.getUldNumber().substring(3,
                     * length); int count = 0; while (count < (length - 3)) {
                     * char ch = nextPart.charAt(count); if
                     * (Character.isLetter(ch)) { break; } count++; } String
                     * ownerCode = nextPart.substring(count, length - 3); String
                     * serNumber = nextPart.substring(0, count);
                     */

                    String twoalphacode = detailsVO.getUldNumber().substring(
                            length - 2);
                    String threealphacode = detailsVO.getUldNumber().substring(
                            length - 3);
                    String ownerCode = null;
                    String serNumber = null;
                    String arldtl = findOwnerCode(reconcileVO.getCompanyCode(),
                            twoalphacode, threealphacode);
                    log.log(Log.INFO, "%%%%%%%%   arldtl", arldtl);
                    //Null Check added as part of ICRD-21184
                    if(arldtl != null) {
                    String arldtlArray[] = arldtl.split("~");
                    if ("2".equals(arldtlArray[0])) {
                        ownerCode = twoalphacode;
                    } else {
                        ownerCode = threealphacode;
                    }
                    serNumber = detailsVO.getUldNumber().substring(3,
                            length - (Integer.valueOf(arldtlArray[0])));
                    }

                    log.log(Log.INFO, "%%%%%%%%%  ownerCode", ownerCode);
                    log.log(Log.INFO, "%%%%%%%%%  serNumber", serNumber);
                    sCMStockInformationVO.setUldOwnerCode(ownerCode);
                    sCMStockInformationVO.setUldSerialNumber(serNumber);
                    totalNoOfUlds++;
                    if(ULDVO.SCM_SIGHTED_STOCK.equals(detailsVO.getUldStatus()) || "N".equals(detailsVO.getUldStatus())){
                        sCMStockSightedInformationVOs.add(sCMStockInformationVO);
                    }else if(detailsVO.getUldStatus()==null ||ULDVO.SCM_SIGHTED_STOCK.equals(detailsVO.getUldStatus())){
                        sCMStockSystemInformationVOs.add(sCMStockInformationVO);
                    }

                }
                }
            }
            if (sCMUldTypeIdentifierVO != null) {
                if(sCMStockSightedInformationVOs!=null && sCMStockSightedInformationVOs.size()>0){
					sCMTotalDetailsVO.setNoOfUlds(sCMStockSightedInformationVOs.size());
                    sCMUldTypeIdentifierVO
                    .setScmStockInformationVOs(sCMStockSightedInformationVOs);
                }else{
					sCMTotalDetailsVO.setNoOfUlds(sCMStockSystemInformationVOs.size());
                    sCMUldTypeIdentifierVO
                    .setScmStockInformationVOs(sCMStockSystemInformationVOs);
				}
				
				sCMTotalDetailsVO.setTotalIdentifier("T");
				sCMUldTypeIdentifierVO.setScmTotalDetailsVO(sCMTotalDetailsVO);
				
                //added by a-4752 as part od ICRD-65468
                if(!uldTypeMap.containsKey(sCMUldTypeIdentifierVO.getUldTypeCode())){
				sCMUldTypeIdentifierVOs.add(sCMUldTypeIdentifierVO);
				uldTypeMap.put(sCMUldTypeIdentifierVO.getUldTypeCode(), sCMUldTypeIdentifierVO);
				}

			}
		}
		}
		sCMMessageVO.setSCMUldTypeIdentifierVOs(sCMUldTypeIdentifierVOs);
		// added by nisha for QF1019 on 16Jun08
        if (reconcileVO.getRemarks() != null
                && reconcileVO.getRemarks().trim().length() > 0) {
			SCMSupplementaryHeaderInfoVO scmSupplementaryHeaderInfoVO = new SCMSupplementaryHeaderInfoVO();
			scmSupplementaryHeaderInfoVO.setSuppIdentifier("SI");
            sCMMessageVO
                    .setScmSupplementaryHeaderInfoVO(scmSupplementaryHeaderInfoVO);
			ArrayList<SCMSupplementaryInfoVO> scmSupplementaryInfoVOs = new ArrayList<SCMSupplementaryInfoVO>();
			SCMSupplementaryInfoVO scmSupplementaryInfoVO = new SCMSupplementaryInfoVO();
			scmSupplementaryInfoVO.setRemarks(reconcileVO.getRemarks());
			scmSupplementaryInfoVOs.add(scmSupplementaryInfoVO);
			sCMMessageVO.setScmSupplementaryInfoVOs(scmSupplementaryInfoVOs);
		}
        log
                .log(Log.FINE, "GOING TO PRINT sCMMessageVO -------->",
                        sCMMessageVO);
	
		sCMMessageVO.setDespatchDetails(additionaldespatchDetailsVOs);
			return new ULDMessageProcessor().encodeSCMMessage(sCMMessageVO);
		
	}

	/**
	 *
	 * @param reconcileVO
	 * @return
	 * @throws SystemException
	 */
    private void generateSCMMessageVO(ULDSCMReconcileVO reconcileVO)
            throws SystemException, MessageConfigException {
		log.entering("ULDController", "generateSCMMessageVO");
		// boolean hasErrors =false;
		int day = 0;
		String month = null;
		String timeA = null;
		String timeB = null;
		String time = null;
		int totalNoOfUlds = 0;
		Collection<String> uldTypes = new ArrayList<String>();
		List<ULDSCMReconcileDetailsVO> detailsVOs = null;

		SCMMessageVO sCMMessageVO = new SCMMessageVO();

		log.log(Log.FINE, "NO ERRORS IN SCM----");

		sCMMessageVO.setCompanyCode(reconcileVO.getCompanyCode());
		sCMMessageVO.setLastUpdateUser(reconcileVO.getLastUpdatedUser());
		sCMMessageVO.setStationCode(reconcileVO.getAirportCode());
		sCMMessageVO.setMessageStandard("AHM");
		sCMMessageVO.setMessageType("SCM");
		sCMMessageVO.setTransactionId(MessageConfigConstants.TXN_SCREEN);

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

		sCMMessageVO.setCarrierCode(logonAttributes.getOwnAirlineCode());

		SCMAirportIdentifierVO airportIdentifierVO = new SCMAirportIdentifierVO();
		airportIdentifierVO.setAirportCode(reconcileVO.getAirportCode());

		sCMMessageVO.setScmAirportIdentifierVO(airportIdentifierVO);

		if (reconcileVO.getStockCheckDate() != null) {
            day = Integer.parseInt(reconcileVO.getStockCheckDate().toString()
                    .substring(0, 2));
			month = reconcileVO.getStockCheckDate().toString().substring(3, 6);
			if (reconcileVO.getStockCheckDate().toDisplayTimeOnlyFormat() != null) {
                timeA = reconcileVO.getStockCheckDate()
                        .toDisplayTimeOnlyFormat().toString().substring(0, 1);
                timeB = reconcileVO.getStockCheckDate()
                        .toDisplayTimeOnlyFormat().toString().substring(4, 5);
				log.log(Log.INFO, "%%%%%%time2 %%%%%%", timeB);
				time = timeA.concat(timeB);

				if (time.length() < 2) {
					time = new StringBuilder(time).append("000").toString();
				} else if (time.length() < 3) {
					time = new StringBuilder(time).append("00").toString();
				} else if (time.length() < 4) {
					time = new StringBuilder(time).append("0").toString();
				}

				// time = Integer.parseInt(time1.concat(time2));
			}

		}

		SCMDateTimeIdentifierVO timeIdentifierVO = new SCMDateTimeIdentifierVO();

		timeIdentifierVO.setDayOfMonth(day);
		timeIdentifierVO.setMonthCode(month);
		timeIdentifierVO.setTime(time);

		log.log(Log.INFO, "%%%%%%%%%%  time %%%%%%%%%", timeIdentifierVO.getTime());
		sCMMessageVO.setScmDateTimeIdentifierVO(timeIdentifierVO);

		// SCMSupplementaryInfoVO sCMSupplementaryInfoVO = new
		// SCMSupplementaryInfoVO();
		// sCMSupplementaryInfoVO.getRemarks();
		// sCMMessageVO.getScmSupplementaryInfoVOs().

		SCMUldTypeIdentifierVO sCMUldTypeIdentifierVO = null;
		SCMTotalDetailsVO sCMTotalDetailsVO = null;
		Collection<SCMUldTypeIdentifierVO> sCMUldTypeIdentifierVOs = new ArrayList<SCMUldTypeIdentifierVO>();
		Collection<SCMStockInformationVO> sCMStockInformationVOs = null;
		SCMStockInformationVO sCMStockInformationVO = null;
        if (reconcileVO.getReconcileDetailsVOs() != null
                && reconcileVO.getReconcileDetailsVOs().size() > 0) {
            detailsVOs = new ArrayList<ULDSCMReconcileDetailsVO>(reconcileVO
                    .getReconcileDetailsVOs());
		}

		if (detailsVOs != null && detailsVOs.size() > 0) {
			Collections.sort(detailsVOs, new DesignComparator());
		}

		if (detailsVOs != null && detailsVOs.size() > 0) {
			for (ULDSCMReconcileDetailsVO detailsVO : detailsVOs) {
				if (uldTypes.contains(detailsVO.getUldNumber().substring(0, 3))) {
					log.log(Log.FINE, "OLD ULD TYPE----", detailsVO.getUldNumber().substring(0, 3));
					sCMStockInformationVO = new SCMStockInformationVO();

					int length = detailsVO.getUldNumber().length();

					/*
					 * String nextPart = detailsVO.getUldNumber().substring(3,
					 * length); int count = 0; while (count < (length - 3)) {
					 * char ch = nextPart.charAt(count); if
					 * (Character.isLetter(ch)) { break; } count++; } String
					 * ownerCode = nextPart.substring(count, length - 3); String
					 * serNumber = nextPart.substring(0, count);
					 *
					 */

                    String twoalphacode = detailsVO.getUldNumber().substring(
                            length - 2);
                    String threealphacode = detailsVO.getUldNumber().substring(
                            length - 3);
                    String ownerCode = null;
                    String serNumber = null;
                    String arldtl = findOwnerCode(reconcileVO.getCompanyCode(),
                            twoalphacode, threealphacode);
                    log.log(Log.INFO, "%%%%%%%%   arldtl", arldtl);
                    //Null Check added as part of ICRD-21184
                    if(arldtl != null) {
                    String arldtlArray[] = arldtl.split("~");
                    if ("2".equals(arldtlArray[0])) {
                        ownerCode = twoalphacode;
                    } else {
                        ownerCode = threealphacode;
                    }
                    serNumber = detailsVO.getUldNumber().substring(3,
                            length - (Integer.valueOf(arldtlArray[0])));
                    }

                    log.log(Log.INFO, "%%%%%%%%%  ownerCode", ownerCode);
                    log.log(Log.INFO, "%%%%%%%%%  serNumber", serNumber);
                    sCMStockInformationVO.setUldOwnerCode(ownerCode);
                    sCMStockInformationVO.setUldSerialNumber(serNumber);

                    sCMStockInformationVOs.add(sCMStockInformationVO);
                    totalNoOfUlds++;
                } else {
                    log.log(Log.FINE, "NEW ULD TYPE----", detailsVO.getUldNumber().substring(0, 3));
                    if (sCMUldTypeIdentifierVO != null) {

                        sCMTotalDetailsVO.setNoOfUlds(totalNoOfUlds);
                        sCMTotalDetailsVO.setTotalIdentifier("T");
                        sCMUldTypeIdentifierVO
                                .setScmTotalDetailsVO(sCMTotalDetailsVO);
                        sCMUldTypeIdentifierVO
                                .setScmStockInformationVOs(sCMStockInformationVOs);

						sCMUldTypeIdentifierVOs.add(sCMUldTypeIdentifierVO);
						sCMUldTypeIdentifierVO = null;
					}
					totalNoOfUlds = 0;
					uldTypes.add(detailsVO.getUldNumber().substring(0, 3));

					sCMUldTypeIdentifierVO = new SCMUldTypeIdentifierVO();
					sCMTotalDetailsVO = new SCMTotalDetailsVO();
					sCMStockInformationVOs = new ArrayList<SCMStockInformationVO>();

                    sCMUldTypeIdentifierVO.setUldTypeCode(detailsVO
                            .getUldNumber().substring(0, 3));

					sCMStockInformationVO = new SCMStockInformationVO();

					int length = detailsVO.getUldNumber().length();
					/*
					 * String nextPart = detailsVO.getUldNumber().substring(3,
					 * length); int count = 0; while (count < (length - 3)) {
					 * char ch = nextPart.charAt(count); if
					 * (Character.isLetter(ch)) { break; } count++; } String
					 * ownerCode = nextPart.substring(count, length - 3); String
					 * serNumber = nextPart.substring(0, count);
					 */

                    String twoalphacode = detailsVO.getUldNumber().substring(
                            length - 2);
                    String threealphacode = detailsVO.getUldNumber().substring(
                            length - 3);
                    String ownerCode = null;
                    String serNumber = null;
                    String arldtl = findOwnerCode(reconcileVO.getCompanyCode(),
                            twoalphacode, threealphacode);
                    log.log(Log.INFO, "%%%%%%%%   arldtl", arldtl);
                    //Null Check added as part of ICRD-21184
                    if(arldtl != null) {
                    String arldtlArray[] = arldtl.split("~");
                    if ("2".equals(arldtlArray[0])) {
                        ownerCode = twoalphacode;
                    } else {
                        ownerCode = threealphacode;
                    }
                    serNumber = detailsVO.getUldNumber().substring(3,
                            length - (Integer.valueOf(arldtlArray[0])));
                    }

                    log.log(Log.INFO, "%%%%%%%%%  ownerCode", ownerCode);
                    log.log(Log.INFO, "%%%%%%%%%  serNumber", serNumber);
                    sCMStockInformationVO.setUldOwnerCode(ownerCode);
                    sCMStockInformationVO.setUldSerialNumber(serNumber);
                    totalNoOfUlds++;
                    sCMStockInformationVOs.add(sCMStockInformationVO);

                }

            }
            if (sCMUldTypeIdentifierVO != null) {

                sCMTotalDetailsVO.setNoOfUlds(totalNoOfUlds);
                sCMTotalDetailsVO.setTotalIdentifier("T");
                sCMUldTypeIdentifierVO.setScmTotalDetailsVO(sCMTotalDetailsVO);
                sCMUldTypeIdentifierVO
                        .setScmStockInformationVOs(sCMStockInformationVOs);

				sCMUldTypeIdentifierVOs.add(sCMUldTypeIdentifierVO);

			}
		}
		sCMMessageVO.setSCMUldTypeIdentifierVOs(sCMUldTypeIdentifierVOs);

		log.log(Log.FINE, "GOING TO PRINT sCMMessageVO ---->", sCMMessageVO);
		generateSCMMessage(sCMMessageVO);
	}

	/**
	 *
	 */
	class DesignComparator implements Comparator<ULDSCMReconcileDetailsVO> {
		/**
		 *
		 * @param vA
		 * @param vB
		 * @return
		 */
        public int compare(ULDSCMReconcileDetailsVO vA,
                ULDSCMReconcileDetailsVO vB) {
			return vA.getUldNumber().compareToIgnoreCase(vB.getUldNumber());
		}
	}

	/**
	 *
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDSCMReconcileVO> listSCMMessage(SCMMessageFilterVO filterVO)
            throws SystemException {
		log.entering("ULDController", "listSCMMessage");
        return ULDSCMReconcile.listSCMMessage(filterVO);
	}

	/**
	 *
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDSCMReconcileDetailsVO> listULDErrorsInSCM(
            SCMMessageFilterVO filterVO) throws SystemException {
		log.entering("ULDController", "listULDErrorsInSCM");
		return ULDSCMReconcile.listULDErrorsInSCM(filterVO);
	}

	/**
	 * Note: for forcedSend the flag toBeforcedSent is to be made true.
	 *
	 *
	 * @param flightMessageReconcileVO
	 * @throws SystemException
	 */
    public void sendUCM(ULDFlightMessageReconcileVO flightMessageReconcileVO)
            throws SystemException {
		log.entering("ULDController", "sendUCM");

		Collection<ULDFlightMessageReconcileVO> messageReconcileVOs = new ArrayList<ULDFlightMessageReconcileVO>();

		// check this .
		// This method is to get the children of the input vo
        ULDFlightMessageReconcileVO vo = ULDFlightMessageReconcile
                .findCounterUCM(flightMessageReconcileVO);

		log.log(Log.INFO, "################## vo ", vo);
		messageReconcileVOs.add(vo);

		if ("IN".equals(flightMessageReconcileVO.getMessageType())) {
            ULDFlightMessageReconcileVO reconcileVO = ULDFlightMessageReconcile
                    .checkForINOUT(flightMessageReconcileVO);
			if (reconcileVO != null) {
				messageReconcileVOs.add(reconcileVO);
			}
		}

        log.log(Log.INFO, "##################  messageReconcileVOs ",
                messageReconcileVOs);
        formUCMMessageVO(messageReconcileVOs, flightMessageReconcileVO.getMsgDsptcDetailsVOs());

		for (ULDFlightMessageReconcileVO reconcileVO : messageReconcileVOs) {
			boolean isFound = true;
			ULDFlightMessageReconcile reconcile = null;
			try {
				reconcile = ULDFlightMessageReconcile.find(reconcileVO);
			} catch (FinderException finderException) {
				isFound = false;
			}
			if (isFound) {
                if (reconcile.getMessageSendFlag() == null
                        || "P".equals(reconcile.getMessageSendFlag())
						|| "B".equals(reconcile.getMessageSendFlag())) {
					reconcile.setMessageSendFlag("S");
                    //Added by A-7359 for ICRD-192413
                    if(reconcile.getReconcileDetails()!= null&& reconcile.getReconcileDetails().size()>0 ){
                        for(ULDFlightMessageReconcileDetails msgDetail:reconcile.getReconcileDetails()){
                            //Modified by A-7359 for ICRD-229935
                            if("S".equalsIgnoreCase(msgDetail.getUldStatus())||"R".equalsIgnoreCase(msgDetail.getUldStatus())){
                            msgDetail.setUldStatus("R");
                            }else{
                            msgDetail.setUldStatus("S");
                            }
                        }
                    }

                    // Added by A-2408 for bugfix on 18Jul08 starts
                    reconcile.setLastUpdatedTime(reconcileVO
                            .getLastUpdatedTime());
                    reconcile.setLastUpdatedUser(reconcileVO
                            .getLastUpdatedUser());
					// ends
				} else if ("S".equals(reconcile.getMessageSendFlag())) {
					reconcile.setMessageSendFlag("R");
                    //Added by A-7359 for ICRD-192413
                    if(reconcile.getReconcileDetails()!= null&& reconcile.getReconcileDetails().size()>0 ){
                        for(ULDFlightMessageReconcileDetails msgDetail:reconcile.getReconcileDetails()){
                            msgDetail.setUldStatus("R");
                        }
                    }
                    // Added by A-2408 for bugfix on 18Jul08 starts
                    reconcile.setLastUpdatedTime(reconcileVO
                            .getLastUpdatedTime());
                    reconcile.setLastUpdatedUser(reconcileVO
                            .getLastUpdatedUser());
					// ends
				}
			}
		}
	}

	/**
	 *
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public String findCurrentAirportForULD(SCMMessageFilterVO filterVO)
            throws SystemException {
		log.entering("ULDController", "findCurrentAirportForULD");
		String airportCode = null;
		ULD uld = null;
		try {
            uld = ULD.find(filterVO.getCompanyCode(), filterVO.getUldNumbers()
                    .iterator().next());
			airportCode = uld.getCurrentStation();
		} catch (FinderException finderException) {
			throw new SystemException(finderException.getErrorCode());
		}

		return airportCode;
	}



	/**
	 *
	 * @param uldDetails
	 * @throws SystemException
	 */
    public void updateUCMULDDetails(
            Collection<ULDFlightMessageReconcileDetailsVO> uldDetails)
            throws SystemException {
		log.entering("ULDController", "updateUCMULDDetails");
		log.log(Log.INFO, "%%%%%%%%   uldDetails  ", uldDetails);
		Collection<String> ucmSeqNos = new ArrayList<String>();
		ULDFlightMessageReconcile reconcile = null;
		ULDFlightMessageReconcileVO reconcileVO = new ULDFlightMessageReconcileVO();
		Collection<ULDFlightMessageReconcileDetails> ucmulddetails = new ArrayList<ULDFlightMessageReconcileDetails>();
		Collection<ULDFlightMessageReconcileDetails> ucmulddetailstobedeleted = new ArrayList<ULDFlightMessageReconcileDetails>();
		if (uldDetails != null && uldDetails.size() > 0) {
			for (ULDFlightMessageReconcileDetailsVO detailsVO : uldDetails) {
				if (!ucmSeqNos.contains(detailsVO.getSequenceNumber())) {
					ucmSeqNos.add(detailsVO.getSequenceNumber());
					reconcileVO.setCompanyCode(detailsVO.getCompanyCode());
					reconcileVO.setAirportCode(detailsVO.getAirportCode());
                    reconcileVO.setFlightCarrierIdentifier(detailsVO
                            .getFlightCarrierIdentifier());
					reconcileVO.setFlightNumber(detailsVO.getFlightNumber());
                    reconcileVO.setFlightSequenceNumber(detailsVO
                            .getFlightSequenceNumber());
                    reconcileVO
                            .setSequenceNumber(detailsVO.getSequenceNumber());
					reconcileVO.setMessageType(detailsVO.getMessageType());
					try {
						reconcile = ULDFlightMessageReconcile.find(reconcileVO);
					} catch (FinderException ex) {
						// This should never come
					}
					if (reconcile != null) {
						ucmulddetails.addAll(reconcile.getReconcileDetails());
						log.log(Log.INFO, "%%%% ucmulddetails ", ucmulddetails);
					}
				}
					}
			log.log(Log.INFO, "%%%% ucmulddetails ", ucmulddetails);
			for (ULDFlightMessageReconcileDetailsVO detailsVO : uldDetails) {
				for (ULDFlightMessageReconcileDetails detailObject : ucmulddetails) {
                    if (detailsVO.getSequenceNumber().equals(
                    		Integer.toString(detailObject.getDetailsPK().getSequenceNumber()))
                            && detailsVO.getUldNumber().equals(
                                    detailObject.getDetailsPK().getUldNumber())) {
                        log.log(Log.INFO, "%%%%%%%  goijng to deleet0",
                                detailsVO);
						if (ULDFlightMessageReconcileDetailsVO.OPERATION_FLAG_DELETE
								.equals(detailsVO.getOperationFlag())) {
                            log.log(Log.INFO, "%%%%%%%  should ve deleted",
                                    detailsVO);
							ucmulddetailstobedeleted.add(detailObject);
							detailObject.remove();
						}
					}
				}
			}
			ucmulddetails.removeAll(ucmulddetailstobedeleted);
			for (ULDFlightMessageReconcileDetailsVO detailsVO : uldDetails) {
				for (ULDFlightMessageReconcileDetails detailObject : ucmulddetails) {
                    if (detailsVO.getSequenceNumber().equals(
                    		Integer.toString(detailObject.getDetailsPK().getSequenceNumber()))
                            && detailsVO.getUldNumber().equals(
                                    detailObject.getDetailsPK().getUldNumber())) {
						if (ULDFlightMessageReconcileDetailsVO.OPERATION_FLAG_UPDATE
								.equals(detailsVO.getOperationFlag())) {
							detailObject.update(detailsVO);
						}
					}
				}
                if (ULDFlightMessageReconcileDetailsVO.OPERATION_FLAG_INSERT
                        .equals(detailsVO.getOperationFlag())) {
                    ULDFlightMessageReconcileDetails dtl = new ULDFlightMessageReconcileDetails(
                            detailsVO);
                    log.log(Log.INFO,
                            "%%%%%%%%%%  ULDFlightMessageReconcileDetails  ",
                            detailsVO);
					ucmulddetails.add(dtl);
					new UCMValidator().reconcileUCMULDError(detailsVO);
				}
			}
		}
	}

	/***************************************************************************
	 *
	 * @param uldDetails
	 * @throws SystemException
	 */
    public void removeErrorCodeForULDsInSCM(
            Collection<ULDSCMReconcileDetailsVO> uldDetails)
            throws SystemException {
		log.entering("ULDController", "removeErrorCodeForULDsInSCM");
		if (uldDetails != null && uldDetails.size() > 0) {
			for (ULDSCMReconcileDetailsVO detailsVO : uldDetails) {
				ULDSCMReconcileDetails uLDSCMReconcileDetails = null;
				uLDSCMReconcileDetails = ULDSCMReconcileDetails.find(detailsVO);
				uLDSCMReconcileDetails.setErrorCode(null);
			}
		}
	}

	/**
	 *
	 * @param filterVO
	 * @throws SystemException
	 *             method siganture changed by A-2408 for implementing SCM CR
	 *             ,this now return the encoded collec of msg VOs.
	 */
    public Collection<MessageVO> sendSCMMessage(SCMMessageFilterVO filterVO, Collection<MessageDespatchDetailsVO> additionaldespatchDetailsVOs)
			throws SystemException, MessageConfigException {
		log.entering("ULDController", "sendSCMMessage");
		ULDSCMReconcileVO uLDSCMReconcileVO = null;

		uLDSCMReconcileVO = ULDSCMReconcile.sendSCMMessage(filterVO);

		ULDSCMReconcile uLDSCMReconcile = null;

		ULDSCMReconcileVO reconcileVO = new ULDSCMReconcileVO();

		reconcileVO.setCompanyCode(filterVO.getCompanyCode());
		reconcileVO.setAirlineIdentifier(filterVO.getFlightCarrierIdentifier());
		reconcileVO.setAirportCode(filterVO.getAirportCode());
		reconcileVO.setSequenceNumber(filterVO.getSequenceNumber());

		try {
			uLDSCMReconcile = ULDSCMReconcile.find(reconcileVO);
		} catch (FinderException e) {
			log.log(Log.FINE, "FINDER CAUGHT << SYSTEM THROWN ---1111");
			throw new SystemException(e.getErrorCode());
		}
		if ("S".equalsIgnoreCase(uLDSCMReconcile.getMessageSendFlag())) {
			uLDSCMReconcile.setMessageSendFlag("R");
		} else {
			uLDSCMReconcile.setMessageSendFlag("S");
		}

        return encodeSCMMessage(uLDSCMReconcileVO,additionaldespatchDetailsVOs);
	}

	/***************************************************************************
	 *
	 * @param uldDetails
	 * @throws SystemException
	 */
    public void deleteULDsInSCM(Collection<ULDSCMReconcileDetailsVO> uldDetails)
            throws SystemException {
		log.entering("ULDController", "deleteULDsInSCM");
		if (uldDetails != null && uldDetails.size() > 0) {
			for (ULDSCMReconcileDetailsVO detailsVO : uldDetails) {
				ULDSCMReconcileDetails uLDSCMReconcileDetails = null;
				uLDSCMReconcileDetails = ULDSCMReconcileDetails.find(detailsVO);
				uLDSCMReconcileDetails.remove();
				Collection<ULDDiscrepancy> uLDDiscrepancys = null;
				// Added By Sreekumar S as a part of AirNZ CR434
                uLDDiscrepancys = ULDDiscrepancy.findULDDiscrepanciesObjects(
                        detailsVO.getCompanyCode(), detailsVO.getUldNumber(),null);
                log.log(Log.INFO, " ENTRY IN DISCREPANCY FOR THE ULDNUM",
                        detailsVO.getUldNumber());
                log.log(Log.INFO,
                        " SETTING  SCMSEQNUM AS NULL IN DISCREPANCY TABLE");
				for (ULDDiscrepancy uLDDiscrepancy : uLDDiscrepancys) {
					uLDDiscrepancy.setScmSequenceNumber(null);
				}
			}
		}
	}

	/**
	 *
	 * @param poolOwnerVOs
	 * @throws SystemException
	 */
	public void saveULDPoolOwner(Collection<ULDPoolOwnerVO> poolOwnerVOs)
			throws SystemException, ULDDefaultsBusinessException {
		log.entering("ULDController", "saveULDPoolOwner");
		if (poolOwnerVOs != null && poolOwnerVOs.size() > 0) {
            log.log(Log.INFO, " inside uld controller first if123@#8",
                    poolOwnerVOs);
			for (ULDPoolOwnerVO poolOwnerVO : poolOwnerVOs) {
				log.log(Log.INFO, " inside uld controller for loop");
				log.log(Log.INFO, "Operation Flag==========>>>", poolOwnerVO.getOperationFlag());
                if (ULDPoolOwnerVO.OPERATION_FLAG_DELETE
                        .equalsIgnoreCase(poolOwnerVO.getOperationFlag())) {
					ULDPoolOwner uLDPoolOwner = null;
					try {
						uLDPoolOwner = ULDPoolOwner.find(poolOwnerVO);
                        for (ULDPoolSegmentExceptions exception : uLDPoolOwner
                                .getSegmentExceptions()) {

							exception.remove();
						}
						uLDPoolOwner.remove();
					} catch (FinderException e) {
						log.log(Log.INFO, "ULDPoolOwnerObject");
						log.log(Log.INFO, " FINDER CAUGHT--> SYSTEM THROWN");
						throw new SystemException(e.getErrorCode());
					}
				}
			}
			for (ULDPoolOwnerVO poolOwnerVO : poolOwnerVOs) {
                if (ULDPoolOwnerVO.OPERATION_FLAG_INSERT
                        .equalsIgnoreCase(poolOwnerVO.getOperationFlag())) {
                	
                	boolean duplicateConfigExists = findDuplicatePoolOwnerConfig(poolOwnerVO);
                	if(duplicateConfigExists){
                		throw new ULDDefaultsBusinessException(
                                "uld.defaults.uldpoolowners.msg.err.duplicatedata");
                	}
					ULDPoolOwner uLDPoolOwner = null;
					try {
						uLDPoolOwner = ULDPoolOwner.find(poolOwnerVO);
					} catch (FinderException e) {
						log.log(Log.INFO, "ULDPoolOwnerObject", uLDPoolOwner);
						log.log(Log.INFO, " FINDER CAUGHT--> SYSTEM THROWN");

					}
					if (uLDPoolOwner == null) {
						log.log(Log.INFO, "Inside if loop");
						new ULDPoolOwner(poolOwnerVO);
					} else {
                        throw new ULDDefaultsBusinessException(
                                "uld.defaults.uldpoolowners.msg.err.duplicatedata");
                    }
                } else if (ULDPoolOwnerVO.OPERATION_FLAG_UPDATE
                        .equalsIgnoreCase(poolOwnerVO.getOperationFlag())) {
					log.log(Log.INFO, " inside uld controller update");
					ULDPoolOwner uLDPoolOwner = null;
					try {
						log.log(Log.INFO, " inside uld controller update1");
						uLDPoolOwner = ULDPoolOwner.find(poolOwnerVO);
						uLDPoolOwner.update(poolOwnerVO);
					} catch (FinderException e) {
						log.log(Log.INFO, " FINDER CAUGHT--> SYSTEM THROWN");
						throw new SystemException(e.getErrorCode());
					}
				}
			}

		}
	}

	/**
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public Collection<ULDPoolOwnerVO> listULDPoolOwner(
            ULDPoolOwnerFilterVO filterVO) throws SystemException {
		log.entering("ULDController", "listULDPoolOwner");
		return ULDPoolOwner.listULDPoolOwner(filterVO);
	}

	/**
	 * @author A-1950
	 */
	class SecondDesignComparator implements Comparator<ULDTransactionDetailsVO> {
		/**
		 *
		 * @param vA
		 * @param vB
		 * @return
		 */
        public int compare(ULDTransactionDetailsVO vA,
                ULDTransactionDetailsVO vB) {
            return vA.getControlReceiptNumber().compareToIgnoreCase(
                    vB.getControlReceiptNumber());
		}
	}

	/**
	 *
     * @param
     * @throws
	 */
	class CRNComparator implements Comparator<ULDTransactionDetailsVO> {
		/**
		 *
		 * @param vA
		 * @param vB
		 * @return
		 */
        public int compare(ULDTransactionDetailsVO vA,
                ULDTransactionDetailsVO vB) {
            String vA1 = vA.getControlReceiptNumber().substring(5,
                    vA.getControlReceiptNumber().length());
            String vB1 = vB.getControlReceiptNumber().substring(5,
                    vB.getControlReceiptNumber().length());
			return vA1.compareToIgnoreCase(vB1);
		}
	}

	/**
	 *
	 * @param flightDetailsVO
	 * @throws SystemException
	 */
	/*
	 * Method for populating the Flt Message Table while sending the ULD from
	 * the Export Import/OffLoad
	 */
    public void updateFlightMessage(FlightDetailsVO flightDetailsVO)
            throws SystemException {
		log.log(Log.INFO, " FlightDetailsVO from Client ::", flightDetailsVO);
        Collection<ULDInFlightVO> uldsInFlight = flightDetailsVO
                .getUldInFlightVOs();
		String airportCode = null;
		String destinationAirportCode = null;
		String direction = flightDetailsVO.getDirection();
		if (uldsInFlight != null && uldsInFlight.size() > 0) {
			for (ULDInFlightVO vo : uldsInFlight) {
				airportCode = vo.getPointOfLading();
				destinationAirportCode = vo.getPointOfUnLading();
				break;
			}
		}
		FlightMessageFilterVO vo = new FlightMessageFilterVO();
		vo.setAirportCode(airportCode);
		vo.setCompanyCode(flightDetailsVO.getCompanyCode());
		vo.setDirection(flightDetailsVO.getDirection());
        vo.setFlightCarrierIdentifier(flightDetailsVO
                .getFlightCarrierIdentifier());
		vo.setFlightNumber(flightDetailsVO.getFlightNumber());
		vo.setFlightSequenceNumber(flightDetailsVO.getFlightSequenceNumber());
		vo.setSegmentSerialNumber(flightDetailsVO.getLegSerialNumber());
		log.log(Log.INFO, " FlightMessageFilterVO before Query ::", vo);
		FlightDetailsVO detailsVO = ULDFlightMessage.findUCMFlightDetails(vo);
		log.log(Log.INFO, " Detials VO from the Query  ::", detailsVO);
		int counter = 0;
		int newCounter = 0;
		if (detailsVO != null) {
			Collection<ULDInFlightVO> newVOs = detailsVO.getUldInFlightVOs();
			if (newVOs != null && newVOs.size() > 0) {
				counter = newVOs.size();
				log.log(Log.INFO, " Counter Size  ::", counter);
				for (ULDInFlightVO vo1 : uldsInFlight) {
					boolean isFound = false;
					for (ULDInFlightVO vo2 : newVOs) {
						if (vo1.getUldNumber().equals(vo2.getUldNumber())) {
							isFound = true;
						}
					}
					if (IMPORT.equals(direction) || EXPORT.equals(direction)) {
						if (!isFound) {
							ULDFlightMessageDetailsVO flightMessageDetailsVO = new ULDFlightMessageDetailsVO();
                            flightMessageDetailsVO
                                    .setCompanyCode(flightDetailsVO
                                            .getCompanyCode());
                            flightMessageDetailsVO.setStationCode(airportCode);
                            flightMessageDetailsVO
                                    .setLegSerialNumber(flightDetailsVO
                                            .getLegSerialNumber());
                            flightMessageDetailsVO
                                    .setFlightSequenceNumber(new Integer(String
                                            .valueOf(flightDetailsVO
                                                    .getFlightSequenceNumber()))
                                            .intValue());
                            flightMessageDetailsVO
                                    .setFlightNumber(flightDetailsVO
                                            .getFlightNumber());
                            flightMessageDetailsVO
                                    .setFlightCarrierId(flightDetailsVO
                                            .getFlightCarrierIdentifier());
                            flightMessageDetailsVO.setContent(vo1.getContent());
                            flightMessageDetailsVO.setPointOfUnloading(vo1
                                    .getPointOfUnLading());
                            flightMessageDetailsVO.setUldNumber(vo1
                                    .getUldNumber());
							ULDFlightMessagePK pk = new ULDFlightMessagePK();
							pk.setCompanyCode(flightDetailsVO.getCompanyCode());
							pk.setStationCode(airportCode);
                            pk.setLegSerialNumber(flightDetailsVO
                                    .getLegSerialNumber());
                            pk.setFlightSequenceNumber(new Integer(String
                                    .valueOf(flightDetailsVO
                                            .getFlightSequenceNumber()))
                                    .intValue());
                            pk.setFlightNumber(flightDetailsVO
                                    .getFlightNumber());
                            pk.setFlightCarrierId(flightDetailsVO
                                    .getFlightCarrierIdentifier());
                            new ULDFlightMessageDetails(flightMessageDetailsVO,
                                    pk);
						}
					} else if (direction.equals(OFFLOAD)) {
						if (isFound) {
							newCounter = newCounter + 1;
							ULDFlightMessageDetailsVO flightMessageDetailsVO = new ULDFlightMessageDetailsVO();
                            flightMessageDetailsVO
                                    .setCompanyCode(flightDetailsVO
                                            .getCompanyCode());
                            flightMessageDetailsVO.setStationCode(airportCode);
                            flightMessageDetailsVO
                                    .setLegSerialNumber(flightDetailsVO
                                            .getLegSerialNumber());
                            flightMessageDetailsVO
                                    .setFlightSequenceNumber(new Integer(String
                                            .valueOf(flightDetailsVO
                                                    .getFlightSequenceNumber()))
                                            .intValue());
                            flightMessageDetailsVO
                                    .setFlightNumber(flightDetailsVO
                                            .getFlightNumber());
                            flightMessageDetailsVO
                                    .setFlightCarrierId(flightDetailsVO
                                            .getFlightCarrierIdentifier());
                            flightMessageDetailsVO.setContent(vo1.getContent());
                            flightMessageDetailsVO.setPointOfUnloading(vo1
                                    .getPointOfUnLading());
                            flightMessageDetailsVO.setUldNumber(vo1
                                    .getUldNumber());
                            log.log(Log.INFO, " Inside the Off Load Condition",
                                    flightMessageDetailsVO);
							ULDFlightMessageDetails messageDetails = ULDFlightMessageDetails
									.find(flightMessageDetailsVO);
							messageDetails.remove();
						}
					}
				}
				log.log(Log.INFO, " New Counter", newCounter);
				if (counter == newCounter) {
					ULDFlightMessageVO flightMessageVo = new ULDFlightMessageVO();
                    flightMessageVo.setCompanyCode(flightDetailsVO
                            .getCompanyCode());
					flightMessageVo.setStationCode(airportCode);
                    flightMessageVo.setLegSerialNumber(flightDetailsVO
                            .getLegSerialNumber());
                    flightMessageVo
                            .setFlightSequenceNumber(new Integer(String
                                    .valueOf(flightDetailsVO
                                            .getFlightSequenceNumber()))
                                    .intValue());
                    flightMessageVo.setFlightNumber(flightDetailsVO
                            .getFlightNumber());
                    flightMessageVo.setFlightCarrierId(flightDetailsVO
                            .getFlightCarrierIdentifier());
                    ULDFlightMessage uldFlightMessage = ULDFlightMessage
                            .find(flightMessageVo);
					uldFlightMessage.remove();
				}
			}
        } else if (detailsVO == null
                && (IMPORT.equals(direction) || EXPORT.equals(direction))) {
			log.log(Log.INFO, " Detials VO is Null Hence going for Insert");
			ULDFlightMessageVO flightMessageVO = new ULDFlightMessageVO();
			flightMessageVO.setCompanyCode(flightDetailsVO.getCompanyCode());
			flightMessageVO.setStationCode(airportCode);
            flightMessageVO.setLegSerialNumber(flightDetailsVO
                    .getLegSerialNumber());
            flightMessageVO.setFlightSequenceNumber(new Integer(String
                    .valueOf(flightDetailsVO.getFlightSequenceNumber()))
                    .intValue());
			flightMessageVO.setFlightNumber(flightDetailsVO.getFlightNumber());
            flightMessageVO.setFlightCarrierId(flightDetailsVO
                    .getFlightCarrierIdentifier());
            flightMessageVO.setFlightDate(flightDetailsVO.getFlightDate()
                    .toGMTDate());
			flightMessageVO.setLegOrigin(airportCode);
			flightMessageVO.setLegDestination(destinationAirportCode);
            Collection<ULDInFlightVO> ulds = flightDetailsVO
                    .getUldInFlightVOs();
			Collection<ULDFlightMessageDetailsVO> vos = null;
			if (uldsInFlight != null && uldsInFlight.size() > 0) {
				vos = new ArrayList<ULDFlightMessageDetailsVO>();
				for (ULDInFlightVO vo3 : ulds) {
					ULDFlightMessageDetailsVO flightMessageDetailsVO = new ULDFlightMessageDetailsVO();
                    flightMessageDetailsVO.setCompanyCode(flightDetailsVO
                            .getCompanyCode());
                    flightMessageDetailsVO.setStationCode(airportCode);
                    flightMessageDetailsVO.setLegSerialNumber(flightDetailsVO
                            .getLegSerialNumber());
                    flightMessageDetailsVO.setFlightSequenceNumber(new Integer(
                            String.valueOf(flightDetailsVO
                                    .getFlightSequenceNumber())).intValue());
                    flightMessageDetailsVO.setFlightNumber(flightDetailsVO
                            .getFlightNumber());
                    flightMessageDetailsVO.setFlightCarrierId(flightDetailsVO
                            .getFlightCarrierIdentifier());
					flightMessageDetailsVO.setContent(vo3.getContent());
                    flightMessageDetailsVO.setPointOfUnloading(vo3
                            .getPointOfUnLading());
					flightMessageDetailsVO.setUldNumber(vo3.getUldNumber());
					vos.add(flightMessageDetailsVO);
				}
			}
			flightMessageVO.setUldFlightMessageDetailsVOs(vos);
            log.log(Log.INFO, "Before Going to Save the Details::",
                    flightMessageVO);
			new ULDFlightMessage(flightMessageVO);
		}
	}

	/***************************************************************************
	 *
	 * @param uldFlightMessageVO
	 * @throws SystemException
	 */
    public void updateFlightMessageForCPM(ULDFlightMessageVO uldFlightMessageVO1)
            throws SystemException {
        log.log(Log.INFO, " ULDFlightMessageVO from Client ::",
        		uldFlightMessageVO1);
        //Added by A-7359 for ICRD-298699
        ULDFlightMessageVO uldFlightMessageVO =sanitizingUldsFromCPM(uldFlightMessageVO1);
        Collection<ULDFlightMessageDetailsVO> uldsInFlight = uldFlightMessageVO
                .getUldFlightMessageDetailsVOs();
		// added by a-3045 for bug20317, appending zeros to flightnumber so as
		// to make the length as 4
		if (uldFlightMessageVO.getFlightNumber() != null) {
            log.log(Log.INFO,
                    " inside uldFlightMessageVO.getFlightNumber() != null");
			if (uldFlightMessageVO.getFlightNumber().length() == 3) {
                uldFlightMessageVO.setFlightNumber("0"
                        + uldFlightMessageVO.getFlightNumber());
			} else if (uldFlightMessageVO.getFlightNumber().length() == 2) {
                uldFlightMessageVO.setFlightNumber("00"
                        + uldFlightMessageVO.getFlightNumber());
			} else if (uldFlightMessageVO.getFlightNumber().length() == 1) {
                uldFlightMessageVO.setFlightNumber("000"
                        + uldFlightMessageVO.getFlightNumber());
            }
            log.log(Log.INFO,
                    " inside uldFlightMessageVO.getFlightNumber() != null",
					uldFlightMessageVO.getFlightNumber());
		}
		// added by a-3045 for bug20317
		FlightMessageFilterVO vo = new FlightMessageFilterVO();
		vo.setAirportCode(uldFlightMessageVO.getStationCode());
		vo.setCompanyCode(uldFlightMessageVO.getCompanyCode());
		vo.setDirection(EXPORT);
		vo.setFlightCarrierIdentifier(uldFlightMessageVO.getFlightCarrierId());
		vo.setFlightNumber(uldFlightMessageVO.getFlightNumber());
        vo
                .setFlightSequenceNumber(uldFlightMessageVO
                        .getFlightSequenceNumber());
		vo.setSegmentSerialNumber(uldFlightMessageVO.getLegSerialNumber());
		log.log(Log.INFO, " FlightMessageFilterVO before Query ::", vo);
		FlightDetailsVO detailsVO = ULDFlightMessage.findUCMFlightDetails(vo);
		log.log(Log.INFO, " Detials VO from the Query  ::", detailsVO);
		if (detailsVO != null) {
			log.log(Log.INFO, " inside detailsVO != null");
			Collection<ULDInFlightVO> newVOs = detailsVO.getUldInFlightVOs();
			if (newVOs != null && newVOs.size() > 0) {
				log.log(Log.INFO, " inside newVOs != null");
				for (ULDFlightMessageDetailsVO vo1 : uldsInFlight) {
					log.log(Log.INFO, " inside for loop uldsInFlight");
					boolean isFound = false;
					for (ULDInFlightVO vo2 : newVOs) {
						log.log(Log.INFO, " inside for loop newVOs");
						if (vo1.getUldNumber().equals(vo2.getUldNumber())) {
							isFound = true;
                            log
                                    .log(Log.INFO, "isFound------------->>",
                                            isFound);
							break;
						}
					}
					if (!isFound) {
						log.log(Log.INFO, " inside !isFound");
						ULDFlightMessagePK pk = new ULDFlightMessagePK();
						pk.setCompanyCode(uldFlightMessageVO.getCompanyCode());
						pk.setStationCode(uldFlightMessageVO.getStationCode());
                        pk.setLegSerialNumber(uldFlightMessageVO
                                .getLegSerialNumber());
                        pk.setFlightSequenceNumber(uldFlightMessageVO
                                .getFlightSequenceNumber());
						// added by a-3045 for bug20317, appending zeros to
						// flightnumber so as to make the length as 4
                        pk
                                .setFlightNumber(uldFlightMessageVO
                                        .getFlightNumber());
                        vo1.setFlightNumber(uldFlightMessageVO
                                .getFlightNumber());
                        log.log(Log.INFO,
                                "vo1.getFlightNumber()-@@@@------------>>", vo1.getFlightNumber());
                        log
                                .log(
                                        Log.INFO,
                                        "uldFlightMessageVO.getFlightNumber()------------->>",
                                        uldFlightMessageVO.getFlightNumber());
                        // added by a-3045 for bug20317
                        pk.setFlightCarrierId(uldFlightMessageVO
                                .getFlightCarrierId());
						new ULDFlightMessageDetails(vo1, pk);
					} else {
						log.log(Log.INFO, " inside !isFound else");
						// Added by Preet on 10Sep08 for bug 18166 starts
						// If ULD already there in flight , update the contents
						ULDFlightMessageDetailsVO flightDetailsVO = new ULDFlightMessageDetailsVO();
                        flightDetailsVO.setCompanyCode(uldFlightMessageVO
                                .getCompanyCode());
                        flightDetailsVO.setStationCode(uldFlightMessageVO
                                .getStationCode());
                        flightDetailsVO.setLegSerialNumber(uldFlightMessageVO
                                .getLegSerialNumber());
                        flightDetailsVO
                                .setFlightSequenceNumber(uldFlightMessageVO
                                        .getFlightSequenceNumber());
                        flightDetailsVO.setFlightNumber(uldFlightMessageVO
                                .getFlightNumber());
                        flightDetailsVO.setFlightCarrierId(uldFlightMessageVO
                                .getFlightCarrierId());
						flightDetailsVO.setUldNumber(vo1.getUldNumber());

                        log.log(Log.INFO, "flightDetailsVO filter is --",
                                flightDetailsVO);
                        ULDFlightMessageDetails uLDFlightMessageDetails = ULDFlightMessageDetails
                                .find(flightDetailsVO);
						if (uLDFlightMessageDetails != null) {
                            log
                                    .log(
                                            Log.INFO,
                                            "ULDFlightMessageDetails FOUND -vo1.getContent()--",
                                            vo1.getContent());
                            log
                                    .log(
                                            Log.INFO,
                                            "ULDFlightMessageDetails FOUND --vo1.getUldNumber() -",
											vo1.getUldNumber());
                            uLDFlightMessageDetails
                                    .setContent(vo1.getContent());
							uLDFlightMessageDetails.setUldWeight(vo1.getUldWeight()!=null?vo1.getUldWeight().getSystemValue()/* As part of correcting the Measure usage in setting value to entity classes ICRD-288684 */:0.0);
						}
					}
					// Added by Preet on 10Sep08 for bug 18166 ends
				}
			}
		} else if (detailsVO == null) {
			log.log(Log.INFO, " inside detailsVO == null");
			new ULDFlightMessage(uldFlightMessageVO);
		}
		// Added by Preet on 16Sep08 for bug 18336 starts
		// Perform Audit for CPM
        ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
                ULDAgreementVO.ENTITY);
        log.log(Log.FINE,
                "---CPM AUDIT------setting ULDConfigsAuditVO VO-------");
        StringBuffer additionalInfo = new StringBuffer();

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

        uldConfigAuditVO.setCompanyCode(logonAttributes.getCompanyCode());
        String airportCode = logonAttributes.getAirportCode();
        uldConfigAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP,
                true).toGMTDate());
        uldConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                Location.ARP, true));
		uldConfigAuditVO.setUserId(logonAttributes.getUserId());
		uldConfigAuditVO.setStationCode(logonAttributes.getAirportCode());
		// uldConfigAuditVO.setAuditRemarks(lucMessageVO.getSupplInfoVO().getRemarks());

		additionalInfo.append("Flight:");
        additionalInfo.append(new StringBuilder(uldFlightMessageVO
                .getFlightCarrierId()).append(uldFlightMessageVO
                .getFlightNumber()));
		additionalInfo.append(";FlightDate:");
        additionalInfo.append(new StringBuilder(uldFlightMessageVO
                .getFlightDate().toString()).append(";"));

		if (uldsInFlight != null && uldsInFlight.size() > 0) {
			for (ULDFlightMessageDetailsVO uldDetailsVO : uldsInFlight) {
				additionalInfo.append("ULDNo:");
                additionalInfo.append(new StringBuilder(uldDetailsVO
                        .getUldNumber()));
                if(uldDetailsVO.getPointOfUnloading() != null &&
                        uldDetailsVO.getPointOfUnloading().trim().length() > 0){
				additionalInfo.append(",Destination:");
                additionalInfo.append(new StringBuilder(uldDetailsVO
                        .getPointOfUnloading()));
                }
                if(uldDetailsVO.getContent() != null &&
                        uldDetailsVO.getContent().trim().length() > 0){
				additionalInfo.append(",Content:");
                    additionalInfo.append(new StringBuilder().append(uldDetailsVO
                        .getContent()).append(";"));
			}
		}
		}
		uldConfigAuditVO.setAdditionalInformation(additionalInfo.toString());
		uldConfigAuditVO.setActionCode(PROCESS_CPMMESSAGE);
		log.log(Log.INFO, "uldConfigAuditVO---------->>", uldConfigAuditVO);
		AuditUtils.performAudit(uldConfigAuditVO);
		log.log(Log.INFO, " going back");
		// Added by Preet on 16Sep08 for bug 18336 ends
	}
    /**
    *
    *  Method      :   ULDController.sanitizingUldsFromCPM
    *  Added by    :   A-7359 on 21-Nov-2018
    *  Used for    :   ICRD-298699
    *  Parameters  :   @param uldFlightMessageVO1
    *  Return type :   ULDFlightMessageVO
    * @throws SystemException
    */
    private ULDFlightMessageVO sanitizingUldsFromCPM(ULDFlightMessageVO uldFlightMessageVO1) throws SystemException {
    	log.entering("ULDController", "sanitizingUldsFromCPM");
    	ULDFlightMessageVO tempuldFlightMessageVO = new ULDFlightMessageVO();
        BeanHelper.copyProperties(tempuldFlightMessageVO, uldFlightMessageVO1);
        Map<String, ULDFlightMessageDetailsVO> finalVOMap = new HashMap<String, ULDFlightMessageDetailsVO>();
        for (ULDFlightMessageDetailsVO vo1 : uldFlightMessageVO1.getUldFlightMessageDetailsVOs()) {
        	 if(!finalVOMap.containsKey(vo1.getUldNumber())){
        		 finalVOMap.put(vo1.getUldNumber(), vo1);
        	 }else{
        		 ULDFlightMessageDetailsVO tempVO= new ULDFlightMessageDetailsVO();
        		 tempVO=finalVOMap.get(vo1.getUldNumber());
        		 double finalWeight=(vo1.getUldWeight()!=null?vo1.getUldWeight().getRoundedSystemValue():0.0)+(tempVO.getUldWeight()!=null?tempVO.getUldWeight().getRoundedSystemValue():0.0);
        		 Measure weightfromDB= new Measure(UnitConstants.WEIGHT,finalWeight);
        		 tempVO.setUldWeight(weightfromDB);
        		 finalVOMap.put(vo1.getUldNumber(),tempVO);
     	         
        	 }
        }
        log.log(Log.INFO, "finalVOMap---------->>", finalVOMap);
        if(!finalVOMap.isEmpty()){
        	 Collection<ULDFlightMessageDetailsVO> finalVOs= new ArrayList<ULDFlightMessageDetailsVO>();
        	  for (ULDFlightMessageDetailsVO tempVO : finalVOMap.values()){
        		  finalVOs.add(tempVO);
        	  }
        		  
        	tempuldFlightMessageVO.setUldFlightMessageDetailsVOs(finalVOs);
        }
    	log.exiting("ULDController", "sanitizingUldsFromCPM");
		return tempuldFlightMessageVO;
	}
	/**
	 *
	 * @param filterVO
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDSCMReconcileVO> listSCMMessageLOV(SCMMessageFilterVO filterVO)
            throws SystemException {
		log.entering("ULDController", "listSCMMessageLOV");
		return ULDSCMReconcile.listSCMMessageLOV(filterVO);

	}

	/**
	 *
	 * @param lucMessageVO
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 *             method changed allover by nisha for QF CR 1013 this method is
	 *             used for processing LUC, depending upon the message inf
	 *             loan/borrow/return txns will be saved
     *//* Method replaced by A-3415 for ICRD-114538
    public void processLUCMessage(LUCMessageVO lucMessageVO)
            throws SystemException, ULDDefaultsBusinessException,
            CurrencyConversionException, DimensionConversionException,
            MessageConfigException, AgreementDoesNotExistsException,
            RemoteException {
        log.entering("ULDController", "processLUCMessage");

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

        log.log(Log.INFO, "%%%%%%%%%%%   lucMessageVO %%%%%%%%%%%",
                lucMessageVO);
        String uldNumber = null;
        String uldOwner = null;
        String fromParty = null;
        String toParty = null;
        String ownAirline = logonAttributes.getOwnAirlineCode();
        TransactionListVO listVO = null;
        boolean isAirline = true;
        boolean isAgent = false;
        TransactionFilterVO txnFilterVO = new TransactionFilterVO();
        // transaction details vos contain vos to be send to saveULDTransaction
        // method....
        Collection<ULDTransactionDetailsVO> transactionDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
        // uldReturnTxnVOs will contain the vos to b send to
        // returnULDFromOperations method....
        Collection<ULDReturnTxnVO> uldReturnTxnVOs = new ArrayList<ULDReturnTxnVO>();
        // Commented by a-3045 for bug 28899 on 11Dec08
        // Collection<ULDTransactionDetailsVO> txnDtsVOsForUpdation = null;
        // ULDTransactionDetailsVO uldTxnDetailsVOForUpdation = null;
        // added by a-3045 for bug17959 starts
        Collection<String> uLDNums = new ArrayList<String>();
        Collection<String> invalidUlds = new ArrayList<String>();
        String uldNumbers = null;
        String airlineId = null;
        String crnPrefix = null;
        StringBuilder diffCRN = null;
        if (lucMessageVO.getUldDetails() != null
                && lucMessageVO.getUldDetails().size() > 0) {
            for (LUCULDDetailsVO uldDetailsVO : lucMessageVO.getUldDetails()) {
                uldNumbers = new StringBuilder().append(
                        uldDetailsVO.getUldIdentificationVO().getUldType())
                        .append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldSerialNumber()).append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldOwnerCode()).toString();
                uLDNums.add(uldNumbers);
                // added by a-3045 for bug57459 on 13Aug09 starts
                crnPrefix = uldDetailsVO.getUldReceiptNumber().substring(0, 3);

                //Commented as part of ICRD 21184
                //              airlineId = ULD.findAirlineCode(logonAttributes
                //                      .getCompanyCode(), uldDetailsVO
                //                      .getTransferringPartyDetailsVO().getCarrierCode());

                //Added as part of ICRD 21184 starts
                AirlineValidationVO airlineValidationVO = null;
                SharedAirlineProxy airlineProxy = new SharedAirlineProxy();

                try {
                        airlineValidationVO = airlineProxy.validateAlphaCode(logonAttributes
                        .getCompanyCode(), uldDetailsVO
                        .getTransferringPartyDetailsVO().getCarrierCode());
                    }catch(ProxyException pe){
                        log.log(Log.SEVERE, " Airline ProxyException" );
                    }
                    airlineId=airlineValidationVO.getNumericCode();
                //Added as part of ICRD 21184 ends


                if (!crnPrefix.equals(airlineId)) {
                    if (diffCRN != null && diffCRN.length() > 0) {
                        diffCRN.append(",").append(uldNumbers);
                    } else {
                        diffCRN = new StringBuilder(uldNumbers);
                    }

                }
                // added by a-3045 for bug57459 on 13Aug09 ends
            }
            invalidUlds = checkULDInUse(logonAttributes.getCompanyCode(),
                    uLDNums);
            if (invalidUlds != null && invalidUlds.size() > 0) {
                // added by a-3045 for bug 48052 on 18May09 starts
                String invalidULDStr = null;
                StringBuilder invalidULDBuilder = new StringBuilder(
                        "The ULD(s) ");
                int count = 0;
                for (String uld : invalidUlds) {
                    if (count == 0) {
                        invalidULDBuilder.append(uld);
                    } else {
                        invalidULDBuilder.append(",").append(uld);
                    }
                    count++;
                }
                invalidULDStr = invalidULDBuilder.append(" InUse").toString();
                throw new ULDDefaultsBusinessException(
                        "uld.defaults.loanborrow.msg.err.uldsinuse",
                        new Object[] { invalidULDStr });
                // added by a-3045 for bug 48052 on 18May09 ends
            }
            // added by a-3045 for bug57459 on 13Aug09 starts
            if (diffCRN != null && diffCRN.length() > 0) {
                diffCRN.append(" - From Carrier & CRN Prefix does not match");
                throw new ULDDefaultsBusinessException(
                        "uld.defaults.loanborrow.msg.err.diffcrnfromcarrier",
                        new Object[] { diffCRN.toString() });
            }
            // added by a-3045 for bug57459 on 13Aug09 ends
        }
        // added by a-3045 for bug17959 ends
        // added by a-3045 for bug 48052 on 18May09 starts
        String txnAlreadyExistsULDs = null;
        StringBuilder txnAlreadyExistsStrBldr = null;
        int index = 0;
        // added by a-3045 for bug 48052 on 18May09 ends

        // Added by a-3278 for bug 84587 on 01Mar10 starts
        StringBuilder samePartyStrBldr = null;
        int flagVal = 0;
        // bug 84587 ends
        if (lucMessageVO.getUldDetails() != null
                && lucMessageVO.getUldDetails().size() > 0) {
            for (LUCULDDetailsVO uldDetailsVO : lucMessageVO.getUldDetails()) {
                uldNumber = new StringBuilder().append(
                        uldDetailsVO.getUldIdentificationVO().getUldType())
                        .append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldSerialNumber()).append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldOwnerCode()).toString();
                try {
                    validateULDFormat(logonAttributes.getCompanyCode(),
                            uldNumber);
                } catch (InvalidULDFormatException e) {
                    throw new ULDDefaultsBusinessException(e.getMessage());
                }
                uldOwner = uldDetailsVO.getUldIdentificationVO()
                        .getUldOwnerCode();
                fromParty = uldDetailsVO.getTransferringPartyDetailsVO()
                        .getCarrierCode();
                toParty = uldDetailsVO.getReceivingPartyDetailsVO()
                        .getCarrierCode();
                if (toParty != null) {
                    if (NON_CARRIERID.equals(toParty)) {
                        isAirline = false;
                        toParty = uldDetailsVO.getReceivingPartyDetailsVO()
                                .getNonCarrierId();
                        // vaidate agent
                        AgentVO agentVO = new SharedAgentProxy()
                                .findAgentDetails(logonAttributes
                                        .getCompanyCode(), toParty);
                        if (agentVO != null) {
                            isAgent = true;
                        } else {
                            isAgent = false;
                        }
                    }
                }
                log.log(Log.INFO, "To party code");
                if (uldOwner != null && fromParty != null && toParty != null
                        && uldNumber != null) {
                    // Added by a-3278 for 84587 on 01Mar10 starts
                    if (fromParty.equals(toParty)) {
                        if (flagVal == 0) {
                            samePartyStrBldr = new StringBuilder()
                                    .append(uldNumber);
                        } else {
                            samePartyStrBldr = samePartyStrBldr.append(",")
                                    .append(uldNumber);
                        }
                        flagVal++;
                    }
                    // 84587 ends
                    if (uldOwner.equals(fromParty)) {
                        txnFilterVO.setCompanyCode(logonAttributes
                                .getCompanyCode());
                        txnFilterVO.setUldNumber(uldNumber);
                        txnFilterVO.setFromPartyCode(fromParty);
                        txnFilterVO.setTransactionStatus(TO_BE_RETURNED);
                        txnFilterVO.setTransactionType(ALL);
                        txnFilterVO.setPageNumber(1);
                        // txnFilterVO.setPartyType(PARTYTYPE_AIRLINE);
                        listVO = listULDTransactionDetails(txnFilterVO);
                        if (listVO != null
                                && listVO.getTransactionDetailsPage() != null
                                && listVO.getTransactionDetailsPage().size() > 0) {
                            log.log(Log.INFO, "LOAN TXN ALREADY EXISTS!!!!!");
                            // commented by a-3045 for bug 28899 on 11Dec08
                            // added by a-3045 for bug 19982 starts
                            // This is to update an already existing transaction
                            // in TO_BE_RETURNED status

							 * txnDtsVOsForUpdation = new ArrayList<ULDTransactionDetailsVO>();
							 * uldTxnDetailsVOForUpdation =
							 * listVO.getTransactionDetailsPage().get(0);
                             * uldTxnDetailsVOForUpdation.setControlReceiptNumber(uldDetailsVO.getUldReceiptNumber());
                             * String dateOfMonth =
							 * uldDetailsVO.getDateofTransfer(); String time =
                             * String.valueOf(uldDetailsVO.getTimeofTransfer());
                             * if(time.length() < 2){ time = new
                             * StringBuilder("000").append(time).toString();
                             * }else if(time.length() < 3){ time = new
                             * StringBuilder("00").append(time).toString();
                             * }else if(time.length() < 4){ time = new
                             * StringBuilder("0").append(time).toString(); }
							 * LocalDate localDate = new LocalDate(uldDetailsVO
                             * .getLocationOftransfer(), Location.ARP, true);
                             * String date = new
                             * StringBuilder().append(dateOfMonth).append(time)
                             * .toString(); log.log(Log.INFO, "%%%%%%%%%%%%%%
                             * date in String Format" + date);
                             * localDate.setDateAndTime(date, "ddMMMyyHHmm");
                             * log.log(Log.INFO, "%%%%%%%%%%% localDate %%%%%%" +
                             * localDate);
							 * uldTxnDetailsVOForUpdation.setTransactionDate(localDate);
                             * uldTxnDetailsVOForUpdation.setTxStationCode(uldDetailsVO.getDestinationLocation());
							 * uldTxnDetailsVOForUpdation.setTransactionStationCode(uldDetailsVO
							 * .getLocationOftransfer());
                             * uldTxnDetailsVOForUpdation.setUldConditionCode(uldDetailsVO.getUldConditionDetailsVO()
                             * .getUldCondition());
							 * txnDtsVOsForUpdation.add(uldTxnDetailsVOForUpdation);
							 * log.log(Log.INFO,
                             * "%%%%%%%%%%%%%%uldTxnDetailsVOForUpdation"+uldTxnDetailsVOForUpdation);

                            // added by a-3045 for bug 19982 ends
                            // uncommented by a-3045 for bug 28899 on 11Dec08
                            // Commented and added by a-3045 for bug 48052 on
                            // 18May09 starts
                            // throw new
                            // ULDDefaultsBusinessException("uld.defaults.transaction.loaneduld.alreadyloaned");
                            if (index == 0) {
                                txnAlreadyExistsStrBldr = new StringBuilder(
                                        "Transaction already exists for ULD(s) ")
                                        .append(uldNumber);
                            } else {
                                txnAlreadyExistsStrBldr = txnAlreadyExistsStrBldr
                                        .append(",").append(uldNumber);
                            }
                            index++;
                            // Commented and added by a-3045 for bug 48052 on
                            // 18May09 ends
                        } else {
                            ULDTransactionDetailsVO vo = new ULDTransactionDetailsVO();
                            vo.setCompanyCode(logonAttributes.getCompanyCode());
                            vo.setUldNumber(uldNumber);
                            if (isAirline) {
                                vo.setPartyType(PARTYTYPE_AIRLINE);
                            } else if (isAgent) {
                                vo.setPartyType(AGENT);
                            } else {
                                vo.setPartyType(OTHERS);
                            }
                            Set<String> codes = new HashSet<String>();
                            // codes.add(carrierCode);
                            codes.add(fromParty);
                            if (isAirline) {
                                codes.add(toParty);
                            }
                            //Commented as part of ICRD 21184
                            //HashMap<String, Integer> airlineIdMap = ULD
                            //      .listAirlineIdentifiers(lucMessageVO
                            //              .getCompanyCode(), codes);

                            //Added as part of ICRD 21184 starts
                            Map<String, AirlineValidationVO> airlineIdMap=null;
                            try {
                            airlineIdMap=new SharedAirlineProxy().validateAlphaCodes(lucMessageVO.getCompanyCode(), codes);
                            } catch(ProxyException e) {
                                //proxy exception
                            }
                            log.log(Log.INFO, "%%%%%%%%%%airlineIdMap%%%%%%",
                                    airlineIdMap);
                            if (isAirline) {
                                log.log(Log.INFO, "<____ To party ____>");
                                if (airlineIdMap.containsKey(toParty)) {
                                    log.log(Log.INFO, "<____ To party ____>",
                                            airlineIdMap.get(toParty));
                                    //Added as part of ICRD 21184 starts
                                    vo.setOperationalAirlineIdentifier(airlineIdMap
                                                    .get(toParty).getAirlineIdentifier());
                                    //Added as part of ICRD 21184 ends
                                } else {
                                    String err = "";
                                    StringBuilder invalidArl = new StringBuilder(
                                            " Airline code  ");
                                    err = invalidArl.append(toParty).append(
                                            "  does not exist ").toString();
                                    throw new ULDDefaultsBusinessException(
                                            "uld.defaults.luc.msg.err.invalidtoairline",
                                            new Object[] { err });
                                }

                            } else {
                                if (airlineIdMap.containsKey(fromParty)) {
                                    //Commented as part of ICRD 21184
                                    //vo.setOperationalAirlineIdentifier(airlineIdMap
                                    //              .get(fromParty));

                                    //Added as part of ICRD 21184 starts
                                    vo.setOperationalAirlineIdentifier(airlineIdMap
                                                    .get(fromParty).getAirlineIdentifier());
                                    //Added as part of ICRD 21184 ends
                                } else {
                                    String err = "";
                                    StringBuilder invalidArl = new StringBuilder(
                                            " Airline code  ");
                                    err = invalidArl.append(fromParty).append(
                                            "  does not exist ").toString();
                                    throw new ULDDefaultsBusinessException(
                                            "uld.defaults.luc.msg.err.invalidfromairline",
                                            new Object[] { err });
                                }

                            }
                            if (uldDetailsVO.getUldConditionDetailsVO()
                                    .getDamageCode() != null) {
                                vo.setDamageStatus(DAMAGED);
                            }
                            if (uldDetailsVO.getUldConditionDetailsVO()
                                    .getServiceableCode() != null) {
                                vo.setDamageStatus(NOT_DAMAGED);
                            }
                            vo.setFromPartyCode(fromParty);
                            //Commented as part of ICRD 21184
                            //vo.setFromPartyIdentifier(airlineIdMap
                            //      .get(fromParty));

                            //vo.setCurrOwnerCode(airlineIdMap.get(fromParty));

                            //Added as part of ICRD 21184 starts
                            vo.setFromPartyIdentifier(airlineIdMap
                                    .get(fromParty).getAirlineIdentifier());
                            vo.setCurrOwnerCode(airlineIdMap.get(fromParty)
                                    .getAirlineIdentifier());
                            //Added as part of ICRD 21184 ends

                            vo.setToPartyCode(toParty);

                            if (isAirline) {
                                //Commented as part of ICRD 21184
                                //vo.setToPartyIdentifier(airlineIdMap
                                //      .get(toParty));

                                //Added as part of ICRD 21184 starts
                                vo.setToPartyIdentifier(airlineIdMap
                                        .get(toParty).getAirlineIdentifier());
                                //Added as part of ICRD 21184 ends
                            }
                            vo.setControlReceiptNumber(uldDetailsVO
                                    .getUldReceiptNumber());
                            vo.setLastUpdateUser(logonAttributes.getUserId());
                            String dateOfMonth = uldDetailsVO
                                    .getDateofTransfer();
                            String time = String.valueOf(uldDetailsVO
                                    .getTimeofTransfer());
                            if (time.length() < 2) {
                                time = new StringBuilder("000").append(time)
                                        .toString();
                            } else if (time.length() < 3) {
                                time = new StringBuilder("00").append(time)
                                        .toString();
                            } else if (time.length() < 4) {
                                time = new StringBuilder("0").append(time)
                                        .toString();
                            }
                            LocalDate localDate = new LocalDate(uldDetailsVO
                                    .getLocationOftransfer(), Location.ARP,
                                    true);
                            String date = new StringBuilder().append(
                                    dateOfMonth).append(time).toString();
                            log.log(Log.INFO,
                                    "%%%%%%%%%%%%%% date in String Format",
                                    date);
                            localDate.setDateAndTime(date, "ddMMMyyHHmm");

                            log.log(Log.INFO, "%%%%%%%%%%%  localDate %%%%%%",
                                    localDate);
                            vo.setTransactionDate(localDate);
                            uldDetailsVO.setTransactionDate(localDate);
                            vo.setTxStationCode(uldDetailsVO
                                    .getDestinationLocation());
                            vo.setTransactionStationCode(uldDetailsVO
                                    .getLocationOftransfer());
                            // vo.setReturnStationCode(uldDetailsVO
                            // .getDestinationLocation());
                            vo.setUldType(uldDetailsVO.getUldIdentificationVO()
                                    .getUldType());
                            vo.setTransactionNature(TEMPORARY);
                            vo.setLastUpdateTime(new LocalDate(logonAttributes
                                    .getAirportCode(), Location.ARP, true));
                            vo.setTransactionStatus(TO_BE_RETURNED);
                            vo.setReturnPartyCode(uldDetailsVO
                                    .getTransferringPartyDetailsVO()
                                    .getCarrierCode());
                            log.log(Log.INFO, "OwneAirline", ownAirline);
                            if (fromParty.equals(ownAirline)) {
                                log.log(Log.INFO, "SAVE A LOAN TXN!!!!!");
                                // save a loan txn
                                vo.setTransactionType(LOANED_TRANSACTION);
                            } else {
                                // save a borrow
                                log.log(Log.INFO, "SAVE A BORROW TXN!!!!!");
                                vo.setTransactionType(BORROW_TRANSACTION);
                            }
                            if (uldDetailsVO.getUldConditionDetailsVO()
                                    .getUldCondition() != null) {
                                vo.setUldConditionCode(uldDetailsVO
                                        .getUldConditionDetailsVO()
                                        .getUldCondition());
                            } else {
                                vo.setUldConditionCode("SER");
                            }
                            transactionDetailsVOs.add(vo);
                        }
                    } else if (uldOwner.equals(toParty)) {
                        if (toParty.equals(ownAirline)) {
                            // This is a return Loan Transaction.Here OwnAirline
                            // = QF
                            log.log(Log.INFO, "SAVE A RETURN LOAN TXN!!!!!");
                            ULDReturnTxnVO returnVO = new ULDReturnTxnVO();
                            returnVO.setCompanyCode(logonAttributes
                                    .getCompanyCode());
                            if (isAirline) {
                                returnVO.setPartyType(PARTYTYPE_AIRLINE);
                            } else if (isAgent) {
                                returnVO.setPartyType(AGENT);// shud this be
                                // set as
                                // airline?????
                            } else {
                                returnVO.setPartyType(OTHERS);
                            }
                            returnVO.setTransactionType(LOANED_TRANSACTION);
                            // returnVO.setReturnRemark()
                            returnVO.setUldNumber(uldNumber);
                            returnVO.setCrn(uldDetailsVO.getUldReceiptNumber());
                            returnVO.setTransactionAirportCode(uldDetailsVO
                                    .getLocationOftransfer());
                            // added by a-3278 for updating the destination
                            // station (for Return Loan Transactions)
                            returnVO.setDestinationStation(uldDetailsVO
                                    .getDestinationLocation());
                            // a-3278 ends
                            // returnVO.setTransactionDate need to be checked
                            // previosly set to message date which was
                            // null,uldDetailsVO.getTransactioDate

                            String dateOfMonth = uldDetailsVO
                                    .getDateofTransfer();
                            String time = String.valueOf(uldDetailsVO
                                    .getTimeofTransfer());
                            if (time.length() < 2) {
                                time = new StringBuilder("000").append(time)
                                        .toString();
                            } else if (time.length() < 3) {
                                time = new StringBuilder("00").append(time)
                                        .toString();
                            } else if (time.length() < 4) {
                                time = new StringBuilder("0").append(time)
                                        .toString();
                            }
                            LocalDate localDate = new LocalDate(uldDetailsVO
                                    .getLocationOftransfer(), Location.ARP,
                                    true);

                            String date = new StringBuilder().append(
                                    dateOfMonth).append(time).toString();
                            log.log(Log.INFO,
                                    "%%%%%%%%%%%%%% date in String Format",
                                    date);
                            localDate.setDateAndTime(date, "ddMMMyyHHmm");
                            returnVO.setTransactionDate(localDate);

                            log
                                    .log(
                                            Log.INFO,
                                            "%%%%%%%%%%returnVO.setTransactionDate%%%%%%",
                                            returnVO.getTransactionDate());
                            returnVO.setUldCondition(uldDetailsVO
                                    .getUldConditionDetailsVO()
                                    .getUldCondition());
                            // returnVO.setReturnRemark()
                            // For RETURN LOAN , We need ToParty of the table.ie
                            // fromPartyu from the message
                            returnVO.setPartyCode(fromParty);
                            returnVO.setFromPartyCode(fromParty);
                            returnVO.setToPartyCode(toParty);
                            uldReturnTxnVOs.add(returnVO);
                        } else {
                            // This is a RETURN BOROW.
                            log.log(Log.INFO, "NOT IMPLEMENTEDDDD!!!!!");
                            ULDReturnTxnVO returnVO = new ULDReturnTxnVO();
                            returnVO.setCompanyCode(logonAttributes
                                    .getCompanyCode());
                            if (isAirline) {
                                returnVO.setPartyType(PARTYTYPE_AIRLINE);
                            } else if (isAgent) {
                                returnVO.setPartyType(AGENT);// shud this be
                                // set as
                                // airline?????
                            } else {
                                returnVO.setPartyType(OTHERS);
                            }
                            // chnaged to toparty
                            // returnVO.setPartyCode(toParty);
                            returnVO.setCrn(uldDetailsVO.getUldReceiptNumber());
                            returnVO.setTransactionAirportCode(uldDetailsVO
                                    .getLocationOftransfer());
                            // added by a-3278 for updating the destination
                            // station (for Return Borrow Transactions)
                            returnVO.setDestinationStation(uldDetailsVO
                                    .getDestinationLocation());
                            // a-3278 ends
                            // returnVO.setTransactionDate need to be checked
                            // previosly set to message date which was
                            // null,uldDetailsVO.getTransactioDate

                            String dateOfMonth = uldDetailsVO
                                    .getDateofTransfer();
                            String time = String.valueOf(uldDetailsVO
                                    .getTimeofTransfer());
                            if (time.length() < 2) {
                                time = new StringBuilder("000").append(time)
                                        .toString();
                            } else if (time.length() < 3) {
                                time = new StringBuilder("00").append(time)
                                        .toString();
                            } else if (time.length() < 4) {
                                time = new StringBuilder("0").append(time)
                                        .toString();
                            }
                            LocalDate localDate = new LocalDate(uldDetailsVO
                                    .getLocationOftransfer(), Location.ARP,
                                    true);

                            String date = new StringBuilder().append(
                                    dateOfMonth).append(time).toString();
                            log.log(Log.INFO,
                                    "%%%%%%%%%%%%%% date in String Format",
                                    date);
                            localDate.setDateAndTime(date, "ddMMMyyHHmm");
                            returnVO.setTransactionDate(localDate);

                            returnVO.setUldCondition(uldDetailsVO
                                    .getUldConditionDetailsVO()
                                    .getUldCondition());
                            // returnVO.setReturnRemark()
                            returnVO.setTransactionType(BORROW_TRANSACTION);// shud
                            // this
                            // be
                            // set????
                            // For RETURN BORROW we need from Party from the
                            // table ie , ToPart from Message
                            returnVO.setPartyCode(toParty);
                            if (fromParty != null
                                    && fromParty.trim().length() > 0) {
                                returnVO.setFromPartyCode(fromParty);
                            }
                            if (toParty != null && toParty.trim().length() > 0) {
                                returnVO.setToPartyCode(toParty);
                            }
                            returnVO.setUldNumber(uldNumber);
                            uldReturnTxnVOs.add(returnVO);
                        }
                    } else {
                        // The ULD is owned by any airline other than from party
                        // and to party
                        boolean loanReq = false;
                        txnFilterVO.setCompanyCode(logonAttributes
                                .getCompanyCode());
                        txnFilterVO.setUldNumber(uldNumber);
                        txnFilterVO.setTransactionStatus(TO_BE_RETURNED);
                        txnFilterVO.setTransactionType(ALL);
                        txnFilterVO.setPageNumber(1);
                        listVO = listULDTransactionDetails(txnFilterVO);
                        log.log(Log.INFO, "filter VO", txnFilterVO);
                        if (listVO != null
                                && listVO.getTransactionDetailsPage() != null
                                && listVO.getTransactionDetailsPage().size() > 0) {
                            for (ULDTransactionDetailsVO txnVO : listVO
                                    .getTransactionDetailsPage()) {
                                String txnTyp = txnVO.getTransactionType();
                                String fromtxnParty = txnVO.getFromPartyCode();
                                String totxnParty = txnVO.getToPartyCode();
                                loanReq = false;
                                log.log(Log.INFO, "txn details VO", listVO.getTransactionDetailsPage());
                                if (fromParty.equals(totxnParty)
                                        && toParty.equals(fromtxnParty)) {
                                    ULDReturnTxnVO returnVO = new ULDReturnTxnVO();
                                    returnVO.setCompanyCode(logonAttributes
                                            .getCompanyCode());
                                    if (isAirline) {
                                        returnVO
                                                .setPartyType(PARTYTYPE_AIRLINE);
                                    } else if (isAgent) {
                                        returnVO.setPartyType(AGENT);// shud
                                        // this
                                        // be
                                        // set
                                        // as
                                        // airline?????
                                    } else {
                                        returnVO.setPartyType(OTHERS);
                                    }
                                    returnVO.setUldNumber(uldNumber);
                                    log
                                            .log(
                                                    Log.INFO,
                                                    "size of apge",
                                                    listVO
                                                                    .getTransactionDetailsPage()
                                                                    .size());
                                    if (LOANED_TRANSACTION.equals(txnTyp)) {
                                        log.log(Log.INFO,
                                                " SAVE A RETLOAN TXN!!!!!");

                                        returnVO.setTransactionType(txnTyp);
                                        returnVO.setPartyCode(fromParty);

                                        String dateOfMonth = uldDetailsVO
                                                .getDateofTransfer();
                                        String time = String
                                                .valueOf(uldDetailsVO
                                                        .getTimeofTransfer());
                                        if (time.length() < 2) {
                                            time = new StringBuilder("000")
                                                    .append(time).toString();
                                        } else if (time.length() < 3) {
                                            time = new StringBuilder("00")
                                                    .append(time).toString();
                                        } else if (time.length() < 4) {
                                            time = new StringBuilder("0")
                                                    .append(time).toString();
                                        }
                                        LocalDate localDate = new LocalDate(
                                                uldDetailsVO
                                                        .getLocationOftransfer(),
                                                Location.ARP, true);

                                        String date = new StringBuilder()
                                                .append(dateOfMonth).append(
                                                        time).toString();
                                        log
                                                .log(
                                                        Log.INFO,
                                                        "%%%%%%%%%%%%%% date in String Format",
                                                        date);
                                        localDate.setDateAndTime(date,
                                                "ddMMMyyHHmm");
                                        returnVO.setTransactionDate(localDate);

                                        returnVO.setCrn(uldDetailsVO
                                                .getUldReceiptNumber());
                                        returnVO
                                                .setTransactionAirportCode(uldDetailsVO
                                                        .getLocationOftransfer());
                                        // added by a-3278 for updating the
                                        // destination station (for Return Loan
                                        // Transactions)
                                        returnVO
                                                .setDestinationStation(uldDetailsVO
                                                        .getDestinationLocation());
                                        // a-3278 ends
                                        // returnVO.setTransactionDate need to
                                        // be checked previosly set to message
                                        // date which was
                                        // null,uldDetailsVO.getTransactioDate

                                        log
                                                .log(
                                                        Log.INFO,
                                                        "%%%%%%%%%%returnVO.setTransactionDate%%%%%%",
                                                        returnVO
                                                                        .getTransactionDate());
                                        returnVO.setUldCondition(uldDetailsVO
                                                .getUldConditionDetailsVO()
                                                .getUldCondition());
                                        // returnVO.setReturnRemark()
                                        returnVO
                                                .setTransactionType(LOANED_TRANSACTION);
                                        returnVO.setUldNumber(uldNumber);
                                        uldReturnTxnVOs.add(returnVO);

                                    } else {
                                        log.log(Log.INFO,
                                                "SAVE A RETBORROW TXN!!!!!");
                                        returnVO.setTransactionType(txnTyp);

                                        returnVO.setCrn(uldDetailsVO
                                                .getUldReceiptNumber());
                                        returnVO
                                                .setTransactionAirportCode(uldDetailsVO
                                                        .getLocationOftransfer());
                                        // added by a-3278 for updating the
                                        // destination station (for Return
                                        // Borrow Transactions)
                                        returnVO
                                                .setDestinationStation(uldDetailsVO
                                                        .getDestinationLocation());
                                        // a-3278 ends
                                        // returnVO.setTransactionDate need to
                                        // be checked previosString dateOfMonth
                                        // = uldDetailsVO.getDateofTransfer();
                                        String dateOfMonth = uldDetailsVO
                                                .getDateofTransfer();
                                        String time = String
                                                .valueOf(uldDetailsVO
                                                        .getTimeofTransfer());
                                        if (time.length() < 2) {
                                            time = new StringBuilder("000")
                                                    .append(time).toString();
                                        } else if (time.length() < 3) {
                                            time = new StringBuilder("00")
                                                    .append(time).toString();
                                        } else if (time.length() < 4) {
                                            time = new StringBuilder("0")
                                                    .append(time).toString();
                                        }
                                        LocalDate localDate = new LocalDate(
                                                uldDetailsVO
                                                        .getLocationOftransfer(),
                                                Location.ARP, true);

                                        String date = new StringBuilder()
                                                .append(dateOfMonth).append(
                                                        time).toString();
                                        log
                                                .log(
                                                        Log.INFO,
                                                        "%%%%%%%%%%%%%% date in String Format",
                                                        date);
                                        localDate.setDateAndTime(date,
                                                "ddMMMyyHHmm");
                                        returnVO.setTransactionDate(localDate);

                                        log
                                                .log(
                                                        Log.INFO,
                                                        "%%%%%%%%%%returnVO.setTransactionDate%%%%%%",
                                                        returnVO
                                                                        .getTransactionDate());
                                        returnVO.setUldCondition(uldDetailsVO
                                                .getUldConditionDetailsVO()
                                                .getUldCondition());
                                        // returnVO.setReturnRemark()
                                        returnVO
                                                .setTransactionType(BORROW_TRANSACTION);// shud
                                        // this
                                        // be
                                        // set????
                                        returnVO.setPartyCode(toParty);
                                        returnVO.setUldNumber(uldNumber);
                                        uldReturnTxnVOs.add(returnVO);
                                    }
                                    uldReturnTxnVOs.add(returnVO);
                                    loanReq = false;
                                    break;
                                } else {
                                    if (toParty.equals(fromtxnParty)) {
                                        ULDReturnTxnVO returnVO = new ULDReturnTxnVO();
                                        returnVO.setCompanyCode(logonAttributes
                                                .getCompanyCode());
                                        if (isAirline) {
                                            returnVO
                                                    .setPartyType(PARTYTYPE_AIRLINE);
                                        } else if (isAgent) {
                                            returnVO.setPartyType(AGENT);// shud
                                            // this
                                            // be
                                            // set
                                            // as
                                            // airline?????
                                        } else {
                                            returnVO.setPartyType(OTHERS);
                                        }
                                        returnVO.setUldNumber(uldNumber);
                                        log
                                                .log(
                                                        Log.INFO,
                                                        "size of apge",
                                                        listVO
                                                                        .getTransactionDetailsPage()
                                                                        .size());
                                        if (LOANED_TRANSACTION.equals(txnTyp)) {
                                            // THIS IS RETRN LOAN

                                             * A LOAN alreday exists from
                                             * fromtxnParty to XX and ZZ
                                             * returning the uld back to
                                             * fromtxnParty

                                            log.log(Log.INFO,
                                                    "SAVE A RETLOAN TXN!!!!!");
                                            returnVO
                                                    .setTransactionType(LOANED_TRANSACTION);
                                            // returnVO.setReturnRemark()
                                            returnVO.setUldNumber(uldNumber);
                                            returnVO.setCrn(uldDetailsVO
                                                    .getUldReceiptNumber());
                                            returnVO
                                                    .setTransactionAirportCode(uldDetailsVO
                                                            .getLocationOftransfer());
                                            // added by a-3278 for updating the
                                            // destination station (for Return
                                            // Loan Transactions)
                                            returnVO
                                                    .setDestinationStation(uldDetailsVO
                                                            .getDestinationLocation());
                                            // a-3278 ends
                                            // returnVO.setTransactionDate need
                                            // to be checked previosly set to
                                            // message date which was
                                            // null,uldDetailsVO.getTransactioDate

                                            String dateOfMonth = uldDetailsVO
                                                    .getDateofTransfer();
                                            String time = String
                                                    .valueOf(uldDetailsVO
                                                            .getTimeofTransfer());
                                            if (time.length() < 2) {
                                                time = new StringBuilder("000")
                                                        .append(time)
                                                        .toString();
                                            } else if (time.length() < 3) {
                                                time = new StringBuilder("00")
                                                        .append(time)
                                                        .toString();
                                            } else if (time.length() < 4) {
                                                time = new StringBuilder("0")
                                                        .append(time)
                                                        .toString();
                                            }
                                            LocalDate localDate = new LocalDate(
                                                    uldDetailsVO
                                                            .getLocationOftransfer(),
                                                    Location.ARP, true);

                                            String date = new StringBuilder()
                                                    .append(dateOfMonth)
                                                    .append(time).toString();
                                            log
                                                    .log(
                                                            Log.INFO,
                                                            "%%%%%%%%%%%%%% date in String Format",
                                                            date);
                                            localDate.setDateAndTime(date,
                                                    "ddMMMyyHHmm");
                                            returnVO
                                                    .setTransactionDate(localDate);

                                            log
                                                    .log(
                                                            Log.INFO,
                                                            "%%%%%%%%%%returnVO.setTransactionDate%%%%%%",
                                                            returnVO
                                                                            .getTransactionDate());
                                            returnVO
                                                    .setUldCondition(uldDetailsVO
                                                            .getUldConditionDetailsVO()
                                                            .getUldCondition());
                                            // returnVO.setReturnRemark()
                                            // For RETURN LOAN , We need ToParty
                                            // of the table.ie fromPartyu from
                                            // the message
                                            uldReturnTxnVOs.add(returnVO);
                                        } else {

                                            // THIS IS RETURN BORROW.

											 * A Borrow is alreday there.And the

                                            log
                                                    .log(Log.INFO,
                                                            "SAVE A RETBORROW TXN!!!!!");
                                            returnVO.setTransactionType(txnTyp);
                                            // returnVO.setPartyCode(toParty);
                                            returnVO.setCrn(uldDetailsVO
                                                    .getUldReceiptNumber());
                                            returnVO
                                                    .setTransactionAirportCode(uldDetailsVO
                                                            .getLocationOftransfer());
                                            // added by a-3278 for updating the
                                            // destination station (for Return
                                            // Borrow Transactions)
                                            returnVO
                                                    .setDestinationStation(uldDetailsVO
                                                            .getDestinationLocation());
                                            // a-3278 ends
                                            // returnVO.setTransactionDate need
                                            // to be checked previosly set to
                                            // message date which was
                                            // null,uldDetailsVO.getTransactioDate

                                            String dateOfMonth = uldDetailsVO
                                                    .getDateofTransfer();
                                            String time = String
                                                    .valueOf(uldDetailsVO
                                                            .getTimeofTransfer());
                                            if (time.length() < 2) {
                                                time = new StringBuilder("000")
                                                        .append(time)
                                                        .toString();
                                            } else if (time.length() < 3) {
                                                time = new StringBuilder("00")
                                                        .append(time)
                                                        .toString();
                                            } else if (time.length() < 4) {
                                                time = new StringBuilder("0")
                                                        .append(time)
                                                        .toString();
                                            }
                                            LocalDate localDate = new LocalDate(
                                                    uldDetailsVO
                                                            .getLocationOftransfer(),
                                                    Location.ARP, true);

                                            String date = new StringBuilder()
                                                    .append(dateOfMonth)
                                                    .append(time).toString();
                                            log
                                                    .log(
                                                            Log.INFO,
                                                            "%%%%%%%%%%%%%% date in String Format",
                                                            date);
                                            localDate.setDateAndTime(date,
                                                    "ddMMMyyHHmm");
                                            returnVO
                                                    .setTransactionDate(localDate);

                                            log
                                                    .log(
                                                            Log.INFO,
                                                            "%%%%%%%%%%returnVO.setTransactionDate%%%%%%",
                                                            returnVO
                                                                            .getTransactionDate());
                                            returnVO
                                                    .setUldCondition(uldDetailsVO
                                                            .getUldConditionDetailsVO()
                                                            .getUldCondition());
                                            // returnVO.setReturnRemark()
                                            returnVO
                                                    .setTransactionType(BORROW_TRANSACTION);// shud
                                            // this
                                            // be
                                            // set????
                                            // For RETURN BORROW we need from
                                            // Party from the table ie , ToPart
                                            // from Message
                                            returnVO.setPartyCode(toParty);
                                            returnVO.setUldNumber(uldNumber);
                                            uldReturnTxnVOs.add(returnVO);
                                        }
                                        uldReturnTxnVOs.add(returnVO);
                                        loanReq = false;
                                        break;
                                    } else {
                                        // save a loan
                                        loanReq = true;
                                    }
                                }
                            }
                        } else {
                            loanReq = true;
                        }
                        if (loanReq) {
                            loanReq = false;
                            ULDValidationVO uldValidationVO = validateULD(
                                    logonAttributes.getCompanyCode(), uldNumber);
                            ULDTransactionDetailsVO vo = new ULDTransactionDetailsVO();
                            vo.setCompanyCode(logonAttributes.getCompanyCode());
                            vo.setUldNumber(uldNumber);
                            if (isAirline) {
                                vo.setPartyType(PARTYTYPE_AIRLINE);
                            } else if (isAgent) {
                                vo.setPartyType(AGENT);// shud this be set as
                                // airline?????
                            } else {
                                vo.setPartyType(OTHERS);
                            }
                            String carrierCode = lucMessageVO.getCarrierCode();
                            Set<String> codes = new HashSet<String>();
                            codes.add(carrierCode);
                            codes.add(fromParty);
                            codes.add(toParty);
                            //Commented as part of ICRD 21184
                            //HashMap<String, Integer> airlineIdMap = ULD
                            //      .listAirlineIdentifiers(lucMessageVO
                            //              .getCompanyCode(), codes);

                            //Added as part of ICRD 21184 starts
                            Map<String, AirlineValidationVO> airlineIdMap =null;
                            try {
                            airlineIdMap =new SharedAirlineProxy()
                                    .validateAlphaCodes(lucMessageVO
                                            .getCompanyCode(), codes);
                            } catch (ProxyException e) {
                                // proxy exception
                            }
                            //Added as part of ICRD 21184 ends
                            //Commented as part of ICRD 21184
                            //vo.setOperationalAirlineIdentifier(airlineIdMap
                            //      .get(carrierCode));

                            //Added as part of ICRD 21184 starts
                            vo.setOperationalAirlineIdentifier(airlineIdMap
                                    .get(carrierCode).getAirlineIdentifier());
                            //Added as part of ICRD 21184 ends
                            if (uldDetailsVO.getUldConditionDetailsVO()
                                    .getDamageCode() != null) {
                                vo.setDamageStatus(DAMAGED);
                            }
                            if (uldDetailsVO.getUldConditionDetailsVO()
                                    .getServiceableCode() != null) {
                                vo.setDamageStatus(NOT_DAMAGED);
                            }
                            vo.setFromPartyCode(fromParty);
                            //Commented as part of ICRD 21184
                            //vo.setFromPartyIdentifier(airlineIdMap
                            //      .get(fromParty));
                            //vo.setCurrOwnerCode(airlineIdMap.get(fromParty));
                            //vo.setToPartyIdentifier(airlineIdMap.get(toParty));

                            //Added as part of ICRD 21184 starts
                            vo.setFromPartyIdentifier(airlineIdMap
                                    .get(fromParty).getAirlineIdentifier());
                            vo.setCurrOwnerCode(airlineIdMap.get(fromParty).getAirlineIdentifier());
                            vo.setToPartyIdentifier(airlineIdMap.get(toParty).getAirlineIdentifier());
                            //Added as part of ICRD 21184 ends
                            vo.setToPartyCode(toParty);
                            vo.setControlReceiptNumber(uldDetailsVO
                                    .getUldReceiptNumber());
                            vo.setLastUpdateUser(logonAttributes.getUserId());
                            String dateOfMonth = uldDetailsVO
                                    .getDateofTransfer();
                            String time = String.valueOf(uldDetailsVO
                                    .getTimeofTransfer());
                            // added by a-3278 for bug 51458 on 24Jun09;Time was
                            // not getting set properly
                            if (time.length() < 2) {
                                time = new StringBuilder("000").append(time)
                                        .toString();
                            } else if (time.length() < 3) {
                                time = new StringBuilder("00").append(time)
                                        .toString();
                            } else if (time.length() < 4) {
                                time = new StringBuilder("0").append(time)
                                        .toString();
                            }
                            // a-3278 ends
                            LocalDate localDate = new LocalDate(uldDetailsVO
                                    .getLocationOftransfer(), Location.ARP,
                                    true);
                            String date = new StringBuilder().append(
                                    dateOfMonth).append(time).toString();
                            log.log(Log.INFO,
                                    "%%%%%%%%%%%%%% date in String Format",
                                    date);
                            localDate.setDateAndTime(date, "ddMMMyyHHmm");
                            log.log(Log.INFO, "%%%%%%%%%%%  localDate %%%%%%",
                                    localDate);
                            vo.setTransactionDate(localDate);
                            vo.setTxStationCode(uldDetailsVO
                                    .getDestinationLocation());
                            vo.setTransactionStationCode(uldDetailsVO
                                    .getLocationOftransfer());
                            vo.setUldType(uldDetailsVO.getUldIdentificationVO()
                                    .getUldType());
                            vo.setTransactionNature(TEMPORARY);
                            vo.setLastUpdateTime(new LocalDate(logonAttributes
                                    .getAirportCode(), Location.ARP, true));
                            vo.setTransactionStatus(TO_BE_RETURNED);
                            vo.setReturnPartyCode(uldDetailsVO
                                    .getTransferringPartyDetailsVO()
                                    .getCarrierCode());
                            if (uldDetailsVO.getUldConditionDetailsVO()
                                    .getUldCondition() != null) {
                                vo.setUldConditionCode(uldDetailsVO
                                        .getUldConditionDetailsVO()
                                        .getUldCondition());
                            } else {
                                vo.setUldConditionCode("SER");
                            }

                            if (uldValidationVO != null) {
                                // save a loan
                                log.log(Log.INFO, "SAVE A LASTLOAN TXN!!!!!");
                                vo.setTransactionType(LOANED_TRANSACTION);
                            } else {
                                // save a borrow
                                log
                                        .log(Log.INFO,
                                                "SAVE A LASTBORROW TXN!!!!!!");
                                vo.setTransactionType(BORROW_TRANSACTION);
                            }
                            transactionDetailsVOs.add(vo);
                        }
                        // save returnloan if loan exists
                        // save return borrow if borrow exists
                        // save loan if uld exists
                        // save a borrow if uld does not exists
                    }
                }
            }
        }
        // added by a-3045 for bug 48052 on 18may09 starts
        if (txnAlreadyExistsStrBldr != null
                && txnAlreadyExistsStrBldr.length() > 0) {
            txnAlreadyExistsULDs = txnAlreadyExistsStrBldr.toString();
            throw new ULDDefaultsBusinessException(
                    "uld.defaults.transaction.loaneduld.alreadyloaned",
                    new Object[] { txnAlreadyExistsULDs });
        }
        // added by a-3045 for bug 48052 on 18may09 ends
        // Added by a-3278 for 84587 on 01Mar10 starts
        if (samePartyStrBldr != null && samePartyStrBldr.length() > 0) {
            samePartyStrBldr.append(" - From Carrier & To Carrier are same");
            throw new ULDDefaultsBusinessException(
                    "uld.defaults.loanborrow.msg.err.samepartycodes",
                    new Object[] { samePartyStrBldr.toString() });
        }
        // 84587 ends
        // next code begins here
        // Added by Preet on 16Sep08 for bug 18365 starts
        if (transactionDetailsVOs != null && transactionDetailsVOs.size() > 0) {
            TransactionVO transactionVO = new TransactionVO();
            transactionVO.setCompanyCode(logonAttributes.getCompanyCode());
            transactionVO.setUldTransactionDetailsVOs(transactionDetailsVOs);
            log.log(Log.INFO, "GOING TO CHECK FOR DUPLICATE CRN");
            Collection<String> dupCrns = checkForDuplicateCRN(transactionVO
                    .getCompanyCode(), transactionVO);
            log.log(Log.INFO, "dupCrns---------------------------", dupCrns);
            if (dupCrns != null && dupCrns.size() > 0) {
                throw new ULDDefaultsBusinessException(
                        "uld.defaults.loanBorrowULD.msg.err.duplicateCRN");
            }

        }
        // Added by Preet on 16Sep08 for bug 18365 ends

        if (transactionDetailsVOs != null && transactionDetailsVOs.size() > 0) {
            TransactionVO transactionVO = new TransactionVO();
            transactionVO.setCompanyCode(logonAttributes.getCompanyCode());
            transactionVO
                    .setOperationalFlag(TransactionVO.OPERATION_FLAG_INSERT);
            transactionVO.setUldTransactionDetailsVOs(transactionDetailsVOs);
            // added by a-3278 for 53471
            // Validate- whether agreement exists for a transaction
            Collection<String> agreementNumbers = null;
            try {
                agreementNumbers = findAgreementNumberForTransaction(transactionDetailsVOs);
            } catch (AgreementDoesNotExistsException e) {
                if (e.getErrors() != null && e.getErrors().size() > 0) {
                    String noAgreementStr = null;
                    StringBuilder noAgreementBuilder = new StringBuilder(
                            "Agreement doesnot exists against the Uld(s) ");
                    int count = 0;
                    for (ErrorVO error : e.getErrors()) {
                        if (count == 0) {
                            noAgreementBuilder.append(error.getErrorData()[4]);
                        } else {
                            noAgreementBuilder.append(",").append(
                                    error.getErrorData()[4]);
                        }
                        count++;
                    }
                    noAgreementStr = noAgreementBuilder.toString();
                    throw new ULDDefaultsBusinessException(
                            "uld.defaults.loanborrow.msg.err.agreementdoesnotexist",
                            new Object[] { noAgreementStr });
                }
            }
            log.log(Log.INFO, "transaction details for save", transactionVO);
            saveULDTransaction(transactionVO);
        }
        if (uldReturnTxnVOs != null && uldReturnTxnVOs.size() > 0) {
            log.log(Log.INFO, "uldReturnTxnVOs  for save return",
                    uldReturnTxnVOs);
            returnULDsForLUC(uldReturnTxnVOs);// method changed for throwing
            // error
        }
        // Commented by a-3045 for bug 28899 on 11Dec08
        // added by a-3045 for bug 19982 starts

		 * if(txnDtsVOsForUpdation !=null && txnDtsVOsForUpdation.size()>0){
		 * log.log(Log.INFO,"txnDtsVOsForUpdation for
		 * updation"+txnDtsVOsForUpdation); TransactionVO transactionVO = new
		 * TransactionVO();
		 * transactionVO.setCompanyCode(logonAttributes.getCompanyCode());
		 * transactionVO.setUldTransactionDetailsVOs(txnDtsVOsForUpdation);
		 * log.log(Log.INFO,"transactionVO for updation"+transactionVO);
		 * modifyULDTransaction(transactionVO); log.log(Log.INFO,"After
		 * Modification in ProcessLUC"); }

        // added by a-3045 for bug 19982 ends
        // added by a-3045 for Auditing starts
        ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
                ULDAgreementVO.ENTITY);
        log.log(Log.FINE, "---------setting ULDConfigsAuditVO VO-------");
        StringBuffer additionalInfo = new StringBuffer();
        uldConfigAuditVO.setCompanyCode(logonAttributes.getCompanyCode());
        String airportCode = logonAttributes.getAirportCode();
        uldConfigAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP,
                true).toGMTDate());
        uldConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                Location.ARP, true));
        uldConfigAuditVO.setUserId(logonAttributes.getUserId());
        if (lucMessageVO.getSupplInfoVO() != null) {
            log.log(Log.FINE, "---------AuditRemarks-------", lucMessageVO.getSupplInfoVO().getRemarks());
            uldConfigAuditVO.setAuditRemarks(lucMessageVO.getSupplInfoVO()
                    .getRemarks());
        }
        if (lucMessageVO.getUldDetails() != null
                && lucMessageVO.getUldDetails().size() > 0) {
            for (LUCULDDetailsVO uldDetailsVO : lucMessageVO.getUldDetails()) {
                additionalInfo.append("ULDNo. - ");
                additionalInfo.append(new StringBuilder(uldDetailsVO
                        .getUldIdentificationVO().getUldType()).append(
                        uldDetailsVO.getUldIdentificationVO()
                                .getUldSerialNumber())
                        .append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldOwnerCode()));
                additionalInfo.append("/CRNNo. - ");
                additionalInfo.append(uldDetailsVO.getUldReceiptNumber());
            }
        }
        uldConfigAuditVO.setAdditionalInformation(additionalInfo.toString());
        uldConfigAuditVO.setActionCode(PROCESS_LUCMESSAGE);
        AuditUtils.performAudit(uldConfigAuditVO);
        // added by a-3045 for Auditing ends
    }*/
    /**
     *
     * @param lucMessageVO
     * @throws SystemException
     * @throws BusinessException 
	 */
	public Collection<ErrorVO> processLUCMessage(LUCMessageVO lucMessageVO)
            throws SystemException, BusinessException{
		log.entering("ULDController", "processLUCMessage");
		String partyType = null;
		String uldNumber = null;
		String removeUld = null;
		String uldNumbrs = null;
		String fromParty = null;
		String toParty = null;
		String airport = null;
		String fromPartyFromVos = null;
		String toPartyFromVos = null;
		TransactionListVO listVO = null;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();
        //Added by A-4142 as part of the CR ICQFBS - 1474
		TransactionFilterVO txnFilterVO = new TransactionFilterVO();
		ULDTransactionDetailsVO last_uLDTransactionDetailsVO = new ULDTransactionDetailsVO();
		String transactionType = null;
		int uldNums = 0;
		int time = 0;
		Collection<String> uldNumbers = new ArrayList<String>();
		Collection<String> Errr = new ArrayList<String>();
		Collection<String> warning = new ArrayList<String>();
		Set<String> futureLucs = new HashSet<String>();
		Collection<String> totalUlds = new ArrayList<String>();
		Collection<String> UldsTobeRemovedFromTransactions = new ArrayList<String>();
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		ErrorVO errorvo = null;
		StringBuilder ulds = new StringBuilder();
        DateFormat formatter ;
		formatter = new SimpleDateFormat("dd-MMM-yy");
        Map<String,String> parameterMap =null;
		Collection<String> systemParameterCodes = new ArrayList<String>();
		String owrArlCode = logonAttributes.getOwnAirlineCode();  
		for (LUCULDDetailsVO uldDetailsVO : lucMessageVO.getUldDetails()) {   
            uldNumbrs = new StringBuilder().append(
                    uldDetailsVO.getUldIdentificationVO().getUldType()).append(
                    uldDetailsVO.getUldIdentificationVO().getUldSerialNumber())
                    .append(uldDetailsVO.getUldIdentificationVO()
                                    .getUldOwnerCode()).toString();
			uldNumbrs=ULDFormatter.formatULDNo(uldNumbrs);
            String dateOfMonth = uldDetailsVO.getDateofTransfer();
			//Added by A-7359 for ICRD-255608 starts here
			String yearChecker=dateOfMonth.substring(5);
			if(yearChecker.length()==3){
				errorvo = new ErrorVO(
						"uld.defaults.invalidyearformat.error",    
						new Object[] { "Invalid year format: " +yearChecker });
			   errorvo.setErrorDisplayType(ErrorDisplayType.ERROR);
			   errors.add(errorvo);
			   if(errors.size()>0){
					log.log(Log.INFO, "ERROR VOS THROWN ");
					MessageConfigException msgconfigexcptn= new MessageConfigException();
					msgconfigexcptn.addErrors(errors);
					throw msgconfigexcptn;
				}
			}
			//Added by A-7359 for ICRD-255608 ends here
			String time1 = String.valueOf(uldDetailsVO.getTimeofTransfer());
            LocalDate localDate = new LocalDate(uldDetailsVO
                    .getLocationOftransfer(), Location.ARP, true);
			//Modified by A-7359 for ICRD-255608 starts here
			Date date = null;
			/*For validating the date to check whether the LUC is
			for AIRLINE-AIRLINE / AIRLINE-NONAIRLINE*/
			date=validateDateofTransfer(dateOfMonth,time1);
	        String formatDate = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss").format(date);
            localDate.setDateAndTime(formatDate);
            LocalDate lucDay = new LocalDate(uldDetailsVO
                    .getLocationOftransfer(), Location.ARP, false);
			String formatlucDate = new SimpleDateFormat("dd-MMM-yyyy").format(date);
			lucDay.setDate(formatlucDate);
			//Modified by A-7359 for ICRD-255608 starts here
            LocalDate toDay = new LocalDate(uldDetailsVO
                    .getLocationOftransfer(), Location.ARP, false);
            if(lucDay.isGreaterThan(toDay)){
				futureLucs.add(uldNumbrs);
			}
			uldDetailsVO.setTransactionDate(localDate);
            fromParty=uldDetailsVO.getTransferringPartyDetailsVO().getCarrierCode().toUpperCase();
            toParty=uldDetailsVO.getReceivingPartyDetailsVO().getCarrierCode().toUpperCase();
			//Modified by A-7359 for ICRD-260301 starts here
			if(fromParty.startsWith(NON_CARRIERID)){
				if(uldDetailsVO.getTransferringPartyDetailsVO().getNonCarrierId()!=null){
				fromParty=uldDetailsVO.getTransferringPartyDetailsVO().getNonCarrierId().toUpperCase();
			}
			}
			if(toParty.startsWith(NON_CARRIERID)){
				if(uldDetailsVO.getReceivingPartyDetailsVO().getNonCarrierId()!=null)
				toParty=uldDetailsVO.getReceivingPartyDetailsVO().getNonCarrierId().toUpperCase();
			}
			//Modified by A-7359 for ICRD-260301 ends here
			totalUlds.add(uldNumbrs);  
			airport = uldDetailsVO.getLocationOftransfer();  
			txnFilterVO.setUldNumber(uldNumbrs.toString());
			txnFilterVO.setCompanyCode(lucMessageVO.getCompanyCode());
            if(lucMessageVO.getStationCode()!=null &&
                    lucMessageVO.getStationCode().length()>0){
			txnFilterVO.setTransactionStationCode(lucMessageVO.getStationCode());
			}
			last_uLDTransactionDetailsVO = findLastTransactionsForUld(txnFilterVO);
            if(last_uLDTransactionDetailsVO!=null){
                 if("R".equals(last_uLDTransactionDetailsVO.getTransactionStatus())){
					 fromPartyFromVos = last_uLDTransactionDetailsVO.getFromPartyCode();
					 toPartyFromVos = last_uLDTransactionDetailsVO.getToPartyCode();
					 last_uLDTransactionDetailsVO.setToPartyCode(fromPartyFromVos);
					 last_uLDTransactionDetailsVO.setFromPartyCode(toPartyFromVos);
                     last_uLDTransactionDetailsVO.setTransactionStationCode
                     (last_uLDTransactionDetailsVO.getReturnStationCode());
                     last_uLDTransactionDetailsVO.setTransactionDate
                     (last_uLDTransactionDetailsVO.getReturnDate());
				 }
			}
		     if (last_uLDTransactionDetailsVO != null) {
				if ((last_uLDTransactionDetailsVO.getTransactionDate().before(localDate) 
						|| 	last_uLDTransactionDetailsVO.getTransactionDate().equals(localDate))
						&& fromParty.equalsIgnoreCase(last_uLDTransactionDetailsVO.getFromPartyCode())
						&& toParty.equalsIgnoreCase(last_uLDTransactionDetailsVO.getToPartyCode())
						&& airport.equalsIgnoreCase(last_uLDTransactionDetailsVO.getTransactionStationCode())) {
                    if(ULDTransactionDetailsVO.TO_BE_RETURNED.equals(last_uLDTransactionDetailsVO.getTransactionStatus())){
                         if(ulds.length()>0){
								ulds.append(",");
						}
						ulds.append(last_uLDTransactionDetailsVO.getUldNumber());
						warning.add(last_uLDTransactionDetailsVO.getUldNumber());
					}
					if (parameterMap != null) { 
                        //time = Integer.parseInt(parameterMap.get(THRESHOLDTIME_FOR_DUPLICATELUCPROCESSING));
                        time = 0;
                        if (last_uLDTransactionDetailsVO.getTransactionDate().addHours(time).toGMTDate().after(localDate.toGMTDate())) {
                            if(ulds.length()>0){
								ulds.append(",");
							}
							ulds.append(last_uLDTransactionDetailsVO.getUldNumber());
							Errr.add("Error");
							UldsTobeRemovedFromTransactions.add(last_uLDTransactionDetailsVO.getUldNumber());
						}
					}
                }else{
                    log.log(Log.INFO,"<-------Forwardlooking check for LUC---------->",fromParty);
                         if(fromParty.equalsIgnoreCase(last_uLDTransactionDetailsVO.getFromPartyCode())&&
                            toParty.equalsIgnoreCase(last_uLDTransactionDetailsVO.getToPartyCode())){
                                 if(ULDTransactionDetailsVO.TO_BE_RETURNED.equals(last_uLDTransactionDetailsVO.getTransactionStatus())){
                             log.log(Log.INFO,"<-------To be Returned case---------->",toParty);
                                    if(ulds.length()>0){
                                            ulds.append(",");
                                    }
                                    ulds.append(last_uLDTransactionDetailsVO.getUldNumber());
                                    warning.add(last_uLDTransactionDetailsVO.getUldNumber());
                                 }else if(ULDTransactionDetailsVO.TO_BE_INVOICED.equals(last_uLDTransactionDetailsVO.getTransactionStatus())){
                                     if(parameterMap!=null){
                                          // time = Integer.parseInt(parameterMap.get(THRESHOLDTIME_FOR_DUPLICATELUCPROCESSING));
                                           time = 0;
                                           if(last_uLDTransactionDetailsVO.getTransactionDate().toGMTDate().addHours(time).after
                                                 (localDate.toGMTDate())){
                                               if(ulds.length()>0){
                                                    ulds.append(",");
                                               }
                                               ulds.append(last_uLDTransactionDetailsVO.getUldNumber());
                                               warning.add(last_uLDTransactionDetailsVO.getUldNumber());
                                          }
                                      }
                                 }
                     }else{
                                    if(last_uLDTransactionDetailsVO.getTransactionDate().toGMTDate().after(localDate.toGMTDate())){
                                        if(ulds.length()>0){
                                            ulds.append(",");
                                       }
                                       ulds.append(last_uLDTransactionDetailsVO.getUldNumber());
                                       warning.add(last_uLDTransactionDetailsVO.getUldNumber());
                                    }
                                }
                     }
                }
        }
     if((Errr!=null && Errr.size()>0) || (warning!=null && warning.size() > 0)){
       if(Errr!=null && Errr.size()== totalUlds.size()){
           errorvo = new ErrorVO(
                    "uld.defaults.uldfoundduplicateinluc.error",
                    new Object[] { "Duplicate Transaction exists for ULDs " +ulds });
           errorvo.setErrorDisplayType(ErrorDisplayType.ERROR);
           errors.add(errorvo);
     }
       else if((ulds!=null && ulds.toString().trim().length()>0)){
             errorvo = new ErrorVO(
                        "uld.defaults.uldfoundduplicateinluc.warning",
                        new Object[] {"Out of Sync Transaction exists for ULDs " +ulds+" history information updated." });
			   errorvo.setErrorDisplayType(ErrorDisplayType.WARNING);
			   errors.add(errorvo);
	      }       
	 } 
     if(futureLucs!=null && futureLucs.size()>0){
           errorvo = new ErrorVO(
                    "uld.defaults.uldwithfuturedateinluc.error",
                    new Object[] { "LUCs with future Dates cannot be processed " +futureLucs });
           errorvo.setErrorDisplayType(ErrorDisplayType.ERROR);
           errors.add(errorvo);
   }
        if(errorvo!=null){
        errors.add(errorvo);
        }
	    //Modified by A-7359 for ICRD-260301 starts here
	    if(errors.size()>0){
			log.log(Log.INFO, "ERROR VOS THROWN ");
			MessageConfigException msgconfigexcptn= new MessageConfigException();
			msgconfigexcptn.addErrors(errors);
			throw msgconfigexcptn;
		}
	  //Modified by A-7359 for ICRD-260301 ends here
        //Added by A-4142 ends
		Collection<ULDTransactionDetailsVO> transactionDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
		partyType = lucMessageValidation(lucMessageVO);
        if(lucMessageVO.getUldDetails()!=null && lucMessageVO.getUldDetails().size()>0){
			for (LUCULDDetailsVO uldDetailsVO : lucMessageVO.getUldDetails()) {
                uldNumber = new StringBuilder().append(
                        uldDetailsVO.getUldIdentificationVO().getUldType()).append(
                        uldDetailsVO.getUldIdentificationVO().getUldSerialNumber())
                        .append(uldDetailsVO.getUldIdentificationVO()
                                        .getUldOwnerCode()).toString();
				uldNumber=ULDFormatter.formatULDNo(uldNumber);
                if(UldsTobeRemovedFromTransactions!=null && UldsTobeRemovedFromTransactions.size()>0){
                for(String UldTobeRemovedFromTransaction : UldsTobeRemovedFromTransactions){
                    if(UldTobeRemovedFromTransaction.equals(uldNumber)){
						uldNumber = null;
					}
				 }
				}
                fromParty=uldDetailsVO.getTransferringPartyDetailsVO().getCarrierCode().toUpperCase();
                toParty=uldDetailsVO.getReceivingPartyDetailsVO().getCarrierCode().toUpperCase();
				//Modified by A-7359 for ICRD-260301 starts here
				if(fromParty.startsWith(NON_CARRIERID)){
					if(uldDetailsVO.getTransferringPartyDetailsVO().getNonCarrierId()!=null){
					fromParty=uldDetailsVO.getTransferringPartyDetailsVO().getNonCarrierId().toUpperCase();
				}
				}
				if(toParty.startsWith(NON_CARRIERID)){
					if(uldDetailsVO.getReceivingPartyDetailsVO().getNonCarrierId()!=null){
					toParty=uldDetailsVO.getReceivingPartyDetailsVO().getNonCarrierId().toUpperCase();
					}
				}
                    log.log(Log.INFO,"<---------NO TXN EXIST-HAVE TO CREATE------------->");
                    String uldOwner = uldDetailsVO.getUldIdentificationVO()
                                        .getUldOwnerCode();
                    if(uldNumber!=null){
                    transactionDetailsVOs =  constructULDTransactionDetailsVO(uldDetailsVO,partyType);
                    }
                    TransactionVO transactionVO = new TransactionVO();
                    if (toParty.equalsIgnoreCase(uldOwner)){
                            //&& (uldOwner.equalsIgnoreCase(logonAttributes.getOwnAirlineCode()))) {
                        //CREATE RETURN WITHOUT PRIOR LOAN TXN
                        log.log(Log.INFO,"<---------CREATE RETURN WITHOUT PRIOR LOAN TXN------------->");
						transactionVO.setTransactionStatus(TransactionFilterVO.TRANSACTION_TO_BE_RETURNED_STATUS);
						transactionVO.setTransactionType(LOAN_RETURN);
						transactionVO.setPartyType(partyType);
						transactionVO.setCompanyCode(logonAttributes.getCompanyCode());
                        if(transactionDetailsVOs !=null && transactionDetailsVOs.size()>0){
						ULDTransactionDetailsVO uldTransactionDetailsVO = transactionDetailsVOs.iterator().next();
                        uldTransactionDetailsVO.setTransactionStatus(TransactionFilterVO.TRANSACTION_TO_BE_RETURNED_STATUS);
						uldTransactionDetailsVO.setOperationalFlag("I");
						uldTransactionDetailsVO.setTransactionNature("T");
						uldTransactionDetailsVO.setTransactionType(LOAN_RETURN);
						uldTransactionDetailsVO.setSource("LUC");
						uldTransactionDetailsVO.setFromPartyCode(fromParty);
						uldTransactionDetailsVO.setToPartyCode(toParty);
						/**
						 * If this is a Return LUC then CRN will be returnCRN
                         * Transaction Date is return Date and station Return Station
						 */
						uldTransactionDetailsVO.setReturnCRN(uldDetailsVO.getUldReceiptNumber());
						uldTransactionDetailsVO.setReturnDate(uldDetailsVO.getTransactionDate());
						uldTransactionDetailsVO.setControlReceiptNumber(null);
						uldTransactionDetailsVO.setReturnStationCode(uldDetailsVO.getLocationOftransfer());
						AirlineValidationVO toOwnerVO = null;
						SharedAirlineProxy airlineProxy = new SharedAirlineProxy();
						try {
                        toOwnerVO = airlineProxy.validateAlphaCode(
                                    logonAttributes.getCompanyCode(),
                                    toParty.toUpperCase());
                        }catch(ProxyException pe){
                            log.log(Log.SEVERE, " Airline ProxyException" );
                        }
                        uldTransactionDetailsVO.setCurrOwnerCode(toOwnerVO.getAirlineIdentifier()); //based on to party code
                        //based on to party
                        uldTransactionDetailsVO.setOperationalAirlineIdentifier(toOwnerVO.getAirlineIdentifier());
                        transactionVO.setOperationalAirlineIdentifier(toOwnerVO.getAirlineIdentifier());
                        transactionVO.setUldTransactionDetailsVOs(transactionDetailsVOs);
                        transactionVO = updateTransactionVOForLUC(transactionVO,uldDetailsVO);
						returnWithoutPriorLoan(transactionVO);
						}
                    }else{
						transactionVO.setTransactionStatus(TransactionFilterVO.TRANSACTION_TO_BE_RETURNED_STATUS);
						transactionVO.setPartyType(partyType);
						transactionVO.setCompanyCode(logonAttributes.getCompanyCode());
                        if(transactionDetailsVOs !=null && transactionDetailsVOs.size()>0){
						ULDTransactionDetailsVO uldTransactionDetailsVO = transactionDetailsVOs.iterator().next();
                        uldTransactionDetailsVO.setTransactionStatus(TransactionFilterVO.TRANSACTION_TO_BE_RETURNED_STATUS);
						uldTransactionDetailsVO.setOperationalFlag(TransactionFilterVO.OPERATION_FLAG_INSERT);
						uldTransactionDetailsVO.setTransactionNature("T");
						uldTransactionDetailsVO.setTransactionType(LOANED_TRANSACTION);
						transactionVO.setTransactionType(LOANED_TRANSACTION);
						uldTransactionDetailsVO.setSource("LUC");
						uldTransactionDetailsVO.setFromPartyCode(fromParty);
						uldTransactionDetailsVO.setToPartyCode(toParty);
						//Modified by A-7359 for ICRD-260301 starts here
						if(PARTYTYPE_AIRLINE.equalsIgnoreCase(partyType)){
						AirlineValidationVO toOwnerVO = null;
						SharedAirlineProxy airlineProxy = Proxy.getInstance().get(SharedAirlineProxy.class);
						try {
                        toOwnerVO = airlineProxy.validateAlphaCode(
                                    logonAttributes.getCompanyCode(),
                                    toParty.toUpperCase());
                        }catch(ProxyException pe){
                            log.log(Log.SEVERE, " Airline ProxyException" );
                        }
                        uldTransactionDetailsVO.setCurrOwnerCode(toOwnerVO.getAirlineIdentifier()); //based on to party code
						uldTransactionDetailsVO.setToPartyName(toOwnerVO.getAirlineName());
                        //based on to party
						uldTransactionDetailsVO.setOperationalAirlineIdentifier(toOwnerVO.getAirlineIdentifier());
						transactionVO.setOperationalAirlineIdentifier(toOwnerVO.getAirlineIdentifier());
						}
						//Modified by A-7359 for ICRD-260301 ends here
						transactionVO.setUldTransactionDetailsVOs(transactionDetailsVOs);
                        transactionVO = updateTransactionVOForLUC(transactionVO,uldDetailsVO);
						createULDLoanTransactionFeature(transactionVO);
						}	
					}
				  
			     }
		   }
         //Added by A-4142 as part of the CR ICQFBS - 1474 ends
		 auditForLucProcessing(lucMessageVO);
		log.exiting("ULDController", "processLUCMessage");
		return errors;
	}

	/**
	 * @author A-2408
	 * @param uldReturnTxnVOs
	 * @throws SystemException
	 *             this method is written for saving return transactions while
	 *             LUC processing if the corresponding txn is not present it
	 *             thows an exception........
     *//* Commented by A-3415 for ICRD-114538

    public void returnULDsForLUC(Collection<ULDReturnTxnVO> uldReturnTxnVOs)
            throws SystemException, MessageConfigException,
            ULDDefaultsBusinessException, AgreementDoesNotExistsException,
            CurrencyConversionException, DimensionConversionException {
        log.entering("ULDController", "returnULDsForLUC-uldReturnTxnVOs:"
                + uldReturnTxnVOs);
        TransactionListVO transactionListVO = null;
        TransactionListVO loanListVO = null;
        TransactionListVO borrowListVO = null;
        TransactionFilterVO transactionFilterVO = null;
        boolean isTransactionValid = false;
        boolean isFirst = true;
        if (uldReturnTxnVOs != null) {
            transactionFilterVO = new TransactionFilterVO();
            for (ULDReturnTxnVO uldReturnTxnVO : uldReturnTxnVOs) {
                if (isFirst) {
                    isFirst = false;
                    transactionFilterVO = new TransactionFilterVO();
                    transactionFilterVO.setCompanyCode(uldReturnTxnVO
                            .getCompanyCode());
                    transactionFilterVO.setUldNumbers(new ArrayList<String>());
                    transactionFilterVO.getUldNumbers().add(
                            uldReturnTxnVO.getUldNumber());
                    transactionFilterVO
                            .setTransactionStatus(TransactionFilterVO.TRANSACTION_TO_BE_RETURNED_STATUS);
                    transactionFilterVO.setPageNumber(1);
                } else {
                    transactionFilterVO.getUldNumbers().add(
                            uldReturnTxnVO.getUldNumber());
                }
            }
            transactionListVO = listULDTransactionDetails(transactionFilterVO);
            log.log(Log.INFO, "transactionListVO", transactionListVO);
            if (transactionListVO.getTransactionDetailsPage() != null
                    && transactionListVO.getTransactionDetailsPage().size() > 0) {
                for (ULDReturnTxnVO uldReturnTxnVO : uldReturnTxnVOs) {
                    isTransactionValid = false;
                    for (ULDTransactionDetailsVO uldTransactionDetailsVO : transactionListVO
                            .getTransactionDetailsPage()) {
                        if (uldTransactionDetailsVO.getUldNumber().equals(
                                uldReturnTxnVO.getUldNumber())
                                && LOANED_TRANSACTION
                                        .equals(uldTransactionDetailsVO
                                                .getTransactionType())
                                && LOANED_TRANSACTION.equals(uldReturnTxnVO
                                        .getTransactionType())) {
                            log.log(Log.INFO,
                                    "uldTransactionDetailsVO##########",
                                    uldTransactionDetailsVO);
                            if (uldReturnTxnVO.getPartyCode() != null
                                    && uldReturnTxnVO.getPartyCode().equals(
                                            uldTransactionDetailsVO
                                                    .getToPartyCode())
                                    || uldReturnTxnVO.getPartyCode() == null) {
                                log
                                        .log(
                                                Log.INFO,
                                                "inside uldReturnTxnVO.getPartyCode() != null##########",
                                                uldReturnTxnVO);
                                if (loanListVO == null) {
                                    loanListVO = new TransactionListVO();
                                    loanListVO
                                            .setUldTransactionsDetails(new ArrayList<ULDTransactionDetailsVO>());
                                }
                                loanListVO
                                        .setTransactionType(LOANED_TRANSACTION);
                                // modified by a-3278 for 28897 on 07Jan09(In
                                // case of return Ulds Return CRN is updated)
                                // uldTransactionDetailsVO.setControlReceiptNumber(uldReturnTxnVO.getCrn());
                                uldTransactionDetailsVO
                                        .setReturnCRN(uldReturnTxnVO.getCrn());
                                uldTransactionDetailsVO
                                        .setReturnDate(uldReturnTxnVO
                                                .getTransactionDate());
                                // uldTransactionDetailsVO.setControlReceiptNumber(uldReturnTxnVO.getCrn());
                                uldTransactionDetailsVO
                                        .setReturnCRN(uldReturnTxnVO.getCrn());
                                uldTransactionDetailsVO
                                        .setReturnRemark(uldReturnTxnVO
                                                .getReturnRemark());
                                uldTransactionDetailsVO
                                        .setReturnStationCode(uldReturnTxnVO
                                                .getTransactionAirportCode());
                                // added by a-3278 for updating the Destination
                                // Station(for Return Loan Transactions)
                                uldTransactionDetailsVO
                                        .setTxStationCode(uldReturnTxnVO
                                                .getDestinationStation());
                                // a-3278 ends
                                uldTransactionDetailsVO
                                        .setUldConditionCode(uldReturnTxnVO
                                                .getUldCondition());
                                log
                                        .log(
                                                Log.INFO,
                                                "uldTransactionDetailsVO.getFromPartyIdentifier() #########",
                                                uldTransactionDetailsVO
                                                                .getFromPartyIdentifier());
                                uldTransactionDetailsVO
                                        .setCurrOwnerCode(uldTransactionDetailsVO
                                                .getFromPartyIdentifier());
                                // added by a-3045 for bug24643 ends
                                uldTransactionDetailsVO
                                        .setTransactionStatus(TransactionFilterVO.TRANSACTION_TO_BE_INVOICED_STATUS);
                                loanListVO.getUldTransactionsDetails().add(
                                        uldTransactionDetailsVO);
                                // added for 53470 bug on 10Jul09,Fix for bug
                                // 50892 also considered
                                isTransactionValid = true;
                                // 53470 ends
                                break;
                            }
                        }  Commented by A-3415 for ICRD-114538 since borrow transaction is longer required.
                        else if (uldTransactionDetailsVO.getUldNumber()
                                .equals(uldReturnTxnVO.getUldNumber())
                                && BORROW_TRANSACTION
                                        .equals(uldTransactionDetailsVO
                                                .getTransactionType())
                                && BORROW_TRANSACTION.equals(uldReturnTxnVO
                                        .getTransactionType())) {
                            log
                                    .log(
                                            Log.INFO,
                                            "uldTransactionDetailsVO#####((((((((#####",
                                            uldTransactionDetailsVO);
                            if (uldReturnTxnVO.getPartyCode() != null
                                    && uldReturnTxnVO.getPartyCode().equals(
                                            uldTransactionDetailsVO
                                                    .getFromPartyCode())
                                    || uldReturnTxnVO.getPartyCode() == null) {
                                log
                                        .log(
                                                Log.INFO,
                                                "inside uldReturnTxnVO.getPartyCode() != null#####&&&&&&&&&#####",
                                                uldReturnTxnVO);
                                if (borrowListVO == null) {
                                    borrowListVO = new TransactionListVO();
                                    borrowListVO
                                            .setUldTransactionsDetails(new ArrayList<ULDTransactionDetailsVO>());
                                }
                                borrowListVO
                                        .setTransactionType(BORROW_TRANSACTION);
                                uldTransactionDetailsVO
                                        .setControlReceiptNumber(uldReturnTxnVO
                                                .getCrn());
                                uldTransactionDetailsVO
                                        .setReturnDate(uldReturnTxnVO
                                                .getTransactionDate());
                                // modified by a-3278 for 28897 on 08Jan09(In
                                // case of return Ulds Return CRN is updated)
                                // uldTransactionDetailsVO.setControlReceiptNumber(uldReturnTxnVO.getCrn());
                                uldTransactionDetailsVO
                                        .setReturnCRN(uldReturnTxnVO.getCrn());
                                uldTransactionDetailsVO
                                        .setReturnRemark(uldReturnTxnVO
                                                .getReturnRemark());
                                uldTransactionDetailsVO
                                        .setReturnStationCode(uldReturnTxnVO
                                                .getTransactionAirportCode());
                                // added by a-3278 for updating the Destination
                                // Station(for Return Borrow Transactions)
                                uldTransactionDetailsVO
                                        .setTxStationCode(uldReturnTxnVO
                                                .getDestinationStation());
                                // a-3278 ends
                                uldTransactionDetailsVO
                                        .setUldConditionCode(uldReturnTxnVO
                                                .getUldCondition());
                                uldTransactionDetailsVO
                                        .setTransactionStatus(TransactionFilterVO.TRANSACTION_TO_BE_INVOICED_STATUS);
                                borrowListVO.getUldTransactionsDetails().add(
                                        uldTransactionDetailsVO);
                                // added for 53470 bug on 10Jul09,Fix for bug
                                // 50892 also considered
                                isTransactionValid = true;
                                // 53470 ends
                                break;
                            }
                        }
                    }
                    log.log(Log.INFO, "!!!!!isTransactionValid!!!!!!!",
                            isTransactionValid);
                    if (!isTransactionValid) {
                        log.log(Log.INFO,
                                "Loan/Borrow txn does not exists!!!!!!!!");
                        throw new ULDDefaultsBusinessException(
                                "uld.defaults.transaction.txndoesnotexists");
                    }
                }
                if (loanListVO != null) {
                    returnLoanTransactions(loanListVO);
                }
                Commented by A-3415 for ICRD-114538 since borrow transaction is longer required.
                 * if (borrowListVO != null) {
                    log
                            .log(
                                    Log.INFO,
                                    " before entering returnBorrowTransactions#####&&&&&&&&&#####",
                                    borrowListVO);
                    returnBorrowTransactions(borrowListVO);
                }
            } else {
                log.log(Log.INFO, "Loan/Borrow txn does not exists!!!!!!!!");
                // Added for bug 103078 by A-3725 starts
                // TransactionVO transactionVO =
                try {
                    updateULDDummyLoanAndReturnTransactionForLUC(uldReturnTxnVOs);
                } catch (DimensionConversionException ex) {
                    throw new ULDDefaultsBusinessException();
                }

                // Added for bug 103078 by A-3725 ends
                // throw new ULDDefaultsBusinessException(
                // "uld.defaults.transaction.txndoesnotexists");
            }
        }
    }*/

	/**
	 * 	Method		:	ULDController.validateDateofTransfer
	 *	Added by 	:	A-7359 on 22-Mar-2018
	 * 	Used for 	:	ICRD-255608
	 *	Parameters	:	@param dateOfMonth
	 *	Parameters	:	@param time1
	 *	Parameters	:	@return 
	 *	Return type	: 	Date
	 */
	private Date validateDateofTransfer(String dateOfMonth, String time) {
		log.entering("ULDController","validateDateofTransfer");
		boolean flag=false;
		Date date=null;
		String yearChecker=dateOfMonth.substring(5);
		flag=(yearChecker.length()==4?true:false);
		if(time.length() < 2){
			time = new StringBuilder("000").append(time).toString();
		}else if(time.length() < 3){
			time = new StringBuilder("00").append(time).toString();
		}else if(time.length() < 4){
			time = new StringBuilder("0").append(time).toString();
		}
		String datefromVo = new StringBuilder().append(dateOfMonth).append(time)
				.toString();
           try {
        	    if(flag){
        	    date = new SimpleDateFormat("ddMMMyyyyHHmm").parse(datefromVo);
        	    }else{
        	    date = new SimpleDateFormat("ddMMMyyHHmm").parse(datefromVo);	
        	    } 
           } catch (ParseException e) {
        	   log.log(Log.INFO,"Invalid Date",e.getMessage());
           }
       	log.exiting("ULDController","validateDateofTransfer");
          return date;
	}
	/**
	 *
	 * @param companyCode
	 * @param airportCode
	 * @param airlineIdentifier
	 * @param uldIdentifier
	 * @param date
	 * @throws SystemException
	 * @throws MessageConfigException
	 */
    public void generateSCMFromMonitorULD(String companyCode,
            ULDStockListVO uldStockListVO) throws SystemException,
            MessageConfigException {
		//Added  by A-7359 fro ICRD-256907 starts here
		log.entering(" ULDController","generateSCMFromMonitorULD");
		//Added by A-4393 for ICRD-269790  starts here
				Collection<String> systemParameterCodes = new ArrayList<String>();
				Map parameterMap = new HashMap();
				systemParameterCodes.add(SYS_PARAM_DISPLAYDISONSTOCKCHECK);
				try {
					parameterMap = new SharedDefaultsProxy()
							.findSystemParameterByCodes(systemParameterCodes);
				} catch (ProxyException proxyException) {
					log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
				}
				 if(parameterMap!=null&&parameterMap.get(SYS_PARAM_DISPLAYDISONSTOCKCHECK)!=null){
					 uldStockListVO.setDiscrepancyCheck(OneTimeVO.FLAG_YES.equals(parameterMap.get(SYS_PARAM_DISPLAYDISONSTOCKCHECK)));
				 }
				 //Added by A-4393 for ICRD-269790 ends here
		Collection<String> uldsfromDB = ULD.findSCMFromMonitorULD(companyCode,
                uldStockListVO);
		Set<String> ulds = new LinkedHashSet<String>(uldsfromDB); 
		//Added  by A-7359 fro ICRD-256907 ends here
		log.log(Log.INFO, "%%%%%%%%%%   ULD's  %%%%%%%", ulds);
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

		ULDSCMReconcileVO uldSCMReconcileVO = new ULDSCMReconcileVO();
        uldSCMReconcileVO.setAirlineIdentifier(uldStockListVO
                .getAirlineIdentifier());
		uldSCMReconcileVO.setAirportCode(uldStockListVO.getStationCode());
		uldSCMReconcileVO.setCompanyCode(companyCode);
		uldSCMReconcileVO.setStockCheckDate(uldStockListVO.getStockDate());
		uldSCMReconcileVO.setLastUpdatedTime(uldStockListVO.getStockDate());
		uldSCMReconcileVO.setLastUpdatedUser(logonAttributes.getUserId());
		if (ulds != null && ulds.size() > 0) {
			Collection<ULDSCMReconcileDetailsVO> reconsileDetailsVOs = new ArrayList<ULDSCMReconcileDetailsVO>();
			for (String uld : ulds) {
				ULDSCMReconcileDetailsVO uldSCMReconcileDetailsVO = new ULDSCMReconcileDetailsVO();
                uldSCMReconcileDetailsVO.setAirlineIdentifier(uldStockListVO
                        .getAirlineIdentifier());
                uldSCMReconcileDetailsVO.setAirportCode(uldStockListVO
                        .getStationCode());
				uldSCMReconcileDetailsVO.setCompanyCode(companyCode);
                uldSCMReconcileDetailsVO.setLastUpdatedTime(uldStockListVO
                        .getStockDate());
                uldSCMReconcileDetailsVO.setLastUpdatedUser(logonAttributes
                        .getUserId());
				uldSCMReconcileDetailsVO.setUldNumber(uld);
				reconsileDetailsVOs.add(uldSCMReconcileDetailsVO);
			}
			uldSCMReconcileVO.setReconcileDetailsVOs(reconsileDetailsVOs);
            log.log(Log.INFO, "%%%%%%%%%%   ULDSCMReconcileVO  %%%%%%%",
                    uldSCMReconcileVO);
			generateSCMMessageVO(uldSCMReconcileVO);
		}
		log.log(Log.INFO, "%%%%%%%%%%   NO Message Send  %%%%%%%");
	}

	/**
	 * @author A-1950
	 * @param uldDiscrepancy
	 * @param uldAuditVO
	 * @param uldDiscrepancyVO
	 * @throws SystemException
	 */
    private void findULDAuditVOForDiscrepancy(ULDDiscrepancy uldDiscrepancy,
            ULDAuditVO uldAuditVO, ULDDiscrepancyVO uldDiscrepancyVO)
            throws SystemException {

        log
                .log(Log.FINE,
                        "---------setting uldAuditVO VO-------***************************************");
        StringBuffer additionalInfo = new StringBuffer();

        uldAuditVO.setCompanyCode(uldDiscrepancy.getUldDiscrepancyPK()
                .getCompanyCode());
        uldAuditVO.setUldNumber(uldDiscrepancy.getUldDiscrepancyPK()
                .getUldNumber());

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        String airportCode = logonAttributes.getAirportCode();

        uldAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP, true)
                .toGMTDate());
        uldAuditVO.setTxnLocalTime(new LocalDate(airportCode, Location.ARP,
                true));
		uldAuditVO.setUserId(uldDiscrepancy.getLastUpdatedUser());
		uldAuditVO.setAuditRemarks(uldDiscrepancy.getRemark());
		additionalInfo.append("DiscrepancyCode - ");
		additionalInfo.append(uldDiscrepancyVO.getDiscrepencyCode());
		additionalInfo.append(",");
		additionalInfo.append("DiscrepancyDate - ");
		additionalInfo.append(uldDiscrepancyVO.getDiscrepencyDate());

		uldAuditVO.setAdditionalInformation(additionalInfo.toString());
        log.exiting("findULDAuditVOForDiscrepancy",
                "...Finished construction of uldAuditVO ");
    }







    /***************************************************************************
     *
     * @return
     * @throws SystemException
     */
    private TransactionListVO getTranactionDetails(
            Collection<ULDReturnTxnVO> uldReturnTxnVOs) throws SystemException {
		String companyCode = null;
		String transactionType = null;
		// String transactionAirportCode = null;
		String partyType = null;
		String partyCode = null;
		ArrayList<String> uldNums = new ArrayList<String>();
		if (uldReturnTxnVOs != null && uldReturnTxnVOs.size() > 0) {
			for (ULDReturnTxnVO uldReturnTxnVO : uldReturnTxnVOs) {
				companyCode = uldReturnTxnVO.getCompanyCode();
				transactionType = uldReturnTxnVO.getTransactionType();
				// transactionAirportCode =
				// uldReturnTxnVO.getTransactionAirportCode();

				partyType = uldReturnTxnVO.getPartyType();
				partyCode = uldReturnTxnVO.getPartyCode();
				uldNums.add(uldReturnTxnVO.getUldNumber());
			}
		}
		TransactionFilterVO vo = new TransactionFilterVO();
		vo.setCompanyCode(companyCode);
		vo.setPartyType(partyType);
		if ("L".equalsIgnoreCase(transactionType)) {
			vo.setToPartyCode(partyCode);
		} else {
			vo.setFromPartyCode(partyCode);
		}
		// vo.setTransactionStationCode(transactionAirportCode);
		vo.setTransactionType(transactionType);
        vo
                .setTransactionStatus(TransactionFilterVO.TRANSACTION_TO_BE_RETURNED_STATUS);
		vo.setPageNumber(1);
		if (uldNums != null && uldNums.size() == 1) {
			vo.setUldNumber(uldNums.get(0));
		} else if (uldNums != null && uldNums.size() > 1) {
			vo.setUldNumbers(uldNums);
		}
        return listULDTransactionDetails(vo);
	}

    private String calculateLoanPeriod(String transactionAirport,
            String returnAirport) {

		final int seconds = 3600;
		final int hours = 24;
		final int millis = 1000 * seconds * hours;
		final int days = 365;
        LocalDate transdate = new LocalDate(transactionAirport, Location.ARP,
                false);
		LocalDate returnDate = new LocalDate(returnAirport, Location.ARP, false);
		/** Find Out Day Difference Start * */
		long tDate = transdate.getTimeInMillis();
		long rDate = returnDate.getTimeInMillis();
		long diff = rDate - tDate;
		long dayDiff = (diff / millis) + 1;
		/** Find Out Day Difference End * */
		String loanPrd = String.valueOf(dayDiff);
		/** Find Out Month Difference Start * */
		int monthDiff = (int) (dayDiff / days) * 12;
		LocalDate temp = transdate.addMonths(monthDiff);
		long tDiff = 0;
		while (temp.isLesserThan(returnDate)) {
			temp.addMonths(1);
			tDiff += 1;
		}
        if (transdate.get(Calendar.DAY_OF_MONTH) >= returnDate
                .get(Calendar.DAY_OF_MONTH)) {
			tDiff += 1;
		}
		monthDiff += tDiff;
		/** Find Out Month Difference End * */
		return loanPrd;
	}

	/**
	 *
	 * A-1950
	 *
	 * @param uldValidationVOs
	 * @throws ULDInOperationException
	 */
    public void validateULDForWarehouseOccupancy(
            Collection<ULDValidationVO> uldValidationVOs)
			throws SystemException, ULDInOperationException {
		log.entering("ULDController", "validateULDForWarehouseOccupancy");

		ULD uld = null;
		// Collection<String> invalidULDs = new ArrayList<String>();
		StorageUnitValidationFilterVO storageUnitFilterVO = new StorageUnitValidationFilterVO();

		Collection<StorageUnitValidationFilterVO> storageUnitValidationFilterVOs = new ArrayList<StorageUnitValidationFilterVO>();
		Collection<StorageUnitValidationVO> validULDVOs = new ArrayList<StorageUnitValidationVO>();

		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();

		for (ULDValidationVO validationVO : uldValidationVOs) {
			storageUnitFilterVO.setCompanyCode(validationVO.getCompanyCode());
			storageUnitFilterVO.setStorageUnitCode(validationVO.getUldNumber());

			try {
                uld = ULD.find(validationVO.getCompanyCode(), validationVO
                        .getUldNumber());
			} catch (FinderException finderException) {
				// this will not happen
			}
			if (uld != null) {
				storageUnitFilterVO.setAirportCode(uld.getCurrentStation());
				storageUnitValidationFilterVOs.add(storageUnitFilterVO);
			}
		}

		try {
            validULDVOs = new WarehouseProxy()
                    .validateMultipleStorageUnit(storageUnitValidationFilterVOs);
			log.log(Log.INFO, "%%%%%%%%%%%%%%  validULDVOs", validULDVOs);
		} catch (ProxyException proxyException) {
			// proxyException is caught when uld is not there in warehouse ,
			// which is actually not in operation.
			// they can be deleted , loaned etc
		}
		for (StorageUnitValidationVO storageUnitVO : validULDVOs) {
			if (OCCUPIED.equals(storageUnitVO.getOccupancyStatus())) {
                errors.add(new ErrorVO(
                        ULDInOperationException.ULD_IS_OCCUPIED_AT_WAREHOUSE,
						new Object[] { storageUnitVO.getStorageUnitCode() }));
			}
		}
		log.log(Log.INFO, "!!!!!!!!!!!!!!!errors", errors);
		if (errors.size() > 0) {
			ULDInOperationException uldInOperationException = new ULDInOperationException();
			uldInOperationException.addErrors(errors);
			throw uldInOperationException;
		}
	}

	/**
	 *
	 * A-1950
	 *
	 * @param uldValidationVOs
	 * @throws ULDInOperationException
	 */
    public void checkForULDInOperation(
            Collection<ULDValidationVO> uldValidationVOs)
			throws SystemException, ULDInOperationException {
		log.entering("ULDController", "checkForULDInOperation");
		try {
			new ExportProxy().checkULDInOperartions(uldValidationVOs);
			// new
			// OperationsFltHandlingProxy().checkULDInOperartions(uldValidationVOs);
		} catch (ProxyException proxyException) {
			Collection<ErrorVO> errors = proxyException.getErrors();
			log.log(Log.INFO, "%%%%%%%%  Collection<ErrorVO> errors ", errors);
			ULDInOperationException ex = new ULDInOperationException();
			ex.addErrors(errors);
			throw ex;
		}
	}

public boolean isCarrierBuildUp(FlightDetailsVO flightDetailsVO) {

	if(flightDetailsVO.getFlightNumber()==null || flightDetailsVO.getFlightNumber().trim().length()==0)
		return true;
	if("-1".equalsIgnoreCase(flightDetailsVO.getFlightNumber()) || "0".equalsIgnoreCase(flightDetailsVO.getFlightNumber()))
		return true;
	return false;
}

	/**
	 *
	 * @param flightDetailsVO
	 * @throws SystemException
	 * @throws MessageConfigException
	 * @throws CurrencyConversionException
	 * @throws ULDDefaultsBusinessException 
	 */
	public void updateULDForOperations(FlightDetailsVO flightDetailsVO)
            throws SystemException, MessageConfigException,
            CurrencyConversionException, DimensionConversionException, ULDDefaultsBusinessException {
		log.entering("ULDCONTROLLER", "updateULDForOperations");

		LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
		Collection<String> systemParameterCodes = new ArrayList<String>();
		systemParameterCodes.add(ULD_STK_UPDATE_FOR_OAL);
		systemParameterCodes.add(ULD_STK_UPDATE_FOR_OWN);
		Map parameterMap = new HashMap();

        //Added By A-6841 for CRQ ICRD-155382 Starts
		SharedAreaProxy areasProxy = new SharedAreaProxy();
		Collection<String> parCode = new ArrayList<String>(1);
		parCode.add("operation.flthandling.triggerpointforuldrelease"); 
		Map<String, String> parsMap = null; 
		try {
        parsMap = areasProxy.findAirportParametersByCode(   logonAttributes.getCompanyCode(),   logonAttributes.getAirportCode(), parCode);
		 } catch (ProxyException e) { 
		 e.getMessage(); 
		}
        Collection<String> releaseTriggerPtList=null;
		String releaseTriggerPt = parsMap.get("operation.flthandling.triggerpointforuldrelease");

        if(releaseTriggerPt != null && releaseTriggerPt.trim().length()>0){
            releaseTriggerPtList = new ArrayList<String>(Arrays.asList(releaseTriggerPt.split(",")));
        }
        //Added by A-6991 for ICRD-77772 Starts
        AirlineAirportParameterFilterVO airlineAirportParameterFilterVO=new AirlineAirportParameterFilterVO();
        LogonAttributes logon = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		String companyCode = logon.getCompanyCode().toUpperCase();
        String ucmTrgVal=null;
        String arpCode=flightDetailsVO.getCurrentAirport();
        int airlineId=flightDetailsVO.getFlightCarrierIdentifier();
        if (arpCode !=null) {
			airlineAirportParameterFilterVO.setCompanyCode(companyCode);
			airlineAirportParameterFilterVO.setAirportCode(arpCode);
			airlineAirportParameterFilterVO.setAirlineId(airlineId);
			airlineAirportParameterFilterVO.setParameterCode(MailConstantsVO.UCM_TRIGGERED_FOR);
			
			Collection<AirlineAirportParameterVO> airlineAirportParameterVOs = new SharedAirlineProxy()
					.findAirlineAirportParameters(airlineAirportParameterFilterVO);
            if(airlineAirportParameterVOs !=null && airlineAirportParameterVOs.size()>0){
             for(AirlineAirportParameterVO parval:airlineAirportParameterVOs) {
				
                 ucmTrgVal=parval.getParameterValue();
			}
            }
            else{
                ucmTrgVal="";
            }
        }
        //Added by A-6991 for ICRD-77772 Ends
		boolean isActualMvmntPresent = false;
        //Added By A-6841 for CRQ ICRD-155382 ends
        try {
            parameterMap = new SharedDefaultsProxy()
                    .findSystemParameterByCodes(systemParameterCodes);
        } catch (ProxyException proxyException) {
            log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
        }

        boolean isCarrier = isCarrierBuildUp(flightDetailsVO);
        if (flightDetailsVO.getUldInFlightVOs() != null
                && flightDetailsVO.getUldInFlightVOs().size() > 0) {

            if(FlightDetailsVO.CLOSURE.equals(flightDetailsVO.getAction())
                    ||FlightDetailsVO.FINALISATION.equals(flightDetailsVO.getAction())){
                flightDetailsVO.setFromFlightFinalization(true);
				//Added by A-6991 for ICRD-77772 Starts	
				if("MAIL".equalsIgnoreCase(flightDetailsVO.getSubSystem()) && 
						!isCarrier){
					try{
                    	com.ibsplc.icargo.business.operations.flthandling.vo.OperationalFlightVO fltVO=new com.ibsplc.icargo.business.operations.flthandling.vo.OperationalFlightVO();
                        fltVO.setCompanyCode(companyCode);
                        fltVO.setAirportCode(flightDetailsVO.getCurrentAirport());
                        fltVO.setCarrierId(flightDetailsVO.getFlightCarrierIdentifier());
                        fltVO.setFlightNumber(flightDetailsVO.getFlightNumber());
                        fltVO.setFlightSequenceNumber(flightDetailsVO.getFlightSequenceNumber());
                        fltVO.setLegSerialNumber(flightDetailsVO.getLegSerialNumber());
				if ("Mail".equalsIgnoreCase(ucmTrgVal)  || "".equalsIgnoreCase(ucmTrgVal)) {
					saveAndSendUCM(flightDetailsVO); 
				}
				if ("Both".equalsIgnoreCase(ucmTrgVal) ) {
				
                        	if("E".equalsIgnoreCase(flightDetailsVO.getDirection())){
                        boolean cargoExportFlightClosedStatus = new OperationsFltHandlingProxy()
								.cargoFlightStatus(fltVO);
                        	
						log.log(Log.FINEST, "\n ******************",
								cargoExportFlightClosedStatus);
						
						if (cargoExportFlightClosedStatus) {
							Collection<OperationalULDVO> operationalUlds = null;
							operationalUlds =new OperationsFltHandlingProxy().findUldsForFlight(fltVO);
							
							for (OperationalULDVO operationalULDVO : operationalUlds) {			

									ULDInFlightVO uldInFlightVO = new ULDInFlightVO();
									/*uldInFlightVO.setPointOfLading(this
											.getExportFlightAtAirportPK().getAirportCode());*/
									uldInFlightVO.setPointOfLading(arpCode);
									uldInFlightVO.setPointOfUnLading(operationalULDVO.getPou());
									uldInFlightVO.setUldNumber(operationalULDVO.getUldNumber());
									//added by A-2399 for Bug 13564
									if(operationalULDVO.getContentId() !=null && operationalULDVO.getContentId().trim().length() >0){
									uldInFlightVO.setContent(operationalULDVO.getContentId());
									}
									log.log(Log.FINE, "getContentId-->>--", operationalULDVO.getContentId());
									flightDetailsVO.getUldInFlightVOs().add(uldInFlightVO);
								}
				saveAndSendUCM(flightDetailsVO); 
						}
						
                        }
                           	if("I".equalsIgnoreCase(flightDetailsVO.getDirection())){
                                boolean cargoImportFlightClosedStatus = new OperationsFltHandlingProxy()
        								.cargoFlightStatusImport(fltVO);
                                	
        						log.log(Log.FINEST, "\n ******************",
        								cargoImportFlightClosedStatus);
        						if (cargoImportFlightClosedStatus) {
        							
        							Collection<OperationalULDVO> operationalUlds = null;
        							operationalUlds =new OperationsFltHandlingProxy().findUldsForFlight(fltVO);
        							
        							for (OperationalULDVO operationalULDVO : operationalUlds) {			

        									ULDInFlightVO uldInFlightVO = new ULDInFlightVO();
        									/*uldInFlightVO.setPointOfLading(this
        											.getExportFlightAtAirportPK().getAirportCode());*/
        									uldInFlightVO.setPointOfLading(arpCode);
        									uldInFlightVO.setPointOfUnLading(operationalULDVO.getPou());
        									uldInFlightVO.setUldNumber(operationalULDVO.getUldNumber());
        									//added by A-2399 for Bug 13564
        									uldInFlightVO.setContent(operationalULDVO.getContentId());
        									log.log(Log.FINE, "getContentId-->>--", operationalULDVO.getContentId());
        									flightDetailsVO.getUldInFlightVOs().add(uldInFlightVO);
        								}
        								saveAndSendUCM(flightDetailsVO); 
			                }
                       }
                       
				
				 }
				
					}
				catch (ProxyException proxyException) {
					log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
				}
			}
				
                        else{
                        	
                        	try{
                        	OperationalFlightVO fltVOMail=new OperationalFlightVO(); 
                        	fltVOMail.setCompanyCode(companyCode);
                        	fltVOMail.setAirportCode(flightDetailsVO.getCurrentAirport());  
                        	fltVOMail.setCarrierId(flightDetailsVO.getFlightCarrierIdentifier());
                        	fltVOMail.setFlightNumber(flightDetailsVO.getFlightNumber());
                        	fltVOMail.setFlightSequenceNumber(flightDetailsVO.getFlightSequenceNumber());
                        	fltVOMail.setLegSerialNumber(flightDetailsVO.getLegSerialNumber());
                        	if(flightDetailsVO.getUldInFlightVOs() !=null && !flightDetailsVO.getUldInFlightVOs().isEmpty()){
                        	fltVOMail.setPol(flightDetailsVO.getUldInFlightVOs().iterator().next().getPointOfLading());
                        	}
                        	fltVOMail.setForUCMSendChk(true);
                        	if ("Cargo".equalsIgnoreCase(ucmTrgVal) || "".equalsIgnoreCase(ucmTrgVal)) {
            					saveAndSendUCM(flightDetailsVO); 
            				}
                        	
                        	if ("Both".equalsIgnoreCase(ucmTrgVal) ) {      
                        	if("E".equalsIgnoreCase(flightDetailsVO.getDirection())){
                        boolean mailExportFlightClosedStatus = new MailOperationsProxy().isFlightClosedForMailOperations(fltVOMail);
                        	
						log.log(Log.FINEST, "\n ******************",
								mailExportFlightClosedStatus);
						if (mailExportFlightClosedStatus) {
							
							Collection<ContainerVO> containerVOs =null;
							containerVOs =new MailOperationsProxy().findULDsInAssignedFlight(fltVOMail);
							//flightDetailsVO.setUldInFlightVOs(new ArrayList<ULDInFlightVO>());
							if(containerVOs !=null && ! containerVOs.isEmpty()){
							for (ContainerVO containerVO : containerVOs) {			

									ULDInFlightVO uldInFlightVO = new ULDInFlightVO();
									/*uldInFlightVO.setPointOfLading(this
											.getExportFlightAtAirportPK().getAirportCode());*/
									uldInFlightVO.setPointOfLading(containerVO.getAssignedPort());
									uldInFlightVO.setPointOfUnLading(containerVO.getPou());
									uldInFlightVO.setUldNumber(containerVO.getContainerNumber());							
									uldInFlightVO.setContent(containerVO.getContainerJnyID());
									log.log(Log.FINE, "getContentId-->>--", containerVO.getContainerJnyID());
									flightDetailsVO.getUldInFlightVOs().add(uldInFlightVO);
								}
							}
							saveAndSendUCM(flightDetailsVO); 
						}
                        }
                           	if("I".equalsIgnoreCase(flightDetailsVO.getDirection())){
                                boolean mailImportFlightClosedStatus = new MailOperationsProxy(). isFlightClosedForInboundOperations(fltVOMail);
                               
                                	
        						log.log(Log.FINEST, "\n ******************",
        								mailImportFlightClosedStatus);
        						if (mailImportFlightClosedStatus) {
        							Collection<ContainerVO> containerVOs =null;
        							containerVOs =new MailOperationsProxy().findULDsInAssignedFlight(fltVOMail);
        						
        							for (ContainerVO containerVO : containerVOs) {			

        									ULDInFlightVO uldInFlightVO = new ULDInFlightVO();
        									/*uldInFlightVO.setPointOfLading(this
        											.getExportFlightAtAirportPK().getAirportCode());*/
        									uldInFlightVO.setPointOfLading(containerVO.getAssignedPort());
        									uldInFlightVO.setPointOfUnLading(containerVO.getPou());
        									uldInFlightVO.setUldNumber(containerVO.getContainerNumber());							
        									uldInFlightVO.setContent(containerVO.getContainerJnyID());
        									log.log(Log.FINE, "getContentId-->>--", containerVO.getContainerJnyID());
        									flightDetailsVO.getUldInFlightVOs().add(uldInFlightVO);
        								}
        							saveAndSendUCM(flightDetailsVO); 
        						}
                                }
                        
                        	}   
                                
					}
                        	catch (ProxyException proxyException) {
                    			log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
                    		}

			}
				
				//Added by A-6991 for CR ICRD-77772 Ends
				
				//saveAndSendUCM(flightDetailsVO); 
            }
            // Added as part of CR ICRD-192322
            boolean isWetleasedFlt = false;
            if(!(FlightDetailsVO.ACCEPTANCE.equals(flightDetailsVO.getAction())) && !isCarrier ){
            isWetleasedFlt = isWetLeasedFlt(flightDetailsVO);
            flightDetailsVO.setWetleasedFlt(isWetleasedFlt);
            }

            // Added as part of CR ICRD-192322 ends

            for (ULDInFlightVO uldInFlightVO : flightDetailsVO.getUldInFlightVOs()) {
				// To find ULD	OWNER Airline code
                String ownerCode = findULDOwnerCode(flightDetailsVO.getCompanyCode(),uldInFlightVO.getUldNumber());
                boolean isOALUldStockUpdateReq = parameterMap.get(ULD_STK_UPDATE_FOR_OAL)!=null &&
                        !FLAG_NO.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL));
                // Modified as part of CR ICRD-192322
                boolean stockUpdateNeeded = logonAttributes.getOwnAirlineCode().equals(ownerCode)
						|| logonAttributes.getOwnAirlineIdentifier() == flightDetailsVO.getFlightCarrierIdentifier()
                        || isOALUldStockUpdateReq || (flightDetailsVO.isWetleasedFlt()
                        && !(logonAttributes.getOwnAirlineIdentifier() == flightDetailsVO.getFlightCarrierIdentifier()));
                // Modified as part of CR ICRD-192322 ends
            
//commented by A-9103 as a part of ICRD-355586 starts
//commented by A-9103 as a part of ICRD-355586 starts

                //Commented by A-8445 as UCM triggered twice STARTS
                //Added by A-6991 for ICRD-77772 Starts
                /*if("MAIL".equalsIgnoreCase(flightDetailsVO.getSubSystem())){
            }*/
            //Commented by A-8445 as UCM triggered twice ENDS
//                if("MAIL".equalsIgnoreCase(flightDetailsVO.getSubSystem())){
//                    try{
//                        com.ibsplc.icargo.business.operations.flthandling.vo.OperationalFlightVO fltVO=new com.ibsplc.icargo.business.operations.flthandling.vo.OperationalFlightVO();
//                        fltVO.setCompanyCode(companyCode);
//                        fltVO.setAirportCode(flightDetailsVO.getCurrentAirport());
//                        fltVO.setCarrierId(flightDetailsVO.getFlightCarrierIdentifier());
//                        fltVO.setFlightNumber(flightDetailsVO.getFlightNumber());
//                        fltVO.setFlightSequenceNumber(flightDetailsVO.getFlightSequenceNumber());
//                        fltVO.setLegSerialNumber(flightDetailsVO.getLegSerialNumber());
//                if ("Mail".equalsIgnoreCase(ucmTrgVal)  || "".equalsIgnoreCase(ucmTrgVal)) {
//                    saveAndSendUCM(flightDetailsVO);
//                }
//                if ("Both".equalsIgnoreCase(ucmTrgVal) ) {
//
//                            if("E".equalsIgnoreCase(flightDetailsVO.getDirection())){
//                        boolean cargoExportFlightClosedStatus = new OperationsFltHandlingProxy()
//                                .cargoFlightStatus(fltVO);
//
//                        log.log(Log.FINEST, "\n ******************",
//                                cargoExportFlightClosedStatus);
//                        if (cargoExportFlightClosedStatus) {
//                            saveAndSendUCM(flightDetailsVO);
//                        }
//                        }
//                            if("I".equalsIgnoreCase(flightDetailsVO.getDirection())){
//                                boolean cargoImportFlightClosedStatus = new OperationsFltHandlingProxy()
//                                        .cargoFlightStatusImport(fltVO);
//
//                                log.log(Log.FINEST, "\n ******************",
//                                        cargoImportFlightClosedStatus);
//                                if (cargoImportFlightClosedStatus) {
//                                    saveAndSendUCM(flightDetailsVO);
//                                }
//                                }
//
//
//                 }
//
//                    }
//                catch (ProxyException proxyException) {
//                    log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
//                }
//            }
//
//                        else{
//
//                            try{
//                            OperationalFlightVO fltVOMail=new OperationalFlightVO();
//                            fltVOMail.setCompanyCode(companyCode);
//                            fltVOMail.setAirportCode(flightDetailsVO.getCurrentAirport());
//                            fltVOMail.setCarrierId(flightDetailsVO.getFlightCarrierIdentifier());
//                            fltVOMail.setFlightNumber(flightDetailsVO.getFlightNumber());
//                            fltVOMail.setFlightSequenceNumber(flightDetailsVO.getFlightSequenceNumber());
//                            fltVOMail.setLegSerialNumber(flightDetailsVO.getLegSerialNumber());
//                            fltVOMail.setForUCMSendChk(true);
//                            if ("Cargo".equalsIgnoreCase(ucmTrgVal) || "".equalsIgnoreCase(ucmTrgVal)) {
//                                saveAndSendUCM(flightDetailsVO);
//                            }
//
//                            if ("Both".equalsIgnoreCase(ucmTrgVal) ) {
//                            if("E".equalsIgnoreCase(flightDetailsVO.getDirection())){
//                        boolean mailExportFlightClosedStatus = new MailOperationsProxy().isFlightClosedForMailOperations(fltVOMail);
//
//                        log.log(Log.FINEST, "\n ******************",
//                                mailExportFlightClosedStatus);
//                        if (mailExportFlightClosedStatus) {
//                            saveAndSendUCM(flightDetailsVO);
//                        }
//                        }
//                            if("I".equalsIgnoreCase(flightDetailsVO.getDirection())){
//                                boolean mailImportFlightClosedStatus = new MailOperationsProxy(). isFlightClosedForInboundOperations(fltVOMail);
//
//
//                                log.log(Log.FINEST, "\n ******************",
//                                        mailImportFlightClosedStatus);
//                                if (mailImportFlightClosedStatus) {
//                                    saveAndSendUCM(flightDetailsVO);
//                                }
//                                }
//
//                            }
//
//                    }
//                            catch (ProxyException proxyException) {
//                                log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
//                            }
//                            /////////////////////////////
//
//            }commented by A-9103 as a part of ICRD-355586 ends
                //boolean isActualMvmntPresent = false;                                     
            //For avoiding stamping movements repeatedly for Import, Once it is stamped then no need to stamp again
                if (IMPORT.equalsIgnoreCase(flightDetailsVO.getDirection())) {
					// commenting below line as it cause compilation issue.
					// isActualMvmntPresent = ULD.isDummyULDMovementPresent(flightDetailsVO.getCompanyCode(),
                    //No mvmnt needed for FFM
                	isActualMvmntPresent = ULD.isDummyULDMovementPresent(flightDetailsVO.getCompanyCode(),
    						flightDetailsVO.getFlightCarrierIdentifier(),flightDetailsVO.getFlightNumber(),flightDetailsVO
    							.getFlightDate(),uldInFlightVO.getUldNumber(),uldInFlightVO.getPointOfLading(),
    								uldInFlightVO.getPointOfUnLading());
                	if(isActualMvmntPresent || 
							FlightDetailsVO.MANIFEST.equals(flightDetailsVO.getAction())){//No mvmnt needed for FFM
                        if (stockUpdateNeeded && FlightDetailsVO.CLOSURE.equals(flightDetailsVO.getAction())){
                            ULD uld = null;
                            try {
                                uld = ULD.find(flightDetailsVO.getCompanyCode(), uldInFlightVO.getUldNumber());
                            } catch (FinderException ex) {
                                log.log(Log.INFO, "FinderException---->", uldInFlightVO.getUldNumber());
                            }
                            if(uld != null){
                                uld.setOccupancyStatus(ISNOTOCCUPIED);
                                uld.setTransitStatus(INSTATION);
                            }
                        }
                        //if actual movement is not present create the uld
                        if(isActualMvmntPresent){   
						continue;
                        }
					}  
					}  
/*                if("MAIL".equalsIgnoreCase(flightDetailsVO.getSubSystem())){
            }*/

                //saveAndSendUCM(flightDetailsVO);
                /*
                 * the operations for the uld will be done only if it is either
                 * a QF owned ULD or a QF Flight or if the value for system
                 * parameter autouldstockupdateforulds is 'Y' in other case
                 * these changes on the uld will be bypassed
                 */
                //Added by A-4072
                /*
                 * System parameter uld.defaults.cancreateuld Expected values are Y,OWNFLT,OALFLT,N
                 */

                if (stockUpdateNeeded) {
                    ULD uld = null;
                    try {
                        uld = ULD.find(flightDetailsVO.getCompanyCode(), uldInFlightVO.getUldNumber());
                    } catch (FinderException ex) {
                        //Modified by A-3415 for ICRD-114517 - Starts
						boolean canCreateULD = false;
                        if(logonAttributes.getOwnAirlineCode().equals(ownerCode)
                                && FlightDetailsVO.FLAG_YES.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OWN))){
							canCreateULD = true;
                        }else if(!logonAttributes.getOwnAirlineCode().equals(ownerCode)
                                && FlightDetailsVO.FLAG_YES.equals(
                                        canCreateOALStockForULD(flightDetailsVO.getFlightNumber(),flightDetailsVO
                                                .getFlightCarrierIdentifier(),(int)flightDetailsVO
                                                .getFlightSequenceNumber(),parameterMap))){
                            /*
                             * Modified by A-4072
                             *  System parameter uld.defaults.cancreateuld expected values are Y,OWNFLT,OALFLT,N
                             *  Y ? OAL ULD stock should be created when OAL ULD is manifested either in own flights or in OAL flights.
                             *  OWNFLT ? Stock of OAL ULD should be created only when it is manifested in Own flights.
                             *  OALFLT? Stock of OAL ULD should be created only when it is manifested in OAL flights.
                             *  N ? Stock of OAL ULD should not be created in any scenario
                             */
                            canCreateULD = true;
                        }
                        if(canCreateULD && (FlightDetailsVO.ACCEPTANCE.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.ARRIVAL.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.BREAKDOWN.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.BUILDUP.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.MANIFEST.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.FINALISATION.equals(flightDetailsVO.getAction()))){
                            //Modified by A-3415 for ICRD-114517 - Ends
							uld = createULDForFlight(flightDetailsVO, uldInFlightVO);

						}
					}
					if (uld != null) {

                        if(FlightDetailsVO.CLOSURE.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.OFFLOADED.equals(flightDetailsVO.getAction())){
                            //Added by A-7131 for ICRD-182248 starts
							uld.setFlightInfo("");
							uld.setLastUpdateUser(logonAttributes.getUserId());
                            uld.setLastUpdateTime(new LocalDate(LocalDate.NO_STATION, Location.NONE,
                                    true).toCalendar());
                            //Added by A-7131 for ICRD-182248 ends
                            if(uldInFlightVO.isThruOrIntact() && FlightDetailsVO.CLOSURE.equals(flightDetailsVO.getAction())) {
                            	//If uld is marked as thru then occupancy status should be occupied
                            	uld.setOccupancyStatus(ISOCCUPIED); 
                            }else {
                            uld.setOccupancyStatus(ISNOTOCCUPIED);
                            }
                           
							uld.setTransitStatus(INSTATION);
						}
                        if(FlightDetailsVO.FINALISATION.equals(flightDetailsVO.getAction())){
							uld.setTransitStatus(INTRANSIT);
						}
                        if(FlightDetailsVO.ACCEPTANCE.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.ARRIVAL.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.BREAKDOWN.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.BUILDUP.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.MANIFEST.equals(flightDetailsVO.getAction())
                                ||FlightDetailsVO.FINALISATION.equals(flightDetailsVO.getAction())){
							// Making the nonopeartional ulds to operational
                        	if(!(FlightDetailsVO.MANIFEST.equals(flightDetailsVO.getAction()) ||
                        		FlightDetailsVO.BREAKDOWN.equals(flightDetailsVO.getAction()))){
							if (NONOPERATIONAL.equals(uld.getOverallStatus())) {
								uld.setOverallStatus(OPERATIONAL);
							}
                        	}
                            if (EXPORT.equalsIgnoreCase(flightDetailsVO
                                    .getDirection())) {
								log.log(Log.INFO, "Export case: content Id - " + uldInFlightVO.getContent());
                                uld.setContent(uldInFlightVO.getContent());
								if (!"E".equals(uldInFlightVO.getContent())) {
										uld.setOccupancyStatus(ISOCCUPIED);
                                    }
                                else if ("E".equals(uldInFlightVO.getContent())){
                                    uld.setTransitStatus(INSTATION);// FOR ICRD-196476 by a-4812
                                    uld.setOccupancyStatus(ISNOTOCCUPIED);// FOR ICRD-292937 by a-7955
                                   
                                }
                                if(FlightDetailsVO.FINALISATION.equals(flightDetailsVO.getAction())){
                                    uld.setTransitStatus(INTRANSIT);
                                    if(UldManifestVO.CONTENT_ID_EMPTY.equals(uldInFlightVO.getContent())){   
                                    	uld.setOccupancyStatus(ISNOTOCCUPIED);
                                    }            
                                }

								saveULDMovementForExport(flightDetailsVO, uldInFlightVO, uld);
							} else if (IMPORT.equalsIgnoreCase(flightDetailsVO.getDirection())) {
								log.log(Log.INFO, "Import case: releaseTriggerPoint - " + releaseTriggerPt);

                                if (releaseTriggerPtList != null && !releaseTriggerPtList.isEmpty()) {
                                    if (FlightDetailsVO.ARRIVAL.equals(flightDetailsVO.getAction()) &&  releaseTriggerPtList.contains(RELEASE_TRIGGER_POINT_ARR)) {
                                    	if(uldInFlightVO.isThruOrIntact()) {
                                    		uld.setOccupancyStatus(ISOCCUPIED);
                                    	}else {
                                        uld.setOccupancyStatus(ISNOTOCCUPIED);
                                    	}                                    	
                                        uld.setTransitStatus(INSTATION);// FOR ICRD-196476 by a-4812
                                    }else if(FlightDetailsVO.BREAKDOWN.equals(flightDetailsVO.getAction()) &&  releaseTriggerPtList.contains(RELEASE_TRIGGER_POINT_BDN)) {
                                    	if(uldInFlightVO.isThruOrIntact()) {
                                    		uld.setOccupancyStatus(ISOCCUPIED);
                                    	}else {
                                        uld.setOccupancyStatus(ISNOTOCCUPIED);
                                    	} 
                                        uld.setTransitStatus(INSTATION);// FOR ICRD-196476 by a-4812
                                    }
                                }
								//If check Added as part of ICRD-285071
								if(!isActualMvmntPresent)
                                if(!FlightDetailsVO.MANIFEST.equals(flightDetailsVO.getAction())){
								saveULDMovementForImport(flightDetailsVO, uldInFlightVO, uld);
								}
							}
                            //Modified by A-7794 as part of ICRD-224596 ; suggested by DevaPrasanth
                            //Added by A-7918
                            if(!FlightDetailsVO.BUILDUP.equals(flightDetailsVO.getAction())) {
							createTransactionsForUldInFlight(flightDetailsVO, uld);
						}
					}
				}
			}
            }
            if(FlightDetailsVO.FINALISATION.equals(flightDetailsVO.getAction())){
				updateUldStatusOnFlightFinalaisation(flightDetailsVO);
			}
		}
		log.exiting("ULDCONTROLLER", "updateULDForOperations");
	}
	

    /**
     *  Method      :   ULDController.isWetLeasedFlt
     *  Added by    :   a-6830 on Aug 29, 2017
     *  Used for    :   Added as part of CR ICRD-192322
     *  Parameters  :   @param flightDetailsVO
     *  Parameters  :   @return
     *  Return type :   boolean wetleasedFlt
     */
    private boolean isWetLeasedFlt(FlightDetailsVO flightDetailsVO) {

        Collection<FlightValidationVO> flightValidationVOs = null;
        FlightValidationFilterVO flightValidationFilterVO = new FlightValidationFilterVO();
        boolean wetleasedFlt = false;

        flightValidationFilterVO.setFlightNumber(flightDetailsVO.getFlightNumber());
        flightValidationFilterVO.setFlightCarrierId(flightDetailsVO.getFlightCarrierIdentifier());
        flightValidationFilterVO.setCompanyCode(flightDetailsVO.getCompanyCode());
        /*
         * Modified by J-1191 as part of ICRD-324111
         * validateFlight uses either seqnum or date, so use seqnum when available.
         * For import cases, flight date is coming as arrival date that could be different in case of day change.
         * For these cases, wetleased indicator may not be fetched correctly.
         */
        if(flightDetailsVO.getFlightSequenceNumber()>0) {
        	flightValidationFilterVO.setFlightSequenceNumber((int) flightDetailsVO.getFlightSequenceNumber());
        }else {
        flightValidationFilterVO.setFlightDate(flightDetailsVO.getFlightDate());
        }
        try {
            flightValidationVOs = new FlightOperationsProxy().validateFlight(flightValidationFilterVO);
        } catch (ProxyException e) {
            log.log(Log.INFO, "isWetLeasedFlt- ProxyException ");
        } catch (SystemException e) {
            log.log(Log.INFO, "isWetLeasedFlt - SystemException ");
        }

        if(flightValidationVOs != null && flightValidationVOs.size()>0){
            for(FlightValidationVO validationVO : flightValidationVOs){
                if(FlightValidationVO.FLIGHT_AGRMNT_TYP_LEASED.equals(validationVO.getAgreementType())){
                    wetleasedFlt = true;
                }
            }
        }

        return wetleasedFlt;
    }

    public String findULDOwnerCode(String cmpcod, String uldNumber)
    throws SystemException{
		log.entering("ULDCONTROLLER", "findULDOwnerCode");

		String ownerCode = null;
		int length = uldNumber.length();
		String twoalpha = uldNumber.substring(length - 2);
		String threealpha = uldNumber.substring(length - 3);
		String arldetail = findOwnerCode(cmpcod, twoalpha, threealpha);
        //Null Check added as part of ICRD-21184
        if(arldetail != null) {
		String arldtlArray[] = arldetail.split("~");
		if ("2".equals(arldtlArray[0])) {
			ownerCode = twoalpha;
		} else {
			ownerCode = threealpha;
		}
		}
		log.entering("ULDCONTROLLER", "findULDOwnerCode");
		return ownerCode;
	}
	private ULD createULDForFlight(FlightDetailsVO flightDetailsVO, ULDInFlightVO uldInFlightVO)
    throws SystemException, CurrencyConversionException, DimensionConversionException{

		log.entering("ULDCONTROLLER", "createULDForFlight");
		ULD uld = null;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();
		// getting uldOwnerCode.ie , last 2 or 3 letters of the
		// String uldNumber

		int len = uldInFlightVO.getUldNumber().length();
        String twoalphacode = uldInFlightVO.getUldNumber()
                .substring(len - 2);
        String threealphacode = uldInFlightVO.getUldNumber()
                .substring(len - 3);

        log.log(Log.INFO, "%%%%%%%% twoalphacode ", twoalphacode);
        log.log(Log.INFO, "%%%%%%%% threealphacode ", threealphacode);
        String arldtl = findOwnerCode(flightDetailsVO
                .getCompanyCode(), twoalphacode, threealphacode);
        //Null Check added as part of ICRD-21184
        String airlineDetailArr[] = null;
        int ownerAirlineId = 0;
        ULDVO uldVo = new ULDVO();
        if(arldtl != null) {
            airlineDetailArr = arldtl.split("~");
            ownerAirlineId = Integer
                .valueOf(airlineDetailArr[1]);
            if (TWO_APLHA.equals(airlineDetailArr[0])) {
            	uldVo.setOwnerAirlineCode(twoalphacode);
            	uldVo.setOperationalAirlineCode(twoalphacode);
            } else {
            	uldVo.setOwnerAirlineCode(threealphacode);
            	uldVo.setOperationalAirlineCode(threealphacode);
            }
			log.log(Log.INFO, "%%%%%%%% ownerAirlineId ", ownerAirlineId);
		}

		uldInFlightVO.setUldOwnerId(ownerAirlineId); 
        /*if ((flightDetailsVO.getFlightCarrierIdentifier() != 0 && ownerAirlineId == flightDetailsVO
                .getFlightCarrierIdentifier())
                || (flightDetailsVO
                        .getFlightCarrierIdentifier() == 0 && logonAttributes
                        .getOwnAirlineIdentifier() == ownerAirlineId)) {*/
			// if(ownerAirlineId ==
			// flightDetailsVO.getFlightCarrierIdentifier() ){
			// Do maintain ULD
			// starts
            uld = createULD(flightDetailsVO, uldInFlightVO.getUldNumber(),uldVo);
			log.log(Log.FINE, "creating ULD");
			// ends
            /*} Commented by A-3415 for ICRD-114538. Borrow transaction will no longer be there
        else {
            // do Borrow transaction

            ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
            transactionDetailsVO.setCompanyCode(flightDetailsVO
                    .getCompanyCode());
            transactionDetailsVO
                    .setDamageStatus(ULDVO.DAMAGED_STATUS);

            //Null Check added as part of ICRD-21184
            if(arldtl != null) {
            if (("2").equals(airlineDetailArr[0])) {
                transactionDetailsVO
                        .setFromPartyCode(twoalphacode);
            } else {
                transactionDetailsVO
                        .setFromPartyCode(threealphacode);
                }
            }
            transactionDetailsVO
                    .setFromPartyIdentifier(ownerAirlineId);
            // transactionDetailsVO.setLastUpdateTime()
            transactionDetailsVO
                    .setLastUpdateUser(logonAttributes
                            .getUserId());
            if (flightDetailsVO.getFlightCarrierIdentifier() != 0) {
                transactionDetailsVO
                        .setOperationalAirlineIdentifier(flightDetailsVO
                                .getFlightCarrierIdentifier());
            } else {
                transactionDetailsVO
                        .setOperationalAirlineIdentifier(logonAttributes
                                .getOwnAirlineIdentifier());
            }
            transactionDetailsVO
                    .setCurrOwnerCode(ownerAirlineId);
            transactionDetailsVO
                    .setPartyType(PARTYTYPE_AIRLINE);
            // Here uldnature is estimated as GEN .This is used
            // when
            // uld is created
            transactionDetailsVO.setUldNature("GEN");
            // transactionDetailsVO.setReturnedBy()
            // transactionDetailsVO.setReturnPartyCode()
            // transactionDetailsVO.setReturnPartyIdentifier()
            // transactionDetailsVO.setReturnStationCode()
            transactionDetailsVO.setToPartyCode(flightDetailsVO
                    .getCarrierCode());
            transactionDetailsVO
                    .setToPartyIdentifier(flightDetailsVO
                            .getFlightCarrierIdentifier());
            transactionDetailsVO.setUldNumber(uldInFlightVO
                    .getUldNumber());
            log.log(Log.INFO, "%%%%%%%%%%%%  logonAttributes.getStationCode ",
                    logonAttributes.getStationCode());
            log.log(Log.INFO, "%%%%%%%%%%%%  POL ", uldInFlightVO.getPointOfLading());
            log.log(Log.INFO, "%%%%%%%%%%%%  POU", uldInFlightVO.getPointOfUnLading());
            if (uldInFlightVO.getPointOfLading() != null
                    && uldInFlightVO.getPointOfLading().trim()
                            .length() > 0) {
                transactionDetailsVO
                        .setTransactionStationCode(uldInFlightVO
                                .getPointOfLading());
            } else {
                transactionDetailsVO
                        .setTransactionStationCode(logonAttributes
                                .getAirportCode());
            }
            if (uldInFlightVO.getPointOfUnLading() != null
                    && uldInFlightVO.getPointOfUnLading()
                            .trim().length() > 0) {
                transactionDetailsVO
                        .setTxStationCode(uldInFlightVO
                                .getPointOfUnLading());
            } else {
                transactionDetailsVO
                        .setTxStationCode(logonAttributes
                                .getAirportCode());
            }
            // }else
            // if(IMPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
            // transactionDetailsVO.setTxStationCode(logonAttributes.getAirportCode());
            // transactionDetailsVO.setTransactionStationCode(uldInFlightVO.getPointOfUnLading());
            // }
            //Added for ICRD-31853
            AirlineValidationVO airlineValidationVO = null;
            try {
                airlineValidationVO = new SharedAirlineProxy()
                        .findAirline(
                                flightDetailsVO.getCompanyCode(),
                                logonAttributes
                                        .getOwnAirlineIdentifier());
            } catch (ProxyException e) {
                throw new SystemException(e.getErrors().iterator().next()
                        .getErrorCode());
            }
            String airlineCode = airlineValidationVO
            .getAlphaCode();

            String ctrlRcptNo = findCRNForULDTransaction(
                    logonAttributes
                            .getCompanyCode(),
                    airlineCode);
            String crn = new StringBuilder()
                    .append(
                            ctrlRcptNo
                                    .substring(
                                            0,
                                            4))
                    .append("0")
                    .append(
                            ctrlRcptNo
                                    .substring(
                                            4,
                                            11))
                    .toString();
            transactionDetailsVO
                    .setControlReceiptNumber(crn);
            transactionDetailsVO.setControlReceiptNumberPrefix(transactionDetailsVO.getControlReceiptNumber().substring(
                    0, 3));
            //Added for ICRD-31853 ends
            transactionDetailsVO
                    .setTransactionType(BORROW_TRANSACTION);
            transactionDetailsVO.setTransactionStatus("T");
            transactionDetailsVO
                    .setTransactionRemark(flightDetailsVO
                            .getRemark());
            transactionDetailsVO.setTransactionNature("T");
            transactionDetailsVO.setUldType(uldInFlightVO
                    .getUldNumber().substring(0, 3));

            log.log(Log.INFO, "Station code", transactionDetailsVO.getTxStationCode());
            transactionDetailsVO
                    .setTransactionDate(new LocalDate(
                            transactionDetailsVO
                                    .getTxStationCode(),
                            Location.ARP, true));
            createBorrowTransactions(transactionDetailsVO);

            log.log(Log.INFO,
                    "@@@@@@@@@@@ BORROW TRANSACTION IS DONE");
        }*/
		log.exiting("ULDCONTROLLER", "createULDForFlight");
		return uld;
	}
	/*
	 * Commented by A-3415 for ICRD-114538
	 * 
     * private void createTransactionsForUldInFlight(
            FlightDetailsVO flightDetailsVO, ULD uld)
        throws SystemException, MessageConfigException, CurrencyConversionException,
            DimensionConversionException{

        log.entering("ULDCONTROLLER", "createTransactionsForUldInFlight");
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();

        Collection<ULDReturnTxnVO> uldReturnTxnVOs = null;


        if (uld.getOperationalAirlineIdentifier() != flightDetailsVO
                .getFlightCarrierIdentifier()
                && flightDetailsVO.getFlightCarrierIdentifier() > 0) {
            // to get the current station of a ULD

             * LogonAttributes logonAttributes =
             * ContextUtils.getSecurityContext()
             * .getLogonAttributesVO();


            //Commented as part of ICRD-21184

//          String operatingAirlineCode = ULD.findCarrierCode(
//                  flightDetailsVO.getCompanyCode(), uld
//                          .getOperationalAirlineIdentifier());

            //Added as part of ICRD-21184

            String operatingAirlineCode = null;
            AirlineValidationVO airlineValidationVO = null;
            try {
                airlineValidationVO  = new SharedAirlineProxy().findAirline(flightDetailsVO.getCompanyCode(), uld.getOperationalAirlineIdentifier());
                operatingAirlineCode = airlineValidationVO.getAlphaCode();
            } catch (ProxyException proxyException) {
                log.log(Log.INFO, "ProxyException", proxyException.getErrors());
                log.log(Log.INFO, "Cannot find airline", proxyException.getMessage());
            }


            log.log(Log.INFO, "%%%%%%%% operatingAirlineCode ",
                    operatingAirlineCode);
            TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
            transactionFilterVO.setCompanyCode(flightDetailsVO
                    .getCompanyCode());
            transactionFilterVO
                    .setFromPartyCode(flightDetailsVO
                            .getCarrierCode());
            transactionFilterVO.setPartyType(PARTYTYPE_AIRLINE);
            transactionFilterVO
                    .setToPartyCode(operatingAirlineCode);
            transactionFilterVO.setTransactionStatus("T");
            transactionFilterVO.setUldNumber(uld.getUldPK().getUldNumber());
            transactionFilterVO
                    .setUldNumbers(new ArrayList<String>());
            transactionFilterVO.getUldNumbers().add(uld.getUldPK().getUldNumber());
            transactionFilterVO.setTransactionType(ALL);
            transactionFilterVO.setPageNumber(1);
            TransactionListVO transactionListVO = listULDTransactionDetails(transactionFilterVO);

            Collection<ULDTransactionDetailsVO> detailsVOs = transactionListVO
                    .getTransactionDetailsPage();

            if (detailsVOs != null && detailsVOs.size() > 0) {
                uldReturnTxnVOs = new ArrayList<ULDReturnTxnVO>();
                ULDReturnTxnVO uldReturnTxnVO = new ULDReturnTxnVO();
                uldReturnTxnVO.setCompanyCode(flightDetailsVO
                        .getCompanyCode());
                String txnTyp = detailsVOs.iterator().next()
                        .getTransactionType();
                if ("L".equals(txnTyp)) {
                    uldReturnTxnVO
                            .setPartyCode(operatingAirlineCode);
                } else {
                    uldReturnTxnVO.setPartyCode(flightDetailsVO
                            .getCarrierCode());
                }
                uldReturnTxnVO.setPartyType(PARTYTYPE_AIRLINE);
                uldReturnTxnVO
                        .setTransactionType(detailsVOs
                                .iterator().next()
                                .getTransactionType());
                uldReturnTxnVO.setUldNumber(uld.getUldPK().getUldNumber());
                uldReturnTxnVOs.add(uldReturnTxnVO);
                try {
                    returnULDFromOperations(uldReturnTxnVOs);
                } catch (ULDDefaultsBusinessException ex) {
                    log
                            .log(
                                    Log.INFO,
                                    "%%%%%%%%%%%%%% ULDDefaultsBusinessException !!!!!!!!",
                                    ex.getErrors());
                } catch (AgreementDoesNotExistsException ex) {
                    log
                            .log(
                                    Log.INFO,
                                    "%%%%%%%%%%%%%% AgreementDoesNotExistsException !!!!!!!",
                                    ex
                                            .getErrors());
                }
            } else {
                log
                        .log(Log.INFO,
                                "%%%%%%%%%   LOAN TRANSACTION TO BE DONE");
                // Do loan transaction
                TransactionVO transactionVO = new TransactionVO();
                transactionVO
                        .setOperationalFlag(TransactionVO.OPERATION_FLAG_INSERT);
                ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
                transactionDetailsVO
                        .setCompanyCode(flightDetailsVO
                                .getCompanyCode());
                // Party which is Loaning the ULD
                transactionDetailsVO
                        .setFromPartyCode(operatingAirlineCode);
                transactionDetailsVO.setFromPartyIdentifier(uld
                        .getOperationalAirlineIdentifier());
                transactionDetailsVO.setDamageStatus(uld
                        .getDamageStatus());
                // transactionDetailsVO.setLastUpdateTime()
                transactionDetailsVO
                        .setLastUpdateUser(logonAttributes
                                .getUserId());
                transactionDetailsVO
                        .setOperationalFlag(ULDTransactionDetailsVO.OPERATION_FLAG_INSERT);
                // Party for whom the uld is loaning
                transactionDetailsVO
                        .setToPartyCode(flightDetailsVO
                                .getCarrierCode());
                transactionDetailsVO
                        .setToPartyIdentifier(flightDetailsVO
                                .getFlightCarrierIdentifier());
                transactionDetailsVO.setUldNumber(uld.getUldPK().getUldNumber());
                transactionDetailsVO.setUldType(uld.getUldPK().getUldNumber().substring(0, 3));
                // if(EXPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
                transactionDetailsVO
                        .setTxStationCode(logonAttributes
                                .getAirportCode());
                transactionDetailsVO
                        .setTransactionStationCode(logonAttributes
                                .getAirportCode());
                // }else
                // if(IMPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
                // transactionDetailsVO.setTxStationCode(logonAttributes.getAirportCode());

                // transactionDetailsVO.setTransactionStationCode(logonAttributes.getAirportCode());

                log
                        .log(
                                Log.INFO,
                                "%%%%%%%%%%%%%  transactionDetailsVO.getTransactionStationCode",
                                transactionDetailsVO
                                                .getTransactionStationCode());
                // }
                if (flightDetailsVO
                        .getFlightCarrierIdentifier() == logonAttributes
                        .getOwnAirlineIdentifier()) {
                    transactionDetailsVO
                            .setTransactionType(BORROW_TRANSACTION);
                } else {
                    transactionDetailsVO
                            .setTransactionType(LOANED_TRANSACTION);
                }
                transactionDetailsVO.setTransactionStatus("T");

                transactionDetailsVO
                        .setTransactionRemark(flightDetailsVO
                                .getRemark());
                transactionDetailsVO
                        .setOperationalAirlineIdentifier(flightDetailsVO
                                .getFlightCarrierIdentifier());
                transactionDetailsVO.setTransactionNature("T");
                transactionDetailsVO
                        .setTransactionDate(new LocalDate(
                                transactionDetailsVO
                                        .getTransactionStationCode(),
                                Location.ARP, true));
                transactionDetailsVO
                        .setPartyType(PARTYTYPE_AIRLINE);
                transactionVO
                        .setUldTransactionDetailsVOs(new ArrayList<ULDTransactionDetailsVO>());
                transactionVO.getUldTransactionDetailsVOs()
                        .add(transactionDetailsVO);
                try {
                    createULDTransaction(transactionVO);
                    // To be reviewed sendLUCMessage
                    log
                            .log(Log.INFO,
                                    "@@@@@@@@@  LOAN TRANSACTION IS PERFORMED");
                } catch (ULDDefaultsBusinessException ex) {
                    log
                            .log(
                                    Log.INFO,
                                    "@@@@@@@@@  ULDDefaultsBusinessException ia caught",
                                    ex);
                }

                if (logonAttributes.getOwnAirlineIdentifier() == flightDetailsVO
                        .getFlightCarrierIdentifier()) {
                    if (foreignUnits != null) {
                        foreignUnits = new StringBuilder(
                                foreignUnits)
                                .append(",")
                                .append(
                                        uldInFlightVO
                                                .getUldNumber())
                                .toString();
                    } else {
                        foreignUnits = new StringBuilder(
                                uldInFlightVO.getUldNumber())
                                .toString();
                    }
                }

            }
        } else if (uld.getOperationalAirlineIdentifier() == flightDetailsVO
                .getFlightCarrierIdentifier()
                && flightDetailsVO.getFlightCarrierIdentifier() > 0
                && uld.getReleasedTo() != null
                && uld.getReleasedTo().trim().length() > 0) {

            TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
            transactionFilterVO.setCompanyCode(flightDetailsVO
                    .getCompanyCode());
            transactionFilterVO
                    .setFromPartyCode(flightDetailsVO
                            .getCarrierCode());
            transactionFilterVO.setTransactionStatus("T");
            transactionFilterVO.setUldNumber(uld.getUldPK().getUldNumber());
            transactionFilterVO
                    .setUldNumbers(new ArrayList<String>());
            transactionFilterVO.getUldNumbers().add(uld.getUldPK().getUldNumber());
            transactionFilterVO
                    .setTransactionType(LOANED_TRANSACTION);
            transactionFilterVO.setPageNumber(1);
            TransactionListVO transactionListVO = listULDTransactionDetails(transactionFilterVO);
            Collection<ULDTransactionDetailsVO> detailsVOs = transactionListVO
                    .getTransactionDetailsPage();
            if (detailsVOs != null && detailsVOs.size() > 0) {
                uldReturnTxnVOs = new ArrayList<ULDReturnTxnVO>();
                ULDReturnTxnVO uldReturnTxnVO = new ULDReturnTxnVO();
                uldReturnTxnVO.setCompanyCode(flightDetailsVO
                        .getCompanyCode());
                uldReturnTxnVO
                        .setTransactionType(LOANED_TRANSACTION);
                uldReturnTxnVO.setUldNumber(uld.getUldPK().getUldNumber());
                uldReturnTxnVOs.add(uldReturnTxnVO);
                try {
                    returnULDFromOperations(uldReturnTxnVOs);
                } catch (ULDDefaultsBusinessException ex) {
                    log
                            .log(
                                    Log.INFO,
                                    "%%%%%%%%%%%%%% ULDDefaultsBusinessException !!!!!!!!",
                                    ex.getErrors());
                } catch (AgreementDoesNotExistsException ex) {
                    log
                            .log(
                                    Log.INFO,
                                    "%%%%%%%%%%%%%% AgreementDoesNotExistsException !!!!!!!",
                                    ex
                                            .getErrors());
                }
            }
        }
        log.exiting("ULDCONTROLLER", "createTransactionsForUldInFlight");
    }*/
    /*
     * Modified by A-3415 for ICRD-114538
     */
    private void createTransactionsForUldInFlight(
            FlightDetailsVO flightDetailsVO, ULD uld)
        throws SystemException, MessageConfigException, CurrencyConversionException,
            DimensionConversionException, ULDDefaultsBusinessException{

        log.entering("ULDCONTROLLER", "createTransactionsForUldInFlight");
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();
        String operatingAirlineCode = logonAttributes.getOwnAirlineCode();
                            log.log(Log.INFO,"%%%%%%%%%   LOAN TRANSACTION TO BE DONE");
        String fromParty = null;
        int fromPartyId = 0;
        String toParty = null;
        int toPartyID= 0;
        String uldNumber = uld.getUldPK().getUldNumber();
        int len = uldNumber.length();
        String twoalphacode = uldNumber.substring(len - 2);
        String threealphacode = uldNumber.substring(len - 3);
        String arldtl = findOwnerCode(logonAttributes.getCompanyCode(), twoalphacode, threealphacode);
        String airlineDetailArr[] = arldtl.split("~");
        fromPartyId = Integer.valueOf(airlineDetailArr[1]);
        log.log(Log.INFO, "%%%%%%%% fromPartyId ", fromPartyId);
        if ("2".equals(airlineDetailArr[0])) {
            fromParty = twoalphacode;
        } else {
            fromParty = threealphacode;
        }
                                // Do loan transaction
                                TransactionVO transactionVO = new TransactionVO();
                                transactionVO.setOperationalFlag(TransactionVO.OPERATION_FLAG_INSERT);
                                transactionVO.setCompanyCode(flightDetailsVO.getCompanyCode());//Added for bug IASCB-91315
                                transactionVO.setTransactionId(flightDetailsVO.getAction()); 
                                ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
                                transactionDetailsVO.setCompanyCode(flightDetailsVO
                                        .getCompanyCode());
                                // Party which is Loaning the ULD
                transactionDetailsVO.setFromPartyCode(fromParty);
                transactionDetailsVO.setFromPartyIdentifier(fromPartyId);
                                transactionDetailsVO.setDamageStatus(uld
                                        .getDamageStatus());
                                // transactionDetailsVO.setLastUpdateTime()
                                transactionDetailsVO
                                        .setLastUpdateUser(logonAttributes
                                                .getUserId());
                                transactionDetailsVO
                                        .setOperationalFlag(ULDTransactionDetailsVO.OPERATION_FLAG_INSERT);
                                // Party for whom the uld is loaning
								//Modified by A-7794 as part of ICRD-224779
                if(flightDetailsVO.getCarrierCode()!=null
                        && flightDetailsVO.getFlightCarrierIdentifier() != 0){
                    // Added as part of CR ICRD-192322
                    if(flightDetailsVO.isWetleasedFlt()){
                        transactionDetailsVO.setToPartyCode(logonAttributes.getCompanyCode());
                        transactionDetailsVO.setToPartyIdentifier(logonAttributes.getOwnAirlineIdentifier());
                        transactionDetailsVO.setOperationalAirlineIdentifier(logonAttributes.getOwnAirlineIdentifier());
                    }else{
                    transactionDetailsVO.setToPartyCode(flightDetailsVO.getCarrierCode());
                    transactionDetailsVO.setToPartyIdentifier(flightDetailsVO.getFlightCarrierIdentifier());
                    transactionDetailsVO.setOperationalAirlineIdentifier(flightDetailsVO.getFlightCarrierIdentifier());
                    }
                    // Added as part of CR CRD-192322 ends
                }else{
                    transactionDetailsVO.setToPartyCode(fromParty);
                    transactionDetailsVO.setToPartyIdentifier(fromPartyId);
                }
				
                //Added null check for subsystem as part of ICRD-236980 by A-7540
                if(flightDetailsVO.getSubSystem()!=null && flightDetailsVO.getSubSystem().equals(MailConstantsVO.MAIL_CONST) && flightDetailsVO.getCarrierCode()!=null
                        && flightDetailsVO.getFlightCarrierIdentifier() != 0
                        && FlightDetailsVO.ACCEPTANCE.equals(flightDetailsVO.getAction())){
                    transactionDetailsVO.setToPartyCode(flightDetailsVO.getCarrierCode());
                    transactionDetailsVO.setToPartyIdentifier(flightDetailsVO.getFlightCarrierIdentifier());
                }
                transactionDetailsVO.setUldNumber(uld.getUldPK().getUldNumber());
                transactionDetailsVO.setUldType(uld.getUldPK().getUldNumber().substring(0, 3));
                                // if(EXPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
				//Updating from Party for ICRD-349648
				transactionDetailsVO = populateFromParty(transactionDetailsVO);
                /*Commented the below code of setting transaction station code values with the login station. Instead add a new code
                 * for setting the same as per a new logic. This is doing as a temporary fix for ICRD-201494.
                 */
                /*transactionDetailsVO.setTxStationCode(logonAttributes.getAirportCode());
                transactionDetailsVO.setTransactionStationCode(logonAttributes.getAirportCode());*/
				// code for ICRD-201494 starts
				ULDInFlightVO selectedUldInFltVO = null;
				String transactionStation = null;
                for(ULDInFlightVO uldInFltVO : flightDetailsVO.getUldInFlightVOs()){
                    if(uld.getUldPK().getUldNumber().equals(uldInFltVO.getUldNumber())){
						selectedUldInFltVO = uldInFltVO;
						break;
					}
				}
                if(FlightDetailsVO.ACCEPTANCE.equals(flightDetailsVO.getAction())
                        ||FlightDetailsVO.BUILDUP.equals(flightDetailsVO.getAction())
                        ||FlightDetailsVO.MANIFEST.equals(flightDetailsVO.getAction())
                        ||FlightDetailsVO.FINALISATION.equals(flightDetailsVO.getAction())){
                    //Modified by A-7794 as part of ICRD-223299
                    if(null != selectedUldInFltVO.getPointOfLading()){
						transactionStation = selectedUldInFltVO.getPointOfLading();
                    }else{
						transactionStation = logonAttributes.getAirportCode();
					}
                }else if(FlightDetailsVO.ARRIVAL.equals(flightDetailsVO.getAction())
                        ||FlightDetailsVO.BREAKDOWN.equals(flightDetailsVO.getAction())){
					transactionStation = selectedUldInFltVO.getPointOfUnLading();
				}
                //Modified by A-7794 as part of ICRD-223299
				transactionDetailsVO.setTxStationCode(selectedUldInFltVO.getPointOfUnLading());
				transactionDetailsVO.setTransactionStationCode(transactionStation);
				// code for ICRD-201494 ends
                                log.log(Log.INFO,"%%%%%%%%%%%%%  transactionDetailsVO.getTransactionStationCode"
                                                        , transactionDetailsVO.getTransactionStationCode());
				
                    transactionDetailsVO
                            .setTransactionType(LOANED_TRANSACTION);
                    transactionDetailsVO.setSource("Operations");
                                transactionDetailsVO.setTransactionStatus("T");
                                transactionDetailsVO
                                        .setTransactionRemark(flightDetailsVO
                                                .getRemark());

                                transactionDetailsVO.setTransactionNature("T");
                    transactionDetailsVO.setTransactionDate(new LocalDate(
                                                transactionDetailsVO.getTransactionStationCode(),
                                                Location.STN, true));
                                transactionDetailsVO.setPartyType(PARTYTYPE_AIRLINE);
                                transactionVO.setUldTransactionDetailsVOs(new ArrayList<ULDTransactionDetailsVO>());
                transactionVO.getUldTransactionDetailsVOs()
                        .add(transactionDetailsVO);
                
                //added by A-5799 for IASCB-21969
                if(FlightDetailsVO.ACCEPTANCE.equals(flightDetailsVO.getAction())){
                	 log.log(Log.INFO,"%%%%%%%%%%%%%  flightDetailsVO.getAction()", flightDetailsVO.getAction()); 
                	 TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
                	 transactionFilterVO.setCompanyCode(transactionDetailsVO.getCompanyCode());
         			 transactionFilterVO.setUldNumber(transactionDetailsVO.getUldNumber());
                	 ULDTransactionDetailsVO lastTransactionVO = findLastTransactionsForUld(transactionFilterVO);
                	 if(lastTransactionVO!=null){     
                		 if(ULDTransactionDetailsVO.AGENT.equals(lastTransactionVO.getPartyType())
                				 && lastTransactionVO.getToPartyCode().equals(selectedUldInFltVO.getAgentCode())){
	                		 if(TO_BE_RETURNED.equals(lastTransactionVO.getTransactionStatus())){
	                			 
		                		 ULDTransaction uldTransaction = ULDTransaction.find(  
		                				 lastTransactionVO.getCompanyCode(),       
		                				 lastTransactionVO.getUldNumber(),
		                				 lastTransactionVO.getTransactionRefNumber()); 
		                		    transactionDetailsVO.setReturnStationCode(transactionDetailsVO.getTransactionStationCode());
		                		   returnULDLoanTransaction(transactionDetailsVO, uldTransaction  ,transactionVO);
	                		 }else if(TransactionFilterVO.TRANSACTION_TO_BE_INVOICED_STATUS.equals(lastTransactionVO.getTransactionStatus())){
	                			 transactionDetailsVO.setPartyType(ULDTransactionDetailsVO.AGENT);
	                			 transactionDetailsVO.setFromPartyCode(selectedUldInFltVO.getAgentCode());
	                			 transactionDetailsVO.setReturnStationCode(transactionDetailsVO.getTransactionStationCode());
	                             transactionVO.setUldTransactionDetailsVOs(new ArrayList<ULDTransactionDetailsVO>());
	                             transactionVO.getUldTransactionDetailsVOs().add(transactionDetailsVO);
	                			 returnWithoutPriorLoan(transactionVO);
	                		 }
                	  }   
                  }else{
                	  transactionDetailsVO.setPartyType(ULDTransactionDetailsVO.AGENT);
         			  transactionDetailsVO.setFromPartyCode(selectedUldInFltVO.getAgentCode());
         			  transactionDetailsVO.setReturnStationCode(transactionDetailsVO.getTransactionStationCode());
					  /** txStationCode value has already populated above in same method **/
         			 /** transactionDetailsVO.setTxStationCode(Objects.nonNull(selectedUldInFltVO.getPou())?selectedUldInFltVO.getPou():"");**/
                      transactionVO.setUldTransactionDetailsVOs(new ArrayList<ULDTransactionDetailsVO>());
                      transactionVO.getUldTransactionDetailsVOs().add(transactionDetailsVO);
                	  returnWithoutPriorLoan(transactionVO);
                  }
                }else{   
                                createULDLoan(transactionVO);
								log.log(Log.INFO,"@@@@@@@@@  LOAN TRANSACTION IS PERFORMED");
                                }
        log.exiting("ULDCONTROLLER", "createTransactionsForUldInFlight");
    }
    public void saveULDMovementForExport(
            FlightDetailsVO flightDetailsVO, ULDInFlightVO uldInFlightVO,ULD uld)
		throws SystemException {
		log.entering("ULDCONTROLLER", "saveULDMovementForExport");

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                            .getLogonAttributesVO();

		ULDIntMvtVO intMvtVO = null;
		ULDIntMvtDetailVO intMvtDetailVO = null;
		Collection<ULDIntMvtVO> uldIntMvts = null;
		Collection<ULDIntMvtDetailVO> uldIntMvtDetails = null;

		Collection<String> dummyULDs = null;
		Collection<ULDMovementVO> dummyULDMovementVOs = null;

        LocalDate lastMovementDate = new LocalDate(uld.getCurrentStation(), Location.ARP,
                uld.getLastMovementDate(), true);
        if (!uld.getCurrentStation().equals(
                uldInFlightVO.getPointOfLading())
                && (lastMovementDate != null && flightDetailsVO.getTransactionDate() != null &&
                        lastMovementDate.toGMTDate().before(flightDetailsVO.getTransactionDate().toGMTDate()))) {
			// doing dummy movement
			// ulds.add(uldInFlightVO.getUldNumber());
			dummyULDs = new ArrayList<String>();
            if (!FlightDetailsVO.FLAG_YES.equals(uld.getTransitStatus())) {
			dummyULDs.add(uldInFlightVO.getUldNumber());
			dummyULDMovementVOs = new ArrayList<ULDMovementVO>();
			ULDMovementVO movementVO = new ULDMovementVO();
            movementVO.setCompanyCode(flightDetailsVO
                    .getCompanyCode());
			//Modified by A-7794 as part of ICRD-229934
            movementVO.setCurrentStation(uldInFlightVO
                    .getPointOfLading());
            movementVO.setDummyMovement(true);
            /*
             * LogonAttributes logonAttributes =
             * ContextUtils
             * .getSecurityContext().getLogonAttributesVO();
             */
            movementVO.setLastUpdatedUser(logonAttributes
                    .getUserId());
            movementVO.setPointOfLading(uld
                    .getCurrentStation());
            movementVO.setLastUpdatedTime(new LocalDate(
                    movementVO.getPointOfLading(),
                    Location.ARP, true));
            movementVO.setPointOfUnLading(uldInFlightVO
                    .getPointOfLading());
            movementVO.setRemark(flightDetailsVO
                    .getRemark());
            movementVO.setUpdateCurrentStation(true);
            dummyULDMovementVOs.add(movementVO);
            }
            if (dummyULDs != null && dummyULDs.size() > 0) {
                try {
                    saveULDMovement(dummyULDs,
                            dummyULDMovementVOs);
                } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                    log
                            .log(Log.INFO,
                                    "%%%%%%%%%%%%%  wil never throw this exception");
                }
            }
        } else {
            if (uld.getLocation() != null
                    && !uld.getLocation().equals(
                            uldInFlightVO.getLocation())) {
				log.log(Log.INFO, "%%%%%%ULDINTMVT%%%");
				uldIntMvts = new ArrayList<ULDIntMvtVO>();
				intMvtVO = new ULDIntMvtVO();
                intMvtVO.setCompanyCode(flightDetailsVO
                        .getCompanyCode());
                intMvtVO.setLastUpdatedUser(logonAttributes
                        .getUserId());
                intMvtVO.setUldNumber(uldInFlightVO
                        .getUldNumber());
                intMvtVO.setAirport(uldInFlightVO
                        .getPointOfLading());

				uldIntMvtDetails = new ArrayList<ULDIntMvtDetailVO>();
				intMvtDetailVO = new ULDIntMvtDetailVO();
                intMvtDetailVO
                        .setCompanyCode(flightDetailsVO
                                .getCompanyCode());
                intMvtDetailVO.setAgentCode(uldInFlightVO
                        .getAgentCode());
                intMvtDetailVO.setAgentName(uldInFlightVO
                        .getAgentName());
                intMvtDetailVO.setContent(uldInFlightVO
                        .getContent());
                intMvtDetailVO.setFromLocation(uld
                        .getLocation());
                intMvtDetailVO
                        .setMvtType(ULDIntMvtVO.ACTUAL);
                intMvtDetailVO.setRemark(uldInFlightVO
                        .getRemark());
                intMvtDetailVO.setToLocation(uldInFlightVO
                        .getLocation());
                intMvtDetailVO.setUldNumber(uldInFlightVO
                        .getUldNumber());
				if (flightDetailsVO.getCurrentAirport() != null) {
                    intMvtDetailVO
                            .setMvtDate(new LocalDate(
                                    flightDetailsVO
                                            .getCurrentAirport(),
                                    Location.ARP, true));
                } else {
                    intMvtDetailVO.setMvtDate(
                            new LocalDate(logonAttributes.getAirportCode(),Location.ARP, true));
                }
                intMvtDetailVO.setAirport(uldInFlightVO
                        .getPointOfLading());
				uldIntMvtDetails.add(intMvtDetailVO);
                intMvtVO
                        .setULDIntMvtDetailVOs(uldIntMvtDetails);
				uldIntMvts.add(intMvtVO);
				log.log(Log.INFO, "%%%%%%ULDINTMVT%%%", uldIntMvts);
				saveULDIntMvts(uldIntMvts);
			}
		}
		log.exiting("ULDCONTROLLER", "saveULDMovementForExport");
	}
    public void saveULDMovementForImport(
            FlightDetailsVO flightDetailsVO, ULDInFlightVO uldInFlightVO,ULD uld)
        throws SystemException{
		log.entering("ULDCONTROLLER", "saveULDMovementForImport");

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();

		Collection<ULDMovementVO> uldMovementVOs = new ArrayList<ULDMovementVO>();

		Collection<String> dummyULDs = null;
		Collection<ULDMovementVO> dummyULDMovementVOs = null;

		Collection<String> ulds = new ArrayList<String>();

        String pou = null;
        if(uldInFlightVO.getPointOfUnLading() != null){
            pou = uldInFlightVO.getPointOfUnLading();
        }else{
            pou = logonAttributes.getAirportCode();
        }
		// Here , the uld is checked for whether it was not
		// there at the pol.
		// So it is brought to pol by dummmy Movement
		
        LocalDate lastMovementDate = new LocalDate(uld.getCurrentStation(), Location.ARP,
                uld.getLastMovementDate(), true);
        //modified By A-6344 for ICRD-110886
        boolean isDummyMovementExists=ULD.isDummyULDMovementPresent(flightDetailsVO
                .getCompanyCode(),flightDetailsVO
                .getFlightCarrierIdentifier(),flightDetailsVO
                .getFlightNumber(),flightDetailsVO
                .getFlightDate(),uldInFlightVO.getUldNumber(),uldInFlightVO
                .getPointOfLading(),logonAttributes
                .getAirportCode());
        if (!pou.equals(
                uld.getCurrentStation())) {
        if (!( uld.getCurrentStation().equals(
                uldInFlightVO.getPointOfLading())||
                (uld.getCurrentStation().equals(uldInFlightVO.getPointOfUnLading()) && isDummyMovementExists))
                && (lastMovementDate != null && flightDetailsVO.getTransactionDate() != null
                    && lastMovementDate.toGMTDate().before(flightDetailsVO.getTransactionDate().toGMTDate()))) {

            dummyULDs = new ArrayList<String>();
            dummyULDMovementVOs = new ArrayList<ULDMovementVO>();

            dummyULDs.add(uldInFlightVO.getUldNumber());
            ULDMovementVO movementVO = new ULDMovementVO();
            movementVO.setCompanyCode(flightDetailsVO
                    .getCompanyCode());
            movementVO.setCurrentStation(uldInFlightVO
                    .getPointOfLading());
            movementVO.setDummyMovement(true);
            /*
             * LogonAttributes logonAttributes =
             * ContextUtils
             * .getSecurityContext().getLogonAttributesVO();
             */
            movementVO.setLastUpdatedUser(logonAttributes
                    .getUserId());
            movementVO.setPointOfLading(uld
                    .getCurrentStation());
            movementVO.setLastUpdatedTime(new LocalDate(
                    pou,
                    Location.ARP, true));
            movementVO.setPointOfUnLading(uldInFlightVO
                    .getPointOfLading());
            movementVO.setRemark(flightDetailsVO
                    .getRemark());
            movementVO.setUpdateCurrentStation(true);
            movementVO.setContent(uldInFlightVO
                    .getContent());
			
			// movementVO.setFlightCarrierIdentifier(flightDetailsVO.getFlightCarrierIdentifier());
			// movementVO.setFlightDate(flightDetailsVO.getFlightDate());
			// movementVO.setCarrierCode(flightDetailsVO.getCarrierCode());
			// movementVO.setFlightNumber(flightDetailsVO.getFlightNumber());
			dummyULDMovementVOs.add(movementVO);
			if (dummyULDs != null && dummyULDs.size() > 0) {
				try {
                    saveULDMovement(dummyULDs,
                            dummyULDMovementVOs);
                } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                    log
                            .log(Log.INFO,
                                    "%%%%%%%%%%%%%  wil never throw this exception");
				}
			}
		}
        }
		// Here both dummy movement and actual movement
		// cases
		// arise
        if (!pou.equals(
                uld.getCurrentStation())) {
			// Actual Movement is being caoptured
			// Added by Deepu for solving bug 72143 starts
			ulds = new ArrayList<String>();
			uldMovementVOs = new ArrayList<ULDMovementVO>();
			// Added by Deepu for solving bug 72143 ends
			ulds.add(uldInFlightVO.getUldNumber());
			ULDMovementVO movementVO = new ULDMovementVO();
            movementVO.setCompanyCode(flightDetailsVO
                    .getCompanyCode());
            movementVO.setCurrentStation(pou);
            movementVO.setDummyMovement(false);
            /*
             * LogonAttributes logonAttributes =
             * ContextUtils
             * .getSecurityContext().getLogonAttributesVO();
             */
            movementVO.setLastUpdatedUser(logonAttributes
                    .getUserId());

            movementVO.setPointOfLading(uldInFlightVO
                    .getPointOfLading());
            movementVO.setLastUpdatedTime(new LocalDate(
                    pou,
                    Location.ARP, true));
            movementVO.setPointOfUnLading(pou);
            movementVO.setRemark(flightDetailsVO
                    .getRemark());
            movementVO.setUpdateCurrentStation(true);
            movementVO.setContent(uldInFlightVO
                    .getContent());
            movementVO
                    .setFlightCarrierIdentifier(flightDetailsVO
                            .getFlightCarrierIdentifier());
            movementVO.setFlightDate(flightDetailsVO
                    .getFlightDate());
            movementVO.setCarrierCode(flightDetailsVO
                    .getCarrierCode());
            movementVO.setFlightNumber(flightDetailsVO
                    .getFlightNumber());
			// Added By Ashraf Binu on 06Apr08 for
			// populating Agent Details.
            movementVO.setAgentCode(uldInFlightVO
                    .getAgentCode());
            movementVO.setAgentName(uldInFlightVO
                    .getAgentCode());
			uldMovementVOs.add(movementVO);
			if (ulds != null && ulds.size() > 0) {
				try {
					saveULDMovement(ulds, uldMovementVOs);
				} catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                    log
                            .log(Log.INFO,
                                    "%%%%%%%%%%%%%  wil never throw this exception");
				}
			}
		}
		log.exiting("ULDCONTROLLER", "saveULDMovementForImport");
}
    private void updateUldStatusOnFlightFinalaisation(FlightDetailsVO flightDetailsVO)
    throws SystemException{
		log.entering("ULDController", "updateUldStatusOnFlightFinalaisation");

		FlightMessageFilterVO flightMessageFilterVO = new FlightMessageFilterVO();
		FlightDetailsVO cmpFlightDetailsVO = null;

        flightMessageFilterVO.setCompanyCode(flightDetailsVO
                .getCompanyCode());
        flightMessageFilterVO.setFlightSequenceNumber(flightDetailsVO
                .getFlightSequenceNumber());
        flightMessageFilterVO.setAirportCode(flightDetailsVO
                .getCurrentAirport());
        flightMessageFilterVO.setFlightNumber(flightDetailsVO
                .getFlightNumber());
        cmpFlightDetailsVO = findUCMFlightDetails(flightMessageFilterVO);
        if (cmpFlightDetailsVO != null
                && cmpFlightDetailsVO.getUldInFlightVOs() != null
				&& cmpFlightDetailsVO.getUldInFlightVOs().size() > 0) {
			ULD ucmUld = null;
            for (ULDInFlightVO cmpULDDetailsVO : cmpFlightDetailsVO
                    .getUldInFlightVOs()) {
                try {
                    ucmUld = ULD.find(flightDetailsVO.getCompanyCode(),
                            cmpULDDetailsVO.getUldNumber());
				} catch (FinderException ex) {
					log.log(Log.INFO, "%%%%%%%SHUD NOT COME HERE%%%%");
				}
				if (ucmUld != null) {
					ucmUld.setTransitStatus(INTRANSIT);
				}
			}
		}
		log.entering("ULDController", "updateUldStatusOnFlightFinalaisation");
	}
	/**
	 * The method is to create a ULD during operations(build up or break down)
	 * if is not there A-1950
	 *
	 * @param flightDetailsVO
	 * @param uldNumber
	 * @throws SystemException
	 */
    private ULD createULD(FlightDetailsVO flightDetailsVO, String uldNumber,ULDVO uldVo)
            throws SystemException, CurrencyConversionException,
            DimensionConversionException {
        log.entering("ULDController", "createULD");
        ULDAirportLocationVO uldAirportLocationVO = null;

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        String currentStation = null;
        //Added by A-7359 for ICRD-217041 starts here
        if(flightDetailsVO.getUldInFlightVOs()!=null && flightDetailsVO.getUldInFlightVOs().size() > 0){
            for(ULDInFlightVO uldInFlightVO : flightDetailsVO.getUldInFlightVOs()){
                 if(uldNumber.equals(uldInFlightVO.getUldNumber())){
                  if(EXPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
                      currentStation = uldInFlightVO.getPointOfLading();
                  }else if(IMPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
					  //Modified by A-7794 as part of ICRD-224596
					  if(FlightDetailsVO.MANIFEST.equals(flightDetailsVO.getAction()) || (MailConstantsVO.MAIL_CONST.equals(flightDetailsVO.getSubSystem()) && FlightDetailsVO.ARRIVAL.equals(flightDetailsVO.getAction()))){
                          currentStation = uldInFlightVO.getPointOfLading();
                      }else{
						  currentStation = uldInFlightVO.getPointOfUnLading();
					  }
				  }
			  	}
			  } 
		}
        if(currentStation == null){
			currentStation = logonAttributes.getAirportCode();
		}	
        //Added by A-7359 for ICRD-217041 ends here
		String uldType = parseULDType(uldNumber);
        ULDTypeVO typeVo = null;
        
        if(uldNumber != null && uldNumber.length() > 0) {
        	typeVo = findULDTypeStructuralDetails(flightDetailsVO
                    .getCompanyCode(), uldNumber);
        }
        else {
        	typeVo = findULDTypeStructuralDetails(flightDetailsVO
                    .getCompanyCode(), uldType);
        }
        

		uldVo.setCompanyCode(flightDetailsVO.getCompanyCode());
		uldVo.setUldNumber(uldNumber);
		uldVo.setUldGroupCode(typeVo.getUldGroupCode());
		uldVo.setUldType(uldType);
		// note that the naure of the uld is estimated as GEN
		uldVo.setUldNature("GEN");
		if (flightDetailsVO.getFlightCarrierIdentifier() != 0) {
           //Added as part of CR ICRD-192322
            if(flightDetailsVO.isWetleasedFlt()){
                uldVo.setOperationalAirlineIdentifier(logonAttributes.
                        getOwnAirlineIdentifier());
            }else{
            uldVo.setOperationalAirlineIdentifier(flightDetailsVO
                    .getFlightCarrierIdentifier());
            }
         //Added as part of CR ICRD-192322 ends
        } else {
            uldVo.setOperationalAirlineIdentifier(logonAttributes
                    .getOwnAirlineIdentifier());
		}
		// need to verify
		for (ULDInFlightVO uldcode : flightDetailsVO.getUldInFlightVOs()) {
			if (uldNumber.equals(uldcode.getUldNumber())) {
				uldVo.setOwnerAirlineIdentifier(uldcode.getUldOwnerId());
			}
		}
		/*uldVo.setBaseHeight(typeVo.getBaseDimHeight());
		uldVo.setBaseLength(typeVo.getBaseDimLength());
		uldVo.setBaseWidth(typeVo.getBaseDimWidth());
		uldVo.setDisplayDimensionUnit(typeVo.getBaseDimUnit());*/
		uldVo.setStructuralWeight(typeVo.getStructuralWtLmt());
		//uldVo.setDisplayStructuralWeightUnit(typeVo.getStructuralWtLmtUnit());
        uldVo.setDisplayIataReplacementCost(typeVo.getIATARepCost());
        uldVo.setDisplayIataReplacementCostUnit(typeVo.getIATARepCostUnit());
        uldVo.setCurrentStation(currentStation);
        uldVo.setOwnerStation(currentStation);
        uldVo.setDamageStatus(ULDVO.DAMAGED_STATUS);
        uldVo.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
        uldVo.setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
        uldVo.setTransitStatus("N");
		uldVo.setTareWeight(typeVo.getTareWt());
		//uldVo.setDisplayTareWeightUnit(typeVo.getTareWtUnit());
		uldVo.setBaseHeight(typeVo.getBaseDimHeight());
		uldVo.setBaseLength(typeVo.getBaseDimLength());
		uldVo.setBaseWidth(typeVo.getBaseDimWidth());
		uldVo.setOperationalFlag(ULDVO.OPERATION_FLAG_INSERT);

		// uldVO.setCurrentStation(maintainULDForm.getCurrentStation().toUpperCase());
		// doubt
		// uldVo.setPurchaseDate
		// uldVO.setManufacturer(.getManufacturer());
		// uldVO.setPurchaseInvoiceNumber(
		// uldVO.setDisplayCurrentValue
		// uldVO.setCurrentValueUnit
		// uldVO.setDisplayUldPrice
		// uldVO.setUldPriceUnit
		// uldVO.setUldSerialNumber
		// uldVO.setVendor
		// uldVO.setOperationalAirlineCode

		// End by AG
		// Added By Ashraf
        uldVo.setLastUpdateTime(new LocalDate(currentStation, Location.ARP,
                false));
        uldVo.setLastUpdateUser(logonAttributes.getUserId());

        uldAirportLocationVO = ULD.findCurrentLocation(flightDetailsVO
                .getCompanyCode(), currentStation, CONTENT_EMPTY);
		if (uldAirportLocationVO != null) {
			uldVo.setLocation(uldAirportLocationVO.getFacilityCode());
			uldVo.setFacilityType(uldAirportLocationVO.getFacilityType());
		} else {
			uldVo.setLocation(ULDVO.NO_LOCATION);
			uldVo.setFacilityType(ULDVO.NO_LOCATION);
		}
		log.log(Log.INFO, "%%%%%%%%  uldVO", uldVo);
        ULD uld = new ULD(uldVo);
        //added for ICRD-314253
        if (uld != null) {
        	auditUldDetails(uldVo, uld);
        }
        return uld;
	}

	/**
	 *
	 * A-1950
	 *
	 * @param flightDetailsVO
	 * @throws SystemException
	 */
    public void updateULDForFlightFinalisation(FlightDetailsVO flightDetailsVO)
            throws SystemException {
		log.entering("ULDController", "updateULDForFlightFinalisation");
		log.log(Log.INFO, "%%%%%%%%%% FlightDetailsVO ", flightDetailsVO);
        if (flightDetailsVO.getUldInFlightVOs() != null
                && flightDetailsVO.getUldInFlightVOs().size() > 0) {
            /*
             * Collection<String> uldnos = new ArrayList<String>(); Collection<ULD>
             * uldObjects = new ArrayList<ULD>(); for (ULDInFlightVO
             * uldInFlightVO : flightDetailsVO .getUldInFlightVOs()) {
             * uldnos.add(uldInFlightVO.getUldNumber()); uldObjects =
             * ULD.findULDObjects(flightDetailsVO .getCompanyCode(), uldnos); }
             * if (uldObjects.size() > 0) { for (ULD uld : uldObjects) {
             * uld.setTransitStatus(INTRANSIT); } }
             */
            saveAndSendUCM(flightDetailsVO);
            FlightMessageFilterVO flightMessageFilterVO = new FlightMessageFilterVO();
            FlightDetailsVO cmpFlightDetailsVO = null;

            flightMessageFilterVO.setCompanyCode(flightDetailsVO
                    .getCompanyCode());
            flightMessageFilterVO.setFlightSequenceNumber(flightDetailsVO
                    .getFlightSequenceNumber());
            flightMessageFilterVO.setAirportCode(flightDetailsVO
                    .getCurrentAirport());
            flightMessageFilterVO.setFlightNumber(flightDetailsVO
                    .getFlightNumber());
            cmpFlightDetailsVO = findUCMFlightDetails(flightMessageFilterVO);
            if (cmpFlightDetailsVO != null
                    && cmpFlightDetailsVO.getUldInFlightVOs() != null
                    && cmpFlightDetailsVO.getUldInFlightVOs().size() > 0) {
                ULD uld = null;
                for (ULDInFlightVO cmpULDDetailsVO : cmpFlightDetailsVO
                        .getUldInFlightVOs()) {
                    try {
                        uld = ULD.find(flightDetailsVO.getCompanyCode(),
                                cmpULDDetailsVO.getUldNumber());
					} catch (FinderException ex) {
						log.log(Log.INFO, "%%%%%%%SHUD NOT COME HERE%%%%");
					}
					if (uld != null) {
						uld.setTransitStatus("Y");
					}
				}
			}
		}
		/*
		 * if(flightDetailsVO.getUldInFlightVOs() != null &&
		 * flightDetailsVO.getUldInFlightVOs().size() > 0){
		 *
		 * for (ULDInFlightVO uldInFlightVO :
		 * flightDetailsVO.getUldInFlightVOs()){
		 *
		 * //Do UCM OUT saveAndSendUCM(flightDetailsVO); }
		 */
	}

	/**
	 *
	 * A-1950
	 *
	 * @param flightDetailsVO
	 * @throws SystemException
	 */
    private void saveAndSendUCM(FlightDetailsVO flightDetailsVO)
            throws SystemException {

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

		Collection<ULDFlightMessageReconcileVO> reconcileVOs = new ArrayList<ULDFlightMessageReconcileVO>();
		ULDFlightMessageReconcileVO reconcileVO = new ULDFlightMessageReconcileVO();
		ULDFlightMessageReconcileDetailsVO reconcileDetailsVO = new ULDFlightMessageReconcileDetailsVO();
		Collection<ULDFlightMessageReconcileDetailsVO> detailsVOs = new ArrayList<ULDFlightMessageReconcileDetailsVO>();
        Collection<FlightValidationVO> flightValidationVOs = null;
        FlightValidationFilterVO flightValidationFilterVO = new FlightValidationFilterVO();

		reconcileVO.setCompanyCode(logonAttributes.getCompanyCode());
        if(flightDetailsVO.isFromFlightFinalization() && flightDetailsVO.getCurrentAirport() != null
                && flightDetailsVO.getCurrentAirport().trim().length() > 0){
            reconcileVO.setAirportCode(flightDetailsVO.getCurrentAirport());
        }else{
		reconcileVO.setAirportCode(logonAttributes.getAirportCode());
        }
		reconcileVO.setCarrierCode(flightDetailsVO.getCarrierCode());
        reconcileVO.setFlightCarrierIdentifier(flightDetailsVO
                .getFlightCarrierIdentifier());
		reconcileVO.setFlightDate(flightDetailsVO.getFlightDate());
		reconcileVO.setFlightNumber(flightDetailsVO.getFlightNumber());
		// reconcileVO.setFlightRoute(flightDetailsVO.get)
		Long data = Long.valueOf(flightDetailsVO.getFlightSequenceNumber());
//		reconcileVO.setTailNumber(flightDetailsVO.getTailNumber());
		int flightSeqNo = data.intValue();
		reconcileVO.setFlightSequenceNumber(flightSeqNo); 
		reconcileVO.setToBeAvoidedFromValidationCheck(flightDetailsVO.isFromFlightFinalization());
		reconcileVO.setLastUpdatedUser(logonAttributes.getUserId());
		reconcileVO.setActionCode(flightDetailsVO.getAction()); 
		// reconcileVO.setLegSerialNumber(flightDetailsVO.getLegSerialNumber());
		if (EXPORT.equalsIgnoreCase(flightDetailsVO.getDirection())) {
			reconcileVO.setMessageType("OUT");
		} else {
			reconcileVO.setMessageType("IN");
		}
        reconcileVO
                .setOperationFlag(ULDFlightMessageReconcileVO.OPERATION_FLAG_INSERT);
		// reconcileVO.setReconcileDetailsVOs()
		if (!validateFlightForUCM(flightDetailsVO)) {
			reconcileVO.setBlocked(true);
			reconcileVO.setMessageSendFlag("B");
		} else {
			reconcileVO.setMessageSendFlag("P");
		}
        //Added by A-7359 for ICRD 192413 starts here
        if("Mail".equalsIgnoreCase(flightDetailsVO.getSubSystem()))
        {
            reconcileVO.setMessageSource("MAIL");
        }else{
            reconcileVO.setMessageSource("MFT");
        }
        //Added by A-7359 for ICRD 192413 ends here
        //Added by A-7359 for ICRD 249795 starts here
        if(flightDetailsVO.isFromFlightFinalization())
        {
            reconcileVO.setFlightfromFinalization(true);
        }
        //Added by A-7359 for ICRD 249795 ends here
        if (flightDetailsVO.getUldInFlightVOs() != null
                && flightDetailsVO.getUldInFlightVOs().size() > 0) {
            for (ULDInFlightVO uldInFlightVO : flightDetailsVO
                    .getUldInFlightVOs()) {
				reconcileDetailsVO = new ULDFlightMessageReconcileDetailsVO();

                reconcileDetailsVO.setAirportCode(logonAttributes
                        .getAirportCode());
                reconcileDetailsVO.setCarrierCode(flightDetailsVO
                        .getCarrierCode());
                reconcileDetailsVO.setCompanyCode(logonAttributes
                        .getCompanyCode());
				reconcileDetailsVO.setContent(uldInFlightVO.getContent());
				reconcileDetailsVO.setDamageStatus("N");
                reconcileDetailsVO.setFlightCarrierIdentifier(flightDetailsVO
                        .getFlightCarrierIdentifier());
				reconcileDetailsVO.setFlightDate(reconcileVO.getFlightDate());
                reconcileDetailsVO.setFlightNumber(flightDetailsVO
                        .getFlightNumber());
				reconcileDetailsVO.setFlightSequenceNumber(flightSeqNo);
				reconcileDetailsVO.setToBeAvoidedFromValidationCheck(flightDetailsVO.isFromFlightFinalization());
                //Added by A-7131 for ICRD-146608 starts
				reconcileDetailsVO.setUldFlightStatus(TRANSIT);
                //Added by A-7131 for ICRD-146608 ends
				if (EXPORT.equalsIgnoreCase(flightDetailsVO.getDirection())) {
					reconcileDetailsVO.setMessageType("OUT");
				} else {
					reconcileDetailsVO.setMessageType("IN");
				}
                reconcileDetailsVO
                        .setOperationFlag(ULDFlightMessageReconcileDetailsVO.OPERATION_FLAG_INSERT);
				reconcileDetailsVO.setUldNumber(uldInFlightVO.getUldNumber());
				reconcileVO.setOrigin(uldInFlightVO.getPointOfLading());
                if("Mail".equalsIgnoreCase(flightDetailsVO.getSubSystem()))
                {
                    reconcileDetailsVO.setUldSource("MAL");
                }else{
                    reconcileDetailsVO.setUldSource("MFT");
                }
				if (EXPORT.equals(flightDetailsVO.getDirection())) {
                    reconcileDetailsVO.setPou(uldInFlightVO
                            .getPointOfUnLading());
                } else {
                    reconcileDetailsVO.setPou(uldInFlightVO
                            .getPointOfUnLading());
				}
				detailsVOs.add(reconcileDetailsVO);
			}
		}

        //Added by A-8445 as a part of IASCB-22297 Starts
        if(reconcileVO.getFlightType() == null) {
            flightValidationFilterVO.setFlightNumber(flightDetailsVO.getFlightNumber());
            flightValidationFilterVO.setFlightCarrierId(flightDetailsVO.getFlightCarrierIdentifier());
            flightValidationFilterVO.setCompanyCode(flightDetailsVO.getCompanyCode());
            if(flightDetailsVO.getFlightSequenceNumber()>0) {
                flightValidationFilterVO.setFlightSequenceNumber((int) flightDetailsVO.getFlightSequenceNumber());
            }else {
                flightValidationFilterVO.setFlightDate(flightDetailsVO.getFlightDate());
            }
            try {
                flightValidationVOs = new FlightOperationsProxy().validateFlight(flightValidationFilterVO);
            } catch (ProxyException e) {
                log.log(Log.INFO, "saveAndSendUCM - ProxyException ");
            } catch (SystemException e) {
                log.log(Log.INFO, "saveAndSendUCM - SystemException ");
            }
            if (flightValidationVOs != null && flightValidationVOs.size() > 0) {
                reconcileVO.setFlightType(flightValidationVOs.iterator().next().getFlightType());
            }
        }
        //Added by A-8445 as a part of IASCB-22297 Ends
		if (detailsVOs.size() > 0) {

			reconcileVO.setReconcileDetailsVOs(detailsVOs);
			reconcileVOs.add(reconcileVO);

			log.log(Log.INFO, "$%$%$%%$%$%$ reconcileVOs", reconcileVOs);
			try {
				saveULDFlightMessageReconcile(reconcileVOs);
			} catch (UCMInExistsForStationException ex) {
				// UCM IN Exists for the UCMout Message
			}
		}
	}

	/**
	 * @author A-1936 Business: This method is used to check wether the Flight
	 *         contains any space tat could be used to load the ULD's of some
	 *         other Flights.. In Such a Case the UCM has to sent manually for
	 *         each ULD in the Flight .. check the Existence of this Flight
	 *         against the UCMFlightException if found UCM can be sent else UCM
	 *         shouldnt be sent..
	 * @return
	 */
    private boolean validateFlightForUCM(FlightDetailsVO flightDetailsVO)
            throws SystemException {
		log.entering("validateFlightForUCM", "flightDetailsVO");
		log.log(Log.FINE, "CMPCOD=", flightDetailsVO.getCompanyCode());
		log.log(Log.FINE, "FLTCARIDR=", flightDetailsVO.getFlightCarrierIdentifier());
		log.log(Log.FINE, "FLTNUM=", flightDetailsVO.getFlightNumber());
		log.log(Log.FINE, "FLTSEQNUM=", flightDetailsVO.getFlightSequenceNumber());
		log.log(Log.FINE, "LEGSERNUM=", flightDetailsVO.getLegSerialNumber());
		boolean canSendUCM = false;
		UCMExceptionFlightPK pk = new UCMExceptionFlightPK();
		pk.setCompanyCode(flightDetailsVO.getCompanyCode());
		pk.setFlightNumber(flightDetailsVO.getFlightNumber());
		pk.setCarrierId(flightDetailsVO.getFlightCarrierIdentifier());
		pk.setFlightSequenceNumber(flightDetailsVO.getFlightSequenceNumber());
		pk.setLegSerialNumber(flightDetailsVO.getLegSerialNumber());
		try {
			UCMExceptionFlight.find(pk);
		} catch (FinderException ex) {
			log.log(Log.INFO, "FINDER EX THROWN ---UCM CAN BE SENT");
			canSendUCM = true;
		}
		log.log(Log.FINE, "<<<<CAN SEND UCM>>>>", canSendUCM);
		return canSendUCM;
	}

	/**
	 *
	 * A-1950
	 *
	 * @param flightDetailsVO
	 * @throws SystemException
	 */
    public void updateULDForOffload(FlightDetailsVO flightDetailsVO)
            throws SystemException {
		log.entering("ULDController", "updateULDForOffload");
		log.log(Log.INFO, "%%%%%%%%%% FlightDetailsVO ", flightDetailsVO);
        if (flightDetailsVO.getUldInFlightVOs() != null
                && flightDetailsVO.getUldInFlightVOs().size() > 0) {
            for (ULDInFlightVO uldInFlightVO : flightDetailsVO
                    .getUldInFlightVOs()) {
                ULD uld = null;
                try {
                    uld = ULD.find(flightDetailsVO.getCompanyCode(),
                            uldInFlightVO.getUldNumber());
				} catch (FinderException ex) {
					// Do nothing
				}
				if (uld != null) {
					uld.setTransitStatus(INSTATION);
				}
			}
		}
	}

	/**
	 *
	 * A-1950
	 *
	 * @param flightDetailsVO
	 * @throws SystemException
	 */
    public void updateULDForFlightClosure(FlightDetailsVO flightDetailsVO)
            throws SystemException {
		log.entering("ULDController", "updateULDForFlightClosing");


        if (flightDetailsVO != null
                && flightDetailsVO.getUldInFlightVOs() != null
				&& flightDetailsVO.getUldInFlightVOs().size() > 0) {
			flightDetailsVO.setFromFlightFinalization(true);   
			saveAndSendUCM(flightDetailsVO); 

		}
	}

	/**
	 * This method returns a String arldtl which contains 2 parts separated by
	 * '~' Fist part is gives the no of characters in ULDOwnerCode And the
	 * SecondPart gives the airline identifier
	 *
	 * A-1950
	 *
	 * @param companyCode
	 * @param twoAlphaCode
	 * @param threeAlphaCode
	 * @return
	 * @throws SystemException
	 */
    public String findOwnerCode(String companyCode, String twoAlphaCode,
            String threeAlphaCode) throws SystemException {
        //Commented as part of ICRD-21184
        //return ULD.findOwnerCode(companyCode, twoAlphaCode, threeAlphaCode);

        //Added as part of ICRD-21184
		log.entering("ULDController", "findOwnerCode");
		AirlineValidationVO airlineValidationVO = null;
		String arldtl = null;
		try {
			airlineValidationVO = Proxy.getInstance().get(SharedAirlineProxy.class).validateAlphaCode(companyCode, twoAlphaCode);
			log.log(Log.INFO, "airlineValidationVO: ", airlineValidationVO);
		} catch (ProxyException proxyException) {
			Collection<ErrorVO> errors = proxyException.getErrors();
            if(errors != null && errors.size()>0) {
				for (ErrorVO errorVO : errors) {
                    if(errorVO.getErrorCode().equals(INVALID_AIRLINE)) {
                        log
                                .log(
                                        Log.INFO,
                                        "validateAlphaCodes returned null for twoAlphaCode: ",
                                        twoAlphaCode);
                        try {
                            airlineValidationVO = Proxy.getInstance().get(SharedAirlineProxy.class).validateAlphaCode(companyCode, threeAlphaCode);
						} catch (ProxyException pe) {
							log.log(Log.INFO, "findOwnerCode -> ProxyException");
						}
					}
				}
			}
		}
        if(airlineValidationVO != null) {
            if(airlineValidationVO.getAlphaCode()!=null
                    && airlineValidationVO.getAlphaCode().length()> 0){
				arldtl =   airlineValidationVO.getAlphaCode().length() + "~" + airlineValidationVO.getAirlineIdentifier();
			}
		}
		log.entering("ULDController", "findOwnerCode -> arldtl " + arldtl);
		return arldtl;
	}













	/**
	 * This method is used to save the Flights for which the UCM has to be sent
	 * manually Since these flights contains some ULDS for some other Flights
	 *
	 * @param ucmExceptionFlightVos
	 * @throws SystemException
	 * @throws RemoteException
	 */
    public void saveExceptionFlights(
            Collection<UCMExceptionFlightVO> ucmExceptionFlightVos)
            throws SystemException {
		log.entering("ULDEJB", "saveExceptionFlights");
		if (ucmExceptionFlightVos != null && ucmExceptionFlightVos.size() > 0) {
			for (UCMExceptionFlightVO exceptionFlightVo : ucmExceptionFlightVos) {
				UCMExceptionFlight exceptionFlight = null;
                if (UCMExceptionFlightVO.OPERATION_FLAG_INSERT
                        .equals(exceptionFlightVo.getOpeartionalFlag())) {
					new UCMExceptionFlight(exceptionFlightVo);

                } else if (UCMExceptionFlightVO.OPERATION_FLAG_UPDATE
                        .equals(exceptionFlightVo.getOpeartionalFlag())) {
                    try {
                        exceptionFlight = UCMExceptionFlight
                                .find(createUCMExceptionFltPK(exceptionFlightVo));
					} catch (FinderException ex) {
						throw new SystemException(ex.getErrorCode(), ex);
					}
					exceptionFlight.update(exceptionFlightVo);

                } else if (UCMExceptionFlightVO.OPERATION_FLAG_DELETE
                        .equals(exceptionFlightVo.getOpeartionalFlag())) {
                    try {
                        exceptionFlight = UCMExceptionFlight
                                .find(createUCMExceptionFltPK(exceptionFlightVo));
					} catch (FinderException ex) {
						throw new SystemException(ex.getErrorCode(), ex);
					}
					exceptionFlight.remove();
				}
			}

		}
	}

	/**
	 * @author A-1936 This method is used to create the ExceptionFlightPK from
	 *         the ExceptionFlightVo
	 * @param ucmExceptionFlightVO
	 * @return
	 */
    private UCMExceptionFlightPK createUCMExceptionFltPK(
            UCMExceptionFlightVO ucmExceptionFlightVO) {
		UCMExceptionFlightPK pk = new UCMExceptionFlightPK();
		pk.setCompanyCode(ucmExceptionFlightVO.getCompanyCode());
		pk.setCarrierId(ucmExceptionFlightVO.getCarrierId());
		pk.setFlightNumber(ucmExceptionFlightVO.getFlightNumber());
        pk.setFlightSequenceNumber(ucmExceptionFlightVO
                .getFlightSequenceNumber());
		pk.setLegSerialNumber(ucmExceptionFlightVO.getLegSerialNumber());
		return pk;
	}

	/**
	 * @author A-1936 This method is used to list all the Exception flights for
	 *         which the UCM has to be sent Manually since the Flight contains
	 *         some Space for the ULDS belonging to some other Flights.. In such
	 *         a Case UCM has to be sent Manually for each ULD in the Flight..
	 * @param companyCode
	 * @param pol
	 * @return
	 * @throws SystemException
	 */
    public Collection<UCMExceptionFlightVO> findExceptionFlights(
            String companyCode, String pol) throws SystemException {
		log.entering("ULDEJB", "findExceptionFlights");
		return UCMExceptionFlight.findExceptionFlights(companyCode, pol);
	}

	/**
	 * The methos picks uldNature , damageDetails etc for the transaction A-1950
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 */
    public ULDListVO fetchULDDetailsForTransaction(String companyCode,
            String uldNumber) throws SystemException {
		log.entering("ULDCOntroller", "fetchULDDetailsForTransaction");
		ULD uld = null;
		ULDListVO uldListVO = null;
		try {
			uld = ULD.find(companyCode, uldNumber);
		} catch (FinderException ex) {
			// nothing to do here
		}
		if (uld != null) {
			uldListVO = new ULDListVO();
			uldListVO.setCompanyCode(companyCode);
			uldListVO.setUldNumber(uldNumber);
			uldListVO.setDamageStatus(uld.getDamageStatus());
			uldListVO.setUldNature(uld.getUldNature());

			/* added by A-2619 begins */
            uldListVO.setLastUpdateTime(new LocalDate(LocalDate.NO_STATION,
                    Location.NONE, uld.getLastUpdateTime(), true));
			uldListVO.setLastUpdateUser(uld.getLastUpdateUser());
			/* added by A-2619 ends */
		}
		return uldListVO;
	}

	/**
	 *
	 * This method will generate last seven digits for CRN number A-1950
	 *
	 * @param companyCode
	 * @param carrierCode
	 * @return
	 * @throws SystemException
	 */
    public String findCRNForULDTransaction(String companyCode,
            String carrierCode) throws SystemException {
		log.entering("ULDCOntroller", "findCRNForLoanTransaction");
		long controlReceiptNumber = 0;
		long modifiedReceiptNumber = 0;
		String finalNumber = null;
		String validCRNNumber = "";
        //Added as part of ICRD 21184 starts
        String airlineId=null;
        //Added as part of ICRD 21184 ends
		long startingSequenceNumber = 10000000;
		AirlineValidationVO airlineValidationVO = null;
		while (validCRNNumber != null) {
            Criterion receiptNumber = KeyUtils.getCriterion(companyCode,
                    CTRL_RECP_NUM, carrierCode);
			String key = KeyUtils.getKey(receiptNumber);
			log.log(Log.FINE, "criterion key!!!!!!", key);
			controlReceiptNumber = new Long(key);
            log
                    .log(Log.INFO, "!!!!!controlReceiptNumber",
                            controlReceiptNumber);
			// QF1504 starts
			try {
				SharedAirlineProxy airlineProxy = new SharedAirlineProxy();
                airlineValidationVO = airlineProxy.validateAlphaCode(
                        companyCode, carrierCode);
				if (airlineValidationVO != null) {
					String CRN_START_NUMBER = "shared.airline.ucrStartRange";
					Collection<String> parameterCodes = new ArrayList<String>();
					Map<String, String> airlineParameterMap = null;
					parameterCodes.add(CRN_START_NUMBER);
                    airlineParameterMap = airlineProxy
                            .findAirlineParametersByCode(companyCode,
                                    airlineValidationVO.getAirlineIdentifier(),
                                    parameterCodes);
                    if (airlineParameterMap != null
                            && !airlineParameterMap.isEmpty()) {

                        String value = airlineParameterMap
                                .get(CRN_START_NUMBER);
						if (value != null && value.trim().length() > 0) {
							startingSequenceNumber = Long.parseLong(value);
						}
					}
                    //Added as part of ICRD 21184 starts
					airlineId = airlineValidationVO.getNumericCode();
                    //Added as part of ICRD 21184 ends
				}
			} catch (ProxyException ex) {
				log.log(Log.SEVERE, " Airline ProxyException");
			}
			// QF1504 ends
            modifiedReceiptNumber = controlReceiptNumber
                    + startingSequenceNumber;
            log.log(Log.INFO, "!!!!!modifiedReceiptNumber adding 10000000  ",
                    modifiedReceiptNumber);
            String number = new StringBuilder().append(modifiedReceiptNumber)
                    .toString();
			// QF1504
			if (number.length() < 8) {
				while (number.length() < 8) {
					number = new StringBuilder("0").append(number).toString();
				}
			}
			/** ************commented for bug 102914********************** */
			// number = number.substring(1, 8);
            finalNumber = new StringBuilder().append(airlineId).append("-")
                    .append(number).toString();
			log.log(Log.INFO, "********receipt***", number);
			log.log(Log.INFO, "********receipt***", finalNumber);
			validCRNNumber = validateExistingCRNNumber(companyCode, finalNumber);
		}
		return finalNumber;
	}

	/**
	 *
	 * This method will generate last seven digits for CRN number A-1950
	 *
	 * @param companyCode
	 * @param airlineIdentifier
	 * @return
	 * @throws SystemException
	 */
    public String findCRNForULDTxn(String companyCode, int airlineId)
            throws SystemException {
		log.entering("ULDController", "findCRNForULDTxn");
		long controlReceiptNumber = 0;
		long modifiedReceiptNumber = 0;
		String finalNumber = null;
		String validCRNNumber = "";
		while (validCRNNumber != null) {
            Criterion receiptNumber = KeyUtils.getCriterion(companyCode, "CRN",
                    String.valueOf(airlineId));
			String key = KeyUtils.getKey(receiptNumber);
			log.log(Log.FINE, "criterion key!!!!!!", key);
			controlReceiptNumber = new Long(key);
            log
                    .log(Log.INFO, "!!!!!controlReceiptNumber",
                            controlReceiptNumber);
			modifiedReceiptNumber = controlReceiptNumber + 10000000;
            log.log(Log.INFO, "!!!!!modifiedReceiptNumber adding 10000000  ",
                    modifiedReceiptNumber);
			// String airlineId = ULD.findAirlineCode(companyCode, carrierCode);
            String number = new StringBuilder().append(
                    String.valueOf(modifiedReceiptNumber)).toString();
			log.log(Log.INFO, "********before**", number);
			number = number.substring(1, 8);
			log.log(Log.INFO, "********after***", number);
            finalNumber = new StringBuilder().append(
                    new StringBuilder(airlineId).substring(1, 3).toString())
					.append("-").append(number).toString();
			log.log(Log.INFO, "********receipt***", number);
			log.log(Log.INFO, "********receipt***", finalNumber);
			validCRNNumber = validateExistingCRNNumber(companyCode, finalNumber);
		}
		return finalNumber;
	}

	/**
	 * Added by A-3459 on 26th Sep for checking Single Duplicate CRN
	 *
	 * @param companyCode
	 * @param finalNumber
	 * @return
	 * @throws SystemException
	 */
    public String validateExistingCRNNumber(String companyCode, String crnNumber)
            throws SystemException {
		String crnNum = null;
		try {
			log.log(Log.INFO, "CHECK WHETER THE CRN NUMBER ALREADY EXISTS");
			crnNum = ULD.findDuplicateCRN(companyCode, crnNumber);
		} catch (SystemException ex) {
			log.log(Log.INFO, "FINDER EXCEPTION IS THROWN");
		}
		return crnNum;

	}

	/**
	 * @author A-1950
	 * @param transactionDetails
	 * @throws SystemException
	 * @throws BusinessException 
	 */
    public void updateULDForDelivery(
            Collection<ULDTransactionDetailsVO> transactionDetails)
            throws SystemException, BusinessException {
		log.entering("ULDController", "updateULDForDelivery");
		Map<Integer, String> carrierCodes = new HashMap<Integer, String>();
		for (ULDTransactionDetailsVO transactionDetailsVO : transactionDetails) {
			ULD uld = null;
			String airlineCode = null;
			try {
                uld = ULD.find(transactionDetailsVO.getCompanyCode(),
                        transactionDetailsVO.getUldNumber());
			} catch (FinderException ex) {

			}
			if (uld == null) {
				// Some kind of Exception
			}
            transactionDetailsVO.setFromPartyIdentifier(uld
                    .getOperationalAirlineIdentifier());
            transactionDetailsVO
                    .setOperationalFlag(ULDTransactionDetailsVO.OPERATION_FLAG_INSERT);
			transactionDetailsVO.setPartyType("G");
            transactionDetailsVO.setTransactionDate(new LocalDate(
                    transactionDetailsVO.getTransactionStationCode(),
                    Location.ARP, true));
			transactionDetailsVO.setTransactionNature("T");
			transactionDetailsVO.setTransactionRemark("");
			transactionDetailsVO.setTransactionType("L");
            //Modified by A-3415 for ICRD-114538
            //transactionDetailsVO.setTransactionStatus(RETURN_TRANSACTION);
			transactionDetailsVO.setTransactionStatus(TO_BE_RETURNED);
            transactionDetailsVO.setUldType(transactionDetailsVO.getUldNumber()
                    .substring(0, 3));

            if (!carrierCodes.containsKey(transactionDetailsVO
                    .getFromPartyIdentifier())) {

                //Commented as part of ICRD-21184

//				airlineCode = ULD.findCarrierCode(transactionDetailsVO
//						.getCompanyCode(), transactionDetailsVO
//						.getFromPartyIdentifier());

                //Added as part of ICRD-21184

				AirlineValidationVO airlineValidationVO = null;
				try {
                    airlineValidationVO  = new SharedAirlineProxy().findAirline(transactionDetailsVO.getCompanyCode(), transactionDetailsVO.getFromPartyIdentifier());
					airlineCode = airlineValidationVO.getAlphaCode();
				} catch (ProxyException proxyException) {
					log.log(Log.INFO, "ProxyException", proxyException.getErrors());
					log.log(Log.INFO, "Cannot find airline", proxyException.getMessage());
				}

                carrierCodes.put(transactionDetailsVO.getFromPartyIdentifier(),
                        airlineCode);
				transactionDetailsVO.setFromPartyCode(airlineCode);
			} else {
                transactionDetailsVO.setFromPartyCode(carrierCodes
                        .get(transactionDetailsVO.getFromPartyIdentifier()));
			}
		}
		TransactionVO transactionVO = new TransactionVO();
		transactionVO.setTransactionId(ULD_DELIVERY); 
		transactionVO.setUldTransactionDetailsVOs(transactionDetails);
		createULDLoanTransactionFeature(transactionVO);
	}

	/**
	 *
	 * A-1950
	 *
	 * @param companyCode
	 * @throws SystemException
	 */
    public void updateULDPrice(String companyCode,int period) throws SystemException {
        log.entering(" ULDController", "updateULDPrice");
        Map<String, ULDTypeValidationVO> uldTypes = new HashMap<String, ULDTypeValidationVO>();
		Collection<ULD> uldObjects = new ArrayList<ULD>();
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

        HashSet<String> typeCollection = new HashSet<String>();
      //  uldObjects = ULD.findAllULDObjects(companyCode);
        uldObjects=ULD.findULDObjectsForDepreciation(companyCode);
        for (ULD uldObject : uldObjects) {
        	String typeCode=uldObject.getUldPK().getUldNumber() .substring(0, 3);
        	typeCollection.add(typeCode);	
        }
        try {
            uldTypes = new SharedULDProxy().validateULDTypeCodes(companyCode,typeCollection);
			log.log(Log.FINE, "uldTypes after Proxy call-->", uldTypes);
		} catch (ProxyException proxyException) {
			// This will not happen in any case
			throw new SystemException(proxyException.getMessage());
		}
        log.log(Log.FINE, " uldObjects after Proxy call-->", uldObjects);
        if (uldObjects != null && uldObjects.size() > 0) {
            for (ULD uldObject : uldObjects) {
            	
            		String typeCode=uldObject.getUldPK().getUldNumber().substring(0, 3);
            		ULDTypeValidationVO typeVO= new ULDTypeValidationVO();
            		typeVO= uldTypes.get(typeCode); 
            		LocalDate today =new LocalDate(logonAttributes.getAirportCode(), Location.ARP,false);
                    int dateCheck=0;
                    int yearCount=1;
                    double currentValue = 0,currentDisplayValue=0.0;
                    if(uldObject.getDepreciationDate()!=null){
                    	LocalDate depreciationDate=new LocalDate(logonAttributes.getAirportCode(), Location.ARP, uldObject.getDepreciationDate(), false);
                    	dateCheck=depreciationDate.addDays(period).compareTo(today);
                    }else if(uldObject.getPurchaseDate()!=null){
                    		
                    final int seconds = 3600;
                    final int hours = 24;
                    final int millis = 1000 * seconds * hours;
                    LocalDate purchaseDate=new LocalDate(logonAttributes.getAirportCode(), Location.ARP, uldObject.getPurchaseDate(), false);
                    long diffMillis = today.findDifference(purchaseDate);
                   	long dayDiff = diffMillis / millis;
                    yearCount = (int)dayDiff/365;
                    	dateCheck=purchaseDate.addDays(period).compareTo(today);
                    }
                    log.log(Log.FINE, "Datecheck value-->", dateCheck);
                    log.log(Log.FINE, "yearCount value-->", yearCount);
                    if(dateCheck<=0 && (uldObject.getPurchaseDate()!=null||uldObject.getDepreciationDate()!=null)){
                    		
                    	if(uldObject.getCurrentValue()!=0){
                    		 currentValue=uldObject.getCurrentValue();
                    		 currentDisplayValue=uldObject.getDisplayCurrentValue();
                    	}else if(uldObject.getUldPrice()!=0 && uldObject.getDepreciationDate()==null){
                    		 currentValue=uldObject.getUldPrice();
                    		 currentDisplayValue=uldObject.getDisplayUldPrice();
                    	 }
                    log.log(Log.FINE, " currentValue-->", currentValue);
                 	log.log(Log.FINE, "currentDisplayValue-->", currentDisplayValue);
                    if(currentValue>1){
                    	 log.log(Log.FINE, "uldObject.getCurrentValue()-->", uldObject.getCurrentValue());
                         log.log(Log.FINE, "uldObject.getDisplayCurrentValue()-->", uldObject.getDisplayCurrentValue());
                    		while(yearCount>=1){
                    			 currentValue=currentValue-(currentValue *(typeVO.getDepreciationPercent()/100) );
                    			 currentDisplayValue=currentDisplayValue-(currentDisplayValue *(typeVO.getDepreciationPercent()/100) );
                    			 yearCount--;
                              } 
                    		uldObject.setCurrentValue(Math.round((currentValue)*100D)/100D);
						// added by a-3045 for bug24479 starts on 13Jan09
                    	    uldObject.setDisplayCurrentValue(Math.round((currentDisplayValue)*100D)/100D);
                    	    log.log(Log.FINE, "After Depreciation -->uldObject.getCurrentValue()-->", uldObject.getCurrentValue());
                    	    log.log(Log.FINE, "After Depreciation -->uldObject.getDisplayCurrentValue()-->", uldObject.getDisplayCurrentValue());
						// added by a-3045 for bug24479 ends on 13Jan09
                    	       
                    	     uldObject.setDepreciationDate(new LocalDate(logonAttributes.getAirportCode(), Location.ARP,false));
						// Added by a-3459 as per advice from Asharaf from
						// onsite on 16-12-08
                    	     uldObject.setLastUpdateTime(uldObject.getLastUpdateTime());
                    	     uldObject.setLastUpdateUser(logonAttributes.getUserId());
                    		 }else{
                    		  uldObject.setCurrentValue(0.0);
                    		  uldObject.setDisplayCurrentValue(0.0);
                    		}
                    			
                    		
                    	}
                    	
                 
            }
        }
        
       
        
		/*
		 * ulds = findULDs(uldlistFilterVO); for(String uld : ulds){ //uldType =
		 * uld.substring(0,3); for(ULDTypeVO typeVO : uldTypes){ uldType =
		 * typeVO.getUldType(); if(uldType.equals(uld.substring(0,3))){ try{
		 * uldmst = ULD.find(companyCode,uld); }catch(FinderException fe){
		 * //This will not happen in any case throw new
		 * SystemException(fe.getErrorCode()); }
         * uldmst.setCurrentValue(uldmst.getCurrentValue()*(100-typeVO.getDepreciationPercent())/100);
         * uldmst.setDepreciationDate(new
         * LocalDate(logonAttributes.getAirportCode(),Location.ARP,false)); } } }
		 */
	}

	/**
	 *
	 * A-1950
	 *
	 * @param uldListFilterVO
	 * @return
	 * @throws SystemException
	 */
    public Collection<String> findULDs(ULDListFilterVO uldListFilterVO)
            throws SystemException {
		log.entering("ULDController", "findULDs");
		return ULD.findULDs(uldListFilterVO);
	}

	// added for reports starts
	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printMaintainUldStock(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

        ULDStockConfigFilterVO uldstockconfigfiltervo = (ULDStockConfigFilterVO) reportSpec
                .getFilterValues().iterator().next();
		Collection<ULDStockConfigVO> uldstockvos = listULDStockConfig(uldstockconfigfiltervo);
		if (uldstockvos == null || uldstockvos.size() <= 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		ReportMetaData parameterMetaData = new ReportMetaData();
        parameterMetaData.setFieldNames(new String[] { "stationCode",
                "airlineCode" });
		reportSpec.addParameterMetaData(parameterMetaData);
		reportSpec.addParameter(uldstockconfigfiltervo);

		ReportMetaData reportMetaData = new ReportMetaData();

        reportMetaData.setColumnNames(new String[] { "ARLCOD", "STNCOD",
                "ULDNAT", "ULDTYPCOD", "ULDGRPCOD", "DWLTIM", "MINQTY",
                "MAXQTY" , "STKRMK"});
        reportMetaData.setFieldNames(new String[] { "airlineCode",
                "stationCode", "uldNature", "uldTypeCode", "uldGroupCode",
                "dwellTime", "minQty", "maxQty" ,"remarks"});

		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(uldstockvos);
		return ReportAgent.generateReport(reportSpec);

	}

	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printListUldMovement(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

        ULDMovementFilterVO uldMovementFilterVO = (ULDMovementFilterVO) reportSpec
                .getFilterValues().iterator().next();
		int pageNo = 0;
		ULDValidationVO uldValidationVO = new ULDValidationVO();

		if (uldMovementFilterVO != null) {
			pageNo = uldMovementFilterVO.getPageNumber();

            uldValidationVO = validateULD(uldMovementFilterVO.getCompanyCode(),
                    uldMovementFilterVO.getUldNumber());
        }
        Page<ULDMovementDetailVO> uldMovementDetailVOs = findULDMovementHistory(
                uldMovementFilterVO, pageNo);

		Collection<ULDMovementDetailVO> vos = new ArrayList<ULDMovementDetailVO>();
        int pageSize = 0;
		if (uldMovementDetailVOs == null || uldMovementDetailVOs.size() <= 0) {
            pageSize = uldMovementDetailVOs.size();
            log.log(Log.FINE, "Page Sizeis ------->>", pageSize);
            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}

		Map<String, Collection<OneTimeVO>> oneTimeHashMap = null;
		Collection<String> oneTimeActiveStatusList = new ArrayList<String>();
		Collection<OneTimeVO> currentStatus = new ArrayList<OneTimeVO>();
		Collection<OneTimeVO> content = new ArrayList<OneTimeVO>();

		// Collection<OneTimeVO> categorycodes=new ArrayList<OneTimeVO>();
		oneTimeActiveStatusList.add(STATUS_ONETIME);
		oneTimeActiveStatusList.add(CONTENT_ONETIME);
		try {
            oneTimeHashMap = new SharedDefaultsProxy().findOneTimeValues(
                    uldMovementFilterVO.getCompanyCode(),
					oneTimeActiveStatusList);
		} catch (ProxyException proxyException) {
			throw new SystemException(proxyException.getMessage());
		}
		if (oneTimeHashMap != null) {// to get onetime values
			currentStatus = oneTimeHashMap.get(STATUS_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************shipmentTypes********",
                    currentStatus);
			content = oneTimeHashMap.get(CONTENT_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************wareHouseCodes********",
                    content);
		}
		reportSpec.addExtraInfo(currentStatus);
		reportSpec.addExtraInfo(content);
		for (int i = 0; i < pageSize; i++) {
			vos.add(uldMovementDetailVOs.get(i));

		}
		if (uldMovementFilterVO != null) {
			ReportMetaData parameterMetaData = new ReportMetaData();
            parameterMetaData.setFieldNames(new String[] { "uldNumber",
                    "fromDate", "toDate" });
			reportSpec.addParameterMetaData(parameterMetaData);
			reportSpec.addParameter(uldMovementFilterVO);
		}
		if (uldValidationVO != null) {
			ReportMetaData parameterMetaDatas = new ReportMetaData();
            parameterMetaDatas.setFieldNames(new String[] { "ownerAirlineCode",
                    "ownerStation", "currentStation", "overallStatus" });
			reportSpec.addParameterMetaData(parameterMetaDatas);
			reportSpec.addParameter(uldValidationVO);
		}
		ReportMetaData reportMetaData = new ReportMetaData();

        reportMetaData.setColumnNames(new String[] { "FLTCARIDR", "FLTNUM",
                "FLTDAT", "CNT", "POL", "POU", "DUMMVTFLG", "LSTMVTDAT",
                "AGTCOD", "AGTNAM", "RMK" });
        reportMetaData.setFieldNames(new String[] { "carrierCode",
                "flightNumber", "flightDate", "content", "pointOfLading",
                "pointOfUnLading", "isDummyMovement", "lastUpdatedTime",
                "agentCode", "agentName", "remark" });
		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(vos);
		return ReportAgent.generateReport(reportSpec);
	}

	// added for reports ends

	/**
	 *
	 * A-1950
	 */
    public void updateULDStatusAsLost(String companyCode, int period)
            throws SystemException {
		log.entering("ULDController", "updateULDStatusAsLost");
		ULD uld = null;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		// added by a-3045 for CR QF1020 starts
		Collection<ULD> lostulds = new ArrayList<ULD>();
		lostulds = ULD.findAllLostULDObjects(companyCode, period);
		log.log(Log.FINE, "\n\n\n\n*************before for********");
		for (ULD ulds : lostulds) {
			try {
                log.log(Log.FINE, "\n\n\n\n*************ulds found********",
                        ulds);
				uld = ULD.find(companyCode, ulds.getUldPK().getUldNumber());
			} catch (FinderException finderException) {
                log.log(Log.FINE,
                        "\n\n\n\n*************exception in catch********");
				// will not come here
			}
			// Condition changed by a-3045 for bug 48056 on 19May09
			if (uld != null && !("S").equals(uld.getDamageStatus())) {
                log.log(Log.FINE,
                        "\n\n\n\n******!!******marking as LOST********", ulds);
				uld.setOverallStatus(LOST);
                uld.setLostDate(new LocalDate(logonAttributes.getAirportCode(),
                        Location.ARP, false).toCalendar());
			}
		}
		log.log(Log.FINE, "\n\n\n\n*************after for********");
		// added by a-3045 for CR QF1020 ends
		/*
         * Collection<ULDDiscrepancy> uldDiscrepancies = new ArrayList<ULDDiscrepancy>();
         * uldDiscrepancies = ULDDiscrepancy.findMissingULDObjects(companyCode,
         * period); for (ULDDiscrepancy ulddisc : uldDiscrepancies) { try { uld =
         * ULD.find(companyCode, ulddisc.getUldDiscrepancyPK() .getUldNumber()); }
         * catch (FinderException finderException) { // will not come here } if
         * (uld != null) { uld.setOverallStatus(LOST); uld.setLostDate(new
		 * LocalDate(logonAttributes.getAirportCode(), Location.ARP,
		 * false).toCalendar()); } }
		 */
		/*
		 * Collection<String> ulds = new ArrayList<String>(); ulds =
         * findMissingULDs(companyCode ,period); if(ulds != null && ulds.size() >
         * 0){ for(String uldNumber : ulds){ try{ uld = ULD.find(companyCode ,
		 * uldNumber); }catch(FinderException finderException){ // will not come
		 * here } if(uld != null){ uld.setOverallStatus(LOST);
		 * uld.setLostDate(new
         * LocalDate(logonAttributes.getAirportCode(),Location.ARP,false).toCalendar()); } } }
		 */
	}

	/**
	 *
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printLoanBorrowULD(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

		log.entering("ULDController", "printLoanBorrowULD");

        TransactionFilterVO transactionFilterVO = (TransactionFilterVO) reportSpec
                .getFilterValues().iterator().next();
        TransactionListVO transactionListVO = new TransactionListVO();

        log.log(Log.INFO, "transactionFilterVO is----------->>",
                transactionFilterVO);
		Collection<ULDTransactionDetailsVO> uldTransactionsDetails = null;
		transactionListVO = findULDTransactionDetailsCol(transactionFilterVO);
		uldTransactionsDetails = transactionListVO.getUldTransactionsDetails();

		// added by a-3278 for including total demmurage in the report on
		// 11Dec08
		ULDTransactionDetailsVO uLDTransactionDetailsVO = new ULDTransactionDetailsVO();
		uLDTransactionDetailsVO = findTotalDemmurage(transactionFilterVO);
		// a-3278 ends

        if (uldTransactionsDetails == null
                || uldTransactionsDetails.size() == 0) {

            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}

		Map<String, Collection<OneTimeVO>> oneTimes = new HashMap<String, Collection<OneTimeVO>>();

		try {
			Collection<String> fieldValues = new ArrayList<String>();

			fieldValues.add(TXNTYPE_ONETIME);
			fieldValues.add(PARTYTYPE_ONETIME);
			fieldValues.add(TXNSTATUS_ONETIME);
			fieldValues.add(ACCESSCODE_ONETIME);
            //added by A-4443 for bug icrd-3608 starts
			fieldValues.add(MUCSTATUS_ONETIME);
            //added by A-4443 for bug icrd-3608 ends

            oneTimes = new SharedDefaultsProxy().findOneTimeValues(
                    transactionFilterVO.getCompanyCode(), fieldValues);

        } catch (ProxyException proxyException) {
            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
            uldDefaultsBusinessException.addError(reporterror);
            throw uldDefaultsBusinessException;
        }

        Collection<OneTimeVO> txnType = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> partyType = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> txnStatus = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> accessCode = new ArrayList<OneTimeVO>();
        //added by A-4443 for bug icrd-3608 starts
        Collection<OneTimeVO> mucStatus = new ArrayList<OneTimeVO>();
        //added by A-4443 for bug icrd-3608 ends
        if (oneTimes != null) {// to get onetime values
            txnType = oneTimes.get(TXNTYPE_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************transactionTypes********",
                    txnType);
            partyType = oneTimes.get(PARTYTYPE_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************partyType********",
                    partyType);
            txnStatus = oneTimes.get(TXNSTATUS_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************transactionStatus********",
                    txnStatus);
            accessCode = oneTimes.get(ACCESSCODE_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************accessoryCode********",
                    accessCode);
            //added by A-4443 for bug icrd-3608 starts
            mucStatus = oneTimes.get(MUCSTATUS_ONETIME);

log.log(Log.FINE, "\n\n\n\n*************mucStatus********",
                    mucStatus);
        }
        ReportMetaData parameterMetaData = new ReportMetaData();
        parameterMetaData.setFieldNames(new String[] { "uldNumber",
                "uldTypeCode", "accessoryCode", "transactionType",
                "transactionStatus", "partyType", "fromPartyCode",
                "toPartyCode", "transactionStationCode", "returnedStationCode",
                "strTxnFromDate", "strTxnToDate", "strReturnFromDate",
                "strReturnToDate","mucStatus","prefixControlReceiptNo","midControlReceiptNo","controlReceiptNo" });
        reportSpec.addParameterMetaData(parameterMetaData);
        reportSpec.addParameter(transactionFilterVO);

        // added by a-3278 for including total demmurage in the report on
        // 11Dec08
        ReportMetaData totDemParameterMetaData = new ReportMetaData();
        totDemParameterMetaData.setFieldNames(new String[] { "totalDemmurage",
                "baseCurrency" });
        reportSpec.addParameterMetaData(totDemParameterMetaData);
        reportSpec.addParameter(uLDTransactionDetailsVO);
        // a-3278 ends
        ReportMetaData reportMetaData = new ReportMetaData();
        reportMetaData
                .setColumnNames(new String[] { "TXNTYP", "ULDNUM", "TXNREFNUM",
                        "TXNSTA", "TXNDAT", "TXNSTNCOD", "PTYTYP", "TOPTYCOD",
                        "RTNPTYCOD", "RTNDAT", "RTNSTNCOD", "DMRAMT", "CURCOD",
                        "INVREFNUM", "INVSTA", "TXNRMK", "CRN", "DSTAPTCOD" });

        reportMetaData.setFieldNames(new String[] { "transactionType",
                "uldNumber", "transactionRefNumber", "transactionStatus",
                "transactionDate", "transactionStationCode", "partyType",
                "toPartyCode", "fromPartyCode", "returnDate",
                "returnStationCode", "total", "currency", "invoiceRefNumber",
                "invoiceStatus", "transactionRemark", "controlReceiptNumber",
                "txStationCode" });

		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(uldTransactionsDetails);
		reportSpec.addExtraInfo(txnType);
		reportSpec.addExtraInfo(partyType);
		reportSpec.addExtraInfo(txnStatus);
		reportSpec.addExtraInfo(accessCode);
        //added by A-4443 for bug icrd-3608 starts
		reportSpec.addExtraInfo(mucStatus);
        //added by A-4443 for bug icrd-3608 ends
		return ReportAgent.generateReport(reportSpec);

		/*
		 * Collection<ULDStockConfigVO> uldstockvos
		 * =listULDStockConfig(uldstockconfigfiltervo); if(uldstockvos==null ||
		 * uldstockvos.size()<=0){ ULDDefaultsBusinessException
		 * uldDefaultsBusinessException = new ULDDefaultsBusinessException();
		 * ErrorVO reporterror = new
		 * ErrorVO(ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
		 * uldDefaultsBusinessException.addError(reporterror); throw
		 * uldDefaultsBusinessException; } ReportMetaData parameterMetaData =
		 * new ReportMetaData(); parameterMetaData.setFieldNames(new
		 * String[]{"stationCode","airlineCode"});
		 * reportSpec.addParameterMetaData(parameterMetaData);
		 * reportSpec.addParameter(uldstockconfigfiltervo);
		 *
		 * ReportMetaData reportMetaData = new ReportMetaData();
		 *
		 * reportMetaData.setColumnNames(new String[]{ "ARLCOD", "STNCOD",
		 * "ULDTYPCOD", "MINQTY", "MAXQTY","ULDNAT"});
		 * reportMetaData.setFieldNames(new String[] {"airlineCode",
		 * "stationCode", "uldTypeCode", "minQty","maxQty","uldNature" });
		 *
		 * reportSpec.setReportMetaData(reportMetaData);
		 * reportSpec.setData(uldstockvos); return
		 * ReportAgent.generateReport(reportSpec);
		 */
	}

	/**
	 *
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printLoanBorrowULDForPage(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

		log.entering("ULDController", "printLoanBorrowULD");

        TransactionFilterVO transactionFilterVO = (TransactionFilterVO) reportSpec
                .getFilterValues().iterator().next();
		TransactionListVO transactionListVO = new TransactionListVO();

		Page<ULDTransactionDetailsVO> uldTransactionDetailsPage = null;

		transactionListVO = listULDTransactionDetails(transactionFilterVO);

        uldTransactionDetailsPage = transactionListVO
                .getTransactionDetailsPage();
        log.log(Log.INFO, "transactionFilterVO is----------->>",
                transactionFilterVO);
        log.log(Log.INFO, "uldTransactionDetailsPage is----------->>",
                uldTransactionDetailsPage);
        // added by a-3278 for including total demmurage in the report on
        // 11Dec08
        ULDTransactionDetailsVO uLDTransactionDetailsVO = new ULDTransactionDetailsVO();
        uLDTransactionDetailsVO = findTotalDemmurage(transactionFilterVO);
        // a-3278 ends

        if (uldTransactionDetailsPage == null
                || uldTransactionDetailsPage.size() == 0) {

            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
            uldDefaultsBusinessException.addError(reporterror);
            throw uldDefaultsBusinessException;
        }

        Map<String, Collection<OneTimeVO>> oneTimes = new HashMap<String, Collection<OneTimeVO>>();

        try {
            Collection<String> fieldValues = new ArrayList<String>();

            fieldValues.add(TXNTYPE_ONETIME);
            fieldValues.add(PARTYTYPE_ONETIME);
            fieldValues.add(TXNSTATUS_ONETIME);
            fieldValues.add(ACCESSCODE_ONETIME);
            //added by A-4443 for bug icrd-3608 starts
            fieldValues.add(MUCSTATUS_ONETIME);
            //added by A-4443 for bug icrd-3608 ends

            oneTimes = new SharedDefaultsProxy().findOneTimeValues(
                    transactionFilterVO.getCompanyCode(), fieldValues);

        } catch (ProxyException proxyException) {
            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
            uldDefaultsBusinessException.addError(reporterror);
            throw uldDefaultsBusinessException;
        }

        Collection<OneTimeVO> txnType = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> partyType = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> txnStatus = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> accessCode = new ArrayList<OneTimeVO>();
        //added by A-4443 for bug icrd-3608 starts
        Collection<OneTimeVO> mucStatus = new ArrayList<OneTimeVO>();
        //added by A-4443 for bug icrd-3608 ends

        if (oneTimes != null) {// to get onetime values
            txnType = oneTimes.get(TXNTYPE_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************transactionTypes********",
                    txnType);
            partyType = oneTimes.get(PARTYTYPE_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************partyType********",
                    partyType);
            txnStatus = oneTimes.get(TXNSTATUS_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************transactionStatus********",
                    txnStatus);
            accessCode = oneTimes.get(ACCESSCODE_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************accessoryCode********",
                    accessCode);
            //added by A-4443 for bug icrd-3608 starts
            mucStatus = oneTimes.get(MUCSTATUS_ONETIME);

log.log(Log.FINE, "\n\n\n\n*************mucStatus********",
                    mucStatus);
        }
        ReportMetaData parameterMetaData = new ReportMetaData();
        parameterMetaData.setFieldNames(new String[] { "uldNumber",
                "uldTypeCode", "accessoryCode", "transactionType",
                "transactionStatus", "partyType", "fromPartyCode",
                "toPartyCode", "transactionStationCode", "returnedStationCode",
                "strTxnFromDate", "strTxnToDate", "strReturnFromDate",
                "strReturnToDate","mucStatus","prefixControlReceiptNo","midControlReceiptNo","controlReceiptNo"});
        reportSpec.addParameterMetaData(parameterMetaData);
        reportSpec.addParameter(transactionFilterVO);

        // added by a-3278 for including total demmurage in the report on
        // 11Dec08
        ReportMetaData totDemParameterMetaData = new ReportMetaData();
        totDemParameterMetaData.setFieldNames(new String[] { "totalDemmurage",
                "baseCurrency" });
        reportSpec.addParameterMetaData(totDemParameterMetaData);
        reportSpec.addParameter(uLDTransactionDetailsVO);
        // a-3278 ends
        ReportMetaData reportMetaData = new ReportMetaData();
        reportMetaData
                .setColumnNames(new String[] { "TXNTYP", "ULDNUM", "TXNREFNUM",
                        "TXNSTA", "TXNDAT", "TXNSTNCOD", "PTYTYP", "TOPTYCOD",
                        "RTNPTYCOD", "RTNDAT", "RTNSTNCOD", "DMRAMT", "CURCOD",
                        "INVREFNUM", "INVSTA", "TXNRMK", "CRN", "DSTAPTCOD" });

        reportMetaData.setFieldNames(new String[] { "transactionType",
                "uldNumber", "transactionRefNumber", "transactionStatus",
                "transactionDate", "transactionStationCode", "partyType",
                "toPartyCode", "fromPartyCode", "returnDate",
                "returnStationCode", "total", "currency", "invoiceRefNumber",
                "invoiceStatus", "transactionRemark", "controlReceiptNumber",
                "txStationCode" });

		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(uldTransactionDetailsPage);
		reportSpec.addExtraInfo(txnType);
		reportSpec.addExtraInfo(partyType);
		reportSpec.addExtraInfo(txnStatus);
		reportSpec.addExtraInfo(accessCode);
        //added by A-4443 for bug icrd-3608 starts
		reportSpec.addExtraInfo(mucStatus);
        //added by A-4443 for bug icrd-3608 ends
		return ReportAgent.generateReport(reportSpec);

		/*
		 * Collection<ULDStockConfigVO> uldstockvos
		 * =listULDStockConfig(uldstockconfigfiltervo); if(uldstockvos==null ||
		 * uldstockvos.size()<=0){ ULDDefaultsBusinessException
		 * uldDefaultsBusinessException = new ULDDefaultsBusinessException();
		 * ErrorVO reporterror = new
		 * ErrorVO(ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
		 * uldDefaultsBusinessException.addError(reporterror); throw
		 * uldDefaultsBusinessException; } ReportMetaData parameterMetaData =
		 * new ReportMetaData(); parameterMetaData.setFieldNames(new
		 * String[]{"stationCode","airlineCode"});
		 * reportSpec.addParameterMetaData(parameterMetaData);
		 * reportSpec.addParameter(uldstockconfigfiltervo);
		 *
		 * ReportMetaData reportMetaData = new ReportMetaData();
		 *
		 * reportMetaData.setColumnNames(new String[]{ "ARLCOD", "STNCOD",
		 * "ULDTYPCOD", "MINQTY", "MAXQTY","ULDNAT"});
		 * reportMetaData.setFieldNames(new String[] {"airlineCode",
		 * "stationCode", "uldTypeCode", "minQty","maxQty","uldNature" });
		 *
		 * reportSpec.setReportMetaData(reportMetaData);
		 * reportSpec.setData(uldstockvos); return
		 * ReportAgent.generateReport(reportSpec);
		 */
	}
    /**
     * 
     * @param reportSpec
     * @return
     * @throws SystemException
     * @throws RemoteException
     * @throws ULDDefaultsBusinessException
     */
    public Map<String, Object> printUldInventoryList(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
    	 ULDListFilterVO uldListFilterVO = (ULDListFilterVO) reportSpec
                 .getFilterValues().iterator().next();
    	 Collection<ULDListVO> uldListVOs = ULD.findUldInventoryList(uldListFilterVO);
    	 if (uldListVOs == null || uldListVOs.size() <= 0) {
             ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
             ErrorVO reporterror = new ErrorVO(
                     ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
             uldDefaultsBusinessException.addError(reporterror);
             throw uldDefaultsBusinessException;
         }
    	 reportSpec.addParameter(uldListFilterVO);
    	 reportSpec.setData(uldListVOs);
    	return ReportAgent.generateReport(reportSpec);
    }
	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printListULD(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
        ULDListFilterVO uldListFilterVO = (ULDListFilterVO) reportSpec
                .getFilterValues().iterator().next();

		int pageNo = 0;
		if (uldListFilterVO != null) {
			pageNo = uldListFilterVO.getPageNumber();
		}
		// added by a-3045 for BUG20446 starts
		Collection<ULDListVO> uldListVOs = findULDListColl(uldListFilterVO);
		// added by a-3045 for BUG20446 ends
		// Page<ULDListVO> uldListVOs = findULDList(uldListFilterVO, pageNo);
		if (uldListVOs == null || uldListVOs.size() <= 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		Map<String, Collection<OneTimeVO>> oneTimeHashMap = null;
		Collection<String> oneTimeActiveStatusList = new ArrayList<String>();

		// Collection<OneTimeVO> categorycodes=new ArrayList<OneTimeVO>();
		oneTimeActiveStatusList.add(OPERATSTATUS_ONETIME);
		oneTimeActiveStatusList.add(CLEANSTATUS_ONETIME);
		oneTimeActiveStatusList.add(DAMAGESTATUS_ONETIME);
		oneTimeActiveStatusList.add(ULDNATURE_ONETIME);
		// added by a-3045 for BUG20446 starts
		oneTimeActiveStatusList.add(CONTENT_ONETIME);
		oneTimeActiveStatusList.add(LEVEL_TYPE);
		oneTimeActiveStatusList.add(FACILITY_TYPE);
		// added by a-3045 for BUG20446 ends
		try {
            if (uldListFilterVO != null) {
            oneTimeHashMap = new SharedDefaultsProxy().findOneTimeValues(
                    uldListFilterVO.getCompanyCode(), oneTimeActiveStatusList);
            }
		} catch (ProxyException proxyException) {
			throw new SystemException(proxyException.getMessage());
		}
		Collection<OneTimeVO> overallStatus = new ArrayList<OneTimeVO>();
		Collection<OneTimeVO> cleanStatus = new ArrayList<OneTimeVO>();
		Collection<OneTimeVO> damageStatus = new ArrayList<OneTimeVO>();
		Collection<OneTimeVO> uldNature = new ArrayList<OneTimeVO>();
		// added by a-3045 for BUG20446 starts
		Collection<OneTimeVO> contents = new ArrayList<OneTimeVO>();
		Collection<OneTimeVO> levelType = new ArrayList<OneTimeVO>();
		Collection<OneTimeVO> facilityType = new ArrayList<OneTimeVO>();
		// added by a-3045 for BUG20446 ends

		if (oneTimeHashMap != null) {// to get onetime values
			overallStatus = oneTimeHashMap.get(OPERATSTATUS_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************overallStatus********",
                    overallStatus);
            cleanStatus = oneTimeHashMap.get(CLEANSTATUS_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************cleanStatus********",
                    cleanStatus);
            damageStatus = oneTimeHashMap.get(DAMAGESTATUS_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************damageStatus********",
                    damageStatus);
            uldNature = oneTimeHashMap.get(ULDNATURE_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************uldNature********",
                    uldNature);
            // added by a-3045 for BUG20446 starts
            contents = oneTimeHashMap.get(CONTENT_ONETIME);
            log
                    .log(Log.FINE, "\n\n\n\n*************contents********",
                            contents);
            levelType = oneTimeHashMap.get(LEVEL_TYPE);
            log.log(Log.FINE, "\n\n\n\n*************levelType********",
                    levelType);
            facilityType = oneTimeHashMap.get(FACILITY_TYPE);

log.log(Log.FINE, "\n\n\n\n*************facilityType********",
                    facilityType);
        }
        reportSpec.addExtraInfo(overallStatus);
        reportSpec.addExtraInfo(cleanStatus);
        reportSpec.addExtraInfo(damageStatus);
        reportSpec.addExtraInfo(uldNature);
        // added by a-3045 for BUG20446 starts
        reportSpec.addExtraInfo(levelType);
        reportSpec.addExtraInfo(contents);
        reportSpec.addExtraInfo(facilityType);
        // added by a-3045 for BUG20446 ends
        // Collection<ULDListVO> vos = new ArrayList<ULDListVO>();
        /*
         * int pageSize = uldListVOs.size(); log.log(Log.FINE, "Page Sizeis
         * ------->>" + pageSize); for (int i = 0; i < pageSize; i++) {
         * vos.add(uldListVOs.get(i)); }
         */
        if (uldListFilterVO != null) {

            if (uldListFilterVO.getUldNumber() == null
                    || uldListFilterVO.getUldNumber().length() == 0) {
                uldListFilterVO.setUldNumber("");
            }
            if (uldListFilterVO.getUldGroupCode() == null
                    || uldListFilterVO.getUldGroupCode().length() == 0) {
                uldListFilterVO.setUldGroupCode("");
            }
            if (uldListFilterVO.getUldTypeCode() == null
                    || uldListFilterVO.getUldTypeCode().length() == 0) {
                uldListFilterVO.setUldTypeCode("");
            }
            if (uldListFilterVO.getAirlineCode() == null
                    || uldListFilterVO.getAirlineCode().length() == 0) {
                uldListFilterVO.setAirlineCode("");
            }
            if (uldListFilterVO.getManufacturer() == null
                    || uldListFilterVO.getManufacturer().length() == 0) {
                uldListFilterVO.setManufacturer("");
            }
            if (uldListFilterVO.getLocation() == null
                    || uldListFilterVO.getLocation().length() == 0) {
                uldListFilterVO.setLocation("");
            }
            if (uldListFilterVO.getOwnerStation() == null
                    || uldListFilterVO.getOwnerStation().length() == 0) {
                uldListFilterVO.setOwnerStation("");
            }
            if (uldListFilterVO.getCurrentStation() == null
                    || uldListFilterVO.getCurrentStation().length() == 0) {
                uldListFilterVO.setCurrentStation("");
            }
            // added by a-3045 for CR AirNZ415 starts
            if (uldListFilterVO.getOwnerAirline() == null
                    || uldListFilterVO.getOwnerAirline().length() == 0) {
                uldListFilterVO.setOwnerAirline("");
            }
            if (uldListFilterVO.getAgentCode() == null
                    || uldListFilterVO.getAgentCode().length() == 0) {
                uldListFilterVO.setAgentCode("");
            }
            // added by a-3045 for CR AirNZ415 ends
            // added by a-3045 for BUG20446 starts
            if (uldListFilterVO.getLevelValue() == null
                    || uldListFilterVO.getLevelValue().length() == 0) {
                uldListFilterVO.setLevelValue("");
            }
            if (uldListFilterVO.getContent() == null
                    || uldListFilterVO.getContent().length() == 0) {
				uldListFilterVO.setContent("");
			}
			// added by a-3045 for bug 46783 on 19may09 starts
			if (uldListFilterVO.getOffairportFlag() == null) {
				uldListFilterVO.setOffairportFlag("");
			} else if ("Y".equals(uldListFilterVO.getOffairportFlag())) {
				uldListFilterVO.setOffairportFlag("Yes");
			} else if ("N".equals(uldListFilterVO.getOffairportFlag())) {
				uldListFilterVO.setOffairportFlag("No");
			}
			if (uldListFilterVO.getOccupiedULDFlag() == null) {
				uldListFilterVO.setOccupiedULDFlag("");
			} else if ("Y".equals(uldListFilterVO.getOccupiedULDFlag())) {
				uldListFilterVO.setOccupiedULDFlag("Yes");
			} else if ("N".equals(uldListFilterVO.getOccupiedULDFlag())) {
				uldListFilterVO.setOccupiedULDFlag("No");
			}
			// added by a-3045 for bug 46783 on 19may09 ends
            if (uldListFilterVO.getLevelType() == null
                    || uldListFilterVO.getLevelType().length() == 0) {
				uldListFilterVO.setLevelType("");
			}
			log.log(Log.FINE, "before converting in controller", uldListVOs);
			if (uldListVOs != null && uldListVOs.size() > 0) {
				log.log(Log.FINE, "before advanced for loop in controller");
				for (ULDListVO uldListVO : uldListVOs) {
					if ("Y".equals(uldListVO.getOccupied())) {
						uldListVO.setOccupied("Yes");
					} else if ("N".equals(uldListVO.getOccupied())) {
						uldListVO.setOccupied("No");
					}
					if ("Y".equals(uldListVO.getOffAirport())) {
						uldListVO.setOffAirport("Yes");
					} else if ("N".equals(uldListVO.getOffAirport())) {
						uldListVO.setOffAirport("No");
					}
				}
			}
			log.log(Log.FINE, "after converting from controller", uldListVOs);
			ReportMetaData parameterMetaData = new ReportMetaData();
            parameterMetaData.setFieldNames(new String[] { "uldNumber",
                    "uldGroupCode", "uldTypeCode", "ownerAirline",
                    "airlineCode", "manufacturer", "overallStatus",
                    "damageStatus", "cleanlinessStatus", "agentCode",
                    "ownerStation", "currentStation", "lastMovementDate",
                    "uldNature", "uldRangeFrom", "uldRangeTo", "fromDate",
                    "toDate", "levelType", "levelValue", "content",
                    "offairportFlag", "occupiedULDFlag" });
            reportSpec.addParameterMetaData(parameterMetaData);
            reportSpec.addParameter(uldListFilterVO);
        }
        ReportMetaData reportMetaData = new ReportMetaData();

        reportMetaData.setColumnNames(new String[] { "ULDNUM", "ULDGRPCOD", "MFR",
                "LOANEDTO", "BORROWEDFROM", "FACTYP", "LOC", "DMGSTA",
                "OVLSTA", "CURSTN", "OWNSTN", "LSTMVTDAT", "DAYELP", "ULDNAT",
                "ULDOCPSTA", "TRNSTA", "FLTINFO", "CNT", "OFFAPT" });
        reportMetaData.setFieldNames(new String[] { "uldNumber",
                "uldGroupCode","manufacturer", "partyLoaned", "partyBorrowed", "facilityType",
                "location", "damageStatus", "overallStatus", "currentStation",
                "ownerStation", "lastMovementDate", "daysElapsed", "uldNature",
                "occupied","transitStatus", "flightInfo", "content", "offAirport" });
		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(uldListVOs);
		log.log(Log.FINE, "before returning from controller", uldListFilterVO);
		return ReportAgent.generateReport(reportSpec);

	}

	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printPageListULD(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
        ULDListFilterVO uldListFilterVO = (ULDListFilterVO) reportSpec
                .getFilterValues().iterator().next();
        Page<ULDListVO> uldListVOs=null;
        String companyCode="";
        if (uldListFilterVO != null) {
        log.log(Log.FINE, "uldListFilterVO.getPageNumber()1--->",
                uldListFilterVO.getPageNumber());
        int pageNo = 0;
        companyCode=uldListFilterVO.getCompanyCode();
        log.log(Log.FINE, "uldListFilterVO.getPageNumber()2--->",
                uldListFilterVO.getPageNumber());

            log.log(Log.FINE, "uldListFilterVO.getPageNumber()3--->",
                    uldListFilterVO.getPageNumber());
            pageNo = uldListFilterVO.getPageNumber();
            log.log(Log.FINE, "uldListFilterVO.getPageNumber()4--->",
                    uldListFilterVO.getPageNumber());

        log.log(Log.FINE, "uldListFilterVO.getPageNumber()final--->",
                uldListFilterVO.getPageNumber());
         uldListVOs = findULDList(uldListFilterVO, pageNo);
        if (uldListVOs == null || uldListVOs.size() <= 0) {
            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
            uldDefaultsBusinessException.addError(reporterror);
            throw uldDefaultsBusinessException;
        }
        }
        Map<String, Collection<OneTimeVO>> oneTimeHashMap = null;
        Collection<String> oneTimeActiveStatusList = new ArrayList<String>();

        // Collection<OneTimeVO> categorycodes=new ArrayList<OneTimeVO>();
        oneTimeActiveStatusList.add(OPERATSTATUS_ONETIME);
        oneTimeActiveStatusList.add(CLEANSTATUS_ONETIME);
        oneTimeActiveStatusList.add(DAMAGESTATUS_ONETIME);
        oneTimeActiveStatusList.add(ULDNATURE_ONETIME);
        // added by a-3045 for BUG20446 starts
        oneTimeActiveStatusList.add(CONTENT_ONETIME);
        oneTimeActiveStatusList.add(LEVEL_TYPE);
        oneTimeActiveStatusList.add(FACILITY_TYPE);
        // added by a-3045 for BUG20446 ends
        try {
            oneTimeHashMap = new SharedDefaultsProxy().findOneTimeValues(
                    companyCode, oneTimeActiveStatusList);
        } catch (ProxyException proxyException) {
            throw new SystemException(proxyException.getMessage());
        }
        Collection<OneTimeVO> overallStatus = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> cleanStatus = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> damageStatus = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> uldNature = new ArrayList<OneTimeVO>();
        // added by a-3045 for BUG20446 starts
        Collection<OneTimeVO> contents = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> levelType = new ArrayList<OneTimeVO>();
        Collection<OneTimeVO> facilityType = new ArrayList<OneTimeVO>();
        // added by a-3045 for BUG20446 ends

        if (oneTimeHashMap != null) {// to get onetime values
            overallStatus = oneTimeHashMap.get(OPERATSTATUS_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************overallStatus********",
                    overallStatus);
            cleanStatus = oneTimeHashMap.get(CLEANSTATUS_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************cleanStatus********",
                    cleanStatus);
            damageStatus = oneTimeHashMap.get(DAMAGESTATUS_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************damageStatus********",
                    damageStatus);
            uldNature = oneTimeHashMap.get(ULDNATURE_ONETIME);
            log.log(Log.FINE, "\n\n\n\n*************uldNature********",
                    uldNature);
            // added by a-3045 for BUG20446 starts
            contents = oneTimeHashMap.get(CONTENT_ONETIME);
            log
                    .log(Log.FINE, "\n\n\n\n*************contents********",
                            contents);
            levelType = oneTimeHashMap.get(LEVEL_TYPE);
            log.log(Log.FINE, "\n\n\n\n*************levelType********",
                    levelType);
            facilityType = oneTimeHashMap.get(FACILITY_TYPE);

log.log(Log.FINE, "\n\n\n\n*************facilityType********",
                    facilityType);
        }
        reportSpec.addExtraInfo(overallStatus);
        reportSpec.addExtraInfo(cleanStatus);
        reportSpec.addExtraInfo(damageStatus);
        reportSpec.addExtraInfo(uldNature);
        // added by a-3045 for BUG20446 starts
        reportSpec.addExtraInfo(levelType);
        reportSpec.addExtraInfo(contents);
        reportSpec.addExtraInfo(facilityType);
        // added by a-3045 for BUG20446 ends
        // Collection<ULDListVO> vos = new ArrayList<ULDListVO>();
        /*
         * int pageSize = uldListVOs.size(); log.log(Log.FINE, "Page Sizeis
         * ------->>" + pageSize); for (int i = 0; i < pageSize; i++) {
         * vos.add(uldListVOs.get(i)); }
         */
        if (uldListFilterVO != null) {

            if (uldListFilterVO.getUldNumber() == null
                    || uldListFilterVO.getUldNumber().length() == 0) {
                uldListFilterVO.setUldNumber("");
            }
            if (uldListFilterVO.getUldGroupCode() == null
                    || uldListFilterVO.getUldGroupCode().length() == 0) {
                uldListFilterVO.setUldGroupCode("");
            }
            if (uldListFilterVO.getUldTypeCode() == null
                    || uldListFilterVO.getUldTypeCode().length() == 0) {
                uldListFilterVO.setUldTypeCode("");
            }
            if (uldListFilterVO.getAirlineCode() == null
                    || uldListFilterVO.getAirlineCode().length() == 0) {
                uldListFilterVO.setAirlineCode("");
            }
            if (uldListFilterVO.getManufacturer() == null
                    || uldListFilterVO.getManufacturer().length() == 0) {
                uldListFilterVO.setManufacturer("");
            }
            if (uldListFilterVO.getLocation() == null
                    || uldListFilterVO.getLocation().length() == 0) {
                uldListFilterVO.setLocation("");
            }
            if (uldListFilterVO.getOwnerStation() == null
                    || uldListFilterVO.getOwnerStation().length() == 0) {
                uldListFilterVO.setOwnerStation("");
            }
            if (uldListFilterVO.getCurrentStation() == null
                    || uldListFilterVO.getCurrentStation().length() == 0) {
                uldListFilterVO.setCurrentStation("");
            }
            // added by a-3045 for CR AirNZ415 starts
            if (uldListFilterVO.getOwnerAirline() == null
                    || uldListFilterVO.getOwnerAirline().length() == 0) {
                uldListFilterVO.setOwnerAirline("");
            }
            if (uldListFilterVO.getAgentCode() == null
                    || uldListFilterVO.getAgentCode().length() == 0) {
                uldListFilterVO.setAgentCode("");
            }
            // added by a-3045 for CR AirNZ415 ends
            // added by a-3045 for BUG20446 starts
            if (uldListFilterVO.getLevelValue() == null
                    || uldListFilterVO.getLevelValue().length() == 0) {
                uldListFilterVO.setLevelValue("");
            }
            if (uldListFilterVO.getContent() == null
                    || uldListFilterVO.getContent().length() == 0) {
                uldListFilterVO.setContent("");
            }
            if (uldListFilterVO.getLevelType() == null
                    || uldListFilterVO.getLevelType().length() == 0) {
                uldListFilterVO.setLevelType("");
            }
            // added by a-3045 for bug 46783 on 19may09 starts
            if (uldListFilterVO.getOffairportFlag() == null) {
                uldListFilterVO.setOffairportFlag("");
            } else if ("Y".equals(uldListFilterVO.getOffairportFlag())) {
                uldListFilterVO.setOffairportFlag("Yes");
            } else if ("N".equals(uldListFilterVO.getOffairportFlag())) {
                uldListFilterVO.setOffairportFlag("No");
            }
            if (uldListFilterVO.getOccupiedULDFlag() == null) {
                uldListFilterVO.setOccupiedULDFlag("");
            } else if ("Y".equals(uldListFilterVO.getOccupiedULDFlag())) {
                uldListFilterVO.setOccupiedULDFlag("Yes");
            } else if ("N".equals(uldListFilterVO.getOccupiedULDFlag())) {
                uldListFilterVO.setOccupiedULDFlag("No");
            }
            log.log(Log.FINE, "before converting in controller", uldListVOs);
            if (uldListVOs != null && uldListVOs.size() > 0) {
                log.log(Log.FINE, "before advanced for loop in controller");
                for (ULDListVO uldListVO : uldListVOs) {
                    if ("Y".equals(uldListVO.getOccupied())) {
                        uldListVO.setOccupied("Yes");
                    } else if ("N".equals(uldListVO.getOccupied())) {
                        uldListVO.setOccupied("No");
                    }
                    if ("Y".equals(uldListVO.getOffAirport())) {
                        uldListVO.setOffAirport("Yes");
                    } else if ("N".equals(uldListVO.getOffAirport())) {
                        uldListVO.setOffAirport("No");
                    }
                }
            }
            log.log(Log.FINE, "after converting from controller", uldListVOs);
            ReportMetaData parameterMetaData = new ReportMetaData();
            parameterMetaData.setFieldNames(new String[] { "uldNumber",
                    "uldGroupCode", "uldTypeCode", "ownerAirline",
                    "airlineCode", "manufacturer", "overallStatus",
                    "damageStatus", "cleanlinessStatus", "agentCode",
                    "ownerStation", "currentStation", "lastMovementDate",
                    "uldNature", "uldRangeFrom", "uldRangeTo", "fromDate",
                    "toDate", "levelType", "levelValue", "content",
                    "offairportFlag", "occupiedULDFlag" });
            reportSpec.addParameterMetaData(parameterMetaData);
            reportSpec.addParameter(uldListFilterVO);
        }
        ReportMetaData reportMetaData = new ReportMetaData();
        //modified by A-7131 for ICRD-158973 - added fields - MFR and FlightInfo
        reportMetaData.setColumnNames(new String[] { "ULDNUM", "ULDGRPCOD", "MFR",
                "LOANEDTO", "BORROWEDFROM", "FACTYP", "LOC", "DMGSTA",
                "OVLSTA", "CURSTN", "OWNSTN", "LSTMVTDAT", "DAYELP", "ULDNAT",
                "ULDOCPSTA","TRNSTA", "FLTINFO", "CNT", "OFFAPT" });
        reportMetaData.setFieldNames(new String[] { "uldNumber",
                "uldGroupCode", "manufacturer", "partyLoaned", "partyBorrowed", "facilityType",
                "location", "damageStatus", "overallStatus", "currentStation",
                "ownerStation", "lastMovementDate", "daysElapsed", "uldNature",
                "occupied","transitStatus", "flightInfo", "content", "offAirport" });
		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(uldListVOs);
		log.log(Log.FINE, "before returning from controller", uldListFilterVO);
		return ReportAgent.generateReport(reportSpec);

	}

	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printMonitorULDStock(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
        ULDStockConfigFilterVO uldStockConfigFilterVO = (ULDStockConfigFilterVO) reportSpec
                .getFilterValues().iterator().next();
        log.log(Log.FINE, "filter vo", uldStockConfigFilterVO);
        int pageNo = 0;
        Collection<ULDStockListVO> uldStockListVOs =null;
        if (uldStockConfigFilterVO != null) {
            pageNo = uldStockConfigFilterVO.getPageNumber();
        if (uldStockConfigFilterVO.getPrintStatus()!=null && "GENERATE".equals(uldStockConfigFilterVO.getPrintStatus())){
            uldStockListVOs=ULD.findULDStockListCollection(uldStockConfigFilterVO);
		} else {
			uldStockListVOs = findULDStockList(uldStockConfigFilterVO, pageNo);
		}
        }

		if (uldStockListVOs == null || uldStockListVOs.size() <= 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		Collection<ULDStockListVO> vos = new ArrayList<ULDStockListVO>();
		int pageSize = uldStockListVOs.size();
		log.log(Log.FINE, "Page Sizeis ------->>", pageSize);
		log.log(Log.FINE, "uldStockListVOs is ------->>", uldStockListVOs);
		if (uldStockListVOs != null && uldStockListVOs.size() > 0) {
			for (ULDStockListVO vo : uldStockListVOs) {
				vos.addAll(vo.getUldStockLists());
			}
		}
		/*
         * for (int i = 0; i < pageSize; i++) { vos.add(uldStockListVOs.get(i)); }
		 */
		if (uldStockConfigFilterVO != null) {
			log.log(Log.FINE, "airline code", uldStockConfigFilterVO.getAirlineCode());
			if (uldStockConfigFilterVO.getAirlineCode() == null
					|| uldStockConfigFilterVO.getAirlineCode().length() == 0) {
				uldStockConfigFilterVO.setAirlineCode("");
			}
			if (uldStockConfigFilterVO.getStationCode() == null
					|| uldStockConfigFilterVO.getStationCode().length() == 0) {
				uldStockConfigFilterVO.setStationCode("");
			}
			if (uldStockConfigFilterVO.getUldTypeCode() == null
					|| uldStockConfigFilterVO.getUldTypeCode().length() == 0) {
				uldStockConfigFilterVO.setUldTypeCode("");
			}
			ReportMetaData parameterMetaData = new ReportMetaData();
            parameterMetaData.setFieldNames(new String[] { "airlineCode",
                    "stationCode", "uldTypeCode" });
			reportSpec.addParameterMetaData(parameterMetaData);
			reportSpec.addParameter(uldStockConfigFilterVO);
		}
		ReportMetaData reportMetaData = new ReportMetaData();

		// modified for CR QF1199 on 15Apr09
		/*
		 * reportMetaData.setColumnNames(new String[] {"ARLIDR", "STNCOD",
		 * "ULDGRPCOD",
         * "ULDTYPCOD","ULDNAT","AVL","DMG","UNSERV","INSTOK","INFLGT","OFFARP","SYSAVL","MAXQRT","MINQTY"});
         * reportMetaData.setFieldNames(new String[] { "airlineCode",
         * "stationCode", "uldGroupCode","uldTypeCode","uldNature" ,"available",
         * "damaged", "nonOperational", "inStock", "inFlight",
         * "off","systemAvailable", "maxQty", "minQty" });
         */
        reportMetaData.setColumnNames(new String[] { "ARLIDR", "STNCOD",
                "ULDGRPCOD", "ULDTYPCOD", "ULDNAT", "INSTOK", "UNSERV",
                "OFFARP", "SYSAVL", "MAXQRT", "MINQTY", "BAL" });
        reportMetaData.setFieldNames(new String[] { "airlineCode",
                "stationCode", "uldGroupCode", "uldTypeCode", "uldNature",
                "inStock", "nonOperational", "off", "systemAvailable",
                "maxQty", "minQty", "balance" });
		// QF1199 ends
		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(vos);
		return ReportAgent.generateReport(reportSpec);

	}

	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printMaintainULDAgreement(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
		String companyCode = (String) reportSpec.getFilterValues().get(0);

		String agreementNo = (String) reportSpec.getFilterValues().get(1);

		log.log(Log.INFO, "filter values-----companyCode---->", companyCode);
		log.log(Log.INFO, "filter values-----agreementNo---->", agreementNo);
        ULDAgreementVO agreementVO = findULDAgreementDetails(companyCode,
                agreementNo);

		if (agreementVO == null) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		if (agreementVO != null) {

			ReportMetaData parameterMetaData = new ReportMetaData();
            //Modifeid by A-4393
            parameterMetaData.setFieldNames(new String[] { "agreementNumber",
                    "partyType", "partyCode", "partyName", "txnType",
                    "agreementStatus", "agreementDate", "freeLoanPeriod",
                    "demurrageRate", "agreementFromDate", "agreementToDate",
                    "demurrageFrequency", "tax", "remark", "fromPartyType", "fromPartyCode", "fromPartyName" });
			reportSpec.addParameterMetaData(parameterMetaData);
			reportSpec.addParameter(agreementVO);

			ReportMetaData reportMetaData = new ReportMetaData();
            reportMetaData.setColumnNames(new String[] { "AGRMNTNUM", "PTYTYP",
                    "PTYCOD", "AGRMNTDAT", "TXNTYP", "AGRMNTFRMDAT",
                    "AGRMNTTODAT", "AGRMNTSTA", "CURRENCY", "REMARKS" });
            reportMetaData.setFieldNames(new String[] { "uldTypeCode",
                    "station", "agreementFromDate", "agreementToDate",
                    "freeLoanPeriod", "demurrageFrequency", "demurrageRate",
                    "tax", "currency", "remark" });
            reportSpec.setReportMetaData(reportMetaData);
            Collection<ULDAgreementDetailsVO> detailsVO = agreementVO
                    .getUldAgreementDetailVOs();
			if (detailsVO != null && detailsVO.size() > 0) {
				reportSpec.setData(detailsVO);

			}

		}
		return ReportAgent.generateReport(reportSpec);
	}

	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printListULDAgreement(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

    	log.entering(" ULDController", "printListULDAgreement");
        ULDAgreementFilterVO uldAgreementFilterVO = (ULDAgreementFilterVO) reportSpec
                .getFilterValues().iterator().next();

		// added by a-3045 for bug25282 starts
		Collection<ULDAgreementVO> uldAgreementVOs = listULDAgreementsColl(uldAgreementFilterVO);
		// added by a-3045 for bug25282 ends
		if (uldAgreementVOs == null || uldAgreementVOs.size() <= 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		Map<String, Collection<OneTimeVO>> oneTimeHashMap = null;
		Collection<String> oneTimeActiveStatusList = new ArrayList<String>();

		// Collection<OneTimeVO> categorycodes=new ArrayList<OneTimeVO>();
		oneTimeActiveStatusList.add(TRANSACTION_TYPE);
		oneTimeActiveStatusList.add(AGREEMENT_STATUS);
		oneTimeActiveStatusList.add(PARTY_TYPE);

		try {
			oneTimeHashMap = Proxy.getInstance().get(SharedDefaultsProxy.class).findOneTimeValues(uldAgreementFilterVO.getCompanyCode(),
					oneTimeActiveStatusList);
		} catch (ProxyException proxyException) {
			throw new SystemException(proxyException.getMessage());
		}
        Collection<OneTimeVO> transactionTypes = oneTimeHashMap
                .get(TRANSACTION_TYPE);
		Collection<OneTimeVO> partyTypes = oneTimeHashMap.get(PARTY_TYPE);
		Collection<OneTimeVO> status = oneTimeHashMap.get(AGREEMENT_STATUS);

		for (ULDAgreementVO uldAgreementVO : uldAgreementVOs) {
			for (OneTimeVO oneTimeVO : transactionTypes) {
                if (uldAgreementVO.getTxnType().equals(
                        oneTimeVO.getFieldValue())) {
					uldAgreementVO.setTxnType(oneTimeVO.getFieldDescription());
				}
			}
			for (OneTimeVO oneTimeVO : partyTypes) {
                if (uldAgreementVO.getPartyType().equals(
                        oneTimeVO.getFieldValue())) {
                    uldAgreementVO
                            .setPartyType(oneTimeVO.getFieldDescription());
				} else if ("L".equals(uldAgreementVO.getPartyType())) {
					uldAgreementVO.setPartyType(PARTY_ALL);
				}

			}
			for (OneTimeVO oneTimeVO : status) {
				log.log(Log.FINE, "*******Agreement Status", uldAgreementVO.getAgreementStatus());
				if (uldAgreementVO.getAgreementStatus() != null
                        && uldAgreementVO.getAgreementStatus().equals(
                                oneTimeVO.getFieldValue())) {
                    uldAgreementVO.setAgreementStatus(oneTimeVO
                            .getFieldDescription());
				}
			}
            //Added by A-4393 starts here
            for (OneTimeVO oneTimeVO : partyTypes) {
                if (uldAgreementVO.getFromPartyType() != null 
                		&& uldAgreementVO.getFromPartyType().equals(
                        oneTimeVO.getFieldValue())) {
                    uldAgreementVO
                            .setFromPartyType(oneTimeVO.getFieldDescription());
                } else if ("L".equals(uldAgreementVO.getFromPartyType())) {
                    uldAgreementVO.setFromPartyType(PARTY_ALL);
                }

            }
            //Added by A-4393 ends here
        }

        ReportMetaData reportMetaData = new ReportMetaData();

        reportMetaData.setColumnNames(new String[] { "AGRMNTNUM", "FRMPTYTYP", "FRMPTYCOD", "PTYTYP",
                "PTYCOD", "AGRMNTDAT", "TXNTYP", "AGRMNTFRMDAT", "AGRMNTTODAT",
                "AGRMNTSTA" });
        reportMetaData.setFieldNames(new String[] { "agreementNumber","fromPartyType", "fromPartyCode",
                "partyType", "partyCode", "agreementDate", "txnType",
                "agreementFromDate", "agreementToDate", "agreementStatus" });
		reportSpec.setReportMetaData(reportMetaData);
		log.log(Log.INFO, "data from server----->", uldAgreementVOs);
		reportSpec.setData(uldAgreementVOs);
        log.exiting("ULDController", "printListULDAgreement");
        return ReportAgentInstance.getInstance().generateReport(reportSpec);
	}

	/**
	 * @author A-3278 Method to print the ULD availability details
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printULDAvailabilityReport(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

        TransactionFilterVO transactionFilterVO = (TransactionFilterVO) reportSpec
                .getFilterValues().iterator().next();

		Map<String, Collection<OneTimeVO>> oneTimeHashMap = null;
		Collection<String> oneTimeActiveStatusList = new ArrayList<String>();

		oneTimeActiveStatusList.add(PARTYTYPE_ONETIME);

		try {
            oneTimeHashMap = new SharedDefaultsProxy().findOneTimeValues(
                    transactionFilterVO.getCompanyCode(),
					oneTimeActiveStatusList);
		} catch (ProxyException proxyException) {
			throw new SystemException(proxyException.getMessage());
		}
        Collection<OneTimeVO> partyTypes = oneTimeHashMap
                .get(PARTYTYPE_ONETIME);

        TransactionListVO transactionListVO = ULDTransaction
                .findULDTransactionDetailsCol(transactionFilterVO);
        Collection<ULDTransactionDetailsVO> vos = transactionListVO
                .getUldTransactionsDetails();

		for (ULDTransactionDetailsVO uldTransactionDetailsVO : vos) {

			for (OneTimeVO oneTimeVO : partyTypes) {
                if (uldTransactionDetailsVO.getPartyType().equals(
                        oneTimeVO.getFieldValue())) {
                    uldTransactionDetailsVO.setPartyType(oneTimeVO
                            .getFieldDescription());
				} else if ("L".equals(uldTransactionDetailsVO.getPartyType())) {
					uldTransactionDetailsVO.setPartyType(PARTY_ALL);
				}

			}

		}

		for (OneTimeVO oneTimeVO : partyTypes) {
            if (transactionFilterVO.getPartyType().equals(
                    oneTimeVO.getFieldValue())) {
                transactionFilterVO.setPartyType(oneTimeVO
                        .getFieldDescription());
			} else if ("L".equals(transactionFilterVO.getPartyType())
					|| "".equals(transactionFilterVO.getPartyType())) {
				transactionFilterVO.setPartyType(PARTY_ALL);
			}

		}

		log.log(Log.INFO, "data from server----->", vos);
		reportSpec.addParameter(transactionFilterVO);
		reportSpec.setData(vos);
		return ReportAgent.generateReport(reportSpec);

	}










	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printULDChargingInvoice(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

		log.entering("ULDController", "printULDChargingInvoice");

		Iterator<Object> filterValues = reportSpec.getFilterValues().iterator();
        ChargingInvoiceFilterVO uldChargingFilterVO = (ChargingInvoiceFilterVO) filterValues
                .next();
		String displayPage = filterValues.next().toString();
		log.log(Log.FINE, "displayPage====", displayPage);
		log.log(Log.FINE, "ChargingInvoiceFilterVO======", uldChargingFilterVO);
		int page = Integer.parseInt(displayPage);

		Page<ULDChargingInvoiceVO> uldChargingInvoiceVOs = null;
        uldChargingInvoiceVOs = listULDChargingInvoice(uldChargingFilterVO,
                page);


		if (uldChargingInvoiceVOs == null || uldChargingInvoiceVOs.size() == 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
        log.log(Log.FINE,
                "\n\n--Obtained uldChargingInvoiceVOs from the server->",
                uldChargingInvoiceVOs);
		Map<String, Collection<OneTimeVO>> oneTimes = new HashMap<String, Collection<OneTimeVO>>();
		Map<String, String> map = new HashMap<String, String>();
		try {
			Collection<String> fieldValues = new ArrayList<String>();

			// Added by A-2412
			// fieldValues.add(TXNTYPE_ONETIME);
			fieldValues.add(KEY_TXNTYPEONTIME);
			fieldValues.add(KEY_PARTYTYPEONTIME);

			// addition ends

            oneTimes = new SharedDefaultsProxy().findOneTimeValues(
                    uldChargingFilterVO.getCompanyCode(), fieldValues);

			Collection<String> systemParameters = new ArrayList<String>();
            //Modified by A-7359 for ICRD-248560
            systemParameters.add(SYSPAR_ULDINVCURRENCY);
			map = new SharedDefaultsProxy().findSystemParameterByCodes(systemParameters);
		} catch (ProxyException proxyException) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
         String currencyValue=null;
         //Modified by A-7359 for ICRD-248560
         currencyValue = new StringBuilder().append("(").append(
                map.get(SYSPAR_ULDINVCURRENCY)).append(")").toString();
		Collection<OneTimeVO> txnType = new ArrayList<OneTimeVO>();
		Collection<OneTimeVO> partyType = new ArrayList<OneTimeVO>();

		if (oneTimes != null) {// to get onetime values
			// Added by A-2412
			// txnType = oneTimes.get(TXNTYPE_ONETIME);
			txnType = oneTimes.get(KEY_TXNTYPEONTIME);
			partyType = oneTimes.get(PARTYTYPE_ONETIME);

			// addition ends

            log.log(Log.FINE, "\n\n\n\n**********transactionTypes********",
                    txnType);
            log.log(Log.FINE, "\n\n\n\n**********Party type ********",
                    partyType);
		}

		ReportMetaData parameterMetaData = new ReportMetaData();
		uldChargingFilterVO.setCurrencyCode(currencyValue);
        parameterMetaData.setFieldNames(new String[] { "invoiceRefNumber",
                "partyType", "invoicedToCode", "transactionType",
                "invoicedDateFrom", "invoicedDateTo","currencyCode" });
		reportSpec.addParameterMetaData(parameterMetaData);
		reportSpec.addParameter(uldChargingFilterVO);

		ReportMetaData reportMetaData = new ReportMetaData();
        reportMetaData.setColumnNames(new String[] { "INVREFNUM", "TXNTYP",
                "INVDAT", "PTYTYP", "INVCOD", "WVRAMT", "TOTAMT", "NETAMT" });
        reportMetaData.setFieldNames(new String[] { "invoiceRefNumber",
                "transactionType", "invoicedDate", "partyType",
				"invoicedToCode", "waiverAmount", "totalAmount", "netAmount" });
		log.log(Log.FINE, "reportMetaData==========>>", reportMetaData);
		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setPreview(true);
		reportSpec.setData(uldChargingInvoiceVOs);
		reportSpec.addExtraInfo(txnType);
		reportSpec.addExtraInfo(partyType);
		reportSpec.addExtraInfo(currencyValue);
		return ReportAgent.generateReport(reportSpec);
	}

	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printULDDamageReport(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

		log.entering("ULDController", "printULDDamageReport");

		Iterator<Object> filterValues = reportSpec.getFilterValues().iterator();
        ULDDamageFilterVO uldDamageFilterVO = (ULDDamageFilterVO) filterValues
                .next();
		log.log(Log.FINE, "DamageFilterVO======", uldDamageFilterVO);
		Page<ULDDamageDetailsListVO> uldDamageRepairDetailsVOs = null;
		uldDamageRepairDetailsVOs = findULDDamageList(uldDamageFilterVO);

        if (uldDamageRepairDetailsVOs == null
                || uldDamageRepairDetailsVOs.size() == 0) {
            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
            uldDefaultsBusinessException.addError(reporterror);
            throw uldDefaultsBusinessException;
        }
        log.log(Log.FINE,
                "\n\n--Obtained uldChargingInvoiceVOs from the server->",
                uldDamageRepairDetailsVOs);
		Map<String, Collection<OneTimeVO>> oneTimes = new HashMap<String, Collection<OneTimeVO>>();

		try {
			Collection<String> oneTimeList = new ArrayList<String>();

			oneTimeList.add(DAMAGE_STATUS);
			oneTimeList.add(ULD_STATUS);
			oneTimeList.add(ULD_SECTION);

            oneTimes = new SharedDefaultsProxy().findOneTimeValues(
                    uldDamageFilterVO.getCompanyCode(), oneTimeList);

		} catch (ProxyException proxyException) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		Collection<OneTimeVO> dmgSta = new ArrayList<OneTimeVO>();
		Collection<OneTimeVO> uldSta = new ArrayList<OneTimeVO>();
		Collection<OneTimeVO> dmgSection = new ArrayList<OneTimeVO>();

		if (oneTimes != null) {
			dmgSta = oneTimes.get(DAMAGE_STATUS);
			uldSta = oneTimes.get(ULD_STATUS);
			dmgSection = oneTimes.get(ULD_SECTION);
		}

		for (ULDDamageDetailsListVO uldDamageRepairDetailsVO : uldDamageRepairDetailsVOs) {
			for (OneTimeVO oneTimeVO : dmgSta) {
                log.log(Log.FINE, "\n\n\n----------Damage Status ",
                        uldDamageRepairDetailsVO.getDamageStatus());
				if (uldDamageRepairDetailsVO.getDamageStatus() != null
                        && uldDamageRepairDetailsVO.getDamageStatus().equals(
                                oneTimeVO.getFieldValue())) {
                    uldDamageRepairDetailsVO.setDamageStatus(oneTimeVO
                            .getFieldDescription());
				}
			}
			for (OneTimeVO oneTimeVO : uldSta) {
                log.log(Log.FINE, "\n\n\n----------Over All Status ",
                        uldDamageRepairDetailsVO.getOverallStatus());
                if (uldDamageRepairDetailsVO.getOverallStatus() != null
                        && uldDamageRepairDetailsVO.getOverallStatus().equals(
                                oneTimeVO.getFieldValue())) {
                    uldDamageRepairDetailsVO.setOverallStatus(oneTimeVO
                            .getFieldDescription());
                }
            }
            for (OneTimeVO oneTimeVO : dmgSection) {
                log.log(Log.FINE, "\n\n\n----------dmgSection onetime  ",
                        uldDamageRepairDetailsVO.getSection());
				if (uldDamageRepairDetailsVO.getSection() != null
                        && uldDamageRepairDetailsVO.getSection().equals(
                                oneTimeVO.getFieldValue())) {
                    uldDamageRepairDetailsVO.setSection(oneTimeVO
                            .getFieldDescription());
				}
			}
		}
		/*
		 * ReportMetaData parameterMetaData = new ReportMetaData();
		 *
		 * parameterMetaData.setFieldNames(new String[]{"invoiceRefNumber",
		 * "invoicedToCode","transactionType","invoicedDateFrom",
		 * "invoicedDateTo"});
		 *
		 * reportSpec.addParameterMetaData(parameterMetaData);
		 */
		reportSpec.addParameter(uldDamageFilterVO);

		/*
		 * ReportMetaData reportMetaData = new ReportMetaData();
		 * reportMetaData.setColumnNames(new String[] { "ULDNUM", "DMGREFNUM",
		 * "RPTSTN", "CURSTN", "RPRSTA", "OVLSTA", "RMK" });
		 * reportMetaData.setFieldNames(new String[] { "uldNumber",
		 * "damageReferenceNumber", "reportedStation", "currentStation",
		 * "repairStatus", "uldStatus", "remarks" }); log.log(Log.FINE,
		 * "reportMetaData==========>>" + reportMetaData);
		 *
		 * reportSpec.setReportMetaData(reportMetaData);
		 */
		reportSpec.setPreview(true);
		reportSpec.setData(uldDamageRepairDetailsVOs);
		reportSpec.addExtraInfo(dmgSta);
		reportSpec.addExtraInfo(uldSta);
		return ReportAgent.generateReport(reportSpec);
	}

	/**
	 * @author a-2412 This method deletes the ULD Movement details
	 * @param uldMovementDetails
	 * @throws SystemException
	 */
    public void deleteULDMovements(
            Collection<ULDMovementDetailVO> uldMovementDetails)
            throws SystemException {
		log.entering("ULDController", "deleteULDMovements");
		String companyCode = "";
		ULDMovement movement = null;
		ULDMovementDetail movementDetail = null;
		int recordsTobeDeleted = uldMovementDetails.size();
		int childRecords = 0;

		for (ULDMovementDetailVO movementVO : uldMovementDetails) {
            movement = ULDMovement.find(movementVO.getCompanyCode(), movementVO
                    .getUldNumber(), movementVO.getMovementSequenceNumber());

            Set<ULDMovementDetail> uldmovementDetails = movement
                    .getUldMovementDetails();
			childRecords = uldmovementDetails.size();
			log.log(Log.INFO, "uldmovementDetails----", uldmovementDetails.size());
			// Removing ULDMVTDTL
            movementDetail = ULDMovementDetail.find(
                    movementVO.getCompanyCode(), movementVO
                            .getMovementSequenceNumber(), movementVO
                            .getMovementSerialNumber(), movementVO
                            .getUldNumber());
			if (movementDetail != null) {
				movementDetail.remove();
			}
		}

		// Removing ULDMVTMST
		// If No children exist -- remove the parent entity
		if (childRecords == recordsTobeDeleted) {
			movement.remove();
		}

	}

	// Added by A-2412

	/*
	 * public Map<String,Object> printListUldMovement(ReportSpec reportSpec)
	 * throws SystemException,RemoteException,ULDDefaultsBusinessException {
	 *
	 * ULDMovementFilterVO uldMovementFilterVO =
	 * (ULDMovementFilterVO)reportSpec. getFilterValues().iterator().next(); int
	 * pageNo=0; ULDValidationVO uldValidationVO = new ULDValidationVO();
	 *
	 * if(uldMovementFilterVO!=null){
	 * pageNo=uldMovementFilterVO.getPageNumber();
	 *
	 * uldValidationVO=
     * validateULD(uldMovementFilterVO.getCompanyCode(),uldMovementFilterVO.getUldNumber()); }
     * Page<ULDMovementDetailVO> uldMovementDetailVOs =
	 * findULDMovementHistory(uldMovementFilterVO,pageNo);
	 *
     * Collection<ULDMovementDetailVO> vos = new ArrayList<ULDMovementDetailVO>();
     * int pageSize = uldMovementDetailVOs.size(); log.log(Log.FINE,"Page Sizeis
	 * ------->>"+pageSize); if(uldMovementDetailVOs ==null
	 * ||uldMovementDetailVOs.size()<=0){ ULDDefaultsBusinessException
	 * uldDefaultsBusinessException = new ULDDefaultsBusinessException();
	 * ErrorVO reporterror = new
	 * ErrorVO(ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
	 * uldDefaultsBusinessException.addError(reporterror); throw
	 * uldDefaultsBusinessException; }
	 *
     * Map<String, Collection<OneTimeVO>> oneTimeHashMap= null; Collection<String>
     * oneTimeActiveStatusList = new ArrayList<String>(); Collection<OneTimeVO>
     * currentStatus = new ArrayList<OneTimeVO>(); Collection<OneTimeVO>
     * content = new ArrayList<OneTimeVO>();
	 *
	 * //Collection<OneTimeVO> categorycodes=new ArrayList<OneTimeVO>();
	 * oneTimeActiveStatusList.add(STATUS_ONETIME);
	 * oneTimeActiveStatusList.add(CONTENT_ONETIME); try{ oneTimeHashMap=new
	 * SharedDefaultsProxy().
     * findOneTimeValues(uldMovementFilterVO.getCompanyCode(),oneTimeActiveStatusList); }
     * catch(ProxyException proxyException) { throw new
     * SystemException(proxyException.getMessage()); }
	 * if(oneTimeHashMap!=null){//to get onetime values currentStatus =
	 * oneTimeHashMap.get(STATUS_ONETIME);
	 * log.log(Log.FINE,"\n\n\n\n*************shipmentTypes********"+
	 * currentStatus);
	 *
	 * content = oneTimeHashMap.get(CONTENT_ONETIME);
     * log.log(Log.FINE,"\n\n\n\n*************wareHouseCodes********"+ content); }
     * reportSpec.addExtraInfo(currentStatus); reportSpec.addExtraInfo(content);
     * for(int i=0;i<pageSize;i++){ vos.add(uldMovementDetailVOs.get(i)); }
     * if(uldMovementFilterVO!=null){ ReportMetaData parameterMetaData = new
     * ReportMetaData(); parameterMetaData.setFieldNames(new
     * String[]{"uldNumber", "fromDate","toDate"});
	 * reportSpec.addParameterMetaData(parameterMetaData);
	 * reportSpec.addParameter(uldMovementFilterVO); }
	 * if(uldValidationVO!=null){ ReportMetaData parameterMetaDatas = new
	 * ReportMetaData(); parameterMetaDatas.setFieldNames(new
	 * String[]{"ownerAirlineCode",
	 * "ownerStation","currentStation","overallStatus"});
	 * reportSpec.addParameterMetaData(parameterMetaDatas);
     * reportSpec.addParameter(uldValidationVO); } ReportMetaData reportMetaData =
     * new ReportMetaData();
	 *
	 * reportMetaData.setColumnNames(new String[]{ "FLTCARIDR", "FLTNUM",
	 * "FLTDAT", "CNT", "POL", "POU", "DUMMVTFLG", "MVTDAT", "RMK"});
	 * reportMetaData.setFieldNames(new String[] {"carrierCode", "flightNumber",
	 * "flightDate", "content","pointOfLading", "pointOfUnLading",
	 * "isDummyMovement","lastUpdatedTime","remark"});
	 * reportSpec.setReportMetaData(reportMetaData); reportSpec.setData(vos);
	 * return ReportAgent.generateReport(reportSpec); }
	 *
	 *
	 * public Map<String,Object> printMaintainUldStock(ReportSpec reportSpec)
	 * throws SystemException,RemoteException,ULDDefaultsBusinessException {
	 *
	 * ULDStockConfigFilterVO
	 * uldstockconfigfiltervo=(ULDStockConfigFilterVO)reportSpec.
	 * getFilterValues().iterator().next(); Collection<ULDStockConfigVO>
	 * uldstockvos =listULDStockConfig(uldstockconfigfiltervo);
	 * if(uldstockvos==null || uldstockvos.size()<=0){
	 * ULDDefaultsBusinessException uldDefaultsBusinessException = new
	 * ULDDefaultsBusinessException(); ErrorVO reporterror = new
	 * ErrorVO(ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
	 * uldDefaultsBusinessException.addError(reporterror); throw
	 * uldDefaultsBusinessException; } ReportMetaData parameterMetaData = new
	 * ReportMetaData(); parameterMetaData.setFieldNames(new
	 * String[]{"stationCode","airlineCode"});
	 * reportSpec.addParameterMetaData(parameterMetaData);
	 * reportSpec.addParameter(uldstockconfigfiltervo);
	 *
	 * ReportMetaData reportMetaData = new ReportMetaData();
	 *
	 * reportMetaData.setColumnNames(new String[]{ "ARLCOD", "STNCOD",
	 * "ULDTYPCOD", "MINQTY", "MAXQTY","ULDNAT"});
	 * reportMetaData.setFieldNames(new String[] {"airlineCode", "stationCode",
	 * "uldTypeCode", "minQty","maxQty","uldNature" });
	 *
	 * reportSpec.setReportMetaData(reportMetaData);
	 * reportSpec.setData(uldstockvos); return
	 * ReportAgent.generateReport(reportSpec);
	 *
	 * /** @A-2412
	 */

	// added for reports ends
	/**
	 * @author A-2667 Added this method for calculating the difference between
	 *         currentDate and the givenDate(LastmovementDate) To set
	 *         DaysElapsed in ListULD page. for (ULDListVO uldListVO :
	 *         uldListVOs) { LocalDate lastMovementDate = new
	 *         LocalDate(LocalDate.NO_STATION, Location.NONE,
	 *         uldListVO.getLastMovementDate(), true); LocalDate currentDate =
	 *         new LocalDate(LocalDate.NO_STATION, Location.NONE, true);
	 *         uldListVO.setDaysElapsed((int) dayDiff); /**
	 * @author A-2619 This method is used to list the ULD History
	 * @return Collection
	 * @param uldHistoryVO.
	 * @throws BusinessDelegateException.
	 */
    public Page<ULDHistoryVO> listULDHistory(ULDHistoryVO uldHistoryVO)
            throws SystemException, RemoteException {
		log.entering("ULDController", "listULDHistory");
		Page<ULDHistoryVO> uldHistoryVOs = null;
        return ULD.listULDHistory(uldHistoryVO);

	}

	/**
	 * @author A-2619
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printULDHistory(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
        ULDHistoryVO uldHistoryVO = (ULDHistoryVO) reportSpec.getFilterValues()
                .iterator().next();
		log.log(Log.FINE, "uldHistoryVO", uldHistoryVO);
		int pageNo = 0;
		if (uldHistoryVO != null) {
			pageNo = uldHistoryVO.getPageNumber();
		}
		Page<ULDHistoryVO> uldHistoryVOs = listULDHistory(uldHistoryVO);

		if (uldHistoryVOs == null || uldHistoryVOs.size() <= 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		Collection<ULDHistoryVO> vos = new ArrayList<ULDHistoryVO>();
		int pageSize = uldHistoryVOs.size();
		log.log(Log.FINE, "Page Size is ------->>", pageSize);
		for (int i = 0; i < pageSize; i++) {
			vos.add(uldHistoryVOs.get(i));
		}
		// reportSpec.addParameter(uldHistoryVO);

		reportSpec.addExtraInfo(uldHistoryVO);

		reportSpec.setData(vos);
		reportSpec.setReportId("RPTLST078");
        log
                .log(
                        Log.INFO,
                        "*******************ULDHistory reportSpec*********************************",
                        reportSpec);
		return ReportAgent.generateReport(reportSpec);
	}

	/* Added by A-2412 on 18th Oct for Editable CRN cr */
    public Collection<String> checkForDuplicateCRN(String companyCode,
            TransactionVO transactionVO) throws SystemException {
		Collection<String> crnNums = null;
		try {
			log.log(Log.INFO, "CHECK WHETER THE CRN NUMBER ALREADY EXISTS");
			crnNums = ULD.checkForDuplicateCRN(companyCode, transactionVO);
		} catch (SystemException ex) {
			log.log(Log.INFO, "FINDER EXCEPTION IS THROWN");
		}
		return crnNums;

	}

	/* Addition by A-2412 on 18th Oct for Editable CRN cr ends */
	/* Added by A-2412 for UCR printing */

    /*public Map<String, Object> printUCRLoanBorrowULD(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

        log.entering("ULDController", "printUCRLoanBorrowULD");

        TransactionFilterVO transactionFilterVO = (TransactionFilterVO) reportSpec
                .getFilterValues().iterator().next();
        log.log(Log.ALL, "ULDController transactionFilterVO---"
                + transactionFilterVO);
        TransactionListVO transactionListVO = new TransactionListVO();

        Collection<ULDTransactionDetailsVO> uldTransactionDetailsVos = null;

        transactionListVO = listUCRULDTransactionDetails(transactionFilterVO);

        uldTransactionDetailsVos = transactionListVO
                .getUldTransactionsDetails();

        if (uldTransactionDetailsVos == null
                || uldTransactionDetailsVos.size() == 0) {
            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
            uldDefaultsBusinessException.addError(reporterror);
            throw uldDefaultsBusinessException;
        }
        // Commented by Manaf for INT UlD510
        // Map<String, Collection<OneTimeVO>> oneTimes = new HashMap<String,
        // Collection<OneTimeVO>>();

        log.log(Log.FINE,
                " before setting printUCRLoanBorrowULD getUldTransactionsDetails----------"
                        + transactionListVO.getUldTransactionsDetails());
        for (ULDTransactionDetailsVO transactionDetailsVO : transactionListVO
                .getUldTransactionsDetails()) {

            String uldNo = transactionDetailsVO.getUldNumber();
            String uldType = uldNo.substring(0, 3);

            int length = uldNo.length();
            String twoalphacode = uldNo.substring(length - 2);
            String threealphacode = uldNo.substring(length - 3);

            String ownerCode = null;
            String serNumber = null;

            String arldtl = new ULDController().findOwnerCode(
                    transactionDetailsVO.getCompanyCode(), twoalphacode,
                    threealphacode);
            String arldtlArray[] = arldtl.split("~");
            if ("2".equals(arldtlArray[0])) {
                ownerCode = twoalphacode;
            } else {
                ownerCode = threealphacode;
            }

            serNumber = uldNo.substring(3, length
                    - (Integer.valueOf(arldtlArray[0])));
            transactionDetailsVO.setUldSerialNumber(serNumber);
            transactionDetailsVO.setUldOwnerCode(ownerCode);
            transactionDetailsVO.setUldType(uldType);
            String trnDate = null;
            String trnTime = null;
            String time = null;

            if (transactionDetailsVO.getTransactionDate() != null) {
                log.log(Log.ALL, "getTransactionDate not null");
                LocalDate ld = new LocalDate(transactionDetailsVO
                        .getTransactionDate(), true);

                trnDate = ld.toStringFormat("ddMMMyy");
                trnDate = trnDate.substring(0, 7);
                trnTime = ld.toDisplayTimeOnlyFormat();

                log.log(Log.INFO, "  Date trnDate in String(only date) "
                        + trnDate);
                log.log(Log.INFO, "  Date trnTime in String " + trnTime);
                if (trnTime != null) {
                    String timearr[] = trnTime.split(":");
                    time = new StringBuilder().append(timearr[0]).append(
                            timearr[1]).toString();

                }
                transactionDetailsVO.setStrTxnDate(new StringBuffer(trnDate)
                        .append("-").append(time).toString());

            }
        }

        List<ULDTransactionDetailsVO> uldDetailsVo = new ArrayList<ULDTransactionDetailsVO>(
                transactionListVO.getUldTransactionsDetails());
        log.log(Log.FINE, "befor sorting  ----123" + uldDetailsVo);
        for (ULDTransactionDetailsVO vo : uldDetailsVo) {
            log.log(Log.FINE, "befor sorting----"
                    + vo.getControlReceiptNumber());
        }
        Collections.sort(uldDetailsVo, new CRNComparator());
        log.log(Log.FINE, "after sorting----");
        for (ULDTransactionDetailsVO vo : uldDetailsVo) {
            log.log(Log.FINE, "after sorting----"
                    + vo.getControlReceiptNumber());
        }

        // reportSpec.setData(transactionListVO.getTransactionDetailsPage());
        reportSpec.setData(uldDetailsVo);
        reportSpec.setReportId("RPTOPR053");
        reportSpec.addParameter(transactionFilterVO);

        log.log(Log.INFO,
                "*******************UCR reportSpec*********************************"
                        + reportSpec);
        return ReportAgent.generateReport(reportSpec);

    }*/


	public Map<String, Object> printUCRLoanBorrowULD(ReportSpec reportSpec)
        throws SystemException, RemoteException,
        ULDDefaultsBusinessException {

		log.entering("ULDController", "printUCRLoanBorrowULD");

        TransactionFilterVO transactionFilterVO = (TransactionFilterVO) reportSpec
                .getFilterValues().iterator().next();
        log.log(Log.ALL, "ULDController transactionFilterVO---",
                transactionFilterVO);
		TransactionListVO   transactionListVO = new TransactionListVO();

		Collection<ULDTransactionDetailsVO> uldTransactionDetailsVos  = null;

		transactionListVO = listUCRULDTransactionDetails(transactionFilterVO);

		uldTransactionDetailsVos = transactionListVO.getUldTransactionsDetails();
        //Added by A-4072 for CR ICRD-192300  starts
        /*
         * if ULD COUNT is greater than 3 then new UCR report as per AHM 37th edition to be printed
         * else old UCR report.
         */
        int uldCountPerUCR= getUldCountperUCR();
        boolean isNewUCRReport = uldCountPerUCR>3;
        //Added by A-4072 for CR ICRD-192300  end
        if (uldTransactionDetailsVos == null
                || uldTransactionDetailsVos.size() == 0) {
            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
            uldDefaultsBusinessException.addError(reporterror);
            throw uldDefaultsBusinessException;
        }

        Map<String, Collection<OneTimeVO>> oneTimes = new HashMap<String, Collection<OneTimeVO>>();


        log
                .log(
                        Log.FINE,
                        " before setting printUCRLoanBorrowULD getUldTransactionsDetails----------",
						transactionListVO.getUldTransactionsDetails());
		for (ULDTransactionDetailsVO transactionDetailsVO : transactionListVO.getUldTransactionsDetails()) {

			String uldNo = transactionDetailsVO.getUldNumber();
			String uldType = uldNo.substring(0, 3);

			int length = uldNo.length();
			String twoalphacode = uldNo.substring(length - 2);
			String threealphacode = uldNo.substring(length - 3);

			String ownerCode = null;
			String serNumber = null;

            String arldtl = new ULDController().findOwnerCode(
                    transactionDetailsVO.getCompanyCode(),
                    twoalphacode, threealphacode);
            //Null Check added as part of ICRD-21184
            if(arldtl != null) {
			String arldtlArray[] = arldtl.split("~");
			if ("2".equals(arldtlArray[0])) {
				ownerCode = twoalphacode;
			} else {
				ownerCode = threealphacode;
			}

            serNumber = uldNo.substring(3, length
                    - (Integer.valueOf(arldtlArray[0])));
			}
            transactionDetailsVO.setUldSerialNumber(serNumber);
            transactionDetailsVO.setUldOwnerCode(ownerCode);
            transactionDetailsVO.setUldType(uldType);
            String trnDate = null;
            String trnTime = null;
            String time=null;

            if (transactionDetailsVO.getTransactionDate() != null) {
                log.log(Log.ALL,"getTransactionDate not null");
            LocalDate ld = new LocalDate(transactionDetailsVO
                    .getTransactionDate(), true);
            //Added by A-4072 for CR ICRD-192300 starts
            if(isNewUCRReport){
                trnDate = ld.toStringFormat("ddMMMyyyy");
                trnDate = trnDate.substring(0, 9);
            }else{
            trnDate = ld.toStringFormat("ddMMMyy");
            trnDate = trnDate.substring(0, 7);
            }
            //Added by A-4072 for CR ICRD-192300 end
			trnTime = ld.toDisplayTimeOnlyFormat();

			log.log(Log.INFO, "  Date trnDate in String(only date) ", trnDate);
			log.log(Log.INFO, "  Date trnTime in String ", trnTime);
			if (trnTime != null) {
				String timearr[] = trnTime.split(":");
                time = new StringBuilder()
                        .append(timearr[0]).append(timearr[1])
                        .toString();

            }
            transactionDetailsVO
            .setStrTxnDate(new StringBuffer(trnDate)
                    .append("-").append(time)
                    .toString());

		   }

			String rtnDate = null;
			String rtnTime = null;
            String returnTime=null;

			if (transactionDetailsVO.getReturnDate() != null) {
                log.log(Log.ALL,"getReturnDate not null");
            LocalDate ldt = new LocalDate(transactionDetailsVO
                    .getReturnDate(), true);

			rtnDate = ldt.toStringFormat("ddMMMyy");
			rtnDate = rtnDate.substring(0, 7);
			rtnTime = ldt.toDisplayTimeOnlyFormat();

			log.log(Log.INFO, "  Date trnDate in String(only date) ", rtnDate);
			log.log(Log.INFO, "  Date trnTime in String ", rtnTime);
			if (rtnTime != null) {
				String timearr[] = rtnTime.split(":");
                returnTime = new StringBuilder()
                        .append(timearr[0]).append(timearr[1])
                        .toString();

            }
            transactionDetailsVO
            .setStrRetDate(new StringBuffer(rtnDate)
                    .append("-").append(returnTime)
                    .toString());

           }
        }

        List<ULDTransactionDetailsVO> uldDetailsVo = new ArrayList<ULDTransactionDetailsVO>(transactionListVO.getUldTransactionsDetails());
		log.log(Log.FINE, "befor sorting  ----123", uldDetailsVo);
        for(ULDTransactionDetailsVO vo:uldDetailsVo){
        	//Code change added for fetching return CRN in case of airline return CRN exist 
        	//Swap return and to party code since return CRN is considered
        	if(vo.getReturnCRN()!=null && !vo.getReturnCRN().isEmpty() && 
        			ULDTransactionDetailsVO.FLAG_YES.equals(transactionFilterVO.getCanUseReturnCRNForUCR())) { 
        		vo.setControlReceiptNumber(vo.getReturnCRN());
        		String fromParty =vo.getFromPartyCode();
        		String toParty = vo.getToPartyCode();
        		vo.setFromPartyCode(toParty);
        		vo.setToPartyCode(fromParty);  
        	}  
            log
                    .log(Log.FINE, "befor sorting----", vo.getControlReceiptNumber());
        }
        Collections.sort(uldDetailsVo, new CRNComparator());
        log.log(Log.FINE, "after sorting----");
        for(ULDTransactionDetailsVO vo:uldDetailsVo){
            log
                    .log(Log.FINE, "after sorting----", vo.getControlReceiptNumber());
        }
        reportSpec.setPreview(true);
        if(isNewUCRReport){
              /*
               * Each page in UCR new report should contain 10 ULDs. Each page needs to display first ULD's CRN number
               * at top of each page. If 15 ULD exist then 1st and 11th ULD CRN to be display in 1st and 2nd page
               * CRN number to display in Report is passed as Extra info
               */
             // if(uldDetailsVo.size()>10){
        	   StringBuilder crnNumbers =null ; 
               Collection<String> uniqueCRN=new ArrayList<String>();
                List<ULDTransactionDetailsVO> uldDetailsVos = new ArrayList<ULDTransactionDetailsVO>();
               
                for(ULDTransactionDetailsVO vo:uldDetailsVo){
                	String crnNum=vo.getControlReceiptNumber().substring(5,vo.getControlReceiptNumber().length());        			
                    if(!uniqueCRN.contains(crnNum)){
                    	if(crnNumbers== null){
                    		crnNumbers=new StringBuilder().append(vo.getControlReceiptNumber());
                    	}else{
                        crnNumbers.append(",").append(vo.getControlReceiptNumber());
                    }
                   	 uniqueCRN.add(crnNum); 
                    }
                    uldDetailsVos.add(vo);
                }
                Collection<ULDTransactionDetailsVO> txnDetails = new ArrayList<ULDTransactionDetailsVO>();
                for(String crns: crnNumbers.toString().split(",")){  
        			String uniqCrn =crns.substring(5,crns.length()); 
        			 Collection<ULDTransactionDetailsVO> uniqTrnDtlCol = new ArrayList<ULDTransactionDetailsVO>();
        			for(ULDTransactionDetailsVO trnVO:uldDetailsVo){
        				String crnNum=trnVO.getControlReceiptNumber().substring(5,trnVO.getControlReceiptNumber().length());
        				if(uniqCrn.equals(crnNum)){
        					uniqTrnDtlCol.add(trnVO);    
        				}
        			}   
        			while(uniqTrnDtlCol.size()% 10 != 0){
        				uniqTrnDtlCol.add(new ULDTransactionDetailsVO());
        			}  
        			txnDetails.addAll(uniqTrnDtlCol); 
        		}  
                reportSpec.setData(txnDetails);    
                reportSpec.addExtraInfo(crnNumbers!=null?crnNumbers.toString():""); 
            /*}else{
        reportSpec.setData(uldDetailsVo);
            }*/
            reportSpec.addParameter(uldDetailsVo.get(0));
        }else{
            reportSpec.setData(uldDetailsVo);
        }
        if(isNewUCRReport){
            reportSpec.setReportId("RPRULD028");
        }else{
        reportSpec.setReportId("RPTOPR053");
        }
        log
                .log(
                        Log.INFO,
                        "*******************UCR reportSpec*********************************",
                        reportSpec);
        return ReportAgent.generateReport(reportSpec);

    }

    public TransactionListVO listUCRULDTransactionDetails(
            TransactionFilterVO uldTransactionFilterVO) throws SystemException {
		log.entering("UldController", "listUCRULDTransactionDetails");
        TransactionListVO transactionListVO = ULDTransaction
                .listUCRULDTransactionDetails(uldTransactionFilterVO);
		log.exiting("UldController", "listUCRULDTransactionDetails");
		return transactionListVO;
	}

	/**
	 * @param transactionDetailsVOs
	 * @return
	 * @throws SystemException
	 */
    public Collection<ULDTransactionDetailsVO> sendMUCMessage(
            Collection<ULDTransactionDetailsVO> transactionDetailsVOs)
			throws SystemException {
		log.entering("ULDController", "sendMUCMessage");
		log.log(Log.INFO, "%%%%%%%%%%%%%", transactionDetailsVOs);
		MUCMessageVO mucMessageVO = new MUCMessageVO();
		MUCULDDetailsVO mucULDDetailsVO = null;
		MUCTransferDetailsVO transferDetailsVO = null;
		MUCTransactionCountVO transactionCountVO = null;
		MUCTransmittalDetailsVO transmittalDetailsVO = null;

		Collection<MUCULDDetailsVO> mucULDDetails = null;
		MUCTransferringPartyDetailsVO transferrringPartyVO = null;
		MUCReceivingPartyDetailsVO receivingPartyDetailsVO = null;
		MUCULDConditionDetailsVO uldConditionVO = null;
		MUCULDIdentificationVO uldIdentificationVO = null;

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

		Collection<ULDTransactionDetailsVO> returnVOs = new ArrayList<ULDTransactionDetailsVO>();
		if (transactionDetailsVOs != null && transactionDetailsVOs.size() > 0) {

			mucMessageVO.setCompanyCode(logonAttributes.getCompanyCode());
			mucMessageVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
			mucMessageVO.setMessageStandard("AHM");
			mucMessageVO.setMessageType("MUC");
			mucMessageVO.setStationCode(logonAttributes.getAirportCode());
			mucMessageVO.setTransactionId(MessageConfigConstants.TXN_SCREEN);

			MUCMessageIdentificationVO identificationVO = new MUCMessageIdentificationVO();
			identificationVO.setMessageIdentifier("MUC");
			mucMessageVO.setIdentificationVO(identificationVO);

			transferDetailsVO = new MUCTransferDetailsVO();
			mucULDDetails = new ArrayList<MUCULDDetailsVO>();
			transmittalDetailsVO = new MUCTransmittalDetailsVO();
			transactionCountVO = new MUCTransactionCountVO();

			String companyCode = logonAttributes.getCompanyCode();
			String seqNumber = null;
			String uldNumber = null;
			int length = 0;
			LocalDate dateOfTransfer = null;
			int count = 0;
			String transactionCount = null;
			StringBuilder sbdDate = null;
			StringBuilder sbdTime = null;
			String ownerCode = null;
			// added by a-3045 for CR QF1142 starts
			boolean seqNumberFlag = false;
			for (ULDTransactionDetailsVO uldTxnDetailsVO : transactionDetailsVOs) {
				if (uldTxnDetailsVO.getMucReferenceNumber() == null) {
					seqNumberFlag = true;
					break;
				}
			}
			if (seqNumberFlag) {
                Criterion mucCriterion = KeyUtils.getCriterion(companyCode,
                        MUCSEQNUM);
				String key = KeyUtils.getKey(mucCriterion);
				log.log(Log.INFO, "%%%%%%%%%%%%%key%", key);
				if (key.length() < 2) {
					seqNumber = new StringBuilder("00").append(key).toString();
				} else if (key.length() < 3) {
					seqNumber = new StringBuilder("0").append(key).toString();
				} else {
					seqNumber = key.substring(key.length() - 3);
				}
				ULDTransactionDetailsVO uldTransactionDetailsVO = new ULDTransactionDetailsVO();
				uldTransactionDetailsVO.setMucReferenceNumber(seqNumber);
				returnVOs.add(uldTransactionDetailsVO);
			}
			log.log(Log.INFO, "returnVOs((((((((((==== ", returnVOs);
			// added by a-3045 for CR QF1142 ends
            ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                    ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
					ULDAgreementVO.ENTITY);
			for (ULDTransactionDetailsVO transactionVO : transactionDetailsVOs) {
                ULDTransaction transaction = ULDTransaction.find(transactionVO
                        .getCompanyCode(), transactionVO.getUldNumber(),
                        transactionVO.getTransactionRefNumber());
                if ("S".equals(transaction.getMucIsSent())
                        || "U".equals(transaction.getMucIsSent())
						|| "R".equals(transaction.getMucIsSent())) {
                    log.log(Log.INFO,
                            "transaction.getMucIsSent() ===(((((((((((((==== ",
                            transaction.getMucIsSent());
					transaction.setMucIsSent("R");
					uldConfigAuditVO.setActionCode(RESENT_MUCMESSAGE);
					// transaction.setMucDate(new
					// LocalDate(logonAttributes.getAirportCode(), Location.ARP,
					// true));
					// transaction.setMucReferenceNumber(seqNumber);
					// returnVOs.add(transactionVO);
				} else {
                    log.log(Log.INFO, "transaction.getMucIsSent() ======= ",
                            transaction.getMucIsSent());
					transaction.setMucIsSent("S");
                    transaction.setMucDate(new LocalDate(logonAttributes
                            .getAirportCode(), Location.ARP, true));
					transaction.setMucReferenceNumber(seqNumber);
					uldConfigAuditVO.setActionCode(GENERATE_MUCMESSAGE);
				}
				mucULDDetailsVO = new MUCULDDetailsVO();

				uldNumber = transactionVO.getUldNumber();
				length = uldNumber.length();

                /*Commented by A-3415 for ICRD-114538
                 * if ((LOANED_TRANSACTION.equals(transactionVO
                        .getTransactionType()))
                        || ("B".equals(transactionVO.getTransactionType()) && "T"
                                .equals(transactionVO.getTransactionStatus()))) {
                    dateOfTransfer = transactionVO.getTransactionDate();
                } else {
                    dateOfTransfer = transactionVO.getReturnDate();
                }*/
                if((LOANED_TRANSACTION.equals(transactionVO
                            .getTransactionType()))){
                    dateOfTransfer = transactionVO.getTransactionDate();
                }else if("R".equals(transactionVO.getTransactionStatus())){
                    dateOfTransfer = transactionVO.getReturnDate();
                }
				String ownArlCode = logonAttributes.getOwnAirlineCode();
                if ((LOANED_TRANSACTION.equals(transactionVO.getTransactionType())
                        && uldNumber.endsWith(ownArlCode))){
                    dateOfTransfer = transactionVO.getTransactionDate();
                    mucULDDetailsVO.setUldReceiptNumber(transactionVO.getControlReceiptNumber());
                    mucULDDetailsVO.setLocationOftransfer(transactionVO
                            .getTransactionStationCode());
                } else if (!uldNumber.endsWith(ownArlCode)
                        && "R".equals(transactionVO.getTransactionStatus())){
					dateOfTransfer = transactionVO.getReturnDate();
					mucULDDetailsVO.setUldReceiptNumber(transactionVO.getReturnCRN());
                    if(transactionVO
                            .getReturnStationCode() != null){
                        mucULDDetailsVO.setLocationOftransfer(transactionVO
                                .getReturnStationCode());
                    }else{
                        mucULDDetailsVO.setLocationOftransfer(transactionVO
                                .getTransactionStationCode());
                }
                }/*else if(AbstractVO.FLAG_YES.equals(transaction.getThirdPartyFlag())
                        && ownArlCode.equals(transaction.getReturnPartyCode())){
                    dateOfTransfer = transactionVO.getTransactionDate();
                    mucULDDetailsVO.setUldReceiptNumber(transactionVO.getControlReceiptNumber());
                    mucULDDetailsVO.setLocationOftransfer(transactionVO
                            .getTransactionStationCode());
                }*/
				if (dateOfTransfer != null &&  dateOfTransfer.toString().length() > 0) {
				sbdDate = new StringBuilder();
				sbdDate.append(dateOfTransfer.toString().substring(0, 2));
                sbdDate.append(dateOfTransfer.toString().substring(3, 6)
                        .toUpperCase());
				sbdDate.append(dateOfTransfer.toString().substring(9, 11));
				mucULDDetailsVO.setDateOfTransfer(sbdDate.toString());

				sbdTime = new StringBuilder();
				sbdTime.append(dateOfTransfer.toString().substring(12, 14));
				sbdTime.append(dateOfTransfer.toString().substring(15, 17));
				mucULDDetailsVO.setTimeOfTransfer(sbdTime.toString());
				}
				// Added by A-2052 for the bug 102920 starts
				/*
				 * mucULDDetailsVO.setDestinationLocation(transactionVO
				 * .getTxStationCode());
				 */
				if (transactionVO.getReturnStationCode() != null) {
                    mucULDDetailsVO.setDestinationLocation(transactionVO
                            .getReturnStationCode());
                } else {
                    mucULDDetailsVO.setDestinationLocation(transactionVO
                            .getTxStationCode());
                }
                // Added by A-2052 for the bug 102920 starts

                /*Commented by A-3415 for ICRD-114538
                 * if (BORROW_TRANSACTION.equals(transactionVO
                        .getTransactionType())) {
                    mucULDDetailsVO.setUldReceiptNumber(transactionVO
                            .getReturnCRN());
                    // added by a-3278 for bug 51699 on 22Jun09
                    mucULDDetailsVO.setLocationOftransfer(transactionVO
                            .getReturnStationCode());
                    // 51699 eds
                } else {
                    mucULDDetailsVO.setUldReceiptNumber(transactionVO
                            .getControlReceiptNumber());
                    // added by a-3278 for bug 51699 on 22Jun09
                    mucULDDetailsVO.setLocationOftransfer(transactionVO
                            .getTransactionStationCode());
                    // 51699 ends
                }*/
				receivingPartyDetailsVO = new MUCReceivingPartyDetailsVO();
				transferrringPartyVO = new MUCTransferringPartyDetailsVO();

                /*Commented by A-3415 for ICRD-114538
                 * if (BORROW_TRANSACTION.equals(transactionVO
                        .getTransactionType())) {
                    transferrringPartyVO.setCarrierCode(transactionVO
                            .getToPartyCode());
                    receivingPartyDetailsVO.setCarrierCode(transactionVO
                            .getFromPartyCode());
                } else if (LOANED_TRANSACTION.equals(transactionVO
                        .getTransactionType())) {
                    transferrringPartyVO.setCarrierCode(transactionVO
                            .getFromPartyCode());
                    receivingPartyDetailsVO.setCarrierCode(transactionVO
                            .getToPartyCode());
                }*/
                if ((LOANED_TRANSACTION.equals(transactionVO.getTransactionType())
                        && uldNumber.endsWith(ownArlCode))){
                    transferrringPartyVO.setCarrierCode(transactionVO.getFromPartyCode());
                    receivingPartyDetailsVO.setCarrierCode(transactionVO.getToPartyCode());
                }else if (!uldNumber.endsWith(ownArlCode)
                        && "R".equals(transactionVO.getTransactionStatus())){
					transferrringPartyVO.setCarrierCode(transactionVO.getToPartyCode());
					receivingPartyDetailsVO.setCarrierCode(transactionVO.getFromPartyCode());
                }/*else if(AbstractVO.FLAG_YES.equals(transaction.getThirdPartyFlag())
                        && ownArlCode.equals(transaction.getReturnPartyCode())){
                    transferrringPartyVO.setCarrierCode(transactionVO.getFromPartyCode());
                    receivingPartyDetailsVO.setCarrierCode(transactionVO.getToPartyCode());
                }*/
				// receivingPartyDetailsVO.setNonCarrierId(uldDetailsVO
				// .getReceivingPartyDetailsVO().getNonCarrierId());
                mucULDDetailsVO
                        .setReceivingPartyDetailsVO(receivingPartyDetailsVO);
                mucULDDetailsVO
                        .setTransferringPartyDetailsVO(transferrringPartyVO);

				uldConditionVO = new MUCULDConditionDetailsVO();
				// uldConditionVO.setDamageCode(trnVO.getUldConditionCode());
                uldConditionVO.setServiceableCode(transactionVO
                        .getUldConditionCode());

				mucULDDetailsVO.setUldConditionDetailsVO(uldConditionVO);

				uldIdentificationVO = new MUCULDIdentificationVO();
				uldIdentificationVO.setUldType(uldNumber.substring(0, 3));

                if (uldNumber.substring(length - 2).equals(
                        transactionVO.getFromPartyCode())
                        || uldNumber.substring(length - 3).equals(
                                transactionVO.getFromPartyCode())) {
					ownerCode = transactionVO.getFromPartyCode();
				} else {

					// Need Change
                    ownerCode = findOwnerCode(companyCode, uldNumber
                            .substring(length - 2), uldNumber
                            .substring(length - 3));
                    //Null Check added as part of ICRD-21184
                    if(ownerCode != null) {
					String arldtlArray[] = ownerCode.split("~");
					if ("2".equals(arldtlArray[0])) {
						ownerCode = uldNumber.substring(length - 2);
					} else {
						ownerCode = uldNumber.substring(length - 3);
					}
					}

				}
				uldIdentificationVO.setUldOwnerCode(ownerCode);
                uldIdentificationVO.setUldSerialNumber(uldNumber.substring(3,
                        length - ownerCode.length()));
				mucULDDetailsVO.setUldIdentificationVO(uldIdentificationVO);
				mucULDDetails.add(mucULDDetailsVO);
				count++;

			}
			if (mucULDDetails.size() > 0) {

				transferDetailsVO.setUldDetails(mucULDDetails);
				/*
				 * Criterion mucCriterion = KeyUtils.getCriterion(companyCode,
				 * MUCSEQNUM); String key = KeyUtils.getKey(mucCriterion);
				 * log.log(Log.INFO, "%%%%%%%%%%%%%key%" + key); if
				 * (key.length() < 2) { seqNumber = new
				 * StringBuilder("00").append(key).toString(); } else if
				 * (key.length() < 3) { seqNumber = new
                 * StringBuilder("0").append(key).toString(); } else { seqNumber =
                 * key.substring(key.length() - 3); }
				 */
				transmittalDetailsVO.setLineId("SEQ");
				// added by a-3045 for bug18211 starts
				if (seqNumber != null) {
					transmittalDetailsVO.setTransmittalNumber(seqNumber);
				} else {
					for (ULDTransactionDetailsVO uldTxnDetailsVO : transactionDetailsVOs) {
						if (uldTxnDetailsVO.getMucReferenceNumber() != null) {
                            transmittalDetailsVO
                                    .setTransmittalNumber(uldTxnDetailsVO
                                            .getMucReferenceNumber());
							break;
						}
					}
				}
				// added by a-3045 for bug18211 ends
				transferDetailsVO.setTransmittalDetailsVO(transmittalDetailsVO);

				if (count < 10) {
                    transactionCount = new StringBuilder("00").append(count)
                            .toString();
				} else if (count < 100) {
                    transactionCount = new StringBuilder("0").append(count)
                            .toString();
				} else {
					transactionCount = new StringBuilder(count).toString();
				}
				transactionCountVO.setLineId("TTL");
				transactionCountVO.setNumberOfTransaction(transactionCount);

				transferDetailsVO.setTransactionCountVO(transactionCountVO);

				mucMessageVO.setTransferDetailsVO(transferDetailsVO);
                log.log(Log.INFO, "%%%%%%%% mucMessageVO  %%%%%%%% ",
                        mucMessageVO);
                // added by a-3045 for Auditing starts
                log.log(Log.FINE,
                        "---------setting ULDConfigsAuditVO VO-------");
                StringBuffer additionalInfo = new StringBuffer();
                uldConfigAuditVO.setCompanyCode(logonAttributes
                        .getCompanyCode());
                String airportCode = logonAttributes.getAirportCode();
                uldConfigAuditVO.setTxnTime(new LocalDate(airportCode,
                        Location.ARP, true).toGMTDate());
                uldConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                        Location.ARP, true));
                uldConfigAuditVO.setUserId(logonAttributes.getUserId());
                log.log(Log.FINE, "---------transactionDetailsVOs-------",
                        transactionDetailsVOs);
                if (seqNumber != null) {
                    log
                            .log(
                                    Log.FINE,
                                    "---------Inside if condition while setting ULDConfigsAuditVO VO-------",
									seqNumber);
					additionalInfo.append("MUCREFNUM:-");
					additionalInfo.append(seqNumber);
					additionalInfo.append("/MUCDATE - ");
                    additionalInfo.append(new LocalDate(airportCode,
                            Location.ARP, true).toDisplayDateOnlyFormat());
                } else {
                    for (ULDTransactionDetailsVO uldTxnDetailsVO : transactionDetailsVOs) {
                        log
                                .log(
                                        Log.FINE,
                                        "---------Inside else condition while setting ULDConfigsAuditVO VO-------",
										uldTxnDetailsVO);
						additionalInfo.append("MUCREFNUM:-");
                        additionalInfo.append(uldTxnDetailsVO
                                .getMucReferenceNumber());
                        additionalInfo.append("/MUCDATE - ");
                        additionalInfo.append(uldTxnDetailsVO.getMucDate()
                                .toDisplayDateOnlyFormat());
						break;
					}
				}
				additionalInfo.append("/ULDNUM:-");
				for (ULDTransactionDetailsVO uldTxnDetailsVO : transactionDetailsVOs) {
					additionalInfo.append(uldTxnDetailsVO.getUldNumber());
					additionalInfo.append(",");
				}
                log.log(Log.FINE, "---------additionalInfo.length()-------",
                        additionalInfo.length());
                log.log(Log.FINE,
                        "---------additionalInfo before deleting-------",
                        additionalInfo);
				additionalInfo.deleteCharAt(additionalInfo.length() - 1);
                log.log(Log.FINE,
                        "---------additionalInfo after deleting-------",
                        additionalInfo);
                uldConfigAuditVO.setAdditionalInformation(additionalInfo
                        .toString());
                AuditUtils.performAudit(uldConfigAuditVO);
                log.log(Log.FINE,
                        "---------Before Calling ULDMessageProcessor-------");
				// added by a-3045 for Auditing ends
				new ULDMessageProcessor().sendManualMUCMessage(mucMessageVO);
			}
		}
		return returnVOs;

		/*
		 * if(transactionDetailsVOs != null && transactionDetailsVOs.size() >
		 * 0){
		 *
         * List<ULDTransactionDetailsVO> uldTransactions = new ArrayList<ULDTransactionDetailsVO>(transactionDetailsVOs);
		 *
		 * mucMessageVO.setCompanyCode(logonAttributes.getCompanyCode());
		 * mucMessageVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
		 * mucMessageVO.setMessageStandard("AHM");
		 * mucMessageVO.setMessageType("MUC");
		 * mucMessageVO.setStationCode(logonAttributes.getAirportCode());
		 *
		 * MUCMessageIdentificationVO identificationVO = new
		 * MUCMessageIdentificationVO();
		 * identificationVO.setMessageIdentifier("MUC");
		 * mucMessageVO.setIdentificationVO(identificationVO);
		 *
		 * Collections.sort(uldTransactions, new SecondDesignComparator());
		 *
         * String transactionCount = null; String crn = null; String reference1 =
         * null; String reference2 = null; int transmittalNumber = 0; int count =
         * 0; String seqNumber = null; String uldNumber = null; int length = 0;
         * String companyCode = logonAttributes.getCompanyCode(); String
         * ownerCode = null; for(ULDTransactionDetailsVO trnVO :
		 * uldTransactions){ ULDTransaction transaction = ULDTransaction.find(
		 * trnVO.getCompanyCode() , trnVO.getUldNumber() ,
		 * trnVO.getTransactionRefNumber());
		 * if("Y".equals(transaction.getMucIsSent())){ returnVOs.add(trnVO);
		 * }else{ transaction.setMucIsSent("Y");
		 *
		 * uldNumber = trnVO.getUldNumber(); length = uldNumber.length(); crn =
		 * trnVO.getControlReceiptNumber(); reference1 = crn.substring(5 ,
         * crn.length()); if(!reference1.equals(reference2)){ if(mucULDDetails !=
         * null && mucULDDetails.size() > 0){
		 * transactionCountVO.setLineId("TTL"); if (count < 10) {
		 * transactionCount = new StringBuilder().append("00").append(
		 * count).toString(); } else if (count < 100) { transactionCount = new
		 * StringBuilder().append("0").append( count).toString(); }
		 * transactionCountVO.setNumberOfTransaction(transactionCount);
		 *
		 * transferDetailsVO.setTransactionCountVO(transactionCountVO);
		 * transferDetailsVO.setUldDetails(mucULDDetails);
		 * log.log(Log.INFO,"%%%%%transferDetailsVO%%%%%"+transferDetailsVO);
		 * transferDetails.add(transferDetailsVO); } transferDetailsVO = new
		 * MUCTransferDetailsVO(); transmittalDetailsVO = new
         * MUCTransmittalDetailsVO(); mucULDDetails = new ArrayList<MUCULDDetailsVO>();
         * transactionCountVO = new MUCTransactionCountVO();
		 *
		 * transmittalNumber++; seqNumber = null; if (transmittalNumber < 10) {
		 * seqNumber = new StringBuilder().append("00").append(
		 * transmittalNumber).toString(); } else if (transmittalNumber < 100) {
		 * seqNumber = new StringBuilder().append("0").append(
		 * transmittalNumber).toString(); }
		 * transmittalDetailsVO.setLineId("SEQ");
		 * transmittalDetailsVO.setTransmittalNumber(seqNumber);
		 * transferDetailsVO.setTransmittalDetailsVO(transmittalDetailsVO);
		 *
		 * count = 0; } mucULDDetailsVO = new MUCULDDetailsVO();
		 * mucULDDetailsVO.setUldReceiptNumber(crn);
		 *
		 * LocalDate dateOfTransfer = trnVO.getTransactionDate();
		 *
		 * sbdDate = new StringBuilder();
		 *
		 * sbdDate.append(dateOfTransfer.toString().substring(0, 2));
		 * sbdDate.append(dateOfTransfer.toString().substring(3, 6)
		 * .toUpperCase());
		 * sbdDate.append(dateOfTransfer.toString().substring(9, 11));
		 *
		 * mucULDDetailsVO.setDateOfTransfer(sbdDate.toString());
		 * mucULDDetailsVO.setDestinationLocation(trnVO.getTxStationCode());
         * mucULDDetailsVO.setLocationOftransfer(trnVO.getTransactionStationCode());
		 *
		 * sbdTime = new StringBuilder();
		 *
		 * sbdTime.append(dateOfTransfer.toString().substring(12, 14));
		 * sbdTime.append(dateOfTransfer.toString().substring(15, 17));
		 * mucULDDetailsVO.setTimeOfTransfer(sbdTime.toString());
		 *
		 * receivingPartyDetailsVO = new MUCReceivingPartyDetailsVO();
		 * receivingPartyDetailsVO.setCarrierCode(trnVO.getToPartyCode());
		 * //receivingPartyDetailsVO.setNonCarrierId(uldDetailsVO //
		 * .getReceivingPartyDetailsVO().getNonCarrierId());
		 * mucULDDetailsVO.setReceivingPartyDetailsVO(receivingPartyDetailsVO);
		 *
		 * transferrringPartyVO = new MUCTransferringPartyDetailsVO();
		 * transferrringPartyVO.setCarrierCode(trnVO.getFromPartyCode());
		 * mucULDDetailsVO.setTransferringPartyDetailsVO(transferrringPartyVO);
		 *
		 * uldConditionVO = new MUCULDConditionDetailsVO();
		 * //uldConditionVO.setDamageCode(trnVO.getUldConditionCode());
		 * uldConditionVO.setServiceableCode(trnVO.getUldConditionCode());
		 * mucULDDetailsVO.setUldConditionDetailsVO(uldConditionVO);
		 *
		 * uldIdentificationVO = new MUCULDIdentificationVO();
		 * uldIdentificationVO.setUldType(uldNumber.substring(0,3));
		 * if(uldNumber.substring(length-2).equals(trnVO.getFromPartyCode()) ||
		 * uldNumber.substring(length-3).equals(trnVO.getFromPartyCode())){
		 * ownerCode = trnVO.getFromPartyCode(); }else{ ownerCode =
		 * findOwnerCode(companyCode ,
		 * uldNumber.substring(length-2),uldNumber.substring(length-3)); }
		 * uldIdentificationVO.setUldOwnerCode(trnVO.getFromPartyCode());
         * uldIdentificationVO.setUldSerialNumber(uldNumber.substring(3,length-ownerCode.length()));
		 * mucULDDetailsVO.setUldIdentificationVO(uldIdentificationVO);
		 *
		 * mucULDDetails.add(mucULDDetailsVO);
		 *
		 * count++; reference2 = reference1; } } if(mucULDDetails != null &&
		 * mucULDDetails.size() > 0){ transactionCountVO.setLineId("TTL"); if
		 * (count < 10) { transactionCount = new
		 * StringBuilder().append("00").append( count).toString(); } else if
		 * (count < 100) { transactionCount = new
		 * StringBuilder().append("0").append( count).toString(); }
		 * transactionCountVO.setNumberOfTransaction(transactionCount);
		 *
		 * transferDetailsVO.setTransactionCountVO(transactionCountVO);
		 * transferDetailsVO.setUldDetails(mucULDDetails);
		 *
		 * log.log(Log.INFO,"%%%%%transferDetailsVO%%%%%"+transferDetailsVO);
		 *
		 * transferDetails.add(transferDetailsVO);
		 * mucMessageVO.setTransferDetails(transferDetails); log.log(Log.INFO,
		 * "%%%%%%%% mucMessageVO %%%%%%%% " + mucMessageVO); new
		 * ULDMessageProcessor().sendManualMUCMessage(mucMessageVO); } } return
		 * returnVOs;
		 */
	}

	// Added By A-2883 For Report Of ListRepairReport Screen
	public Map<String, Object> printListRepairULD(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

        log.entering(" ULDController", "printListRepairULD");
		log.log(Log.FINE, "\n\n insideeeelistreepair");

		Iterator<Object> filterValues = reportSpec.getFilterValues().iterator();
        ULDRepairFilterVO uldRepairFilterVO = (ULDRepairFilterVO) filterValues
                .next();

        Page<ULDRepairDetailsListVO> repairDetailsVos = new ULDRepair()
                .listULDRepairDetails(uldRepairFilterVO);

		log.log(Log.FINE, "===listtt===", repairDetailsVos);
		// adding paramters
		if (uldRepairFilterVO != null) {

            if (uldRepairFilterVO.getUldNumber() == null
                    || uldRepairFilterVO.getUldNumber().length() == 0) {
				uldRepairFilterVO.setUldNumber("");
			}
            if (uldRepairFilterVO.getRepairHead() == null
                    || uldRepairFilterVO.getRepairHead().length() == 0) {
				uldRepairFilterVO.setUldNumber(ALL);
			}

            if (uldRepairFilterVO.getUldTypeCode() == null
                    || uldRepairFilterVO.getUldTypeCode().length() == 0) {
				uldRepairFilterVO.setUldTypeCode("");
			}
            if (uldRepairFilterVO.getCurrentStation() == null
                    || uldRepairFilterVO.getCurrentStation().length() == 0) {
				uldRepairFilterVO.setCurrentStation("");
			}
            if (uldRepairFilterVO.getUldStatus() == null
                    || uldRepairFilterVO.getUldStatus().length() == 0) {
				uldRepairFilterVO.setUldStatus(ALL);
			}
            if (uldRepairFilterVO.getRepairStatus() == null
                    || uldRepairFilterVO.getRepairStatus().length() == 0) {
				uldRepairFilterVO.setRepairStatus(ALL);
			}
            if (uldRepairFilterVO.getRepairStation() == null
                    || uldRepairFilterVO.getRepairStation().length() == 0) {
				uldRepairFilterVO.setRepairStation("");
			}
            //Added by A-7359 for ICRD-268766 
            if (uldRepairFilterVO.getCurrency() == null
                    || uldRepairFilterVO.getCurrency().length() == 0) {
                uldRepairFilterVO.setCurrency("");
            }
			ReportMetaData parameterMetaData = new ReportMetaData();
            parameterMetaData.setFieldNames(new String[] { "uldNumber",
                    "repairHead", "uldTypeCode", "currentStation", "uldStatus",
                    "repairStatus", "repairStation", "fromDate", "toDate","currency" });
			reportSpec.addParameterMetaData(parameterMetaData);
			reportSpec.addParameter(uldRepairFilterVO);

		}

		if (repairDetailsVos == null || repairDetailsVos.size() == 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}

		ReportMetaData reportMetaData = new ReportMetaData();
        reportMetaData.setColumnNames(new String[] { "ULDNUM", "DMGREFNUM",
                "RPRHED", "RPRARP", "RPRDAT", "RPRAMT", "RPRRMK", "ULDPRC" });
        reportMetaData.setFieldNames(new String[] { "uldNumber",
                "damageReferenceNumber", "repairHead", "repairedStation",
                "repairDate", "repairAmount", "remarks", "uldprice" });
		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(repairDetailsVos);
		reportSpec.setPreview(true);
		reportSpec.setReportId("RPTLST078");

		return ReportAgent.generateReport(reportSpec);

	}



	/**
     * Modified by A-5165 for ICRD-262166- returns collection of errors for warning
	 * @author A-2667 Added this method as a patr of ANA CR 1478(UCM Processing)
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 *             method changed allover by nisha for QF CR 1013
	 */
    @Advice(name = "uld.defaults.processucmmessage" , phase=Phase.POST_INVOKE)
    public Collection<ErrorVO> processUCMMessage(
            Collection<ULDFlightMessageReconcileVO> reconcileVOs)
            throws SystemException, UCMInExistsForStationException,
            CurrencyConversionException, DimensionConversionException,
            RemoteException, MessageConfigException,
            AgreementDoesNotExistsException, ULDDefaultsBusinessException {
		log.entering("ULDController", "processUCMMessage");
        Collection<ErrorVO>errors=null;
		/*
		 * added by a-3278 for bug 34185 on 27Jan09 To remove the missed ULDs
		 * from discrepency table if transaction exists for that
		 */
		if (reconcileVOs != null && reconcileVOs.size() > 0) {
			for (ULDFlightMessageReconcileVO uLDFlightMessageReconcileVO : reconcileVOs) {
				if (uLDFlightMessageReconcileVO.getReconcileDetailsVOs() != null
                        && uLDFlightMessageReconcileVO.getReconcileDetailsVOs()
                                .size() > 0) {
                    if (UCM_OUT.equalsIgnoreCase(uLDFlightMessageReconcileVO
                            .getMessageType())) {

						Collection<String> uldNos = new ArrayList<String>();
						for (ULDFlightMessageReconcileDetailsVO reconcileULDDetailsVO : uLDFlightMessageReconcileVO
								.getReconcileDetailsVOs()) {
							uldNos.add(reconcileULDDetailsVO.getUldNumber());
						}
                        Collection<ULDDiscrepancy> uldDiscrepancies = ULDDiscrepancy
                                .findULDDiscrepancies(
                                        uLDFlightMessageReconcileVO
                                                .getReconcileDetailsVOs()
                                                .iterator().next()
                                                .getCompanyCode(), uldNos);
                        if (uldDiscrepancies != null
                                && uldDiscrepancies.size() > 0) {
							for (ULDDiscrepancy uldDiscrepancy : uldDiscrepancies) {
								uldDiscrepancy.setCloseStatus("Y");
							}
						}
					}
				}
			}
		}
		// a-3278 ends
		// Marking ULD Movements
		String companyCode = "";
		String airportCode = "";
		
		Collection<String> uldNOsForMessageReconcile = new ArrayList<String>();
		
		if (reconcileVOs != null && reconcileVOs.size() > 0) {
			for (ULDFlightMessageReconcileVO uLDFlightMessageReconcileVO : reconcileVOs) {
                if (uLDFlightMessageReconcileVO != null) {//Added as part of ICRD-201077 by A-7426
                    if (UCM_IN.equalsIgnoreCase(uLDFlightMessageReconcileVO
                            .getMessageType())) {
						markULDMovementsForUCM(uLDFlightMessageReconcileVO);
					}
					companyCode = uLDFlightMessageReconcileVO.getCompanyCode();
					airportCode = uLDFlightMessageReconcileVO.getAirportCode();
                    // A-5125 , for ICRD-2268 while saving  setting to Transit state first time.
                    if (uLDFlightMessageReconcileVO.getReconcileDetailsVOs() != null
                            && uLDFlightMessageReconcileVO.getReconcileDetailsVOs()
                            .size() > 0){//Added as part of ICRD-201077 by A-7426
					for (ULDFlightMessageReconcileDetailsVO reconcileULDDetailsVO : uLDFlightMessageReconcileVO
							.getReconcileDetailsVOs()) {
						uldNOsForMessageReconcile.add(reconcileULDDetailsVO.getUldNumber());
						reconcileULDDetailsVO.setUldFlightStatus(TRANSIT);
						}
				}
                }//ends
				// code removed by nisha on 06Mar08
			}
		}
		// Finding Uld's having transit state.
		// author A-5125 for BUG-ICRD-50392
		/*
         * If the Same flight Processing Second time with Different ulds
         *  need to update the Status of the uld from transit to Intermediate.
		 */
		Collection<ULDFlightMessageReconcileDetailsVO> uldFltMsgRecDtlsVOs = null;
		String flightNumber = "";
		LocalDate flightDate = new LocalDate(airportCode, Location.ARP, true);
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		String cmpCod = logonAttributes.getCompanyCode();

		if (reconcileVOs != null) {
            ULDFlightMessageReconcileVO uldFltMsgRecVO = reconcileVOs
                    .iterator().next();
			flightNumber = uldFltMsgRecVO.getFlightNumber();
			flightDate = uldFltMsgRecVO.getFlightDate();
		}

		if (!"".equals(flightNumber) && flightDate != null) {
            log.log(Log.INFO,
                    "%%%%%%Finding ULDS in Transit Status-- %%%%%flightNumber,flightDate",
                    flightNumber, flightDate);
            uldFltMsgRecDtlsVOs = ULDFlightMessageReconcileDetails
                    .findTransitStateULDs(cmpCod, flightDate, flightNumber);
        }
        for(ULDFlightMessageReconcileDetailsVO uldFltMsgRecDtlVO:uldFltMsgRecDtlsVOs){
				
			ULDFlightMessageReconcileDetails uldFltMsgRecDtl = null;
				
				try {
                    uldFltMsgRecDtl = ULDFlightMessageReconcileDetails
                            .find(uldFltMsgRecDtlVO);
				} catch (SystemException systemException) {
					throw new SystemException(systemException.getErrors());
				}
				 
				if (uldFltMsgRecDtl != null) {
					uldFltMsgRecDtl.setUldFlightStatus(INTERMEDIATE);
				}
				
		}
		
		// Ends A-5125 for BUG-ICRD-50392
		
		log.log(Log.INFO, "%%%%%%saveProcessedUCM %%%%%", reconcileVOs);
        if (reconcileVOs != null
                && reconcileVOs.size() > 0
				&& reconcileVOs.iterator().next().getReconcileDetailsVOs() != null
                && reconcileVOs.iterator().next().getReconcileDetailsVOs()
                        .size() > 0) {
			// A-5125 , for ICRD-2268
            ULDFlightMessageFilterVO uldFltmsgFilterVO=new ULDFlightMessageFilterVO();
            Collection<ULDFlightMessageReconcileDetailsVO> uldFltMsgRecDtlVO=null;
			if (reconcileVOs != null && reconcileVOs.size() > 0) {
				uldFltmsgFilterVO.setCompanyCode(companyCode);
				uldFltmsgFilterVO.setAirportCode(airportCode);
				uldFltmsgFilterVO.setUldFlightStatus(TRANSIT);
				uldFltmsgFilterVO.setUldNOsForMessageReconcile(uldNOsForMessageReconcile);
                uldFltMsgRecDtlVO = ULDFlightMessageReconcileDetails
                            .findUldFltMsgRecDtlsVOs(uldFltmsgFilterVO);
				if (uldFltMsgRecDtlVO != null) {
					for (ULDFlightMessageReconcileDetailsVO uldfltMsgRecoDtlsVO : uldFltMsgRecDtlVO) {
						if (uldfltMsgRecoDtlsVO.getUldFlightStatus() != null) {
								ULDFlightMessageReconcileDetails uldDTl = null;
								try {
                                    uldDTl = ULDFlightMessageReconcileDetails
                                            .find(uldfltMsgRecoDtlsVO);
								} catch (SystemException systemException) {
									throw new SystemException(systemException.getErrors());
								}
                                //if it it Transit state again while processing next time marking uldFlightStatus as Intermediate
								if (uldDTl != null) {
									uldDTl.setUldFlightStatus(INTERMEDIATE);
								}
						}
					}
                }//ends  A-5125
                // Modified by A-5165 for ICRD-262166- returns collection of errors for warning
                errors= saveProcessedUCM(reconcileVOs);
		}
		}
		if (reconcileVOs != null && reconcileVOs.size() > 0) {
			for (ULDFlightMessageReconcileVO uLDFlightMessageReconcileVO : reconcileVOs) {
                if (UCM_OUT.equalsIgnoreCase(uLDFlightMessageReconcileVO
                        .getMessageType())) {
					updateTransitStatus(uLDFlightMessageReconcileVO);
				}
			}
		}
		log.exiting("ULDController", "processUCMMessage");
        return errors;
	}

	/**
	 * @author A-2667 A private method called from processUCMMessage. This is
	 *         used for marking ULD Movements. i.e, to insert movement details
	 *         into ULDMVTMST and ULDMVTDTL
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 */
	private void markULDMovementsForUCM(ULDFlightMessageReconcileVO reconcileVO)
			throws SystemException, RemoteException {
		log.entering("ULDController", "markULDMovementsForUCM");

		log.log(Log.FINE, "ULDFlightMessageReconcileVO------->>", reconcileVO);
		Collection<ULDFlightMessageReconcileDetailsVO> reconcileDetailsVOs = null;
		LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
        if (reconcileVO.getReconcileDetailsVOs() != null
                && reconcileVO.getReconcileDetailsVOs().size() > 0) {
			// Added by nisha for qf1013 cr starts
			ULDFlightMessageReconcileVO messageReconcileVO = null;
            messageReconcileVO = ULDFlightMessageReconcile
                    .findCounterUCM(reconcileVO);
			if (messageReconcileVO != null) {
                reconcileDetailsVOs = messageReconcileVO
                        .getReconcileDetailsVOs();
			}
			// ends
			for (ULDFlightMessageReconcileDetailsVO uLDFlightMessageReconcileDetailsVO : reconcileVO
					.getReconcileDetailsVOs()) {

				try {
                    log
                            .log(
                                    Log.FINE,
                                    "uLDFlightMessageReconcileDetailsVO.getUldNumber()---->>",
                                    uLDFlightMessageReconcileDetailsVO
                                            .getUldNumber());
                    log.log(Log.FINE, "reconcileVO.getCompanyCode()-->>",
                            reconcileVO.getCompanyCode());
                    ULD uld = null;
                    uld = ULD.find(reconcileVO.getCompanyCode(),
                            uLDFlightMessageReconcileDetailsVO.getUldNumber());
                    if (uld != null) {
                        log.log(Log.FINE, "---ULD Objects---->>", uld);
                        uld.setTransitStatus("N");
                        if (uld.getCurrentStation().equalsIgnoreCase(
                                uLDFlightMessageReconcileDetailsVO
                                        .getAirportCode())) {
                            log.log(Log.INFO,
                                    "POL and POU are same no movement marked");
						} else {
							// Added by nisha starts for QF1013
							String content = null;
                            if (reconcileDetailsVOs != null
                                    && reconcileDetailsVOs.size() > 0) {
								for (ULDFlightMessageReconcileDetailsVO recVO : reconcileDetailsVOs) {
                                    if (uLDFlightMessageReconcileDetailsVO
                                            .getUldNumber().equals(
                                                    recVO.getUldNumber())) {
										content = recVO.getContent();
									}
								}
							}
							// ends
                            //dummy movement in case current station is not the POL of UCM (A-7131 for ICRD-185141 starts)
                            if (uLDFlightMessageReconcileDetailsVO.getPol() != null &&
                                    !uld.getCurrentStation().equalsIgnoreCase(uLDFlightMessageReconcileDetailsVO.getPol())) {
							Collection<String> ulds = new ArrayList<String>();
								Collection<ULDMovementVO> dummyUldMovementVOs = new ArrayList<ULDMovementVO>();
								ULDMovementVO movementVO = new ULDMovementVO();
                                movementVO.setCarrierCode(uLDFlightMessageReconcileDetailsVO
                                        .getCarrierCode());
                                movementVO.setCompanyCode(uLDFlightMessageReconcileDetailsVO
                                                .getCompanyCode());
                                movementVO.setCurrentStation(uLDFlightMessageReconcileDetailsVO
                                                .getPol());
                                movementVO.setDummyMovement(true);
                                movementVO.setLastUpdatedUser(logonAttributes
                                        .getUserId());
                                movementVO.setLastUpdatedTime(new LocalDate(
                                        uLDFlightMessageReconcileDetailsVO.getPol(),
                                        Location.ARP, true));
                                movementVO
                                        .setPointOfLading(uld.getCurrentStation());
                                movementVO
                                        .setPointOfUnLading(uLDFlightMessageReconcileDetailsVO
                                                .getPol());
                                movementVO.setUpdateCurrentStation(true);
                                movementVO.setContent(content);
                                ulds.add(uLDFlightMessageReconcileDetailsVO
                                        .getUldNumber());
                                //Added by A-5265 for ICRD-47486 starts
                                LocalDate remarksDate = new LocalDate(
                                        uLDFlightMessageReconcileDetailsVO.getAirportCode(), Location.ARP, true);
                                movementVO.setRemark(RECEIVED_UCM_MOVEMENT_REMARKS
                                        + remarksDate.toDisplayFormat());
                                //Added by A-5265 for ICRD-47486 ends
								dummyUldMovementVOs.add(movementVO);
								try {
									log.log(Log.INFO, "---------Saving ULD Movements--------");
									saveULDMovement(ulds, dummyUldMovementVOs);
								} catch (ULDDoesNotExistsException uldDoesNotExistsException) {
									log.log(Log.INFO, "%%%%%%%%%%%%%  will never throw this exception");
								}
							}
                            //Added by A-7131 for ICRD-185141 ends
							Collection<String> ulds = new ArrayList<String>();
							Collection<ULDMovementVO> uldMovementVOs = new ArrayList<ULDMovementVO>();
							ULDMovementVO movementVO = new ULDMovementVO();
                            movementVO
                                    .setCarrierCode(uLDFlightMessageReconcileDetailsVO
                                            .getCarrierCode());
                            movementVO
                                    .setCompanyCode(uLDFlightMessageReconcileDetailsVO
                                            .getCompanyCode());
                            movementVO
                                    .setCurrentStation(uLDFlightMessageReconcileDetailsVO
                                            .getAirportCode());
                            movementVO.setDummyMovement(false);
                            movementVO
                                    .setFlightCarrierIdentifier(uLDFlightMessageReconcileDetailsVO
                                            .getFlightCarrierIdentifier());
                            movementVO
                                    .setFlightDate(uLDFlightMessageReconcileDetailsVO
                                            .getFlightDate());
                            movementVO
                                    .setFlightNumber(uLDFlightMessageReconcileDetailsVO
                                            .getFlightNumber());
                            movementVO
                                    .setCurrentStation(uLDFlightMessageReconcileDetailsVO
                                            .getAirportCode());
                            log
                                    .log(
                                            Log.FINE,
                                            "uLDFlightMessageReconcileDetailsVO.getAirportCode()--->>>",
                                            uLDFlightMessageReconcileDetailsVO
                                                            .getAirportCode());
                            movementVO.setLastUpdatedUser(logonAttributes
                                    .getUserId());
                            movementVO.setLastUpdatedTime(new LocalDate(
                                    movementVO.getCurrentStation(),
                                    Location.ARP, true));
                            movementVO
                                    .setPointOfLading(uld.getCurrentStation());

                            movementVO
                                    .setPointOfUnLading(uLDFlightMessageReconcileDetailsVO
                                            .getAirportCode());
                            movementVO.setUpdateCurrentStation(true);
                            movementVO.setContent(content);
                            ulds.add(uLDFlightMessageReconcileDetailsVO
                                    .getUldNumber());

                            //Added by A-5265 for ICRD-47486 starts
                            LocalDate remarksDate = new LocalDate(
                                    uLDFlightMessageReconcileDetailsVO.getAirportCode(), Location.ARP, true);
                            movementVO.setRemark(RECEIVED_UCM_MOVEMENT_REMARKS
                                    + remarksDate.toDisplayFormat());
                            //Added by A-5265 for ICRD-47486 ends

                            uldMovementVOs.add(movementVO);

                            try {
                                log
                                        .log(Log.INFO,
                                                "---------Saving ULD Movements--------");
                                saveULDMovement(ulds, uldMovementVOs);
                            } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                                log
                                        .log(Log.INFO,
                                                "%%%%%%%%%%%%%  wil never throw this exception");
                            }
                        }
                        // added by a-3278 for bug 45844 on 23Apr09
                        // Audit triggered while updating the InTrasitStatus
                        ULDAuditVO uldAuditVO = new ULDAuditVO(
                                ULDFlightMessageReconcileVO.MODULE,
                                ULDFlightMessageReconcileVO.SUBMODULE,
                                ULDFlightMessageReconcileVO.ENTITY);

                        uldAuditVO.setActionCode(UPDATE_ULD);

                        uldAuditVO.setAuditRemarks("");
                        StringBuilder additionalInfo = new StringBuilder();

                        uldAuditVO.setCompanyCode(reconcileVO.getCompanyCode());
                        uldAuditVO
                                .setUldNumber(uLDFlightMessageReconcileDetailsVO
                                        .getUldNumber());

                        String airportCode = logonAttributes.getAirportCode();

                        uldAuditVO.setTxnTime(new LocalDate(airportCode,
                                Location.ARP, true).toGMTDate());

                        uldAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                                Location.ARP, true));
                        uldAuditVO.setAuditRemarks("");
                        uldAuditVO.setUserId(reconcileVO.getLastUpdatedUser());

                        additionalInfo.append("Airline - ");
                        additionalInfo.append(uld
                                .getOperationalAirlineIdentifier());

                        additionalInfo.append(",");
                        additionalInfo.append("Current Station - ");
                        additionalInfo.append(uld.getCurrentStation());

                        additionalInfo.append(",");
                        additionalInfo.append("Transit Status - ");
                        additionalInfo.append(uld.getTransitStatus());

                        additionalInfo.append(",");
                        additionalInfo.append("Flight Details - ");
                        additionalInfo.append(uld.getFlightInfo());

                        uldAuditVO.setAdditionalInformation(additionalInfo
                                .toString());
                        log
                                .log(
                                        Log.FINE,
                                        "---------setting uldAuditVO.getAdditionalInformation()------*****************",
                                        uldAuditVO
                                                        .getAdditionalInformation());
                        AuditUtils.performAudit(uldAuditVO);

                        log
                                .exiting(
                                        "performAuditForTransitStatusUpdation",
										"...Finished audit for performAuditForTransitStatusUpdation");
						// Audit end
						// added by a-3278 for bug 45844 on 23Apr09
					}
				} catch (FinderException e) {
					log.log(Log.FINE, "Inside Finder Exception");
					// throw new SystemException(e.getErrorCode(),e);
				}
			}
		}

		log.exiting("ULDController", "markULDMovementsForUCM");
	}

	/**
	 * @author A-2667 A private method called from processUCMMessage. This is
	 *         used for validating UCM and inserting reconcile details into
	 *         ULDFLTMSGREC.
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 *             method changed allover by nisha for QF CR 1013
	 */
    private  Collection<ErrorVO> saveProcessedUCM(
            Collection<ULDFlightMessageReconcileVO> reconcileVOs)
            throws SystemException, RemoteException,
            UCMInExistsForStationException, CurrencyConversionException,
            DimensionConversionException, MessageConfigException,
            AgreementDoesNotExistsException, ULDDefaultsBusinessException {
    	// Added for ICRD-262166
    	 Collection<ErrorVO> validationErrors=null;
        TransactionListVO transactionListVO = null;
        HashMap<String,Collection<ULDTransactionDetailsVO>> transactionMap = new HashMap<String,Collection<ULDTransactionDetailsVO>>();
        //TransactionListVO transListLoanVO = null;
		// Changed for Bug Fix on 01Dec08
        //TransactionListVO transListBorrowVO = null;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        //Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
        //Collection<ULDTransactionDetailsVO> uldTxnVOsforUCM = new ArrayList<ULDTransactionDetailsVO>();
        //Added by A-7359 for ICRD-220123 starts here
        Collection<String> parCodes=new ArrayList<String>();
        parCodes.add(ULD_STK_UPDATE_FOR_OWN);
        parCodes.add(ULD_STK_UPDATE_FOR_OAL);
        String parameter=null;
        Map<String,String> parameterVal=null;
        Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
        try {
            parameterVal=(HashMap<String, String>) new SharedDefaultsProxy().findSystemParameterByCodes(parCodes);
        } catch (ProxyException proxyException) {
            throw new SystemException(proxyException.getMessage());
        }
        //Added by A-7359 for ICRD-220123 ends here
		log.log(Log.FINE, "reconcileVOs----------->>", reconcileVOs.size());
		if (reconcileVOs != null && reconcileVOs.size() > 0) {
            log.entering("ULDController", "saveProcessedUCM---------------------"
                    + reconcileVOs);
			for (ULDFlightMessageReconcileVO reconcileVO : reconcileVOs) {
				LocalDate flightAtd = reconcileVO.getActualDate();
                if (reconcileVO.getReconcileDetailsVOs() != null
                        && reconcileVO.getReconcileDetailsVOs().size() > 0) {
                    if (ULDFlightMessageReconcileVO.OPERATION_FLAG_INSERT
                            .equals(reconcileVO.getOperationFlag())) {
                        ULDFlightMessageReconcileVO messageVO = null;
                        log.log(Log.INFO,
                                "%%%%%%%%%%  toUCMValidator   %%%%%%%%%%%%%%%",
                                reconcileVO);
                        //Wet Leased check
                        FlightDetailsVO fltDtlsVO = new FlightDetailsVO();
                        fltDtlsVO.setFlightNumber(reconcileVO.getFlightNumber());
                        fltDtlsVO.setFlightCarrierIdentifier(reconcileVO.getFlightCarrierIdentifier());
                        fltDtlsVO.setCompanyCode(reconcileVO.getCompanyCode());
                        fltDtlsVO.setFlightDate(reconcileVO.getFlightDate());
                        boolean isWetLeasedflt = isWetLeasedFlt(fltDtlsVO);
                        //reconcileVO.setWetLeasedFlight(isWetLeasedflt);
                        for (ULDFlightMessageReconcileDetailsVO reconcileDetailsVO :
                            reconcileVO.getReconcileDetailsVOs()) {
                            reconcileDetailsVO.setWetLeasedFlight(isWetLeasedflt);
                        }
						// UCM Validations
						messageVO = new UCMValidator().validateUCM(reconcileVO);
                        //Added by A-7359 for ICRD-220123 starts here
                        if(messageVO.getErrorCollection()!=null&&messageVO.getErrorCollection().size()>0){
                            Map<String,Collection<String>> error=messageVO.getErrorCollection();
                            Collection<String> errorSet= new ArrayList<String>();
                            for(String key : error.keySet()){
                                errorSet= error.get(key);
                                int index1=0;
                                StringBuilder uldsDoesNotExistsStrBlder=null;
                                String uldsDoesNotExists = null;
                                  if(errorSet!=null&&errorSet.size()>0){
                                      for(String uldNumber:errorSet){
                                          index1++;
                                            log.log(Log.INFO,"ErrorCode------------>ULD not in system");
                                            if (index1 == 1) {
                                                uldsDoesNotExistsStrBlder = new StringBuilder()
                                                        .append("The ULD(s) ")
                                                        .append(uldNumber);
                                            } else {
                                                uldsDoesNotExistsStrBlder = uldsDoesNotExistsStrBlder
                                                        .append(",")
                                                        .append(uldNumber);
                                            }
                                      }
                                        if (uldsDoesNotExistsStrBlder != null) {
                                            uldsDoesNotExists = uldsDoesNotExistsStrBlder
                                                    .append(
                                                            " does not exist in the system")
                                                    .toString();
                                        }
                                log.log(Log.INFO," ERRORS CREATED");
                                errors.add(new ErrorVO(key,new Object[]{ uldsDoesNotExists }));
                            }
                        }
                            if(errors.size()>0){
                                log.log(Log.INFO, "ERROR VOS THROWN ");
                                MessageConfigException msgconfigexcptn= new MessageConfigException();
                                msgconfigexcptn.addErrors(errors);
                                throw msgconfigexcptn;
                            }
                        }
                        //Added by A-7359 for ICRD-220123 ends here
						// added by a-3045 for bug 41213 on 22Mar09 starts
						// Constructing a string which consists of all the QF
						// ulds which are not in the system , but mentioned in
						// message.
						StringBuilder uldsDoesNotExistsStrBlder = null;
                        StringBuilder uldsDoesNotExistsStrBlderForOAL = null;
                        String uldsDoesNotExists = null;
                        String uldsDoesNotExistsForOAL = null;
                        int index,index1;
                        index=index1=0;
                        if (messageVO != null
                                && messageVO.getReconcileDetailsVOs() != null) {
                        	// Added for ICRD-262166
                        	Collection<ULDFlightMessageReconcileDetailsVO> volistToRemove= new ArrayList<ULDFlightMessageReconcileDetailsVO>();
                            for (ULDFlightMessageReconcileDetailsVO detVO : messageVO
                                    .getReconcileDetailsVOs()) {
								log.log(Log.INFO, "detVO------------>", detVO);
								if (E_THREE.equals(detVO.getErrorCode())) {
									AirlineValidationVO airlineValidationVO = null;
									try {
                                        airlineValidationVO = new SharedAirlineProxy()
                                                .findAirline(
                                                        detVO.getCompanyCode(),
                                                        logonAttributes
                                                                .getOwnAirlineIdentifier());
                                    } catch (ProxyException e) {
                                        // proxy exception
                                    }
                                    String airlineCode = airlineValidationVO
                                            .getAlphaCode();
                                    //Added by A-7359 for ICRD-220123 starts here
                                    String arldtl=findAirlineIdentifier(detVO);
                                    String[] uldAirlineCodeArray = null;
                                    int uldArlIdr = 0;
                                    String uldAirlineCode = null;
                                    uldAirlineCodeArray=findULDAirlineCode(arldtl);
                                    if(uldAirlineCodeArray!=null&&uldAirlineCodeArray.length>0){
                                        uldAirlineCode=uldAirlineCodeArray[0];
                                        uldArlIdr = Integer.parseInt(uldAirlineCodeArray[1]);
                                    }

                                    log.log(Log.INFO,
                                            "uldAirlineCode------------>",
                                            uldAirlineCode);
                                    log.log(Log.INFO,
                                            "airlineCode------------>",
                                            airlineCode);
                                    // Modified for ICRD-262166
                                    if (Objects.equals(airlineCode, uldAirlineCode)) {
                                        index++;


                                        if(!(parameterVal != null && FLAG_YES.equalsIgnoreCase(parameterVal.get(ULD_STK_UPDATE_FOR_OWN)))){
                                        log.log(Log.INFO,"ErrorCode------------>E3-ULD not in system");
                                        if (index == 1) {
                                            uldsDoesNotExistsStrBlder = new StringBuilder()
                                                    .append("The ULD(s) ")
                                                    .append(
                                                            detVO
                                                                    .getUldNumber());
                                        } else {
                                            uldsDoesNotExistsStrBlder = uldsDoesNotExistsStrBlder
                                                    .append(",")
                                                    .append(
                                                            detVO
                                                                    .getUldNumber());
                                        }
                                        // Modified for ICRD-262166
                                        //To remove VOs having E3 error from the list going for save
                                        volistToRemove.add(detVO);
                                    }

                                    }else if((Objects.equals(detVO
                                            .getCarrierCode(), uldAirlineCode)
                                            && !(Objects.equals(detVO
                                                    .getCarrierCode(), airlineCode)))||(!(Objects.equals(detVO
                                                            .getCarrierCode(), uldAirlineCode)))){


                                        index1++;
                                        String canCreateULD = FLAG_NO;

                                        if(parameterVal != null){

                                        canCreateULD =  canCreateOALStockForULD(detVO.getFlightNumber(),detVO
                                                .getFlightCarrierIdentifier(),(int)detVO
                                                .getFlightSequenceNumber(),parameterVal);

                                        }
                                        if(!(FLAG_YES.equals(canCreateULD))){

                                            log.log(Log.INFO,"ErrorCode------------>E3-ULD not in system");
                                            if (index1 == 1) {
                                                uldsDoesNotExistsStrBlderForOAL = new StringBuilder()
                                                        .append("The ULD(s) ")
                                                        .append(
                                                                detVO
                                                                        .getUldNumber());
                                            } else {
                                                uldsDoesNotExistsStrBlderForOAL = uldsDoesNotExistsStrBlderForOAL
                                                        .append(",")
                                                        .append(
                                                                detVO
                                                                        .getUldNumber());
                                            }
                                            
                                            // Modified for ICRD-262166
                                           //To remove VOs having E3 error from the list going for save
                                           volistToRemove.add(detVO);
                                        }


                                    }
                                }
                            }
                            /*
                             * Modified for ICRD-262166
                             * E3- Not present in system Error will S
                             */
                            if (uldsDoesNotExistsStrBlder != null || uldsDoesNotExistsStrBlderForOAL != null) {
                            	//Modified for ICRD-262166
                            	if(validationErrors==null)
                            			validationErrors=new ArrayList<ErrorVO>();
                            if (uldsDoesNotExistsStrBlder != null) {
                                uldsDoesNotExists = uldsDoesNotExistsStrBlder
                                        .append(
                                                " does not exist in the system")
                                        .toString();
                                log.log(Log.INFO," ERRORS CREATED");
                            		//Added for ICRD-262166
                            		validationErrors.add(new ErrorVO(MessageConfigException.ULD_NOT_IN_STOCK,new Object[]{ uldsDoesNotExists }));
                            }
                            if (uldsDoesNotExistsStrBlderForOAL != null) {
                                uldsDoesNotExistsForOAL = uldsDoesNotExistsStrBlderForOAL
                                        .append(
                                                " does not exist in the system")
                                        .toString();
                                log.log(Log.INFO," ERRORS CREATED");
                            		//Added for ICRD-262166
                            		validationErrors.add(new ErrorVO(MessageConfigException.OAL_ULD_NOT_IN_STOCK,new Object[]{ uldsDoesNotExistsForOAL }));
                            	}
                            	/*
                            	 * Added for ICRD-262166
                            	 * Remove-ulds not present in system and saving rest of the ulds
                            	 * if cancreate is N
                            	 */
                            	if(volistToRemove.size()>0){
                            		messageVO.getReconcileDetailsVOs().removeAll(volistToRemove);
                            		/*
                            		 * If All VOs are removed, then throw Execption to Make PE
                            		 * Added as part of ICRD-262160
                            		 */
                            		if(messageVO.getReconcileDetailsVOs().size()==0){
                            			  throw new MessageConfigException(
                                                  MessageConfigException.ALL_INVALID_ULDS);
                            		}
                            	}
                            	
                            	/*if(errors.size()>0){
                                log.log(Log.INFO, "ERROR VOS THROWN ");
                                msgconfigexcptn.addErrors(errors);
                                throw msgconfigexcptn;*/
                            }//Added by A-7359 for ICRD-220123 ends here
						}
						// added by a-3045 for bug 41213 on 22Mar09 ends
						// Insertion into ULDFLTMSGREC
						messageVO.setMessageSendFlag(UCM_PROCESSED_AND_SAVED);
						// added by nisha on 06Mar08 for bugfix starts
                        if (messageVO != null
                                && messageVO.getReconcileDetailsVOs() != null) {
                            log
                                    .log(
                                            Log.INFO,
                                            "messageVO.getReconcileDetailsVOs()=========>>",
                                            messageVO
                                                    .getReconcileDetailsVOs());
                            for (ULDFlightMessageReconcileDetailsVO detVO : messageVO
                                    .getReconcileDetailsVOs()) {
								log.log(Log.INFO, "errorCode", detVO.getErrorCode());
                                if (UCM_OUT.equalsIgnoreCase(detVO
                                        .getMessageType())) {
                                    if (detVO.getContent() == null
                                            || detVO.getContent().trim()
                                                    .length() == 0) {
										detVO.setContent(CONTENT_EMPTY);
									}
								}
								log.log(Log.INFO, "reconcile det vo", detVO);
								ULD uld = null;
								if (E_ONE.equals(detVO.getErrorCode())) {
                                    log
                                            .log(Log.INFO,
                                                    "ErrorCode--->E1-Duplicate UCM OUT");
								} else if (E_TWO.equals(detVO.getErrorCode())) {
                                    log.log(Log.INFO,
                                            "ErrorCode--->E2-Duplicate UCM IN");
								} else if (E_THREE.equals(detVO.getErrorCode())) {
                                    log
                                            .log(Log.INFO,
                                                    "ErrorCode--->E3-ULD not in system");
                                    AirlineValidationVO airlineValidationVO = null;
                                    try {
                                        airlineValidationVO = new SharedAirlineProxy()
                                                .findAirline(
                                                        detVO.getCompanyCode(),
                                                        logonAttributes
                                                                .getOwnAirlineIdentifier());
                                    } catch (ProxyException e) {
                                        // proxy exception
                                    }
                                    // own ariline code
                                    String airlineCode = airlineValidationVO
                                            .getAlphaCode();
                                    log.log(Log.FINE,
                                            "airlineCode-------------------->",
                                            airlineCode);
                                    int airlineCodeSize = airlineCode.length();
                                    log.log(Log.FINE,"airlineCodeSize------------------->",airlineCodeSize);
                                    //Added by A-7359 for ICRD-220123 starts here
                                    String arldtl=findAirlineIdentifier(detVO);
                                    String[] uldAirlineCodeArray = null;

                                    int uldArlIdr = 0;
                                    String uldAirlineCode = null;
                                    uldAirlineCodeArray=findULDAirlineCode(arldtl);
                                    if(uldAirlineCodeArray!=null&&uldAirlineCodeArray.length>0){
                                        uldAirlineCode=uldAirlineCodeArray[0];
                                        uldArlIdr = Integer.parseInt(uldAirlineCodeArray[1]);
                                    }


                                    // Added as part of CR ICRD-192322

                                    if(isWetLeasedflt){
                                        detVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
                                        //Modified  by A-7359 as part of ICRD-243744
                                        detVO.setFlightCarrierIdentifier(logonAttributes.getOwnAirlineIdentifier());
                                    }
                                    // Added as part of CR ICRD-192322 ends
                                    String carrierCode = detVO.getCarrierCode();
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "\n airlineCode-------------------->",
                                                    airlineCode);
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "\n uldAirlineCode-------------------->",
                                                    uldAirlineCode);
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "\n carrierCode-------------------->",
                                                    carrierCode);
									// need to save a new ULD id uldairline is
									// same as our ailrine else borrow
                                    if (Objects.equals(uldAirlineCode,airlineCode)) {
										/*
										 * commented the part of autocreating
										 * the ULD by a-3278 on 22Dec08 as per
										 * the CR QF1178 autocreation of uld
										 * should not happen,instead the message
										 * should be processed with errors
										 */
            //A-7359 starts here
                                        if (parameterVal != null &&FLAG_YES.equalsIgnoreCase(parameterVal.get(ULD_STK_UPDATE_FOR_OWN))) {
                                                // New ULD Creation
                                            createULDforUCM(detVO,uldArlIdr,uldAirlineCode,isWetLeasedflt,transactionMap);
                                            } else {
                                        throw new MessageConfigException(
                                                MessageConfigException.ULD_NOT_IN_STOCK);
                                            }

                                    }

									/*
									 * BUG_101302_SowmyaK_08Oct10 if uld is of
									 * another airline and flight is the same;
									 * uld is to be created into the system
									 */
                                    else if (Objects.equals(uldAirlineCode,detVO
                                            .getCarrierCode())
                                            && !(Objects.equals(airlineCode,detVO
                                                    .getCarrierCode()))) {





                                        String canCreateULD = FLAG_NO;

                                        if(parameterVal != null){

                                        canCreateULD =  canCreateOALStockForULD(detVO.getFlightNumber(),detVO
                                                .getFlightCarrierIdentifier(),(int)detVO
                                                .getFlightSequenceNumber(),parameterVal);


                                        }
                                        if(FLAG_YES.equals(canCreateULD)){
                                            //createNewULD
                                            createULDforUCM(detVO,uldArlIdr,uldAirlineCode,isWetLeasedflt,transactionMap);


                                        } else {
                                            throw new MessageConfigException(
                                                    MessageConfigException.OAL_ULD_NOT_IN_STOCK);
                                        }




                                    }//BUG_101302_SowmyaK_08Oct10 ends


                                    /*
                                     * if uld is of another airline and flight is the different; uld is to be created and loaned
                                    */
                                    else if(!Objects.equals(uldAirlineCode,detVO.getCarrierCode())){



                                        String canCreateULD = FLAG_NO;

                                        if(parameterVal != null){
                                        canCreateULD =  canCreateOALStockForULD(detVO.getFlightNumber(),detVO
                                                .getFlightCarrierIdentifier(),(int)detVO
                                                .getFlightSequenceNumber(),parameterVal);
                                        }
                                        if(FLAG_YES.equals(canCreateULD)){
                                            //createNewULD
                                            createULDforUCM(detVO,uldArlIdr,uldAirlineCode,isWetLeasedflt,transactionMap);


                                        }else{
                                            throw new MessageConfigException(
                                                    MessageConfigException.OAL_ULD_NOT_IN_STOCK);
                                        }




                                    }
								} else if (E_FOUR.equals(detVO.getErrorCode())) {
                                    log.log(Log.INFO,
                                            "ErrorCode--->E4-ULD is non-opr");
                                    try {
                                        uld = ULD.find(detVO.getCompanyCode(),
                                                detVO.getUldNumber());
                                    } catch (FinderException finderException) {
                                        log.log(Log.FINE,
                                                "Inside Finder Exception");
                                    }
                                    if (uld != null && (!"N".equals((uld.getOverallStatus()))
                                    		&& !"L".equals((uld.getOverallStatus())))) {
                                        uld.setOverallStatus("O");
                                    }
                                } else if (E_FIVE.equals(detVO.getErrorCode())
                                        || E_SIX.equals(detVO.getErrorCode())) {
                                    log
                                            .log(Log.INFO,
                                                    "ErrorCode--->E5 or E6-ULD not station stock and intransit");
									ULD currentULD = null;
									try {
										currentULD = ULD.find(detVO.getCompanyCode(), detVO.getUldNumber());
                                    } catch(FinderException finderException) {
										log.log(Log.INFO, "Finder exception");
									}
									ULDMovementVO uldMovementVo = new ULDMovementVO();
									Collection<ULDMovementVO> uldMovementVos = new ArrayList<ULDMovementVO>();
									ArrayList<String> uldnos = new ArrayList<String>();
									if (currentULD != null) {
                                        LocalDate lastMovementDate = new LocalDate(currentULD.getCurrentStation(), Location.ARP,
                                                currentULD.getLastMovementDate(), true);
                                        if (lastMovementDate != null && flightAtd != null &&
                                                lastMovementDate.toGMTDate().before(flightAtd.toGMTDate())) {
											String pol = currentULD.getCurrentStation();
									uldnos.add(detVO.getUldNumber());
                                    // added by nisha for bufix on 18Jun08
                                    // starts
                                    uldMovementVo.setCompanyCode(detVO
                                            .getCompanyCode());
                                    uldMovementVo.setCurrentStation(detVO
                                            .getAirportCode());
									uldMovementVo.setUpdateCurrentStation(true);
                                    uldMovementVo
                                            .setLastUpdatedTime(new LocalDate(
                                                    logonAttributes
                                                            .getAirportCode(),
                                                    Location.ARP, true));
                                    uldMovementVo
                                            .setLastUpdatedUser(logonAttributes
                                                    .getUserId());
									// ends
									uldMovementVo.setDummyMovement(true);
                                    uldMovementVo
                                            .setContent(detVO.getContent());
									uldMovementVo.setPointOfLading(pol);
                                    uldMovementVo.setPointOfUnLading(detVO
                                            .getAirportCode());

                                    //Added by A-5265 for ICRD-47486 starts
                                    LocalDate remarksDate = new LocalDate(
                                            detVO.getAirportCode(), Location.ARP, true);
                                    uldMovementVo.setRemark(RECEIVED_UCM_MOVEMENT_REMARKS
                                            + remarksDate.toDisplayFormat());
                                    //Added by A-5265 for ICRD-47486 ends
									
									uldMovementVos.add(uldMovementVo);
									try {
										saveULDMovement(uldnos, uldMovementVos);
									} catch (ULDDoesNotExistsException e) {

											}
										}
									}
									if (E_FIVE.equals(detVO.getErrorCode())) {
										try {
                                            uld = ULD.find(detVO
                                                    .getCompanyCode(), detVO
                                                    .getUldNumber());
                                        } catch (FinderException finderException) {
                                            log.log(Log.FINE,
                                                    "Inside Finder Exception");
										}
										if (uld != null) {
											uld.setTransitStatus("N");
										}
									}
								} else if (E_SEVEN.equals(detVO.getErrorCode())) {
                                    /* Commented by A-3415 for ICRD-114538
                                    log
                                            .log(Log.INFO,
                                                    "ErrorCode--->E7-ULD not in airline stock");
                                    int oprAirlineForULD = 0;
                                    oprAirlineForULD = findOperationalAirlineForULD(
                                            detVO.getCompanyCode(), detVO
                                                    .getUldNumber());
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "detVO.getUldNumber()-------------------->",
                                                    detVO.getUldNumber());
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "detVO.getCompanyCode()-------------------->",
                                                    detVO.getCompanyCode());
                                    log.log(Log.FINE,
                                            "oprAirline-------------------->",
                                            oprAirlineForULD);
                                    AirlineValidationVO airlineValidationVO = null;
                                    log
                                            .log(
                                                    Log.INFO,
                                                    "^^^^logonAttributes.getOwnAirlineCode()",
                                                    logonAttributes
                                                            .getOwnAirlineCode());
                                    try {
                                        airlineValidationVO = new SharedAirlineProxy()
                                                .findAirline(
                                                        detVO.getCompanyCode(),
                                                        logonAttributes
                                                                .getOwnAirlineIdentifier());
                                    } catch (ProxyException e) {
                                        // proxy exception
                                    }
                                    // own ariline code
                                    String airlineCode = airlineValidationVO
                                            .getAlphaCode();
                                    log.log(Log.FINE,
                                            "airlineCode-------------------->",
                                            airlineCode);
                                    int airlineCodeSize = airlineCode.length();
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "airlineCodeSize------------------->",
                                                    airlineCodeSize);
                                    int length = detVO.getUldNumber().length();
                                    String twoalphacode = detVO.getUldNumber()
                                            .substring(length - 2);
                                    String threealphacode = detVO
                                            .getUldNumber().substring(
                                                    length - 3);
                                    String uldAirlineCode = null;
                                    //Commented as part of ICRD-21184
//                                  String arldtl = ULD.findOwnerCode(detVO
//                                          .getCompanyCode(), twoalphacode,
//                                          threealphacode);

                                    //Added as part of ICRD-21184
                                    String arldtl = findOwnerCode(detVO.getCompanyCode(), twoalphacode, threealphacode);

                                    //Null Check added as part of ICRD-21184
                                    if(arldtl != null) {
                                        String arldtlArray[] = arldtl.split("~");
                                        if ("2".equals(arldtlArray[0])) {
                                            uldAirlineCode = twoalphacode;
                                        } else {
                                            uldAirlineCode = threealphacode;
                                        }
                                    }
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "uldAirlineCode-------------------->",
                                                    uldAirlineCode);
                                    log.log(Log.FINE,
                                            "airlineCode-------------------->",
                                            airlineCode);
                                    airlineValidationVO = null;
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "logonAttributes.getOwnAirlineIdentifier()--------------->",
                                                    logonAttributes
                                                                    .getOwnAirlineIdentifier());
                                    try {
                                        airlineValidationVO = new SharedAirlineProxy()
                                                .findAirline(detVO
                                                        .getCompanyCode(),
                                                        oprAirlineForULD);
                                    } catch (ProxyException e) {
                                    }
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "\n **************airlineValidationVO-------------------->",
                                                    airlineValidationVO);
                                    String oprAirlineCode = airlineValidationVO
                                            .getAlphaCode();
                                    String carrierCode = detVO.getCarrierCode();
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "\n airlineCode-------------------->",
                                                    airlineCode);
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "\n uldAirlineCode-------------------->",
                                                    uldAirlineCode);
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "\n oprAirlineCode-------------------->",
                                                    oprAirlineCode);
                                    log
                                            .log(
                                                    Log.FINE,
                                                    "\n carrierCode-------------------->",
                                                    carrierCode);
                                    // CASE 1
                                    if (airlineCode.equals(carrierCode)) {
                                        log
                                                .log(Log.FINE,
                                                        "saving a return loan or a borrow transaction");

                                        transactionListVO = new TransactionListVO();
                                        TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
                                        transactionFilterVO
                                                .setCompanyCode(detVO
                                                        .getCompanyCode());
                                        transactionFilterVO
                                                .setTransactionType(ALL);
                                        transactionFilterVO.setUldNumber(detVO
                                                .getUldNumber());
                                        transactionFilterVO
                                                .setTransactionStatus(TO_BE_RETURNED);
                                        transactionFilterVO.setPageNumber(1);
                                        transactionListVO = listULDTransactionDetails(transactionFilterVO);
                                        boolean isLoan = false;
                                        if (transactionListVO
                                                .getTransactionDetailsPage() != null
                                                && transactionListVO
                                                        .getTransactionDetailsPage()
                                                        .size() > 0) {
                                            ArrayList<ULDTransactionDetailsVO> transactioncoll = new ArrayList<ULDTransactionDetailsVO>(
                                                    transactionListVO
                                                            .getTransactionDetailsPage());
                                            for (ULDTransactionDetailsVO uldTransactionDetailsVO : transactioncoll) {
                                                // either to party same..or txn
                                                // typ is agent/others
                                                if ((LOANED_TRANSACTION)
                                                        .equals(uldTransactionDetailsVO
                                                                .getTransactionType())
                                                        && (carrierCode)
                                                                .equals(uldTransactionDetailsVO
                                                                        .getFromPartyCode())
                                                        && ((oprAirlineCode)
                                                                .equals(uldTransactionDetailsVO
                                                                        .getToPartyCode()) || !PARTYTYPE_AIRLINE
                                                                .equals(uldTransactionDetailsVO
                                                                        .getPartyType()))) {
                                                    // This is a RETUN LOAN.
                                                    isLoan = true;
                                                    if (transListLoanVO == null) {
                                                        transListLoanVO = new TransactionListVO();
                                                        transListLoanVO
                                                                .setUldTransactionsDetails(new ArrayList<ULDTransactionDetailsVO>());
                                                    }
                                                    // Only airlines CRN need to
                                                    // be generated
                                                    if (PARTYTYPE_AIRLINE
                                                            .equals(uldTransactionDetailsVO
                                                                    .getPartyType())) {

                                                         * modified by a-3278
                                                         * for 28897 on 06Jan09
                                                         * a new CRN is
                                                         * maintained to save
                                                         * the latest and the
                                                         * old CRN seperately in
                                                         * case of return the
                                                         * crn is updated in the
                                                         * returnCRN field


                                                         * uldTransactionDetailsVO.setControlReceiptNumber(new
														 * StringBuilder(
														 * String.valueOf(uldTransactionDetailsVO
                                                         * .getToPartyIdentifier()).substring(1,4)).append("-").append("00000000").toString());

                                                        uldTransactionDetailsVO
                                                                .setReturnCRN(new StringBuilder(
                                                                        String
                                                                                .valueOf(
                                                                                        uldTransactionDetailsVO
                                                                                                .getToPartyIdentifier())
                                                                                .substring(
                                                                                        1,
                                                                                        4))
                                                                        .append(
                                                                                "-")
                                                                        .append(
                                                                                "00000000")
                                                                        .toString());
                                                    }
                                                    // a-3278 ends
                                                    uldTransactionDetailsVO
                                                            .setReturnDate(detVO
                                                                    .getFlightDate());
                                                    uldTransactionDetailsVO
                                                            .setCurrOwnerCode(uldTransactionDetailsVO
                                                                    .getFromPartyIdentifier());
                                                    // To be reviewed Since The retun Date
                                                    // is set manually , then
                                                    // demmurrage calculated
                                                    // again.

                                                    uldTransactionDetailsVO
                                                            .setReturnStationCode(detVO
                                                                    .getAirportCode());
                                                    transListLoanVO
                                                            .setTransactionType(LOANED_TRANSACTION);
                                                    transListLoanVO
                                                            .getUldTransactionsDetails()
                                                            .add(
                                                                    uldTransactionDetailsVO);
                                                    break;
                                                }
                                            }
                                        }
                                        if (!(isLoan)) {
                                            // BORROW SAVING
                                            ULDTransactionDetailsVO vo = new ULDTransactionDetailsVO();
                                            constructULDTransactionVOforUCM(vo,
                                                    detVO);

                                            vo.setFromPartyCode(oprAirlineCode);
                                            vo
                                                    .setFromPartyIdentifier(oprAirlineForULD);
                                            vo
                                                    .setCurrOwnerCode(oprAirlineForULD);
                                            vo.setToPartyCode(carrierCode);
                                            vo
                                                    .setToPartyIdentifier(detVO
                                                            .getFlightCarrierIdentifier());
                                            String crn = null;
                                            if (airlineCode
                                                    .equals(oprAirlineCode)) {
                                                String ctrlRcptNo = findCRNForULDTransaction(
                                                        logonAttributes
                                                                .getCompanyCode(),
                                                        oprAirlineCode);
                                                //Changed for ICRD-6983 by A-4803 on 21Sep11
                                                crn = new StringBuilder()
                                                        .append(
                                                                ctrlRcptNo
                                                                        .substring(
                                                                                0,
                                                                                4))
                                                        .append("0")
                                                        .append(
                                                                ctrlRcptNo
                                                                        .substring(
                                                                                4,
                                                                                11))
                                                        .toString();
                                            } else {
                                                //Commented as part of ICRD 21184
                                                //String ctrlRcptNo = ULD
                                                //      .findAirlineCode(
                                                //              logonAttributes
                                                //                      .getCompanyCode(),
                                                //              oprAirlineCode);

                                                //Added as part of ICRD 21184 starts
                                                String ctrlRcptNo=null;
                                                try {
                                                    ctrlRcptNo = new SharedAirlineProxy().validateAlphaCode(logonAttributes.getCompanyCode(),uldAirlineCode).getNumericCode();
                                                }catch(ProxyException pe){
                                                    log.log(Log.SEVERE, " Airline ProxyException" );
                                                }
                                                log.log(Log.INFO, "CRN Prefix",
                                                        ctrlRcptNo);
                                                //Changed for ICRD-6983 by A-4803 on 21Sep11
                                                crn = new StringBuilder()
                                                        .append(ctrlRcptNo)
                                                        .append("-").append(
                                                                "00000001")
                                                        .toString();
                                            }
                                            vo.setControlReceiptNumber(crn);// need
                                            // to
                                            // split
                                            // and
                                            // chg
                                            vo
                                                    .setReturnPartyCode(oprAirlineCode);
                                            vo
                                                    .setTransactionType(BORROW_TRANSACTION);
                                            log.log(Log.INFO,
                                                    "SAVE A BORROW TXN!!!!!",
                                                    vo);
                                            uldTransactionDetailsVOs.add(vo);

                                        }
                                    }
                                    // CASE 2
                                    if (airlineCode.equals(oprAirlineCode)) {
                                        if (uldAirlineCode.equals(carrierCode)) {
                                            // RETURN BORROW
                                            log
                                                    .log(Log.FINE,
                                                            "\n\n\n\n\n\n\n*********CASE 2 RECONCILE TO RETURN (BORROW)/loan**********");
                                            transactionListVO = new TransactionListVO();
                                            TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
                                            transactionFilterVO
                                                    .setCompanyCode(detVO
                                                            .getCompanyCode());
                                            transactionFilterVO
                                                    .setTransactionType(ALL);
                                            transactionFilterVO
                                                    .setUldNumber(detVO
                                                            .getUldNumber());
                                            transactionFilterVO
                                                    .setTransactionStatus(TO_BE_RETURNED);
                                            transactionFilterVO
                                                    .setPageNumber(1);
                                            transactionListVO = listULDTransactionDetails(transactionFilterVO);
                                            if (transactionListVO
                                                    .getTransactionDetailsPage() != null
                                                    && transactionListVO
                                                            .getTransactionDetailsPage()
                                                            .size() > 0) {
                                                ArrayList<ULDTransactionDetailsVO> coll = new ArrayList<ULDTransactionDetailsVO>(
                                                        transactionListVO
                                                                .getTransactionDetailsPage());
                                                for (ULDTransactionDetailsVO uldTransactionDetailsVO : coll) {
                                                    if ((BORROW_TRANSACTION)
                                                            .equals(uldTransactionDetailsVO
                                                                    .getTransactionType())) {
                                                        if (transListBorrowVO == null) {
                                                            transListBorrowVO = new TransactionListVO();
                                                            transListBorrowVO
                                                                    .setUldTransactionsDetails(new ArrayList<ULDTransactionDetailsVO>());
                                                        }

                                                         * modified by a-3278
                                                         * for 28897 on 06Jan09
                                                         * a new CRN is
                                                         * maintained to save
                                                         * the latest and the
                                                         * old CRN seperately in
                                                         * case of return the
                                                         * crn is updated in the
                                                         * returnCRN field


                                                         * uldTransactionDetailsVO.setControlReceiptNumber(findCRNForULDTransaction(logonAttributes
                                                         * .getCompanyCode(),uldTransactionDetailsVO.getToPartyCode()));
                                                         // Doubt
                                                        uldTransactionDetailsVO
                                                                .setReturnCRN(findCRNForULDTransaction(
                                                                        logonAttributes
                                                                                .getCompanyCode(),
                                                                        uldTransactionDetailsVO
                                                                                .getToPartyCode()));
                                                        uldTransactionDetailsVO
                                                                .setReturnDate(detVO
                                                                        .getFlightDate());

                                                        // To be reviewed Since The retun
                                                        // Date is set manually
                                                        // , then demmurrage
                                                        // calculated again.

                                                        uldTransactionDetailsVO
                                                                .setReturnStationCode(detVO
                                                                        .getAirportCode());
                                                        uldTransactionDetailsVO
                                                                .setTransactionType(BORROW_TRANSACTION);
                                                        uldTransactionDetailsVO
                                                                .setCurrOwnerCode(uldTransactionDetailsVO
                                                                        .getFromPartyIdentifier());
                                                        transListBorrowVO
                                                                .getUldTransactionsDetails()
                                                                .add(
                                                                        uldTransactionDetailsVO);
                                                        break;
                                                    }
                                                }
                                            }
                                        } else {
                                            // uld is with us....we hav to loan
                                            // to the carrier
                                            log
                                                    .log(Log.FINE,
                                                            "\n\n\n\n\n\n\n********* CASE 2 RECONCILE TO LOAN***************");
                                            ULDTransactionDetailsVO vo = new ULDTransactionDetailsVO();
                                            constructULDTransactionVOforUCM(vo,
                                                    detVO);

                                            vo.setFromPartyCode(airlineCode);
                                            vo
                                                    .setFromPartyIdentifier(logonAttributes
                                                            .getOwnAirlineIdentifier());
                                            vo.setCurrOwnerCode(logonAttributes
                                                    .getOwnAirlineIdentifier());
                                            vo.setToPartyCode(carrierCode);
                                            vo
                                                    .setToPartyIdentifier(detVO
                                                            .getFlightCarrierIdentifier());
                                            String ctrlRcptNo = findCRNForULDTransaction(
                                                    logonAttributes
                                                            .getCompanyCode(),
                                                    airlineCode);
                                            //Changed for ICRD-6983 by A-4803 on 21Sep11
                                            String crn = new StringBuilder()
                                                    .append(
                                                            ctrlRcptNo
                                                                    .substring(
                                                                            0,
                                                                            4))
                                                    .append("0")
                                                    .append(
                                                            ctrlRcptNo
                                                                    .substring(
                                                                            4,
                                                                            11))
                                                    .toString();
                                            vo.setControlReceiptNumber(crn);// need
                                            // to
                                            // split
                                            // and
                                            // chg
                                            vo
                                                    .setReturnPartyCode(oprAirlineCode);
                                            vo
                                                    .setTransactionType(LOANED_TRANSACTION);
                                            log.log(Log.INFO,
                                                    "SAVE A LOAN TXN!!!!!", vo);
                                            uldTransactionDetailsVOs.add(vo);
                                        }
                                    }
                                    // CASE 4
                                    if (!airlineCode.equals(oprAirlineCode)
                                            && !oprAirlineCode
                                                    .equals(carrierCode)
                                            && !airlineCode.equals(carrierCode)) {

                                        log
                                                .log(Log.FINE,
                                                        "\n\n\n\n\n\n\n*********CASE 4 - 3 PARTY**********");

                                        if (uldAirlineCode
                                                .equals(oprAirlineCode)) {
                                            log
                                                    .log(Log.FINE,
                                                            "\n\n\n\n\n\n\n********* CASE 4 RECONCILE TO LOAN***************");
                                            // have to save loan
                                            ULDTransactionDetailsVO vo = new ULDTransactionDetailsVO();
                                            constructULDTransactionVOforUCM(vo,
                                                    detVO);

                                            vo.setFromPartyCode(oprAirlineCode);
                                            vo
                                                    .setFromPartyIdentifier(oprAirlineForULD);
                                            vo
                                                    .setCurrOwnerCode(oprAirlineForULD);
                                            vo.setToPartyCode(carrierCode);
                                            vo
                                                    .setToPartyIdentifier(detVO
                                                            .getFlightCarrierIdentifier());
                                            //Commented as part of ICRD 21184
                                            //String ctrlRcptNo = ULD
                                            //      .findAirlineCode(
                                            //              logonAttributes
                                            //                      .getCompanyCode(),
                                            //              oprAirlineCode);

                                            //Added as part of ICRD 21184 starts
                                            String ctrlRcptNo=null;
                                            try {
                                                ctrlRcptNo = new SharedAirlineProxy().validateAlphaCode(logonAttributes.getCompanyCode(),uldAirlineCode).getNumericCode();
                                            }catch(ProxyException pe){
                                                log.log(Log.SEVERE, " Airline ProxyException" );
                                            }
                                            log.log(Log.INFO, "CRN Prefix",
                                                    ctrlRcptNo);
                                            //Changed for ICRD-6983 by A-4803 on 21Sep11
                                            String crn = new StringBuilder()
                                                    .append(ctrlRcptNo).append(
                                                            "-").append(
                                                            "00000001")
                                                    .toString();
                                            vo.setControlReceiptNumber(crn);// need
                                            // to
                                            // split
                                            // and
                                            // chg
                                            vo
                                                    .setReturnPartyCode(oprAirlineCode);
                                            vo
                                                    .setTransactionType(LOANED_TRANSACTION);
                                            log.log(Log.INFO,
                                                    "SAVE A LOAN TXN!!!!!", vo);
                                            uldTransactionDetailsVOs.add(vo);
                                        }
                                        if (uldAirlineCode.equals(carrierCode)) {
                                            log
                                                    .log(Log.FINE,
                                                            "\n\n\n\n\n\n\n*********CASE 4 RECONCILE TO RETURN (BORROW)/loan**********");
                                            // return loan/return borrow
                                            transactionListVO = new TransactionListVO();
                                            TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
                                            transactionFilterVO
                                                    .setCompanyCode(detVO
                                                            .getCompanyCode());
                                            transactionFilterVO
                                                    .setTransactionType(ALL);
                                            transactionFilterVO
                                                    .setUldNumber(detVO
                                                            .getUldNumber());
                                            transactionFilterVO
                                                    .setTransactionStatus(TO_BE_RETURNED);
                                            transactionFilterVO
                                                    .setPageNumber(1);
                                            transactionListVO = listULDTransactionDetails(transactionFilterVO);
                                            if (transactionListVO
                                                    .getTransactionDetailsPage() != null
                                                    && transactionListVO
                                                            .getTransactionDetailsPage()
                                                            .size() > 0) {
                                                ArrayList<ULDTransactionDetailsVO> coll = new ArrayList<ULDTransactionDetailsVO>(
                                                        transactionListVO
                                                                .getTransactionDetailsPage());
                                                for (ULDTransactionDetailsVO uldTransactionDetailsVO : coll) {
                                                    if ((BORROW_TRANSACTION)
                                                            .equals(uldTransactionDetailsVO
                                                                    .getTransactionType())) {
                                                        if (transListBorrowVO == null) {
                                                            transListBorrowVO = new TransactionListVO();
                                                            transListBorrowVO
                                                                    .setUldTransactionsDetails(new ArrayList<ULDTransactionDetailsVO>());
                                                        }

                                                         * modified by a-3278
                                                         * for 28897 on 06Jan09
                                                         * a new CRN is
                                                         * maintained to save
                                                         * the latest and the
                                                         * old CRN seperately in
                                                         * case of return the
                                                         * crn is updated in the
                                                         * returnCRN field


                                                         * uldTransactionDetailsVO.setControlReceiptNumber(
														 * findCRNForULDTransaction(
														 * logonAttributes.getCompanyCode(),
                                                         * uldTransactionDetailsVO.getToPartyCode()));
                                                         // Doubt
                                                        uldTransactionDetailsVO
                                                                .setReturnCRN(findCRNForULDTransaction(
                                                                        logonAttributes
                                                                                .getCompanyCode(),
                                                                        uldTransactionDetailsVO
                                                                                .getToPartyCode()));
                                                        uldTransactionDetailsVO
                                                                .setReturnDate(detVO
                                                                        .getFlightDate());

                                                        // To be reviewed Since The retun
                                                        // Date is set manually
                                                        // , then demmurrage
                                                        // calculated again.

                                                        uldTransactionDetailsVO
                                                                .setReturnStationCode(detVO
                                                                        .getAirportCode());
                                                        uldTransactionDetailsVO
                                                                .setTransactionType(BORROW_TRANSACTION);
                                                        uldTransactionDetailsVO
                                                                .setCurrOwnerCode(uldTransactionDetailsVO
                                                                        .getFromPartyIdentifier());
                                                        transListBorrowVO
                                                                .getUldTransactionsDetails()
                                                                .add(
                                                                        uldTransactionDetailsVO);
                                                    } else {
                                                        if (transListLoanVO == null) {
                                                            transListLoanVO = new TransactionListVO();
                                                            transListLoanVO
                                                                    .setUldTransactionsDetails(new ArrayList<ULDTransactionDetailsVO>());
                                                        }

                                                         * modified by a-3278
                                                         * for 28897 on 06Jan09
                                                         * a new CRN is
                                                         * maintained to save
                                                         * the latest and the
                                                         * old CRN seperately in
                                                         * case of return the
                                                         * crn is updated in the
                                                         * returnCRN field


                                                         * uldTransactionDetailsVO.setControlReceiptNumber(
                                                         * new StringBuilder(
                                                         * String.valueOf(
                                                         * uldTransactionDetailsVO.getToPartyIdentifier())
                                                         * .substring(1,4)).append("-").append("00000000").toString());

                                                        uldTransactionDetailsVO
                                                                .setReturnCRN(new StringBuilder(
                                                                        String
                                                                                .valueOf(
                                                                                        uldTransactionDetailsVO
                                                                                                .getToPartyIdentifier())
                                                                                .substring(
                                                                                        1,
                                                                                        4))
                                                                        .append(
                                                                                "-")
                                                                        .append(
                                                                                "00000000")
                                                                        .toString());
                                                        uldTransactionDetailsVO
                                                                .setReturnDate(detVO
                                                                        .getFlightDate());

                                                        // To be reviewed Since The retun
                                                        // Date is set manually
                                                        // , then demmurrage
                                                        // calculated again.

                                                        uldTransactionDetailsVO
                                                                .setReturnStationCode(detVO
                                                                        .getAirportCode());
                                                        uldTransactionDetailsVO
                                                                .setCurrOwnerCode(uldTransactionDetailsVO
                                                                        .getFromPartyIdentifier());
                                                        transListLoanVO
                                                                .setTransactionType(LOANED_TRANSACTION);
                                                        transListLoanVO
                                                                .getUldTransactionsDetails()
                                                                .add(
                                                                        uldTransactionDetailsVO);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (!uldAirlineCode
                                                .equals(oprAirlineCode)
                                                && !uldAirlineCode
                                                        .equals(carrierCode)) {
                                            // RL or RB or Loan/Borrow
                                            transactionListVO = new TransactionListVO();
                                            TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
                                            transactionFilterVO
                                                    .setCompanyCode(detVO
                                                            .getCompanyCode());
                                            transactionFilterVO
                                                    .setTransactionType(ALL);
                                            transactionFilterVO
                                                    .setUldNumber(detVO
                                                            .getUldNumber());
                                            transactionFilterVO
                                                    .setTransactionStatus(TO_BE_RETURNED);
                                            transactionFilterVO
                                                    .setPageNumber(1);

                                            transactionListVO = listULDTransactionDetails(transactionFilterVO);
                                            if (transactionListVO
                                                    .getTransactionDetailsPage() != null
                                                    && transactionListVO
                                                            .getTransactionDetailsPage()
                                                            .size() > 0) {
                                                ArrayList<ULDTransactionDetailsVO> coll = new ArrayList<ULDTransactionDetailsVO>(
                                                        transactionListVO
                                                                .getTransactionDetailsPage());
                                                for (ULDTransactionDetailsVO uldTransactionDetailsVO : coll) {
                                                    if ((LOANED_TRANSACTION)
                                                            .equals(uldTransactionDetailsVO
                                                                    .getTransactionType())
                                                            && (carrierCode)
                                                                    .equals(uldTransactionDetailsVO
                                                                            .getFromPartyCode())
                                                            && (oprAirlineCode)
                                                                    .equals(uldTransactionDetailsVO
                                                                            .getToPartyCode())) {
                                                        if (transListLoanVO == null) {
                                                            transListLoanVO = new TransactionListVO();
                                                            transListLoanVO
                                                                    .setUldTransactionsDetails(new ArrayList<ULDTransactionDetailsVO>());
                                                        }

                                                         * modified by a-3278
                                                         * for 28897 on 06Jan09
                                                         * a new CRN is
                                                         * maintained to save
                                                         * the latest and the
                                                         * old CRN seperately in
                                                         * case of return the
                                                         * crn is updated in the
                                                         * returnCRN field


                                                         * uldTransactionDetailsVO.setControlReceiptNumber(new
                                                         * StringBuilder(
                                                         * String.valueOf(
                                                         * uldTransactionDetailsVO.getToPartyIdentifier())
                                                         * .substring(1,4)).append("-").append("00000000").toString());

                                                        uldTransactionDetailsVO
                                                                .setReturnCRN(new StringBuilder(
                                                                        String
                                                                                .valueOf(
                                                                                        uldTransactionDetailsVO
                                                                                                .getToPartyIdentifier())
                                                                                .substring(
                                                                                        1,
                                                                                        4))
                                                                        .append(
                                                                                "-")
                                                                        .append(
                                                                                "00000000")
                                                                        .toString());
                                                        uldTransactionDetailsVO
                                                                .setReturnDate(detVO
                                                                        .getFlightDate());

                                                        // To be reviewed Since The retun
                                                        // Date is set manually
                                                        // , then demmurrage
                                                        // calculated again.
                                                        uldTransactionDetailsVO
                                                                .setCurrOwnerCode(uldTransactionDetailsVO
                                                                        .getFromPartyIdentifier());
                                                        uldTransactionDetailsVO
                                                                .setReturnStationCode(detVO
                                                                        .getAirportCode());
                                                        transListLoanVO
                                                                .setTransactionType(LOANED_TRANSACTION);
                                                        transListLoanVO
                                                                .getUldTransactionsDetails()
                                                                .add(
                                                                        uldTransactionDetailsVO);
                                                        break;
                                                    } else {
                                                        // save loan
                                                        if ((LOANED_TRANSACTION)
                                                                .equals(uldTransactionDetailsVO
                                                                        .getTransactionType())
                                                                // &&
                                                                // (airlineCode)
                                                                // .equals(uldTransactionDetailsVO
                                                                // .getFromPartyCode())///any
                                                                // airline can
                                                                // com......
                                                                && (oprAirlineCode)
                                                                        .equals(uldTransactionDetailsVO
                                                                                .getToPartyCode())) {
                                                            if (transListLoanVO == null) {
                                                                transListLoanVO = new TransactionListVO();
                                                                transListLoanVO
                                                                        .setUldTransactionsDetails(new ArrayList<ULDTransactionDetailsVO>());
                                                            }

                                                             * modified by
                                                             * a-3278 for 28897
                                                             * on 06Jan09 a new
                                                             * CRN is maintained
                                                             * to save the
                                                             * latest and the
                                                             * old CRN
                                                             * seperately in
                                                             * case of return
                                                             * the crn is
                                                             * updated in the
                                                             * returnCRN field


                                                             * uldTransactionDetailsVO.setControlReceiptNumber(new
                                                             * StringBuilder(
                                                             * String.valueOf(
                                                             * uldTransactionDetailsVO.getToPartyIdentifier())
                                                             * .substring(1,4)).append("-").append("00000000").toString());

                                                            uldTransactionDetailsVO
                                                                    .setReturnCRN(new StringBuilder(
                                                                            String
                                                                                    .valueOf(
                                                                                            uldTransactionDetailsVO
                                                                                                    .getToPartyIdentifier())
                                                                                    .substring(
                                                                                            1,
                                                                                            4))
                                                                            .append(
                                                                                    "-")
                                                                            .append(
                                                                                    "00000000")
                                                                            .toString());
                                                            uldTransactionDetailsVO
                                                                    .setReturnDate(detVO
                                                                            .getFlightDate());
                                                            uldTransactionDetailsVO
                                                                    .setCurrOwnerCode(uldTransactionDetailsVO
                                                                            .getFromPartyIdentifier());
                                                            // To be reviewed Since The
                                                            // retun Date is set
                                                            // manually , then
                                                            // demmurrage
                                                            // calculated again.

                                                            uldTransactionDetailsVO
                                                                    .setReturnStationCode(detVO
                                                                            .getAirportCode());
                                                            transListLoanVO
                                                                    .setTransactionType(LOANED_TRANSACTION);
                                                            transListLoanVO
                                                                    .getUldTransactionsDetails()
                                                                    .add(
                                                                            uldTransactionDetailsVO);
                                                            ULDTransactionDetailsVO vo = new ULDTransactionDetailsVO();
                                                            constructULDTransactionVOforUCM(
                                                                    vo, detVO);
                                                            vo
                                                                    .setFromPartyCode(uldTransactionDetailsVO
                                                                            .getFromPartyCode());
                                                            vo
                                                                    .setFromPartyIdentifier(uldTransactionDetailsVO
                                                                            .getFromPartyIdentifier());
                                                            vo
                                                                    .setCurrOwnerCode(uldTransactionDetailsVO
                                                                            .getFromPartyIdentifier());
                                                            vo
                                                                    .setToPartyCode(carrierCode);
                                                            vo
                                                                    .setToPartyIdentifier(detVO
                                                                            .getFlightCarrierIdentifier());
                                                            String crn = null;
                                                            if (airlineCode
                                                                    .equals(uldTransactionDetailsVO
                                                                            .getFromPartyCode())) {
                                                                String ctrlRcptNo = findCRNForULDTransaction(
                                                                        logonAttributes
                                                                                .getCompanyCode(),
                                                                        airlineCode);
                                                                //Changed for ICRD-6983 by A-4803 on 21Sep11
                                                                crn = new StringBuilder()
                                                                        .append(
                                                                                ctrlRcptNo
                                                                                        .substring(
                                                                                                0,
                                                                                                4))
                                                                        .append(
                                                                                "0")
                                                                        .append(
                                                                                ctrlRcptNo
                                                                                        .substring(
                                                                                                4,
                                                                                                11))
                                                                        .toString();
                                                            } else {
                                                                //Commented as part of ICRD 21184
                                                                //String ctrlRcptNo = ULD
                                                                //      .findAirlineCode(
                                                                //              logonAttributes
                                                                //                      .getCompanyCode(),
                                                                //              uldTransactionDetailsVO
                                                                //                      .getFromPartyCode());

                                                                //Added as part of ICRD 21184 starts
                                                                String ctrlRcptNo=null;
                                                                try {
                                                                    ctrlRcptNo = new SharedAirlineProxy().validateAlphaCode(logonAttributes.getCompanyCode(),uldAirlineCode).getNumericCode();
                                                                }catch(ProxyException pe){
                                                                    log.log(Log.SEVERE, " Airline ProxyException" );
                                                                }
                                                                log
                                                                        .log(
                                                                                Log.INFO,
                                                                                "CRN Prefix",
                                                                                ctrlRcptNo);
                                                                //Changed for ICRD-6983 by A-4803 on 21Sep11
                                                                crn = new StringBuilder()
                                                                        .append(
                                                                                ctrlRcptNo)
                                                                        .append(
                                                                                "-")
                                                                        .append(
                                                                                "00000001")
                                                                        .toString();
                                                            }

                                                            vo
                                                                    .setControlReceiptNumber(crn);// need
                                                            // to
                                                            // split
                                                            // and
                                                            // chg
                                                            vo
                                                                    .setReturnPartyCode(airlineCode);
                                                            vo
                                                                    .setTransactionType(LOANED_TRANSACTION);
                                                            log
                                                                    .log(
                                                                            Log.INFO,
                                                                            "SAVE A LOAN TXN!!!!!",
                                                                            vo);
                                                            uldTxnVOsforUCM
                                                                    .add(vo);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                */
                                    //create transactions for ULD
									FlightDetailsVO flightDetailsVO = new FlightDetailsVO();
									flightDetailsVO.setCompanyCode(detVO.getCompanyCode());
									flightDetailsVO.setCarrierCode(detVO.getCarrierCode());
									flightDetailsVO.setFlightCarrierIdentifier(detVO.getFlightCarrierIdentifier());
									flightDetailsVO.setFlightDate(detVO.getFlightDate());
									flightDetailsVO.setCurrentAirport(detVO.getAirportCode());									
                                    flightDetailsVO.setFlightNumber(detVO.getFlightNumber());
                                    createTransactionsVOForULD(flightDetailsVO, detVO, reconcileVO.getActualDate(),transactionMap);
								} else if (E_EIGHT.equals(detVO.getErrorCode())) {
                                    log.log(Log.INFO,
                                            "ErrorCode--->E8-not used");
								} else if (E_NINE.equals(detVO.getErrorCode())) {
                                    log.log(Log.INFO,
                                            "ErrorCode--->E9-not used");
                                } else if (E_TWELVE
                                        .equals(detVO.getErrorCode())) {
                                    log.log(Log.INFO,
                                            "ErrorCode--->E12-not used");
                                } else if (E_THIRTEEN.equals(detVO
                                        .getErrorCode())) {
                                    log.log(Log.INFO,
                                            "ErrorCode--->E13-not used");
                                } else if (E_FOURTEEN.equals(detVO
                                        .getErrorCode())) {
                                    log.log(Log.INFO,
                                            "ErrorCode--->E14-not used");
                                } else if (E_FIFTEEN.equals(detVO
                                        .getErrorCode())) {
                                    log.log(Log.INFO,
                                            "ErrorCode--->E3-ULD is intransit");
                                    try {
                                        uld = ULD.find(detVO.getCompanyCode(),
                                                detVO.getUldNumber());
                                    } catch (FinderException finderException) {
                                        log.log(Log.FINE,
                                                "Inside Finder Exception");
									}
									if (uld != null) {
										log.log(Log.INFO, "ULD EXISTS!!!!!");
										uld.setTransitStatus(NOT_INTRANSIT);
									}
								}
								detVO.setErrorCode(null);
								// added by nisha for QF CR ends
							}
							/*
							 * if(uldTxnReturnVOs !=null &&
							 * uldTxnReturnVOs.size()>0){
							 * //log.log(Log.INFO,"uldReturnTxnVOs for save
							 * return"+uldTxnReturnVOs);
							 * //returnULDFromOperations(uldTxnReturnVOs); }
							 */
                            /* Commented by A-3415 for ICRD-114538
                             * if (transListLoanVO != null
                                    && transListLoanVO
                                            .getUldTransactionsDetails() != null
                                    && transListLoanVO
                                            .getUldTransactionsDetails().size() > 0) {
                                transListLoanVO
                                        .setUldTransactionsDetails(calculateULDDemmurage(transListLoanVO
                                                .getUldTransactionsDetails()));
                                log.log(Log.INFO,
                                        "before going returnLoanTransactions",
                                        transListLoanVO
                                                                .getUldTransactionsDetails());
                                returnLoanTransactions(transListLoanVO);
                                log
                                        .log(Log.INFO,
                                                "after entering returnLoanTransactions");
                            }

                            log.log(Log.INFO,
                                    "before going returnBorrowTransactions",
                                    transListBorrowVO);
                            if (transListBorrowVO != null
                                    && transListBorrowVO
                                            .getUldTransactionsDetails() != null
                                    && transListBorrowVO
                                            .getUldTransactionsDetails().size() > 0) {
                                log
                                        .log(
                                                Log.INFO,
                                                "before going returnBorrowTransactions",
                                                transListBorrowVO
                                                                .getUldTransactionsDetails());
                                transListBorrowVO
                                        .setUldTransactionsDetails(calculateULDDemmurage(transListBorrowVO
                                                .getUldTransactionsDetails()));
                                returnBorrowTransactions(transListBorrowVO);
                            }
                            if (uldTransactionDetailsVOs != null
                                    && uldTransactionDetailsVOs.size() > 0) {
                                TransactionVO transactionVO = new TransactionVO();
                                transactionVO.setCompanyCode(logonAttributes
                                        .getCompanyCode());
                                transactionVO
                                        .setOperationalFlag(TransactionVO.OPERATION_FLAG_INSERT);
                                transactionVO
                                        .setUldTransactionDetailsVOs(uldTransactionDetailsVOs);
                                log.log(Log.INFO,
                                        "transaction details for save",
                                        transactionVO);
                                Collection<String> dupCrns = checkForDuplicateCRN(
                                        transactionVO.getCompanyCode(),
                                        transactionVO);
                                if (dupCrns != null && dupCrns.size() > 0) {
                                    log.log(Log.INFO, "duplicate Crns exists",
                                            dupCrns);
                                    for (ULDTransactionDetailsVO uldVO : transactionVO
                                            .getUldTransactionDetailsVOs()) {
                                        if (dupCrns.contains(uldVO
                                                .getUldNumber())) {
                                            if (logonAttributes
                                                    .getOwnAirlineCode()
                                                    .equals(
                                                            uldVO
                                                                    .getFromPartyCode())) {
                                                String ctrlRcptNo = findCRNForULDTransaction(
                                                        logonAttributes
                                                                .getCompanyCode(),
                                                        uldVO
                                                                .getFromPartyCode());
                                                //Changed for ICRD-6983 by A-4803 on 21Sep11
                                                String crn = new StringBuilder()
                                                        .append(
                                                                ctrlRcptNo
                                                                        .substring(
                                                                                0,
                                                                                4))
                                                        .append("0")
                                                        .append(
                                                                ctrlRcptNo
                                                                        .substring(
                                                                                4,
                                                                                11))
                                                        .toString();
                                                uldVO
                                                        .setControlReceiptNumber(crn);
                                            }
                                        }
                                    }
                                }
                                saveULDTransaction(transactionVO);
                            }
                            if (uldTxnVOsforUCM != null
                                    && uldTxnVOsforUCM.size() > 0) {
                                for (ULDTransactionDetailsVO vo : uldTxnVOsforUCM) {
                                    saveLoanTransactionForUCM(vo);
                                }
                            }*/

                        }
                        if(transactionMap!= null ){
                            Collection<ULDTransactionDetailsVO> returnTransactionVOs = transactionMap.get(LOAN_RETURN);
                            Collection<ULDTransactionDetailsVO> loanTransactionVOs = transactionMap.get(LOANED_TRANSACTION);
                            if(loanTransactionVOs!=null && loanTransactionVOs.size()>0){
                                TransactionVO transactionVO = new TransactionVO();
                                transactionVO.setCompanyCode(logonAttributes.getCompanyCode());
                                transactionVO.setOperationalFlag(TransactionVO.OPERATION_FLAG_INSERT);
                                transactionVO.setUldTransactionDetailsVOs(loanTransactionVOs);
                                log.log(Log.INFO,"transaction details for save",transactionVO);
                                saveULDTransaction(transactionVO);
                            }
                            if(returnTransactionVOs!=null && returnTransactionVOs.size()>0){
                                for(ULDTransactionDetailsVO transactionDetailsVO : returnTransactionVOs){
                                    try {
                                        closeIfAnyOpenLoanTxnExists(transactionDetailsVO);
                                    } catch (PersistenceException e) {
                                        //Do nothing
									}
								}
							}
						}
						// added by nisha on 06Mar08 for bugfix ends
						new ULDFlightMessageReconcile(messageVO);
					}
				}
			}
		}

		log.exiting("ULDController", "saveProcessedUCM");
       return  validationErrors;
	}

    /**
     *  Method      :   ULDController.findULDAirlineCode
     *  Added by    :   A-7359 on 13-Nov-2017
     *  Used for    :   ICRD-220123
     *  Parameters  :   @param arldtl
     *  Parameters  :   @return
     *  Return type :   String
     */
    private String[] findULDAirlineCode(String arldtl) {
        String[] finalArray=null;
        if(arldtl != null) {
        	finalArray= new String[5];
            String airlineArray[] = arldtl.split(",");
            String airline=airlineArray[0];
            String arldtlArray[]=airline.split("~");
            if ("2".equals(arldtlArray[0])) {
                finalArray[0] = airlineArray[1];
            } else {
                finalArray[0] = airlineArray[2];
            }
            finalArray[1]=arldtlArray[1];
        }
        return finalArray;
    }
    /**
     * This method returns a String arldtl which contains 3 parts separated by
     * ',' Fist part is  the airline identifier,Second part is the twoalphacode and the
     * thirdone is the threealphacode
     *
     *  Method      :   ULDController.findAirlineIdentifier
     *  Added by    :   A-7359 on 13-Nov-2017
     *  Used for    :   ICRD-220123
     *  Parameters  :   @param detVO
     *  Parameters  :   @return
     *  Return type :   String
     * @throws SystemException
     */
    private String findAirlineIdentifier(
            ULDFlightMessageReconcileDetailsVO detVO) throws SystemException {
        String arldtl=null;
        int length = detVO.getUldNumber().length();
        String twoalphacode = detVO.getUldNumber()
                .substring(length - 2);
        String threealphacode = detVO
                .getUldNumber().substring(
                        length - 3);
        arldtl = findOwnerCode(detVO.getCompanyCode(), twoalphacode, threealphacode);
        if(arldtl!=null){
             arldtl=arldtl + "," +twoalphacode+","+threealphacode;
        }
        return arldtl;
    }
    /**
     *  Method      :   ULDController.createULDforUCM
     *  Added by    :   A-7359 on 13-Nov-2017
     *  Used for    :   ICRD-220123 starts
     *  Parameters  :   @param logonAttributes
     *  Parameters  :   @param detVO
     *  Parameters  :   @throws SystemException
     *  Parameters  :   @throws CurrencyConversionException
     *  Parameters  :   @throws DimensionConversionException
     *  Return type :   void
     * @param uld
     */
    private void createULDforUCM(ULDFlightMessageReconcileDetailsVO detVO, int uldArlIdr,
            String uldAirlineCode, boolean isWetLeasedflt,HashMap<String,Collection<ULDTransactionDetailsVO>> transactionMap)
                    throws SystemException,
            CurrencyConversionException, DimensionConversionException {
        log.entering("ULDController","createULDforUCM");
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
        ULDVO uldVO = new ULDVO();
        String uldType = detVO.getUldNumber()
                .substring(0, 3);
        ULDTypeVO typeVo = null;
        
        if(detVO.getUldNumber() != null && detVO.getUldNumber().length() > 0) {
        	typeVo = findULDTypeStructuralDetails(
                    detVO.getCompanyCode(), detVO.getUldNumber());
        }
        else {
        	typeVo = findULDTypeStructuralDetails(
                detVO.getCompanyCode(), uldType);
        }
        
        uldVO.setCompanyCode(detVO
                .getCompanyCode());
        uldVO
                .setUldNumber(detVO
                        .getUldNumber());
        uldVO.setUldType(uldType);
        uldVO.setUldGroupCode(typeVo
                .getUldGroupCode());
        log.log(Log.INFO, "inside create");
        uldVO.setOperationalAirlineIdentifier(detVO
                    .getFlightCarrierIdentifier());
        uldVO.setOwnerAirlineIdentifier(uldArlIdr);
        String station = detVO.getAirportCode();
        uldVO.setLastUpdateTime(new LocalDate(
                station, Location.ARP, true));
        uldVO.setBorrowReferenceNumber(0);
        uldVO.setLastUpdateUser(logonAttributes
                .getUserId());
										/*uldVO.setDisplayBaseHeight(typeVo
                .getBaseDimHeight());
        uldVO.setDisplayBaseLength(typeVo
                .getBaseDimLength());
        uldVO.setDisplayBaseWidth(typeVo
                .getBaseDimWidth());
        uldVO.setDisplayDimensionUnit(typeVo
												.getBaseDimUnit());*/
										uldVO.setStructuralWeight(typeVo
                .getStructuralWtLmt());
										//uldVO.setDisplayStructuralWeightUnit(typeVo
										//				.getStructuralWtLmtUnit());
        uldVO
                .setDisplayIataReplacementCost(typeVo
                        .getIATARepCost());
        uldVO
                .setDisplayIataReplacementCostUnit(typeVo
                        .getIATARepCostUnit());
        uldVO.setCurrentStation(station);
        uldVO.setOwnerStation(station);
        uldVO
                .setDamageStatus(ULDVO.DAMAGED_STATUS);
        uldVO
                .setOverallStatus(ULDVO.OPERATIONAL_STATUS);
        uldVO
                .setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
										uldVO.setTareWeight(typeVo
                .getTareWt());
										//uldVO.setDisplayTareWeightUnit(typeVo
										//		.getTareWtUnit());
        uldVO.setBaseHeight(typeVo
                .getBaseDimHeight());
        uldVO.setBaseLength(typeVo
                .getBaseDimLength());
        uldVO.setBaseWidth(typeVo
                .getBaseDimWidth());
        uldVO.setTransitStatus(NOT_INTRANSIT);
        uldVO.setUldNature(ULDNATURE_GEN);
        // Added by A-2052 for the bug 102182
        // starts
        uldVO
                .setOperationalFlag(ULDVO.OPERATION_FLAG_INSERT);
        // Added by A-2052 for the bug 102182
        // ends
        ULDAirportLocationVO uldAirportLocationVO = ULD
                .findCurrentLocation(detVO
                        .getCompanyCode(),
                        station, CONTENT_EMPTY);
        if (uldAirportLocationVO != null) {
            uldVO
                    .setLocation(uldAirportLocationVO
                            .getFacilityCode());
            uldVO
                    .setFacilityType(uldAirportLocationVO
                            .getFacilityType());
        } else {
            uldVO
                    .setLocation(ULDVO.NO_LOCATION);
            uldVO
                    .setFacilityType(ULDVO.NO_LOCATION);
        }
        new ULD(uldVO);
        if(detVO.getFlightCarrierIdentifier()!=uldArlIdr){
            ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
            constructULDTransactionVOforUCM(transactionDetailsVO, detVO);
            transactionDetailsVO.setFromPartyCode(uldAirlineCode);
            transactionDetailsVO.setSource("UCM");
            transactionDetailsVO.setFromPartyIdentifier(uldArlIdr);
            transactionDetailsVO.setCurrOwnerCode(uldArlIdr);
            // Added as part of CR ICRD-192322
            if(isWetLeasedflt){
                //Modified by A-7359 for ICRD-222484
                transactionDetailsVO.setToPartyCode(logonAttributes.getOwnAirlineCode());
                transactionDetailsVO.setToPartyIdentifier(logonAttributes.getOwnAirlineIdentifier());
                transactionDetailsVO.setOperationalAirlineIdentifier(logonAttributes.getOwnAirlineIdentifier());
            }else{
            transactionDetailsVO.setToPartyCode(detVO.getCarrierCode());
            transactionDetailsVO.setToPartyIdentifier(detVO.getFlightCarrierIdentifier());
            }
			//Commented by A-7359 for ICRD-256690 starts here
			//transactionDetailsVO.setTransactionDate(detVO.getFlightDate());
			//Commented by A-7359 for ICRD-256690 ends here
            //transactionDetailsVO.setPol(detVO.getAirportCode());
            //transactionDetailsVO.setPou(detVO.getPou());
            transactionDetailsVO.setUldConditionCode("SER");
            transactionDetailsVO.setReturnPartyCode(uldAirlineCode);
            transactionDetailsVO.setTransactionType(LOANED_TRANSACTION);
            log.log(Log.INFO,"SAVE A Loan TXN!!!!!",transactionDetailsVO);
            if(transactionMap != null){
                Collection<ULDTransactionDetailsVO> loanTransactionVOs = transactionMap.get(LOANED_TRANSACTION);
                if(loanTransactionVOs!=null && loanTransactionVOs.size() > 0){
                    transactionMap.get(LOANED_TRANSACTION).add(transactionDetailsVO);
                }else{
                    loanTransactionVOs = new ArrayList<ULDTransactionDetailsVO>();
                    loanTransactionVOs.add(transactionDetailsVO);
                    transactionMap.put(LOANED_TRANSACTION,loanTransactionVOs);
                }
            }
        }
        log.exiting("ULDController","createULDforUCM");
    }
	/**
	 * @author A-2408
	 * @param vo
	 * @param detVO
	 *            this method is used fro just populating the values in
	 *            ULDTransactionDetailsVO while UCM processing
	 */
    public void constructULDTransactionVOforUCM(ULDTransactionDetailsVO vo,
            ULDFlightMessageReconcileDetailsVO detVO) throws SystemException {
		log.entering("ULD Controller", "constructULDTransactionVOforUCM");
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		vo.setCompanyCode(logonAttributes.getCompanyCode());
		vo.setUldNumber(detVO.getUldNumber());
		vo.setPartyType(PARTYTYPE_AIRLINE);
		vo.setOperationalAirlineIdentifier(detVO.getFlightCarrierIdentifier());
		vo.setDamageStatus(NOT_DAMAGED);
		vo.setLastUpdateUser(logonAttributes.getUserId());
		LocalDate localDate = null;
        if (detVO.getAirportCode() != null
                && detVO.getAirportCode().trim().length() > 0) {
            localDate = new LocalDate(detVO.getAirportCode(), Location.ARP,
                    true);
        } else {
            localDate = new LocalDate(logonAttributes.getAirportCode(),
                    Location.ARP, true);
		}
		vo.setTransactionDate(localDate);
		// Changed by a-3045 for bug 45275 on 18Apr09 starts
		vo.setTxStationCode(detVO.getPou());
		// Changed by a-3045 for bug 45275 on 18Apr09 ends
		vo.setTransactionStationCode(detVO.getAirportCode());
		vo.setReturnStationCode(detVO.getAirportCode());
		vo.setUldType(detVO.getUldNumber().substring(0, 3));
		vo.setTransactionNature(TEMPORARY);
		log.log(Log.INFO, "before going set local time------>>>");
		// Added by A-2052 for the bug 102182 starts
        vo.setLastUpdateTime(new LocalDate(detVO.getAirportCode(),
                Location.ARP, true));
		// Added by A-2052 for the bug 102182 ends
		vo.setTransactionStatus(TO_BE_RETURNED);
		vo.setUldConditionCode("SER");

	}

	/**
	 * @author A-2408
	 * @param uldTransactionDetailsVO
	 * @return
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 *             only loan transaction will be saved in this method for
	 *             reconciling UCM.........
	 */
    /* Commented by A-3415 for ICRD-114538
     * public void saveLoanTransactionForUCM(
            ULDTransactionDetailsVO uldTransactionDetailsVO)
            throws SystemException, ULDDefaultsBusinessException {

        log.entering("INSIDE THE CONTROLLER", "saveLoanTransactionForUCM"
                + uldTransactionDetailsVO);

        Collection<ErrorVO> errors = new ArrayList<ErrorVO>();

        boolean isValid = false;
        boolean canTransactionPersisted = false;
        boolean isDummyMovement = false;
        String dummyUldNumber = null;
        String dummyCurrentStation = null;
        StringBuilder uldNumber = null;
        StringBuilder currentStation = null;
        isValid = true;
        canTransactionPersisted = true;
        ULD uld = null;

        uld = checkULDExistsForTransaction(uldTransactionDetailsVO);
        log.log(Log.FINE, "THE VALUE FOR ULDEXISTS ULDEXISTS IS", uld);

         * Here when loan Transaction is being performed , partyCode is set as
         * toPartyCode and if it is Borrow it is partyCode is fromPartyCode.

        String partyCode = null;
        if (LOANED_TRANSACTION.equals(uldTransactionDetailsVO
                .getTransactionType())) {
            partyCode = uldTransactionDetailsVO.getToPartyCode();
        } else {
            partyCode = uldTransactionDetailsVO.getFromPartyCode();
        }
        // ***changed
        if (!isValid) {
            isValid = checkBorrowedULDLoanedToSameParty(uldTransactionDetailsVO
                    .getCompanyCode(), uldTransactionDetailsVO.getUldNumber(),
                    uldTransactionDetailsVO.getPartyType(),

                    // transactionDetailsVo.getPartyCode(),
                    partyCode, uldTransactionDetailsVO.getTransactionType());

            if (isValid) {
                log
                        .log(
                                Log.INFO,
                                "CANNOT  LOAN/BORROW A ULD WHICH IS ACTUALLY BORROW LOANED FROM THE SAME PARTY  ERRORS CREATED ");
                if (uldTransactionDetailsVO.getTransactionType().equals(
                        LOANED_TRANSACTION)) {
                    errors.add(new ErrorVO("uld.defaults.loanuld.borrowed",
                            new Object[] { uldTransactionDetailsVO
                                    .getUldNumber() }));
                } else {
                    errors.add(new ErrorVO("uld.defaults.borrowuld.loaned",
                            new Object[] { uldTransactionDetailsVO
                                    .getUldNumber() }));
                }
                canTransactionPersisted = false;

            }

        }

         * Try for inserton in case of the Loan Transaction

        if (canTransactionPersisted
                && uldTransactionDetailsVO.getTransactionType().equals(
                        LOANED_TRANSACTION)) {
            if (uld != null) {
                log.log(Log.FINE, "THE ULD CAN BE LOANED");
                ULDTransaction transaction = new ULDTransaction(
                        uldTransactionDetailsVO);
                errors
                        .add(new ErrorVO(
                                ULD_TRANSACTION_REF_NUMBER,
                                new Object[] { new StringBuilder()
                                        .append(
                                                uldTransactionDetailsVO
                                                        .getUldNumber())
                                        .append("~")
                                        .append(
                                                uldTransactionDetailsVO
                                                        .getTransactionRefNumber())
                                        .toString() }));
                log
                        .log(
                                Log.INFO,
                                "UPDATE METHOD CALLED FOR THE ULDMST ,TRANSACTION  LOANED TRANSACTION IS ABOUT TO BE COMPLETED");
                log
                        .log(
                                Log.FINE,
                                "transaction.getUldTransactionPK().getTransactionRefNumber()",
                                transaction.getUldTransactionPK()
                                        .getTransactionRefNumber());
                uld.setLoanReferenceNumber(transaction.getUldTransactionPK()
                        .getTransactionRefNumber());

                *//** Not needed for Transaction to an Agent *//*

                if (PARTYTYPE_AIRLINE.equals(uldTransactionDetailsVO
                        .getPartyType())) {
                    uld.setOperationalAirlineIdentifier(uldTransactionDetailsVO
                            .getOperationalAirlineIdentifier());
                }
                // Added as CR
                if (uldTransactionDetailsVO.getUldNature() != null
                        && uldTransactionDetailsVO.getUldNature().trim()
                                .length() > 0) {
                    uld.setUldNature(uldTransactionDetailsVO.getUldNature());
                } else {
                    uld.setUldNature("GEN");
                }
                uld.setControlReceiptNumber(uldTransactionDetailsVO
                        .getControlReceiptNumber());
                // upto here
                uld.setLastUpdateTime(uldTransactionDetailsVO
                        .getUldLastUpdateTime());
                uld.setLastUpdateUser(uldTransactionDetailsVO
                        .getLastUpdateUser());
                // Audit
                ULDAuditVO uldAuditVO = new ULDAuditVO(TransactionVO.MODULE,
                        TransactionVO.SUBMODULE, TransactionVO.ENTITY);
                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                        uldAuditVO, transaction, true);
                collectULDTransactionDetails(transaction, uldAuditVO,
                        uldTransactionDetailsVO);
                uldAuditVO.setActionCode(CREATE_ULDLOANTRANSACTION);

                uldAuditVO.setAuditRemarks(uldTransactionDetailsVO
                        .getTransactionRemark());
                AuditUtils.performAudit(uldAuditVO);
                log.log(Log.FINE, "\n\n\n#### Audit Performed ###\n\n\n");
                // Audit end
            }
        }


         * CHECK WHETHER THE ULD CURRENTSTATION IS DIFFERENT FROM THE LOANED
         * STATION

        if (uld != null
                && canTransactionPersisted
                && (!uldTransactionDetailsVO.getTransactionStationCode()
                        .equals(uld.getCurrentStation()))) {
            log
                    .log(Log.INFO,
                            "ERRORS CREATED WHEN THE ULD CURRENTSTATION DIFFERENT FROM LOANED STATION");
            isDummyMovement = true;
            if (uldNumber == null) {
                uldNumber = new StringBuilder(uld.getUldPK().getUldNumber())
                        .append(",");
            } else {
                uldNumber.append(uld.getUldPK().getUldNumber()).append(",");
            }
            if (currentStation == null) {
                currentStation = new StringBuilder(uld.getCurrentStation())
                        .append(",");
            } else {
                currentStation.append(uld.getCurrentStation()).append(",");
            }
        }

        if (isDummyMovement) {
            log.log(Log.INFO, "ERRORS CREATED FOR THE DUMMYMOVEMENT");
            if (uldNumber != null && uldNumber.length() > 0) {
                uldNumber = uldNumber.deleteCharAt(uldNumber.length() - 1);
                dummyUldNumber = uldNumber.toString();
            }
            if (currentStation != null && currentStation.length() > 0) {
                currentStation = currentStation.deleteCharAt(currentStation
                        .length() - 1);
                dummyCurrentStation = currentStation.toString();
            }

        }

        log.log(Log.FINE, "THE SIZE OF THE ERRORS FINALLY IS FOUND TO BE",
                errors.size());
        Collection<ErrorVO> errorsTobeThrown = new ArrayList<ErrorVO>();
        if (errors != null && errors.size() > 0) {
            for (ErrorVO errorVo : errors) {
                if (!ULD_TRANSACTION_REF_NUMBER.equals(errorVo.getErrorCode())) {
                    errorsTobeThrown.add(errorVo);
                    log.log(Log.INFO,
                            "ULD DEFAULTS BUSINESS EXCEPTION TO BE THROWN ",
                            errorsTobeThrown);
                }
            }
        }

         * Here all the exceptions , due to which persistence of loan
         * transaction should not happen , are thrown

        if (errorsTobeThrown.size() > 0) {
            ULDDefaultsBusinessException ex = new ULDDefaultsBusinessException();
            ex.addErrors(errorsTobeThrown);
            throw ex;
        }
        log.log(Log.FINE, "THE BOOLEAN DUMMY MOVEMENT IS ", isDummyMovement);
        log.log(Log.FINE, "THE DUMMY CURRENT STATION IS", dummyCurrentStation);
        log.log(Log.FINE, "THE DUMMY ULD NUMBER IS ", dummyUldNumber);
        if (isDummyMovement) {
            log.log(Log.INFO, "DUMMY MOVEMENT EXISTS");
            errors.add(new ErrorVO("uld.defaults.uldcurrentstation.different",
                    new Object[] { dummyUldNumber, dummyCurrentStation }));

        }

    }*/

	/**
	 * @author A-2667 This method is being called from processUCM when the
	 *         MessageType is OUT.
	 * @param reconcileVO
	 * @throws SystemException
	 */
    private void updateTransitStatus(ULDFlightMessageReconcileVO reconcileVO)
            throws SystemException {
		log.entering("ULDController", "updateTransitStatus");
		ULD uld = new ULD();
		log.log(Log.FINE, "ULDFlightMessageReconcileVO------->>", reconcileVO);
		// Added by Preet on 09Sep08 starts
		// In case of Duplicate UCM OUTs , the ULDs in the previous UCM should
		// be not be marked In Transit
		// Construct Filter VO , Sequence number is set as the current sequence
		// number - 1
		ULDFlightMessageReconcileVO filterVO = new ULDFlightMessageReconcileVO();

		filterVO.setCompanyCode(reconcileVO.getCompanyCode());
		filterVO.setAirportCode(reconcileVO.getAirportCode());
        filterVO.setFlightCarrierIdentifier(reconcileVO
                .getFlightCarrierIdentifier());
		filterVO.setFlightNumber(reconcileVO.getFlightNumber());
		filterVO.setFlightSequenceNumber(reconcileVO.getFlightSequenceNumber());
		filterVO.setMessageType("OUT");
		filterVO.setToSearchMaxSeqNum(ULDFlightMessageReconcileVO.FLAG_YES);
        //Added by A-7359 for ICRD-230043 starts here
        if(reconcileVO.getMessageSource()!=null){
        filterVO.setMessageSource(reconcileVO.getMessageSource());
        }
        //Added by A-7359 for ICRD-230043 ends here
		log.log(Log.INFO, "filterVO----------------", filterVO);
        ULDFlightMessageReconcileVO counterUCM = ULDFlightMessageReconcile
                .findCounterUCM(filterVO);
		log.log(Log.INFO, "counterUCM----------------", counterUCM);
		Collection<String> counterULDs = new ArrayList<String>();
		if (counterUCM != null) {
            Collection<ULDFlightMessageReconcileDetailsVO> counterUCMDetails = counterUCM
                    .getReconcileDetailsVOs();
			if (counterUCMDetails != null && counterUCMDetails.size() > 0) {
				for (ULDFlightMessageReconcileDetailsVO vo : counterUCMDetails) {
					counterULDs.add(vo.getUldNumber());
				}
			}
		}
		log.log(Log.INFO, "counterULDs are ------------------", counterULDs);
        if (reconcileVO.getReconcileDetailsVOs() != null
                && reconcileVO.getReconcileDetailsVOs().size() > 0) {
			for (ULDFlightMessageReconcileDetailsVO uLDFlightMessageReconcileDetailsVO : reconcileVO
					.getReconcileDetailsVOs()) {

				// Added by Preet on 09Sep08 starts
				// If ULD exists in the second UCM , remove from the list
				if (counterULDs != null && counterULDs.size() > 0) {
                    if (counterULDs.contains(uLDFlightMessageReconcileDetailsVO
                            .getUldNumber())) {
                        counterULDs.remove(uLDFlightMessageReconcileDetailsVO
                                .getUldNumber());
                    }
                }
                // Added by Preet on 09Sep08 ends
                try {
                    log
                            .log(
                                    Log.FINE,
                                    "uLDFlightMessageReconcileDetailsVO.getUldNumber()---->>",
                                    uLDFlightMessageReconcileDetailsVO
                                            .getUldNumber());
                    log.log(Log.FINE, "reconcileVO.getCompanyCode()-->>",
                            reconcileVO.getCompanyCode());
                    uld = ULD.find(reconcileVO.getCompanyCode(),
                            uLDFlightMessageReconcileDetailsVO.getUldNumber());
                    if (uld != null) {
                        log.log(Log.FINE, "---ULD Objects---->>", uld);
                        uld
                                .setTransitStatus(ULDFlightMessageReconcileDetailsVO.FLAG_YES);

                        StringBuilder flightInfo = new StringBuilder(
                                reconcileVO.getCarrierCode());
                        flightInfo.append(reconcileVO.getFlightNumber())
                                .append(",").append(
                                        reconcileVO.getFlightDate()
                                        .toDisplayFormat()).append(",")
                                        .append(uLDFlightMessageReconcileDetailsVO
                                                .getPou());
						uld.setFlightInfo(flightInfo.toString());

						// Added by Preet on 03Sep08 starts
						// If ULD is Lost it should be made Operational
						if (LOST.equals(uld.getOverallStatus())) {
							uld.setOverallStatus(OPERATIONAL);
						}
                        uld.setContent(uLDFlightMessageReconcileDetailsVO
                                .getContent());
						// Added by Preet on 03Sep08 ends

						// added by a-3278 for bug 45844 on 23Apr09
						// Audit triggered while updating the InTrasitStatus
                        ULDAuditVO uldAuditVO = new ULDAuditVO(
                                ULDFlightMessageReconcileVO.MODULE,
                                ULDFlightMessageReconcileVO.SUBMODULE,
                                ULDFlightMessageReconcileVO.ENTITY);

						uldAuditVO.setActionCode(UPDATE_ULD);

						uldAuditVO.setAuditRemarks("");
						StringBuilder additionalInfo = new StringBuilder();

						uldAuditVO.setCompanyCode(reconcileVO.getCompanyCode());
                        uldAuditVO
                                .setUldNumber(uLDFlightMessageReconcileDetailsVO
                                        .getUldNumber());

                        LogonAttributes logonAttributes = ContextUtils
                                .getSecurityContext().getLogonAttributesVO();
                        String airportCode = logonAttributes.getAirportCode();

                        uldAuditVO.setTxnTime(new LocalDate(airportCode,
                                Location.ARP, true).toGMTDate());

                        uldAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                                Location.ARP, true));
                        uldAuditVO.setAuditRemarks("");
                        uldAuditVO.setUserId(reconcileVO.getLastUpdatedUser());

                        additionalInfo.append("Airline - ");
                        additionalInfo.append(uld
                                .getOperationalAirlineIdentifier());

                        additionalInfo.append(",");
                        additionalInfo.append("Current Station - ");
                        additionalInfo.append(uld.getCurrentStation());

                        additionalInfo.append(",");
                        additionalInfo.append("Transit Status - ");
                        additionalInfo.append(uld.getTransitStatus());

                        additionalInfo.append(",");
                        additionalInfo.append("Flight Details - ");
                        additionalInfo.append(uld.getFlightInfo());

                        uldAuditVO.setAdditionalInformation(additionalInfo
                                .toString());
                        log
                                .log(
                                        Log.FINE,
                                        "---------setting uldAuditVO.getAdditionalInformation()------*****************",
                                        uldAuditVO
                                                        .getAdditionalInformation());
                        AuditUtils.performAudit(uldAuditVO);

                        log
                                .exiting(
                                        "performAuditForTransitStatusUpdation",
										"...Finished audit for performAuditForTransitStatusUpdation");
						// Audit end
						// a-3278 ends

					}
				} catch (FinderException e) {
					log.log(Log.FINE, "Inside Finder Exception");
					// throw new SystemException(e.getErrorCode(),e);
				}
			}
		}

		log.log(Log.INFO, "counterULDs to change ---->>", counterULDs);
		if (counterULDs != null && counterULDs.size() > 0) {
			for (String uldNumber : counterULDs) {
				try {
					uld = ULD.find(reconcileVO.getCompanyCode(), uldNumber);
				} catch (FinderException e) {
					log.log(Log.FINE, "CAUGHT Finder Exception");
				}
				if (uld != null) {
                    uld
                            .setTransitStatus(ULDFlightMessageReconcileDetailsVO.FLAG_NO);

					// added by a-3278 for bug 45844 on 23Apr09
					// Audit triggered while updating the InTrasitStatus
                    ULDAuditVO uldAuditVO = new ULDAuditVO(
                            ULDFlightMessageReconcileVO.MODULE,
                            ULDFlightMessageReconcileVO.SUBMODULE,
                            ULDFlightMessageReconcileVO.ENTITY);

					uldAuditVO.setActionCode(UPDATE_ULD);

					uldAuditVO.setAuditRemarks("");
					StringBuilder additionalInfo = new StringBuilder();

					uldAuditVO.setCompanyCode(reconcileVO.getCompanyCode());
					uldAuditVO.setUldNumber(uldNumber);

                    LogonAttributes logonAttributes = ContextUtils
                            .getSecurityContext().getLogonAttributesVO();
                    String airportCode = logonAttributes.getAirportCode();

                    uldAuditVO.setTxnTime(new LocalDate(airportCode,
                            Location.ARP, true).toGMTDate());

                    uldAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                            Location.ARP, true));
                    uldAuditVO.setAuditRemarks("");
                    uldAuditVO.setUserId(reconcileVO.getLastUpdatedUser());

                    additionalInfo.append("Airline - ");
                    additionalInfo
                            .append(uld.getOperationalAirlineIdentifier());

                    additionalInfo.append(",");
                    additionalInfo.append("Current Station - ");
                    additionalInfo.append(uld.getCurrentStation());

                    additionalInfo.append(",");
                    additionalInfo.append("Transit Status - ");
                    additionalInfo.append(uld.getTransitStatus());

                    additionalInfo.append(",");
                    additionalInfo.append("Flight Details - ");
                    additionalInfo.append(uld.getFlightInfo());

                    uldAuditVO.setAdditionalInformation(additionalInfo
                            .toString());
                    log
                            .log(
                                    Log.FINE,
                                    "---------setting uldAuditVO.getAdditionalInformation()------*****************",
                                    uldAuditVO.getAdditionalInformation());
                    AuditUtils.performAudit(uldAuditVO);

                    log
                            .exiting("performAuditForTransitStatusUpdation",
									"...Finished audit for performAuditForTransitStatusUpdation");
					// Audit end
					// a-3278 ends
					uld.setFlightInfo(null);
				}
			}
		}
		// Added by Preet on 09Sep08 ends
	}

	/**
	 * This method retrieves the carrier details of the specified filter
	 * condition
	 *
	 * @author A-2883
	 * @param handledCarrierSetupVO
	 * @return Collection
	 * @throws SystemException
	 */
    public Collection<ULDHandledCarrierVO> findHandledCarrierSetup(
            ULDHandledCarrierVO handledCarrierSetupVO) throws SystemException {
		log.entering("ULDController", "findhandledcarriersetup");
		Collection<ULDHandledCarrierVO> carrierList = new ArrayList<ULDHandledCarrierVO>();
        carrierList = ULDHandledCarrier
                .findhandledcarriersetup(handledCarrierSetupVO);
		log.exiting("ULDController", "findhandledcarriersetup");
		return carrierList;
	}

	/**
	 * This method update the carrier details
	 *
	 * @author A-2883
	 * @param handledCarrierSetupVO
	 * @throws SystemException
	 */

    public void saveHandledCarrier(
            Collection<ULDHandledCarrierVO> handledCarrierSetupVO)
            throws SystemException {
		log.entering("ULDController", "updateHandledCarreier");
		for (ULDHandledCarrierVO uldHandledCarrierVO : handledCarrierSetupVO) {
            if (OPERATION_FLAG_INSERT.equals(uldHandledCarrierVO
                    .getOperationFlag())) {
				try {
					new ULDHandledCarrier(uldHandledCarrierVO);
				} catch (SystemException systemException) {
					throw new SystemException(systemException.getErrors());
				}
            } else if (OPERATION_FLAG_DELETE.equals(uldHandledCarrierVO
                    .getOperationFlag())) {
                try {
                    ULDHandledCarrier uldHandledCarrier = ULDHandledCarrier
                            .find(uldHandledCarrierVO.getCompanyCode(),
                                    uldHandledCarrierVO.getAirlineCode(),
                                    uldHandledCarrierVO.getStationCode());
					uldHandledCarrier.remove();
				} catch (SystemException systemException) {
					throw new SystemException(systemException.getErrors());
				}
			}
		}
	}

	/**
	 * @author A-2412 This method deletes the accessory transaction details
	 * @param accessoryTransactionVos
	 * @throws SystemException
	 */
    public void deleteAccessoryDetails(
            Collection<AccessoryTransactionVO> accessoryTransactionVos)
			throws SystemException {
		log.entering("ULDController", "deleteAccessoryDetails");
		AccessoryTransaction accessoryTransaction = null;
		AccessoriesStockConfig accessoriesStockConfig = null;
		AccessoriesStockConfig accessoriesStockConfigForOwner = null;

		for (AccessoryTransactionVO accvo : accessoryTransactionVos) {

			try {
                accessoriesStockConfigForOwner = AccessoriesStockConfig.find(
                        accvo.getCompanyCode(), accvo.getAccessoryCode(), accvo
                                .getTransactionStationCode(), accvo
                                .getCurrOwnerCode());

                accessoriesStockConfig = AccessoriesStockConfig.find(accvo
                        .getCompanyCode(), accvo.getAccessoryCode(), accvo
                        .getTransactionStationCode(), accvo
                        .getOperationalAirlineIdentifier());

            } catch (FinderException e) {
                e.getErrorCode();
            }

            if (accessoriesStockConfigForOwner != null) {
                accessoriesStockConfigForOwner
                        .setLoaned(accessoriesStockConfigForOwner.getLoaned()
                                - accvo.getQuantity());
                accessoriesStockConfigForOwner
                        .setAvailable(accessoriesStockConfigForOwner
                                .getAvailable()
                                + accvo.getQuantity());
            }

            if (accessoriesStockConfig != null) {

                accessoriesStockConfig.setAvailable(accessoriesStockConfig
                        .getAvailable() != 0 ? !(accessoriesStockConfig
                        .getAvailable()
                        - accvo.getQuantity() < 0) ? accessoriesStockConfig
                        .getAvailable()
                        - accvo.getQuantity() : 0 : 0);

            }
            accessoryTransaction = AccessoryTransaction.find(accvo
                    .getCompanyCode(), accvo.getAccessoryCode(), accvo
                    .getTransactionRefNumber());

			if (accessoryTransaction != null) {
				accessoryTransaction.remove();
			}
		}

	}



	/**
	 *
	 * @param uldDiscrepancyVO
	 * @throws SystemException
	 * @throws DimensionConversionException
	 * @throws CurrencyConversionException
	 * @throws ULDDefaultsBusinessException
	 */
	public String updateULDStockStatusForHHT(ULDDiscrepancyVO uldDiscrepancyVO)
            throws SystemException, ULDDefaultsBusinessException,
            CurrencyConversionException, DimensionConversionException,
            MessageConfigException {
		log.entering("ULDController", "updateStockStatusForHHT");
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        ULD uld = null;
        uld = checkULDExists(uldDiscrepancyVO.getCompanyCode(),
                uldDiscrepancyVO.getUldNumber());
		log.log(Log.INFO, "uld status", uldDiscrepancyVO.getUldStatus());
		if (ULDDiscrepancyVO.ULD_FOUND.equals(uldDiscrepancyVO.getUldStatus())
                || ULDDiscrepancyVO.ULD_MISSING.equals(uldDiscrepancyVO
                        .getUldStatus())) {
			Collection<ULDDiscrepancyVO> uldDiscrepancyVOs = new ArrayList<ULDDiscrepancyVO>();
			uldDiscrepancyVOs.add(uldDiscrepancyVO);
			String result = null;
			try {
				result = saveULDDiscrepencyDetails(uldDiscrepancyVOs);
			} catch (DiscrepancyAlreadyCaughtException ex) {
				for (ErrorVO err : ex.getErrors()) {
					log.log(Log.INFO, "ERR MESSAGE IS --->>", err.getErrorCode());
                    if (DiscrepancyAlreadyCaughtException.DISCREPANCY_ALREADY_CAUGHT
                            .equals(err.getErrorCode())) {
						return DiscrepancyAlreadyCaughtException.DISCREPANCY_ALREADY_CAUGHT;
					} else if (DiscrepancyAlreadyCaughtException.ULD_ALREADY_IN_THE_SAME_LOCATION
							.equals(err.getErrorCode())) {
						return DiscrepancyAlreadyCaughtException.ULD_ALREADY_IN_THE_SAME_LOCATION;
                    } else if (DiscrepancyAlreadyCaughtException.ULD_CANNOT_BE_MISSING
                            .equals(err.getErrorCode())) {
						return DiscrepancyAlreadyCaughtException.ULD_CANNOT_BE_MISSING;
                    } else if (DiscrepancyAlreadyCaughtException.ULD_IS_NOT_IN_THE_STOCK
                            .equals(err.getErrorCode())) {
						return DiscrepancyAlreadyCaughtException.ULD_IS_NOT_IN_THE_STOCK;
					} else if (DiscrepancyAlreadyCaughtException.DISCREPANCY_AT_SAME_LOCATION
							.equals(err.getErrorCode())) {
						return DiscrepancyAlreadyCaughtException.DISCREPANCY_AT_SAME_LOCATION;
					}
				}

			}
			log.log(Log.INFO, "RESULD RETURNED IS ----->>>", result);
			if (result != null && result.trim().length() > 0) {
				if (result.contains(RECORD_ULD_MOVEMENT)) {
					log.log(Log.INFO, " -----RECORD ULD MOVEMENT----");
					// Creating a Dummy ULD Movement
					ULDMovementVO movementVO = new ULDMovementVO();
					Collection<String> dummyULDs = new ArrayList<String>();
					dummyULDs.add(uldDiscrepancyVO.getUldNumber());
					Collection<ULDMovementVO> dummyULDMovementVOs = new ArrayList<ULDMovementVO>();
                    movementVO
                            .setCompanyCode(uldDiscrepancyVO.getCompanyCode());
                    movementVO.setCurrentStation(uldDiscrepancyVO
                            .getReportingStation());
                    movementVO.setDummyMovement(true);
                    movementVO.setLastUpdatedUser(logonAttributes.getUserId());
                    movementVO.setPointOfLading(uld.getCurrentStation());
                    movementVO.setLastUpdatedTime(new LocalDate(
                            uldDiscrepancyVO.getReportingStation(),
                            Location.ARP, true));
                    movementVO.setPointOfUnLading(uldDiscrepancyVO
                            .getReportingStation());
					movementVO.setRemark(uldDiscrepancyVO.getRemarks());
					movementVO.setUpdateCurrentStation(true);
					// Setting the Content Type as Cargo
					movementVO.setContent("C");
					dummyULDMovementVOs.add(movementVO);
                    if (dummyULDMovementVOs != null
                            && dummyULDMovementVOs.size() > 0) {
						try {
							saveULDMovement(dummyULDs, dummyULDMovementVOs);
						} catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                            log.log(Log.INFO,
                                    "%%%%%%%  wil never throw this exception");
						}
                    }
                }/*
					 * else if(result.contains(INTERNALLY_MOVED)){ }
					 */
				return ULDDiscrepancyVO.ULD_MOVED_DIS_RESOLVED;
			} else {
                if (ULDDiscrepancyVO.ULD_FOUND.equals(uldDiscrepancyVO
                        .getDiscrepencyCode())) {
					return ULDDiscrepancyVO.FOUND_CREATED;
                } else if (ULDDiscrepancyVO.ULD_MISSING.equals(uldDiscrepancyVO
                        .getDiscrepencyCode())) {
					return ULDDiscrepancyVO.MISSING_CREATED;
				} else {
					return null;
				}

			}
        } else if (ULDDiscrepancyVO.ULD_RELEASED.equals(uldDiscrepancyVO
                .getUldStatus())) {
			// Release ULD
			TransactionVO transactionVO = new TransactionVO();
			Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
			ULDTransactionDetailsVO detailVO = new ULDTransactionDetailsVO();

			if (uld != null) {
				String ownerCode = null;
				String serNumber = null;
				String twoalphacode = null;
				String threealphacode = null;

				detailVO.setCompanyCode(uldDiscrepancyVO.getCompanyCode());
				detailVO.setUldNumber(uldDiscrepancyVO.getUldNumber());
				detailVO.setTransactionType(LOANED_TRANSACTION);
				detailVO.setToPartyCode(uldDiscrepancyVO.getAgentCode());
                detailVO.setLastUpdateUser(uldDiscrepancyVO
                        .getLastUpdatedUser());
                String ctrlRcptNo = findCRNForULDTransaction(logonAttributes
                        .getCompanyCode(), logonAttributes.getOwnAirlineCode());
				detailVO.setControlReceiptNumber(ctrlRcptNo);
                detailVO.setTransactionStationCode(uldDiscrepancyVO
                        .getReportingStation());
				detailVO.setDamageStatus(uld.getDamageStatus());
				detailVO.setPartyType(AGENT);
				detailVO.setTransactionStatus(TransactionVO.TO_BE_RETURNED);
				detailVO.setUldConditionCode("SER");

				int length = uldDiscrepancyVO.getUldNumber().length();
				String uldNo = uldDiscrepancyVO.getUldNumber();
				twoalphacode = uldNo.substring(length - 2);
				threealphacode = uldNo.substring(length - 3);

                //Commented as part of ICRD-21184
//				String arldtl = ULD.findOwnerCode(uldDiscrepancyVO
//						.getCompanyCode(), twoalphacode, threealphacode);

                //Added as part of ICRD-21184
				String arldtl = findOwnerCode(uldDiscrepancyVO.getCompanyCode(), twoalphacode, threealphacode);
                //Null Check added as part of ICRD-21184
                if(arldtl != null) {
					String arldtlArray[] = arldtl.split("~");
					if ("2".equals(arldtlArray[0])) {
						ownerCode = twoalphacode;
					} else {
						ownerCode = threealphacode;
					}

                    serNumber = uldNo.substring(3, length
                            - (Integer.valueOf(arldtlArray[0])));
				}
				detailVO.setUldSerialNumber(serNumber);
				detailVO.setUldOwnerCode(ownerCode);
				detailVO.setUldType(uld.getUldType());
				detailVO.setFromPartyCode(ownerCode);
                detailVO.setTransactionDate(uldDiscrepancyVO
                        .getDiscrepencyDate());
				detailVO.setTransactionNature(PERMANENT);
				detailVO.setTransactionRemark(uldDiscrepancyVO.getRemarks());
                detailVO.setTxStationCode(uldDiscrepancyVO
                        .getReportingStation());
				detailVO.setUldNature(uld.getUldNature());

				//Updating from Party for ICRD-349648
				detailVO = populateFromParty(detailVO);

				uldTransactionDetailsVOs.add(detailVO);
                transactionVO
                        .setUldTransactionDetailsVOs(uldTransactionDetailsVOs);
                //Modified by A-3415 for ICRD-114538
				createULDLoan(transactionVO);
			}
			return ULDDiscrepancyVO.ULD_RELEASED_TO_AGENT;

		} else {
			return null;
		}
	}

	/**
	 * @author A-2667
	 * @param companyCode
	 * @param displayPage
	 * @param comboValue
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDDiscrepancyVO> populateLocationLov(String companyCode,
            int displayPage, String comboValue, String airportCode)
            throws SystemException {
		log.entering("ULDCONROLLER", "populateLocationLov");
        Collection<String> facCodes = ULDDiscrepancy.populateLocationLov(
                companyCode, displayPage, comboValue, airportCode);
		String facCodeArray[] = new String[] {};
		Collection<ULDDiscrepancyVO> ULDDiscrepancyVOs = null;
		ULDDiscrepancyVO uLDDiscrepancyVO = null;
		if (facCodes != null && facCodes.size() > 0) {
			ULDDiscrepancyVOs = new ArrayList<ULDDiscrepancyVO>();
			for (String facCode : facCodes) {
				facCodeArray = facCode.split("~");
				uLDDiscrepancyVO = new ULDDiscrepancyVO();
				uLDDiscrepancyVO.setFacilityType(facCodeArray[0]);
				uLDDiscrepancyVO.setFacilityDescription(facCodeArray[1]);
				ULDDiscrepancyVOs.add(uLDDiscrepancyVO);
			}
		}
		log.log(Log.FINE, "-------ULDDiscrepancyVOs---->>", ULDDiscrepancyVOs);
		log.exiting("ULDCONROLLER", "populateLocationLov");
		if (ULDDiscrepancyVOs != null) {
            return new Page<ULDDiscrepancyVO>((List<ULDDiscrepancyVO>) ULDDiscrepancyVOs, 0, 0, 0, 0, 0, false);
		} else {
			return null;
		}
	}

	/**
	 *
	 * @param uldDamageFilterVO
	 * @return
	 * @throws SystemException
	 */
    public ULDDamageRepairDetailsVO findULDDamageRepairDetails(
            ULDDamageFilterVO uldDamageFilterVO) throws SystemException {
		log.entering("ULDController", "findULDDamageDetails");
		return ULDDamage.findULDDamageRepairDetails(uldDamageFilterVO);
	}

	/**
	 * @author a-2883
	 * @param reportSpec
	 * @return Map<String, Object>
	 * @throws SystemException
	 * @throws RemoteException
	 */
	// Added by Tarun for CRQ_AirNZ 312 on 25Mar08
    public Map<String, Object> printMaintainDamageRepairReport(
            ReportSpec reportSpec) throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
        ULDDamageFilterVO uldDamageFilterVO = (ULDDamageFilterVO) reportSpec
                .getFilterValues().iterator().next();
		log.entering("ULDController", "printMaintainDamageRepairReport");
		ULDDamageRepairDetailsVO uldDamageRepairDetailsVO = findULDDamageRepairDetails(uldDamageFilterVO);
		if (uldDamageRepairDetailsVO == null) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		if (uldDamageRepairDetailsVO != null) {
			if (uldDamageRepairDetailsVO.getUldDamageVOs() == null
					|| uldDamageRepairDetailsVO.getUldDamageVOs().size() == 0) {
				ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
                ErrorVO reporterror = new ErrorVO(
                        ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
				uldDefaultsBusinessException.addError(reporterror);
				throw uldDefaultsBusinessException;
			}
		}
		Map<String, Collection<OneTimeVO>> oneTimeHashMap = null;
		Collection<String> oneTimeActiveStatusList = new ArrayList<String>();

		// Collection<OneTimeVO> categorycodes=new ArrayList<OneTimeVO>();
		oneTimeActiveStatusList.add(DAMAGE_SEVERITY);
		oneTimeActiveStatusList.add(DAMAGE_SECTION);
        //Added by A-8368 as part of user story - 
        oneTimeActiveStatusList.add(POINTOFNOTICE_ONETIME);

		try {
            oneTimeHashMap = new SharedDefaultsProxy()
                    .findOneTimeValues(uldDamageFilterVO.getCompanyCode(),
							oneTimeActiveStatusList);
		} catch (ProxyException proxyException) {
			throw new SystemException(proxyException.getMessage());
		}
        Collection<ULDDamageVO> damageVOs = uldDamageRepairDetailsVO
                .getUldDamageVOs();
		if (damageVOs != null && damageVOs.size() > 0) {

			Collection<OneTimeVO> dmgSta = oneTimeHashMap.get(DAMAGE_SEVERITY);
            Collection<OneTimeVO> dmgSection = oneTimeHashMap
                    .get(DAMAGE_SECTION);
          //Added by A-8368 as part of user story - 
            Collection<OneTimeVO> dmgPntOfNtc = oneTimeHashMap
                    .get(POINTOFNOTICE_ONETIME);

            log.log(Log.FINE,
                    "\n\nDamage VOS From Server---@@@@@@@@@@----------->",
                    damageVOs);
			for (ULDDamageVO damageVO : damageVOs) {
				for (OneTimeVO oneTimeVO : dmgSta) {
                    if (damageVO.getSeverity() != null
                            && damageVO.getSeverity().equals(
                                    oneTimeVO.getFieldValue())) {
						damageVO.setSeverity(oneTimeVO.getFieldDescription());
					}
				}
				for (OneTimeVO oneTimeVO : dmgSection) {
                    if (damageVO.getSection() != null
                            && damageVO.getSection().equals(
                                    oneTimeVO.getFieldValue())) {
						damageVO.setSection(oneTimeVO.getFieldDescription());
					}
				}
                //Added by A-8368 as part of user story - 
                for (OneTimeVO oneTimeVO : dmgPntOfNtc) {
                    if (damageVO.getDamageNoticePoint() != null
                            && damageVO.getDamageNoticePoint().equals(
                                    oneTimeVO.getFieldValue())) {
                        damageVO.setDamageNoticePoint(oneTimeVO.getFieldDescription());
                    }
                }
			}
		}

		reportSpec.setData(damageVOs);
		ReportMetaData parameterMetaData = new ReportMetaData();
		parameterMetaData.setFieldNames(new String[] { "uldNumber" });
		reportSpec.addParameterMetaData(parameterMetaData);
		reportSpec.addParameter(uldDamageFilterVO);

		ReportMetaData reportMetaData = new ReportMetaData();
        reportMetaData.setColumnNames(new String[] { "DMGREFNUM", "DMGSEC",
                "DMG", "DMSSVT", "RPTARP", "DMGRPTDAT","DMGNOTPNT", "RMK", "DMGPTYTYP",
                "DMGPTYCOD", "DMGLOC", "DMGSTA" });
        reportMetaData.setFieldNames(new String[] { "damageReferenceNumber",
                "section", "damageDescription", "severity", "reportedStation",
                "reportedDate","damageNoticePoint", "remarks", "abrPartyType", "party", "location",
                "uldStatus" });
		reportSpec.setReportMetaData(reportMetaData);

		ReportMetaData subreportMetaData = new ReportMetaData();
        subreportMetaData.setColumnNames(new String[] { "RPRHED", "RPRARP",
                "RPRDAT", "RPRDMGREFNUM", "RPRAMT", "RPRCUR", "RPRRMK" });
        subreportMetaData.setFieldNames(new String[] { "repairHead",
                "repairStation", "repairDate", "invoiceReferenceNumber",
                "amount", "currency", "remarks" });
		reportSpec.addSubReportMetaData(subreportMetaData);
		reportSpec.addSubReportData(uldDamageRepairDetailsVO.getUldRepairVOs());
		// image starts

		Collection<ULDDamagePictureVO> damagePictureVOs = new ArrayList<ULDDamagePictureVO>();
		try {
            damagePictureVOs = ULDDamagePicture.findULDDamagePictures(uldDamageFilterVO);

		} catch (SystemException ex) {

		}
		log.log(Log.FINE, " \n tarunimage", damagePictureVOs.size());
		// ReportMetaData imgreportMetaData = new ReportMetaData();
		// imgreportMetaData.setColumnNames(new String[] { "IMG"});
		// imgreportMetaData.setFieldNames(new String[] {"image" });
		// reportSpec.addSubReportMetaData(imgreportMetaData);
		// reportSpec.addSubReportData(damagePictureVOs);
		for (ULDDamagePictureVO ULDdamagePictureVO : damagePictureVOs) {
			reportSpec.addImage(ULDdamagePictureVO.getImage());
		}
		// image ends

		log.exiting("ULDController", "printMaintainDamageRepairReport");
		return ReportAgent.generateReport(reportSpec);

	}

	/**
	 * @author A-2412
	 * @param uldIntMvtFilterVO
	 * @param pageNumber
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDIntMvtDetailVO> findIntULDMovementHistory(
            ULDIntMvtHistoryFilterVO uldIntMvtFilterVO, int pageNumber)
			throws SystemException {
		log.entering("ULDController", "findIntULDMovementHistory");
		Page<ULDIntMvtDetailVO> uldIntMvtDetailList = null;
        uldIntMvtDetailList = ULDIntMvt.findIntULDMovementHistory(
                uldIntMvtFilterVO, pageNumber);
        log.log(Log.FINE, "uldIntMvtDetailList from the Server ",
                uldIntMvtDetailList);
		log.exiting("ULDController", "findIntULDMovementHistory");
		return uldIntMvtDetailList;
	}

	// Added By A-3045 For Report Of ULDDiscrepancyReport Screen
	/**
	 * @author A-3045
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
    public Map<String, Object> generateULDDiscrepancyReport(
            ReportSpec reportSpec) throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
		log.entering("ULDController", "generateULDDiscrepancyReport");
		Iterator<Object> filterValues = reportSpec.getFilterValues().iterator();
        ULDDiscrepancyFilterVO uldDiscrepancyFilterVO = (ULDDiscrepancyFilterVO) filterValues
                .next();

        Collection<ULDDiscrepancyVO> discrepancyVos = ULDDiscrepancy
                .listULDDiscrepancy(uldDiscrepancyFilterVO);
		// adding paramters
		if (uldDiscrepancyFilterVO != null) {

            if (uldDiscrepancyFilterVO.getUldNumber() == null
                    || uldDiscrepancyFilterVO.getUldNumber().length() == 0) {
				uldDiscrepancyFilterVO.setUldNumber("");
			}

			if (uldDiscrepancyFilterVO.getAirlineCode() == null
					|| uldDiscrepancyFilterVO.getAirlineCode().length() == 0) {
				uldDiscrepancyFilterVO.setAirlineCode("");
			}
			if (uldDiscrepancyFilterVO.getReportingStation() == null
					|| uldDiscrepancyFilterVO.getReportingStation().length() == 0) {
				uldDiscrepancyFilterVO.setReportingStation("");
			}
			Map<String, Collection<OneTimeVO>> oneTimeHashMap = null;
			Collection<String> oneTimeActiveStatusList = new ArrayList<String>();
			oneTimeActiveStatusList.add(DISCREPANCYCODE);
			try {
                oneTimeHashMap = new SharedDefaultsProxy().findOneTimeValues(
                        uldDiscrepancyFilterVO.getCompanyCode(),
						oneTimeActiveStatusList);
			} catch (ProxyException proxyException) {
				throw new SystemException(proxyException.getMessage());
			}
			if (discrepancyVos != null && discrepancyVos.size() > 0) {
                Collection<OneTimeVO> discrepancy = oneTimeHashMap
                        .get(DISCREPANCYCODE);
				for (ULDDiscrepancyVO uldDiscrepancyVO : discrepancyVos) {
					// added by a-3045 for uld377 on 30Apr08
					if (discrepancy != null && discrepancy.size() > 0) {
						for (OneTimeVO oneTimeVO : discrepancy) {
							if (uldDiscrepancyVO.getDiscrepencyCode() != null
                                    && uldDiscrepancyVO.getDiscrepencyCode()
                                            .equals(oneTimeVO.getFieldValue())) {
                                uldDiscrepancyVO.setDiscrepencyCode(oneTimeVO
                                        .getFieldDescription());
							}
						}
					}
					// ends by a-3045 on 30Apr08
				}
			}
			reportSpec.addParameter(uldDiscrepancyFilterVO);

		}
		if (discrepancyVos == null || discrepancyVos.size() == 0) {
			discrepancyVos.add(new ULDDiscrepancyVO());
		}
		reportSpec.setData(discrepancyVos);
		reportSpec.setReportId("RPTLST210");
		return ReportAgent.generateReport(reportSpec);
	}



	/**
	 * This method is used for printing ULD Internal Movement History as a part
	 * of CR AirNZ269
	 *
	 * @author A-3045
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printUldIntMvtHistory(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
        ULDIntMvtHistoryFilterVO uldIntMvtHistoryFilterVO = (ULDIntMvtHistoryFilterVO) reportSpec
                .getFilterValues().iterator().next();
        Collection<ULDIntMvtDetailVO> uldIntMvtHistoryVOs = ULDIntMvt
                .findULDIntMvtHistory(uldIntMvtHistoryFilterVO);
		ULDValidationVO uldValidationVO = new ULDValidationVO();
		if (uldIntMvtHistoryFilterVO != null) {
            uldValidationVO = validateULD(uldIntMvtHistoryFilterVO
                    .getCompanyCode(), uldIntMvtHistoryFilterVO.getUldNumber());
		}
		Map<String, Collection<OneTimeVO>> oneTimeHashMap = null;
		Collection<String> oneTimeActiveStatusList = new ArrayList<String>();
		oneTimeActiveStatusList.add(CONTENT_ONETIME);
		try {
            oneTimeHashMap = new SharedDefaultsProxy().findOneTimeValues(
                    uldIntMvtHistoryFilterVO.getCompanyCode(),
					oneTimeActiveStatusList);
		} catch (ProxyException proxyException) {
			throw new SystemException(proxyException.getMessage());
		}
		if (uldIntMvtHistoryVOs != null && uldIntMvtHistoryVOs.size() > 0) {
            Collection<OneTimeVO> contents = oneTimeHashMap
                    .get(CONTENT_ONETIME);
			for (ULDIntMvtDetailVO uldIntMvtDetailVO : uldIntMvtHistoryVOs) {
				for (OneTimeVO oneTimeVO : contents) {
					if (uldIntMvtDetailVO.getContent() != null
                            && uldIntMvtDetailVO.getContent().equals(
                                    oneTimeVO.getFieldValue())) {
                        uldIntMvtDetailVO.setContent(oneTimeVO
                                .getFieldDescription());
					}
				}
			}
		}
		if (uldIntMvtHistoryVOs != null && uldIntMvtHistoryVOs.size() > 0) {
			reportSpec.addParameter(uldIntMvtHistoryFilterVO);
			if (uldValidationVO != null) {
				reportSpec.addParameter(uldValidationVO);
			}
			reportSpec.setData(uldIntMvtHistoryVOs);
			return ReportAgent.generateReport(reportSpec);
		} else {
			reportSpec.addParameter(uldIntMvtHistoryFilterVO);
			if (uldValidationVO != null) {
				reportSpec.addParameter(uldValidationVO);
			}
			reportSpec.setData(new ArrayList<ULDIntMvtDetailVO>());
			return ReportAgent.generateReport(reportSpec);
		}
	}

	/**
	 * @author A-2667 This method is used for saving Internal ULD Movement
	 * @param companyCode
	 * @param uldNumber
	 * @return
	 * @throws SystemException
	 */
    public void saveULDIntMvts(Collection<ULDIntMvtVO> intMvts)
            throws SystemException {
		log.entering("ULDController", "saveULIntMvt");
		if (intMvts != null && intMvts.size() > 0) {
            Criterion intMvtCriterion = KeyUtils.getCriterion(intMvts
                    .iterator().next().getCompanyCode(),
					ULDIntMvtVO.INT_MVT_SEQNUM);
			String intSeqNmber = KeyUtils.getKey(intMvtCriterion);
			for (ULDIntMvtVO uldIntMvtVO : intMvts) {
				uldIntMvtVO.setIntSequenceNumber(intSeqNmber);
				ULDIntMvt uldIntMvt = new ULDIntMvt(uldIntMvtVO);
			}
		}
		performIntULDMovementAudit(intMvts);
		log.exiting("ULDController", "saveULIntMvt");
	}

	/**
	 * @author A-2667
	 * @param relocateULDVO
	 * @return
	 * @throws SystemException
	 */
    public Collection<AuditDetailsVO> findULDAuditEnquiryDetails(
            RelocateULDVO relocateULDVO) throws SystemException {
		log.entering("ULDController", "findULDAuditEnquiryDetails");
		Collection<AuditDetailsVO> aditDetailsVOs = null;
		aditDetailsVOs = ULD.findULDAuditEnquiryDetails(relocateULDVO);
		log.exiting("ULDController", "findULDAuditEnquiryDetails");
		return aditDetailsVOs;
	}

	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printUldStationStock(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
        ULDStockConfigFilterVO uldStockConfigFilterVO = (ULDStockConfigFilterVO) reportSpec
                .getFilterValues().iterator().next();
		log.log(Log.FINE, "filter vo", uldStockConfigFilterVO);
		int pageNo = 0;
		if (uldStockConfigFilterVO != null) {
			pageNo = uldStockConfigFilterVO.getPageNumber();
		}
        Page<ULDStockListVO> uldStockListVOs = findULDStockList(
                uldStockConfigFilterVO, pageNo);
        if (uldStockListVOs == null || uldStockListVOs.size() <= 0) {
            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		Collection<ULDStockListVO> vos = new ArrayList<ULDStockListVO>();
		int pageSize = uldStockListVOs.size();
		log.log(Log.FINE, "Page Sizeis ------->>", pageSize);
		for (int i = 0; i < pageSize; i++) {
			vos.add(uldStockListVOs.get(i));
		}
		log.log(Log.INFO, "inside controller vos", vos);
		if (uldStockConfigFilterVO != null) {
			log.log(Log.FINE, "airline code", uldStockConfigFilterVO.getAirlineCode());
			if (uldStockConfigFilterVO.getAirlineCode() == null
					|| uldStockConfigFilterVO.getAirlineCode().length() == 0) {
				uldStockConfigFilterVO.setAirlineCode("");
			}
			if (uldStockConfigFilterVO.getStationCode() == null
					|| uldStockConfigFilterVO.getStationCode().length() == 0) {
				uldStockConfigFilterVO.setStationCode("");
			}
			if (uldStockConfigFilterVO.getUldTypeCode() == null
					|| uldStockConfigFilterVO.getUldTypeCode().length() == 0) {
				uldStockConfigFilterVO.setUldTypeCode("");
			}
			if (uldStockConfigFilterVO.getUldGroupCode() == null
					|| uldStockConfigFilterVO.getUldGroupCode().length() == 0) {
				uldStockConfigFilterVO.setUldGroupCode("");
			}
            if (uldStockConfigFilterVO.getAgentCode() == null
                    || uldStockConfigFilterVO.getAgentCode().length() == 0) {
				uldStockConfigFilterVO.setAgentCode("");
			}
            if (uldStockConfigFilterVO.getUldNature() == null
                    || uldStockConfigFilterVO.getUldNature().length() == 0) {
				uldStockConfigFilterVO.setUldNature("");
			}
			ReportMetaData parameterMetaData = new ReportMetaData();
            parameterMetaData.setFieldNames(new String[] { "airlineCode",
                    "stationCode", "uldGroupCode", "agentCode",
					"viewByNatureFlag", "uldTypeCode", "uldNature" });
			reportSpec.addParameterMetaData(parameterMetaData);
			reportSpec.addParameter(uldStockConfigFilterVO);
		}
		ReportMetaData reportMetaData = new ReportMetaData();
		// uld group code is shown instead of type
        reportMetaData.setColumnNames(new String[] { "ARLIDR", "STNCOD",
                "ULDGRPCOD", "ULDTYPCOD", "ULDNAT", "AVL", "DMG", "LON",
                "NONOP", "TOT", "ALT", "MAXQTY", "MINQTY" });
        reportMetaData.setFieldNames(new String[] { "airlineCode",
                "stationCode", "uldGroupCode", "uldTypeCode", "uldNature",
                "available", "damaged", "loaned", "nonOperational", "total",
                "owned", "maxQty", "minQty" });

		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(vos);
		return ReportAgent.generateReport(reportSpec);

	}

	/**
	 * @author A-1950
	 * @param companyCode
	 * @throws SystemException
	 */
    public void sendAlertForULDStockDeviation(String companyCode)
            throws SystemException {
        log.entering("ULDController", "sendAlertForULDStockDeviation");
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		// a boolean variable isMisbalanced added by a-3459 as per advice from
		// Asharaf from onsite on 17-12-2008
		boolean isMisbalanced = false;
		Collection<ULDStockListVO> uldStockLists = new ArrayList<ULDStockListVO>();
		WorkflowVO workflowVO = null;
		Collection<WorkflowVO> workflows = new ArrayList<WorkflowVO>();
		ParameterInProcessVO param = null;
		WorkflowDefaultsProxy workflowDefaultsProxy = null;
		uldStockLists = ULD.findStockDeviation(companyCode);
		log.log(Log.INFO, "%%%uldStockLists%%%%", uldStockLists);
        StringBuilder workflowBuilder = new StringBuilder(
                "Critical Stock Misbalance at the following stations as on");
        workflowBuilder.append("\n");
        workflowBuilder.append(new LocalDate(logonAttributes.getAirportCode(),
                Location.ARP, false).toDisplayDateOnlyFormat());
        workflowBuilder.append("\n");
        workflowBuilder.append("\t").append("ARPCOD").append("\t").append(
                "ULDTYP").append("\t").append("ULDGRP").append("\t").append("ULDNAT")
                .append("\t").append("AVL").append("\t").append("MIN")
                .append("\t").append("MAX").toString();
		for (ULDStockListVO stockListVO : uldStockLists) {
			// Notification trigger to be on basis of SystemAvailable (CR
			// QF1199) on 08Apr09
			// modification in the if check(Alert needs to be triggered only
			// when stock goes belowMINQTY) on 29Apr09
            //Notification need to trigger when maxqty exceeds SystemAvailable also(CR- ICRD-26499)
            if (stockListVO.getSystemAvailable() < stockListVO.getMinQty()|| stockListVO.getSystemAvailable() > stockListVO.getMaxQty()) {
				isMisbalanced = true;
				workflowBuilder.append("\n");
				workflowBuilder.append("\t");
				workflowBuilder.append(stockListVO.getStationCode());
				workflowBuilder.append("\t");
				workflowBuilder.append(stockListVO.getUldTypeCode());
				workflowBuilder.append("\t");
				workflowBuilder.append(stockListVO.getUldGroupCode());
				workflowBuilder.append("\t");
				workflowBuilder.append(stockListVO.getUldNature());
				workflowBuilder.append("\t");
				workflowBuilder.append(stockListVO.getSystemAvailable());
				workflowBuilder.append("\t");
				workflowBuilder.append(stockListVO.getMinQty());
				workflowBuilder.append("\t");
				workflowBuilder.append(stockListVO.getMaxQty());
			}
		}
		if (isMisbalanced) {
			workflowVO = new WorkflowVO();
			workflowVO.setCompanyCode(companyCode);
			workflowVO.setWorkflowName(ULD_STK_DEV_WRKFLO);
			workflowVO.setStationCode(logonAttributes.getAirportCode());
			workflowVO.setUserId(logonAttributes.getUserId());
			workflowVO.setLastUpdateUser(logonAttributes.getUserId());
            workflowVO
                    .setParametersInProcess(new ArrayList<ParameterInProcessVO>());

			param = new ParameterInProcessVO();
			param.setParameterCode(ParameterConstantsVO.WRKFLO_PARCOD_RMK);
			param.setParamaterValue(workflowBuilder.toString());
			workflowVO.getParametersInProcess().add(param);
			workflows.add(workflowVO);
			if (workflows != null && workflows.size() > 0) {
				log.log(Log.INFO, "%%%%%%%%%%%%%%%%%workflows%%%%", workflows);
				workflowDefaultsProxy = new WorkflowDefaultsProxy();
				try {
					workflowDefaultsProxy.startWorkflow(workflows);
					log.log(Log.INFO, "MESSAGE SENT");
				} catch (ProxyException proxyException) {
                    log.log(Log.INFO, "%%%%%%%proxyException%%%%%%%%%%%",
                            proxyException);
				}
			}
		}
	}

	/**
	 * @author A-1950
	 *
	 * @param companyCode
	 * @throws SystemException
	 */
    public void sendAlertForULDAccStockDepletion(String companyCode)
            throws SystemException {
		log.entering("ULDController", "sendAlertForULDStockDeviation");
		Collection<AccessoriesStockConfigVO> accessoryStockVOs = null;
        accessoryStockVOs = AccessoriesStockConfig
                .sendAlertForULDAccStockDepletion(companyCode);
		if (accessoryStockVOs != null && accessoryStockVOs.size() > 0) {

			WorkflowVO workflowVO = null;
			Collection<WorkflowVO> workflows = null;
			ParameterInProcessVO param = null;
			WorkflowDefaultsProxy workflowDefaultsProxy = null;
            LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                    .getLogonAttributesVO();

			for (AccessoriesStockConfigVO accessoriesStockConfigVO : accessoryStockVOs) {
                if (accessoriesStockConfigVO.getAvailable() < accessoriesStockConfigVO
                        .getMinimumQuantity()) {
					workflows = new ArrayList<WorkflowVO>();

					workflowVO = new WorkflowVO();
					workflowVO.setCompanyCode(companyCode);
					workflowVO.setWorkflowName(ACC_STK_DPL_WRKFLO);
					workflowVO.setStationCode(logonAttributes.getAirportCode());
					workflowVO.setUserId(logonAttributes.getUserId());
					workflowVO.setLastUpdateUser(logonAttributes.getUserId());

                    workflowVO
                            .setParametersInProcess(new ArrayList<ParameterInProcessVO>());

                    param = new ParameterInProcessVO();
                    param
                            .setParameterCode(ParameterConstantsVO.WRKFLO_PARCOD_ARPCOD);
                    param.setParamaterValue(accessoriesStockConfigVO
                            .getStationCode());
                    workflowVO.getParametersInProcess().add(param);

                    param = new ParameterInProcessVO();
                    param
                            .setParameterCode(ParameterConstantsVO.WRKFLO_PARCOD_ACCCOD);
                    param.setParamaterValue(accessoriesStockConfigVO
                            .getAccessoryDescription());
                    workflowVO.getParametersInProcess().add(param);

                    param = new ParameterInProcessVO();
                    param
                            .setParameterCode(ParameterConstantsVO.WRKFLO_PARCOD_QUANTITY);
                    param.setParamaterValue(String
                            .valueOf(accessoriesStockConfigVO
                                    .getMinimumQuantity()
                                    - accessoriesStockConfigVO.getAvailable()));
                    workflowVO.getParametersInProcess().add(param);

                    workflows.add(workflowVO);
                }
            }
            if (workflows != null && workflows.size() > 0) {
                workflowDefaultsProxy = new WorkflowDefaultsProxy();
                try {
                    workflowDefaultsProxy.startWorkflow(workflows);
                    log.log(Log.INFO, "MESSAGE SENT");
                } catch (ProxyException proxyException) {
                    log.log(Log.INFO, "%%%%%%%proxyException%%%%%%%%%%%",
                            proxyException);
				}
			}
		}
	}

	/**
	 * Done by Asharaf Binu P for AirNZ 520 on 08APR08
	 *
	 * @author A-1950
	 * @param companyCode
	 * @throws SystemException
	 */
    public void sendAlertForDiscrepancy(String companyCode, int period)
            throws SystemException {
		log.entering("ULDController", "sendAlertForDiscrepancy");
        Collection<String> discrepancies = ULDDiscrepancy
                .sendAlertForDiscrepancy(companyCode, period);
		if (discrepancies != null && discrepancies.size() > 0) {
			WorkflowVO workflowVO = null;
			Collection<WorkflowVO> workflows = new ArrayList<WorkflowVO>();
			ParameterInProcessVO param = null;
			WorkflowDefaultsProxy workflowDefaultsProxy = null;
			String arr[] = null;
            LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                    .getLogonAttributesVO();

			for (String code : discrepancies) {
				arr = code.split("~");

				workflowVO = new WorkflowVO();
				workflowVO.setCompanyCode(companyCode);
				workflowVO.setWorkflowName(ULD_DIS_WRKFLO);
				workflowVO.setStationCode(logonAttributes.getAirportCode());
				workflowVO.setUserId(logonAttributes.getUserId());
				workflowVO.setLastUpdateUser(logonAttributes.getUserId());

                workflowVO
                        .setParametersInProcess(new ArrayList<ParameterInProcessVO>());

                param = new ParameterInProcessVO();
                param
                        .setParameterCode(ParameterConstantsVO.WRKFLO_PARCOD_ULDNUM);
				param.setParamaterValue(arr[0]);
				workflowVO.getParametersInProcess().add(param);

				param = new ParameterInProcessVO();
                param
                        .setParameterCode(ParameterConstantsVO.WRKFLO_PARCOD_DISCOD);
                param.setParamaterValue("F".equals(arr[1]) ? "FOUND"
                        : "MISSING");
				workflowVO.getParametersInProcess().add(param);

				workflows.add(workflowVO);
			}
			log.log(Log.INFO, "%%%%%%%%%%%%%%%%%%%%%%%%%%%", workflows);
			if (workflows != null && workflows.size() > 0) {
				workflowDefaultsProxy = new WorkflowDefaultsProxy();
				try {
					workflowDefaultsProxy.startWorkflow(workflows);
					log.log(Log.INFO, "MESSAGE SENT");
				} catch (ProxyException proxyException) {
                    log.log(Log.INFO, "%%%%%%%proxyException%%%%%%%%%%%",
                            proxyException);
				}
			}
		}
	}

	/**
	 * Done on 8th April as part of AirNZ 434
	 *
	 * @author A-2412
	 * @param intMvts
	 * @throws SystemException
	 */
    private void performIntULDMovementAudit(Collection<ULDIntMvtVO> intMvts)
            throws SystemException {
		log.log(Log.INFO, "inside performIntULDMovementAudit", intMvts);
		for (ULDIntMvtVO uldIntMvtVO : intMvts) {
            for (ULDIntMvtDetailVO uldIntMvtDetailVO : uldIntMvtVO
                    .getULDIntMvtDetailVOs()) {
                log.log(Log.INFO, "outside uldIntMvtDetailVO.getContent()",
                        uldIntMvtDetailVO.getContent());
				if ("RPR".equalsIgnoreCase(uldIntMvtDetailVO.getContent())
                        || "AGT".equalsIgnoreCase(uldIntMvtDetailVO
                                .getContent())) {
                    log.log(Log.INFO, "inside uldIntMvtDetailVO.getContent()",
                            uldIntMvtDetailVO.getContent());
                    ULDAuditVO uldAuditVO = new ULDAuditVO(ULDIntMvtVO.MODULE,
                            ULDIntMvtVO.SUBMODULE, ULDIntMvtVO.ENTITY);
					StringBuffer additionalInfo = new StringBuffer();
					if ("RPR".equalsIgnoreCase(uldIntMvtDetailVO.getContent())) {

                        uldAuditVO.setCompanyCode(uldIntMvtDetailVO
                                .getCompanyCode());
                        uldAuditVO.setUldNumber(uldIntMvtDetailVO
                                .getUldNumber());

                        additionalInfo.append(" PartyType - ").append(
                                "ULD Damage");
                        additionalInfo.append(",PartyName - ").append(
                                uldIntMvtDetailVO.getAgentName());
                        additionalInfo.append(",Date - ").append(
                                uldIntMvtDetailVO.getDisplayMvtDate());
                    } else if ("AGT".equalsIgnoreCase(uldIntMvtDetailVO
                            .getContent())) {
						additionalInfo = new StringBuffer();
						additionalInfo.append(" PartyType - ").append("Agent");
                        additionalInfo.append(",PartyName - ").append(
                                uldIntMvtDetailVO.getAgentName());
                        additionalInfo.append(",Date - ").append(
                                uldIntMvtDetailVO.getDisplayMvtDate());
                    }
                    if (uldAuditVO.getStationCode() != null) {

                        uldAuditVO.setTxnTime(new LocalDate(uldAuditVO
                                .getStationCode(), Location.ARP, true)
                                .toGMTDate());
                        uldAuditVO.setTxnLocalTime(new LocalDate(uldAuditVO
                                .getStationCode(), Location.ARP, true));

                    } else if (uldAuditVO.getStationCode() == null) {
                        LogonAttributes logonAttributes = ContextUtils
                                .getSecurityContext().getLogonAttributesVO();
                        String airportCode = logonAttributes.getAirportCode();
                        uldAuditVO.setTxnTime(new LocalDate(airportCode,
                                Location.ARP, false).toGMTDate());

                        uldAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                                Location.ARP, false));
                    }
                    //Added as part of ICRD-3995 by A-3767 on 12Sep11
					uldAuditVO.setUldNumber(uldIntMvtVO.getUldNumber());
					uldAuditVO.setUserId(uldIntMvtVO.getLastUpdatedUser());
                    uldAuditVO.setAdditionalInformation(additionalInfo
                            .toString());
					uldAuditVO.setActionCode(CREATE_ULDINTMVT);
					uldAuditVO.setAuditRemarks(uldIntMvtDetailVO.getRemark());
					AuditUtils.performAudit(uldAuditVO);
					log.log(Log.INFO, "after audit");
				}
			}
		}
	}

	/**
	 * @author A-2667
	 * @param flightMessageFilterVO
	 * @return
	 * @throws SystemException
	 */
    public Collection<FlightDetailsVO> findCPMULDDetails(
            FlightMessageFilterVO flightMessageFilterVO) throws SystemException {
		log.entering("ULDController", "findCPMULDDetails");
		return ULDFlightMessage.findCPMULDDetails(flightMessageFilterVO);
	}

	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printUldAuditEnquiry(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
        RelocateULDVO relocateULDVO = (RelocateULDVO) reportSpec
                .getFilterValues().iterator().next();
		Collection<AuditDetailsVO> auditDetailsVOs = findULDAuditEnquiryDetails(relocateULDVO);
		if (auditDetailsVOs == null || auditDetailsVOs.size() == 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		if (relocateULDVO != null) {
			if (relocateULDVO.getUldNumber() == null) {
				relocateULDVO.setUldNumber("");
			}
			if (relocateULDVO.getUldSuffix() == null) {
				relocateULDVO.setUldSuffix("");
			}
			if (relocateULDVO.getCurrentStation() == null) {
				relocateULDVO.setCurrentStation("");
			}
			if (relocateULDVO.getFacilityType() == null) {
				relocateULDVO.setFacilityType("");
			}
			if (relocateULDVO.getLocation() == null) {
				relocateULDVO.setLocation("");
			}
		}
		ReportMetaData parameterMetaData = new ReportMetaData();
        parameterMetaData.setFieldNames(new String[] { "txnFromDate",
                "txnToDate", "uldNumber", "uldSuffix", "currentStation",
                "facilityType", "location" });
		reportSpec.addParameterMetaData(parameterMetaData);
		reportSpec.addParameter(relocateULDVO);

		ReportMetaData reportMetaData = new ReportMetaData();

        reportMetaData.setColumnNames(new String[] { "ACTCOD", "UPDUSR",
                "UPDTXNTIMUTC", "ADLINF", "AUDRMK", "STNCOD" });
        reportMetaData.setFieldNames(new String[] { "action", "lastUpdateUser",
                "lastUpdateTime", "additionalInformation", "remarks",
                "stationCode" });

		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(auditDetailsVOs);
		return ReportAgent.generateReport(reportSpec);
	}

	/**
	 * @author A-3459
	 * @param companyCode
	 * @param section
	 * @return
	 * @throws SystemException
	 */
    public Collection<ULDDamageChecklistVO> listULDDamageChecklistMaster(
            String companyCode, String section) throws SystemException {
		log.entering("ULDController", "listULDDamageChecklistMaster");
        return ULDDamageChecklistMaster.listULDDamageChecklistMaster(
                companyCode, section);
	}

	/**
	 * @author A-3459 This method is to save the details
	 * @param uldDamageChecklistVOs
	 * @throws SystemException
	 */
    public void saveULDDamageChecklistMaster(
            Collection<ULDDamageChecklistVO> uldDamageChecklistVOs)
			throws SystemException {

		log.log(Log.INFO, "VOS TO BE SAVED--------->>", uldDamageChecklistVOs);
		if (uldDamageChecklistVOs != null) {
			for (ULDDamageChecklistVO damageChecklistVO : uldDamageChecklistVOs) {

				/**
				 * for the events to be deleted
				 */
                if (ULDDamageChecklistVO.OPERATION_FLAG_DELETE
                        .equals(damageChecklistVO.getOperationFlag())) {
                    try {
                        log.log(Log.INFO,
                                "CALLING DELETE METHOD ------vo--->>",
                                damageChecklistVO);
                        ULDDamageChecklistMaster checklistMaster = ULDDamageChecklistMaster
                                .find(damageChecklistVO.getCompanyCode(),
                                        damageChecklistVO.getSection(),
										damageChecklistVO.getSequenceNumber());
						checklistMaster.remove();
					} catch (FinderException finderException) {
                        throw new SystemException(finderException
                                .getErrorCode());
					}
				}

				/**
				 * for the events to be inserted
				 */

                else if (ULDDamageChecklistVO.OPERATION_FLAG_INSERT
                        .equals(damageChecklistVO.getOperationFlag())) {
                    log.log(Log.INFO, "CALLING INSERT  METHOD ------vo--->>",
                            damageChecklistVO);
					new ULDDamageChecklistMaster(damageChecklistVO);
				}

				/**
				 * for the events to be updated
				 */

                else if (ULDDamageChecklistVO.OPERATION_FLAG_UPDATE
                        .equals(damageChecklistVO.getOperationFlag())) {
                    try {
                        log.log(Log.INFO,
                                "CALLING UPDATE METHOD ------vo--->>",
                                damageChecklistVO);
                        ULDDamageChecklistMaster checklistMaster = ULDDamageChecklistMaster
                                .find(damageChecklistVO.getCompanyCode(),
                                        damageChecklistVO.getSection(),
										damageChecklistVO.getSequenceNumber());
						checklistMaster.update(damageChecklistVO);
					} catch (FinderException finderException) {
                        throw new SystemException(finderException
                                .getErrorCode());
					}
				}

			}
		}
	}

	/**
	 * @author A-3459 Finds all the warehouses
	 * @param companyCode
	 * @param airportCode
	 * @return Collection<WarehouseVO>
	 * @throws SystemException
	 * @throws ProxyException
	 */
    public Collection<WarehouseVO> findAllWarehousesforULD(String companyCode,
            String airportCode) throws SystemException {
		log.entering("UldController", "findAllWarehousesforULD");
		Collection<WarehouseVO> warehouses = null;
		try {
            warehouses = new WarehouseProxy().findAllWarehouses(companyCode,
                    airportCode);
		} catch (ProxyException proxyException) {
			throw new SystemException(proxyException.getMessage());
		}
		return warehouses;
	}

	/**
	 * @author A-2408
	 * @param companyCode
	 * @param period
	 * @throws SystemException
	 *             this method is used for updating the SCM status
	 */
    public void updateSCMStatusForULD(String companyCode, int period)
            throws SystemException, ULDDefaultsBusinessException,
            CurrencyConversionException, DimensionConversionException {
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		/*
		 * added by a-3278 for bug 56937 on 11Aug09 Performance issue on
		 * updating the scm status for ulds Procedure is implemented for the
		 * same
		 */
		String user = logonAttributes.getUserId();

		ULD.updateSCMStatusForULD(companyCode, period, user);
		// 56937 ends

		/*
		 * LocalDate currentDate = new LocalDate(logonAttributes
		 * .getAirportCode(), Location.ARP, true); final int seconds = 3600;
		 * final int hours = 24; final int millis = 1000 * seconds * hours;
		 * Collection<ULD> ulds = ULD.findAllULDObjectsforSCM(companyCode);
         * Collection<ULDDiscrepancyVO> disVOs = new ArrayList<ULDDiscrepancyVO>();
		 * log.log(Log.INFO,"ULD Objects"+ulds.size()); if(ulds!=null &&
		 * ulds.size()>0){ for(ULD uld:ulds){ if(uld.getScmDate()!=null){
		 *
		 * LocalDate scmDate = new LocalDate(logonAttributes.getAirportCode(),
		 * Location.ARP, true); //modified by a-3278 for bug 34176 on 21Jan09
		 * starts String date = TimeConvertor.toStringFormat( uld.getScmDate(),
		 * TimeConvertor.ADVANCED_DATE_FORMAT);
		 *
		 * LocalDate ldate = new LocalDate(uld.getCurrentStation(),
		 * Location.ARP, uld.getScmDate(), true) ;
		 * scmDate.setTime(ldate.getTime()); log.log(Log.INFO,"scmDate is
		 * ---"+scmDate);
		 *
		 * double diffMillis = currentDate.findDifference(scmDate); double
		 * dayDiff = diffMillis / millis; //modified by a-3278 for bug 34176 on
		 * 21Jan09 ends log.log(Log.INFO,"SCM Days difference"+dayDiff);
		 * if(dayDiff > period){ if(SCM_PENDING.equals(uld.getScmFlag())){
		 *
		 * ULDDiscrepancyVO uldDiscrepancyVO = new ULDDiscrepancyVO();
		 * uldDiscrepancyVO.setCompanyCode(companyCode);
		 * uldDiscrepancyVO.setUldNumber(uld.getUldPK().getUldNumber()); // pls
		 * check localDate uldDiscrepancyVO.setDiscrepencyDate(new
		 * LocalDate(logonAttributes.getAirportCode(), Location.ARP, false));
         * uldDiscrepancyVO.setOperationFlag(ULDDiscrepancyVO.OPERATION_FLAG_INSERT);
		 * uldDiscrepancyVO.setReportingStation(uld.getCurrentStation());
		 * uldDiscrepancyVO.setDiscrepencyCode(ULD_MISSING_DISCREPANCY);
		 * uldDiscrepancyVO.setUldStatus(ULD_MISSING_DISCREPANCY);
		 * uldDiscrepancyVO.setCloseStatus(DIS_OPEN);
		 * uldDiscrepancyVO.setLastUpdatedTime(new
		 * LocalDate(logonAttributes.getAirportCode(), Location.ARP, true));
		 * uldDiscrepancyVO.setLastUpdatedUser(logonAttributes.getUserId());
		 * if(uld.getLocation()!=null && uld.getFacilityType() !=null){
		 * uldDiscrepancyVO.setFacilityType(uld.getFacilityType());
		 * uldDiscrepancyVO.setLocation(uld.getLocation()); }else{
		 * ULDAirportLocationVO uldAirportLocationVO =
         * ULD.findCurrentLocation(companyCode,uld.getCurrentStation(),CONTENT_EMPTY);
         * if(uldAirportLocationVO != null){
         * uldDiscrepancyVO.setFacilityType(uldAirportLocationVO.getFacilityType());
		 * uldDiscrepancyVO.setLocation(uldAirportLocationVO.getFacilityCode());
		 * }else{ uldDiscrepancyVO.setFacilityType(ULDVO.NO_LOCATION);
		 * uldDiscrepancyVO.setLocation(ULDVO.NO_LOCATION); } }
		 * disVOs.add(uldDiscrepancyVO); //
		 * updateULDStockStatusForHHT(uldDiscrepancyVO); } // setting both SCM
         * Flag amd Date as blank; uld.setScmFlag(null); uld.setScmDate(null); } } } }
		 *
		 * log.log(Log.INFO,"Discrepency VOS"+disVOs); for(ULDDiscrepancyVO vo :
		 * disVOs){ updateULDStockStatusForHHT(vo); }
		 */

	}

	// --------------added by jisha for QF1022 starts-----------

	/**
	 * @author a-3093
	 * @param uldRepairFilterVO
	 * @return
	 * @throws SystemException
	 */
    public Page<ULDRepairDetailsListVO> listDamageRepairDetails(
            UldDmgRprFilterVO uldRepairFilterVO, int displayPage)
			throws SystemException {
		log.entering("ULDController", "listULDRepairDetails");

        return new ULDRepair().listDamageRepairDetails(uldRepairFilterVO, displayPage);
	}

	/**
	 * @author a-3093
	 * @param uldmovementFilterVO
	 * @return
	 * @throws SystemException
	 */

    public Page<OperationalULDAuditVO> listBuildupBreakdowndetails(
            ULDMovementFilterVO uldmovementFilterVO) throws SystemException {
		Page<OperationalULDAuditVO> operationalULDPage = null;
        //Added by A-7794 as part of ICRD-208677
        boolean isULDIntegrationEnabled = false;
		ArrayList<String> systemParameters = new ArrayList<String>();
		systemParameters.add(MailConstantsVO.ULD_INTEGRATION_ENABLED);
		HashMap<String, String> systemParameterMap = null;
		try {
            systemParameterMap = (HashMap<String, String>) new SharedDefaultsProxy().findSystemParameterByCodes(systemParameters);
        } catch (ProxyException e) {
            log.log(Log.INFO, "%%%%%% PROXY EXCEPTION%%%%%%%%%%%%%%%%",
                    e.getErrors());
		}
		log.log(Log.FINE, " systemParameterMap ", systemParameterMap);
		if (systemParameterMap != null
                && ContainerVO.FLAG_YES.equals(systemParameterMap
                        .get(MailConstantsVO.ULD_INTEGRATION_ENABLED))) {
			isULDIntegrationEnabled = true;
		}

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();

		OperationalULDAuditFilterVO operationalULDAuditFilterVO = new OperationalULDAuditFilterVO();
        operationalULDAuditFilterVO.setCompanyCode(logonAttributes
                .getCompanyCode());
        operationalULDAuditFilterVO.setFromDate(uldmovementFilterVO
                .getFromDate());
		operationalULDAuditFilterVO.setToDate(uldmovementFilterVO.getToDate());
        operationalULDAuditFilterVO.setUldNumber(uldmovementFilterVO
                .getUldNumber());
        operationalULDAuditFilterVO.setPageNumber(uldmovementFilterVO
                .getPageNumber());
        //Modified by A-7794 as part of ICRD-208677
		if (isULDIntegrationEnabled) {
			//Added by A-7794 as part of ICRD-224604
			operationalULDAuditFilterVO.setCarrierCode(logonAttributes.getOwnAirlineCode());
			operationalULDAuditFilterVO.setCarrierId(logonAttributes.getOwnAirlineIdentifier());
            operationalULDPage = new ULD()
                    .findOprAndMailULDAuditDetails(operationalULDAuditFilterVO);

            log.log(Log.INFO, "operationalULDPage", operationalULDPage);
        }else{
		try {
			operationalULDPage = new OperationsFltHandlingProxy()
					.findOprULDAuditDetails(operationalULDAuditFilterVO);

			log.log(Log.INFO, "operationalULDPage", operationalULDPage);

		} catch (ProxyException ex) {
            log.log(Log.INFO, "%%%%%%REGION PROXY EXCEPTION%%%%%%%%%%%%%%%%",
                    ex.getErrors());
		}
        }
		return operationalULDPage;

	}

	/**
	 * @author a-3093
	 * @param uldmovementFilterVO
	 * @return
	 * @throws SystemException
	 */

    public Page<AuditDetailsVO> findULDActionHistory(
            ULDMovementFilterVO uldmovementFilterVO) throws SystemException {

		log.entering("ULDController", "findULDActionHistory");


        return new ULDAudit().findULDActionHistory(uldmovementFilterVO);

	}

	// -----added by jisha for QF1022 ends-------------
	/**
	 * @author A-3429
	 * @param uldMovementFilterVO
	 * @return ULDNumberVO
	 * @throws SystemException
	 */
    public ULDNumberVO findULDHistoryCounts(
            ULDMovementFilterVO uldMovementFilterVO) throws SystemException {
		log.entering("ULDController", "findULDHistoryCounts");
		return ULD.findULDHistoryCounts(uldMovementFilterVO);
	}

	/**
	 *
	 * @param reconcileVOs
	 * @throws SystemException
	 */
    public HashMap<String, Collection<MessageVO>> sendSCMMessageforUlds(
            Collection<ULDSCMReconcileVO> reconcileVOs, Collection<MessageDespatchDetailsVO> additionaldespatchDetailsVOs) throws SystemException,
            MessageConfigException,ULDDoesNotExistsException {
		log.entering("ULDController", "sendSCMMessageforUlds" + reconcileVOs);
		boolean hasErrors = false;
		String scmSequenceNumber = null;

		StringBuilder uldNumbers = null;
		ULDSCMReconcileVO reconcileVo = null;
		ULDSCMReconcileVO reconcileVOToSend = new ULDSCMReconcileVO();

		Collection<ULDSCMReconcileVO> reconcileVOsToServer = new ArrayList<ULDSCMReconcileVO>();

		Collection<ULDSCMReconcileDetailsVO> scmDetailsVOs = new ArrayList<ULDSCMReconcileDetailsVO>();
		Collection<String> uldnos = new ArrayList<String>();
		HashMap<String, Collection<MessageVO>> encodedMsg = new HashMap<String, Collection<MessageVO>>();
		Collection<String> uldnostoremove = new ArrayList<String>();
		Collection<ULDSCMReconcileDetailsVO> scmVosToRemove = new ArrayList<ULDSCMReconcileDetailsVO>();
		//Added by A-7359 for ICRD-256969 starts here
		Collection<ULDSCMReconcileDetailsVO> scmVosMissing = new ArrayList<ULDSCMReconcileDetailsVO>();
		//Added by A-7359 for ICRD-256969 ends here
		if (reconcileVOs != null && reconcileVOs.size() > 0) {
			reconcileVo = reconcileVOs.iterator().next();
			reconcileVOToSend.setOperationFlag(reconcileVo.getOperationFlag());
			reconcileVOToSend.setCompanyCode(reconcileVo.getCompanyCode());
            reconcileVOToSend.setAirlineIdentifier(reconcileVo
                    .getAirlineIdentifier());
			reconcileVOToSend.setAirportCode(reconcileVo.getAirportCode());
            reconcileVOToSend
                    .setStockCheckDate(reconcileVo.getStockCheckDate());

			reconcileVOToSend.setRemarks(reconcileVo.getRemarks());

			log.log(Log.FINE, "Comapny code --->>>>", reconcileVo.getCompanyCode());
			log.log(Log.FINE, "OP FLAG-->>>from client", reconcileVo.getOperationFlag());
			log.log(Log.FINE, "scmDetailsVOs--before removing", scmDetailsVOs);
            if (reconcileVo.getReconcileDetailsVOs() != null
                    && reconcileVo.getReconcileDetailsVOs().size() > 0) {
                for (ULDSCMReconcileDetailsVO scmDetailsVO : reconcileVo
                        .getReconcileDetailsVOs()) {
					scmDetailsVO.setCompanyCode(reconcileVo.getCompanyCode());
					scmDetailsVOs.add(scmDetailsVO);
					log.log(Log.FINE, "****ULD numbers****", scmDetailsVO.getUldNumber());
					uldnos.add(scmDetailsVO.getUldNumber());
					/*Modified the check here for ICRD-256969 for Asiana
					 *for TK/ANA there will be impact on Save as draft flow 
					 *merge will coour here on rebase */
					if ("ERR1".equals(scmDetailsVO.getErrorCode())) {
						uldnostoremove.add(scmDetailsVO.getUldNumber());
						scmVosToRemove.add(scmDetailsVO);
					}else if(ULDVO.SCM_MISSING_STOCK.equals(scmDetailsVO.getUldStatus())){
						uldnostoremove.add(scmDetailsVO.getUldNumber());
						scmVosMissing.add(scmDetailsVO);
					}

				}
			}
		}
        ULDDiscrepancy.updateULDDiscrepancy(reconcileVo.getCompanyCode(),
                reconcileVo.getAirportCode(), uldnos);
        log.log(Log.FINE, "scmDetailsVO size in Controller (from Client)--->>",
                scmDetailsVOs.size());
		scmDetailsVOs.removeAll(scmVosToRemove);
		//Added by A-7359 for ICRD-256969 starts here
		scmVosToRemove.addAll(scmVosMissing); 
		//Added by A-7359 for ICRD-256969 ends here
		uldnos.removeAll(uldnostoremove);
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		if (scmVosToRemove != null && scmVosToRemove.size() > 0) {
			log.log(Log.INFO, "Missing VOs to be removed", scmVosToRemove);
			for (ULDSCMReconcileDetailsVO recVO : scmVosToRemove) {
				if ("ERR1".equals(recVO.getErrorCode()) || ULDVO.SCM_MISSING_STOCK.equals(recVO.getUldStatus())) {
					ULDDiscrepancyVO uldDiscrepancyVO = new ULDDiscrepancyVO();
					uldDiscrepancyVO.setCompanyCode(recVO.getCompanyCode());
					uldDiscrepancyVO.setUldNumber(recVO.getUldNumber()); // pls
					// check
					// localDate
                    uldDiscrepancyVO.setDiscrepencyDate(new LocalDate(
                            logonAttributes.getAirportCode(), Location.ARP,
                            false));
                    uldDiscrepancyVO
                            .setOperationFlag(ULDDiscrepancyVO.OPERATION_FLAG_INSERT);
                    uldDiscrepancyVO
                            .setReportingStation(recVO.getAirportCode());
                    uldDiscrepancyVO
                            .setDiscrepencyCode(ULD_MISSING_DISCREPANCY);
                    uldDiscrepancyVO.setUldStatus(ULD_MISSING_DISCREPANCY);
                    uldDiscrepancyVO.setCloseStatus(DIS_OPEN);
                    uldDiscrepancyVO.setLastUpdatedTime(new LocalDate(
                            logonAttributes.getAirportCode(), Location.ARP,
                            true));
                    uldDiscrepancyVO.setLastUpdatedUser(logonAttributes
                            .getUserId());
                    if (recVO.getLocation() != null
                            && recVO.getFacilityType() != null) {
                        uldDiscrepancyVO.setFacilityType(recVO
                                .getFacilityType());
						uldDiscrepancyVO.setLocation(recVO.getLocation());
					} else {
                        ULDAirportLocationVO uldAirportLocationVO = ULD
                                .findCurrentLocation(recVO.getCompanyCode(),
										recVO.getAirportCode(), CONTENT_EMPTY);
						if (uldAirportLocationVO != null) {
                            uldDiscrepancyVO
                                    .setFacilityType(uldAirportLocationVO
                                            .getFacilityType());
                            uldDiscrepancyVO.setLocation(uldAirportLocationVO
                                    .getFacilityCode());
						} else {
							uldDiscrepancyVO.setFacilityType(ULDVO.NO_LOCATION);
							uldDiscrepancyVO.setLocation(ULDVO.NO_LOCATION);
						}
					}
					try {
						updateULDStockStatusForHHT(uldDiscrepancyVO);
					} catch (DimensionConversionException e) {
						log.log(Log.INFO, "DimensionConversionException");
					} catch (ULDDefaultsBusinessException e) {
						log.log(Log.INFO, "ULDDefaultsBusinessException");
					} catch (CurrencyConversionException e) {
						log.log(Log.INFO, "CurrencyConversionException");
					}
				}
			}

		}
		// ends
		// added by a-3045 for bug 26551 starts
		TransactionVO transactionVO = new TransactionVO();
		Collection<ULDTransactionDetailsVO> txnDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
        if (reconcileVOs != null && reconcileVOs.size() > 0
                && reconcileVo.getReconcileDetailsVOs() != null
                && reconcileVo.getReconcileDetailsVOs().size() > 0) {
            for (ULDSCMReconcileDetailsVO reconcileDetailsVO : reconcileVo
                    .getReconcileDetailsVOs()) {
				if ("ERR2".equals(reconcileDetailsVO.getErrorCode())
                        || ULDVO.SCM_FOUND_STOCK.equals(reconcileDetailsVO.getUldStatus())||"N".equals(reconcileDetailsVO.getUldStatus())) {
					// reconcileDetailsVOsFinal.add(reconcileDetailsVO);
					ULD uld = null;
					try {
                        uld = ULD.find(reconcileDetailsVO.getCompanyCode(),
                                reconcileDetailsVO.getUldNumber());
                    } catch (FinderException finderException) {
                        log
                                .log(
                                        Log.INFO,
                                        "%%%%ERR2%% before entering the if logonAttributes.getOwnAirlineNumericCode()%%%",
                                        logonAttributes
                                                .getOwnAirlineCode());
                        // Changed by Nishanth ,ve doubt
                        if (reconcileDetailsVO.getUldNumber().endsWith(
                                logonAttributes.getOwnAirlineCode())) {
                            log.log(Log.INFO,
                                    "%%%%ERR2%%Creating a new ULD%%%",
                                    reconcileDetailsVO.getUldNumber());
                            log
                                    .log(
                                            Log.INFO,
                                            "%%%%ERR2%%after entering the if logonAttributes.getOwnAirlineNumericCode()%%%",
                                            logonAttributes
                                                            .getOwnAirlineNumericCode());
                            // Creation of ULD
                            ULDVO uldVO = new ULDVO();
                            String uldType = reconcileDetailsVO.getUldNumber()
                                    .substring(0, 3);
                            
                            ULDTypeVO typeVo = null;
                            if(reconcileDetailsVO.getUldNumber() != null && reconcileDetailsVO.getUldNumber().length() > 0) {
                            	typeVo = findULDTypeStructuralDetails(
                                        reconcileDetailsVO.getCompanyCode(),
                                        reconcileDetailsVO.getUldNumber());
                            }
                            else {
                            	typeVo = findULDTypeStructuralDetails(
                                        reconcileDetailsVO.getCompanyCode(),
                                        uldType);
                            }
                            
							uldVO.setCompanyCode(reconcileVo.getCompanyCode());
                            uldVO.setUldNumber(reconcileDetailsVO
                                    .getUldNumber());
                            uldVO.setUldType(uldType);
                            uldVO.setUldGroupCode(typeVo.getUldGroupCode());
                            uldVO.setOperationalAirlineIdentifier(reconcileVo
                                    .getAirlineIdentifier());
                            // here curent owner code is used only to get
                            // OwnerId at this point

                            int len = reconcileDetailsVO.getUldNumber()
                                    .length();
                            String twoalphacode = reconcileDetailsVO
                                    .getUldNumber().substring(len - 2);
                            String threealphacode = reconcileDetailsVO
                                    .getUldNumber().substring(len - 3);
                            String arldtl = findOwnerCode(reconcileDetailsVO
                                    .getCompanyCode(), twoalphacode,
                                    threealphacode);
                            //Null Check added as part of ICRD-21184
                            if(arldtl != null) {
                            String airlineDetailArr[] = arldtl.split("~");
                            int ownerAirlineId = Integer
                                    .valueOf(airlineDetailArr[1]);

                            uldVO.setOwnerAirlineIdentifier(ownerAirlineId);
                            }

                            uldVO.setLastUpdateTime(new LocalDate(reconcileVo
                                    .getAirportCode(), Location.ARP, true));
                            uldVO.setBorrowReferenceNumber(0);
                            uldVO
                                    .setLastUpdateUser(logonAttributes
                                            .getUserId());
							/*uldVO.setDisplayBaseHeight(typeVo
                                    .getBaseDimHeight());
                            uldVO.setDisplayBaseLength(typeVo
                                    .getBaseDimLength());
                            uldVO.setDisplayBaseWidth(typeVo.getBaseDimWidth());
                            uldVO.setDisplayDimensionUnit(typeVo
									.getBaseDimUnit());*/
							uldVO.setStructuralWeight(typeVo
                                    .getStructuralWtLmt());
							//uldVO.setDisplayStructuralWeightUnit(typeVo
							//		.getStructuralWtLmtUnit());
                            uldVO.setDisplayIataReplacementCost(typeVo
                                    .getIATARepCost());
                            uldVO.setDisplayIataReplacementCostUnit(typeVo
                                    .getIATARepCostUnit());
                            uldVO.setCurrentStation(reconcileVo
                                    .getAirportCode());
							uldVO.setOwnerStation(reconcileVo.getAirportCode());
							uldVO.setDamageStatus(ULDVO.DAMAGED_STATUS);
							uldVO.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
                            uldVO
                                    .setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
							uldVO.setTareWeight(typeVo.getTareWt());
							//uldVO.setDisplayTareWeightUnit(typeVo
							//		.getTareWtUnit());
							uldVO.setBaseHeight(typeVo.getBaseDimHeight());
							uldVO.setBaseLength(typeVo.getBaseDimLength());
							uldVO.setBaseWidth(typeVo.getBaseDimWidth());
							uldVO.setTransitStatus(NOT_INTRANSIT);
							uldVO.setUldNature(ULDNATURE_GEN);
							uldVO.setScmFlag(SCM_RECEIVED);
							uldVO.setScmDate(reconcileVo.getStockCheckDate());
							/*
							 * Added by a-3278 for CR QF1449 on 02Mar10 A new
							 * field LSTSCMDAT in the ULDMST table is added to
							 * keep track of the last SCM date for a ULD,
							 * populated every time an SCM strikes the system
							 * with the ULD
							 */
                            uldVO.setLastSCMDate(reconcileVo
                                    .getStockCheckDate());
                            // QF1449 ends
                            uldVO
                                    .setOperationalFlag(ULDVO.OPERATION_FLAG_INSERT);
                            if (reconcileDetailsVO.getFacilityType() != null
                                    && reconcileDetailsVO.getLocation() != null) {
                                uldVO.setLocation(reconcileDetailsVO
                                        .getLocation());
                                uldVO.setFacilityType(reconcileDetailsVO
                                        .getFacilityType());
                            } else {
                                ULDAirportLocationVO uldAirportLocationVO = ULD
                                        .findCurrentLocation(reconcileVo
                                                .getCompanyCode(), reconcileVo
                                                .getAirportCode(),
                                                CONTENT_EMPTY);
                                log.log(Log.INFO,
                                        "%%%%ULDAirportLocationVO%%%",
                                        uldAirportLocationVO);
                                if (uldAirportLocationVO != null) {
                                    uldVO.setLocation(uldAirportLocationVO
                                            .getFacilityCode());
                                    uldVO.setFacilityType(uldAirportLocationVO
                                            .getFacilityType());
                                } else {
                                    uldVO.setFacilityType(ULDVO.NO_LOCATION);
                                    uldVO.setLocation(ULDVO.NO_LOCATION);
                                }
                            }
                            try {
                                //A-5125 for ICRD-26008 ULD VAILDATION WITH CAN CRETE FLAG
                                Collection<String> parCodes=new ArrayList<String>();
                                parCodes.add("uld.defaults.cancreateuld");
                                String parameter=null;
                                try {
                                    Map<String,String> parameterVal=new SharedDefaultsProxy().findSystemParameterByCodes(parCodes);
                                    if(parameterVal!=null)
                                        {
                                        parameter=parameterVal.get("uld.defaults.cancreateuld");
                                        }
                                } catch (ProxyException e) {
                                    // To be reviewed Auto-generated catch block
//printStackTraccee()();
                                }
                                if(ULDVO.FLAG_YES.equals(parameter)){
								new ULD(uldVO);
								} else {
									if (uldNumbers == null) {
										uldNumbers = new StringBuilder(uldVO.getUldNumber());
                                    }else {
										uldNumbers.append(",").append(uldVO.getUldNumber());
									}									
                                    //throw new ULDDoesNotExistsException(ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS, new Object[]{uldVO.getUldNumber()});
								}
							} catch (CurrencyConversionException currencyConversionException) {
							} catch (DimensionConversionException dimensionConversionException) {
							}
						} else {
                            log.log(Log.INFO, "%%%%ERR2%%Borrow of ULD%%%",
                                    reconcileDetailsVO.getUldNumber());
							ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
							transactionVO.setCompanyCode(reconcileVo.getCompanyCode());
                            transactionDetailsVO.setCompanyCode(reconcileVo
                                    .getCompanyCode());
                            transactionDetailsVO
                                    .setDamageStatus(ULDVO.DAMAGED_STATUS);
                            int len = reconcileDetailsVO.getUldNumber()
                                    .length();
                            String twoalphacode = reconcileDetailsVO
                                    .getUldNumber().substring(len - 2);
                            String threealphacode = reconcileDetailsVO
                                    .getUldNumber().substring(len - 3);
                            String arldtl = findOwnerCode(reconcileDetailsVO
                                    .getCompanyCode(), twoalphacode,
                                    threealphacode);
                            // Changed by Nishanth ,ve doubt
                            String oprAirlineCode = null;
                            //Null Check added as part of ICRD-21184
                            int ownerAirlineId = 0;
                            if(arldtl != null) {
                                String airlineDetailArr[] = arldtl.split("~");
                                ownerAirlineId = Integer
                                        .valueOf(airlineDetailArr[1]);
                            if (("2").equals(airlineDetailArr[0])) {
                                transactionDetailsVO
                                        .setFromPartyCode(twoalphacode);
								// Changed by Nishanth ,ve doubt
                                transactionVO.setFromPartyCode(twoalphacode);
								oprAirlineCode = twoalphacode;
							} else {
                                transactionDetailsVO
                                        .setFromPartyCode(threealphacode);
								// Changed by Nishanth ,ve doubt
                                transactionVO.setFromPartyCode(threealphacode);
								oprAirlineCode = threealphacode;
								}
							}
                            transactionDetailsVO
                                    .setFromPartyIdentifier(ownerAirlineId);
                            transactionDetailsVO
                                    .setLastUpdateUser(logonAttributes
                                            .getUserId());
                            transactionDetailsVO
                                    .setOperationalAirlineIdentifier(reconcileVo
                                            .getAirlineIdentifier());
                            transactionDetailsVO
                                    .setCurrOwnerCode(ownerAirlineId);
                            transactionDetailsVO
                                    .setPartyType(PARTYTYPE_AIRLINE);
                            transactionDetailsVO.setUldNature("GEN");
                            transactionDetailsVO.setUldConditionCode("SER");
                            // Changed by Nishanth ,ve doubt
                            String crn = null;
                            String ctrlRcptNo = findCRNForULDTransaction(
                                    logonAttributes.getCompanyCode(),
                                    oprAirlineCode);
                            //Changed for ICRD-6983 by A-4803 on 21Sep11
                            crn = new StringBuilder().append(
                                    ctrlRcptNo.substring(0, 4)).append("0")
                                    .append(ctrlRcptNo.substring(4, 11))
                                    .toString();
							transactionDetailsVO.setControlReceiptNumber(crn);
							// To be reviewed.QF should be passed from client
							// Changed by Nishanth ,ve doubt
							if (reconcileVo.getAirlineIdentifier() > 0) {
								AirlineValidationVO airlineValidationVO = null;
								try {
                                    airlineValidationVO = new SharedAirlineProxy()
                                            .findAirline(
                                                    logonAttributes
                                                            .getCompanyCode(),
                                                    reconcileVo
                                                            .getAirlineIdentifier());
								} catch (ProxyException e) {
									// proxy exception
								}
								// ariline code
                                transactionDetailsVO
                                        .setToPartyCode(airlineValidationVO
                                                .getAlphaCode());
                                transactionVO.setToPartyCode(airlineValidationVO.getAlphaCode());
								transactionVO.setToPartyName(airlineValidationVO.getAirlineName());
							}
                            transactionDetailsVO
                                    .setToPartyIdentifier(reconcileVo
                                            .getAirlineIdentifier());
                            transactionDetailsVO
                                    .setUldNumber(reconcileDetailsVO
                                            .getUldNumber());
                            transactionDetailsVO
                                    .setTransactionStationCode(reconcileVo
                                            .getAirportCode());
                            transactionDetailsVO.setTxStationCode(reconcileVo
                                    .getAirportCode());
                            transactionDetailsVO
                                    .setTransactionType(LOANED_TRANSACTION);
                            transactionDetailsVO.setTransactionStatus(TO_BE_RETURNED);
                            transactionDetailsVO
                                    .setTransactionRemark(reconcileVo
                                            .getRemarks());
                            transactionDetailsVO.setTransactionNature("T");
                            transactionDetailsVO.setUldType(reconcileDetailsVO
                                    .getUldNumber().substring(0, 3));
                            transactionDetailsVO.setTransactionDate(reconcileVo
                                    .getStockCheckDate());
                            //Modified by A-3415 for ICRD-114538 since Borrow txn no longer exists
                            /*try {
                                createBorrowTransactions(transactionDetailsVO);
                            } catch (CurrencyConversionException currencyConversionException) {
                            } catch (DimensionConversionException dimensionConversionException) {
                            } */
							//Updating from Party for ICRD-349648
							transactionDetailsVO = populateFromParty(transactionDetailsVO);

                            txnDetailsVOs.add(transactionDetailsVO);
						}
					}
					if (uld != null) {
						// Only if current station is different movement need to
						// be marked else found discrepancy will be saved
                        if (!uld.getCurrentStation().equalsIgnoreCase(
                                reconcileVo.getAirportCode())) {
                            log.log(Log.INFO,
                                    "%%%%ERR2%%Marking the Movement%%%",
                                    reconcileDetailsVO
                                                            .getUldNumber());
							// Doing ULD Movement if uld not in airport
							Collection<String> uldnums = new ArrayList<String>();
							uldnums.add(reconcileDetailsVO.getUldNumber());
							Collection<ULDMovementVO> movementVOs = null;
							ULDMovementVO movVO = new ULDMovementVO();
							movVO.setCompanyCode(reconcileVo.getCompanyCode());
                            movVO.setUldNumber(reconcileDetailsVO
                                    .getUldNumber());
                            movVO.setPointOfLading(uld.getCurrentStation());
                            movVO.setPointOfUnLading(reconcileVo
                                    .getAirportCode());
                            movVO.setCurrentStation(reconcileVo
                                    .getAirportCode());
                            movVO.setDummyMovement(true);
                            movVO.setUpdateCurrentStation(true);
                            movVO.setLastUpdatedUser(logonAttributes
                                    .getUserId());
							if (reconcileVo.getAirportCode() != null
                                    && reconcileVo.getAirportCode().trim()
                                            .length() > 0) {
                                movVO.setLastUpdatedTime(new LocalDate(
                                        reconcileVo.getAirportCode(),
                                        Location.ARP, true));
                            } else {
                                movVO.setLastUpdatedTime(new LocalDate(
                                        reconcileVo.getAirportCode(),
                                        Location.ARP, true));
							}
							movVO.setScmFlag(SCM_RECEIVED);
							movVO.setScmDate(reconcileVo.getStockCheckDate());
							
							movementVOs = new ArrayList<ULDMovementVO>();
							movementVOs.add(movVO);
							try {
								saveULDMovement(uldnums, movementVOs);
							} catch (ULDDoesNotExistsException uldDoesNotExistsException) {
								// ULDdoes not exists
							}
							if ("L".equals(uld.getOverallStatus())) {
								uld.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
							}
						} else {
							ULDDiscrepancyVO uldDiscrepancyVO = new ULDDiscrepancyVO();
                            uldDiscrepancyVO.setCompanyCode(reconcileVo
                                    .getCompanyCode());
                            uldDiscrepancyVO.setUldNumber(reconcileDetailsVO
                                    .getUldNumber());
                            uldDiscrepancyVO.setDiscrepencyDate(reconcileVo
                                    .getStockCheckDate());
                            uldDiscrepancyVO
                                    .setOperationFlag(ULDDiscrepancyVO.OPERATION_FLAG_INSERT);
                            uldDiscrepancyVO.setReportingStation(reconcileVo
                                    .getAirportCode());
                            uldDiscrepancyVO
                                    .setDiscrepencyCode(ULD_FOUND_DISCREPANCY);
                            uldDiscrepancyVO
                                    .setUldStatus(ULD_FOUND_DISCREPANCY);
                            uldDiscrepancyVO.setCloseStatus(DIS_OPEN);
                            uldDiscrepancyVO.setLastUpdatedTime(new LocalDate(
                                    logonAttributes.getAirportCode(),
                                    Location.ARP, true));
                            uldDiscrepancyVO.setLastUpdatedUser(logonAttributes
                                    .getUserId());
                            if (reconcileDetailsVO.getLocation() != null
                                    && reconcileDetailsVO.getFacilityType() != null) {
                                uldDiscrepancyVO
                                        .setFacilityType(reconcileDetailsVO
                                                .getFacilityType());
                                uldDiscrepancyVO.setLocation(reconcileDetailsVO
                                        .getLocation());
                            } else {
                                ULDAirportLocationVO uldAirportLocationVO = ULD
                                        .findCurrentLocation(reconcileDetailsVO
                                                .getCompanyCode(),
                                                reconcileDetailsVO
                                                        .getAirportCode(),
                                                CONTENT_EMPTY);
                                if (uldAirportLocationVO != null) {
                                    uldDiscrepancyVO
                                            .setFacilityType(uldAirportLocationVO
                                                    .getFacilityType());
                                    uldDiscrepancyVO
                                            .setLocation(uldAirportLocationVO
                                                    .getFacilityCode());
                                } else {
                                    uldDiscrepancyVO
                                            .setFacilityType(ULDVO.NO_LOCATION);
                                    uldDiscrepancyVO
                                            .setLocation(ULDVO.NO_LOCATION);
                                }
                            }
                            try {
                                updateULDStockStatusForHHT(uldDiscrepancyVO);
                            } catch (DimensionConversionException e) {
                            } catch (ULDDefaultsBusinessException e) {
                            } catch (CurrencyConversionException e) {
                            }
                        }
                    }
                    // added by a-3045 starts, otherwise the reconcile buttons
                    // will be shown in SCM error log screens.
                    reconcileDetailsVO.setErrorCode(null);
                    // added by a-3045 ends.
                }
            }
            //Modified by A-3415 for ICRD-114538
            if(txnDetailsVOs!=null && txnDetailsVOs.size() > 0){
				transactionVO.setUldTransactionDetailsVOs(txnDetailsVOs);
                createULDLoan(transactionVO);
			}
			if (uldNumbers != null && uldNumbers.length() > 0) {
                throw new ULDDoesNotExistsException(ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS, new Object[]{uldNumbers.toString()});
			}
		}
		// added by a-3045 for bug 26551 ends
		// added by a-3045 for bug24476 starts
		if (uldnos != null && uldnos.size() > 0) {
			/*
			 * added by a-3278 for bug 34825 on 29Jan09 To populate the SCMFlG
			 * ang SCMDAT for the ULDs on generating SCM Value Y will be SCMFLG
			 * value for the scm generated ULDs,and N for the other ULDs
			 * stockCheckDate is set for the SCMDAT
			 */
			ULD uldObj = null;
			try {
                uldObj = ULD.find(reconcileVOs.iterator().next()
                        .getCompanyCode(), uldnos.iterator().next());
			} catch (FinderException finderException) {

			}
			if (uldObj != null) {
				Transaction tx = null;
				boolean success = false;
				try {
					ULDListFilterVO updatingVO = new ULDListFilterVO();
                    TransactionProvider tm = PersistenceController
                            .getTransactionProvider();
                    tx = tm.getNewTransaction(false);

					updatingVO.setCompanyCode(reconcileVo.getCompanyCode());
					updatingVO.setCurrentStation(reconcileVo.getAirportCode());
                    updatingVO.setAirlineidentifier(reconcileVo
                            .getAirlineIdentifier());
                    updatingVO.setLastMovementDate(reconcileVo
                            .getStockCheckDate());
					ULD.updateSCMStatusForPendingULDs(updatingVO);

					success = true;
				} finally {
					if (success) {
						tx.commit();
					} else {
						tx.rollback();
					}
				}
			}

            Collection<ULD> ulds = ULD.findULDObjects(reconcileVo
                    .getCompanyCode(), uldnos);
            if (ulds != null && ulds.size() > 0) {
                for (ULD uld : ulds) {
					/*commented for IASCB-79704
					 */
                    log.log(Log.INFO, "%%%%uld.getScmDate()%%%", uld.getScmDate());
                    log.log(Log.INFO, "%%%%uld.getScmFlag()%%%", uld.getScmFlag());
                    log.log(Log.INFO, "%%%%reconcileVo issssssssss%%%",
                            reconcileVo);
                    if (uld.getScmFlag() == null
                            || "N".equalsIgnoreCase(uld.getScmFlag())) {
						log.log(Log.INFO, "^^^^^^^^^^", uld.getUldPK().getUldNumber());
						uld.setScmFlag("Y");
						uld.setScmDate(reconcileVo.getStockCheckDate());
						/*
						 * Added by a-3278 for CR QF1449 on 02Mar10 A new field
						 * LSTSCMDAT in the ULDMST table is added to keep track
						 * of the last SCM date for a ULD, populated every time
						 * an SCM strikes the system with the ULD
						 */
						uld.setLastSCMDate(reconcileVo.getStockCheckDate());
						// QF1449 ends
					}
					// a-3278 ends
				}
			}
		}
        log.log(Log.FINE, "scmDetailsVO size in Controller (from Server)--->>",
                scmDetailsVOs.size());
		if (scmDetailsVOs != null && scmDetailsVOs.size() > 0) {
			reconcileVOToSend.setReconcileDetailsVOs(scmDetailsVOs);

		}
		log.log(Log.FINE, "OPFLAG reconcileVOsToServer--->>", reconcileVOToSend.getOperationFlag());
		reconcileVOsToServer.add(reconcileVOToSend);

        log.log(Log.FINE, "Final save reconcileVOsToServer--->>",
                reconcileVOsToServer.size());
        log.log(Log.FINE, "save reconcileVOsToServer VOs----->>",
                reconcileVOsToServer);
		if (reconcileVOsToServer != null && reconcileVOsToServer.size() > 0) {
			for (ULDSCMReconcileVO reconcileVO : reconcileVOsToServer) {
                if (ULDSCMReconcileVO.OPERATION_FLAG_DELETE
                        .equalsIgnoreCase(reconcileVO.getOperationFlag())) {
                    ULDSCMReconcile uLDSCMReconcile = null;
                    try {
                        uLDSCMReconcile = ULDSCMReconcile.find(reconcileVO);
                    } catch (FinderException e) {
                        log.log(Log.FINE,
                                "FINDER CAUGHT << SYSTEM THROWN 22222");
						throw new SystemException(e.getErrorCode());
					}
					uLDSCMReconcile.remove();
				}
			}
			Collection<MessageVO> msgVOs = null;
			for (ULDSCMReconcileVO reconcileVO : reconcileVOsToServer) {
				log.log(Log.FINE, "OPeration Flag--->>>>>>", reconcileVO.getOperationFlag());
                if (ULDSCMReconcileVO.OPERATION_FLAG_INSERT
                        .equalsIgnoreCase(reconcileVO.getOperationFlag())) {
					new SCMValidator().checkForUldInSystem(reconcileVO);
					new SCMValidator().checkForLoanOrBorrow(reconcileVO);
					// First Time The messgae Sending flag will be 'P' for
					// pending
					// when the message is send it will change to 'S' for send
					log.log(Log.FINE, "JUST INSIDE SETTING SEQUENCENUMBER");
                    if (!("O"
                            .equalsIgnoreCase(reconcileVO.getMessageSendFlag()))) {
						reconcileVO.setMessageSendFlag("P");
					}
					// Added by a-3045 for bug 23789,Auditing starts
					/*
					 * Collection<String> auditULDs = new ArrayList<String>();
					 *
					 * if(reconcileVO.getReconcileDetailsVOs() !=null &&
					 * reconcileVO.getReconcileDetailsVOs().size()>0){ for
					 * (ULDSCMReconcileDetailsVO vo :
					 * reconcileVO.getReconcileDetailsVOs() ) {
					 * auditULDs.add(vo.getUldNumber()); } } ULDConfigAuditVO
					 * uldConfigAuditVO = null; log.log(Log.FINE,
					 * "---------setting auditULDs in
					 * sendSCMMessageforUlds------"+auditULDs); StringBuffer
					 * additionalInfo = null; int i = 0; StringBuilder
					 * uldNumberString = null; for(String uldnumb : auditULDs){
					 * if(i == 0){ uldNumberString = new StringBuilder();
					 * uldNumberString.append(uldnumb); }else{
					 * uldNumberString.append(",").append(uldnumb); } if(i ==
					 * 15){ uldConfigAuditVO = new
					 * ULDConfigAuditVO(ULDAgreementVO.MODULE,
					 * ULDAgreementVO.SUBMODULE, ULDAgreementVO.ENTITY);
					 * additionalInfo = new StringBuffer();
                     * uldConfigAuditVO.setCompanyCode(logonAttributes.getCompanyCode());
                     * String airportCode = logonAttributes.getAirportCode();
					 * uldConfigAuditVO.setTxnTime( new LocalDate(airportCode,
					 * Location.ARP,true).toGMTDate());
					 * uldConfigAuditVO.setTxnLocalTime(new
					 * LocalDate(airportCode, Location.ARP, true));
					 * uldConfigAuditVO.setUserId(logonAttributes.getUserId());
                     * uldConfigAuditVO.setAuditRemarks(reconcileVO.getRemarks());
                     * additionalInfo.append("Aiport - ");
					 * if(reconcileVO.getAirportCode() != null &&
					 * reconcileVO.getAirportCode().trim().length() > 0){
					 * additionalInfo.append(reconcileVO.getAirportCode());
					 * }else{ additionalInfo.append(airportCode); }
					 * additionalInfo.append("/Date -");
					 * additionalInfo.append(reconcileVO.getStockCheckDate());
					 * additionalInfo.append("/ULDNos. - ");
					 * additionalInfo.append(uldNumberString.toString());
                     * uldConfigAuditVO.setAdditionalInformation(additionalInfo.toString());
					 * uldConfigAuditVO.setActionCode(SENT_SCMMESSAGE);
					 * AuditUtils.performAudit(uldConfigAuditVO); i = 0; }else{
					 * i++; } } if (i > 0){ log.log(Log.INFO, " sent audit count
					 * of ULDs is less than 15"+uldNumberString);
					 * uldConfigAuditVO = new
					 * ULDConfigAuditVO(ULDAgreementVO.MODULE,
					 * ULDAgreementVO.SUBMODULE, ULDAgreementVO.ENTITY);
					 * additionalInfo = new StringBuffer();
                     * uldConfigAuditVO.setCompanyCode(logonAttributes.getCompanyCode());
                     * String airportCode = logonAttributes.getAirportCode();
					 * uldConfigAuditVO.setTxnTime( new LocalDate(airportCode,
					 * Location.ARP,true).toGMTDate());
					 * uldConfigAuditVO.setTxnLocalTime(new
					 * LocalDate(airportCode, Location.ARP, true));
					 * uldConfigAuditVO.setUserId(logonAttributes.getUserId());
                     * uldConfigAuditVO.setAuditRemarks(reconcileVO.getRemarks());
                     * additionalInfo.append("Aiport - ");
					 * if(reconcileVO.getAirportCode() != null &&
					 * reconcileVO.getAirportCode().trim().length() > 0){
					 * additionalInfo.append(reconcileVO.getAirportCode());
					 * }else{ additionalInfo.append(airportCode); }
					 * additionalInfo.append("/Date -");
					 * additionalInfo.append(reconcileVO.getStockCheckDate());
					 * additionalInfo.append("/ULDNos. - ");
					 * additionalInfo.append(uldNumberString.toString());
                     * uldConfigAuditVO.setAdditionalInformation(additionalInfo.toString());
					 * uldConfigAuditVO.setActionCode(SENT_SCMMESSAGE);
					 * log.log(Log.FINE, "GOING TO PERFORM AUDIT
					 * "+uldConfigAuditVO);
					 * AuditUtils.performAudit(uldConfigAuditVO); }
					 */
					// Added by a-3045 for bug 23789, Auditing ends
					new ULDSCMReconcile(reconcileVO);
					// scmSequenceNumber = reconcileVO.getSequenceNumber();

                    scmSequenceNumber = new StringBuilder(reconcileVO
                            .getSequenceNumber()).append("-").append(
                            reconcileVO.getCompanyCode()).append("-").append(
                            reconcileVO.getAirlineIdentifier()).append("-")
                            .append(reconcileVO.getAirportCode()).toString();

					new SCMValidator().changeDiscrepancyDetails(reconcileVO);
					if (reconcileVO.getReconcileDetailsVOs() != null
							&& reconcileVO.getReconcileDetailsVOs().size() > 0) {
                        for (ULDSCMReconcileDetailsVO detailsVO : reconcileVO
                                .getReconcileDetailsVOs()) {
                            if (detailsVO.getErrorCode() != null
                                    && detailsVO.getErrorCode().trim().length() > 0) {
								hasErrors = true;
								log.log(Log.FINE, "ERRORS EXIST IN SCM----");
								break;
							}
						}
					}
                    if (!hasErrors
                            && !("O".equalsIgnoreCase(reconcileVO
                                    .getMessageSendFlag()))) {

                        msgVOs = encodeSCMMessage(reconcileVO,additionaldespatchDetailsVOs);
                        ULDSCMReconcile uLDSCMReconcile = null;
                        try {
                            uLDSCMReconcile = ULDSCMReconcile.find(reconcileVO);
                        } catch (FinderException e) {
                            log.log(Log.FINE,
                                    "FINDER CAUGHT << SYSTEM THROWN 33333");
                            throw new SystemException(e.getErrorCode());
                        }

                        uLDSCMReconcile.setMessageSendFlag("S");
                        //uLDSCMReconcile.setMessageSendFlag("P");

					}
					if (scmSequenceNumber != null) {
						if (msgVOs != null && msgVOs.size() > 0) {
							encodedMsg.put(scmSequenceNumber, msgVOs);
						} else {
                            encodedMsg.put(scmSequenceNumber,
                                    new ArrayList<MessageVO>());
						}
                    }
                } else if (ULDSCMReconcileVO.OPERATION_FLAG_UPDATE
                        .equalsIgnoreCase(reconcileVO.getOperationFlag())) {
                    new SCMValidator().checkForUldInSystem(reconcileVO);
                    new SCMValidator().checkForLoanOrBorrow(reconcileVO);
                    ULDSCMReconcile uLDSCMReconcile = null;
                    try {
                        uLDSCMReconcile = ULDSCMReconcile.find(reconcileVO);
                    } catch (FinderException e) {
                        log.log(Log.FINE,
                                "FINDER CAUGHT << SYSTEM THROWN 44444");
						throw new SystemException(e.getErrorCode());
					}
					uLDSCMReconcile.update(reconcileVO);
				}
			}
		}
		return encodedMsg;
	}

	/**
	 * @author A-2408
	 * @param uldPoolOwnerFilterVO
	 * @return
	 * @throws SystemException
	 *             this method checks if two airlines are pool owners in segment
	 */
    public boolean checkforPoolOwner(ULDPoolOwnerFilterVO uldPoolOwnerFilterVO)
            throws SystemException {
		log.entering("ULD Controller", "checkforPoolOwner");
		return ULDPoolOwner.checkforPoolOwner(uldPoolOwnerFilterVO);
	}

	/**
	 * @author A-3459
	 * @param uldFlightMessageReconcileVO
	 * @return
	 * @throws SystemException
	 *
	 */
    public Page<ULDFlightMessageReconcileVO> findMissingUCMs(
            ULDFlightMessageReconcileVO uldFlightMessageReconcileVO)
			throws SystemException {
		log.entering("ULDController", "findMissingUCMs");
        return ULDFlightMessageReconcile
                .findMissingUCMs(uldFlightMessageReconcileVO);
	}

	/**
	 * For findMUCRefNumberLov
	 *
	 * @author A-3045
	 * @param companyCode
	 * @param displayPage
	 * @param mucRefNum
	 * @param mucDate
	 * @return Page<String>
	 * @throws SystemException
	 */
    public Page<String> findMUCRefNumberLov(String companyCode,
            int displayPage, String mucRefNum, String mucDate)
            throws SystemException {
        log.entering("UldController", "findMUCRefNumberLov");
        return ULDTransaction.findMUCRefNumberLov(companyCode, displayPage,
                mucRefNum, mucDate);
	}

	/**
	 * For findMUCAuditDetails for MUC Tracking as a part of CR QF1013
	 *
	 * @author A-3045
	 * @param companyCode
	 * @param mucReferenceNumber
	 * @param MucDate
	 * @param controlReceiptNumber
	 * @return Collection<ULDConfigAuditVO>
	 * @throws SystemException
	 */
    public Collection<ULDConfigAuditVO> findMUCAuditDetails(
            ULDTransactionDetailsVO uldTransactionDetailsVO)
			throws SystemException {
		log.entering("UldController", "findMUCRefNumberLov");
		return ULDConfigAudit.findMUCAuditDetails(uldTransactionDetailsVO);
	}

	/**
	 * For updateULDTransaction for MUC Tracking as a part of CR QF1013
	 *
	 * @author A-3045
	 * @param uldTransactionDetailsVOs
	 * @return void
	 * @throws SystemException
	 */
    public void updateULDTransaction(
            Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs)
            throws SystemException {
        log.entering("UldController", "updateULDTransaction");

        if (uldTransactionDetailsVOs != null
                && uldTransactionDetailsVOs.size() > 0) {
        	
        	
            for (ULDTransactionDetailsVO uldTransactionDetailsVO : uldTransactionDetailsVOs) {
                ULDTransaction uldTransaction = ULDTransaction.find(
                        uldTransactionDetailsVO.getCompanyCode(),
                        uldTransactionDetailsVO.getUldNumber(),
                        uldTransactionDetailsVO.getTransactionRefNumber());
                ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                        ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
                        ULDAgreementVO.ENTITY);
                LogonAttributes logonAttributes = ContextUtils
                        .getSecurityContext().getLogonAttributesVO();
                log.log(Log.FINE,
                        "---------setting ULDConfigsAuditVO VO-------");
                StringBuffer additionalInfo = new StringBuffer();
                uldConfigAuditVO.setCompanyCode(logonAttributes
                        .getCompanyCode());
                String airportCode = logonAttributes.getAirportCode();
                uldConfigAuditVO.setTxnTime(new LocalDate(airportCode,
                        Location.ARP, true).toGMTDate());
                uldConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                        Location.ARP, true));
				uldConfigAuditVO.setUserId(logonAttributes.getUserId());
				log.log(Log.FINE, "---------AuditRemarks-------");
				if (uldTransactionDetailsVO.getTransactionRemark() != null) {
                    log.log(Log.FINE, "---------AuditRemarks-------",
                            uldTransactionDetailsVO.getTransactionRemark());
                    uldConfigAuditVO.setAuditRemarks(uldTransactionDetailsVO
                            .getTransactionRemark());
				}
				// Building Additional Information
				additionalInfo.append("ULDNUM:-");
				additionalInfo.append(uldTransactionDetailsVO.getUldNumber());
				additionalInfo.append("/MUCREFNUM:-");
                additionalInfo.append(uldTransactionDetailsVO
                        .getMucReferenceNumber());
                additionalInfo.append("/MUCDATE - ");
                additionalInfo.append(uldTransactionDetailsVO.getMucDate()
                        .toDisplayDateOnlyFormat());
				if (("L").equals(uldTransactionDetailsVO.getTransactionType())) {
					if (uldTransactionDetailsVO.getTransactionDate() != null) {
                        LocalDate txndate = new LocalDate(
                                uldTransactionDetailsVO
                                        .getTransactionStationCode(),
                                Location.ARP, uldTransaction
                                        .getTransactionDate(), true);
						// log.log(Log.FINE,"uldTransaction.getTransactionDate()------------>>>>>>"+txndate.toDisplayDateOnlyFormat());
						// log.log(Log.FINE,"uldTransactionDetailsVO.getTransactionDate()----------->>>>>>"+uldTransactionDetailsVO.getTransactionDate().toDisplayDateOnlyFormat());
						if (!(txndate.toDisplayDateOnlyFormat())
                                .equals(uldTransactionDetailsVO
                                        .getTransactionDate()
                                        .toDisplayDateOnlyFormat())) {
                            additionalInfo.append("/DATE - ");
                            additionalInfo.append(uldTransactionDetailsVO
                                    .getTransactionDate()
                                    .toDisplayDateOnlyFormat());
						}
						if (!(txndate.toDisplayTimeOnlyFormat())
                                .equals(uldTransactionDetailsVO
                                        .getTransactionDate()
                                        .toDisplayTimeOnlyFormat())) {
                            additionalInfo.append("/TIME - ");
                            additionalInfo.append(uldTransactionDetailsVO
                                    .getTransactionDate()
                                    .toDisplayTimeOnlyFormat());
						}
					}
					if (uldTransactionDetailsVO.getTransactionStationCode() != null) {
                        if (!uldTransaction.getTransactionStationCode().equals(
                                uldTransactionDetailsVO
                                        .getTransactionStationCode())) {
                            additionalInfo.append("/TXNAIRPORT - ");
                            additionalInfo.append(uldTransactionDetailsVO
                                    .getTransactionStationCode());
						}
					}
					if (uldTransactionDetailsVO.getTxStationCode() != null) {
						if (uldTransaction.getDestinationAirport() != null) {
                            if (!uldTransaction.getDestinationAirport().equals(
                                    uldTransactionDetailsVO.getTxStationCode())) {
								additionalInfo.append("/DESTAIRPORT - ");
                                additionalInfo.append(uldTransactionDetailsVO
                                        .getTxStationCode());
                            }
                        } else {
                            additionalInfo.append("/DESTAIRPORT - ");
                            additionalInfo.append(uldTransactionDetailsVO
                                    .getTxStationCode());
                        }

                    }
                } else {
                    if (uldTransactionDetailsVO.getReturnDate() != null) {
                        LocalDate rtndate = new LocalDate(
                                uldTransactionDetailsVO.getReturnStationCode(),
                                Location.ARP, uldTransaction.getReturnDate(),
                                true);
						// log.log(Log.FINE,"uldTransaction.getTransactiontime()------------>>>>>>"+txndate.toDisplayTimeOnlyFormat());
						// log.log(Log.FINE,"uldTransactionDetailsVO.getTransactiontime()----------->>>>>>"+uldTransactionDetailsVO.getTransactionDate().toDisplayTimeOnlyFormat());
						if (!(rtndate.toDisplayDateOnlyFormat())
                                .equals(uldTransactionDetailsVO.getReturnDate()
                                        .toDisplayDateOnlyFormat())) {
                            additionalInfo.append("/DATE - ");
                            additionalInfo.append(uldTransactionDetailsVO
                                    .getReturnDate().toDisplayDateOnlyFormat());
						}
						if (!(rtndate.toDisplayTimeOnlyFormat())
                                .equals(uldTransactionDetailsVO.getReturnDate()
                                        .toDisplayTimeOnlyFormat())) {
                            additionalInfo.append("/TIME - ");
                            additionalInfo.append(uldTransactionDetailsVO
                                    .getReturnDate().toDisplayTimeOnlyFormat());
                        }
                    }
                    if (uldTransactionDetailsVO.getReturnStationCode() != null) {
                        if (!uldTransaction.getReturnStationCode().equals(
                                uldTransactionDetailsVO.getReturnStationCode())) {
                            additionalInfo.append("/TXNAIRPORT - ");
                            additionalInfo.append(uldTransactionDetailsVO
                                    .getReturnStationCode());
                        }
                    }
                    if (uldTransactionDetailsVO.getReturnStationCode() != null) {
                        if (!uldTransaction.getDestinationAirport().equals(
                                uldTransactionDetailsVO.getReturnStationCode())) {
                            additionalInfo.append("/DESTAIRPORT - ");
                            additionalInfo.append(uldTransactionDetailsVO
                                    .getReturnStationCode());
						}
					}
				}
				if (uldTransactionDetailsVO.getControlReceiptNumber() != null) {
                    if (!uldTransaction.getControlReceiptNumber().equals(
                            uldTransactionDetailsVO.getControlReceiptNumber())) {
						additionalInfo.append("/CRN - ");
                        additionalInfo.append(uldTransactionDetailsVO
                                .getControlReceiptNumber());
					}
				}
				if (uldTransactionDetailsVO.getUldConditionCode() != null) {
                    if (uldTransaction.getUldConditionCode()!=null && !uldTransaction.getUldConditionCode().equals(//A-7764 for ICRD-288379
                            uldTransactionDetailsVO.getUldConditionCode())) {
						additionalInfo.append("/CONDITION - ");
                        additionalInfo.append(uldTransactionDetailsVO
                                .getUldConditionCode());
					}
                }
                uldConfigAuditVO.setAdditionalInformation(additionalInfo
                        .toString());
				uldConfigAuditVO.setActionCode(MUC_UPDATE);
                log.log(Log.FINE, "---------uldConfigAuditVO-------",
                        uldConfigAuditVO.getAdditionalInformation());
				AuditUtils.performAudit(uldConfigAuditVO);
			}
		}
        if (uldTransactionDetailsVOs != null
                && uldTransactionDetailsVOs.size() > 0) {
            for (ULDTransactionDetailsVO uldTransactionDetailsVO : uldTransactionDetailsVOs) {
                ULDTransaction uldTransaction = ULDTransaction.find(
                        uldTransactionDetailsVO.getCompanyCode(),
                        uldTransactionDetailsVO.getUldNumber(),
                        uldTransactionDetailsVO.getTransactionRefNumber());
                uldTransaction.setTransactionDate(uldTransactionDetailsVO
                        .getTransactionDate().toCalendar());
                uldTransaction.setControlReceiptNumber(uldTransactionDetailsVO
                        .getControlReceiptNumber());
                uldTransaction.setUldConditionCode(uldTransactionDetailsVO
                        .getUldConditionCode());
                if (uldTransactionDetailsVO.getReturnDate() != null) {
                    uldTransaction.setReturnDate(uldTransactionDetailsVO
                            .getReturnDate().toCalendar());
                }
                uldTransaction.setReturnStationCode(uldTransactionDetailsVO
                        .getReturnStationCode());
                uldTransaction
                        .setTransactionStationCode(uldTransactionDetailsVO
                                .getTransactionStationCode());
                uldTransaction.setDestinationAirport(uldTransactionDetailsVO
                        .getTxStationCode());
                log
                        .log(
                                Log.FINE,
                                "uldTransactionDetailsVO.getMucIataStatus()------------>>>>>>",
								uldTransactionDetailsVO.getMucIataStatus());
                uldTransaction.setMucIsSent(uldTransactionDetailsVO
                        .getMucIataStatus());
                uldTransaction.setLastUpdateTime(uldTransactionDetailsVO
                        .getLastUpdateTime());
                uldTransaction.setLastUpdateUser(uldTransactionDetailsVO
                        .getLastUpdateUser());
			}
		}
	}

	/**
	 * For updateMUCStatus as a part of CR QF1142
	 *
	 * @author A-3045
	 * @param uldTransactionDetailsVOs
	 * @return void
	 * @throws SystemException
	 */
    public void updateMUCStatus(
            Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs)
            throws SystemException {
        log.entering("UldController", "updateULDTransaction");

        if (uldTransactionDetailsVOs != null
                && uldTransactionDetailsVOs.size() > 0) {
            for (ULDTransactionDetailsVO uldTransactionDetailsVO : uldTransactionDetailsVOs) {
                ULDTransaction uldTransaction = ULDTransaction.find(
                        uldTransactionDetailsVO.getCompanyCode(),
                        uldTransactionDetailsVO.getUldNumber(),
                        uldTransactionDetailsVO.getTransactionRefNumber());

                uldTransaction.setMucIsSent(uldTransactionDetailsVO
                        .getMucIataStatus());
                uldTransaction.setLastUpdateTime(uldTransactionDetailsVO
                        .getLastUpdateTime());
                uldTransaction.setLastUpdateUser(uldTransactionDetailsVO
                        .getLastUpdateUser());

			}

		}

	}

	/**
	 * @author A-2408
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printInternalMovements(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {

        ULDIntMvtHistoryFilterVO uldIntMvtFilterVO = (ULDIntMvtHistoryFilterVO) reportSpec
                .getFilterValues().iterator().next();
		int pageNo = 0;
		ULDMovementFilterVO uldMovementFilterVO = new ULDMovementFilterVO();
		ULDNumberVO uldNumberVO = new ULDNumberVO();
		if (uldIntMvtFilterVO != null) {
			pageNo = uldIntMvtFilterVO.getPageNumber();
            uldMovementFilterVO.setCompanyCode(uldIntMvtFilterVO
                    .getCompanyCode());
			if (uldIntMvtFilterVO.getUldNumber() != null) {
                uldMovementFilterVO.setUldNumber(uldIntMvtFilterVO
                        .getUldNumber().toUpperCase());
			}
			uldMovementFilterVO.setFromDate(uldIntMvtFilterVO.getFromDate());
			uldMovementFilterVO.setToDate(uldIntMvtFilterVO.getToDate());
			uldNumberVO = findULDHistoryCounts(uldMovementFilterVO);

		}
		if (uldNumberVO != null) {
			uldIntMvtFilterVO.setNoOfLoanTxns(uldNumberVO.getNoOfLoanTxns());
			uldIntMvtFilterVO.setNoOfMovements(uldNumberVO.getNoOfMovements());
            uldIntMvtFilterVO
                    .setNoOfTimesDmged(uldNumberVO.getNoOfTimesDmged());
            uldIntMvtFilterVO.setNoOfTimesRepaired(uldNumberVO
                    .getNoOfTimesRepaired());
        }
        Page<ULDIntMvtDetailVO> uldIntMvtDetailVOs = findIntULDMovementHistory(
                uldIntMvtFilterVO, pageNo);

		Collection<ULDIntMvtDetailVO> vos = new ArrayList<ULDIntMvtDetailVO>();
		if (uldIntMvtDetailVOs != null && uldIntMvtDetailVOs.size() > 0) {
			for (ULDIntMvtDetailVO vo : uldIntMvtDetailVOs) {
                if(vo.getContent()!=null)
                {
                    if("RPR".equalsIgnoreCase(vo.getContent().trim()))
                    {
			        vo.setContent("ULD Damage");
                    }
                    else
                    {
						 vo.setContent("Agent Loan");
					}
				}
                if(vo.getReturnStatus()!=null)
                {
                    if("N".equalsIgnoreCase(vo.getReturnStatus().trim()))
                    {
			        vo.setReturnStatus("Pending");
                    }
                    else
                    {
						vo.setReturnStatus("Returned");
					}
				}
				vos.add(vo);
			}
		}
		if (uldIntMvtDetailVOs == null || uldIntMvtDetailVOs.size() <= 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		ReportMetaData parameterMetaData = new ReportMetaData();
        parameterMetaData.setFieldNames(new String[] { "uldNumber", "fromDate",
                "toDate", "noOfMovements", "noOfLoanTxns", "noOfTimesDmged",
                "noOfTimesRepaired" });
		reportSpec.addParameterMetaData(parameterMetaData);
		log.log(Log.INFO, "uldIntMvtFilterVO--->", uldIntMvtFilterVO);
		reportSpec.addParameter(uldIntMvtFilterVO);
		ReportMetaData reportMetaData = new ReportMetaData();

        reportMetaData.setColumnNames(new String[] { "MVTDAT", "MVTTYP",
                "DSTCOD", "RETSTA", "RMK" });
        reportMetaData.setFieldNames(new String[] { "displayMvtDate",
                "content", "airport", "returnStatus", "remark" });
		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(vos);
		return ReportAgent.generateReport(reportSpec);
	}

	/**
	 * @author A-2553
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws ReportGenerationException
	 * @throws ULDDefaultsBusinessException
	 */
    public Map<String, Object> generateTransactionDetailsReport(
            ReportSpec reportSpec) throws SystemException,
            ReportGenerationException, ULDDefaultsBusinessException {
		log.entering("ULDController", "generateTransactionDetailsReport");
        TransactionFilterVO transactionFilterVO = (TransactionFilterVO) reportSpec
                .getFilterValues().iterator().next();

        ULDMovementFilterVO uldMovementFilterVO = new ULDMovementFilterVO();
        uldMovementFilterVO
                .setCompanyCode(transactionFilterVO.getCompanyCode());
		uldMovementFilterVO.setUldNumber(transactionFilterVO.getUldNumber());
		uldMovementFilterVO.setFromDate(transactionFilterVO.getTxnFromDate());
		uldMovementFilterVO.setToDate(transactionFilterVO.getTxnToDate());

		TransactionListVO transactionListVO = findTransactionHistory(transactionFilterVO);
		log.log(Log.INFO, "-----transactionListVO----- ", transactionListVO);
		Map<String, Collection<OneTimeVO>> oneTimes = new HashMap<String, Collection<OneTimeVO>>();

		try {
			Collection<String> oneTimeList = new ArrayList<String>();
			oneTimeList.add(TXNSTATUS_ONETIME);

            oneTimes = new SharedDefaultsProxy().findOneTimeValues(
                    transactionFilterVO.getCompanyCode(), oneTimeList);

		} catch (ProxyException proxyException) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		Collection<OneTimeVO> txnStatus = new ArrayList<OneTimeVO>();

		if (oneTimes != null) {
			txnStatus = oneTimes.get(TXNSTATUS_ONETIME);
		}

		ULDNumberVO uldNumberVO = findULDHistoryCounts(uldMovementFilterVO);

        transactionFilterVO.setNoOfLoanTxns(String.valueOf(uldNumberVO
                .getNoOfLoanTxns()));
        transactionFilterVO.setNoOfMovements(String.valueOf(uldNumberVO
                .getNoOfMovements()));
        transactionFilterVO.setNoOfTimesDmgd(String.valueOf(uldNumberVO
                .getNoOfTimesDmged()));
        transactionFilterVO.setNoOfTimesRepaired(String.valueOf(uldNumberVO
                .getNoOfTimesRepaired()));

        reportSpec.addParameter(transactionFilterVO);
        Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs = transactionListVO
                .getTransactionDetailsPage();
        log.log(Log.FINE, "uldTransactionDetailsVOsuldTransactionDetailsVOs",
                uldTransactionDetailsVOs);
		int pageSize = uldTransactionDetailsVOs.size();
		log.log(Log.FINE, "Page Sizeis ------->>", pageSize);
		Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOCol = new ArrayList<ULDTransactionDetailsVO>();
		for (int i = 0; i < pageSize; i++) {
            uldTransactionDetailsVOCol
                    .add((ULDTransactionDetailsVO) new ArrayList<ULDTransactionDetailsVO>(
                            uldTransactionDetailsVOs).get(i));
		}
		for (ULDTransactionDetailsVO uldTxnDetailsVO : uldTransactionDetailsVOCol) {
			for (OneTimeVO oneTimeVO : txnStatus) {
				log.log(Log.FINE, "\n\n\n----------txnStatus ", uldTxnDetailsVO.getTransactionStatus());
				if (uldTxnDetailsVO.getTransactionStatus() != null
                        && uldTxnDetailsVO.getTransactionStatus().equals(
                                oneTimeVO.getFieldValue())) {
                    uldTxnDetailsVO.setTransactionStatus(oneTimeVO
                            .getFieldDescription());
				}
            }
        }
        //added by A-4443 for icrd-4490 starts
		if (uldTransactionDetailsVOCol == null || uldTransactionDetailsVOCol.size() <= 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
        //added by A-4443 for icrd-4490 ends
		reportSpec.setData(uldTransactionDetailsVOCol);
		return ReportAgent.generateReport(reportSpec);
	}

	/**
	 * @author a-2412
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printBuildUpDetails(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
		log.entering("ULDController", "printBuildUpDetails");

        ULDMovementFilterVO uldMovementFilterVO = (ULDMovementFilterVO) reportSpec
                .getFilterValues().iterator().next();

		ULDNumberVO uldNumberVO = new ULDNumberVO();
		if (uldMovementFilterVO != null) {
			uldNumberVO = findULDHistoryCounts(uldMovementFilterVO);
		}
		log.log(Log.INFO, "uldNumberVO--------------------->>", uldNumberVO);
		Page<OperationalULDAuditVO> operationalULDAuditVOs = new Page<OperationalULDAuditVO>(
				new ArrayList<OperationalULDAuditVO>(), 0, 0, 0, 0, 0, false);

		operationalULDAuditVOs = listBuildupBreakdowndetails(uldMovementFilterVO);

        if (operationalULDAuditVOs == null
                || operationalULDAuditVOs.size() == 0) {
            ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		if (uldNumberVO != null) {
			uldMovementFilterVO.setNoOfLoanTxns(uldNumberVO.getNoOfLoanTxns());
            uldMovementFilterVO
                    .setNoOfMovements(uldNumberVO.getNoOfMovements());
            uldMovementFilterVO.setNoOfTimesDmged(uldNumberVO
                    .getNoOfTimesDmged());
            uldMovementFilterVO.setNoOfTimesRepaired(uldNumberVO
                    .getNoOfTimesRepaired());
        }
        log.log(Log.INFO, "BEFORE SETTING TO REPORT ---->>",
                uldMovementFilterVO);
        ReportMetaData parameterMetaData = new ReportMetaData();
        parameterMetaData.setFieldNames(new String[] { "uldNumber", "fromDate",
                "toDate", "noOfMovements", "noOfLoanTxns", "noOfTimesDmged",
                "noOfTimesRepaired" });
        reportSpec.addParameterMetaData(parameterMetaData);
        reportSpec.addParameter(uldMovementFilterVO);

        ReportMetaData reportMetaData = new ReportMetaData();
        reportMetaData.setColumnNames(new String[] { "STA", "UPDTXNTIM",
                "FLTCARIDR", "FLTNUM", "TALNUM", "FLTDAT", "AUDRMK" });

        reportMetaData.setFieldNames(new String[] { "status", "lastUpdateTime",
                "carrierId", "flightNumber", "flightTailNumber", "flightDate",
                "remarks" });

		int pageSize = operationalULDAuditVOs.size();
		log.log(Log.FINE, "Page Sizeis ------->>", pageSize);
		Collection<OperationalULDAuditVO> operationalULDAuditVOsCol = new ArrayList<OperationalULDAuditVO>();
		for (int i = 0; i < pageSize; i++) {
			operationalULDAuditVOsCol.add(operationalULDAuditVOs.get(i));

		}
		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(operationalULDAuditVOsCol);
		return ReportAgent.generateReport(reportSpec);

	}

	/**
	 * @author A-2883
	 * @param reportSpec
	 * @return Map<String, Object>
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
    public Map<String, Object> listDamageRepairDetailsReport(
            ReportSpec reportSpec) throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
        UldDmgRprFilterVO filterVO = (UldDmgRprFilterVO) reportSpec
                .getFilterValues().iterator().next();
        Page<ULDRepairDetailsListVO> repairVOS = listDamageRepairDetails(
                filterVO, filterVO.getPageNumber());
		log.log(Log.FINE, "!~++~~~--", filterVO);
		ULDMovementFilterVO uldMovementFilterVO = new ULDMovementFilterVO();
		int pageNo = 0;
		ULDNumberVO uldNumberVO = new ULDNumberVO();
		if (repairVOS != null) {
			pageNo = filterVO.getPageNumber();
			uldMovementFilterVO.setCompanyCode(filterVO.getCompanyCode());
            uldMovementFilterVO.setUldNumber(filterVO.getUldNumber()
                    .toUpperCase());
            LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                    .getLogonAttributesVO();
            LocalDate toDate = new LocalDate(logonAttributes.getStationCode(),
                    Location.STN, true);
            LocalDate fromDate = new LocalDate(
                    logonAttributes.getStationCode(), Location.STN, true);
            if (filterVO.getFromDate() != null
                    && filterVO.getFromDate().trim().length() > 0) {
                uldMovementFilterVO.setFromDate(fromDate.setDate(filterVO
                        .getFromDate()));
			} else {
				filterVO.setFromDate("");
			}
            if (filterVO.getToDate() != null
                    && filterVO.getToDate().trim().length() > 0) {
                uldMovementFilterVO.setToDate(toDate.setDate(filterVO
                        .getToDate()));
			} else {
				filterVO.setToDate("");
			}
			uldNumberVO = findULDHistoryCounts(uldMovementFilterVO);
		}
		if (uldNumberVO != null) {
			filterVO.setNoOfLoanTxns(uldNumberVO.getNoOfLoanTxns());
			filterVO.setNoOfMovements(uldNumberVO.getNoOfMovements());
			filterVO.setNoOfTimesDmged(uldNumberVO.getNoOfTimesDmged());
			filterVO.setNoOfTimesRepaired(uldNumberVO.getNoOfTimesRepaired());

		}
		if (repairVOS == null || repairVOS.size() <= 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}

		Collection<ULDRepairDetailsListVO> vos = new ArrayList<ULDRepairDetailsListVO>();
		int pageSize = repairVOS.size();
		for (int i = 0; i < pageSize; i++) {
			vos.add(repairVOS.get(i));
		}
		Map<String, Collection<OneTimeVO>> oneTimeHashMap = null;
		Collection<String> oneTimeActiveStatusList = new ArrayList<String>();
		oneTimeActiveStatusList.add(REPAIRHEAD_ONETIME);
		oneTimeActiveStatusList.add(DAMAGESTATUS_ONETIME);

		try {
            oneTimeHashMap = new SharedDefaultsProxy().findOneTimeValues(
                    filterVO.getCompanyCode(), oneTimeActiveStatusList);
		} catch (ProxyException proxyException) {
			throw new SystemException(proxyException.getMessage());
		}
        Collection<OneTimeVO> repairTypes = oneTimeHashMap
                .get(REPAIRHEAD_ONETIME);
        Collection<OneTimeVO> dmgTypes = oneTimeHashMap
                .get(DAMAGESTATUS_ONETIME);
		for (ULDRepairDetailsListVO vo : vos) {
			for (OneTimeVO oneTimeVO : dmgTypes) {
                if (vo.getDamageStatus() != null
                        && vo.getDamageStatus().equals(
                                oneTimeVO.getFieldValue())) {
					vo.setDamageStatus(oneTimeVO.getFieldDescription());
				}
			}
			for (OneTimeVO oneTimeVO : repairTypes) {
                if (vo.getRepairStatus() != null
                        && vo.getRepairStatus().equals(
                                oneTimeVO.getFieldValue())) {
					vo.setRepairStatus(oneTimeVO.getFieldDescription());
				}
			}
			if (vo.getDamageStatus() == null) {
				vo.setDamageStatus(BLANK);
			}
			if (vo.getRepairStatus() == null) {
				vo.setRepairStatus(BLANK);
			}
			log.log(Log.FINE, "Tarun++", vo);
		}

		log.log(Log.FINE, "!~~~~", repairVOS);
		ReportMetaData parameterMetaData = new ReportMetaData();
        parameterMetaData.setFieldNames(new String[] { "uldNumber", "fromDate",
                "ToDate", "noOfMovements", "noOfLoanTxns", "noOfTimesDmged",
                "noOfTimesRepaired" });
		reportSpec.addParameterMetaData(parameterMetaData);
		reportSpec.addParameter(filterVO);
		ReportMetaData reportMetaData = new ReportMetaData();

        reportMetaData.setColumnNames(new String[] { "DMGSEC", "DMG", "DMGDAT",
                "DMGSTA", "RPRCOD", "RPRDAT", "RPRSTN", "RPRAMT", "INVAMT",
                "INVSTA", "RMK" });
        reportMetaData.setFieldNames(new String[] { "section", "damageCode",
                "damageDate", "damageStatus", "repairHead", "repairDate",
                "repairStatus", "repairAmount", "invoicedAmount",
                "invoiceStatus", "remarks" });

		reportSpec.setReportMetaData(reportMetaData);
		reportSpec.setData(vos);
		return ReportAgent.generateReport(reportSpec);

	}

	/**
	 * @author a-2412
	 * @param flightDetailsVO
	 * @throws SystemException
	 * @throws RemoteException
	 */
    public void markULDFlightMovements(FlightDetailsVO flightDetailsVO)
            throws SystemException, RemoteException {

		log.log(Log.INFO, "flightDetailsVO---------------->", flightDetailsVO);
		FlightFilterMessageVO filterVO = new FlightFilterMessageVO();
		Collection<ULDFlightMessageReconcileVO> uldFlightMessageReconcileVOs = null;



		// Construct Filter
        filterVO.setFlightCarrierId(flightDetailsVO
                .getFlightCarrierIdentifier());
		filterVO.setFlightNumber(flightDetailsVO.getFlightNumber());
        filterVO.setFlightSequenceNumber((int) flightDetailsVO
                .getFlightSequenceNumber());
		filterVO.setCompanyCode(flightDetailsVO.getCompanyCode());
		filterVO.setPointOfUnloading(flightDetailsVO.getDestination());
		filterVO.setMessageType("OUT");
		Collection<String> destinations = flightDetailsVO.getAirports();
		filterVO.setDestinations(destinations);

		String flightRoute = flightDetailsVO.getFlightRoute();

		log.log(Log.INFO, "flightRoute -------->>", flightRoute);
		String origins[] = null;
		if (flightRoute != null && flightRoute.trim().length() > 0) {
			origins = flightRoute.split("-");
		}
		Collection<String> pols = new ArrayList<String>();

		for (String pol : destinations) {
			boolean found = false;
			for (String pou : origins) {
				if (!pol.equals(pou) && !found) {
					if (!pols.contains(pou)) {
						pols.add(pou);
					}
				}
				if (pol.equals(pou)) {
					found = true;
				}
			}
		}

		log.log(Log.INFO, "pols-------->>", pols);
		filterVO.setFlightOrigins(pols);
		log.log(Log.INFO, "filterVO-------->>", filterVO);
		// Find UCM OUT/s corresponding to the Flight
        //ICRD-116333 starts
        LogonAttributes logonAttribute=ContextUtils.getSecurityContext().getLogonAttributesVO();
		SharedAreaProxy areasProxy = new SharedAreaProxy();
        Collection<String> parCode = new ArrayList<String>(
                1);
		parCode.add("uld.defaults.ucminexpected");
			log.log(Log.FINE, "enteres inside---");
			Map<String, String> parsMap = null;
			try {
                parsMap = areasProxy
                        .findAirportParametersByCode(
                                logonAttribute.getCompanyCode(),
                                logonAttribute.getAirportCode(),
                                parCode);
			} catch (ProxyException e) {
				e.getMessage();
			}
			if (parsMap.get("uld.defaults.ucminexpected") == null
					|| "N".equals(parsMap.get("uld.defaults.ucminexpected"))) {
                log.log(Log.FINE,
                        "enteres inside---parmap chk");
        uldFlightMessageReconcileVOs = ULDFlightMessageReconcile
                .listUCMsForFlightMovement(filterVO);
            }
            //ICRD-116333 ends

        log.log(Log.INFO, "uldFlightMessageReconcileVO returned--------->>",
                uldFlightMessageReconcileVOs);
        if (uldFlightMessageReconcileVOs != null
                && uldFlightMessageReconcileVOs.size() > 0) {
			for (ULDFlightMessageReconcileVO parentVO : uldFlightMessageReconcileVOs) {
                if (parentVO.getReconcileDetailsVOs() != null
                        && parentVO.getReconcileDetailsVOs().size() > 0) {

                    for (ULDFlightMessageReconcileDetailsVO childVO : parentVO
                            .getReconcileDetailsVOs()) {
                            //  for ICRD-2268 author A-5125 once the Flight is arrived,
                            //marking Uld's in The Flighta as Arrived
						if (childVO != null) {
							if (childVO.getUldNumber() != null) {
								ULDFlightMessageReconcileDetails uldDTl = null;
								try {
                                    uldDTl = ULDFlightMessageReconcileDetails
                                            .find(childVO);
								} catch (SystemException ex) {
								}
								if (uldDTl != null) {
									uldDTl.setUldFlightStatus(ARRIVED);
								}
							}
                        }// ICRD-2268 author ends

						try {
							ULD uld = null;
                            uld = ULD.find(childVO.getCompanyCode(), childVO
                                    .getUldNumber());

							if (uld != null) {

								uld.setTransitStatus("N");
                                if(uld.getFlightInfo()!=null){
                                    String[] flightInfo=uld.getFlightInfo().split(",");
                                    String pou=flightInfo.length==3?flightInfo[2]: null;
                                    if(pou!=null){
                                        if(flightDetailsVO.getAirports().contains(pou)){
                                            log.log(Log.INFO,"ULD Destination and MVT ATA Airport are same");
                                        }else{
                                            continue;
                                        }
                                    }
                                }
                                if (uld.getCurrentStation().equalsIgnoreCase(
                                        childVO.getPou())) {
                                    log
                                            .log(Log.INFO,
                                                    "POL and POU are same no movement marked");
                                } else {

                                    ULDMovementVO movementVO = new ULDMovementVO();
									//Modified by A-7359 for ICRD-249828
									//Modified for ICRD-303487
									String carrierCode = flightDetailsVO
											.getCarrierCode();
									FlightValidationVO flightVdVo;
									movementVO.setCarrierCode(carrierCode!=null && carrierCode.trim().length() >0 ?carrierCode:
										((flightVdVo=getFlightValidationVO(flightDetailsVO))!=null?flightVdVo.getCarrierCode():""));
                                    movementVO.setCompanyCode(childVO
                                            .getCompanyCode());

                                    movementVO.setDummyMovement(false);
                                    movementVO
                                            .setFlightCarrierIdentifier(childVO
                                                    .getFlightCarrierIdentifier());
									// modified for bug 36920 on 19Feb09
									LocalDate flightDate= new LocalDate(
											childVO.getPou(),
												Location.ARP, flightDetailsVO
												.getAtas().get(childVO.getPou()), false);
									movementVO.setFlightDate(flightDate);  
									/*movementVO.setFlightDate(flightDetailsVO
											.getAtas().get(childVO.getPou()));*/
									// modified for bug 36920 on 19Feb09 ends
                                    movementVO.setFlightNumber(childVO
                                            .getFlightNumber());
                                    movementVO.setCurrentStation(childVO
                                            .getPou());

                                    LogonAttributes logonAttributes = ContextUtils
                                            .getSecurityContext()
                                            .getLogonAttributesVO();
                                    movementVO
                                            .setLastUpdatedUser(logonAttributes
                                                    .getUserId());
                                    movementVO
                                            .setLastUpdatedTime(new LocalDate(
                                                    childVO.getPou(),
                                                    Location.ARP, true));
                                    movementVO.setPointOfLading(uld
                                            .getCurrentStation());

                                    movementVO.setPointOfUnLading(childVO
                                            .getPou());
									movementVO.setUpdateCurrentStation(true);
									movementVO.setContent(childVO.getContent());
									Collection<String> ulds = new ArrayList<String>();
									Collection<ULDMovementVO> uldMovementVOs = new ArrayList<ULDMovementVO>();
									ulds.add(childVO.getUldNumber());
									uldMovementVOs.add(movementVO);
									try {
                                        log
                                                .log(
                                                        Log.INFO,
                                                        "---------Saving ULD Movements--------",
                                                        ulds);
                                        log
                                                .log(
                                                        Log.INFO,
                                                        "---------Saving ULD Movements-----uldMovementVOs---",
                                                        uldMovementVOs);
                                        saveULDMovement(ulds, uldMovementVOs);
                                    } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
                                        log
                                                .log(Log.INFO,
                                                        "%%%%%%%%%%%%%  wil never throw this exception");
									}
								}

								/*
								 * BUG_101301_SowmyaK_08Oct10 starts Introduced
								 * a new airport parameter to handle the
								 * mechanised and non-mechanised conditions if
								 * the value of the parameter is set as 'Y' , it
								 * indicates that the airport is mechanised and
								 * usual updations happen for this case If the
								 * value is null or "N", it indicates that the
								 * airport is non-mechanised and the non-QF ULDs
								 * will be removed from the system for this case
								 */

								AirlineValidationVO airlineValidationVO = null;
                                LogonAttributes logonAttributes = ContextUtils
                                        .getSecurityContext()
                                        .getLogonAttributesVO();
                                try {
                                    airlineValidationVO = new SharedAirlineProxy()
                                            .findAirline(
                                                    childVO.getCompanyCode(),
                                                    logonAttributes
                                                            .getOwnAirlineIdentifier());
                                } catch (ProxyException e) {
                                    // proxy exception
                                }
                                String airlineCode = airlineValidationVO
                                        .getAlphaCode();
								int length = childVO.getUldNumber().length();
                                String twoalphacode = childVO.getUldNumber()
                                        .substring(length - 2);
                                String threealphacode = childVO.getUldNumber()
                                        .substring(length - 3);
                                String uldAirlineCode = null;
                                //Commented as part of ICRD-21184
//								String arldtl = ULD.findOwnerCode(childVO
//										.getCompanyCode(), twoalphacode,
//										threealphacode);

                                //Added as part of ICRD-21184
								String arldtl = findOwnerCode(childVO.getCompanyCode(), twoalphacode, threealphacode);
                                //Null Check added as part of ICRD-21184
                                if(arldtl != null) {
									String arldtlArray[] = arldtl.split("~");
									if ("2".equals(arldtlArray[0])) {
										uldAirlineCode = twoalphacode;
									} else {
										uldAirlineCode = threealphacode;
									}
								}

								SharedAreaProxy areaProxy = new SharedAreaProxy();
                                Collection<String> parCodes = new ArrayList<String>(
                                        1);
								parCodes.add(PAR_CODE);
                                log.log(Log.FINE, "airlineCode issss---",
                                        airlineCode);
                                log.log(Log.FINE, "uldAirlineCode is---",
                                        uldAirlineCode);
								if (!airlineCode.equals(uldAirlineCode)) {
									log.log(Log.FINE, "enteres inside---");
									Map<String, String> parMap = null;
									try {
                                        parMap = areaProxy
                                                .findAirportParametersByCode(
                                                        childVO
                                                                .getCompanyCode(),
                                                        childVO.getPou(),
                                                        parCodes);
									} catch (ProxyException e) {
										e.getMessage();
										continue;
										// ignored
									}
                                    if (parMap.get(PAR_CODE) == null
                                            || "N".equals(parMap.get(PAR_CODE))) {
                                        log.log(Log.FINE,
                                                "enteres inside---parmap chk");
                                        //Commenting for bug ICRD-2266.. Need to take up after discussion with PB
                                        //uld.remove();
									}
								}

								// BUG_101301_SowmyaK_08Oct10 ends

								// added by a-3278 for bug 45844 on 23Apr09
								// Audit triggered while updating the
								// InTrasitStatus
                                ULDAuditVO uldAuditVO = new ULDAuditVO(
                                        ULDFlightMessageReconcileVO.MODULE,
                                        ULDFlightMessageReconcileVO.SUBMODULE,
                                        ULDFlightMessageReconcileVO.ENTITY);

								uldAuditVO.setActionCode(UPDATE_ULD);

								uldAuditVO.setAuditRemarks("");
								StringBuilder additionalInfo = new StringBuilder();

                                uldAuditVO.setCompanyCode(parentVO
                                        .getCompanyCode());
								uldAuditVO.setUldNumber(childVO.getUldNumber());

                                String airportCode = logonAttributes
                                        .getAirportCode();

                                uldAuditVO.setTxnTime(new LocalDate(
                                        airportCode, Location.ARP, true)
                                        .toGMTDate());

                                uldAuditVO.setTxnLocalTime(new LocalDate(
                                        airportCode, Location.ARP, true));
                                uldAuditVO.setAuditRemarks("");
                                uldAuditVO.setUserId(parentVO
                                        .getLastUpdatedUser());

                                additionalInfo.append("Airline - ");
                                additionalInfo.append(uld
                                        .getOperationalAirlineIdentifier());

                                additionalInfo.append(",");
                                additionalInfo.append("Current Station - ");
                                additionalInfo.append(uld.getCurrentStation());

                                additionalInfo.append(",");
                                additionalInfo.append("Transit Status - ");
                                additionalInfo.append(uld.getTransitStatus());

                                additionalInfo.append(",");
                                additionalInfo.append("Flight Details - ");
                                additionalInfo.append(uld.getFlightInfo());

                                uldAuditVO
                                        .setAdditionalInformation(additionalInfo
                                                .toString());
                                log
                                        .log(
                                                Log.FINE,
                                                "---------setting uldAuditVO.getAdditionalInformation()------*****************",
                                                uldAuditVO
                                                                .getAdditionalInformation());
                                AuditUtils.performAudit(uldAuditVO);

                                log
                                        .exiting(
                                                "performAuditForTransitStatusUpdation",
												"...Finished audit for performAuditForTransitStatusUpdation");
								// Audit end
								// added by a-3278 for bug 45844 on 23Apr09
							}
						}

						catch (FinderException e) {
							log.log(Log.FINE, "Inside Finder Exception");
							// throw new SystemException(e.getErrorCode(),e);
						}

					}
				}
			}
		}

	}
	/**
	 * 
	 * 	Method		:	ULDController.getFlightValidationVO
	 *	Added by 	:	A-7655 on 14-Jan-2019
	 * 	Used for 	:
	 *	Parameters	:	@param flightdtlvo
	 *	Parameters	:	@return
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	FlightValidationVO
	 */
	public FlightValidationVO getFlightValidationVO(FlightDetailsVO flightdtlvo) throws SystemException{
		FlightFilterVO filterVO = new FlightFilterVO();
		filterVO.setFlightNumber(flightdtlvo.getFlightNumber());
		filterVO.setFlightDate(flightdtlvo.getFlightDate());
		//filterVO.setDirection(FlightFilterVO.OUTBOUND);
		filterVO.setFlightCarrierId(flightdtlvo.getFlightCarrierIdentifier());	
		filterVO.setFlightSequenceNumber(flightdtlvo.getFlightSequenceNumber());
		filterVO.setCompanyCode(flightdtlvo.getCompanyCode());
		try {
			Collection<FlightValidationVO> flightVlVos = new FlightOperationsProxy().fetchFlightDetails(filterVO);
			if(flightVlVos!=null && flightVlVos.size() > 0){
				return flightVlVos.iterator().next();
			}else{
				log.log(Log.FINE, "Inside Finder Exception. Finding FlightValidationVO failed. This will create Discrepancy in "
						+ " Uld Last Movement details creation (UCM FLOW)");
			}
		} catch (ProxyException e) {
			log.log(Log.FINE, "Inside Finder Exception. Finding FlightValidationVO failed. This will create Discrepancy in "
					+ " Uld Last Movement details creation (UCM FLOW)");
		}
		return null;	  
	}
    /* * @author A-2934
     * @param FlightDetailsVO
	 * @return FlightVO
     * @throws ProxyException
     * @throws SystemException
     * Method to get the flight details from Flight module
     *
     */
    public Collection<MarkFlightMovementVO> listMarkFlightMovement(FlightValidationVO flightValidationVO){
		FlightOperationsProxy flightOperationsProxy = new FlightOperationsProxy();
        Collection<MarkFlightMovementVO>  collMarkFlightMovementVO=null;
		try {
            collMarkFlightMovementVO= flightOperationsProxy.listMarkFlightMovement(flightValidationVO);
            log.log(Log.FINE, "collMarkFlightMovementVO===>",
                    collMarkFlightMovementVO);
		} catch (ProxyException e) {
			// To be reviewed Auto-generated catch block
			e.getMessage();
		} catch (SystemException e) {
			// To be reviewed Auto-generated catch block
			e.getMessage();
		}
		return collMarkFlightMovementVO;

	}
    /* * @author A-2934
     * @param FlightDetailsVO
     * @param FlightVO
     * @param currentStation
     * @return boolean
     *Method will validate whether the flights actual time of arrival is marked in any station after current station
     *
     */
    public boolean validateATA(FlightDetailsVO flightDetailsVO, FlightVO currentFlightVO, String currentStation){
        boolean flightArrived=false;
        boolean stationAfterCurrentStation=false;
        String stationFromRoute=null;
        StringTokenizer route = new StringTokenizer(flightDetailsVO.getFlightRoute(),"-");
        while(route.hasMoreTokens()){
            stationFromRoute=route.nextToken();
            if(stationFromRoute.equals(currentStation) || stationAfterCurrentStation){
                if(stationAfterCurrentStation){
					log.log(Log.FINE, "stationFromRoute===>", stationFromRoute);
					for (FlightLegVO parentVO : currentFlightVO.getFlightLegs()) {
                        if(parentVO.getLegDestination().equals(stationFromRoute) && parentVO.getActualTimeArrivalUTC()!=null){
                            flightArrived=true;
                            log
                                    .log(
                                            Log.FINE,
                                            "stationFromRoute with actual arrive time===>",
                                            stationFromRoute);
                        }
                    }
                }
                stationAfterCurrentStation=true;
            }
        }
        return flightArrived;
    }
/*   * @author A-2934
     * @param FlightDetailsVO
     * @param FlightVO
     * @param currentStation
     * @return boolean
     *Validate flight arrival
     *

/*  public boolean validateFlightArrival(FlightValidationVO flightValidationVO,
            ArrayList<String> destination) {
        boolean flightArrived = false;
        Collection<String> fltValidations = new ArrayList<String>();
        for (String destChk : fltValidations) {
            for (FlightLegVO parentVO : flightValidationVO.getFlightLegs()) {

                if (parentVO.getLegDestination().equals(destChk)
                        && parentVO.getActualTimeArrivalUTC() != null) {
                    flightArrived = true;
                    log.log(Log.FINE,
                            "stationFromRoute with actual arrive time===>"
                                    + parentVO.getActualTimeArrivalUTC());
                }
            }
        }
        return flightArrived;
    }*/

//Added by A-6991 for ICRD-192185 Starts

    public boolean validateFlightArrival(FlightValidationVO flightValidationVO, ArrayList<String> destination){
        boolean flightArrived=false;
        Collection<MarkFlightMovementVO>  collMarkFlightMovementVO = listMarkFlightMovement(flightValidationVO);
        if (collMarkFlightMovementVO != null && collMarkFlightMovementVO.size() > 0) {
            for (MarkFlightMovementVO parentVO : collMarkFlightMovementVO) {
                if(parentVO.getStation()!=null){
                    for(int i=0 ;i<destination.size() ;i++){
                        if (parentVO.getActualTimeArrival() != null && parentVO.getStation().equals(destination.get(i))) {
                            flightArrived=true;
                        }
                        log.entering("validateFlightArrival", "flightArrived"+destination.get(i));
                    }

                }
            }
        }
        log.entering("validateFlightArrival", "flightArrived"+flightArrived);
        return flightArrived;
    }
//Added by A-6991 for ICRD-192185 Ends


	// added by a-3045 for bug17959 starts
	// for finding the ULDs in use
	/**
	 * For checkULDInUse
	 *
	 * @author A-3045
	 * @param uldNumbers
	 * @return Collection<String>
	 * @throws SystemException
	 * @throws RemoteException
	 */
    public Collection<String> checkULDInUse(String companyCode,
            Collection<String> uldNumbers) throws SystemException,
            RemoteException {
		log.entering("ULDController", "checkULDInUse");
        return ULD.checkULDInUse(companyCode, uldNumbers);
	}

	/**
	 * This method is used for listing Transaction details in ULD History screen
	 *
	 * @author A-3045
	 * @param uldTransactionFilterVO
	 * @return TransactionListVO
	 * @throws SystemException
	 */

    public TransactionListVO findTransactionHistory(
            TransactionFilterVO uldTransactionFilterVO) throws SystemException {
		log.entering("UldController", "findTransactionHistory");
        TransactionListVO transactionListVO = ULDTransaction
                .findTransactionHistory(uldTransactionFilterVO);
		log.log(Log.FINE, "Calling listULDTransactionDetails");
		log.exiting("UldController", "findTransactionHistory");
		return transactionListVO;
	}

	/**
	 * This method retrieves the uld details of the specified filter condition
	 * a-3045
	 *
	 * @param uldListFilterVO
	 * @return Collection<ULDListVO>
	 * @throws SystemException
	 */
    public Collection<ULDListVO> findULDListColl(ULDListFilterVO uldListFilterVO)
            throws SystemException {
		log.entering("INSIDE THE CONTROLLER", "findULDListColl");
		Collection<ULDListVO> ULDlistVOs = ULD.findULDListColl(uldListFilterVO);
		if (ULDlistVOs != null) {
			calculateDayDifference(ULDlistVOs);
		}
		return ULDlistVOs;
	}

	/**
	 * This method is used for listing collection of uld agreement in the
	 * system,bug25282
	 *
	 * @author A-3045
	 * @param uldAgreementFilterVO
	 * @return Collection<ULDAgreementVO>
	 * @throws SystemException
	 */
    public Collection<ULDAgreementVO> listULDAgreementsColl(
            ULDAgreementFilterVO uldAgreementFilterVO) throws SystemException {
		log.entering("ULDController", "listULDAgreementsColl");
		return ULDAgreement.listULDAgreementsColl(uldAgreementFilterVO);
	}

	/**
	 * This method retrieves the uld details of the specified filter condition
	 * for SCM
	 *
	 * @author A-3045
	 * @param uldListFilterVO
	 * @param pageNumber
	 * @return Page<ULDVO>
	 * @throws SystemException
	 */
    public Page<ULDVO> findULDListForSCM(ULDListFilterVO uldListFilterVO,
            int pageNumber) throws SystemException {
		log.entering("INSIDE THE CONTROLLER", "findULDListForSCM");
        return ULD.findULDListForSCM(uldListFilterVO, pageNumber);
	}

	/**
	 * @author a-2412
	 * @param transactionVO
	 * @return
	 * @throws SystemException
	 */
    public Collection<ErrorVO> validateULDsForTransaction(
            TransactionVO transactionVO) throws SystemException {
        Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
        boolean isValid = false;
        if (transactionVO != null
                && transactionVO.getUldTransactionDetailsVOs() != null) {
            for (ULDTransactionDetailsVO transactionDetailsVo : transactionVO
                    .getUldTransactionDetailsVOs()) {
				/* check added for bug 102803 starts */
                int length = transactionDetailsVo.getUldNumber().trim()
                        .length();
                String ownerCode = transactionDetailsVo.getUldNumber()
                        .substring(length - 2);
                LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                    .getLogonAttributesVO();

				if (logonAttributes.getCompanyCode().equals(ownerCode)) {
					/* check added for bug 102803 ends */
					isValid = true;

					ULD uld = checkULDExistsForTransaction(transactionDetailsVo);

					log.log(Log.FINE, "THE VALUE FOR ULDEXISTS IS", uld);
					if (uld == null) {
						log.log(Log.INFO, "ULD IS NULL ULD IS NULL");
                        if (transactionDetailsVo.getTransactionType().equals(
                                LOANED_TRANSACTION)) {
                            errors.add(new ErrorVO(
                                    "uld.defaults.uld.doesnot.exists",
                                    new Object[] { transactionDetailsVo

                                    .getUldNumber() }));
                        }
                    }
                    if (uld != null
                            && transactionDetailsVo.getTransactionType()
                                    .equals(LOANED_TRANSACTION)) {
						if ("N".equals(uld.getOverallStatus())) {
                            log.log(Log.INFO, "THe ULD is NONOPERATIONAL",
                                    transactionDetailsVo.getUldNumber());
                            errors.add(new ErrorVO(
                                    "uld.defaults.uld.nonoperational",
                                    new Object[] { transactionDetailsVo
                                            .getUldNumber() }));
                            isValid = false;
                        }
                    }
                    /*
                     * Commented by A-3415 for ICRD-114538
                     * if (uld != null
                            && !(transactionDetailsVo.getTransactionType()
                                    .equals(LOANED_TRANSACTION))) {
                        log
                                .log(Log.INFO,
                                        "CHECK WHETHER THE ULD TRYING TO BE BORROWED HAS OPRIDR AND OWNER SAME");
                        if (uld.getOperationalAirlineIdentifier() == transactionDetailsVo
                                .getToPartyIdentifier()
                                || (uld.getLoanReferenceNumber() != 0 && uld
                                        .getBorrowReferenceNumber() == 0)) {
                            log
                                    .log(Log.INFO,
                                            "CHEWCK1 CHEWCK1 CHEWCK1 CHEWCK1 CHEWCK1 CHEWCK1 ");
                            errors.add(new ErrorVO(
                                    "uld.defaults.sameuldexixts.cannotborrow",
                                    new Object[] { transactionDetailsVo
                                            .getUldNumber() }));
                            isValid = false;
                        }
                    }

                     * Check whether the LoanedULD IS Already Loaned check
                     * wether the Borroed ULD is AlreadyBorrowed

                    if (isValid) {
                        isValid = checkLoanedULDAlreadyLoaned(
                                transactionDetailsVo.getCompanyCode(),
                                transactionDetailsVo.getUldNumber(),
                                transactionDetailsVo.getTransactionType());

                        if (isValid) {
                            log
                                    .entering(
                                            "LOANED/BORROWED ULD IS ALREADY LOANED/BORROWED",
                                            "ERRORS CREATED ");
                            if (transactionDetailsVo.getTransactionType()
                                    .equals(LOANED_TRANSACTION)) {
                                log
                                        .log(Log.FINE,
                                                "LOAN  ULD IS ALREDAY LOANED");
                                errors
                                        .add(new ErrorVO(
                                                "uld.defaults.transaction.loaneduld.alreadyloaned",
                                                new Object[] { transactionDetailsVo
                                                        .getUldNumber() }));
                            } else {
                                log.log(Log.FINE,
                                        "BORROW ULD IS ALREDAY LOANED");
                                errors
                                        .add(new ErrorVO(
                                                "uld.defaults.transaction.borroweduld.alreadyborrowed",
                                                new Object[] { transactionDetailsVo
                                                        .getUldNumber() }));
                            }
                        }

                        *//**
                         * checks whether we are trying to loan an Uld which is
                         * Already Borrowed checks whether we are trying to
                         * borrow a ULD which we have Already Loaned to the same
                         * party; Actually if these alternatives it is a RETURN
                         * TRANSACTION
                         *//*


                         * Here when loan Transaction is being performed ,
                         * partyCode is set as toPartyCode and if it is Borrow
                         * it is partyCode is fromPartyCode.

                        String partyCode = null;
                        if (LOANED_TRANSACTION.equals(transactionDetailsVo
                                .getTransactionType())) {
                            partyCode = transactionDetailsVo.getToPartyCode();
                        } else {
                            partyCode = transactionDetailsVo.getFromPartyCode();
                        }
                        // ***changed
                        if (!isValid) {
                            isValid = checkBorrowedULDLoanedToSameParty(
                                    transactionDetailsVo.getCompanyCode(),
                                    transactionDetailsVo.getUldNumber(),
                                    transactionDetailsVo.getPartyType(),

                                    // transactionDetailsVo.getPartyCode(),
                                    partyCode, transactionDetailsVo
                                            .getTransactionType());

                            if (isValid) {
                                log
                                        .log(
                                                Log.INFO,
                                                "CANNOT  LOAN/BORROW A ULD WHICH IS ACTUALLY BORROW LOANED FROM THE SAME PARTY  ERRORS CREATED ");
                                if (transactionDetailsVo.getTransactionType()
                                        .equals(LOANED_TRANSACTION)) {
                                    errors.add(new ErrorVO(
                                            "uld.defaults.loanuld.borrowed",
                                            new Object[] { transactionDetailsVo
                                                    .getUldNumber() }));
                                } else {
                                    errors.add(new ErrorVO(
                                            "uld.defaults.borrowuld.loaned",
                                            new Object[] { transactionDetailsVo
                                                    .getUldNumber() }));
                                }

                            }
                        }
                    }*/

				}
			}
		}
		log.log(Log.INFO, "Errors are-------->>", errors);
		if (errors != null && errors.size() > 0) {
			log.log(Log.INFO, "Errors.size", errors.size());
			for (ErrorVO err : errors) {
				log.log(Log.INFO, "err-----------", err.getErrorCode());
			}
		}
		return errors;

	}













	/**
	 * This method retrieves the uld details of the specified filter condition
	 * for SCM validation screen at a particular for a specified period
	 *
	 * @author A-3459
	 * @param scmValidationFilterVO
	 * @return Page<SCMValidationVO>
	 * @throws SystemException
	 */
    public Page<SCMValidationVO> findSCMValidationList(
            SCMValidationFilterVO scmValidationFilterVO) throws SystemException {
		log.entering("INSIDE THE CONTROLLER", "findSCMValidationList");
        return ULD.findSCMValidationList(scmValidationFilterVO);
	}

	/**
	 *
	 * a-3459
	 *
	 * @param SCMValidationFilterVO
	 * @return Collection<SCMValidationVO>
	 * @throws SystemException
	 */
    public Collection<SCMValidationVO> findSCMValidationListColl(
            SCMValidationFilterVO scmValidationFilterVO) throws SystemException {
		log.entering("INSIDE THE CONTROLLER", "findULDListColl");
        return ULD.findSCMValidationListColl(scmValidationFilterVO);
	}

	/**
	 * @param reportSpec
	 * @return
	 * @throws SystemException
	 * @throws RemoteException
	 * @throws ULDDefaultsBusinessException
	 */
	public Map<String, Object> printSCMValidationReport(ReportSpec reportSpec)
            throws SystemException, RemoteException,
            ULDDefaultsBusinessException {
		log.entering("ULDController", "printSCMValidationReport");
		Iterator<Object> filterValues = reportSpec.getFilterValues().iterator();
        SCMValidationFilterVO scmValidationFilterVO = (SCMValidationFilterVO) filterValues
                .next();
		log.log(Log.FINE, "SCMValidationFilterVO======", scmValidationFilterVO);
		Collection<SCMValidationVO> scmValidationVOs = null;
		scmValidationVOs = findSCMValidationListColl(scmValidationFilterVO);
        //Added by A-7359 for ICRD-269583 starts here 
        boolean includeDiscrepancyCheck=false;
        Collection<String> systemParameterCodes = new ArrayList<String>();
		Map parameterMap = new HashMap();
		systemParameterCodes.add(SYS_PARAM_DISPLAYDISONSTOCKCHECK);
		try {
			parameterMap = Proxy.getInstance().get(SharedDefaultsProxy.class)
					.findSystemParameterByCodes(systemParameterCodes);
		} catch (ProxyException proxyException) {
			log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
		}
		 if(parameterMap!=null&&parameterMap.get(SYS_PARAM_DISPLAYDISONSTOCKCHECK)!=null){
			 includeDiscrepancyCheck=OneTimeVO.FLAG_YES.equals(parameterMap.get(SYS_PARAM_DISPLAYDISONSTOCKCHECK));
		 }
		 if(includeDiscrepancyCheck){
		 for(SCMValidationVO vo :scmValidationVOs){
			 
			if(vo.isMissingDiscrepancyCaptured()){
				vo.setScmFlag(FLAG_NO);
			}
		 }}
		  //Added by A-7359 for ICRD-269583  ends here
		if (scmValidationVOs != null && scmValidationVOs.size() > 0) {
			log.log(Log.FINE, "size at the beginning--->", scmValidationVOs.size());
			int tot = 0;
			int notsighted = 0;
			double missing = 0.0;
			ArrayList<SCMValidationVO> scmValidationVos = (ArrayList<SCMValidationVO>) scmValidationVOs;
            notsighted = Integer.parseInt(scmValidationVos.get(0)
                    .getNotSighted());
			tot = Integer.parseInt(scmValidationVos.get(0).getTotal());
			if (tot != 0) {
				scmValidationFilterVO.setTotal(String.valueOf(tot));
				scmValidationFilterVO.setNotSighted(String.valueOf(notsighted));
				missing = (double) notsighted / (double) tot;
				missing = missing * 100;
				log.log(Log.FINE, "tot--->", tot);
				log.log(Log.FINE, "missing--->", missing);
				log.log(Log.FINE, "missing--->", String.valueOf(missing));
				scmValidationFilterVO.setMissing(String.valueOf(missing));
			}
		}
		if (scmValidationVOs == null || scmValidationVOs.size() == 0) {
			ULDDefaultsBusinessException uldDefaultsBusinessException = new ULDDefaultsBusinessException();
            ErrorVO reporterror = new ErrorVO(
                    ULDDefaultsBusinessException.ULD_DEFAULS_NO_DATA_FOUND);
			uldDefaultsBusinessException.addError(reporterror);
			throw uldDefaultsBusinessException;
		}
		reportSpec.addParameter(scmValidationFilterVO);
		reportSpec.setData(scmValidationVOs);
		return ReportAgent.generateReport(reportSpec);
	}

	/**
	 * @author a-3278 To offload the ulds from flight
	 * @param uldVos
	 * @throws ULDInTransactionException
	 * @throws DuplicateManufacturerNumberExistsException
	 * @throws SystemException
	 */
    public void offloadULDs(Collection<ULDVO> uldVos) throws SystemException,
            RemoteException, ULDDefaultsBusinessException {
		log.entering("INSIDE THE CONTROLLER", "offloadULDs");
		log.log(Log.INFO, "%%%%%%%%%%%%%%%%%  Collection<ULDVO>", uldVos);
		if (uldVos != null && uldVos.size() > 0) {
			for (ULDVO uldVO : uldVos) {
				ULD uld = null;
				try {
                    uld = ULD
                            .find(uldVO.getCompanyCode(), uldVO.getUldNumber());
				} catch (FinderException ex) {
					throw new SystemException(ex.getErrorCode(), ex);
				}
				if (uld != null) {
					uld.setTransitStatus(uldVO.getTransitStatus());
					uld.setFlightInfo("");
					uld.setLastUpdateUser(uldVO.getLastUpdateUser());
					uld.setLastUpdateTime(uldVO.getLastUpdateTime());
				}

				// To capture audit for offloading the uld
                ULDAuditVO uldAuditVO = new ULDAuditVO(ULDVO.MODULE,
                        ULDVO.SUBMODULE, ULDVO.ENTITY);
                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                        uldAuditVO, uld, false);
				auditForOffloadUlds(uld, uldAuditVO, uldVO);
				uldAuditVO.setActionCode(UPDATE_ULD);
				uldAuditVO.setAuditRemarks(uldVO.getRemarks());
				AuditUtils.performAudit(uldAuditVO);
				// Audit ends
			}
		}
	}

	/**
	 * @author a-3278 To capture the audit details while offloading the ulds
	 * @param uld
	 * @param uldAuditVO
	 */
	private void auditForOffloadUlds(ULD uld, ULDAuditVO uldAuditVO, ULDVO uldVo) {
		log.log(Log.FINE, "---------Setting auditForOffloadUlds Details------");
		StringBuffer additionalInfo = new StringBuffer();
		log.log(Log.INFO, " uld.getUldPK() ", uld.getUldPK());
		uldAuditVO.setCompanyCode(uld.getUldPK().getCompanyCode());
		uldAuditVO.setUldNumber(uld.getUldPK().getUldNumber());
        uldAuditVO.setTxnTime(new LocalDate(uld.getCurrentStation(),
                Location.ARP, true).toGMTDate());

        uldAuditVO.setTxnLocalTime(new LocalDate(uld.getCurrentStation(),
                Location.ARP, true));
        uldAuditVO.setAuditRemarks(uld.getRemarks());
        uldAuditVO.setUserId(uld.getLastUpdateUser());

        additionalInfo.append("Flight Info - ").append(uldVo.getFlightInfo())
                .append(",");

        additionalInfo.append("Transit Status - ").append(
                uldVo.getTransitStatus());

        uldAuditVO.setAdditionalInformation(additionalInfo.toString());
        log.exiting("auditForOffloadUlds",
                "...Finished construction of AuditVO");
    }

    /**
     *
     * @param companyCode
     * @param partyType
     * @return
     * @throws SystemException
     */
    public Collection<ULDServiceabilityVO> listULDServiceability(
            String companyCode, String partyType) throws SystemException {
		log.entering("ULDController", "listULDServiceability");
		return ULDServiceability.listULDServiceability(companyCode, partyType);
	}

	/**
	 *
	 * @param serviceabilityVOs
	 * @throws SystemException
	 * @throws DefaultFlagAlreadySetException
	 * @throws FacilityCodeInUseException
	 */
    public void saveULDServiceability(
            Collection<ULDServiceabilityVO> serviceabilityVOs)
            throws SystemException {
		log.entering("ULDController", "saveULDServiceability");

		Collection<ULDServiceabilityVO> deleteVos = new ArrayList<ULDServiceabilityVO>();

		if (serviceabilityVOs != null && serviceabilityVOs.size() > 0) {

			for (ULDServiceabilityVO serviceabilityVO : serviceabilityVOs) {
                if (ULDServiceabilityVO.OPERATION_FLAG_DELETE
                        .equalsIgnoreCase(serviceabilityVO.getOperationFlag())) {
					deleteVos.add(serviceabilityVO);
					ULDServiceability uldServiceability = null;
                    uldServiceability = ULDServiceability
                            .find(serviceabilityVO);
					uldServiceability.remove();
				}
			}

			for (ULDServiceabilityVO serviceabilityVO : serviceabilityVOs) {
				if (("I").equalsIgnoreCase(serviceabilityVO.getOperationFlag())) {
					boolean checkDuplicate = true;

					for (ULDServiceabilityVO delVO : deleteVos) {
                        if (serviceabilityVO.getCompanyCode().equalsIgnoreCase(
                                delVO.getCompanyCode())
                                && serviceabilityVO.getCode().equalsIgnoreCase(
                                        delVO.getCode())
                                && serviceabilityVO.getDescription()
                                        .equalsIgnoreCase(
                                                delVO.getDescription())
                                && serviceabilityVO.getPartyType()
                                        .equalsIgnoreCase(delVO.getPartyType())) {
                            log.log(Log.INFO,
                                    "ROW GETTING INSERTED AND DELETED IS SAME");
                            checkDuplicate = false;
                        }
                    }
                }
            }
            for (ULDServiceabilityVO serviceabilityVO : serviceabilityVOs) {
                if (ULDServiceabilityVO.OPERATION_FLAG_INSERT
                        .equalsIgnoreCase(serviceabilityVO.getOperationFlag())) {
                    ULDServiceability serv = new ULDServiceability(
                            serviceabilityVO);
				} else if (ULDServiceabilityVO.OPERATION_FLAG_UPDATE
						.equalsIgnoreCase(serviceabilityVO.getOperationFlag())) {

					ULDServiceability uLDServiceability = null;
                    uLDServiceability = ULDServiceability
                            .find(serviceabilityVO);
					uLDServiceability.update(serviceabilityVO);
				}
			}
		}
	}

	/**
	 * @author a-3278 As a part of the bug 101305 on 07Oct10
	 * @param serviceabilityVOs
	 * @throws ULDTransactionDetailsVO
	 * @throws DimensionConversionException
	 * @throws CurrencyConversionException
	 */
    public void createOALLoanTransaction(
            ULDTransactionDetailsVO transactionDetailsVo)
            throws SystemException, DimensionConversionException,
            CurrencyConversionException {

		ULD uld = null;
		String uldType = "";
		/* Creates the loan transaction */
		ULDTransaction transaction = new ULDTransaction(transactionDetailsVo);
        int loanReferenceNumber = transaction.getUldTransactionPK()
                .getTransactionRefNumber();

		uldType = parseULDType(transactionDetailsVo.getUldNumber());
		log.log(Log.FINE, "THE ULDTYPE IS ", uldType);
		/*
		 * Call findStructural Details since in case of a Other Airline Loan
		 * Transaction we are introducing an new ULD in the ULDMST containing
		 * the LONREFNUM in ULDMST as same as TXNREFNUM in ULDTXNMST
		 *
		 */
        ULDTypeVO typeVo = null;
        if(transactionDetailsVo.getUldNumber() != null && transactionDetailsVo.getUldNumber().length() > 0) {
        	typeVo = findULDTypeStructuralDetails(transactionDetailsVo
                    .getCompanyCode(), transactionDetailsVo.getUldNumber());
        }
        else {
        	typeVo = findULDTypeStructuralDetails(transactionDetailsVo
                    .getCompanyCode(), uldType);
        }        

		/* Creates the uld into the system */
		log.log(Log.INFO, "CREATE NEW ULDVO");
		ULDAirportLocationVO uldAirportLocationVO = null;
		ULDVO uldVo = new ULDVO();

		uldVo.setCompanyCode(transactionDetailsVo.getCompanyCode());
		uldVo.setUldNumber(transactionDetailsVo.getUldNumber());
		uldVo.setUldType(uldType);
		uldVo.setUldGroupCode(typeVo.getUldGroupCode());
        uldVo.setOperationalAirlineIdentifier(transactionDetailsVo
                .getOperationalAirlineIdentifier());

		String uldNumber = transactionDetailsVo.getUldNumber();
		String fromPartyCode = transactionDetailsVo.getFromPartyCode();
		if (uldNumber.endsWith(fromPartyCode)) {
            uldVo.setOwnerAirlineIdentifier(transactionDetailsVo
                    .getCurrOwnerCode());
		} else {
			int len = uldNumber.length();
			String twoalphacode = uldNumber.substring(len - 2);
			String threealphacode = uldNumber.substring(len - 3);

			log.log(Log.INFO, "%%%%%%%% twoalphacode ", twoalphacode);
			log.log(Log.INFO, "%%%%%%%% threealphacode ", threealphacode);
            String arldtl = findOwnerCode(
                    transactionDetailsVo.getCompanyCode(), twoalphacode,
                    threealphacode);
            //Null Check added as part of ICRD-21184
            if(arldtl != null) {
				String airlineDetailArr[] = arldtl.split("~");
				int ownerAirlineId = Integer.valueOf(airlineDetailArr[1]);
				log.log(Log.INFO, "%%%%%%%% ownerAirlineId ", ownerAirlineId);
				uldVo.setOwnerAirlineIdentifier(ownerAirlineId);
			}
		}
		// ends
		uldVo.setLastUpdateTime(transactionDetailsVo.getLastUpdateTime());
		uldVo.setLoanReferenceNumber(loanReferenceNumber);
		uldVo.setLastUpdateUser(transactionDetailsVo.getLastUpdateUser());
		/*uldVo.setDisplayBaseHeight(typeVo.getBaseDimHeight());
        uldVo.setDisplayBaseLength(typeVo.getBaseDimLength());
        uldVo.setDisplayBaseWidth(typeVo.getBaseDimWidth());
		uldVo.setDisplayDimensionUnit(typeVo.getBaseDimUnit());*/
		uldVo.setStructuralWeight(typeVo.getStructuralWtLmt());
		//uldVo.setDisplayStructuralWeightUnit(typeVo.getStructuralWtLmtUnit());
        uldVo.setDisplayIataReplacementCost(typeVo.getIATARepCost());
        uldVo.setDisplayIataReplacementCostUnit(typeVo.getIATARepCostUnit());
        uldVo.setCurrentStation(transactionDetailsVo
                .getTransactionStationCode());
        uldVo.setOwnerStation(transactionDetailsVo.getTransactionStationCode());
        uldVo.setDamageStatus(ULDVO.DAMAGED_STATUS);

        uldVo.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
        uldVo.setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
		uldVo.setTareWeight(typeVo.getTareWt());
		//uldVo.setDisplayTareWeightUnit(typeVo.getTareWtUnit());
        uldVo.setBaseHeight(typeVo.getBaseDimHeight());
        uldVo.setBaseLength(typeVo.getBaseDimLength());
        uldVo.setBaseWidth(typeVo.getBaseDimWidth());
        uldVo.setOperationalFlag(ULDVO.OPERATION_FLAG_INSERT);
        uldVo.setTransitStatus("N");

        if (transactionDetailsVo.getUldNature() != null
                && transactionDetailsVo.getUldNature().trim().length() > 0) {
            uldVo.setUldNature(transactionDetailsVo.getUldNature());
        } else {
            uldVo.setUldNature("GEN");
        }

        uldVo.setControlReceiptNumber(transactionDetailsVo
                .getControlReceiptNumber());

        if (transactionDetailsVo.getControlReceiptNumber() != null
                && transactionDetailsVo.getControlReceiptNumber().trim()
                        .length() > 0) {
            uldVo.setControlReceiptNumber(transactionDetailsVo
                    .getControlReceiptNumber());
        }
        log.log(Log.FINE, "CURRENT STATION TO BE SET IN THE ULDMST",
                transactionDetailsVo.getTransactionStationCode());
        uldVo.setLastUpdateTime(transactionDetailsVo.getLastUpdateTime());
        uldVo.setLastUpdateUser(transactionDetailsVo.getLastUpdateUser());
        Collection<ULDAirportLocationVO> airportLocs = null;
        if ("G".equals(transactionDetailsVo.getPartyType())) {
            airportLocs = listULDAirportLocation(transactionDetailsVo
                    .getCompanyCode(), transactionDetailsVo
                    .getTransactionStationCode(),
                    ULDAirportLocationVO.FACLITY_AGENTLOC);
            for (ULDAirportLocationVO airportLoc : airportLocs) {
                if ("Y".equals(airportLoc.getDefaultFlag())) {
                    uldVo.setLocation(airportLoc.getFacilityCode());
                    uldVo.setFacilityType(airportLoc.getFacilityType());
                }
            }
        } else {
            uldAirportLocationVO = ULD.findCurrentLocation(transactionDetailsVo
                    .getCompanyCode(), transactionDetailsVo
                    .getTransactionStationCode(), CONTENT_EMPTY);

			if (uldAirportLocationVO != null) {
				uldVo.setLocation(uldAirportLocationVO.getFacilityCode());
				uldVo.setFacilityType(uldAirportLocationVO.getFacilityType());
			} else {
				uldVo.setLocation(ULDVO.NO_LOCATION);
				uldVo.setFacilityType(ULDVO.NO_LOCATION);
			}
		}

		uld = new ULD(uldVo);

		log.exiting("ULD_CONTROLLER", "createOALLoanTransaction");
	}

	/**
	 * Added for bug 103078 by A-3725
	 *
	 * @param transactionVO
	 * @return
	 * @throws SystemException
	 * @throws DimensionConversionException
	 * @throws CurrencyConversionException
	 * @throws ULDDefaultsBusinessException
     *//* Commented by A-3415 for ICRD-114538
    private void updateULDDummyLoanAndReturnTransactionForLUC(
            Collection<ULDReturnTxnVO> uldReturnTxnVOs) throws SystemException,
            CurrencyConversionException, DimensionConversionException,
            ULDDefaultsBusinessException {
        log.entering("updateULDDummyLoanAndReturnTransactionForLUC",
                "Dummy Loan and return");
        Collection<ErrorVO> errors = null;
        TransactionVO transactionVO = new TransactionVO();
        Collection<ULDTransactionDetailsVO> uldTransactionDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
        Collection<TransactionVO> transactionVOs = new ArrayList<TransactionVO>();
        log.log(Log.INFO, "INSIDE UPDATE SESSION");

        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                                            .getLogonAttributesVO();

        for (ULDReturnTxnVO uldReturnTxnVO : uldReturnTxnVOs) {

            AirlineValidationVO topartyVO = null;
            SharedAirlineProxy airlineProxy = new SharedAirlineProxy();

            if(uldReturnTxnVO.getToPartyCode()!=null
                    && uldReturnTxnVO.getToPartyCode().trim().length()>0){
                try {
                    topartyVO = airlineProxy.validateAlphaCode(
                            logonAttributes.getCompanyCode(),
                            uldReturnTxnVO.getToPartyCode().toUpperCase());
                }catch(ProxyException pe){
                    log.log(Log.SEVERE, " Airline ProxyException" );
                }
            }


            AirlineValidationVO fromPartyVO = null;

            if(uldReturnTxnVO.getFromPartyCode()!=null
                    && uldReturnTxnVO.getFromPartyCode().trim().length()>0){
                try {
                fromPartyVO = airlineProxy.validateAlphaCode(
                            logonAttributes.getCompanyCode(),
                            uldReturnTxnVO.getFromPartyCode().toUpperCase());
                }catch(ProxyException pe){
                    log.log(Log.SEVERE, " Airline ProxyException" );
                }
            }

            ULDTransactionDetailsVO vo = new ULDTransactionDetailsVO();
            vo.setControlReceiptNumberPrefix(uldReturnTxnVO.getCrn().substring(
                    0, 3));
            vo.setCrnToDisplay(uldReturnTxnVO.getCrn());
            vo.setControlReceiptNumber(uldReturnTxnVO.getCrn());
            vo.setFromPartyCode(uldReturnTxnVO.getFromPartyCode());
            vo
                    .setOperationalFlag(ULDTransactionDetailsVO.OPERATION_FLAG_INSERT);
            vo.setToPartyCode(uldReturnTxnVO.getToPartyCode());
            vo.setUldNumber(uldReturnTxnVO.getUldNumber());
            vo.setCompanyCode(uldReturnTxnVO.getCompanyCode());
            vo.setTransactionType(uldReturnTxnVO.getTransactionType());
            vo.setPartyType(uldReturnTxnVO.getPartyType());
            vo.setTransactionDate(uldReturnTxnVO.getTransactionDate());
            vo.setReturnDate(uldReturnTxnVO.getTransactionDate());
            vo.setTransactionStationCode(uldReturnTxnVO
                    .getTransactionAirportCode());
            vo.setTxStationCode(uldReturnTxnVO.getDestinationStation());
            vo.setTransactionStatus(TransactionVO.TO_BE_RETURNED);
            vo.setUldConditionCode(uldReturnTxnVO.getUldCondition());
            LocalDate currentDate = new LocalDate(LocalDate.NO_STATION,
                    Location.NONE, true);
            vo.setLastUpdateTime(currentDate);
            vo.setLastUpdateUser(logonAttributes.getUserId());
            if (("DAM").equals(uldReturnTxnVO.getUldCondition())) {
                vo.setDamageStatus(ULDTransactionDetailsVO.FLAG_YES);
            } else {
                vo.setDamageStatus(ULDTransactionDetailsVO.FLAG_NO);
            }
            log.log(Log.FINE, "getUldCondition", vo.getDamageStatus());
            vo.setPartyType(uldReturnTxnVO.getPartyType());
            vo
                    .setOperationalFlag(ULDTransactionDetailsVO.OPERATION_FLAG_INSERT);

            if(fromPartyVO!=null){
                vo.setFromPartyIdentifier(fromPartyVO.getAirlineIdentifier());
                vo.setFromPartyName(fromPartyVO.getAirlineName());
            }

            if(topartyVO!=null){
                vo.setToPartyIdentifier(topartyVO.getAirlineIdentifier());
                vo.setToPartyName(topartyVO.getAirlineName());
            }
            vo.setTransactionNature("T");
            uldTransactionDetailsVOs.add(vo);
            transactionVO.setCompanyCode(uldReturnTxnVO.getCompanyCode());
            transactionVO.setTransactionType(uldReturnTxnVO
                    .getTransactionType());
            transactionVO.setTransactionStation(uldReturnTxnVO
                    .getTransactionAirportCode());
            transactionVO.setTransactionDate(uldReturnTxnVO
                    .getTransactionDate());
            transactionVO.setStrTransactionDate("");
            transactionVO.setTransactionTime("");


        }

        if (transactionVO.getUldTransactionDetailsVOs() == null) {
            transactionVO
                    .setUldTransactionDetailsVOs(new ArrayList<ULDTransactionDetailsVO>());
        }
        transactionVO.getUldTransactionDetailsVOs().addAll(
                uldTransactionDetailsVOs);
        transactionVOs.add(transactionVO);
        for (TransactionVO transactionVOforDummy : transactionVOs) {
            log.log(Log.FINE, "transactionVO------------->>",
                    transactionVOforDummy);
            errors = createULDDummyLoanAndReturnTransaction(transactionVOforDummy);
            if (errors != null && errors.size() > 0) {
                for (ErrorVO error : errors) {
                    if ("uld.defaults.uld.doesnot.exists".equals(error
                            .getErrorCode())) {
                        throw new ULDDefaultsBusinessException(
                                "uld.defaults.uld.doesnot.exists",
                                new Object[] { error.getErrorData()[0] });
                    }
                    // log.log(Log.FINE,
                    // "overrrrrrrrrrrrrrnnnnnnnnnnnnnnnnnnnnnowwwwwwwww-------------->>"
                    // );
                }
            }
        }
    }*/













    public Collection<FlightFilterVO> validateFlightsForSegments(
            Collection<FlightFilterVO> flightFilterVOs)
	    	throws SystemException, ULDDefaultsBusinessException {
		try {
			return new FlightOperationsProxy().validateFlightsForSegments(flightFilterVOs);
		} catch (ProxyException e) {
			// To be reviewed Auto-generated catch block
			e.getMessage();
			throw new ULDDefaultsBusinessException(e);
		}
	}
    public Page<EstimatedULDStockVO> findEstimatedULDStockList(
            EstimatedULDStockFilterVO estimatedULDStockFilterVO,
			int displayPage) throws SystemException {
		log.entering("ULDController", "findEstimatedULDStockList");
		Page<EstimatedULDStockVO> estimatedULDStockVOs = null;
        estimatedULDStockVOs = ULD.findEstimatedULDStockList(
                estimatedULDStockFilterVO, displayPage);
		log.exiting("ULDController", "findEstimatedULDStockList");
		return estimatedULDStockVOs;
	}
    public Page<ExcessStockAirportVO> findExcessStockAirportList(
            ExcessStockAirportFilterVO excessStockAirportFilterVO,
			int displayPage) throws SystemException {
		log.entering("ULDController", "findExcessStockAirportList");
		Page<ExcessStockAirportVO> excessStockAirportVOs = null;
        excessStockAirportVOs = ULD.findExcessStockAirportList(
                excessStockAirportFilterVO, displayPage);
		log.exiting("ULDController", "findExcessStockAirportList");
		return excessStockAirportVOs;
	}
	/**
	 * 
	 * @param messageVOs
	 * @throws SystemException 
	 */
    public void sendMessageWithEnvelopeEncoding(Collection<MessageVO> messageVOs) throws SystemException
    {
        MsgBrokerMessageProxy msgBrokerMsgProxy=new MsgBrokerMessageProxy();
        try
        {
			msgBrokerMsgProxy.sendMessageWithEnvelopeEncoding(messageVOs);
        }
        catch(ProxyException e)
        {
			log.log(Log.INFO, "SCM message SendingException");
			log.exiting("ULDController", "sendMessageWithEnvelopeEncoding");
		}
	}
    public Page<FlightSegmentForBookingVO> listFlightDetails(
            FlightAvailabilityFilterVO fltAvbFilterVO)throws SystemException,RemoteException,CapacityBookingBusinessException {
        CapacityBookingProxy capBookingProxy=new CapacityBookingProxy();
        Page<FlightSegmentForBookingVO> fltSegForBookingVO=null;
        try {
            fltSegForBookingVO=capBookingProxy.findFlightsForBooking(fltAvbFilterVO);
		} catch (CapacityBookingBusinessException e) {
		} catch (RemoteException e) {
		} catch (SystemException e) {
        }
         catch (ProxyException e) {
			}
		return fltSegForBookingVO;
	}
	
	/**
	 * 
	 * @param companyCode
	 * @param carrierCode
	 * @return 
	 * @throws SystemException
	 */
    public AirlineValidationVO populateAirlineCodes(String companyCode,
            String carrierCode) throws SystemException {
		AirlineValidationVO airlineValidationVO = null;
		try {
			airlineValidationVO = new SharedAirlineProxy().validateAlphaCode(companyCode, carrierCode.toUpperCase());
		} catch (ProxyException e) {
			throw new SystemException("In populateAirlineCodes" + e.getMessage());
        }
        catch (SystemException e) {
            throw new SystemException("In populateAirlineCodes" + e.getMessage());
        }
        log.log(Log.INFO, "airlineValidationVO ------------->",airlineValidationVO);

		return airlineValidationVO;
	}
    /**
     * Added by A-3415 for ICRD-114051
     * This method is used to record ULD movement details for a ULD
     * when it is invoked from screen
     * @param uldNOs
     * @param uldMovementVos
     * @throws SystemException
     * @throws ULDDoesNotExistsException
     */
    public void saveULDMovementFromScreen(Collection<String> uldNOs,
            Collection<ULDMovementVO> uldMovementVos, String screenID, String overrideFlag) throws SystemException,
            ULDDoesNotExistsException {
        if("REC_ULD".equals(screenID)){
			boolean isOverride = false;
			String[] invalidULDs = null;
            if(overrideFlag!=null && overrideFlag.startsWith("canCreateULD")){
                isOverride=true;
				String[] details = overrideFlag.split("~");
                if(details!=null && details.length>1){
					invalidULDs = details[1].split(",");
				}				
			}
			Collection<ULDMovementVO> uldVOs = new ArrayList<ULDMovementVO>();
            if(uldNOs!=null && uldNOs.size()>0 && uldMovementVos!=null && uldMovementVos.size()>0){
                ArrayList<ULDMovementVO> uldMovementVOsList =  (ArrayList<ULDMovementVO>)uldMovementVos;
				ULDMovementVO parentVO = uldMovementVOsList.get(0);
				for (String str : uldNOs) {
					ULDMovementVO vo = new ULDMovementVO();
                    log.log(Log.FINE, "CREATE ULD MOVEMENT VOS SETTING ULDNUMBERS",
                            uldNOs.size());
					vo.setCompanyCode(parentVO.getCompanyCode());
					vo.setUldNumber(str);
					vo.setLastUpdatedTime(parentVO.getLastUpdatedTime());
					vo.setLastUpdatedUser(parentVO.getLastUpdatedUser());
					vo.setCurrentStation(parentVO.getCurrentStation());
					vo.setRemark(parentVO.getRemark());
					vo.setScmDate(parentVO.getScmDate());
					vo.setScmFlag(parentVO.getScmFlag());
                    log.log(Log.FINE, "VALUES IN THE CONTROLLER ARE ",
                            parentVO.getUpdateCurrentStation());
					vo.setUpdateCurrentStation(parentVO.getUpdateCurrentStation());
					log.log(Log.FINE, "VALUES IN THE CONTROLLER ARE ", vo.getUpdateCurrentStation());
					vo.setContent(parentVO.getContent());
					vo.setFacilityType(parentVO.getFacilityType());
					vo.setPouLocation(parentVO.getPouLocation());
					vo.setReportingAirport(parentVO.getReportingAirport());
					vo.setFacilityType(parentVO.getFacilityType());
					vo.setPouLocation(parentVO.getPouLocation());
					vo.setDiscrepancyDate(parentVO.getDiscrepancyDate());
					vo.setDiscrepancyCode(parentVO.getDiscrepancyCode());
					vo.setFlightCarrierIdentifier(parentVO.getFlightCarrierIdentifier());
					vo.setFlightNumber(parentVO.getFlightNumber());
					vo.setFlightDate(parentVO.getFlightDate());
					vo.setFlightDateString(parentVO.getFlightDateString());
					vo.setCarrierCode(parentVO.getCarrierCode());
					vo.setDummyMovement(parentVO.isDummyMovement());
                    //Modified by A-7794 as part of ICRD-193439
					vo.setPointOfLading(parentVO.getPointOfLading());
					vo.setPointOfUnLading(parentVO.getPointOfUnLading());
                    if(invalidULDs!=null && invalidULDs.length>0 && Arrays.asList(invalidULDs).contains(str)){
						vo.setULDNotExist(true);
					}
					uldVOs.add(vo);
				}
			}			
			Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
            if(!isOverride){
				validateULDForRecordMovement(uldVOs);
            }else{
                LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                        .getLogonAttributesVO();
                if(uldVOs!=null && uldVOs.size()>0){
                    for(ULDMovementVO uldMovementVO : uldVOs){
                        if(uldMovementVO.isULDNotExist()){
							int length = uldMovementVO.getUldNumber().length();
                            String uldOwnerCode = uldMovementVO.getUldNumber().substring(
                                    length - 2, length);
							String ownCarrierCode = logonAttributes.getOwnAirlineCode();
							Collection<String> systemParameterCodes = new ArrayList<String>();
							systemParameterCodes.add(ULD_STK_UPDATE_FOR_OAL);
							Map parameterMap = new HashMap();
							try {
								parameterMap = new SharedDefaultsProxy()
										.findSystemParameterByCodes(systemParameterCodes);
							} catch (ProxyException proxyException) {
								log.log(Log.INFO, "ULD_STK_UPDATE_FOR_OAL");
							}

                            if(ownCarrierCode.equals(uldOwnerCode) || parameterMap.get(ULD_STK_UPDATE_FOR_OAL)==null ||
                                    FLAG_NO.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))){
                                errors.add(new ErrorVO(
                                        ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS,
                                        new Object[] { uldMovementVO.getUldNumber() }));
                            }else{
								try {
									createULDForOALMovement(uldMovementVO);
									uldMovementVO.setULDNotExist(false);
								} catch (DimensionConversionException e) {
                                    errors.add(new ErrorVO(
                                            ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS,
                                            new Object[] { uldMovementVO.getUldNumber() }));
                                } catch (CurrencyConversionException e) {
                                    errors.add(new ErrorVO(
                                            ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS,
											new Object[] { uldMovementVO.getUldNumber() }));
								}								
							}
						}						
					}
				}
			}
            if(uldVOs!=null && uldVOs.size()>0){
                for(ULDMovementVO uldMovementVO : uldVOs){
                    if(!uldMovementVO.isULDNotExist() && !uldMovementVO.isDummyMovement()){
						ULD uld = null;
						uld = checkULDExists(uldMovementVO.getCompanyCode(), uldMovementVO.getUldNumber());
						try {
                            createTransactionsForOALULD(uldMovementVO,uld);
						} catch (MessageConfigException e) {
                            errors.add(new ErrorVO(
                                    ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS,
                                    new Object[] { uldMovementVO.getUldNumber() }));
                        } catch (CurrencyConversionException e) {
                            errors.add(new ErrorVO(
                                    ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS,
                                    new Object[] { uldMovementVO.getUldNumber() }));
                        } catch (DimensionConversionException e) {
                            errors.add(new ErrorVO(
                                    ULDDoesNotExistsException.ULD_DOES_NOT_EXISTS,
                                    new Object[] { uldMovementVO.getUldNumber() }));
                        }
                    }
                }
            }
        }
        saveULDMovement(uldNOs,uldMovementVos);
    }
    /*
     * Added by A-3415 for ICRD-114051
     * This method will Create the borrow transaction as well as add the ULD
     * to the master for OAL ULDs.
	 */
	private void createULDForOALMovement(ULDMovementVO uldMovementVO)
            throws SystemException, DimensionConversionException, CurrencyConversionException{
		log.entering("ULDCONTROLLER", "createULDForOALMovement");
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();
		// getting uldOwnerCode.ie , last 2 or 3 letters of the
		// String uldNumber
		int len = uldMovementVO.getUldNumber().length();
        String twoalphacode = uldMovementVO.getUldNumber()
                .substring(len - 2);
        String threealphacode = uldMovementVO.getUldNumber()
                .substring(len - 3);
        log.log(Log.INFO, "%%%%%%%% twoalphacode ", twoalphacode);
        log.log(Log.INFO, "%%%%%%%% threealphacode ", threealphacode);
        String arldtl = findOwnerCode(uldMovementVO
                .getCompanyCode(), twoalphacode, threealphacode);
        //Null Check added as part of ICRD-21184
        String airlineDetailArr[] = null;
        int ownerAirlineId = 0;
        if(arldtl != null) {
            airlineDetailArr = arldtl.split("~");
            ownerAirlineId = Integer
                .valueOf(airlineDetailArr[1]);
            log.log(Log.INFO, "%%%%%%%% ownerAirlineId ", ownerAirlineId);
        }
        /*if ((uldMovementVO.getFlightCarrierIdentifier() != 0 && ownerAirlineId == uldMovementVO
                .getFlightCarrierIdentifier())
                || (uldMovementVO
                        .getFlightCarrierIdentifier() == 0 && logonAttributes
                        .getOwnAirlineIdentifier() == ownerAirlineId)) {*/
            createULD(uldMovementVO,ownerAirlineId);
            // ends
            /*}  Commented by A-3415 for ICRD-114538 since Borrow txn no longer exist
        else {
            // do Borrow transaction
            ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
            transactionDetailsVO.setCompanyCode(uldMovementVO
                    .getCompanyCode());
            transactionDetailsVO
                    .setDamageStatus(ULDVO.DAMAGED_STATUS);
            //Null Check added as part of ICRD-21184
            if(arldtl != null) {
            if (("2").equals(airlineDetailArr[0])) {
                transactionDetailsVO
                        .setFromPartyCode(twoalphacode);
            } else {
                transactionDetailsVO
                        .setFromPartyCode(threealphacode);
                }
            }
            transactionDetailsVO
                    .setFromPartyIdentifier(ownerAirlineId);
            // transactionDetailsVO.setLastUpdateTime()
            transactionDetailsVO
                    .setLastUpdateUser(logonAttributes
                            .getUserId());
            if (uldMovementVO.getFlightCarrierIdentifier() != 0) {
                transactionDetailsVO
                        .setOperationalAirlineIdentifier(uldMovementVO
                                .getFlightCarrierIdentifier());
            } else {
                transactionDetailsVO
                        .setOperationalAirlineIdentifier(logonAttributes
                                .getOwnAirlineIdentifier());
            }
            transactionDetailsVO
                    .setCurrOwnerCode(ownerAirlineId);
            transactionDetailsVO
                    .setPartyType(PARTYTYPE_AIRLINE);
            // Here uldnature is estimated as GEN .This is used
            // when
            // uld is created
            transactionDetailsVO.setUldNature("GEN");
            transactionDetailsVO.setToPartyCode(uldMovementVO
                    .getCarrierCode());
            transactionDetailsVO
                    .setToPartyIdentifier(uldMovementVO
                            .getFlightCarrierIdentifier());
            transactionDetailsVO.setUldNumber(uldMovementVO
                    .getUldNumber());
            log.log(Log.INFO, "%%%%%%%%%%%%  logonAttributes.getStationCode ",
                    logonAttributes.getStationCode());
            log.log(Log.INFO, "%%%%%%%%%%%%  POL ", uldMovementVO.getPointOfLading());
            log.log(Log.INFO, "%%%%%%%%%%%%  POU", uldMovementVO.getPointOfUnLading());
            if (uldMovementVO.getPointOfLading() != null
                    && uldMovementVO.getPointOfLading().trim()
                            .length() > 0) {
                transactionDetailsVO
                        .setTransactionStationCode(uldMovementVO
                                .getPointOfLading());
            } else {
                transactionDetailsVO
                        .setTransactionStationCode(logonAttributes
                                .getAirportCode());
            }
            if (uldMovementVO.getPointOfUnLading() != null
                    && uldMovementVO.getPointOfUnLading()
                            .trim().length() > 0) {
                transactionDetailsVO
                        .setTxStationCode(uldMovementVO
                                .getPointOfUnLading());
            } else {
                transactionDetailsVO
                        .setTxStationCode(logonAttributes
                                .getAirportCode());
            }
            //Added for ICRD-31853
            AirlineValidationVO airlineValidationVO = null;
            try {
                airlineValidationVO = new SharedAirlineProxy()
                        .findAirline(
                                uldMovementVO.getCompanyCode(),
                                logonAttributes
                                        .getOwnAirlineIdentifier());
            } catch (ProxyException e) {
                throw new SystemException(e.getErrors().iterator().next()
                        .getErrorCode());
            }
            String airlineCode = airlineValidationVO
            .getAlphaCode();
            String ctrlRcptNo = findCRNForULDTransaction(
                    logonAttributes
                            .getCompanyCode(),
                    airlineCode);
            String crn = new StringBuilder()
                    .append(
                            ctrlRcptNo
                                    .substring(
                                            0,
                                            4))
                    .append("0")
                    .append(
                            ctrlRcptNo
                                    .substring(
                                            4,
                                            11))
                    .toString();
            transactionDetailsVO
                    .setControlReceiptNumber(crn);
            transactionDetailsVO.setControlReceiptNumberPrefix(transactionDetailsVO.getControlReceiptNumber().substring(
                    0, 3));
            //Added for ICRD-31853 ends
            transactionDetailsVO
                    .setTransactionType(BORROW_TRANSACTION);
            transactionDetailsVO.setTransactionStatus("T");
            transactionDetailsVO
                    .setTransactionRemark(uldMovementVO
                            .getRemark());
            transactionDetailsVO.setTransactionNature("T");
            transactionDetailsVO.setUldType(uldMovementVO
                    .getUldNumber().substring(0, 3));
            log.log(Log.INFO, "Station code", transactionDetailsVO.getTxStationCode());
            transactionDetailsVO
                    .setTransactionDate(new LocalDate(
                            transactionDetailsVO
                                    .getTxStationCode(),
                            Location.ARP, true));
            createBorrowTransactions(transactionDetailsVO);
            log.log(Log.INFO,
                    "@@@@@@@@@@@ BORROW TRANSACTION IS DONE");
        }*/
		log.exiting("ULDCONTROLLER", "createULDForOALMovement");
	}
	/*
	 * Modified by A-3415 for ICRD-114538
	 */
    private void createTransactionsForOALULD(
            ULDMovementVO uldMovementVO, ULD uld)
        throws SystemException, MessageConfigException, CurrencyConversionException,
            DimensionConversionException{

		log.entering("ULDCONTROLLER", "createTransactionsForOALULD");
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();
        String operatingAirlineCode = logonAttributes.getOwnAirlineCode();
                            log.log(Log.INFO,"%%%%%%%%%   LOAN TRANSACTION TO BE DONE");
        //Added as part of CR ICRD-192322
        FlightDetailsVO flightDetailsVO = new FlightDetailsVO();
        flightDetailsVO.setFlightNumber(uldMovementVO.getFlightNumber());
        flightDetailsVO.setFlightCarrierIdentifier(uldMovementVO.getFlightCarrierIdentifier());
        flightDetailsVO.setCompanyCode(uldMovementVO.getCompanyCode());
        boolean isWetLeased = false;
        if(!flightDetailsVO.ACCEPTANCE.equals(flightDetailsVO.getAction())){
            isWetLeased = isWetLeasedFlt(flightDetailsVO);
        }

        //Added as part of CR ICRD-192322 ends
        String fromParty = null;
        int fromPartyId = 0;
        String toParty = null;
        int toPartyID= 0;
        String uldNumber = uld.getUldPK().getUldNumber();
        int len = uldNumber.length();
        String twoalphacode = uldNumber.substring(len - 2);
        String threealphacode = uldNumber.substring(len - 3);
        String arldtl = findOwnerCode(logonAttributes.getCompanyCode(), twoalphacode, threealphacode);
        String airlineDetailArr[] = arldtl.split("~");
        fromPartyId = Integer.valueOf(airlineDetailArr[1]);
        log.log(Log.INFO, "%%%%%%%% fromPartyId ", fromPartyId);
        if ("2".equals(airlineDetailArr[0])) {
            fromParty = twoalphacode;
                } else {
            fromParty = threealphacode;
        }
                // Do loan transaction
                TransactionVO transactionVO = new TransactionVO();
                                transactionVO.setOperationalFlag(TransactionVO.OPERATION_FLAG_INSERT);
                ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
                                transactionDetailsVO.setCompanyCode(uldMovementVO
                                .getCompanyCode());
                // Party which is Loaning the ULD
                transactionDetailsVO.setFromPartyCode(fromParty);
                transactionDetailsVO.setFromPartyIdentifier(fromPartyId);
                transactionDetailsVO.setDamageStatus(uld
                        .getDamageStatus());
                // transactionDetailsVO.setLastUpdateTime()
                transactionDetailsVO
                        .setLastUpdateUser(logonAttributes
                                .getUserId());
                transactionDetailsVO
                        .setOperationalFlag(ULDTransactionDetailsVO.OPERATION_FLAG_INSERT);
                // Party for whom the uld is loaning
                if(uldMovementVO.getCarrierCode()!=null
                        && uldMovementVO.getFlightCarrierIdentifier() != 0){
                    // Added as part of CR ICRD-192322
                    if(isWetLeased){
                        transactionDetailsVO.setToPartyCode(logonAttributes.getCompanyCode());
                        transactionDetailsVO.setToPartyIdentifier(logonAttributes.getOwnAirlineIdentifier());
                    }else{
					transactionDetailsVO.setToPartyCode(uldMovementVO.getCarrierCode());
					transactionDetailsVO.setToPartyIdentifier(uldMovementVO.getFlightCarrierIdentifier());
                    }
                    // Added as part of CR ICRD-192322 ends
                }else{
					transactionDetailsVO.setToPartyCode(fromParty);
					transactionDetailsVO.setToPartyIdentifier(fromPartyId);
				}
				transactionDetailsVO.setUldNumber(uld.getUldPK().getUldNumber());
				transactionDetailsVO.setUldType(uld.getUldPK().getUldNumber().substring(0, 3));

				//Updating from Party for ICRD-349648
				transactionDetailsVO = populateFromParty(transactionDetailsVO);

								// if(EXPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
                //Modified by A-7794 as part of ICRD-193439
				transactionDetailsVO.setTxStationCode(uldMovementVO.getPointOfUnLading());
				transactionDetailsVO.setTransactionStationCode(uldMovementVO.getPointOfLading());
                                log.log(Log.INFO,"%%%%%%%%%%%%%  transactionDetailsVO.getTransactionStationCode"
                                                        , transactionDetailsVO.getTransactionStationCode());
				
                    transactionDetailsVO
                            .setTransactionType(LOANED_TRANSACTION);
                    transactionDetailsVO.setSource("Operations");
                                transactionDetailsVO.setTransactionStatus(TO_BE_RETURNED);
                transactionDetailsVO
                        .setTransactionRemark(uldMovementVO
                                .getRemark());
                transactionDetailsVO
                        .setOperationalAirlineIdentifier(uldMovementVO
                                .getFlightCarrierIdentifier());
                transactionDetailsVO.setTransactionNature("T");
                    transactionDetailsVO.setTransactionDate(new LocalDate(
                                                transactionDetailsVO.getTransactionStationCode(),
                                                Location.STN, true));
                                transactionDetailsVO.setPartyType(PARTYTYPE_AIRLINE);
                                transactionVO.setUldTransactionDetailsVOs(new ArrayList<ULDTransactionDetailsVO>());
                transactionVO.getUldTransactionDetailsVOs()
                        .add(transactionDetailsVO);
                transactionVO.setCompanyCode(logonAttributes.getCompanyCode());
                createULDLoan(transactionVO);
				log.log(Log.INFO,"@@@@@@@@@  LOAN TRANSACTION IS PERFORMED");
		log.exiting("ULDCONTROLLER", "createTransactionsForOALULD");
	}
	/**
	 * @author A-3415 This method is added for ICRD-114051
	 * @param flightDetailsVO
	 * @throws SystemException
	 * @throws ULDDoesNotExistsException
	 */
	public void validateULDForRecordMovement(Collection<ULDMovementVO> uldMovementVos)
			throws SystemException, ULDDoesNotExistsException {
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		log.entering("ULDController", "validateULDsForOperation");
		Map parameterMap = null;
		Collection<String> uldnos = new ArrayList<String>();
		Collection<ULD> uldObjects = new ArrayList<ULD>();
		Collection<String> uldObjectsID = new ArrayList<String>();
		Collection<String> systemparameterCodes = new ArrayList<String>();
		Collection<ErrorVO> errorCollection = new ArrayList<ErrorVO>();
		Collection<ErrorVO> warningCollection = new ArrayList<ErrorVO>();
		StringBuilder otheruldsNotInStck = new StringBuilder();
		StringBuilder uldsNotInStck = new StringBuilder();
		systemparameterCodes.add(ULD_NOT_IN_STOCK_FOR_OAL);
		systemparameterCodes.add(ULD_STK_UPDATE_FOR_OAL);
		parameterMap = new HashMap();
		try {
            parameterMap = new SharedDefaultsProxy()
                    .findSystemParameterByCodes(systemparameterCodes);
            if (uldMovementVos != null
                    && uldMovementVos.size() > 0) {
				for (ULDMovementVO uldMovementVO : uldMovementVos) {
                    if (uldMovementVO.getUldNumber() != null
                            && uldMovementVO.getUldNumber().trim().length() > 0) {
						uldnos.add(uldMovementVO.getUldNumber());
					}
				}
                if (logonAttributes.getCompanyCode() != null
                        && logonAttributes.getCompanyCode().trim().length() > 0) {
                    uldObjects = ULD.findULDObjects(logonAttributes
                            .getCompanyCode(), uldnos);
                    if(uldObjects!=null && uldObjects.size()>0){
                        for(ULD uld : uldObjects){
							uldObjectsID.add(uld.getUldPK().getUldNumber());
						}
					}
					
				}
				log.log(Log.FINE, "uldObjects-------->>", uldObjects);
				if (uldObjectsID == null || uldObjectsID.size() != uldnos.size()) {
					// uld not in stock					
					for (String uldNumber : uldnos) {						
                        if (uldObjectsID==null || !uldObjectsID.contains(uldNumber)) {
							int length = uldNumber.length();
							String twoalphacode = uldNumber.substring(length - 2);
							String threealphacode = uldNumber.substring(length - 3);
							String ownerCode = null;
							String arldtl = findOwnerCode(logonAttributes.getCompanyCode(), twoalphacode,
									threealphacode);
                            //Null Check added as part of ICRD-21184
                            if(arldtl != null) {
							String arldtlArray[] = arldtl.split("~");
							if ("2".equals(arldtlArray[0])) {
								ownerCode = twoalphacode;
							} else {
								ownerCode = threealphacode;
							}
							}
                            if (ownerCode.equals(logonAttributes
                                    .getOwnAirlineCode())) {
                                log.log(Log.INFO, "uld not in stock",
                                        uldsNotInStck);
                                uldsNotInStck.append(
                                        uldNumber).append(
                                        ",");
                            } else {
                                log.log(Log.INFO, "uld not in stock--For OAL",
                                        uldsNotInStck);
                                otheruldsNotInStck.append(
                                        uldNumber).append(
                                        ",");
                            }
                        }
                    }
                }
            }
            // Adding to ErrorVO - uld not in stock
            if (uldsNotInStck.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_IN_THE_SYSTEM_ERROR,
                        new String[] { (uldsNotInStck.substring(0,
                                uldsNotInStck.length() - 1)).toString() });
                    log.log(log.FINE, "Adding to Error  - uld not in stock");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
            }
            // Case:- For other airline ulds/flights
            if (otheruldsNotInStck.length() > 0) {
                ErrorVO errorVO = new ErrorVO(
                        ULDDoesNotExistsException.ULD_IS_NOT_IN_THE_SYSTEM_ERROR,
                        new String[] { (otheruldsNotInStck.substring(0,
                                otheruldsNotInStck.length() - 1)).toString() });
				/**
				 * Modified by A-7131 for ICRD-200809. Removed the dependency of 
                 * System parameter - uld.defaults.errortype.notinstockforOAL. According to
                 * CR - 114051, if the parameter uld.defaults.autouldstockupdateforOAL is Y,
                 * then warning should throw, otherwise error should throw.
                 */

                 //Added by A-4072
                /*
                 * System parameter uld.defaults.cancreateuld values has been changed as part of CR
                 */
                if (parameterMap.get(ULD_STK_UPDATE_FOR_OAL)==null ||
                                FLAG_NO.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))) {
                    log.log(log.FINE,
                            "Adding to Error  - uld not in stock--For OAL");
                    errorVO.setErrorDisplayType(ErrorDisplayType.ERROR);
                    errorCollection.add(errorVO);
                } else {
                    log.log(log.FINE,
                            "Adding to Warning  - uld not in stock--For OAL");
                    errorVO = new ErrorVO(
                            ULDDoesNotExistsException.ULD_IS_NOT_IN_THE_SYSTEM_WARNING,
                            new String[] { (otheruldsNotInStck.substring(0,
                                    otheruldsNotInStck.length() - 1))
                                    .toString() });
                    errorVO.setErrorDisplayType(ErrorDisplayType.WARNING);
                    warningCollection.add(errorVO);
                }
            }
        } catch (ProxyException proxyException) {
            log.log(Log.INFO, "Proxy Exception when ERROR TYPE is picked up",
                    proxyException.getErrors());
            throw new SystemException(proxyException.getMessage());
        }
        log.log(Log.INFO, "-------------ERROR COLLECTION--------------",
                errorCollection.size());
        log.log(Log.INFO, "-----------WARNING COLLECTION--------------",
                warningCollection.size());
        // If Both Warning and Errors are there,then show error messages only
        // Throwing Warnings If nd only if no error messages are there.
        // Throwing error messages If nd only if no warning messages are there..
        if (errorCollection != null && errorCollection.size() > 0) {
            log.log(Log.INFO, "---BOTH WARNING AND ERROR ARE PRESENT-----");
            ULDDoesNotExistsException uldDoesNotExist = new ULDDoesNotExistsException();
            uldDoesNotExist.addErrors(errorCollection);
            throw uldDoesNotExist;
        } else if (warningCollection != null && warningCollection.size() > 0) {
            log.log(Log.INFO, "---WARNING PRESENT-----");
            ULDDoesNotExistsException uldDoesNotExist = new ULDDoesNotExistsException();
            uldDoesNotExist.addErrors(warningCollection);
            throw uldDoesNotExist;
        }
        log.exiting("ULDController", "validateULDsForOperation");
    }
    /**
     * Added for ICRD-114538. Since we will only have loan transaction going forward
     * We shall set Muc status based on below logic.
	 * @author A-3415
	 * @param uldTransactionDetailsVO
	 * @throws SystemException
	 */
    private void setMucStatus(ULDTransactionDetailsVO uldTransactionDetailsVO) throws SystemException{
    	LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
    	String ownAirlineCode = logonAttributes.getOwnAirlineCode();
        //Added by A-4142 for ICQFBS-1402
							AirlineValidationVO airlineValidationVO = null;
        if(PARTYTYPE_AIRLINE.equals(uldTransactionDetailsVO.getPartyType())){
							try {
            airlineValidationVO = Proxy.getInstance().get(SharedAirlineProxy.class).
            validateAlphaCode(logonAttributes.getCompanyCode(),uldTransactionDetailsVO.getToPartyCode());
        }catch(ProxyException ex){
            log.log(Log.INFO, "Proxy Exception when Airline Code is validated",
                                                ex.getErrors());
        }


        }
         if ((ownAirlineCode.equalsIgnoreCase(uldTransactionDetailsVO.getToPartyCode()))
                    || (ownAirlineCode.equalsIgnoreCase(uldTransactionDetailsVO.getFromPartyCode()))) {
             if(ownAirlineCode.equalsIgnoreCase(uldTransactionDetailsVO.getFromPartyCode())
	    			 && PARTYTYPE_AIRLINE.equals(uldTransactionDetailsVO.getPartyType()) 			
	    		 	 && (!"ZZZ".equals(uldTransactionDetailsVO.getUldConditionCode()))
	    	  		 && !"Y".equals(uldTransactionDetailsVO.getPoolOwnerFlag())
                     //&& airlineValidationVO.isIataCarrier()
	    	  		 ) {         
                        if(("L".equals(uldTransactionDetailsVO.getTransactionType())
    	  						&&  "T".equals(uldTransactionDetailsVO.getTransactionStatus()))
                            || "R".equals(uldTransactionDetailsVO.getTransactionStatus())){
    	  					uldTransactionDetailsVO.setMucIataStatus("Q");
						} else {
    	  					uldTransactionDetailsVO.setMucIataStatus("N");	
    	  				}
								} else {
					uldTransactionDetailsVO.setMucIataStatus("N");	
			}
	    	 
          }else{
	    	  uldTransactionDetailsVO.setMucIataStatus("N");
	      }
         if(uldTransactionDetailsVO.getMucIataStatus()== null
                 || uldTransactionDetailsVO.getMucIataStatus().trim().length() == 0){
    		 uldTransactionDetailsVO.setMucIataStatus("N");
    	 }
    } 
    /**
     * This method is used to create the new ULDVO
     * Added by A-3415 for ICRD-114538
	 * @param transactionDetailsVo
	 * @param typeVo
	 * @param uldType
	 * @param referenceNumber
	 * @return
	 * @throws SystemException
	 */
    private ULDVO createULDVo(ULDTransactionDetailsVO transactionDetailsVo,
            ULDTypeVO typeVo, String uldType)
			throws SystemException {
		log.log(Log.INFO, "CREATE NEW ULDVO");
		ULDAirportLocationVO uldAirportLocationVO = null;
		ULDVO uldVo = new ULDVO();
		uldVo.setCompanyCode(transactionDetailsVo.getCompanyCode());
		uldVo.setUldNumber(transactionDetailsVo.getUldNumber());
		uldVo.setUldType(uldType);
		uldVo.setUldGroupCode(typeVo.getUldGroupCode());
        String uldNumber = transactionDetailsVo.getUldNumber();
        String fromPartyCode = transactionDetailsVo.getFromPartyCode();
        if(uldNumber !=null && uldNumber.trim().length()>0){
            if(fromPartyCode !=null && fromPartyCode.trim().length()>0){
                if(uldNumber.endsWith(fromPartyCode)){
                    if(transactionDetailsVo.getCurrOwnerCode()!=0){
                        uldVo.setOwnerAirlineIdentifier(
                                transactionDetailsVo.getCurrOwnerCode());
                        if(transactionDetailsVo.getOperationalAirlineIdentifier()!=0){
                            uldVo.setOperationalAirlineIdentifier(
                                    transactionDetailsVo.getOperationalAirlineIdentifier());
                    }else{
                            uldVo.setOperationalAirlineIdentifier(
                                    transactionDetailsVo.getCurrOwnerCode());
                        }
                    }else{
                        int len = uldNumber.length();
                        String twoalphacode = uldNumber.substring(len - 2);
                        String threealphacode = uldNumber.substring(len - 3);
                        String arldtl = findOwnerCode(transactionDetailsVo.getCompanyCode(), twoalphacode, threealphacode);
                        String airlineDetailArr[] = arldtl.split("~");
                        int ownerAirlineId = Integer.valueOf(airlineDetailArr[1]);
                        log.log(Log.INFO, "%%%%%%%% ownerAirlineId ", ownerAirlineId);
                        uldVo.setOwnerAirlineIdentifier(ownerAirlineId);
                        if(transactionDetailsVo.getOperationalAirlineIdentifier()!=0){
                            uldVo.setOperationalAirlineIdentifier(
                                    transactionDetailsVo.getOperationalAirlineIdentifier());
                        }else{
                            uldVo.setOperationalAirlineIdentifier(ownerAirlineId);
                        }
                    }
                }
                else{
                    int len = uldNumber.length();
                    String twoalphacode = uldNumber.substring(len - 2);
                    String threealphacode = uldNumber.substring(len - 3);
                    log.log(Log.INFO, "%%%%%%%% twoalphacode " , twoalphacode);
                    log.log(Log.INFO, "%%%%%%%% threealphacode ", threealphacode);
                    String arldtl = findOwnerCode(transactionDetailsVo.getCompanyCode(), twoalphacode, threealphacode);
                    String airlineDetailArr[] = arldtl.split("~");
                    int ownerAirlineId = Integer.valueOf(airlineDetailArr[1]);
                    log.log(Log.INFO, "%%%%%%%% ownerAirlineId ", ownerAirlineId);
                    uldVo.setOwnerAirlineIdentifier(ownerAirlineId);
                    if(transactionDetailsVo.getOperationalAirlineIdentifier()!=0){
                        uldVo.setOperationalAirlineIdentifier(
                                transactionDetailsVo.getOperationalAirlineIdentifier());
                    }else{
                        uldVo.setOperationalAirlineIdentifier(ownerAirlineId);
                    }
                }
        }else{
            int len = uldNumber.length();
            String twoalphacode = uldNumber.substring(len - 2);
            String threealphacode = uldNumber.substring(len - 3);
            log.log(Log.INFO, "%%%%%%%% twoalphacode " , twoalphacode);
            log.log(Log.INFO, "%%%%%%%% threealphacode ", threealphacode);
            String arldtl = findOwnerCode(transactionDetailsVo.getCompanyCode(), twoalphacode, threealphacode);
            String airlineDetailArr[] = arldtl.split("~");
            int ownerAirlineId = Integer.valueOf(airlineDetailArr[1]);
            log.log(Log.INFO, "%%%%%%%% ownerAirlineId ", ownerAirlineId);
            uldVo.setOwnerAirlineIdentifier(ownerAirlineId);
            if(transactionDetailsVo.getOperationalAirlineIdentifier()!=0){
                uldVo.setOperationalAirlineIdentifier(
                        transactionDetailsVo.getOperationalAirlineIdentifier());
            }else{
                uldVo.setOperationalAirlineIdentifier(ownerAirlineId);
            }
        }
        }
        uldVo.setLastUpdateTime(transactionDetailsVo.getLastUpdateTime());
        uldVo.setLastUpdateUser(transactionDetailsVo.getLastUpdateUser());
		/*uldVo.setDisplayBaseHeight(typeVo.getBaseDimHeight());
        uldVo.setDisplayBaseLength(typeVo.getBaseDimLength());
        uldVo.setDisplayBaseWidth(typeVo.getBaseDimWidth());
		uldVo.setDisplayDimensionUnit(typeVo.getBaseDimUnit());*/
		uldVo.setStructuralWeight(typeVo.getStructuralWtLmt());
		//uldVo.setDisplayStructuralWeightUnit(typeVo.getStructuralWtLmtUnit());
        uldVo.setDisplayIataReplacementCost(typeVo.getIATARepCost());
        uldVo.setDisplayIataReplacementCostUnit(typeVo.getIATARepCostUnit());
        uldVo.setCurrentStation(transactionDetailsVo.getTransactionStationCode());
        uldVo.setOwnerStation(transactionDetailsVo.getTransactionStationCode());
        uldVo.setDamageStatus(ULDVO.DAMAGED_STATUS);
        uldVo.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
        uldVo.setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
		uldVo.setTareWeight(typeVo.getTareWt());
		//uldVo.setDisplayTareWeightUnit(typeVo.getTareWtUnit());
        uldVo.setBaseHeight(typeVo.getBaseDimHeight());
        uldVo.setBaseLength(typeVo.getBaseDimLength());
        uldVo.setBaseWidth(typeVo.getBaseDimWidth());
        uldVo.setOperationalFlag(ULDVO.OPERATION_FLAG_INSERT);
        uldVo.setTransitStatus("N");
        // Added As CR
        //added by nisha for bugfix on 27Jun08 starts
        if(transactionDetailsVo.getUldNature() != null
                && transactionDetailsVo.getUldNature().trim().length() > 0){
            uldVo.setUldNature(transactionDetailsVo.getUldNature());
        }else{
            uldVo.setUldNature("GEN");
        }
        //ends
        uldVo.setControlReceiptNumber(transactionDetailsVo
                .getControlReceiptNumber());
        // Added By Ashraf
        if (transactionDetailsVo.getControlReceiptNumber() != null
                && transactionDetailsVo.getControlReceiptNumber().trim()
                        .length() > 0) {
            uldVo.setControlReceiptNumber(transactionDetailsVo
                    .getControlReceiptNumber());
        }else {
			log.log(Log.FINE, "CRN NOT SET !!!!!!!!!!!!!");
		}
        log.log(Log.FINE, "CURRENT STATION TO BE SET IN THE ULDMST"
                , transactionDetailsVo.getTransactionStationCode());
		uldVo.setLastUpdateTime(transactionDetailsVo.getLastUpdateTime());
		uldVo.setLastUpdateUser(transactionDetailsVo.getLastUpdateUser());
		Collection<ULDAirportLocationVO> airportLocs = null;
		if ("G".equals(transactionDetailsVo.getPartyType())) {
            airportLocs = listULDAirportLocation(transactionDetailsVo
                    .getCompanyCode(), transactionDetailsVo
                    .getTransactionStationCode(),
                    ULDAirportLocationVO.FACLITY_AGENTLOC);
			for (ULDAirportLocationVO airportLoc : airportLocs) {
				if ("Y".equals(airportLoc.getDefaultFlag())) {
					uldVo.setLocation(airportLoc.getFacilityCode());
					uldVo.setFacilityType(airportLoc.getFacilityType());
				}
			}
		} else {
            uldAirportLocationVO = ULD.findCurrentLocation(transactionDetailsVo
                    .getCompanyCode(), transactionDetailsVo
                    .getTransactionStationCode(),CONTENT_EMPTY);
            if(transactionDetailsVo.getFacilityType()!=null &&
                    transactionDetailsVo.getFacilityType().trim().length()>0 &&
                    transactionDetailsVo.getLocation()!=null &&
                    transactionDetailsVo.getLocation().trim().length()>0  ){
                uldVo.setFacilityType(transactionDetailsVo.getFacilityType());
                uldVo.setLocation(transactionDetailsVo.getLocation());
            }
            else if (uldAirportLocationVO != null) {
                uldVo.setLocation(uldAirportLocationVO.getFacilityCode());
                uldVo.setFacilityType(uldAirportLocationVO.getFacilityType());
            }else{
                uldVo.setLocation(ULDVO.NO_LOCATION);
                uldVo.setFacilityType(ULDVO.NO_LOCATION);
            }
        }
        log.exiting("ULD_CONTROLLER", "CREATEULDVO");
        return uldVo;
    }
    /**
     *
     * @param uldTransaction
     * @param uldTransactionDetailVO
     * @throws SystemException
     */
    private void returnULDLoanTransaction(ULDTransactionDetailsVO uldTransactionDetailVO,
            ULDTransaction uldTransaction, TransactionVO transactionVO
            ) throws SystemException{
    	log.entering("returnULDLoanTransaction", "TRANSCTION WILL BE RETURNED");
    	LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
    	ULDAirportLocationVO uLDAirportLocationVO = null;
		ULD uld = null;
		int loanClosed = 0;
		boolean isThirdParty = false;
		ULDTransactionDetailsVO returnTransactionDetailVO = new ULDTransactionDetailsVO();		
		BeanHelper.copyProperties(returnTransactionDetailVO, uldTransactionDetailVO);
        if (returnTransactionDetailVO.getReturnDate()==null){
            LocalDate returnDate =new LocalDate(logonAttributes.getStationCode(),Location.STN,true);
			returnTransactionDetailVO.setReturnDate(returnDate);
		}
        if(isOutOfSyncReturn(returnTransactionDetailVO,uldTransaction)){
        ULDAuditVO uldAuditVO = new ULDAuditVO(TransactionVO.MODULE,
                TransactionVO.SUBMODULE, TransactionVO.ENTITY);
		returnTransactionDetailVO.setTransactionStatus(ULDTransactionDetailsVO.TO_BE_INVOICED);
        log.log(Log.INFO, "TransactionStatus->",returnTransactionDetailVO.getTransactionStatus());
		/*
		 * to implement return
		 */
        LocalDate currentDate = new LocalDate(logonAttributes.getStationCode(),Location.STN,true);
        if(returnTransactionDetailVO.getLastUpdateTime() == null){
			returnTransactionDetailVO.setLastUpdateTime(currentDate);
		}
        //returnTransactionDetailVO.setReturnStationCode(uldTransactionDetailVO.getTransactionStationCode());
        if(returnTransactionDetailVO.getTotal() == 0){
            findDemurrageDetails(returnTransactionDetailVO,uldTransaction.getControlReceiptNumber(),LOANED_TRANSACTION,uldTransaction.getPartyCode());
        }
        //Return Receipt will be coming from Screen
		returnTransactionDetailVO.setControlReceiptNumber(uldTransaction.getControlReceiptNumber());
        if(transactionVO!=null && transactionVO.getTransactionRemark()!=null){
			returnTransactionDetailVO.setReturnRemark(transactionVO.getTransactionRemark());
		}
        if(ULDTransactionDetailsVO.FLAG_YES.equals(uldTransactionDetailVO.getThirdPartyFlag()) &&
                (uldTransaction.getPartyCode().equals(uldTransactionDetailVO.getFromPartyCode()))){
			isThirdParty = true;
        }else if(!uldTransaction.getPartyCode().equals(uldTransactionDetailVO.getFromPartyCode())){
			isThirdParty = true;
        }else{
			isThirdParty = false;
		}
		StringBuilder remarks = new StringBuilder();		
        if(isThirdParty){
			remarks.append("Auto Returned on third party Loan Creation");
        }else if(ULDTransactionDetailsVO.FLAG_YES.equals(returnTransactionDetailVO.getSysRtnFlag())
                && (returnTransactionDetailVO.getReturnRemark()==null
                || returnTransactionDetailVO.getReturnRemark().trim().length() == 0)){
			remarks.append("Return Loan");
		}
        if(returnTransactionDetailVO.getSource()!=null){
			remarks.append(",Source:").append(returnTransactionDetailVO.getSource());
		}
        if(returnTransactionDetailVO.getReturnRemark()!=null){
			remarks.append(",").append(returnTransactionDetailVO.getReturnRemark());
		}
		returnTransactionDetailVO.setReturnRemark(trimRemarks(remarks.toString()));
        setReturnMucStatus(returnTransactionDetailVO,uldTransaction,isThirdParty);
        if(!isThirdParty){
        returnTransactionDetailVO.
            setReturnCRN(setReturnCRNumber(returnTransactionDetailVO,uldTransaction));
        }
        updateReturnTransaction(returnTransactionDetailVO,uldTransaction);
        uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(
                uldAuditVO, uldTransaction, false);
		collectReturnTransactionDetails(uldTransaction, uldAuditVO,	returnTransactionDetailVO);
		uldAuditVO.setActionCode(RETURN_ULDLOANTRANSACTION);
		uldAuditVO.setAuditRemarks(returnTransactionDetailVO.getReturnRemark());
		AuditUtils.performAudit(uldAuditVO);
        if (PARTYTYPE_AIRLINE.equals(uldTransactionDetailVO.getPartyType())){
			uld = checkULDExistsForReturn(uldTransactionDetailVO);
            log.entering("saveReturnTransaction","TRANSCTION IS LOANED CALLING THE UPDATE");
            log.log(Log.FINE,"THE OWNERAIRLINEIDENTIFIER FROM THE ULDMST ", uld.getOwnerAirlineIdentifier());
			uld.setLoanReferenceNumber(loanClosed);
			uld.setOperationalAirlineIdentifier(uld.getOwnerAirlineIdentifier());
			uld.setControlReceiptNumber(returnTransactionDetailVO.getReturnCRN());
            if(new LocalDate(uld.getCurrentStation(),Location.ARP,uld.getLastMovementDate(),true).toGMTDate()
                .before(returnTransactionDetailVO.getReturnDate().toGMTDate())){
				uld.setCurrentStation(returnTransactionDetailVO.getReturnStationCode());
				uld.setLastMovementDate(returnTransactionDetailVO.getReturnDate());
			}
			uld.setScmDate(null);
			uld.setScmFlag(null);
			uld.setAgentCode(null);
			uld.setAgentStation(null);
		} else {
			uld = checkULDExistsForReturn(uldTransactionDetailVO);
            uLDAirportLocationVO = ULD.findCurrentLocation(
                    uldTransactionDetailVO.getCompanyCode(),
                    returnTransactionDetailVO.getReturnStationCode(),
                    CONTENT_EMPTY);
            if(uLDAirportLocationVO != null){
                    uld.setFacilityType(uLDAirportLocationVO.getFacilityType());
                    uld.setLocation(uLDAirportLocationVO.getFacilityCode());
            }else{
                uld.setLocation(ULDVO.NO_LOCATION);
                uld.setFacilityType(ULDVO.NO_LOCATION);
            }
            uld.setLoanReferenceNumber(loanClosed);
            uld.setOperationalAirlineIdentifier(uld.getOwnerAirlineIdentifier());
                 if(new LocalDate(uld.getCurrentStation(),Location.ARP,uld.getLastMovementDate(),true).toGMTDate()
                    .before(returnTransactionDetailVO.getReturnDate().toGMTDate())){
                 uld.setCurrentStation(returnTransactionDetailVO.getReturnStationCode());
                 }
            uld.setScmDate(null);
            uld.setScmFlag(null);
            uld.setAgentCode(null);
            uld.setAgentStation(null);
            uld.setReleasedTo(null);
            ULDIntMvtHistoryFilterVO uldIntMvtFilterVO = new ULDIntMvtHistoryFilterVO();
            uldIntMvtFilterVO.setCompanyCode(logonAttributes
                    .getCompanyCode());
            uldIntMvtFilterVO.setUldNumber(uldTransactionDetailVO
                    .getUldNumber());
            uldIntMvtFilterVO.setReasonForMvt(ULDAirportLocationVO.FACLITY_AGENTLOC);
            Page<ULDIntMvtDetailVO> uldIntMvtVOs = findIntULDMovementHistory(
                    uldIntMvtFilterVO, 1);
            log.log(Log.INFO, " uldIntMvtVOs FOUND ARE --->>> " , uldIntMvtVOs);
            if (uldIntMvtVOs != null
                    && uldIntMvtVOs.size() > 0) {
                ULDIntMvtDetailVO latestMvtVo = uldIntMvtVOs.get(uldIntMvtVOs.size()-1);
                if(latestMvtVo !=null ){
                    ULDIntMvtDetail latestMvt = null;
                    latestMvt = ULDIntMvtDetail.find(latestMvtVo.getCompanyCode(), latestMvtVo.getUldNumber(), latestMvtVo.getIntSequenceNumber(), latestMvtVo.getIntSerialNumber());
                    log.log(Log.INFO, " MOVEMENT DEATIL FOUND IS --- " , latestMvt);
                    if(latestMvt !=null){
                        latestMvt.setReturnStatus(ULDIntMvtDetailVO.FLAG_YES);
                    }
                }
            }
        }
    }/*else{
        if(uldTransactionDetailVO.getTransactionDate()==null){
            uldTransactionDetailVO.setTransactionDate(uldTransactionDetailVO.getReturnDate());
        }
        uldTransactionDetailVO.setTransactionType(RETURN_TRANSACTION);
        uld = checkULDExistsForReturn(uldTransactionDetailVO);
        //saveNewULDTransactionHistory(uldTransactionDetailVO,uld);
    }*/
    }
    //Added by A-3415 for ICRD-114538
    private boolean isOutOfSyncReturn(ULDTransactionDetailsVO uldTransactionDetailVO,
            ULDTransaction uldTransaction){
		boolean isOutOfSync = true;
        if(!SCREEN.equalsIgnoreCase(uldTransactionDetailVO.getSource())){
        LocalDate rtnDate = new LocalDate(uldTransaction.getTransactionStationCode(), Location.STN,uldTransaction.getTransactionDate(),true);
        log.log(Log.INFO,"rtnDate-------->",rtnDate);
		GMTDate utcDate = rtnDate.toGMTDate();
        if(utcDate.after(uldTransactionDetailVO.getReturnDate().toGMTDate())){
			isOutOfSync = false;
		}
		}
		return isOutOfSync;
	}
    /**
     * Added by A-3415 for ICRD-114538
     * To trim the remarks which is more the 100
     * @param remarks
     * @return
     */
    public String trimRemarks(String remarks){
        if(remarks!=null && remarks.length() > 99){
    		remarks = remarks.substring(0, 99);
    	}
    	return remarks;	
    } 
    /**
     * Added by A-3415 for ICRD-114538
     * @param uldTransactionDetailsVO
     * @throws SystemException
     */
    private void setReturnMucStatus(ULDTransactionDetailsVO uldTransactionDetailsVO,
            ULDTransaction uldTrasaction,boolean isThirdParty) throws SystemException{
    	LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
    	String ownAirlineCode = logonAttributes.getOwnAirlineCode();
        //Added by A-4142 for ICQFBS-1402
        /*AirlineValidationVO airlineValidationVO= null;
        if(PARTYTYPE_AIRLINE.equals(uldTrasaction.getPartyType())){
        try{
            airlineValidationVO = new SharedAirlineProxy().
            validateAlphaCode(logonAttributes.getCompanyCode(),uldTrasaction.getReturnPartyCode());
        }catch(ProxyException ex){
            ex.printStackTraceee();
         }
        }*/
             if(!isThirdParty && ownAirlineCode.equalsIgnoreCase(uldTrasaction.getPartyCode())
	    		    			 && PARTYTYPE_AIRLINE.equals(uldTrasaction.getPartyType()) 			
                                 && (!"ZZZ".equals(uldTrasaction.getUldConditionCode()))
                     && !"Y".equals(uldTrasaction.getPoolOwnerFlag())
                     //&& airlineValidationVO.isIataCarrier()
                     ) {
                        if(("L".equals(uldTransactionDetailsVO.getTransactionType())
                                &&  "T".equals(uldTransactionDetailsVO.getTransactionStatus()))
                            || "R".equals(uldTransactionDetailsVO.getTransactionStatus())){
                    uldTransactionDetailsVO.setMucIataStatus("Q");
                }else{
                    uldTransactionDetailsVO.setMucIataStatus("N");
                }
            }else{
                    uldTransactionDetailsVO.setMucIataStatus("N");
            }
         if(uldTransactionDetailsVO.getMucIataStatus()== null
                 || uldTransactionDetailsVO.getMucIataStatus().trim().length() == 0){
              uldTransactionDetailsVO.setMucIataStatus("N");
          }
    }
    /**
     * Added by A-3415 for ICRD-114538
     * @param uldTransactionDetailsVO
     * @param uldTrasaction
     * @return
     * @throws SystemException
     */
    private String setReturnCRNumber(ULDTransactionDetailsVO uldTransactionDetailsVO,
            ULDTransaction uldTrasaction) throws SystemException{
    	LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
    	String ownAirlineCode = logonAttributes.getOwnAirlineCode();
    			 String crn = null;
    	boolean genCRN = false;
    	String toParty = null;
        //Modified by A-7359 for ICRD-265423
        if(!PARTYTYPE_AIRLINE.equalsIgnoreCase(uldTrasaction.getPartyType())){
    		toParty = uldTrasaction.getReturnPartyCode();
        }else{
    		toParty = uldTrasaction.getPartyCode();
    	}
        if(ownAirlineCode.equalsIgnoreCase(toParty)) {
                        if(("L".equals(uldTransactionDetailsVO.getTransactionType())
    	  						&&  "T".equals(uldTransactionDetailsVO.getTransactionStatus()))
                                || "R".equals(uldTransactionDetailsVO.getTransactionStatus())){
    	  					genCRN = true;
                        }else{
                            genCRN = false;
                        }
          }
         if(genCRN){
             String owrCode = String.valueOf(logonAttributes.getOwnAirlineNumericCode());
                 if(uldTransactionDetailsVO.getReturnCRN()==null ||
                      !(uldTransactionDetailsVO.getReturnCRN().startsWith(owrCode)) ){
                        crn = findCRNForULDTransaction(logonAttributes.getCompanyCode(),
                                ownAirlineCode);
         }else{
                     crn = uldTransactionDetailsVO.getReturnCRN();
                 }
         }else{
             String owrCode = String.valueOf(logonAttributes.getOwnAirlineNumericCode());
             if(uldTransactionDetailsVO.getReturnCRN()==null ||
                  !(uldTransactionDetailsVO.getReturnCRN().startsWith(owrCode)) ){
                crn = uldTransactionDetailsVO.getReturnCRN();
                 }
         }
         return crn;
    }
    /**
     * Added by A-3415 for ICRD-114538
     * Update the Transaction Entity
     * @param uldTransactionDetailVO
     * @param uldTransaction
     */
    private void updateReturnTransaction(ULDTransactionDetailsVO uldTransactionDetailVO,
            ULDTransaction uldTransaction){
		uldTransaction.setDamageStatus(uldTransactionDetailVO.getDamageStatus());
        LocalDate localDate = new LocalDate(LocalDate.NO_STATION,Location.NONE,true);
		uldTransaction.setLastUpdateTime(localDate);
		uldTransaction.setLastUpdateUser(uldTransactionDetailVO.getLastUpdateUser());
		uldTransaction.setReturnRemarks(uldTransactionDetailVO.getReturnRemark());
		uldTransaction.setDestinationAirport(uldTransactionDetailVO.getTxStationCode());		
		uldTransaction.setTransactionStatus(ULDTransactionDetailsVO.TO_BE_INVOICED);
		uldTransaction.setReturnCRN(uldTransactionDetailVO.getReturnCRN());
		uldTransaction.setReturnDate(uldTransactionDetailVO.getReturnDate().toCalendar());
		uldTransaction.setReturnCloseFlag(uldTransactionDetailVO.getSysRtnFlag());
        if("S".equals(uldTransaction.getMucIsSent())){
			uldTransaction.setMucIsSent("S");
        }else if("Q".equals(uldTransaction.getMucIsSent())){
			uldTransaction.setMucIsSent("Q");
        }else if("G".equals(uldTransaction.getMucIsSent())){
			uldTransaction.setMucIsSent("G");
        }else {
	    	 uldTransaction.setMucIsSent(uldTransactionDetailVO.getMucIataStatus());
	    }
		uldTransaction.setDemurrageAmount(uldTransactionDetailVO.getDemurrageAmount());
		uldTransaction.setWaived(uldTransactionDetailVO.getWaived());
		uldTransaction.setDamageStatus(uldTransactionDetailVO.getDamageStatus());
		uldTransaction.setTaxes(uldTransactionDetailVO.getTaxes());
		uldTransaction.setTotal(uldTransactionDetailVO.getTotal());
		uldTransaction.setOtherCharges(uldTransactionDetailVO.getOtherCharges()); 
        uldTransaction.setReturnStationCode(uldTransactionDetailVO .getReturnStationCode());
		uldTransaction.setCurrency(uldTransactionDetailVO.getCurrency());
    }
    /**
     * Added by A-3415 for ICRD-114538
     * This method closes any open transactions pending for an ULD that is tried to LOAN OUT from System.
     * Finds ULDTransaction for ULD with ULDNumber(not looking From and To Party Details) and if found
     * then ULD is returned back to the Owner of the ULD.
     * @param uldTransactionDetailsVO
     * @throws SystemException 
     * @throws PersistenceException 
     * @throws SystemException 
     */
    private void closeIfAnyOpenLoanTxnExists(ULDTransactionDetailsVO uldTransactionDetailsVO) 
        throws PersistenceException, SystemException{
        if(uldTransactionDetailsVO != null) {
			log.entering("closeIfAnyOpenLoanTxnExists", "TRANSACTION WILL BE CLOSED");
			Collection<ULDTransaction> uldTransactionDetails = null;
			TransactionFilterVO filterVO = new TransactionFilterVO();
			filterVO.setCompanyCode(uldTransactionDetailsVO.getCompanyCode());
			filterVO.setUldNumber(uldTransactionDetailsVO.getUldNumber());
			uldTransactionDetails = ULDTransaction.findOpenTxnULDObjects(filterVO);
            if(uldTransactionDetails != null &&
                    uldTransactionDetails.size() > 0) {
                for(ULDTransaction uldTransaction:uldTransactionDetails){
                    if(!ULDTransactionDetailsVO.FLAG_NO.equals(uldTransactionDetailsVO.getSysRtnFlag())){
                        //case for UCM-ULD returned back to Owner
					uldTransactionDetailsVO.setSysRtnFlag(ULDTransactionDetailsVO.FLAG_YES);
					}
                    if(uldTransactionDetailsVO.getReturnStationCode()==null ||
                            uldTransactionDetailsVO.getReturnStationCode().trim().length() == 0){
                        uldTransactionDetailsVO.setReturnStationCode(uldTransactionDetailsVO.getTransactionStationCode());
                    }
                    if (uldTransactionDetailsVO.getReturnDate()==null){
						uldTransactionDetailsVO.setReturnDate(uldTransactionDetailsVO.getTransactionDate());
					}
                    returnULDLoanTransaction(uldTransactionDetailsVO,uldTransaction,null);
				}
			log.log(Log.INFO, "CALLING THE UPDATE METHOD");
			}
			
		}
    }
    /**
     * Added by A-3415 for ICRD-114538
     * This is to swap from_party to_party details to create a Loan Txn
     * when ever a return transaction is triggered without a prior Loan
     * @param transactionVO
     * @param uldTransactionDetailVO
     */
    private void swapFromAndToPartyForReturn (ULDTransactionDetailsVO uldTxnDetailVO){
        if(uldTxnDetailVO!=null){
		String fromPartyDetail = uldTxnDetailVO.getFromPartyCode();
		String fromPartyNameDetail = uldTxnDetailVO.getFromPartyName();
		int fromPartyIdDetail = uldTxnDetailVO.getFromPartyIdentifier();
		String toPartyDetail = uldTxnDetailVO.getToPartyCode();
		String toPartyNameDetail = uldTxnDetailVO.getToPartyName();
		int toPartyIdDetail = uldTxnDetailVO.getToPartyIdentifier();
		uldTxnDetailVO.setFromPartyCode(toPartyDetail);
		uldTxnDetailVO.setFromPartyName(toPartyNameDetail);
		uldTxnDetailVO.setFromPartyIdentifier(toPartyIdDetail);
		uldTxnDetailVO.setToPartyCode(fromPartyDetail);
		uldTxnDetailVO.setToPartyName(fromPartyNameDetail);
		uldTxnDetailVO.setToPartyIdentifier(fromPartyIdDetail); 
			uldTxnDetailVO.setOperationalAirlineIdentifier(fromPartyIdDetail);
		}
	}
	/**
	 * Added by A-3415 for ICRD-114538
	 * @param uld
	 * @param transactionVO
	 * @param transactionDetailsVo
	 * @throws SystemException
	 */
    private ULDTransaction saveNewULDTransaction(ULD uld,
            ULDTransactionDetailsVO transactionDetailsVo) throws SystemException{
        //Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		String uldNumber = null;
		String uldOwner = null;
        //String partyType = null;
		String fromParty = null;
		ULDTransaction transaction = null;
		LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
        //String owrArlCode = logonAttributes.getOwnAirlineCode();
		String companyCode = logonAttributes.getCompanyCode();
        if(transactionDetailsVo != null) {
        fromParty = transactionDetailsVo.getFromPartyCode();
        //String toParty = transactionDetailsVo.getToPartyCode();
        uldNumber = transactionDetailsVo.getUldNumber().trim().toUpperCase();
        }
        //int length =uldNumber.trim().length();
        //Map<String,String> map = new HashMap<String,String>();
        //Collection<String> systemParameterCodes = new ArrayList<String>();
        /*systemParameterCodes.add(PARTNER_AIRLINE_ENABLED);
         * Getting system parameters for Partner Airline
        try {
            map = new SharedDefaultsProxy().findSystemParameterByCodes(systemParameterCodes);
        } catch (ProxyException proxyException) {
            new SystemException(proxyException.getErrors());
        }
        String partnerEnabled  = map.get(PARTNER_AIRLINE_ENABLED);*/
        /*
         * If Owner of the ULD is not the from party
         * transactionDetailsVo is update for From party details
         * because a transaction will be always from Owner of the ULD to
         * the toparty of the transaction
         */
		Map<String,String> map = new HashMap<String,String>();
		Collection<String> systemParameterCodes = new ArrayList<String>();
		systemParameterCodes.add(ULD_TRANSACTION_CREATION_BASED_ON);
		String uldTransactionBasedOn = null;
		try {
			map = Proxy.getInstance().get(SharedDefaultsProxy.class).findSystemParameterByCodes(systemParameterCodes);
		} catch (ProxyException proxyException) {
			new SystemException(proxyException.getErrors());
		}
		uldTransactionBasedOn  = map.get(ULD_TRANSACTION_CREATION_BASED_ON);
		String configurableOwner;
		uldNumber = transactionDetailsVo.getUldNumber().trim().toUpperCase();
		if(ULD_OWNER_CODE.equals(uldTransactionBasedOn)) {
			configurableOwner = uldNumber;
		} else if(ULD_OWNER_AIRLINE_CODE.equals(uldTransactionBasedOn)) {
			ULDValidationVO uldValidationVO = validateULD(companyCode,uldNumber);
			if(uldValidationVO != null) {
				AirlineValidationVO validationVO = null;
				try {
					validationVO = new SharedAirlineProxy().findAirline(companyCode, uldValidationVO.getOwnerAirlineIdentifier());
				} catch (ProxyException e) {
					e.printStackTrace();
				}
				String twoalphacode = validationVO.getAlphaCode();
				String threealphacode = validationVO.getThreeAlphaCode();
				String arldtl = findOwnerCode(logonAttributes.getCompanyCode(), twoalphacode, threealphacode);
				String airlineDetailArr[] = arldtl.split("~");
				if ("2".equals(airlineDetailArr[0])) {
					fromParty = twoalphacode;
				} else {
					fromParty = threealphacode;
				}
				configurableOwner = uldValidationVO.getOwnerAirlineCode();
			} else {
				configurableOwner = uldNumber;
			}
		} else {
			configurableOwner = uldNumber;
		}


            if(!configurableOwner.endsWith(fromParty)){
				String twoAlphaCode = uldNumber.substring(uldNumber.length() - 2);
		        String threeAlphaCode = uldNumber.substring(uldNumber.length() - 3);
                boolean isTwoAlphaCode=false;
                String arlDtl="";
                try{
                arlDtl= new SharedAirlineProxy().validateOwnerCode(companyCode,twoAlphaCode,threeAlphaCode);
                }catch(ProxyException e){
                    throw new SystemException(e.getMessage(),e);
                }
                if(arlDtl!=null && arlDtl.trim().length()>0){
                    if("2".equals(arlDtl)){
                        log.log(Log.INFO,"************two alpha code in use***********");
                        uldOwner=twoAlphaCode;
                        isTwoAlphaCode=true;
                    }else{
                        log.log(Log.INFO,"************Three alpha code in use***********");
                        uldOwner=threeAlphaCode;
                    }
                }
                AirlineValidationVO airlineValidationVO= null;
                try{
					airlineValidationVO = new SharedAirlineProxy().validateAlphaCode(companyCode, uldOwner);
                }catch(ProxyException ex){
                    for(ErrorVO errorVO :ex.getErrors()) {
                        if(!"shared.airline.invalidairline".equals(errorVO.getErrorCode()))
                                {
                                throw new SystemException(ex.getMessage(),ex);
                                }
					}
				}
                if(airlineValidationVO!=null){
					transactionDetailsVo.setFromPartyCode(airlineValidationVO.getAlphaCode());
					transactionDetailsVo.setFromPartyIdentifier(airlineValidationVO.getAirlineIdentifier());
					transactionDetailsVo.setFromPartyName(airlineValidationVO.getAirlineName());
				}
			}
			transactionDetailsVo.setThirdPartyFlag(ULDTransactionDetailsVO.FLAG_NO);
			/*
             * For partner airline can be stoped with a system parameter
             * Partner Airline will be replaced with Owner in Loan
			 */
            /*if(AbstractVO.FLAG_YES.equals(partnerEnabled)){
                String partnerAirline = findPartnerCarriers();
                if(partnerAirline!=null && partnerAirline.trim().length()>0
                        && partnerAirline.contains(toParty)
                        && !(partnerAirline.contains(fromParty) || owrArlCode.equals(fromParty))){
                    AirlineValidationVO airlineValidationVO= null;
                    try{
                        airlineValidationVO = new SharedAirlineProxy().validateAlphaCode(companyCode,owrArlCode );
                    }catch(ProxyException ex){
                        for(ErrorVO errorVO :ex.getErrors()) {
                            if(!errorVO.getErrorCode().equals("shared.airline.invalidairline"))
                                    throw new SystemException(ex.getMessage(),ex);
                        }
                    }
                    transactionDetailsVo.setToPartyCode(airlineValidationVO.getAlphaCode());
                    transactionDetailsVo.setToPartyIdentifier(airlineValidationVO.getAirlineIdentifier());
                    transactionDetailsVo.setOperationalAirlineIdentifier(transactionDetailsVo.getToPartyIdentifier());
                    transactionDetailsVo.setToPartyName(airlineValidationVO.getAirlineName());
                }
            }*/
        /**
         * Checks whether this is a forward looking transaction
         * System creates only forward looking transactions others will
         * be moved to history
         */
        //if(isForwardLookingTransaction(transactionDetailsVo)){
            /*
             *This is to check whether the txn is btw poolowners
             *setting the poolOwner Flag of transactionDetailsVo
             */
        if(transactionDetailsVo!=null && !ULDTransactionDetailsVO.AGENT.
                equalsIgnoreCase(transactionDetailsVo.getPartyType())){
                    boolean isPoolOwner = false;
                    ULDPoolOwnerFilterVO poolFilterVO = new ULDPoolOwnerFilterVO();
            poolFilterVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
            poolFilterVO.setAirlineIdentifierOne(getAirline1(transactionDetailsVo));
            /*poolFilterVO.setAirlineIdentifierOne(transactionDetailsVo.getFromPartyIdentifier());*/
            poolFilterVO.setAirlineIdentifierTwo(transactionDetailsVo.getToPartyIdentifier());
            poolFilterVO.setAirport(transactionDetailsVo.getTransactionStationCode());
            poolFilterVO.setOrigin(transactionDetailsVo.getTransactionStationCode());
            poolFilterVO.setDestination(transactionDetailsVo.getTxStationCode());
                    HashMap<String, String> odpairs = new HashMap<String, String>();
                odpairs.put(transactionDetailsVo.getTransactionStationCode(), transactionDetailsVo.getTxStationCode());
                    poolFilterVO.setOdpairs(odpairs);
                    isPoolOwner = checkforPoolOwner(poolFilterVO);
                    log.log(Log.INFO, "is a Pool Owner", isPoolOwner);
                    if (isPoolOwner) {
                        transactionDetailsVo.setPoolOwnerFlag("Y");
                    } else {
                        transactionDetailsVo.setPoolOwnerFlag("N");
                    }
        }else{
            transactionDetailsVo.setPoolOwnerFlag("N");
        }
                    /*
         * Close all pending open transactions for ULD
                     */
            try {
                ////closeIfAnyOpenLoanTxnExists(transactionDetailsVo);
                //Added by A-7131 for ICRD-159933
                if(transactionDetailsVo != null) {
                    log.entering("closeIfAnyOpenLoanTxnExists", "TRANSACTION WILL BE CLOSED");
                    Collection<ULDTransaction> uldTransactionDetails = null;
                    TransactionFilterVO filterVO = new TransactionFilterVO();
                    filterVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
                    filterVO.setUldNumber(transactionDetailsVo.getUldNumber());
                    uldTransactionDetails = ULDTransaction.findOpenTxnULDObjects(filterVO);
                    int duplicateLoanReturns = 0;
                    if(uldTransactionDetails != null &&
                            uldTransactionDetails.size() > 0) {
                        for(ULDTransaction uldTransaction:uldTransactionDetails){
                            if(!ULDTransactionDetailsVO.FLAG_NO.equals(transactionDetailsVo.getSysRtnFlag())){
                                //case for UCM-ULD returned back to Owner
								transactionDetailsVo.setSysRtnFlag(ULDTransactionDetailsVO.FLAG_YES);
							}
                            if(transactionDetailsVo.getReturnStationCode()==null ||
                                    transactionDetailsVo.getReturnStationCode().trim().length() == 0){
								transactionDetailsVo.setReturnStationCode(transactionDetailsVo.getTransactionStationCode());
							}
                            if (transactionDetailsVo.getReturnDate()==null){
								transactionDetailsVo.setReturnDate(transactionDetailsVo.getTransactionDate());
							}
							if (!transactionDetailsVo.getToPartyCode().equals(uldTransaction.getPartyCode())) {
                                returnULDLoanTransaction(transactionDetailsVo,uldTransaction,null);
							} else {
								duplicateLoanReturns++;
							}
						}
					log.log(Log.INFO, "CALLING THE UPDATE METHOD");
					}
                    //the duplicate call for loan is being handled.
                    //duplicate call will attempt to return the previous call.
                    //Blocking this and returning null if only duplicate loan transactions are here.
					if (uldTransactionDetails.size() > 0 && duplicateLoanReturns == uldTransactionDetails.size()) {
						return null;
					}
				}
			} catch (PersistenceException e) {
                log.log(Log.INFO,"Exception thrown when closing open loan txn. Ignoring and proceeding");
			}
			transactionDetailsVo.setTransactionType(LOANED_TRANSACTION);
			setMucStatus(transactionDetailsVo);
			transactionDetailsVo.setControlReceiptNumber(setControlReceiptNumber(transactionDetailsVo));
			/*
			 * Actual Transaction Created
			 */
				log.log(Log.FINE, "THE ULD CAN BE LOANED");
				transaction = new ULDTransaction(transactionDetailsVo);
							/*
			 * Setting Details of Txn in ULDMST
			 */
                if(ULDTransactionDetailsVO.AGENT.equals(transactionDetailsVo.getPartyType())){
					uld.setReleasedTo(transactionDetailsVo.getToPartyCode());
					uld.setAgentCode(transactionDetailsVo.getToPartyCode());
					uld.setAgentStation(transactionDetailsVo.getTransactionStationCode());
				}
				uld.setLoanReferenceNumber(transaction.getUldTransactionPK().getTransactionRefNumber());
				if (PARTYTYPE_AIRLINE.equals(transactionDetailsVo.getPartyType())) {
					uld.setOperationalAirlineIdentifier(transactionDetailsVo.getOperationalAirlineIdentifier());
				}
                if (transactionDetailsVo.getUldNature() != null
                        && transactionDetailsVo.getUldNature().trim().length() > 0) {
                    uld.setUldNature(transactionDetailsVo.getUldNature());
				}else if(uld.getUldNature()==null || uld.getUldNature().trim().isEmpty()){// Modified for ICRD-293272
					uld.setUldNature("GEN");
				}
				uld.setControlReceiptNumber(transactionDetailsVo.getControlReceiptNumber());
				uld.setLastUpdateTime(transactionDetailsVo.getUldLastUpdateTime());
				uld.setLastUpdateUser(transactionDetailsVo.getLastUpdateUser());
				// Audit the Transaction for ULD Entity
                ULDAuditVO uldAuditVO = new ULDAuditVO(
                        TransactionVO.MODULE,
                        TransactionVO.SUBMODULE,
                        TransactionVO.ENTITY);
                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(uldAuditVO,
                                transaction, true);
                collectULDTransactionDetails(transaction,
                        uldAuditVO, transactionDetailsVo);
                uldAuditVO.setActionCode(CREATE_ULDLOANTRANSACTION);
                uldAuditVO.setAuditRemarks(transactionDetailsVo
                        .getTransactionRemark());
                AuditUtils.performAudit(uldAuditVO);
                log.log(Log.FINE,"\n\n\n#### Audit Performed ###\n\n\n");
                // Audit end
            /*
             * check whether the uld currentstation is different from
             * the loaned station Movement needs to be created
             */
            if(uld.getCurrentStation() == null){
                if(transactionDetailsVo.getTransactionStationCode()!=null
                        && transactionDetailsVo.getTransactionStationCode().trim().length() > 0){
                    uld.setCurrentStation(transactionDetailsVo.getTransactionStationCode());
                }else{
                    uld.setCurrentStation(logonAttributes.getStationCode());
                }
            }
            //modified for ICQFBS-633
            if(!transactionDetailsVo.getTransactionStationCode().equals(uld.getCurrentStation())) {
                log.log(Log.INFO,"ERRORS CREATED WHEN THE ULD CURRENTSTATION DIFFERENT FROM LOANED STATION");
                    ULDMovementVO uldMovementVO = new ULDMovementVO();
                    Collection<ULDMovementVO> uldMovementVOs = new ArrayList<ULDMovementVO>();
                    Collection<String> uldNOs = new ArrayList<String>();
                    uldMovementVO.setPointOfLading(uld.getCurrentStation());
                    uldMovementVO.setPointOfUnLading(transactionDetailsVo.getTransactionStationCode());
                    uldMovementVO.setCurrentStation(transactionDetailsVo.getTransactionStationCode());
                    uldMovementVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
                    uldMovementVO.setLastUpdatedUser(logonAttributes.getUserId());
                    if(( new LocalDate(uld.getCurrentStation(),Location.ARP,uld.getLastMovementDate(),true).toGMTDate()
                            .before(transactionDetailsVo.getTransactionDate().toGMTDate()))){
                    uldMovementVO.setUpdateCurrentStation(true);
                    }
                    uldMovementVO.setDummyMovement(true);
                    uldMovementVO.setLastUpdatedTime(transactionDetailsVo.getTransactionDate());
                    uldMovementVO.setRemark(transactionDetailsVo.getAwbNumber());
                    //uldMovementVO.setSourceIndicator(transactionDetailsVo.getSource());
                    uldMovementVOs.add(uldMovementVO);
                    uldNOs.add(transactionDetailsVo.getUldNumber());
                    log.log(Log.INFO, "uldNOs-----------",uldNOs);
                    log.log(Log.INFO, "uldMovementVOs----------",uldMovementVOs);
                    /*if("UCM".equals(transactionDetailsVo.getSource())
                            && transactionDetailsVo.getPol()!= null
                            && transactionDetailsVo.getPou()!= null
                            && !(transactionDetailsVo.getPol().equals(uld.getCurrentStation()))){
                        ULDMovementVO uldMovementVo = new ULDMovementVO();
                        uldMovementVo.setPointOfLading(transactionDetailsVo.getPol());
                        uldMovementVo.setPointOfUnLading(transactionDetailsVo.getPou());
                        uldMovementVo.setCurrentStation(transactionDetailsVo.getTransactionStationCode());
                        uldMovementVo.setCompanyCode(transactionDetailsVo.getCompanyCode());
                        uldMovementVo.setLastUpdatedUser(logonAttributes.getUserId());
                        if(( new LocalDate(uld.getCurrentStation(),Location.ARP,uld.getLastMovementDate(),true).toGMTDate()
                                .before(transactionDetailsVo.getTransactionDate().toGMTDate()))){
                            uldMovementVo.setUpdateCurrentStation(false);
                        }
                        uldMovementVo.setDummyMovement(false);
                        uldMovementVo.setLastUpdatedTime(transactionDetailsVo.getTransactionDate());
                        uldMovementVo.setRemark(transactionDetailsVo.getAwbNumber());
                        uldMovementVo.setSourceIndicator(transactionDetailsVo.getSource());
                        uldMovementVOs.add(uldMovementVo);
                    }*/
                    try {
                            saveULDMovement(uldNOs, uldMovementVOs);
                    } catch (ULDDoesNotExistsException e) {
                            log.log(Log.INFO,"WILL NOT ENTER HERE");
					}
			}
			/*
			 * Internal Movement is needed for Agent Transactions
			 */
            if(LOANED_TRANSACTION.equals(transactionDetailsVo.getTransactionType())
                        && ULDTransactionDetailsVO.AGENT.equals(transactionDetailsVo.getPartyType())){
				uld.setFacilityType(ULDAirportLocationVO.FACLITY_AGENTLOC);
                log.log(Log.INFO,"Internal movement shud be marked---->>>>",transactionDetailsVo);
                ULDIntMvtVO uldIntMvtVO =new ULDIntMvtVO();
				ULDIntMvtDetailVO uldIntMvtDetailVO = new ULDIntMvtDetailVO();
				Collection<ULDIntMvtDetailVO> uldIntMvtDetailVOs = new ArrayList<ULDIntMvtDetailVO>();
				Collection<ULDIntMvtVO> uldIntMvts = new ArrayList<ULDIntMvtVO>();
				uldIntMvtVO.setAirport(transactionDetailsVo.getTransactionStationCode());
				uldIntMvtVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
				uldIntMvtVO.setUldNumber(transactionDetailsVo.getUldNumber());
				uldIntMvtVO.setLastUpdatedUser(transactionDetailsVo.getLastUpdateUser());
				uldIntMvtDetailVO.setAirport(transactionDetailsVo.getTransactionStationCode());
				uldIntMvtDetailVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
				uldIntMvtDetailVO.setAgentCode(transactionDetailsVo.getToPartyCode());
				uldIntMvtDetailVO.setAgentName(transactionDetailsVo.getToPartyName());
				uldIntMvtDetailVO.setFromLocation(uld.getLocation());
				uldIntMvtDetailVO.setContent(ULDAirportLocationVO.FACLITY_AGENTLOC);
				uldIntMvtDetailVO.setReturnStatus(ULDAirportLocationVO.FLAG_NO);
				ULDAirportLocationVO uLDAirportLocationVO = null;
                uLDAirportLocationVO = ULDAirportLocation.findLocationforFacility(transactionDetailsVo
                        .getCompanyCode(), transactionDetailsVo.getTransactionStationCode(),FACILITY_AGENT);
                if(uLDAirportLocationVO!=null){
					uldIntMvtDetailVO.setToLocation(uLDAirportLocationVO.getFacilityCode());
					uld.setLocation(uLDAirportLocationVO.getFacilityCode());
                }else{
					uldIntMvtDetailVO.setToLocation(BLANK);
				}
				uldIntMvtDetailVO.setRemark(transactionDetailsVo.getAwbNumber());
				uldIntMvtDetailVO.setMvtType(ULDIntMvtDetailVO.ACTUAL_MOVEMENT);
                uldIntMvtDetailVO.setMvtDate(new LocalDate(transactionDetailsVo.getTransactionDate(),true));
				uldIntMvtDetailVO.setUldNumber(transactionDetailsVo.getUldNumber());
				log.log(Log.INFO, "-------uldIntMvtDetailVO--*******-----", uldIntMvtDetailVO);
				uldIntMvtDetailVOs.add(uldIntMvtDetailVO);
				uldIntMvtVO.setULDIntMvtDetailVOs(uldIntMvtDetailVOs);
				uldIntMvts.add(uldIntMvtVO);
				saveULDIntMvts(uldIntMvts);
                // If Facility Type is Ware house --then ULD need to checked Out and Checked In
                Collection<StorageUnitVO> storageUnitVOs = new ArrayList<StorageUnitVO>();
                Collection<ULDCheckinVO> checkInVos = new ArrayList<ULDCheckinVO>();
                boolean callWhsFlag=false;
                boolean isWhsDelete=false;
                // If ULD is currenly in Warehouse --delete the storage details
                if(WAREHOUSE.equals(uld.getFacilityType())){
					isWhsDelete = true;
					StorageUnitVO storageUnitVO = new StorageUnitVO();
					storageUnitVO.setAirportCode(uld.getCurrentStation());
					storageUnitVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
					storageUnitVO.setWarehouseCode(uld.getLocation());
					storageUnitVO.setStorageUnitCode(transactionDetailsVo.getUldNumber());
					storageUnitVOs.add(storageUnitVO);
				}
                log.log(Log.INFO,"storageUnitVOs-------->",storageUnitVOs);
				// Check out the ULD from warehouse
                if(isWhsDelete){
					WarehouseProxy warehouseProxy = new WarehouseProxy();
					try {
						warehouseProxy.deleteStorageUnitDetails(storageUnitVOs);
					} catch (ProxyException proxyException) {
						log.log(Log.INFO, "-------proxyException-------", proxyException.getErrors());
						log.log(Log.INFO, "-------proxyException-------", proxyException.getMessage());
					}
				}
                if(WAREHOUSE.equals(uld.getFacilityType())){
					callWhsFlag = true;
					ULDCheckinVO uLDCheckinVO = new ULDCheckinVO();
					uLDCheckinVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
					uLDCheckinVO.setStorageUnitCode(transactionDetailsVo.getUldNumber());
					uLDCheckinVO.setAirportCode(transactionDetailsVo.getTransactionStationCode());
					uLDCheckinVO.setWarehouseCode(transactionDetailsVo.getLocation());
					checkInVos.add(uLDCheckinVO);
				}
				// Check in The ULD into new Warehouse Location
                log.log(Log.INFO,"checkInVos-------->",checkInVos);
                if(callWhsFlag){
					try {
						WarehouseProxy warehouseProxy = new WarehouseProxy();
						warehouseProxy.saveAndCheckinULD(checkInVos);
					} catch (ProxyException proxyException) {
                        log.log(Log.INFO, "-------proxyException-------"
                                , proxyException.getErrors());
                        log.log(Log.INFO, "-------proxyException-------"
                                , proxyException.getMessage());
					}
                }
            }
        /*}else{
            saveNewULDTransactionHistory(transactionDetailsVo,uld);
        }*/
            return transaction;
    }
    /**
    * Added by A-3415 for ICRD-114538
    * @param uldTransactionDetailsVO
    * @throws SystemException
    */
    private String setControlReceiptNumber(ULDTransactionDetailsVO uldTransactionDetailsVO)
    throws SystemException{
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
        String ownAirlineCode = logonAttributes.getOwnAirlineCode();
        String crn = null;
        boolean genCRN = false;
        String ownerCode = null;
         if ((ownAirlineCode.equalsIgnoreCase(uldTransactionDetailsVO.getToPartyCode()))
                    || (ownAirlineCode.equalsIgnoreCase(uldTransactionDetailsVO.getFromPartyCode()))) {
             if(ownAirlineCode.equalsIgnoreCase(uldTransactionDetailsVO.getFromPartyCode())) {
                        if(("L".equals(uldTransactionDetailsVO.getTransactionType())
                                &&  "T".equals(uldTransactionDetailsVO.getTransactionStatus()))
                                || "R".equals(uldTransactionDetailsVO.getTransactionStatus())){
                            genCRN = true;
                            ownerCode = uldTransactionDetailsVO.getFromPartyCode();
                        }else{
                            genCRN = false;
                        }
            }
             //Added by A-7131 for ICRD-159933
             /*if(ownAirlineCode.equalsIgnoreCase(uldTransactionDetailsVO.getToPartyCode())) {
                    if(("L".equals(uldTransactionDetailsVO.getTransactionType())
                            &&  "T".equals(uldTransactionDetailsVO.getTransactionStatus()))
                            || "R".equals(uldTransactionDetailsVO.getTransactionStatus())){
                        genCRN = true;
                        ownerCode = uldTransactionDetailsVO.getFromPartyCode();
                    }else{
                        genCRN = false;
                    }
             }*/
          }
         if(genCRN){
             String owrCode = String.valueOf(logonAttributes.getOwnAirlineNumericCode());
             if(uldTransactionDetailsVO.getControlReceiptNumber()==null ||
                      !(uldTransactionDetailsVO.getControlReceiptNumber().startsWith(owrCode)) ){
                        crn = findCRNForULDTransaction(logonAttributes.getCompanyCode(),
                                ownerCode);
                         /*crn = new StringBuilder().append(ctrlRcptNo.substring(0,4))
                        .append("0").append(ctrlRcptNo.substring(5,12)).toString();*/
                 }else{
                     crn = uldTransactionDetailsVO.getControlReceiptNumber();
                 }
         }else{
             String owrCode = String.valueOf(logonAttributes.getOwnAirlineNumericCode());
             if(uldTransactionDetailsVO.getControlReceiptNumber()==null ||
                  !(uldTransactionDetailsVO.getControlReceiptNumber().startsWith(owrCode)) ){
                crn = uldTransactionDetailsVO.getControlReceiptNumber();
                //Added by A-7131 for ICRD-163685 starts
   			 	if (uldTransactionDetailsVO.getControlReceiptNumber() == null) {
   			 		crn = findCRNForULDTransaction(logonAttributes.getCompanyCode(),
    			 			uldTransactionDetailsVO.getFromPartyCode());
   			 	}
            //Added by A-7131 for ICRD-163685 ends
			 }
    	 }
    	 return crn;
    }
    /**
	 * Added by A-3415 for ICRD-114538
	 * @param transactionVO
	 * @return
	 * @throws SystemException
	 * @throws DimensionConversionException
	 * @throws CurrencyConversionException
     * @throws ULDDefaultsBusinessException 
	 * @throws PersistenceException 
	 */
    private Collection<ErrorVO> returnWithoutPriorLoan(TransactionVO transactionVO)throws
       SystemException,DimensionConversionException,CurrencyConversionException, ULDDefaultsBusinessException{
		log.entering("returnWithoutPriorLoan", "Loan and return");
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		LogonAttributes logonVO = ContextUtils.getSecurityContext().getLogonAttributesVO();
		Collection<ULDTransactionDetailsVO> uldTxnDetailVOs = new ArrayList<ULDTransactionDetailsVO>();
        Map<String,String> map = new HashMap<String,String>();
		String owrArlCode = logonVO.getOwnAirlineCode();
        /*Collection<String> systemParameterCodes = new ArrayList<String>();
        systemParameterCodes.add(PARTNER_AIRLINE_ENABLED);
         * Getting system parameters for Partner Airline
        try {
            map = new SharedDefaultsProxy().findSystemParameterByCodes(systemParameterCodes);
        } catch (ProxyException proxyException) {
            new SystemException(proxyException.getErrors());
        }
        String partnerEnabled  = map.get(PARTNER_AIRLINE_ENABLED);*/
        //Added by A-7131 for ICRD-154607
        ArrayList<ULDTransactionDetailsVO> lucMsgTransactionDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
        if (transactionVO.getUldTransactionDetailsVOs() != null && transactionVO.getUldTransactionDetailsVOs().size() > 0) {
            for (ULDTransactionDetailsVO uldTransactionDetailVO : transactionVO
                    .getUldTransactionDetailsVOs()) {
                if(uldTransactionDetailVO.getSource()==null || "SCREEN".equals(uldTransactionDetailVO.getSource())){
					uldTransactionDetailVO.setSource(ContextUtils.getInvocationSource());
				}
				ULDAirportLocationVO uLDAirportLocationVO = null;
				ULD uld = null;
				String uldNumber = uldTransactionDetailVO.getUldNumber().trim().toUpperCase();
				String fromParty = uldTransactionDetailVO.getFromPartyCode();
				String toParty = uldTransactionDetailVO.getToPartyCode();
                int length =uldNumber.trim().length();
                if(uldNumber != null){
                    boolean isValidULDFormat = checkvalidateULDFormat(uldTransactionDetailVO
                            .getCompanyCode(), uldTransactionDetailVO.getUldNumber());
					log.log(Log.FINE, "THE ULD FORMAT IS ULD FORMAT IS ", isValidULDFormat);
					if (!isValidULDFormat) {
                        log.log(Log.INFO,"INVALID ULD FORMAT EXCEPTION THROWN ERRRVO CREATED");
						errors.add(new ErrorVO(InvalidULDFormatException.INVALID_ULD_FORMAT,
										new Object[] { uldTransactionDetailVO.getUldNumber() }));
                    }else{
						uld = checkULDExistsForTransaction(uldTransactionDetailVO);
						log.log(Log.FINE, "THE VALUE FOR ULDEXISTS ULDEXISTS IS", uld);
                        if(uld == null){
							String uldType = parseULDType(uldNumber);
                            log.log(Log.FINE, "THE ULDTYPE IS ULDTYPE IS" , uldType);
							log.log(Log.INFO, "fFIND ULD STRUCTURAL DETAILS CALLED");
							/* 
                             * Call findStructural Details since in case of a Borrowed Transaction
                             * we are introducing an new ULD in the ULDMST containing the BORREFNUM
                             * in ULDMST as same as TXNREFNUM in ULDTXNMST
							 */
                            ULDTypeVO typeVo = null;
                            if(uldNumber != null && uldNumber.length() > 0) {
                            	typeVo = findULDTypeStructuralDetails(logonVO.getCompanyCode(), uldNumber);
                            }
                            else {
                            	typeVo = findULDTypeStructuralDetails(logonVO.getCompanyCode(), uldType);
                            }
                            
                            if (uldNumber.endsWith(logonVO.getOwnAirlineCode())){
                                errors.add(new ErrorVO("uld.defaults.uld.doesnot.exists",new Object[] { uldNumber }));
								return errors;
                            }else{
								ULDVO uldVo = createULDVo(uldTransactionDetailVO, typeVo, uldType);
								uld = new ULD(uldVo);	
							}
						}
						/*
                         * Checking whether the uld is having a prior loan with same from and to party
                         * then return that loan
						 */
						boolean isValid = false;
						boolean isLoanReturn = false;
						Collection<ULDTransaction> uldTransactionDetails = null;
						TransactionFilterVO filterVO = new TransactionFilterVO();
						filterVO.setCompanyCode(uldTransactionDetailVO.getCompanyCode());
						filterVO.setUldNumber(uldTransactionDetailVO.getUldNumber());
						filterVO.setFromPartyCode(uldTransactionDetailVO.getToPartyCode());
						/*
                         * For partner airline can be stoped with a system parameter
                         * Partner Airline will be replaced with Owner in Loan
                         */
                    /*  if(AbstractVO.FLAG_YES.equals(partnerEnabled)){
                            String partnerAirline = findPartnerCarriers();
                            if(partnerAirline!=null && partnerAirline.trim().length()>0
                                    && partnerAirline.contains(fromParty)
                                    && !(partnerAirline.contains(toParty) || owrArlCode.equals(toParty))){
                                filterVO.setToPartyCode(owrArlCode);
                            }else{
                        filterVO.setToPartyCode(uldTransactionDetailVO.getFromPartyCode());
                            }
                        }else{*/
                            filterVO.setToPartyCode(uldTransactionDetailVO.getFromPartyCode());
                        //}
                        try {
                            uldTransactionDetails = ULDTransaction.findOpenTxnULDObjects(filterVO);
                        } catch (PersistenceException e) {
                            log.log(Log.FINEST, e.getMessage());
                        }
                        if(uldTransactionDetails != null &&
                                uldTransactionDetails.size() > 0) {
							isLoanReturn = true;
                            for(ULDTransaction uldTransaction:uldTransactionDetails){
								uldTransactionDetailVO.setSysRtnFlag(ULDTransactionDetailsVO.FLAG_YES);
                                if(uldTransactionDetailVO.getReturnStationCode()==null ||
                                        uldTransactionDetailVO.getReturnStationCode().trim().length() == 0){
                                    uldTransactionDetailVO.setReturnStationCode(uldTransactionDetailVO.getTransactionStationCode());
                                }
                                if(uldTransactionDetailVO.getControlReceiptNumber()!=null &&
                                        uldTransactionDetailVO.getControlReceiptNumber().trim().length() > 0){
                                    uldTransactionDetailVO.setReturnCRN(uldTransactionDetailVO.getControlReceiptNumber());
                                }
                                returnULDLoanTransaction(uldTransactionDetailVO,uldTransaction,transactionVO);
							}
						}
						/*
						 * Checking whether the uld is having any prior loans 
						 * then return all that loan txns
						 */
                        if(!isLoanReturn){
							ULDTransactionDetailsVO returnTxnVO = new ULDTransactionDetailsVO();
							BeanHelper.copyProperties(returnTxnVO, uldTransactionDetailVO);							
							swapFromAndToPartyForReturn(returnTxnVO);
                            if(returnTxnVO.getTransactionDate()== null && returnTxnVO.getReturnDate()!=null){
								returnTxnVO.setTransactionDate(returnTxnVO.getReturnDate());
                            }else if(returnTxnVO.getTransactionDate()== null && returnTxnVO.getReturnDate()== null){
                                returnTxnVO.setTransactionDate(new LocalDate(LocalDate.NO_STATION, Location.NONE,false));
                            }
                            if(uldTransactionDetailVO.getControlReceiptNumber()!=null &&
                                    uldTransactionDetailVO.getControlReceiptNumber().trim().length() > 0){
							uldTransactionDetailVO.setReturnCRN(uldTransactionDetailVO.getControlReceiptNumber());
							}
							returnTxnVO.setControlReceiptNumber(null);
                            if(returnTxnVO.getTransactionRemark()==null ||returnTxnVO.getTransactionRemark().length()==0){
                                StringBuilder transactionRemark = new StringBuilder("Dummy loan transaction on Return Loan");
                                if(returnTxnVO.getSource()!=null){
									transactionRemark.append(", Source :").append(returnTxnVO.getSource());
								}
								returnTxnVO.setTransactionRemark(transactionRemark.toString());
							}							
							ULDTransaction uldTransaction = saveNewULDTransaction(uld, returnTxnVO);
                            if(uldTransaction != null){
                                errors.add(new ErrorVO(ULD_TRANSACTION_REF_NUMBER,new Object[] { new StringBuilder()
                                .append(uldTransactionDetailVO.getUldNumber()).append("~")
                                .append(uldTransactionDetailVO.getTransactionRefNumber()).toString() }));
                                if(uldTransactionDetailVO.getReturnStationCode()==null ||
                                        uldTransactionDetailVO.getReturnStationCode().trim().length() == 0){
                                    uldTransactionDetailVO.setReturnStationCode(uldTransactionDetailVO.getTransactionStationCode());
								}
								uldTransactionDetailVO.setSysRtnFlag(FLAG_YES);
                                returnULDLoanTransaction(uldTransactionDetailVO,uldTransaction,transactionVO);
							}
						}
						
                        //Adding the ULDTransactionDetailsVO for sending LUC message
                        if ((PARTYTYPE_AIRLINE.equals(uldTransactionDetailVO.getPartyType()) 
                        		|| PARTYTYPE_AGENT.equals(uldTransactionDetailVO.getPartyType()) ) &&
                        		shouldSendLUC(uldTransactionDetailVO)) {  
                        	/***###populateDetailsForAgentPartyType(uldTransactionDetailVO);**/
                        	/**populateDetailsForAgentPartyType moved to LUC Message feature**/
							lucMsgTransactionDetailsVOs.add(uldTransactionDetailVO);
							uldTransactionDetailVO.setLUCMessageRequired(true); /**Currently this flag is used while sending LUC.
							 Same might be removed once code during code refactoring*/
						}
				 }
			}
		 }
		}		

		if (lucMsgTransactionDetailsVOs.size() > 0) {
			createAndSendLUCMessage(transactionVO);
		}		
		return errors;
	}

    /**
     * 	Method		:	ULDController.createAndSendLUCMessage
     *	Added on 	:	09-Dec-2022
     * 	Used for 	:	this feature will be used for creating and sending LUC message.
     * 					Message creation is done in message brocker side as part fo the feature event,
     * 					and any enrichment before actual sending can be done in the feature.
     *	Parameters	:	@param transactionVO
     *	Parameters	:	@throws SystemException
     *	Parameters	:	@throws ULDDefaultsBusinessException 
     *	Return type	: 	void
     */
    public void createAndSendLUCMessage(TransactionVO transactionVO) throws SystemException, ULDDefaultsBusinessException {
    	log.entering(this.getClass().getCanonicalName(), "createAndSendLUCMessage");
		try {
			LUCMessageFeature lucMessageFeature = (LUCMessageFeature)ICargoSproutAdapter
					.getBean("LUCMessageFeature", true);
			lucMessageFeature.execute(transactionVO);
		} catch (BusinessException e) {
			log.log(Log.SEVERE, e.getMessage());
			throw new ULDDefaultsBusinessException(e);
		}
		log.exiting(this.getClass().getCanonicalName(), "createAndSendLUCMessage");
	}
	/**
	 * @param uldTransactionDetailVO
	 * @throws SystemException
	 */
	/***private void populateDetailsForAgentPartyType(ULDTransactionDetailsVO uldTransactionDetailVO)
			throws SystemException {
		if(PARTYTYPE_AGENT.equals(uldTransactionDetailVO.getPartyType())){
			uldTransactionDetailVO.setFromPartyCode(uldTransactionDetailVO.getUldNumber().substring(uldTransactionDetailVO.getUldNumber().length() - 2));
			if ((Objects.isNull(uldTransactionDetailVO.getReturnCRN()) || !uldTransactionDetailVO.getReturnCRN().isEmpty())
					&& (Objects.isNull(uldTransactionDetailVO.getControlReceiptNumber()) || !uldTransactionDetailVO.getControlReceiptNumber().isEmpty())) {
				String crn = null;
		        String ctrlRcptNo = findCRNForULDTransaction(uldTransactionDetailVO.getCompanyCode(),uldTransactionDetailVO.getFromPartyCode());
		        crn = new StringBuilder().append(
		                ctrlRcptNo.substring(0, 4)).append("0")
		                .append(ctrlRcptNo.substring(4, 11))
		                .toString();
		        uldTransactionDetailVO.setControlReceiptNumber(crn);
			}
		}
	}
	/**
	 * @author A-3415 for ICRD-114538
	 */
	public ULDTransactionDetailsVO findLastTransactionsForUld(TransactionFilterVO transactionFilterVO)
	throws SystemException {
     return ULDTransaction.findLastTransactionsForUld(transactionFilterVO);
	}
	/**
	 * @author A-3415 for ICRD-114538
	 */
	private Collection<ULDTransactionDetailsVO> constructULDTransactionDetailsVO(LUCULDDetailsVO uldDetailsVO,
			String partyType) throws SystemException {
		log.entering("ULDController", "constructULDTransactionDetailsVO");
        log.log(Log.INFO, "uldDetailsVO---------->" , uldDetailsVO);
        log.log(Log.INFO, "partyType---------->" , partyType);
		Collection<ULDTransactionDetailsVO> transactionDetailsVOs = new ArrayList<ULDTransactionDetailsVO>();
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
        .getLogonAttributesVO();
        String fromParty = null;
        String toParty = null;
        String uldOwner = null;
        String uldNumber = null;
        AirlineValidationVO fromAirlineValidationVO= null;
               
        AirlineValidationVO toAirlineValidationVO= null;
		String carrierAirline = "";
		String ownAirline = logonAttributes.getOwnAirlineCode();
		uldOwner = uldDetailsVO.getUldIdentificationVO()
								.getUldOwnerCode();
		uldNumber = new StringBuilder().append(
				uldDetailsVO.getUldIdentificationVO().getUldType()).append(
				uldDetailsVO.getUldIdentificationVO().getUldSerialNumber())
				.append(
						uldDetailsVO.getUldIdentificationVO()
								.getUldOwnerCode()).toString();
		fromParty = uldDetailsVO.getTransferringPartyDetailsVO()
								.getCarrierCode().toUpperCase();
		toParty = uldDetailsVO.getReceivingPartyDetailsVO()
								.getCarrierCode().toUpperCase();
		//Modified by A-7359 for ICRD-260301 starts here
		if(fromParty.startsWith(NON_CARRIERID)){
			if(uldDetailsVO.getTransferringPartyDetailsVO().getNonCarrierId()!=null){
			fromParty=uldDetailsVO.getTransferringPartyDetailsVO().getNonCarrierId().toUpperCase();
			}
			carrierAirline=TOAIRLINE;
		}
		if(toParty.startsWith(NON_CARRIERID)){
			if(uldDetailsVO.getReceivingPartyDetailsVO().getNonCarrierId()!=null){
			toParty=uldDetailsVO.getReceivingPartyDetailsVO().getNonCarrierId().toUpperCase();
			}
			carrierAirline=FROMAIRLINE;
		}
		
		
		if(PARTYTYPE_AIRLINE.equalsIgnoreCase(partyType)||(carrierAirline.equalsIgnoreCase(FROMAIRLINE))){
        try{
            fromAirlineValidationVO = Proxy.getInstance().get(SharedAirlineProxy.class).validateAlphaCode(logonAttributes.getCompanyCode(), fromParty);
        }catch(ProxyException ex){
            for(ErrorVO errorVO :ex.getErrors()) {
                if(!"shared.airline.invalidairline".equals(errorVO.getErrorCode()))
                        throw new SystemException(ex.getMessage(),ex);
            }
        }
		}
		if(PARTYTYPE_AIRLINE.equalsIgnoreCase(partyType)||(carrierAirline.equalsIgnoreCase(TOAIRLINE))){
		
        try{
            toAirlineValidationVO = Proxy.getInstance().get(SharedAirlineProxy.class).validateAlphaCode(logonAttributes.getCompanyCode(), toParty);
        }catch(ProxyException ex){
            for(ErrorVO errorVO :ex.getErrors()) {
                if(!"shared.airline.invalidairline".equals(errorVO.getErrorCode()))
                        {
                        throw new SystemException(ex.getMessage(),ex);
                        }
            }
        }
		}
		//Additional validations are provided on Value Setting for VO for Non-Airline
		//Modified by A-7359 for ICRD-260301 ends here
        //HashMap<String, Integer> airlineIdMap = ULD.listAirlineIdentifiers(
		//		logonAttributes.getCompanyCode(), codes);
		ULDTransactionDetailsVO vo = new ULDTransactionDetailsVO();
		vo.setCompanyCode(logonAttributes.getCompanyCode());
		vo.setUldNumber(ULDFormatter.formatULDNo(uldNumber));
		vo.setPartyType(partyType);
		if (uldDetailsVO.getUldConditionDetailsVO().getDamageCode() != null) {
			vo.setDamageStatus(DAMAGED);
		}
		if (uldDetailsVO.getUldConditionDetailsVO().getServiceableCode() != null) {
			vo.setDamageStatus(NOT_DAMAGED);
		}
		vo.setFromPartyCode(fromParty);
		if(PARTYTYPE_AIRLINE.equalsIgnoreCase(partyType)||(carrierAirline.equalsIgnoreCase(FROMAIRLINE))){
		vo.setFromPartyIdentifier(fromAirlineValidationVO.getAirlineIdentifier());
		vo.setCurrOwnerCode(fromAirlineValidationVO.getAirlineIdentifier());
		}
        vo.setToPartyCode(toParty);
		if(PARTYTYPE_AIRLINE.equalsIgnoreCase(partyType)||(carrierAirline.equalsIgnoreCase(TOAIRLINE))){
			vo.setToPartyIdentifier(toAirlineValidationVO.getAirlineIdentifier());
		}
        vo.setControlReceiptNumber(uldDetailsVO
                .getUldReceiptNumber());
		if(PARTYTYPE_AIRLINE.equalsIgnoreCase(partyType)||(carrierAirline.equalsIgnoreCase(TOAIRLINE))){
		vo.setOperationalAirlineIdentifier(toAirlineValidationVO.getAirlineIdentifier());
		}
        vo.setLastUpdateUser(logonAttributes.getUserId());
		
		//Modified by A-7359 for ICRD-255608 starts here
        String dateOfMonth = uldDetailsVO.getDateofTransfer();
        String time = String.valueOf(uldDetailsVO.getTimeofTransfer());
        LocalDate localDate = new LocalDate(uldDetailsVO
                .getLocationOftransfer(), Location.ARP, true);
		Date date = null;
		/*For validating the date to check whether the LUC is
		for AIRLINE-AIRLINE / AIRLINE-NONAIRLINE*/
		date=validateDateofTransfer(dateOfMonth,time);
        String formatDate = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss").format(date);
        localDate.setDateAndTime(formatDate);
      //Modified by A-7359 for ICRD-255608 ends here
		vo.setTransactionDate(localDate);
		uldDetailsVO.setTransactionDate(localDate);
		vo.setTxStationCode(uldDetailsVO.getDestinationLocation());
        vo.setTransactionStationCode(uldDetailsVO
                .getLocationOftransfer());
        vo.setUldType(uldDetailsVO
                .getUldIdentificationVO().getUldType());
        vo.setTransactionNature(TEMPORARY);
        vo.setLastUpdateTime(new LocalDate(
                logonAttributes.getAirportCode(), Location.ARP, true));
        vo.setTransactionStatus(TO_BE_RETURNED);
		vo.setReturnPartyCode(fromParty);
            log.log(Log.INFO,"SAVE A LOAN TXN!!!!!");
			vo.setTransactionType(LOANED_TRANSACTION);
			vo.setSource("LUC");
        if(uldDetailsVO.getUldConditionDetailsVO().getUldCondition()!=null){
			vo.setUldConditionCode(uldDetailsVO.getUldConditionDetailsVO().getUldCondition());
        }else{
			vo.setUldConditionCode("SER");
		}
		transactionDetailsVOs.add(vo);
        log.log(Log.INFO, "transactionDetailsVOs------RETURNING---->" , transactionDetailsVOs);
		return transactionDetailsVOs;
	}
	/**
	 * @author A-3415 for ICRD-114538
	 */
    private TransactionVO updateTransactionVOForLUC(
            TransactionVO transactionVO, LUCULDDetailsVO uldDetailsVO)
			throws SystemException {
		transactionVO.setOperationalFlag(TransactionFilterVO.OPERATION_FLAG_INSERT);
		//Modified by A-7359 for ICRD-255608 starts here
        String time = String.valueOf(uldDetailsVO.getTimeofTransfer());
		String dateOfMonth = uldDetailsVO.getDateofTransfer();
		LocalDate localDate = new LocalDate(uldDetailsVO
				.getLocationOftransfer(), Location.ARP, true);
		Date date = null;
		/*For validating the date to check whether the LUC is
		for AIRLINE-AIRLINE / AIRLINE-NONAIRLINE*/
		date=validateDateofTransfer(dateOfMonth,time);
		String formatDate = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss").format(date);
        localDate.setDateAndTime(formatDate);
        //Modified by A-7359 for ICRD-255608 ends here
		if (time.length() < 2) {
			time = new StringBuilder("000").append(time).toString();
		} else if (time.length() < 3) {
			time = new StringBuilder("00").append(time).toString();
		} else if (time.length() < 4) {
			time = new StringBuilder("0").append(time).toString();
		}
		transactionVO.setTransactionTime(time);
		transactionVO.setTransactionDate(localDate);
        transactionVO.setTransactionStation(uldDetailsVO
                .getLocationOftransfer());
		return transactionVO;
	}
	/**
	 * @author A-3415 for ICRD-114538
	 */
    private void auditForLucProcessing(LUCMessageVO lucMessageVO)
        throws SystemException {
		log.entering("ULDController", "auditForLucProcessing");
        log.log(Log.INFO, "lucMessageVO---------->" , lucMessageVO);
        ULDConfigAuditVO uldConfigAuditVO = new ULDConfigAuditVO(
                ULDAgreementVO.MODULE, ULDAgreementVO.SUBMODULE,
                ULDAgreementVO.ENTITY);
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        StringBuffer additionalInfo = new StringBuffer();
        uldConfigAuditVO.setCompanyCode(logonAttributes.getCompanyCode());
        String airportCode = logonAttributes.getAirportCode();
        uldConfigAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP,
                true).toGMTDate());
        uldConfigAuditVO.setTxnLocalTime(new LocalDate(airportCode,
                Location.ARP, true));
        uldConfigAuditVO.setUserId(logonAttributes.getUserId());
        if (lucMessageVO.getSupplInfoVO() != null) {
            uldConfigAuditVO.setAuditRemarks(lucMessageVO.getSupplInfoVO()
                    .getRemarks());
        }
        if (lucMessageVO.getUldDetails() != null
                && lucMessageVO.getUldDetails().size() > 0) {
            for (LUCULDDetailsVO uldDetailsVO : lucMessageVO.getUldDetails()) {
                additionalInfo.append("ULDNo. - ");
                additionalInfo.append(new StringBuilder(uldDetailsVO
                        .getUldIdentificationVO().getUldType()).append(
                        uldDetailsVO.getUldIdentificationVO()
                                .getUldSerialNumber())
                        .append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldOwnerCode()));
                additionalInfo.append("/CRNNo. - ");
                additionalInfo.append(uldDetailsVO.getUldReceiptNumber());
            }
        }
        uldConfigAuditVO.setAdditionalInformation(additionalInfo.toString());
        uldConfigAuditVO.setActionCode(PROCESS_LUCMESSAGE);
        AuditUtils.performAudit(uldConfigAuditVO);
    }
	/**
	 *
	 * @param companyCode
	 * @param uldNumber
	 * @param transactionType
	 * @return
	 * @throws SystemException
	 */
	private String lucMessageValidation(LUCMessageVO lucMessageVO)
            throws SystemException,ULDDefaultsBusinessException {
		log.entering("ULDController", "lucMessageValidation");
        log.log(Log.INFO, "lucMessageVO---------->" , lucMessageVO);
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        Collection<String> uLDNums = new ArrayList<String>();
        Collection<String> uldNotExists= new ArrayList<String>();
		Collection<String> airLines= new ArrayList<String>();
        String uldNumbers = null;
		String uldNumber=null;
		String airlineId = null;
		String crnPrefix = null;
		StringBuilder diffCRN = null;
		StringBuilder crnULDs = new StringBuilder();
		String fromParty = null;
		String toParty = null;
		boolean nonCarrierfromPartyFlag=false;
		boolean nonCarrierToPartyFlag=false;
        if (lucMessageVO.getUldDetails() != null
                && lucMessageVO.getUldDetails().size() > 0) {
            for (LUCULDDetailsVO uldDetailsVO : lucMessageVO.getUldDetails()) {
				uldNumber = new StringBuilder().append(
                        uldDetailsVO.getUldIdentificationVO().getUldType())
                        .append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldSerialNumber()).append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldOwnerCode()).toString();
				//Added by A-7359 for ICRD-262594 
				uldNumbers=ULDFormatter.formatULDNo(uldNumber);
                uLDNums.add(uldNumbers);
                ULD uld = null;
                try {
                    log.log(Log.INFO, "CHECK WHETER THE ULD ALREADY EXISTS");
                    uld = ULD.find(logonAttributes.getCompanyCode(),uldNumbers);
                } catch (FinderException ex) {
                    log.log(Log.INFO, "FINDER EXCEPTION IS THROWN");
                }
                if(uld == null){
                    log.log(Log.FINE, "THE VALUE FOR ULD NOTEXISTS IS");
                    if (uldNumbers.endsWith(logonAttributes.getOwnAirlineCode())){
						uldNotExists.add(uldNumbers);
					}
				}
				fromParty = uldDetailsVO.getTransferringPartyDetailsVO()
						.getCarrierCode().toUpperCase();
				toParty = uldDetailsVO.getReceivingPartyDetailsVO()
						.getCarrierCode().toUpperCase();
				//Modified by A-7359 for ICRD-260301 starts here
				if(NON_CARRIERID.equals(fromParty)){
					nonCarrierfromPartyFlag=true;
				}else if(NON_CARRIERID.equals(toParty)){
					nonCarrierToPartyFlag=true;
				}
				if(!(nonCarrierfromPartyFlag||nonCarrierToPartyFlag)){	
				crnPrefix = uldDetailsVO.getUldReceiptNumber().substring(0, 3);
                AirlineValidationVO airlineValidationVO= null;
                try{
                    airlineValidationVO = Proxy.getInstance().get(SharedAirlineProxy.class).validateAlphaCode(logonAttributes.getCompanyCode(), uldDetailsVO
                            .getTransferringPartyDetailsVO().getCarrierCode()
                            .toUpperCase());
                    airlineId = airlineValidationVO.getNumericCode();
                }catch(ProxyException ex){
                    //do nothing
                }
                /*airlineId = ULD.findAirlineCode(logonAttributes
                        .getCompanyCode(), uldDetailsVO
                        .getTransferringPartyDetailsVO().getCarrierCode()
                        .toUpperCase());*/
				if (!crnPrefix.equals(airlineId)) {
					if (diffCRN != null && diffCRN.length() > 0) {
						diffCRN.append(",").append(uldNumbers);
					} else {
						diffCRN = new StringBuilder(uldNumbers);
					}
				}
				}
				//Modified by A-7359 for ICRD-260301 ends here
				String uldReceiptNumber = uldDetailsVO.getUldReceiptNumber();
				String[] crn = uldReceiptNumber.split("-");
				String receipt = crn[1];
                if(isNumeric(receipt)){
                    try{
						int receiptNumber = new Integer(receipt).intValue();
                        if( !(receiptNumber > 0) ){
							if (crnULDs != null && crnULDs.length() > 0) {
								crnULDs.append(",").append(uldNumbers);
							} else {
								crnULDs = new StringBuilder(uldNumbers);
							}
						}
                    }catch(NumberFormatException numberFormatException){
						if (crnULDs != null && crnULDs.length() > 0) {
							crnULDs.append(",").append(uldNumbers);
						} else {
							crnULDs = new StringBuilder(uldNumbers);
						}
					}
                }else{
					if (crnULDs != null && crnULDs.length() > 0) {
						crnULDs.append(",").append(uldNumbers);
					} else {
						crnULDs = new StringBuilder(uldNumbers);
					}
				}
			
			if (uldNotExists != null && uldNotExists.size() > 0) {
                throw new ULDDefaultsBusinessException(
                    "uld.defaults.uld.doesnot.exists",new Object[] { uldNotExists.toString() });
			}
            
			if (diffCRN != null && diffCRN.length() > 0) {
				diffCRN.append(" - From Carrier & CRN Prefix does not match");
                throw new ULDDefaultsBusinessException(
                        "uld.defaults.loanborrow.msg.err.diffcrnfromcarrier",
						new Object[] { diffCRN.toString() });
			}
			if (crnULDs != null && crnULDs.length() > 0) {
                throw new ULDDefaultsBusinessException(
                    "uld.defaults.luc.msg.err.invalidcrn",new Object[] { crnULDs.toString() });
			}}
        }
		String uldNumberBuild = null;
        String uldOwner = null;
        String partyType = null;
        boolean isAirline = true;
        boolean isAgent = false;
		boolean isCustomer = false;
        StringBuilder samePartyStrBldr = null;
		String carrierCode="";
        int flagVal = 0;
        if (lucMessageVO.getUldDetails() != null
                && lucMessageVO.getUldDetails().size() > 0) {
            for (LUCULDDetailsVO uldDetailsVO : lucMessageVO.getUldDetails()) {
				uldNumberBuild = new StringBuilder().append(
                        uldDetailsVO.getUldIdentificationVO().getUldType())
                        .append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldSerialNumber()).append(
                                uldDetailsVO.getUldIdentificationVO()
                                        .getUldOwnerCode()).toString();
				//Added by A-7359 for ICRD-262594
				uldNumber=ULDFormatter.formatULDNo(uldNumberBuild);
                try {
                    validateULDFormat(logonAttributes.getCompanyCode(),
                            uldNumber);
                } catch (InvalidULDFormatException e) {
                    throw new ULDDefaultsBusinessException(e.getMessage());
                }
                uldOwner = uldDetailsVO.getUldIdentificationVO()
                        .getUldOwnerCode();
				//Modified by A-7359 for ICRD-260301 starts here
                if (toParty != null) {
                    if (NON_CARRIERID.equals(toParty)) {
                        isAirline = false;
                        if(uldDetailsVO.getReceivingPartyDetailsVO().getNonCarrierId()!=null){
                        toParty = uldDetailsVO.getReceivingPartyDetailsVO()
                                .getNonCarrierId().toUpperCase();
                        }
                        AgentVO agentVO = new SharedAgentProxy()
                                .findAgentDetails(logonAttributes
                                        .getCompanyCode(), toParty);
                        if (agentVO != null) {
                            isAgent = true;
                        } else {
                            isAgent = false;
							SharedCustomerProxy sharedCustomerProxy= Proxy.getInstance().get(SharedCustomerProxy.class);
							CustomerFilterVO customerFilterVO = new CustomerFilterVO();
							customerFilterVO.setCompanyCode(logonAttributes.getCompanyCode());
							customerFilterVO.setCustomerCode(toParty);
							CustomerVO customerVO = null;
							try {
								customerVO=sharedCustomerProxy.validateCustomer(customerFilterVO);
								log.log(Log.FINE, "customerVO--->",customerVO.getCustomerCode());
							} catch (ProxyException e) {
								throw new SystemException(e.getErrors());
							}
							if(customerVO.getCustomerCode() != null){
								isCustomer=true;
							}else {
								isCustomer=false;
							}
							
							
						}
					}
				}
				if (fromParty != null) {
					if (NON_CARRIERID.equals(fromParty)) {
						isAirline = false;
						 if(uldDetailsVO.getTransferringPartyDetailsVO().getNonCarrierId()!=null){
						fromParty = uldDetailsVO.getTransferringPartyDetailsVO()
								.getNonCarrierId().toUpperCase();
						 }
						AgentVO agentVO = new SharedAgentProxy()
								.findAgentDetails(logonAttributes
										.getCompanyCode(), fromParty);
						if (agentVO != null) {
							isAgent = true;
						} else {
							isAgent = false;
							SharedCustomerProxy sharedCustomerProxy= new SharedCustomerProxy();
							CustomerFilterVO customerFilterVO = new CustomerFilterVO();
							customerFilterVO.setCompanyCode(logonAttributes.getCompanyCode());
							customerFilterVO.setCustomerCode(fromParty);
							CustomerVO customerVO = null;
							try {
								customerVO=sharedCustomerProxy.validateCustomer(customerFilterVO);
							} catch (ProxyException e) {
								throw new SystemException(e.getErrors());
							}
							if(customerVO.getCustomerCode() != null){
								isCustomer=true;
							}else {
								isCustomer=false;
							}
							
							
						}
					}
				}
				//Modified by A-7359 for ICRD-260301 ends here
                if (uldOwner != null && fromParty != null && toParty != null
                        && uldNumber != null) {
                    if (fromParty.equals(toParty)) {
                        if (flagVal == 0) {
                            samePartyStrBldr = new StringBuilder()
                                    .append(uldNumber);
                        } else {
                            samePartyStrBldr = samePartyStrBldr.append(",")
                                    .append(uldNumber);
                        }
                        flagVal++;
                    }
                }
            }
        }
        if (samePartyStrBldr != null && samePartyStrBldr.length() > 0) {
            samePartyStrBldr.append(" - From Carrier & To Carrier are same");
            throw new ULDDefaultsBusinessException(
                    "uld.defaults.loanborrow.msg.err.samepartycodes",
                    new Object[] { samePartyStrBldr.toString() });
        }
		//Modified by A-7359 for ICRD-260301 starts here
        if (isAirline) {
			airLines.add(fromParty);
			airLines.add(toParty);
			for(String airlineCode:airLines){
            try{
				
				AirlineValidationVO toAirlineValidationVO = Proxy.getInstance().get(SharedAirlineProxy.class).validateAlphaCode(logonAttributes.getCompanyCode(), airlineCode);
            }catch(ProxyException ex){
                String err = "";
				StringBuilder invalidArl = new StringBuilder("To Airline code  ");
				err = invalidArl.append(airlineCode).append("  does not exist ")
                        .toString();
                throw new ULDDefaultsBusinessException(
                        "uld.defaults.luc.msg.err.invalidtoairline",
                        new Object[] { err });
            }
        }
		}else if(isAgent||isCustomer){
			
			if(nonCarrierToPartyFlag){
				carrierCode=fromParty;
			}else if(nonCarrierfromPartyFlag){
				carrierCode=toParty;
			}
			try{
				
				AirlineValidationVO airlineValidationVO = new SharedAirlineProxy().validateAlphaCode(logonAttributes.getCompanyCode(), carrierCode);		
			
			}catch(ProxyException ex){
				String err = "";
				StringBuilder invalidArl = new StringBuilder("  Airline code  ");
				err = invalidArl.append(carrierCode).append("  does not exist ")
						.toString();
				throw new ULDDefaultsBusinessException(
						"uld.defaults.luc.msg.err.invalidfromairline",
						new Object[] { err });
			}
			
		}
		//Modified by A-7359 for ICRD-260301 starts here
        if (isAirline) {
            partyType = PARTYTYPE_AIRLINE ;
        }else if(isAgent){
            partyType = AGENT ;
		}else if(isCustomer){
			partyType = CUSTOMER;
		}
		else{
            partyType = OTHERS ;
        }
        return partyType ;
    }

    public boolean isNumeric(String number){
        boolean isValid = false;
        /*Explaination:
           [-+]?: Can have an optional - or + sign at the beginning.
           [0-9]*: Can have any numbers of digits between 0 and 9
           \\.? : the digits may have an optional decimal point.
           [0-9]+$: The string must have a digit at the end.
        */  
          String expression = "[-+]?[0-9]*\\.?[0-9]+$";  
          CharSequence inputStr = number;  
          Pattern pattern = Pattern.compile(expression);  
          Matcher matcher = pattern.matcher(inputStr);  
          if(matcher.matches()){
             isValid = true;  
          }  
          return isValid;  
        } 
	private void createTransactionsVOForULD(FlightDetailsVO flightDetailsVO, ULDFlightMessageReconcileDetailsVO detVO,
			LocalDate actualDate, HashMap<String, Collection<ULDTransactionDetailsVO>> transactionMap)
					throws SystemException, ULDDefaultsBusinessException {
		log.log(Log.INFO, "ErrorCode--->E7-ULD not in airline stock");
		/**
		 * On each iteration of ULDs a ULDTransactionDetailsVO is created either
		 * to return the ULD back to Airline or Loan ULD to operating Airline
		 * there VOs will be added to Transaction Map and will be called from
		 * Main Method
		 */
		LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
		String uldnum = detVO.getUldNumber();
		TransactionListVO transactionListVO = null;
		int length = uldnum.length();
		String twoalphacode = uldnum.substring(length - 2);
		String threealphacode = uldnum.substring(length - 3);
		String uldAirlineCode = null;
		String arldtl = findOwnerCode(flightDetailsVO.getCompanyCode(), twoalphacode, threealphacode);
		String arldtlArray[] = arldtl.split("~");
		int ownerAirlineId = Integer.valueOf(arldtlArray[1]);
		if ("2".equals(arldtlArray[0])) {
			uldAirlineCode = twoalphacode;
		} else {
			uldAirlineCode = threealphacode;
		}
		String carrierCode = flightDetailsVO.getCarrierCode();
        log.log(Log.FINE, "\n uldAirlineCode-------------------->" , uldAirlineCode);
        log.log(Log.FINE, "\n carrierCode-------------------->" , carrierCode);
		// Added by A-2257 starts
		ULD uld = null;
		try {
			uld = ULD.find(flightDetailsVO.getCompanyCode(), uldnum);
		} catch (FinderException e) {
            //do nothing
		}
        // Added as part of CR ICRD-192322
        boolean wetLeasedFlt = false;
        if(!flightDetailsVO.ACCEPTANCE.equals(flightDetailsVO.getAction())){
        wetLeasedFlt = isWetLeasedFlt(flightDetailsVO);
        flightDetailsVO.setWetleasedFlt(wetLeasedFlt);
        }
        // Added as part of CR ICRD-192322 ends
						if (uld != null) {
			/**
			 * Checking whether a Already Loaned ULD coming back in Owners
			 * Flight uld->OwnerAirlineIdentified found as zero so added a check
			 * uldnum endswith fltcarriercode
			 */
			if (flightDetailsVO.getFlightCarrierIdentifier() > 0
					&& (uld.getOwnerAirlineIdentifier() == flightDetailsVO.getFlightCarrierIdentifier()
							|| uldnum.endsWith(flightDetailsVO.getCarrierCode()))
					&& (uld.getOperationalAirlineIdentifier() != flightDetailsVO.getFlightCarrierIdentifier()
							|| (uld.getReleasedTo() != null && uld.getReleasedTo().trim().length() > 0))) {
				log.log(Log.INFO, "Close That Open TXN");
				TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
				transactionFilterVO.setCompanyCode(flightDetailsVO.getCompanyCode());
				transactionFilterVO.setTransactionStatus(TO_BE_RETURNED);
				transactionFilterVO.setUldNumber(uldnum);
				transactionFilterVO.setTransactionType(LOANED_TRANSACTION);
				transactionFilterVO.setPageNumber(1);
				transactionListVO = listULDTransactionDetails(transactionFilterVO);
				Collection<ULDTransactionDetailsVO> detailsVOs = transactionListVO.getTransactionDetailsPage();
				if (detailsVOs != null && detailsVOs.size() > 0) {
					for (ULDTransactionDetailsVO transactionDetailsVO : detailsVOs) {
						transactionDetailsVO.setSource("UCM");
						transactionDetailsVO.setSysRtnFlag(ULDTransactionDetailsVO.FLAG_NO);
						transactionDetailsVO.setReturnDate(actualDate);
						log.log(Log.INFO, detVO.getAirportCode());
						transactionDetailsVO.setReturnStationCode(detVO.getAirportCode());
                        //transactionDetailsVO.setPol(detVO.getAirportCode());
                        //transactionDetailsVO.setPou(detVO.getPou());
						if (transactionMap != null) {
							Collection<ULDTransactionDetailsVO> returnTransactionVOs = transactionMap.get(LOAN_RETURN);
							if (returnTransactionVOs != null && returnTransactionVOs.size() > 0) {
								transactionMap.get(LOAN_RETURN).add(transactionDetailsVO);
							} else {
								returnTransactionVOs = new ArrayList<ULDTransactionDetailsVO>();
								returnTransactionVOs.add(transactionDetailsVO);
								transactionMap.put(LOAN_RETURN, returnTransactionVOs);
							}
						}
					}
				}
            } else if ((uld.getOperationalAirlineIdentifier() != flightDetailsVO.getFlightCarrierIdentifier()
                    && flightDetailsVO.getFlightCarrierIdentifier() > 0)
                    || (flightDetailsVO.getFlightCarrierIdentifier() > 0 && wetLeasedFlt
                    && flightDetailsVO.getFlightCarrierIdentifier() != logonAttributes.getOwnAirlineIdentifier())
                    ) {
				log.log(Log.INFO, "New transaction to be created here");
				// Do loan transaction
				ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
				transactionDetailsVO.setCompanyCode(flightDetailsVO.getCompanyCode());
				// Party which is Loaning the ULD
				transactionDetailsVO.setFromPartyCode(uldAirlineCode);
				transactionDetailsVO.setFromPartyIdentifier(ownerAirlineId);
				transactionDetailsVO.setDamageStatus(uld.getDamageStatus());
				// transactionDetailsVO.setLastUpdateTime()
				transactionDetailsVO.setLastUpdateUser(logonAttributes.getUserId());
				transactionDetailsVO.setOperationalFlag(ULDTransactionDetailsVO.OPERATION_FLAG_INSERT);
				// Party for whom the uld is loaning
                // Added as part of CR ICRD-192322
                if(flightDetailsVO.isWetleasedFlt()){
                    transactionDetailsVO.setToPartyCode(logonAttributes.getCompanyCode());
                    transactionDetailsVO.setToPartyIdentifier(logonAttributes.getOwnAirlineIdentifier());
                }else{
                transactionDetailsVO.setToPartyCode(flightDetailsVO.getCarrierCode());
                transactionDetailsVO.setToPartyIdentifier(flightDetailsVO.getFlightCarrierIdentifier());
                }
                // Added as part of CR ICRD-192322 ends
				transactionDetailsVO.setUldNumber(uldnum);
				transactionDetailsVO.setUldType(uldnum.substring(0, 3));
				// if(EXPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
				transactionDetailsVO.setTxStationCode(detVO.getAirportCode());
				transactionDetailsVO.setTransactionStationCode(detVO.getAirportCode());
				transactionDetailsVO.setSource("UCM");
				transactionDetailsVO.setTransactionType(LOANED_TRANSACTION);
				transactionDetailsVO.setUldConditionCode("SER");
				transactionDetailsVO.setTransactionStatus(TO_BE_RETURNED);
				transactionDetailsVO.setOperationalAirlineIdentifier(flightDetailsVO.getFlightCarrierIdentifier());
				transactionDetailsVO.setTransactionNature(TEMPORARY);
				/* Commented the check for Actual date for ICRD-256690 starts here
				 * if (actualDate != null) {
                    transactionDetailsVO.setTransactionDate(actualDate);
				} else {*/
                    transactionDetailsVO.setTransactionDate(
                            new LocalDate(transactionDetailsVO.getTransactionStationCode(), Location.ARP, true));
				//} Commented the check for Actual date for ICRD-256690 ends here
                //transactionDetailsVO.setPol(detVO.getAirportCode());
                //transactionDetailsVO.setPou(detVO.getPou());
				transactionDetailsVO.setPartyType(PARTYTYPE_AIRLINE);
				log.log(Log.INFO, "@@@@@@@@@  TRANSACTION IS PERFORMED");
				/**
				 * Below code gets all the return and
				 */
				if (transactionMap != null) {
					Collection<ULDTransactionDetailsVO> loanTransactionVOs = transactionMap.get(LOANED_TRANSACTION);
					if (loanTransactionVOs != null && loanTransactionVOs.size() > 0) {
						transactionMap.get(LOANED_TRANSACTION).add(transactionDetailsVO);
					} else {
						loanTransactionVOs = new ArrayList<ULDTransactionDetailsVO>();
						loanTransactionVOs.add(transactionDetailsVO);
						transactionMap.put(LOANED_TRANSACTION, loanTransactionVOs);
					}
				}
			}
		}
	}
    /**
     * @author P-1021
     * This Method checks whether
     * 3rd party Transaction or not
	 * @param transactionDetailsVo
	 * @param logonAttributes
	 * @return
	 */
	public boolean checkThirdPartyTransaction(ULDTransactionDetailsVO transactionDetailsVo,
                                                                LogonAttributes logonAttributes, String thirdPartyEnabled,String configurableOwner){
		boolean isThirdPartyTransfer = false;
		String fromParty = transactionDetailsVo.getFromPartyCode();
		String toParty = transactionDetailsVo.getToPartyCode();
		String uldNumber = transactionDetailsVo.getUldNumber();
        //String companyCode = logonAttributes.getCompanyCode();
		String ownerCode = logonAttributes.getOwnAirlineCode();
		String partyType = transactionDetailsVo.getPartyType();
        if(//AbstractVO.FLAG_YES.equals(thirdPartyEnabled)
                //&&
				ULDTransactionDetailsVO.AIRLINE.equals(partyType) && ownerCode.equals(fromParty) 
                && (!(configurableOwner.endsWith(fromParty)) || !(configurableOwner.endsWith(toParty)))
                && (!configurableOwner.endsWith(fromParty) && !configurableOwner.endsWith(toParty))){
			isThirdPartyTransfer = true;
		}
		return isThirdPartyTransfer;
	}
	/**
	 * This Method saves the third Party Transaction
	 * @param transactionDetailsVo
	 * @param logonAttributes
	 * @param uld
	 * @throws SystemException 
	 */
    public ULDTransaction saveThirdPartyTransaction(ULDTransactionDetailsVO transactionDetailsVo,ULD uld) throws SystemException{
		Collection<ErrorVO> errors = new ArrayList<ErrorVO>();
		String uldNumber = null;
		String uldOwner = null;
		String partyType = null;
		String fromParty = null;
		ULDTransaction transaction = null;
		LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
		String owrArlCode = logonAttributes.getOwnAirlineCode();
		String companyCode = logonAttributes.getCompanyCode();
		fromParty = transactionDetailsVo.getFromPartyCode();
		String toParty = transactionDetailsVo.getToPartyCode();
		uldNumber = transactionDetailsVo.getUldNumber().trim().toUpperCase();
        Map<String,AirlineValidationVO> partyCodeMap = new HashMap<String,AirlineValidationVO>();
        int length =uldNumber.trim().length();
		Collection<String> partyCodes = new ArrayList<String>();
		partyCodes.add(fromParty);
		partyCodes.add(toParty);
        AirlineValidationVO airlineValidationVO= null;
            try{
				partyCodeMap = new SharedAirlineProxy().validateAlphaCodes(companyCode, partyCodes);
            }catch(ProxyException ex){
                for(ErrorVO errorVO :ex.getErrors()) {
                    if(!"shared.airline.invalidairline".equals(errorVO.getErrorCode()))
                            {
                            throw new SystemException(ex.getMessage(),ex);
                            }
				}
			}
        if(partyCodeMap!=null){
			airlineValidationVO	= partyCodeMap.get(fromParty);
            if(airlineValidationVO!=null){
				transactionDetailsVo.setFromPartyCode(airlineValidationVO.getAlphaCode());
				transactionDetailsVo.setFromPartyIdentifier(airlineValidationVO.getAirlineIdentifier());
				transactionDetailsVo.setFromPartyName(airlineValidationVO.getAirlineName());
			}
            airlineValidationVO= partyCodeMap.get(toParty);
				transactionDetailsVo.setToPartyCode(airlineValidationVO.getAlphaCode());
				transactionDetailsVo.setToPartyIdentifier(airlineValidationVO.getAirlineIdentifier());
				transactionDetailsVo.setOperationalAirlineIdentifier(transactionDetailsVo.getToPartyIdentifier());
				transactionDetailsVo.setToPartyName(airlineValidationVO.getAirlineName());
		}
        //Flag set to identify this is a third party
		transactionDetailsVo.setThirdPartyFlag(ULDTransactionDetailsVO.FLAG_YES);		
		/**
         * Checks whether this is a forward looking transaction
         * System creates only forward looking transactions others will
         * be moved to history
         */
        //if(isForwardLookingTransaction(transactionDetailsVo)){
            /*
             *This is to check whether the txn is btw poolowners
             *setting the poolOwner Flag of transactionDetailsVo
             */
        if(!ULDTransactionDetailsVO.AGENT.
                equalsIgnoreCase(transactionDetailsVo.getPartyType())){
            boolean isPoolOwner = false;
            ULDPoolOwnerFilterVO poolFilterVO = new ULDPoolOwnerFilterVO();
            poolFilterVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
            /*poolFilterVO.setAirlineIdentifierOne(transactionDetailsVo.getFromPartyIdentifier());*/
            poolFilterVO.setAirlineIdentifierOne(getAirline1(transactionDetailsVo));
            poolFilterVO.setAirlineIdentifierTwo(transactionDetailsVo.getToPartyIdentifier());
            poolFilterVO.setAirport(transactionDetailsVo.getTransactionStationCode());
            poolFilterVO.setOrigin(transactionDetailsVo.getTransactionStationCode());
            poolFilterVO.setDestination(transactionDetailsVo.getTxStationCode());
            HashMap<String,String> odpairs = new HashMap<String,String>();
                odpairs.put(transactionDetailsVo.getTransactionStationCode(), transactionDetailsVo.getTxStationCode());
            poolFilterVO.setOdpairs(odpairs);
            isPoolOwner = checkforPoolOwner(poolFilterVO);
            log.log(Log.INFO,"is a Pool Owner"+isPoolOwner);
            if(isPoolOwner){
                transactionDetailsVo.setPoolOwnerFlag("Y");
            }else{
                transactionDetailsVo.setPoolOwnerFlag("N");
            }
        }else{
			transactionDetailsVo.setPoolOwnerFlag("N");
		}
		/*
		 * Close all pending open transactions for ULD
		 */
			try {
				closeIfAnyOpenLoanTxnExists(transactionDetailsVo);
			} catch (PersistenceException e) {
                //No need to hanlde Exception
                log.log(Log.INFO,"Exception while closing loan txn ",e.getMessage());
			}
			transactionDetailsVo.setTransactionType(LOANED_TRANSACTION);
			setMucStatus(transactionDetailsVo);
			StringBuilder remarks = new StringBuilder();
			remarks.append("Thirdparty TXN created from ").append(transactionDetailsVo.getSource()).append(",");
            if(transactionDetailsVo.getTransactionRemark()!=null){
				remarks.append(transactionDetailsVo.getTransactionRemark());
			}
			transactionDetailsVo.setTransactionRemark(trimRemarks(remarks.toString()));
			transactionDetailsVo.setControlReceiptNumber(setControlReceiptNumber(transactionDetailsVo));
			/*
			 * Actual Transaction Created
			 */
							log.log(Log.FINE, "THE ULD CAN BE LOANED");
				transaction = new ULDTransaction(transactionDetailsVo);
							/*
			 * Setting Details of Txn in ULDMST
			 */
				uld.setLoanReferenceNumber(transaction.getUldTransactionPK().getTransactionRefNumber());

				if (PARTYTYPE_AIRLINE.equals(transactionDetailsVo.getPartyType())) {
					uld.setOperationalAirlineIdentifier(transactionDetailsVo.getOperationalAirlineIdentifier());
				}
                            if (transactionDetailsVo.getUldNature() != null
                        && transactionDetailsVo.getUldNature().trim().length() > 0) {
					uld.setUldNature(transactionDetailsVo.getUldNature());
							} else if(uld.getUldNature()==null || uld.getUldNature().trim().isEmpty()){ // Modified for ICRD-293272
								uld.setUldNature("GEN");
							}
				uld.setControlReceiptNumber(transactionDetailsVo.getControlReceiptNumber());
				uld.setLastUpdateTime(transactionDetailsVo.getUldLastUpdateTime());
				uld.setLastUpdateUser(transactionDetailsVo.getLastUpdateUser());
				// Audit the Transaction for ULD Entity
                            ULDAuditVO uldAuditVO = new ULDAuditVO(
                                    TransactionVO.MODULE,
                                    TransactionVO.SUBMODULE,
                                    TransactionVO.ENTITY);
                uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(uldAuditVO,
                                            transaction, true);
                            collectULDTransactionDetails(transaction,
                                    uldAuditVO, transactionDetailsVo);
                            uldAuditVO.setActionCode(CREATE_ULDLOANTRANSACTION);
                            uldAuditVO.setAuditRemarks(transactionDetailsVo
                                    .getTransactionRemark());
                            AuditUtils.performAudit(uldAuditVO);
                log.log(Log.FINE,"\n\n\n#### Audit Performed ###\n\n\n");
                            // Audit end
                    /*
             * check whether the uld currentstation is different from
             * the loaned station Movement needs to be created
                     */
            if(uld.getCurrentStation() == null){
                if(transactionDetailsVo.getTransactionStationCode()!=null
                        && transactionDetailsVo.getTransactionStationCode().trim().length() > 0){
                    uld.setCurrentStation(transactionDetailsVo.getTransactionStationCode());
                        } else {
                    uld.setCurrentStation(logonAttributes.getStationCode());
                }
            }
            //modified for ICQFBS-633
            if(!transactionDetailsVo.getTransactionStationCode().equals(uld.getCurrentStation())) {
                log.log(Log.INFO,"ERRORS CREATED WHEN THE ULD CURRENTSTATION DIFFERENT FROM LOANED STATION");

                    ULDMovementVO uldMovementVO = new ULDMovementVO();
                    Collection<ULDMovementVO> uldMovementVOs = new ArrayList<ULDMovementVO>();
                    Collection<String> uldNOs = new ArrayList<String>();
                    uldMovementVO.setPointOfLading(uld.getCurrentStation());
                    uldMovementVO.setPointOfUnLading(transactionDetailsVo.getTransactionStationCode());
                    uldMovementVO.setCurrentStation(transactionDetailsVo.getTransactionStationCode());
                    uldMovementVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
                    uldMovementVO.setLastUpdatedUser(logonAttributes.getUserId());
                    if(( new LocalDate(uld.getCurrentStation(),Location.ARP,uld.getLastMovementDate(),true).toGMTDate()
                            .before(transactionDetailsVo.getTransactionDate().toGMTDate()))){
                    uldMovementVO.setUpdateCurrentStation(true);
                    }
                    uldMovementVO.setDummyMovement(true);
                    uldMovementVO.setLastUpdatedTime(transactionDetailsVo.getTransactionDate());
                    uldMovementVO.setRemark(transactionDetailsVo.getAwbNumber());
                    //uldMovementVO.setSourceIndicator(transactionDetailsVo.getSource());
                    uldMovementVOs.add(uldMovementVO);
                    uldNOs.add(transactionDetailsVo.getUldNumber());
                    log.log(Log.INFO, "uldNOs-----------"+uldNOs);
                    log.log(Log.INFO, "uldMovementVOs----------"+uldMovementVOs);
                    /*if("UCM".equals(transactionDetailsVo.getSource())
                            && transactionDetailsVo.getPol()!= null
                            && transactionDetailsVo.getPou()!= null
                            && !(transactionDetailsVo.getPol().equals(uld.getCurrentStation()))){
                        ULDMovementVO uldMovementVo = new ULDMovementVO();
                        uldMovementVo.setPointOfLading(transactionDetailsVo.getPol());
                        uldMovementVo.setPointOfUnLading(transactionDetailsVo.getPou());
                        uldMovementVo.setCurrentStation(transactionDetailsVo.getTransactionStationCode());
                        uldMovementVo.setCompanyCode(transactionDetailsVo.getCompanyCode());
                        uldMovementVo.setLastUpdatedUser(logonAttributes.getUserId());
                        if(( new LocalDate(uld.getCurrentStation(),Location.ARP,uld.getLastMovementDate(),true).toGMTDate()
                                .before(transactionDetailsVo.getTransactionDate().toGMTDate()))){
                            uldMovementVo.setUpdateCurrentStation(false);
                        }
                        uldMovementVo.setDummyMovement(false);
                        uldMovementVo.setLastUpdatedTime(transactionDetailsVo.getTransactionDate());
                        uldMovementVo.setRemark(transactionDetailsVo.getAwbNumber());
                        //uldMovementVo.setSourceIndicator(transactionDetailsVo.getSource());
                        uldMovementVOs.add(uldMovementVo);
                    }*/
                    try {
                            saveULDMovement(uldNOs, uldMovementVOs);
                    } catch (ULDDoesNotExistsException e) {
                            log.log(Log.INFO,"WILL NOT ENTER HERE");
                    }
            }
            /*}else{
            saveNewULDTransactionHistory(transactionDetailsVo,uld);
        }*/
            return transaction;
    }
    public Collection<String> checkIfOpenTransactionExists(Collection<TransactionFilterVO> filterVOs) throws SystemException{
		Collection<String> openULDs = new ArrayList<String>();
        if(filterVOs!=null && filterVOs.size()>0){
            for(TransactionFilterVO filterVO : filterVOs){
				String fromParty = filterVO.getFromPartyCode();
				String toParty = filterVO.getToPartyCode();
				filterVO.setFromPartyCode(null);
				filterVO.setToPartyCode(null);
				Collection<ULDTransaction> uldTransactionDetails;
				try {
					uldTransactionDetails = ULDTransaction.findOpenTxnULDObjects(filterVO);
                    if(uldTransactionDetails!=null && uldTransactionDetails.size()>0){
                        for(ULDTransaction uldTransaction : uldTransactionDetails){
                            if((fromParty!=null && !fromParty.equals(uldTransaction.getPartyCode()))||
                                    (toParty!=null && !toParty.equals(uldTransaction.getReturnPartyCode()))){
								openULDs.add(filterVO.getUldNumber());
								break;
							}
						}
					}
				} catch (PersistenceException e) {
					log.log(Log.FINEST, e.getMessage());
				}
			}
		}		
		return openULDs;
	}
	private ULD createULDForSCM(String uldNumber, ULDSCMReconcileVO reconcileVO) 
            throws SystemException, CurrencyConversionException, DimensionConversionException{
		log.entering("ULDController", "createULD");
		ULDAirportLocationVO uldAirportLocationVO = null;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
		String currentStation = null;
		/*
		 * for(ULDInFlightVO uldInFlightVO :
		 * flightDetailsVO.getUldInFlightVOs()){
		 * if(uldNumber.equals(uldInFlightVO.getUldNumber())){
		 * if(EXPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
		 * currentStation = uldInFlightVO.getPointOfLading(); }else
		 * if(IMPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
		 * currentStation = uldInFlightVO.getPointOfUnLading(); } } }
		 */
		currentStation = reconcileVO.getAirportCode();
		String uldType = parseULDType(uldNumber);
        ULDTypeVO typeVo = null;
        
        if(uldNumber != null && uldNumber.length() > 0) {
        	typeVo = findULDTypeStructuralDetails(logonAttributes.getCompanyCode(), uldNumber);
        }
        else {
        	typeVo = findULDTypeStructuralDetails(logonAttributes.getCompanyCode(), uldType);
        }
        

		ULDVO uldVo = new ULDVO();
		uldVo.setCompanyCode(logonAttributes.getCompanyCode());
		uldVo.setUldNumber(uldNumber);
		uldVo.setUldGroupCode(typeVo.getUldGroupCode());
		uldVo.setUldType(uldType);
		// note that the naure of the uld is estimated as GEN
		uldVo.setUldNature("GEN");
        uldVo.setOperationalAirlineIdentifier(logonAttributes
                    .getOwnAirlineIdentifier());
		int len = uldNumber.length();
		String twoalphacode = uldNumber.substring(len - 2);
		String threealphacode = uldNumber.substring(len - 3);
		log.log(Log.INFO, "twoalphacode --------->", twoalphacode);
		log.log(Log.INFO, "threealphacode --------->", threealphacode);
		String arldtl = findOwnerCode(logonAttributes.getCompanyCode(), twoalphacode, threealphacode);
		log.log(Log.INFO, "arldtl --------->", arldtl);
        //Null check  and ownerAirlineId initialization added as part of ICRD-21184
        int ownerAirlineId  = 0;
        if(arldtl != null) {
            String airlineDetailArr[] = arldtl.split("~");
            ownerAirlineId = Integer.valueOf(airlineDetailArr[1]);
        }
        uldVo.setOwnerAirlineIdentifier(ownerAirlineId);
		/*uldVo.setDisplayBaseHeight(typeVo.getBaseDimHeight());
        uldVo.setDisplayBaseLength(typeVo.getBaseDimLength());
        uldVo.setDisplayBaseWidth(typeVo.getBaseDimWidth());
		uldVo.setDisplayDimensionUnit(typeVo.getBaseDimUnit());*/
		uldVo.setStructuralWeight(typeVo.getStructuralWtLmt());
		//uldVo.setDisplayStructuralWeightUnit(typeVo.getStructuralWtLmtUnit());
		uldVo.setDisplayIataReplacementCost(typeVo.getIATARepCost());
		uldVo.setDisplayIataReplacementCostUnit(typeVo.getIATARepCostUnit());
		uldVo.setCurrentStation(currentStation);
		uldVo.setOwnerStation(currentStation);
		uldVo.setDamageStatus(ULDVO.DAMAGED_STATUS);
		uldVo.setOverallStatus(ULDVO.OPERATIONAL_STATUS);
		uldVo.setCleanlinessStatus(ULDVO.CLEANLINESS_STATUS);
		uldVo.setTransitStatus("N");
		uldVo.setTareWeight(typeVo.getTareWt());
		//uldVo.setDisplayTareWeightUnit(typeVo.getTareWtUnit());
        uldVo.setBaseHeight(typeVo.getBaseDimHeight());
        uldVo.setBaseLength(typeVo.getBaseDimLength());
        uldVo.setBaseWidth(typeVo.getBaseDimWidth());
        uldVo.setOperationalFlag(ULDVO.OPERATION_FLAG_INSERT);
        uldVo.setLastUpdateTime(new LocalDate(currentStation, Location.ARP,
                false));
		uldVo.setLastUpdateUser(logonAttributes.getUserId());
		uldAirportLocationVO = ULD.findCurrentLocation(logonAttributes.getCompanyCode(), currentStation, CONTENT_EMPTY);
		if (uldAirportLocationVO != null) {
			uldVo.setLocation(uldAirportLocationVO.getFacilityCode());
			uldVo.setFacilityType(uldAirportLocationVO.getFacilityType());
		} else {
			uldVo.setLocation(ULDVO.NO_LOCATION);
			uldVo.setFacilityType(ULDVO.NO_LOCATION);
		}
		log.log(Log.INFO, "%%%%%%%%  uldVO", uldVo);
		return new ULD(uldVo);
	}

    /**
     * Added for ICRD-192217
     * @author A-3791
     * @param estimatedULDStockFilterVO
     * @throws RemoteException
     * @throws SystemException
     */
    public void sendULDStockNotifications(EstimatedULDStockFilterVO estimatedULDStockFilterVO)  throws SystemException {
        log.entering("ULDController", "sendULDStockNotification");
    /*
         * 1. Fetch ULD Stock details for Notification
         * 2. Create Map against each airport
         * 3. Iterate Map and sen notification for each airport.
         */
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
        Collection<EstimatedULDStockVO> estimatedULDStockVOs = null;
        Map<String,Collection<EstimatedULDStockVO>> estimatedStockMap = new HashMap<String,Collection<EstimatedULDStockVO>>();
        estimatedULDStockVOs = ULD.findULDStockListForNotification(estimatedULDStockFilterVO);
        if(estimatedULDStockVOs!=null && estimatedULDStockVOs.size()>0){
            for(EstimatedULDStockVO estimatedStockVO : estimatedULDStockVOs){
                estimatedStockVO.setAirlineCode(logonAttributes.getOwnAirlineCode());
                if(!estimatedStockMap.containsKey(estimatedStockVO.getAirportCode())){
                    estimatedStockMap.put(estimatedStockVO.getAirportCode(), new ArrayList<EstimatedULDStockVO>());
                    estimatedStockMap.get(estimatedStockVO.getAirportCode()).add(estimatedStockVO);
                }else{
                    estimatedStockMap.get(estimatedStockVO.getAirportCode()).add(estimatedStockVO);
                }
            }
        }
        //Iterate Map and send Notifications
        if(estimatedStockMap!=null && estimatedStockMap.size()>0){
            ULDNotificationVO uldNotificationVO = null;
            for(String airportCode : estimatedStockMap.keySet()){
                uldNotificationVO = new ULDNotificationVO();
                uldNotificationVO.setSourceForAlert(ULDSTK_NOTIFICATION_SOURCE);
                uldNotificationVO.setAirportCode(airportCode);
                uldNotificationVO.setEstimatedULDStockFilterVO(estimatedULDStockFilterVO);
                uldNotificationVO.setEstimatedULDStockVOS(estimatedStockMap.get(airportCode));
                ((ULDController)SpringAdapter.getInstance().getBean("ULDController")).sendULDNotificationsForAirport(uldNotificationVO);
            }
        }

    }

    /**
     * Added for ICRD-192280
     * @author A-3791
     * @param estimatedULDStockFilterVO
     * @throws RemoteException
     * @throws SystemException
     */
    public void sendUCMMissingNotifications(EstimatedULDStockFilterVO estimatedULDStockFilterVO)  throws SystemException {
        log.entering("ULDController", "sendUCMMissingNotifications");
        /*
         * 1. Fetch UCM Missing flight details
         * 2. Create Map against each airport
         * 3. Iterate Map and sen notification for each airport.
         */
        Collection<FlightDetailsVO> flightDetailsVOs = null;
        Map<String,Collection<FlightDetailsVO>> flightDetailsMap = new HashMap<String,Collection<FlightDetailsVO>>();
        flightDetailsVOs = ULD.findUCMMissingFlights(estimatedULDStockFilterVO);

        if(flightDetailsVOs!=null && flightDetailsVOs.size()>0){
            for(FlightDetailsVO flightDetailsVO : flightDetailsVOs){
                if(!flightDetailsMap.containsKey(flightDetailsVO.getCurrentAirport())){
                    flightDetailsMap.put(flightDetailsVO.getCurrentAirport(), new ArrayList<FlightDetailsVO>());
                    flightDetailsMap.get(flightDetailsVO.getCurrentAirport()).add(flightDetailsVO);
                }else{
                    flightDetailsMap.get(flightDetailsVO.getCurrentAirport()).add(flightDetailsVO);
                }
            }
        }

        //Iterate Map and send notifications
        if(flightDetailsMap!=null && flightDetailsMap.size()>0){
            ULDNotificationVO uldNotificationVO = null;
            for(String airportCode : flightDetailsMap.keySet()){
                uldNotificationVO = new ULDNotificationVO();
                uldNotificationVO.setSourceForAlert(UCMMSG_NOTIFICATION_SOURCE);
                uldNotificationVO.setAirportCode(airportCode);
                uldNotificationVO.setEstimatedULDStockFilterVO(estimatedULDStockFilterVO);
                uldNotificationVO.setFlightDetailsVOs(new ArrayList<FlightDetailsVO>());
                uldNotificationVO.getFlightDetailsVOs().addAll(flightDetailsMap.get(airportCode));
                ((ULDController)SpringAdapter.getInstance().getBean("ULDController")).sendULDNotificationsForAirport(uldNotificationVO);
            }
        }
    }

    /**
     * Added for ICRD-192280 & ICRD-192217
     * @author A-3791
     * @param estimatedULDStockFilterVO
     * Method for raise event to send Notifications.
     * @throws RemoteException
     * @throws SystemException
     */
    @Raise(module="uld", submodule="defaults", event="ULD_NOTIFICATION_EVENT", methodId="uld.defaults.sendULDNotificationsForAirport")
    public void sendULDNotificationsForAirport(ULDNotificationVO uldNotificationVO)   throws SystemException {
        log.log(Log.FINE, "sendULDStockNotificationForAirport...."+uldNotificationVO.getAirportCode());
    }

    /*
     * Method Added by A-3415 for ICRD-114538
     * This will create transactionVos for SCM
     */
    private void createTransactionsVOForSCM(ULD uld, ULDSCMReconcileVO reconcileVO, HashMap<String, Collection<ULDTransactionDetailsVO>> transactionMap, boolean isOALCreation)
                    throws SystemException{
		/**
		 * On each iteration of ULDs a ULDTransactionDetailsVO is created either
		 * to return the ULD back to Airline or Loan ULD to operating Airline
		 * there VOs will be added to Transaction Map and will be called from
		 * Main Method
		 */
		LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO();
		String uldnum = uld.getUldPK().getUldNumber();
		TransactionListVO transactionListVO = null;
		int length = uldnum.length();
		String twoalphacode = uldnum.substring(length - 2);
		String threealphacode = uldnum.substring(length - 3);
		String uldAirlineCode = null;
		String arldtl = findOwnerCode(logonAttributes.getCompanyCode(), twoalphacode, threealphacode);
		String arldtlArray[] = arldtl.split("~");
		int ownerAirlineId = Integer.valueOf(arldtlArray[1]);
		if ("2".equals(arldtlArray[0])) {
			uldAirlineCode = twoalphacode;
		} else {
			uldAirlineCode = threealphacode;
		}
		String carrierCode = logonAttributes.getOwnAirlineCode();
		/**
         * Checking whether a Already Loaned ULD coming back in Owners
         * Flight uld->OwnerAirlineIdentified found as zero so added a check
         * uldnum endswith fltcarriercode
		 */
		if (logonAttributes.getOwnAirlineIdentifier() > 0
				&& (uld.getOwnerAirlineIdentifier() == logonAttributes.getOwnAirlineIdentifier()
						|| uldnum.endsWith(carrierCode))
				&& (uld.getOperationalAirlineIdentifier() != logonAttributes.getOwnAirlineIdentifier()
						|| (uld.getReleasedTo() != null && uld.getReleasedTo().trim().length() > 0))) {
			log.log(Log.INFO, "Close That Open TXN");
			TransactionFilterVO transactionFilterVO = new TransactionFilterVO();
			transactionFilterVO.setCompanyCode(logonAttributes.getCompanyCode());
			transactionFilterVO.setTransactionStatus(TO_BE_RETURNED);
			transactionFilterVO.setUldNumber(uldnum);
			transactionFilterVO.setTransactionType(LOANED_TRANSACTION);
			transactionFilterVO.setPageNumber(1);
			transactionListVO = listULDTransactionDetails(transactionFilterVO);
			Collection<ULDTransactionDetailsVO> detailsVOs = transactionListVO.getTransactionDetailsPage();
			if (detailsVOs != null && detailsVOs.size() > 0) {
				for (ULDTransactionDetailsVO transactionDetailsVO : detailsVOs) {
					transactionDetailsVO.setSource("SCM");
					transactionDetailsVO.setSysRtnFlag(ULDTransactionDetailsVO.FLAG_NO);
					transactionDetailsVO.setReturnDate(reconcileVO.getStockCheckDate());
					log.log(Log.INFO, reconcileVO.getAirportCode());
					transactionDetailsVO.setReturnStationCode(reconcileVO.getAirportCode());
                    //transactionDetailsVO.setPol(detVO.getAirportCode());
                    //transactionDetailsVO.setPou(detVO.getPou());
					if (transactionMap != null) {
						Collection<ULDTransactionDetailsVO> returnTransactionVOs = transactionMap.get(LOAN_RETURN);
						if (returnTransactionVOs != null && returnTransactionVOs.size() > 0) {
							transactionMap.get(LOAN_RETURN).add(transactionDetailsVO);
						} else {
							returnTransactionVOs = new ArrayList<ULDTransactionDetailsVO>();
							returnTransactionVOs.add(transactionDetailsVO);
							transactionMap.put(LOAN_RETURN, returnTransactionVOs);
						}
					}
				}
			}
		} else if (isOALCreation || (uld.getOperationalAirlineIdentifier() != logonAttributes.getOwnAirlineIdentifier()
				&& logonAttributes.getOwnAirlineIdentifier() > 0)) {
			log.log(Log.INFO, "New transaction to be created here");
			// Do loan transaction
			ULDTransactionDetailsVO transactionDetailsVO = new ULDTransactionDetailsVO();
			transactionDetailsVO.setCompanyCode(logonAttributes.getCompanyCode());
			// Party which is Loaning the ULD
			transactionDetailsVO.setFromPartyCode(uldAirlineCode);
			transactionDetailsVO.setFromPartyIdentifier(ownerAirlineId);
			transactionDetailsVO.setDamageStatus(uld.getDamageStatus());
			// transactionDetailsVO.setLastUpdateTime()
			transactionDetailsVO.setLastUpdateUser(logonAttributes.getUserId());
			transactionDetailsVO.setOperationalFlag(ULDTransactionDetailsVO.OPERATION_FLAG_INSERT);
			// Party for whom the uld is loaning
			transactionDetailsVO.setToPartyCode(carrierCode);
			transactionDetailsVO.setToPartyIdentifier(logonAttributes.getOwnAirlineIdentifier());
			transactionDetailsVO.setUldNumber(uldnum);
			transactionDetailsVO.setUldType(uldnum.substring(0, 3));
			// if(EXPORT.equalsIgnoreCase(flightDetailsVO.getDirection())){
			transactionDetailsVO.setTxStationCode(reconcileVO.getAirportCode());
			transactionDetailsVO.setTransactionStationCode(reconcileVO.getAirportCode());
			transactionDetailsVO.setSource("SCM");
			transactionDetailsVO.setTransactionType(LOANED_TRANSACTION);
			transactionDetailsVO.setUldConditionCode("SER");
			transactionDetailsVO.setTransactionStatus(TO_BE_RETURNED);
			transactionDetailsVO.setOperationalAirlineIdentifier(logonAttributes.getOwnAirlineIdentifier());
			transactionDetailsVO.setTransactionNature(TEMPORARY);
			if (reconcileVO.getStockCheckDate() != null) {
				transactionDetailsVO.setTransactionDate(reconcileVO.getStockCheckDate());
			} else {
				transactionDetailsVO.setTransactionDate(
						new LocalDate(transactionDetailsVO.getTransactionStationCode(), Location.ARP, true));
			}
            //transactionDetailsVO.setPol(detVO.getAirportCode());
            //transactionDetailsVO.setPou(detVO.getPou());
			transactionDetailsVO.setPartyType(PARTYTYPE_AIRLINE);
			log.log(Log.INFO, "@@@@@@@@@  TRANSACTION IS PERFORMED");
			/**
			 * Below code gets all the return and
			 */
			if (transactionMap != null) {
				Collection<ULDTransactionDetailsVO> loanTransactionVOs = transactionMap.get(LOANED_TRANSACTION);
				if (loanTransactionVOs != null && loanTransactionVOs.size() > 0) {
					transactionMap.get(LOANED_TRANSACTION).add(transactionDetailsVO);
				} else {
					loanTransactionVOs = new ArrayList<ULDTransactionDetailsVO>();
					loanTransactionVOs.add(transactionDetailsVO);
					transactionMap.put(LOANED_TRANSACTION, loanTransactionVOs);
				}
			}
		}		
	}
	/**
	 * @author A-7131
	 * @param uldMovementVO
	 * @return
	 */
	private String getLastMovementDetails(ULDMovementVO uldMovementVO) {
		StringBuilder movementDetails = new StringBuilder();
        if (uldMovementVO.getCarrierCode() != null
                && uldMovementVO.getCarrierCode().trim().length() > 0) {
			movementDetails.append(uldMovementVO.getCarrierCode());
		}
		movementDetails.append("~");
        if (uldMovementVO.getFlightNumber() != null
                && uldMovementVO.getFlightNumber().trim().length() > 0) {
			movementDetails.append(uldMovementVO.getFlightNumber());
		}
		movementDetails.append("~");
		if (uldMovementVO.getFlightDate() != null) {
			movementDetails.append(uldMovementVO.getFlightDate().toDisplayDateOnlyFormat());
		}
		movementDetails.append("~");
        if (uldMovementVO.getPointOfLading() != null
                && uldMovementVO.getPointOfLading().trim().length() > 0) {
			movementDetails.append(uldMovementVO.getPointOfLading());
		}
		movementDetails.append("~");
        if (uldMovementVO.getPointOfUnLading() != null
                && uldMovementVO.getPointOfUnLading().trim().length() > 0) {
			movementDetails.append(uldMovementVO.getPointOfUnLading());
		}
		movementDetails.append("~");
        if (uldMovementVO.getRemark() != null
                && uldMovementVO.getRemark().trim().length() > 0) {
			movementDetails.append(uldMovementVO.getRemark());
		}
		return movementDetails.toString();
    }
    //Added by A-6841 as part of ICRD-188218
    public Collection<MessageRuleDefenitionVO> findMessageTypeAndVersion(String companyCode, String messageType)
            throws RemoteException, SystemException
          {
            try
            {
              return new MsgBrokerConfigProxy().findMessageTypeAndVersion(
                companyCode, messageType);
            } catch (SystemException proxyException) {
              throw new SystemException(proxyException.getMessage());
            }
          }
    /**
     * Added by A-4072 for CR ICRD-192342
     * system parameter uld.defaults.autouldstockupdateforOAL value has been amended as part of this CR
     * Expected value Y,N,OWNFLT,OALFLT
     * Y - create OAL uld stock
     * N- Do not create OAL ULD Stock
     * OALFLT - Create OAL ULD stock only if flown in OAL flight
     * OWNFLT - Create OAL ULD stock only if flown in OWN flight
     * IF flight information is not availble at the time of stock creation and parameter value is not N
     * then create stock for the ULD
     * @param flightDetailsVO
     * @param parameterMap
     * @return
     * @throws SystemException
     */
    private String canCreateOALStockForULD(String flightNumber,int fltcaridr,int fltseqnum,Map parameterMap)
            throws SystemException {
        String canCreateStockForOALULD = FLAG_NO;
        boolean isFlightInfoEmpty= fltseqnum <=0 || flightNumber==null  ||  flightNumber.isEmpty();
        boolean isOwnFlight = false;
            isOwnFlight =isOwnFlight(flightNumber,fltcaridr,fltseqnum);
        if(ULDVO.FLAG_YES.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))) {
            canCreateStockForOALULD = FLAG_YES;
        }else if((isFlightInfoEmpty &&
                ULDVO.OALFLT.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL)))||
                (isFlightInfoEmpty &&
                ULDVO.OWNFLT.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL)))){
            //If Flight details are not present then ULD stock should be created if paramter is not "N"
            //eg: from acceptance etc flight detail will be present such case stock should be created.
            canCreateStockForOALULD = FLAG_YES;
        }else if (!isOwnFlight
                && ULDVO.OALFLT.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))) {
            canCreateStockForOALULD = FLAG_YES;
        } else if (isOwnFlight
                && ULDVO.OWNFLT.equals(parameterMap.get(ULD_STK_UPDATE_FOR_OAL))) {
            canCreateStockForOALULD = FLAG_YES;
        }
        return canCreateStockForOALULD;
    }
    /**
     * Added by A-4072
     * @param flightDetailsVO
     * @return
     * @throws SystemException
     */
    private boolean isOwnFlight(String flightNumber,int fltcaridr,int fltseqnum)
            throws SystemException {

        boolean isOwnFlight = false;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                .getLogonAttributesVO();
        if (logonAttributes.getOwnAirlineIdentifier() == fltcaridr && flightNumber!=null &&
                !flightNumber.isEmpty() && fltseqnum > 0){
            isOwnFlight = true;
        }else if (flightNumber!=null &&
                !flightNumber.isEmpty() && fltcaridr > 0 && fltseqnum > 0) {
        /*
         * OAL Leased flights should be considered as own flight
         */
        FlightValidationFilterVO filterVo = new FlightValidationFilterVO();
        filterVo.setCompanyCode(logonAttributes.getCompanyCode());
        filterVo.setFlightCarrierId(fltcaridr);
        filterVo.setFlightNumber(flightNumber);
        filterVo.setFlightSequenceNumber(fltseqnum);
        try {
            Collection<FlightValidationVO> flightValidationVos = new FlightOperationsProxy()
                    .validateFlight(filterVo);
                if (flightValidationVos != null
                        && flightValidationVos.size() > 0) {
                isOwnFlight = FlightValidationVO.FLIGHT_AGRMNT_TYP_LEASED
                        .equals(flightValidationVos.iterator().next()
                                .getAgreementType());
            }
        } catch (ProxyException pe) {
                log.log(Log.INFO, "-------proxyException-------",
                    pe.getErrors());
        }
        }
        return isOwnFlight;
    }

    /**
     * Added by A-4072 as part of CR ICRD-192300 for getting number of ULDs to to print in UCR report.
     * and this count is used for generating crn number.
     * @param cmpCode
     * @param ownAirlineIdr
     * @return
     */
    private int getUldCountperUCR(){
        int uldCountPerUCR =3;//As per IATA default is 3
        try {
            LogonAttributes logonAttributes = ContextUtils.getSecurityContext()
                    .getLogonAttributesVO();
            String cmpCode = logonAttributes.getCompanyCode();
            int ownAirlineIdr = logonAttributes.getOwnAirlineIdentifier();
            Collection<String> parameterCodes = new ArrayList<String>();
            Map<String,String> airlineParameterMap = null;
            parameterCodes.add(ULD_COUNT_PER_UCR);
            airlineParameterMap = new SharedAirlineProxy().
                    findAirlineParametersByCode(cmpCode, ownAirlineIdr, parameterCodes);
            if(airlineParameterMap != null && !airlineParameterMap.isEmpty()){
                String value = airlineParameterMap.get(ULD_COUNT_PER_UCR);
                if(value != null && value.trim().length() > 0){
                    uldCountPerUCR = Integer.parseInt(value);
                }
            }
        }catch (SystemException se) {
            log.log(Log.SEVERE, "*****in the exception in LogonAttributes"+se.getMessage());
        }catch (ProxyException pe) {
            log.log(Log.SEVERE, "*****in the exception in SharedAirlineProxy",
                    pe.getErrors());
        }
        return uldCountPerUCR;
    }
    /**
     *
     *  Method      :   ULDController.findConsolidatedUCMsForFlight
     *  Added by    :   A-7359 on 28-Aug-2017
     *  Used for    :   ICRD-192413
     *  Parameters  :   @param uldFlightMessageFilterVO
     *  Parameters  :   @return
     *  Parameters  :   @throws SystemException
     *  Return type :   ArrayList<ULDFlightMessageReconcileVO>
     * @throws BusinessException 
     */
    public ULDFlightMessageReconcileVO findConsolidatedUCMsForFlight(FlightFilterMessageVO uldFlightMessageFilterVO)
            throws SystemException{
        log.entering("ULDController", "findConsolidatedUCMsForFlight");
        Collection<UldManifestVO> manifestedVOS= null;
        ULDFlightMessageReconcileVO convertedManifestedVO= null;
        ArrayList<ULDFlightMessageReconcileVO> uldFlightMessageReconcileVOs= null;
        Collection<String> consolidatedULDs = new ArrayList<String>();
        com.ibsplc.icargo.business.operations.flthandling.vo.OperationalFlightVO operationalFlightVO= new com.ibsplc.icargo.business.operations.flthandling.vo.OperationalFlightVO();
        operationalFlightVO.setCompanyCode(uldFlightMessageFilterVO.getCompanyCode());
        operationalFlightVO.setCarrierId(uldFlightMessageFilterVO.getFlightCarrierId());
        operationalFlightVO.setFlightNumber(uldFlightMessageFilterVO.getFlightNumber());
        operationalFlightVO.setFlightSequenceNumber(uldFlightMessageFilterVO.getFlightSequenceNumber());
        operationalFlightVO.setPol(uldFlightMessageFilterVO.getAirportCode());
        operationalFlightVO.setExcludeBarrow(true);
        operationalFlightVO.setIgnoreBuildUpFlag(true);
        try {
        	manifestedVOS = Proxy.getInstance().get(OperationsFltHandlingProxy.class).findManifestedUlds(operationalFlightVO);
        	ContextUtils.storeTxBusinessParameter(ULDCountFeatureConstants.MANIFEST, (Serializable) manifestedVOS);
        } catch (ProxyException e) { 
        	LOGGER.log(Log.SEVERE, e.getMessage(), e);  
        }
        log.log(Log.FINE, " manifestedVOS from OperationsFltHandlingProxy ",manifestedVOS);
        convertedManifestedVO = uldManifestVOToUldFlightMessageReconcileDetailVOs(manifestedVOS,uldFlightMessageFilterVO,consolidatedULDs);
        log.log(Log.FINE," Before ULDQueryCall");
        uldFlightMessageReconcileVOs=ULDFlightMessageReconcile.findlatestUCMsFromAllSources(uldFlightMessageFilterVO);
        log.log(Log.FINE, " uldFlightMessageReconcileVO from ULDQueryCall ",uldFlightMessageReconcileVOs);
        consolidatedUCMForUCMINOUT(convertedManifestedVO,uldFlightMessageReconcileVOs,consolidatedULDs);
        log.log(Log.FINE, "After Consolidation",convertedManifestedVO);
        log.exiting("ULDController", "findConsolidatedUCMsForFlight");
        return getUCMCount(convertedManifestedVO);
    }
  /**
   * 
   * 	Method		:	ULDController.getUCMCount
   *	Added on 	:	05-Jul-2022
   * 	Used for 	:   For getting UCM Reported Count from feature                    
   *	Parameters	:	@param ucmCountVO
   *	Parameters	:	@return
   *	Parameters	:	@throws ULDBusinessException 
   *	Return type	: 	ULDFlightMessageReconcileVO
 * @throws SystemException 
   */
    public ULDFlightMessageReconcileVO getUCMCount(ULDFlightMessageReconcileVO ucmCountVO) throws SystemException  {
    	
    	ULDCountFeature uldCountFeature = (ULDCountFeature)ICargoSproutAdapter
					.getBean("ULDCountFeature", true);
    	try {
    		ucmCountVO=uldCountFeature.execute(ucmCountVO);
    	} catch (BusinessException businessException) { 
			LOGGER.log(Log.SEVERE, businessException);
		}
			return ucmCountVO;
	} 

	/**
     *
     *  Method      :   ULDController.consolidatedUCMForUCMINOUT
     *  Added by    :   A-7359 on 07-Sep-2017
     *  Used for    :   ICRD-192413
     *  Parameters  :   @param ucmConsolidatedReconcileVO
     *  Parameters  :   @param latestUCMsFromSources
     *  Return type :   void
     * @param consolidatedULDs
     * @throws SystemException
     */
    public void consolidatedUCMForUCMINOUT(ULDFlightMessageReconcileVO ucmConsolidatedReconcileVO,ArrayList<ULDFlightMessageReconcileVO> latestUCMsFromSources, Collection<String> consolidatedULDs) throws SystemException{
        log.entering("ULDController", "consolidatedUCMForUCMINOUT");
        ArrayList<ULDFlightMessageReconcileDetailsVO> forInTransitupdationULDs= new ArrayList<ULDFlightMessageReconcileDetailsVO>();
        if(latestUCMsFromSources!=null && latestUCMsFromSources.size()>0){
            for(ULDFlightMessageReconcileVO uldFlightMsgReconcileVO:latestUCMsFromSources){
                if(uldFlightMsgReconcileVO.getReconcileDetailsVOs()!=null && uldFlightMsgReconcileVO.getReconcileDetailsVOs().size() > 0){
                    for(ULDFlightMessageReconcileDetailsVO ucmVO:uldFlightMsgReconcileVO.getReconcileDetailsVOs()){
                        if(!consolidatedULDs.contains(ucmVO.getUldNumber())){
                            consolidatedULDs.add(ucmVO.getUldNumber());
                            if(!"MFT".equalsIgnoreCase(ucmVO.getUldSource())){

                            if(ucmConsolidatedReconcileVO.getReconcileDetailsVOs() !=null){
                                ucmVO.setOperationFlag("I");
                                ucmConsolidatedReconcileVO.getReconcileDetailsVOs().add(ucmVO);
                            }else{
                                Collection<ULDFlightMessageReconcileDetailsVO> uldFlightMessageReconcileVos=new ArrayList<ULDFlightMessageReconcileDetailsVO>();
                                ucmVO.setOperationFlag("I");
                                uldFlightMessageReconcileVos.add(ucmVO);
                                ucmConsolidatedReconcileVO.setReconcileDetailsVOs(uldFlightMessageReconcileVos);
                            }
                        }else{
                            forInTransitupdationULDs.add(ucmVO);
                        }
                     }
                        if(forInTransitupdationULDs!=null && forInTransitupdationULDs.size() > 0){
                            updateInTransitforULDs(forInTransitupdationULDs);
                        }
						//Modified by A-7359 for ICRD-238950
						updateMessageSource(ucmConsolidatedReconcileVO,ucmVO);
                        //Modified by A-7426 for ICRD-223377
                        updateMessageStatus(ucmConsolidatedReconcileVO,ucmVO);
                    }
                }
            }
        }
        // Added as part of bug ICRD-238949
        if(latestUCMsFromSources != null && latestUCMsFromSources.size()>0){
            for(ULDFlightMessageReconcileVO uldFlightMessageReconcileVO : latestUCMsFromSources){
                if(uldFlightMessageReconcileVO.getSpecialInformation() != null
                        && uldFlightMessageReconcileVO.getSpecialInformation().trim().length()>0){
                    ucmConsolidatedReconcileVO.setSpecialInformation(uldFlightMessageReconcileVO.getSpecialInformation());
                }
            }
        }
        // Added as part of bug ICRD-238949 ends
        log.exiting("ULDController", "consolidatedUCMForUCMINOUT");
    }

    /**
     *  Method      :   ULDController.updateInTransitforULDs
     *  Added by    :   A-7359 on 28-Sep-2017
     *  Used for    :
     *  Parameters  :   @param forInTransitupdationULDs
     *  Return type :   void
     * @throws SystemException
     */
    private void updateInTransitforULDs(
            ArrayList<ULDFlightMessageReconcileDetailsVO> forInTransitupdationULDs) throws SystemException {


        log.entering("ULDController", "updateInTransitforULDs");
        log.log(Log.INFO, "%%%%%%%%%% InTransitupdationULDs ", forInTransitupdationULDs);

            for (ULDFlightMessageReconcileDetailsVO inTransitULD:forInTransitupdationULDs) {
                ULD uld = null;
                try {
                    uld = ULD.find(inTransitULD.getCompanyCode( ),
                            inTransitULD.getUldNumber());
                } catch (FinderException ex) {
                    log.log(Log.INFO, "%%%%%%FinderException%%%%%%%%%%%%%%%%",
                            ex.getErrors());
                }
                if (uld != null) {
                    uld.setTransitStatus(INSTATION);
                    uld.setFlightInfo(null);
                }
            }


        log.exiting("ULDController", "updateInTransitforULDs");

    }
    /**
     *  Method      :   ULDController.updateMessageStatus
     *  Added by    :   A-7359 on 20-Sep-2017
     *  Used for    :   ICRD-192413
     *  Parameters  :   @param ucmConsolidatedReconcileVO
     *  Parameters  :   @param ucmVO
     *  Return type :   void
     */
    public void updateMessageStatus(
            ULDFlightMessageReconcileVO ucmConsolidatedReconcileVO,
            ULDFlightMessageReconcileDetailsVO ucmVO) {
        log.entering("ULDController", "updateMessageStatus");
        //Added by A-7359 for ICRD-223370
        if(ucmConsolidatedReconcileVO.getReconcileDetailsVOs()!=null){
        for(ULDFlightMessageReconcileDetailsVO updateVO:ucmConsolidatedReconcileVO.getReconcileDetailsVOs()){
            //Modified by A-7359 for ICRD-229969
            if(updateVO.getUldNumber() != null && (updateVO.getUldNumber().equalsIgnoreCase(ucmVO.getUldNumber()))&&
                    (!updateVO.getUldStatus().equals(ucmVO.getUldStatus()))){

            String status=updateVO.getUldStatus();

            switch(status){

             case "N" : 
             {
              updateVO.setUldStatus(ucmVO.getUldStatus());
             break;
             }
             case "S" :
             {
              if ("R".equalsIgnoreCase(ucmVO.getUldStatus())) {
               updateVO.setUldStatus(ucmVO.getUldStatus());
              }
             break;
             }
             case "R" : {
              break;
             }
             default  :updateVO.setUldStatus("N");
              }

        }
        }
    }
        log.exiting("ULDController", "updateMessageStatus");
	}
	/**
	 * 	Method		:	ULDController.updateMessageSource
	 *	Added by 	:	A-7359 on 28-Feb-2018
	 * 	Used for 	:	ICRD-238950
	 *	Parameters	:	@param ucmConsolidatedReconcileVO
	 *	Parameters	:	@param ucmVO 
	 *	Return type	: 	void
	 */
	private void updateMessageSource(
			ULDFlightMessageReconcileVO ucmConsolidatedReconcileVO,
			ULDFlightMessageReconcileDetailsVO ucmVO) {
		log.entering("ULDController", "updateMessageStatus");
		if(ucmConsolidatedReconcileVO.getReconcileDetailsVOs()!=null){
			for(ULDFlightMessageReconcileDetailsVO updateVO:ucmConsolidatedReconcileVO.getReconcileDetailsVOs()){
				if(updateVO.getUldNumber() != null && (updateVO.getUldNumber().equalsIgnoreCase(ucmVO.getUldNumber()))&&
                        (!updateVO.getUldSource().equals(ucmVO.getUldSource()))){
				String source=updateVO.getUldSource();
				switch(source){
				 case "MAN" : 
				 			  {
				  if (ucmVO.getUldSource() != null) {
					 		  updateVO.setUldSource(ucmVO.getUldSource());
				 			  }
				 			  break;
				 }
				 case "MAIL":{
                  if(("UCM".equalsIgnoreCase(ucmVO.getUldSource()))||("MFT".equalsIgnoreCase(ucmVO.getUldSource()))){
					           updateVO.setUldSource(ucmVO.getUldSource());
				               }
							  break; 
                 }
				 case "UCM":  
				 				{
				  if ("MFT".equalsIgnoreCase(ucmVO.getUldSource())) {
			                  updateVO.setUldSource(ucmVO.getUldSource());
		                      }
				 				break;
				 }
				 case "MFT" : {
				                break;
				 } 
				 default  :updateVO.setUldSource("MAN");
				  }
			}
			}
		}
		log.exiting("ULDController", "updateMessageStatus");
    }
    /**
     *
     *  Method      :   ULDController.uldManifestVOToUldFlightMessageReconcileDetailVOs
     *  Added by    :   A-7359 on 07-Sep-2017
     *  Used for    :   ICRD-192413
     *  Parameters  :   @param manifestedVOS
     *  Parameters  :   @param uldFlightMessageFilterVO
     *  Parameters  :   @return
     *  Return type :   ULDFlightMessageReconcileVO
     */
    public ULDFlightMessageReconcileVO uldManifestVOToUldFlightMessageReconcileDetailVOs(Collection<UldManifestVO> manifestedVOS,
            FlightFilterMessageVO uldFlightMessageFilterVO,Collection<String> consolidatedULDs){
        log.entering("ULDController", "uldManifestVOToUldFlightMessageReconcileDetailVOs");
        if(consolidatedULDs==null){
            consolidatedULDs = new ArrayList<String>();
        }

        ULDFlightMessageReconcileVO uldFlightMessageReconcileVO = new ULDFlightMessageReconcileVO();
        uldFlightMessageReconcileVO.setCompanyCode(uldFlightMessageFilterVO.getCompanyCode());
        uldFlightMessageReconcileVO.setAirportCode(uldFlightMessageFilterVO.getAirportCode());
        uldFlightMessageReconcileVO.setFlightCarrierIdentifier(uldFlightMessageFilterVO.getFlightCarrierId());
        uldFlightMessageReconcileVO.setFlightNumber(uldFlightMessageFilterVO.getFlightNumber());
        uldFlightMessageReconcileVO.setFlightSequenceNumber(uldFlightMessageFilterVO.getFlightSequenceNumber());
        uldFlightMessageReconcileVO.setMessageType("OUT");
        uldFlightMessageReconcileVO.setMessageType(uldFlightMessageFilterVO.getMessageType());
        uldFlightMessageReconcileVO.setMessageSource("MAN");
        uldFlightMessageReconcileVO.setOperationFlag("I");
        uldFlightMessageReconcileVO.setCarrierCode(uldFlightMessageFilterVO.getCarrierCode());
        uldFlightMessageReconcileVO.setFlightDate(uldFlightMessageFilterVO.getFlightDate());
        Collection<ULDFlightMessageReconcileDetailsVO> convertedManifestedVOS=new ArrayList<ULDFlightMessageReconcileDetailsVO>();
        if (manifestedVOS != null && manifestedVOS.size() > 0) {
            for (UldManifestVO uldManifestVO : manifestedVOS)
            {
                ULDFlightMessageReconcileDetailsVO uldFlightMessageReconcileDetailsVO=new ULDFlightMessageReconcileDetailsVO();
                uldFlightMessageReconcileDetailsVO.setCompanyCode(uldFlightMessageFilterVO.getCompanyCode());
                uldFlightMessageReconcileDetailsVO.setAirportCode(uldFlightMessageFilterVO.getAirportCode());
                uldFlightMessageReconcileDetailsVO.setCarrierCode(uldFlightMessageFilterVO.getCarrierCode());
                uldFlightMessageReconcileDetailsVO.setFlightCarrierIdentifier(uldFlightMessageFilterVO.getFlightCarrierId());
                uldFlightMessageReconcileDetailsVO.setFlightNumber(uldManifestVO.getFlightNumber());
                uldFlightMessageReconcileDetailsVO.setFlightSequenceNumber(uldManifestVO.getFlightSequenceNumber());
                uldFlightMessageReconcileDetailsVO.setFlightDate(uldManifestVO.getFlightDate());
                uldFlightMessageReconcileDetailsVO.setSequenceNumber("1");
                uldFlightMessageReconcileDetailsVO.setUldNumber(uldManifestVO.getUldNumber());
                uldFlightMessageReconcileDetailsVO.setPou(uldManifestVO.getPou());
                uldFlightMessageReconcileDetailsVO.setUldSource("MFT");
                uldFlightMessageReconcileDetailsVO.setUldStatus("N");
                uldFlightMessageReconcileDetailsVO.setMessageType("OUT");
                uldFlightMessageReconcileDetailsVO.setOperationFlag("I");
                uldFlightMessageReconcileDetailsVO.setContent(uldManifestVO.getContentId());
                consolidatedULDs.add(uldManifestVO.getUldNumber());
                convertedManifestedVOS.add(uldFlightMessageReconcileDetailsVO);
            }
        }

            log.log(Log.FINE, "Converted Manifested VO's--->",convertedManifestedVOS);
            uldFlightMessageReconcileVO.setReconcileDetailsVOs(convertedManifestedVOS);

        log.log(Log.FINE, "Returning VO--->",uldFlightMessageReconcileVO);
        log.exiting("ULDController", "uldManifestVOToUldFlightMessageReconcileDetailVOs");
        return uldFlightMessageReconcileVO;
    }

	/**
	 * 	Method		:	ULDController.updateMultipleULDDamageDetails
	 *	Added by 	:	A-7359 on 11-Mar-2018
	 * 	Used for 	:
	 *	Parameters	:	@param uldDamageRepairDetailsVOs 
	 *	Return type	: 	void
	 * @throws SystemException 
	 */
    public void updateMultipleULDDamageDetails(
			Collection<ULDDamageRepairDetailsVO> uldDamageRepairDetailsVOs) throws SystemException {
		log.entering("ULDController", "updateMultipleULDDamageDetails");
        log.log(Log.INFO, "%%%%%%%%   uldDamageRepairDetailsVOs  ", uldDamageRepairDetailsVOs);
        ArrayList<String> uldNumbersForUpdation = new ArrayList<String>();
        String companyCode=uldDamageRepairDetailsVOs.iterator().next().getCompanyCode();
        if (uldDamageRepairDetailsVOs != null && uldDamageRepairDetailsVOs.size() > 0) {
			for (ULDDamageRepairDetailsVO uldRepairDetailsVO : uldDamageRepairDetailsVOs) {
				if(!(BLANK.equalsIgnoreCase(uldRepairDetailsVO.getUldNumber()))){
				uldNumbersForUpdation.add(uldRepairDetailsVO.getUldNumber());
			}
			}
		}
        	for (ULDDamageRepairDetailsVO uldRepairDetailsVO : uldDamageRepairDetailsVOs) {
        		if(!(BLANK.equalsIgnoreCase(uldRepairDetailsVO.getUldNumber()))){
					try {
						saveULDDamage(uldRepairDetailsVO);
					} catch (CurrencyConversionException e) {
						throw new SystemException(e.getMessage(),e);
				}
			}
        }
    	log.exiting("ULDController", "updateMultipleULDDamageDetails");
	}
	/**
	 * 	Method		:	ULDController.findULDEntityforUpdation
	 *	Added by 	:	A-7359 on 11-Mar-2018
	 * 	Used for 	:
	 *	Parameters	:	@param uldNumber
	 *	Parameters	:	@param uldObjects
	 *	Parameters	:	@return 
	 *	Return type	: 	ULD
	 */
	private ULD findULDEntityforUpdation(String uldNumber,
			Collection<ULD> uldObjects) {
		log.entering("ULDController", "findULDEntityforUpdation");
		ULD uld = null;
		for (ULD uldObject : uldObjects) {
            if (uldObject.getUldPK().getUldNumber().equals(uldNumber)) {
            	return uldObject;
            }
        }
		log.exiting("ULDController", "findULDEntityforUpdation");
		return uld;
    }
	
	/**
	 * @param uldVo
	 * @param uld
	 * @throws SystemException
	 */
	 private void auditUldDetails(ULDVO uldVo,ULD uld) throws SystemException {
		 log.entering("ULDController", "auditUldDetails");
		 ULDAuditVO uldAuditVO = new ULDAuditVO(ULDVO.MODULE, ULDVO.SUBMODULE,
		         ULDVO.ENTITY);
		 uldAuditVO = (ULDAuditVO) AuditUtils.populateAuditDetails(uldAuditVO,
		         uld, true);
		 collectULDAuditDetails(uld, uldAuditVO, uldVo);
		
		 uldAuditVO.setActionCode(CREATE_ULD);
		 uldAuditVO.setAuditRemarks(uldVo.getRemarks());
		 AuditUtils.performAudit(uldAuditVO);
		 log.exiting("ULDController", "auditUldDetails");
    }
	/**
	 * This method return all images associated with a damage
	 * @param uldDamageFilterVO
	 * @return
	 * @throws SystemException 
	 */
	public Collection<ULDDamagePictureVO> findULDDamagePictures(ULDDamageFilterVO uldDamageFilterVO) throws SystemException{
		log.entering("ULDController", "findULDDamagePictures");
		return new ULDDamagePicture().findULDDamagePictures(uldDamageFilterVO);
	}
	/**
	 * 
	 * A-8368 Currently in iCargo, the ULD movements are stamped when arrival is
	 * marked for the flight at the Import station. In the case of Domestic
	 * flights, Truck flights and OAL flights, MVT is not received at all times
	 * and user may forget to capture the ATA of the flight manually. The ULDs
	 * are released from the system by a job run based on the STA of the flight,
	 * however the ULD movements are not stamped and current airport of the ULDs
	 * are not updated. This causes confusion regarding the exact airport of the
	 * ULD for the ULD controller. The business need is to track the ULD
	 * movement in the cases of OAL, Truck and Domestic flights when ATA is not
	 * captured for the flight.Currently in icargo the ULDs are released as part
	 * of Job run if ATA is not captured for the flight. The ULD movements are
	 * not updated as part of ULD release job.
	 * 
	 * A new Job shall be introduced to update the movement of the ULDs, The new
	 * Job shall be configured same as the ULD release job. The job shall
	 * updated the current airport for the ULDs if it satisfies the following
	 * criteria. 1) The Flight is in finalized status 2) ULDs that are in
	 * manifested status. 3) ATA is not available for the flight
	 * 
	 * Once after all the uld movements are stamped for that particular flight,
	 * then we have to stamp the entry into ULDFLTMSGREC and ULDFLTMSGRECDTL
	 * tables. This is to avoid the same flights being picked up again and
	 * again.
	 */
   public void findUldsForMarkMovement(String companyCode, int rowCount)
		   throws SystemException {
	   log.entering("ULDController", "findUldsForMarkMovement");
	   Collection<ULDFlightMessageReconcileVO> uldFlightMessageReconcileVOs = new ArrayList<ULDFlightMessageReconcileVO>();
	   uldFlightMessageReconcileVOs = ULD.constructULDFlightMessageReconcileVO(companyCode, rowCount);
	   if(uldFlightMessageReconcileVOs!=null && uldFlightMessageReconcileVOs.size()>0)
		   for(ULDFlightMessageReconcileVO uldFlightMessageReconcileVO : uldFlightMessageReconcileVOs){
			   if(uldFlightMessageReconcileVO.getReconcileDetailsVOs()!=null && uldFlightMessageReconcileVO.getReconcileDetailsVOs().size()>0)
				   for(ULDFlightMessageReconcileDetailsVO uldFlightMessageReconcileDetailsVO : uldFlightMessageReconcileVO.getReconcileDetailsVOs()){
					   try {
						   ULD uld = null;
						   uld = ULD.find(uldFlightMessageReconcileDetailsVO.getCompanyCode(), uldFlightMessageReconcileDetailsVO
								   .getUldNumber());
						   if (uld != null) {
							   uld.setTransitStatus("N");
							   uld.setFlightInfo(BLANK);
						   }
						   if (uld.getCurrentStation().equalsIgnoreCase(
								   uldFlightMessageReconcileDetailsVO.getPou())) {
							   log.log(Log.INFO," no movement marked");
						   }else {
							   ULDMovementVO movementVO = new ULDMovementVO();
							   movementVO.setCarrierCode(uldFlightMessageReconcileDetailsVO
									   .getCarrierCode());
							   movementVO.setCompanyCode(uldFlightMessageReconcileDetailsVO
									   .getCompanyCode());
							   movementVO.setDummyMovement(false);
							   movementVO
							   .setFlightCarrierIdentifier(uldFlightMessageReconcileDetailsVO
									   .getFlightCarrierIdentifier());
							   movementVO.setFlightDate(uldFlightMessageReconcileDetailsVO.getFlightDate());
							   movementVO.setFlightNumber(uldFlightMessageReconcileDetailsVO
									   .getFlightNumber());
							   movementVO.setCurrentStation(uldFlightMessageReconcileDetailsVO
									   .getPou());
							   LogonAttributes logonAttributes = ContextUtils
									   .getSecurityContext()
									   .getLogonAttributesVO();
							   movementVO
							   .setLastUpdatedUser(logonAttributes
									   .getUserId());
							   movementVO
							   .setLastUpdatedTime(new LocalDate(
									   uldFlightMessageReconcileDetailsVO.getPou(),
									   Location.ARP, true));
							   movementVO.setPointOfLading(uld.getCurrentStation());
							   movementVO.setPointOfUnLading(uldFlightMessageReconcileDetailsVO
									   .getPou());
							   movementVO.setUpdateCurrentStation(true);
							   movementVO.setContent(uldFlightMessageReconcileDetailsVO.getContent());
							   movementVO.setRemark("Via ULD Movement Job");
							   Collection<String> ulds = new ArrayList<String>();
							   Collection<ULDMovementVO> uldMovementVOs = new ArrayList<ULDMovementVO>();
							   ulds.add(uldFlightMessageReconcileDetailsVO.getUldNumber());
							   uldMovementVOs.add(movementVO);
							   try {
								   saveULDMovement(ulds, uldMovementVOs);
							   } catch (ULDDoesNotExistsException uldDoesNotExistsException) {
								   log
								   .log(Log.INFO,
										   "%%%%%%%%%%%%%  wil never throw this exception");
							   }
							   ULDAuditVO uldAuditVO = new ULDAuditVO(ULDFlightMessageReconcileVO.MODULE,
									   ULDFlightMessageReconcileVO.SUBMODULE, ULDFlightMessageReconcileVO.ENTITY);
							   uldAuditVO.setActionCode(UPDATE_ULD);
							   uldAuditVO.setAuditRemarks("via ULD movement Job");
							   StringBuilder additionalInfo = new StringBuilder();
							   uldAuditVO.setCompanyCode(uldFlightMessageReconcileDetailsVO.getCompanyCode());
							   uldAuditVO.setUldNumber(uldFlightMessageReconcileDetailsVO.getUldNumber());
							   String airportCode = logonAttributes.getAirportCode();
							   uldAuditVO.setTxnTime(new LocalDate(airportCode, Location.ARP, true)
							   .toGMTDate());
							   uldAuditVO.setTxnLocalTime(new LocalDate(airportCode, Location.ARP,
									   true));
							   uldAuditVO.setUserId(logonAttributes.getUserId());
							   additionalInfo.append("Airline - ");
							   additionalInfo.append(uld.getOperationalAirlineIdentifier());
							   additionalInfo.append(",");
							   additionalInfo.append("Current Station - ");
							   additionalInfo.append(uld.getCurrentStation());
							   additionalInfo.append(",");
							   additionalInfo.append("Transit Status - ");
							   additionalInfo.append(uld.getTransitStatus());
							   additionalInfo.append(",");
							   additionalInfo.append("Flight Details - ");
							   additionalInfo.append(uldFlightMessageReconcileDetailsVO.getCompanyCode()).append(uldFlightMessageReconcileDetailsVO.getFlightNumber());
							   uldAuditVO.setAdditionalInformation(additionalInfo.toString());
							   log.log(Log.FINE,
									   "---------setting uldAuditVO.getAdditionalInformation()------*****************"+uldAuditVO.getAdditionalInformation());
							   AuditUtils.performAudit(uldAuditVO);
							   log.exiting("performAuditForTransitStatusUpdation",
									   "...Finished audit for performAuditForTransitStatusUpdation");
						   }
					   }
					   catch (FinderException e) {
						   log.log(Log.FINE, "Inside Finder Exception");
						   // throw new SystemException(e.getErrorCode(),e);
					   }
				   }
			   new ULDFlightMessageReconcile(uldFlightMessageReconcileVO);
		   }
	}
	
	/**
	 * Method to populate FromParty based on SystemParameter for ICRD-349648
	 * @param uldTransactionDetailsVO
	 * @return
	 */
	
	private ULDTransactionDetailsVO populateFromParty(ULDTransactionDetailsVO uldTransactionDetailsVO) throws SystemException {
		Map<String,String> map = new HashMap<String,String>();
		Collection<String> systemParameterCodes = new ArrayList<String>();
		systemParameterCodes.add(ULD_TRANSACTION_CREATION_BASED_ON);
		String uldTransactionBasedOn = null;
		String companyCode = uldTransactionDetailsVO.getCompanyCode();
		try {
			map = new SharedDefaultsProxy().findSystemParameterByCodes(systemParameterCodes);
		} catch (ProxyException proxyException) {
			new SystemException(proxyException.getErrors());
		}
		uldTransactionBasedOn  = map.get(ULD_TRANSACTION_CREATION_BASED_ON);

		if(ULD_OWNER_AIRLINE_CODE.equals(uldTransactionBasedOn)) {
			Integer fromPartyId = null;
			ULDValidationVO uldValidationVO = validateULD(uldTransactionDetailsVO.getCompanyCode(),uldTransactionDetailsVO.getUldNumber());
			if(uldValidationVO==null) {
				return uldTransactionDetailsVO;
			}
			AirlineValidationVO validationVO = null;
			try {
				validationVO = new SharedAirlineProxy().findAirline(companyCode,uldValidationVO.getOwnerAirlineIdentifier());
			} catch (ProxyException e) {
				e.printStackTrace();
			}
			String twoalphacode = validationVO.getAlphaCode();
			String threealphacode = validationVO.getThreeAlphaCode();
			String arldtl = findOwnerCode(companyCode, twoalphacode, threealphacode);
			String airlineDetailArr[] = arldtl.split("~");
			fromPartyId = Integer.valueOf(airlineDetailArr[1]);
			if ("2".equals(airlineDetailArr[0])) {
				uldTransactionDetailsVO.setFromPartyCode(twoalphacode);
			} else {
				uldTransactionDetailsVO.setFromPartyCode(threealphacode);
			}
			uldTransactionDetailsVO.setFromPartyIdentifier(fromPartyId);
		} else {
			//Default behaviour i.e ULD_OWNER_CODE
			String fromParty = null;
			int fromPartyId = 0;
			String toParty = null;
			int toPartyID= 0;
			String uldNumber = uldTransactionDetailsVO.getUldNumber();
			int len = uldNumber.length();
			String twoalphacode = uldNumber.substring(len - 2);
			String threealphacode = uldNumber.substring(len - 3);
			String arldtl = findOwnerCode(companyCode, twoalphacode, threealphacode);
			String airlineDetailArr[] = arldtl.split("~");
			fromPartyId = Integer.valueOf(airlineDetailArr[1]);
			if ("2".equals(airlineDetailArr[0])) {
				fromParty = twoalphacode;
			} else {
				fromParty = threealphacode;
			}
			uldTransactionDetailsVO.setFromPartyCode(fromParty);
			uldTransactionDetailsVO.setFromPartyIdentifier(fromPartyId);

		}
		return uldTransactionDetailsVO;
	}	

    public boolean findDuplicatePoolOwnerConfig(ULDPoolOwnerVO uldPoolOwnerVO)
            throws SystemException {
        log.entering("ULD Controller", "findDuplicatePoolOwnerConfig");
        return ULDPoolOwner.findDuplicatePoolOwnerConfig(uldPoolOwnerVO);
    } 

	/*
	 * while populating the airline 1 
		Check the value of system parameter uld.default.poolownerairline1basedon
		if it is ULDCARCOD 
		then set the last two digits of ULD number
		if it is OWNCARCODE 
		then invoke the findULDDetails(String companyCode, String uldNumber) in uldController	
		from the response vo take the ownerAirlineCode value
	 */
    /**
	 * added by A-5799 for IASCB-27997
	 * @param transactionDetailsVo
	 * @return
	 * @throws SystemException
	 */
	public int getAirline1(ULDTransactionDetailsVO transactionDetailsVo) throws SystemException{
		int airlineIdr = transactionDetailsVo.getFromPartyIdentifier();
		String airline1 = null;
	    String poolownerairline1basedon = null;
        LogonAttributes logonAttributes = ContextUtils.getSecurityContext() .getLogonAttributesVO();

        Map<String,String> map = new HashMap<String,String>();
        Collection<String> systemParameterCodes = new ArrayList<String>();
        systemParameterCodes.add(AIRLINE1_BASEDON);
        
        try {
          map = Proxy.getInstance().get(SharedDefaultsProxy.class).findSystemParameterByCodes(systemParameterCodes);
        } catch (ProxyException proxyException) {
        	new SystemException(proxyException.getErrors());
        }
        poolownerairline1basedon  = map.get(AIRLINE1_BASEDON);
        
        if(poolownerairline1basedon!=null && "OWNCARCODE".equalsIgnoreCase(poolownerairline1basedon)){
        	ULDVO uldvo = null;
        	try {
        		uldvo = findULDDetails(transactionDetailsVo.getCompanyCode(),
						transactionDetailsVo.getUldNumber());
			} catch (ULDDefaultsBusinessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	if(uldvo!=null){
        		airlineIdr = uldvo.getOperationalAirlineIdentifier();
        	}   
        }else{
        	 int length = transactionDetailsVo.getUldNumber().length();
        	 airline1 = transactionDetailsVo.getUldNumber().substring(length - 2);  
        	 AirlineValidationVO airlineValidationVO = null;
             SharedAirlineProxy airlineProxy = Proxy.getInstance().get(SharedAirlineProxy.class);
             try {
            	 airlineValidationVO = airlineProxy.validateAlphaCode(
                         logonAttributes.getCompanyCode(),
                         airline1);
             }catch(ProxyException pe){
                 log.log(Log.SEVERE, " Airline ProxyException" );
             }
             airlineIdr = airlineValidationVO.getAirlineIdentifier();       	 
        }
        
		
		return airlineIdr;
	}
	
	/**
	 * added by A-5799 for IASCB-27997
	 * @param transactionDetailsVo
	 * @return
	 * @throws SystemException
	 */
	private boolean shouldSendLUC(ULDTransactionDetailsVO transactionDetailsVo) throws SystemException{
		boolean shouldSendLUC = false;
		
        boolean isPoolOwner = false;
        
        ULDPoolOwnerFilterVO poolFilterVO = new ULDPoolOwnerFilterVO();
		poolFilterVO.setCompanyCode(transactionDetailsVo.getCompanyCode());
		poolFilterVO.setAirlineIdentifierOne(getAirline1(transactionDetailsVo));
		/*poolFilterVO.setAirlineIdentifierOne(transactionDetailsVo.getFromPartyIdentifier());*/
		poolFilterVO.setAirlineIdentifierTwo(transactionDetailsVo.getToPartyIdentifier());
		poolFilterVO.setAirport(transactionDetailsVo.getTransactionStationCode());
		poolFilterVO.setOrigin(transactionDetailsVo.getTransactionStationCode());
		poolFilterVO.setDestination(transactionDetailsVo.getTxStationCode());
        HashMap<String, String> odpairs = new HashMap<String, String>();
        odpairs.put(transactionDetailsVo.getTransactionStationCode(), transactionDetailsVo.getTxStationCode());
        poolFilterVO.setOdpairs(odpairs);
        isPoolOwner = checkforPoolOwner(poolFilterVO);
        log.log(Log.INFO, "is a Pool Owner", isPoolOwner);
        if (isPoolOwner) {
            transactionDetailsVo.setPoolOwnerFlag("Y");
        } else {
            transactionDetailsVo.setPoolOwnerFlag("N");
        }
            
        if (isPoolOwner){
        	
        	String lucSendingForPoolAirline = "N";
        	Map<String,String> map = new HashMap<String,String>();
            Collection<String> systemParameterCodes = new ArrayList<String>();
            systemParameterCodes.add(LUC_SEND_FOR_POOLAIRLINE);
            
            try {
              map = new SharedDefaultsProxy().findSystemParameterByCodes(systemParameterCodes);
            } catch (ProxyException proxyException) {
            	new SystemException(proxyException.getErrors());
            }
            lucSendingForPoolAirline  = map.get(LUC_SEND_FOR_POOLAIRLINE);
            
        	if("Y".equalsIgnoreCase(lucSendingForPoolAirline)){
        		shouldSendLUC = true;
        	}
        }else{       
        	shouldSendLUC = true;  
        }
        
		return shouldSendLUC;
		
	}
	/**
	 * 
	 * @param uldVo
	 */
	private void updateAirlineIdentifier(ULDVO uldVo) {
		Map<String, AirlineValidationVO> airlineIdentifiers = null;
		Collection<String> carrierCodes = new ArrayList<String>();
		String operationalAirlineCode = null;
		String ownAirlineCode = null;
		if(uldVo.getOperationalAirlineIdentifier() == 0 &&
				uldVo.getOperationalAirlineCode() != null) {
			operationalAirlineCode = uldVo.getOperationalAirlineCode();
			carrierCodes.add(uldVo.getOperationalAirlineCode());
		}
		if(uldVo.getOwnerAirlineIdentifier() == 0 && 
				uldVo.getOwnerAirlineCode() != null) {
			ownAirlineCode = uldVo.getOwnerAirlineCode();
			if(!ownAirlineCode.equals(operationalAirlineCode))
			carrierCodes.add(uldVo.getOwnerAirlineCode());
		}
		if(carrierCodes.size()>0) {
			try {
				airlineIdentifiers=new SharedAirlineProxy().
						validateAlphaCodes(uldVo.getCompanyCode(), carrierCodes);
			} catch (ProxyException | SystemException ex) {
				log.log(Log.FINE, "Exception on validateAlphaCodes",ex.getMessage());
			}
			if(airlineIdentifiers!= null) {
				if(operationalAirlineCode!= null && airlineIdentifiers.get(operationalAirlineCode)!= null) {
					uldVo.setOperationalAirlineIdentifier(airlineIdentifiers
							.get(operationalAirlineCode).getAirlineIdentifier());
				}
				if(ownAirlineCode!= null && airlineIdentifiers.get(ownAirlineCode)!= null) {
					uldVo.setOwnerAirlineIdentifier(airlineIdentifiers
							.get(ownAirlineCode).getAirlineIdentifier());
				}
			}
		}	
	}
	/**
	 * Added by A-7900 as part of IASCB-14723
	 *
	 * @param flightDetailsVOs
	 * @throws SystemException
	 * @throws ULDDefaultsBusinessException
	 */
	public void updateULDsForOperations(Collection<FlightDetailsVO> flightDetailsVOs)
			throws SystemException, ULDDefaultsBusinessException {
		ULDController uldController = (ULDController) SpringAdapter.getInstance().getBean("ULDController");
		for (FlightDetailsVO flightDetailsVO : flightDetailsVOs) {
			try {
				uldController.updateULDForOperations(flightDetailsVO);
			} catch (MessageConfigException | CurrencyConversionException | DimensionConversionException ex) {
				throw new ULDDefaultsBusinessException(ex);
			}
		}	
	}

    /**
     * Added by A-9558 as part of IASCB-55163
     *
     * @param companyCode
     * @param airportCode
     * @param locationCode
     * @param facilityTypeCode
     * @throws SystemException
     */
	public boolean validateULDAirportLocation(String companyCode, String airportCode, String locationCode, String facilityTypeCode) throws SystemException {

	    return ULDAirportLocation.validateULDAirportLocation(companyCode,
                airportCode,locationCode, facilityTypeCode);
    }
	
	/**
	 * 
	 * @param companyCode
	 * @return
	 * @throws SystemException
	 * @throws PersistenceException
	 */
	public Collection<String> findAirportsforSCMJob(String companyCode,Collection<String> airportGroup,String noOfDays)
			    throws SystemException, PersistenceException
	{
	    log.entering("ULD Controller", "findAirportsforSCMJob");
	    Collection<String> findAirportsForSCM = null;
	    ULDDefaultsDAO uLDDefaultsDAO = constructUldDefaultsDAO();
	    
	    findAirportsForSCM = uLDDefaultsDAO.findAirportsforSCMJob(companyCode,airportGroup,noOfDays);
	    
	    this.log.exiting("ULD Controller", "findAirportsforSCMJob");
	    return findAirportsForSCM;
	}
	/**
	 * 		  
	 * @return
	 * @throws SystemException
	 * @throws PersistenceException
	 */
	private static ULDDefaultsDAO constructUldDefaultsDAO()
	    throws SystemException, PersistenceException
	{
	    EntityManager em = PersistenceController.getEntityManager();
	    return ULDDefaultsDAO.class.cast(em.getQueryDAO("uld.defaults"));
	}
	
	/**
	 * 	Method		:	ULDController.findSpecialInstructionsForShipments
	 * 	Used for 	:   IASCB-110115 for sending SCM Reminder notifications
	 *	Parameters	:	@param airports
	 *  Parameters	:	@throws SystemException
	 *  Parameters	:	@throws BusinessException
	 *	Return type	: 	void
	 */
	public void sendSCMReminderNotifications(Collection<String> airports) throws SystemException, BusinessException {
		log.entering(ULDController.class.getSimpleName(), "sendSCMReminderNotifications");
		LogonAttributes logonAttributes = ContextUtils.getSecurityContext().getLogonAttributesVO(); 
		String companyCode = logonAttributes.getCompanyCode();
		SCMReminderFeatureVO scmReminderFeatureVO;
		SCMReminderNotificationsFeature scmReminderNotificationsFeature = (SCMReminderNotificationsFeature) ICargoSproutAdapter.getBean("uld.defaults.scmRemainderNotificationsFeature");
		
		for(String airportCode : airports) {
			scmReminderFeatureVO = new SCMReminderFeatureVO();
			scmReminderFeatureVO.setAirportCode(airportCode);
			scmReminderFeatureVO.setCompanyCode(companyCode);
			scmReminderNotificationsFeature.execute(scmReminderFeatureVO);
		}
		log.exiting(ULDController.class.getSimpleName(), "sendSCMReminderNotifications");
	}
	/**
	 * 
	 * 	Method		:	ULDController.saveReturnTransactionFeature
	 *	Added on 	:	29-Nov-2022
	 * 	Used for 	:	saveReturnTransactionFeature
	 *	Parameters	:	@param transactionListVO
	 *	Parameters	:	@throws SystemException
	 *	Parameters	:	@throws BusinessException 
	 *	Return type	: 	void
	 * @throws BusinessException 
	 */
	public void saveReturnTransactionFeature(TransactionListVO transactionListVO)  throws SystemException, ULDDefaultsBusinessException{
		
		SaveReturnTransactionFeature feature  = (SaveReturnTransactionFeature) ICargoSproutAdapter.getBean("SaveReturnTransactionFeature", true); 
		try {
			feature.execute(transactionListVO);
    	} catch (BusinessException businessException) { 
			LOGGER.log(Log.SEVERE, businessException);
			throw new ULDDefaultsBusinessException (businessException);
		}
	}
	/**
	 * 
	 * 	Method		:	ULDController.populateTransactionIdFromAction
	 *	Added on 	:	05-Dec-2022
	 * 	Used for 	:	getting TransactionID from the action
	 *	Parameters	:	@param action
	 *	Parameters	:	@return 
	 *	Return type	: 	String
	 */
	  public String populateTransactionIdFromAction(String action) {
			if(Objects.equals(FlightDetailsVO.BREAKDOWN, action)){
				return MessageConfigConstants.TXN_SAVE_BREAKDOWN;
			}else if(Objects.equals(FlightDetailsVO.CLOSURE, action)){
				return MessageConfigConstants.TXN_CLOSE_FLT;
			}else if(Objects.equals(FlightDetailsVO.FINALISATION, action)){
				return MessageConfigConstants.TXN_FINALIZE_FLT;
			}else if(Objects.equals(FlightDetailsVO.ACCEPTANCE, action)){
				return MessageConfigConstants.TXN_SAVE_ACCEPTANCE;
			}else{
				return MessageConfigConstants.TXN_SCREEN;
			}
		}
	  /**
	   * 
	   * 	Method		:	ULDController.findBestFitULDAgreement
	   *	Added on 	:	19-Apr-2023
	   * 	Used for 	:	finding best fit ULD Agreement
	   *	Parameters	:	@param uldTransactionDetailsVO
	   *	Parameters	:	@return
	   *	Parameters	:	@throws SystemException 
	   *	Return type	: 	ULDAgreementVO
	   */
	  public ULDAgreementVO findBestFitULDAgreement(ULDTransactionDetailsVO uldTransactionDetailsVO) throws SystemException{
		  ULDAgreementFilterVO uldAgreementFilterVO = new ULDAgreementFilterVO();
		  uldAgreementFilterVO.setCompanyCode(uldTransactionDetailsVO
                  .getCompanyCode());

          if (LOANED_TRANSACTION.equals(uldTransactionDetailsVO.getTransactionType())) {
        	  uldAgreementFilterVO.setPartyCode(uldTransactionDetailsVO
                              .getToPartyCode());
        	  uldAgreementFilterVO.setFromPartyCode(uldTransactionDetailsVO
                      .getFromPartyCode());
          } else {
        	  uldAgreementFilterVO.setPartyCode(uldTransactionDetailsVO.getFromPartyCode());
          }
          uldAgreementFilterVO.setPartyType(uldTransactionDetailsVO.getPartyType());
          uldAgreementFilterVO.setTxnType(uldTransactionDetailsVO.getTransactionType());
          LocalDate transactionDate = new LocalDate(LocalDate.NO_STATION,Location.NONE, false);
          if (Objects.nonNull(uldTransactionDetailsVO.getTransactionDate())) {
        	  transactionDate.setDate(uldTransactionDetailsVO.getTransactionDate().toDisplayDateOnlyFormat());
        	  uldAgreementFilterVO.setTransactionDate(transactionDate);
          }
          uldAgreementFilterVO.setUldTypeCode(uldTransactionDetailsVO.getUldType());
          uldAgreementFilterVO.setTransactionStation(uldTransactionDetailsVO.getTransactionStationCode());
		  return ULDAgreement.findULDAgreementForReturnTransaction(uldAgreementFilterVO);  
	  }
	/**
	 * 
	 * 	Method		:	ULDController.updateULDTransactionWithDemurrageDetails
	 *	Added on 	:	24-Apr-2023
	 * 	Used for 	:	Calling UpdateULDDemurrageDetailsFeature
	 *	Parameters	:	@param transactionVO
	 *	Parameters	:	@throws BusinessException
	 *	Parameters	:	@throws SystemException 
	 *	Return type	: 	void
	 */
	public void updateULDTransactionWithDemurrageDetails(TransactionVO transactionVO) throws BusinessException, SystemException {
		UpdateULDDemurrageDetailsFeature updateULDDemurrageDetailsFeature= (UpdateULDDemurrageDetailsFeature)ICargoSproutAdapter
 				.getBean("UpdateULDDemurrageDetailsFeature", true);
 	   updateULDDemurrageDetailsFeature.execute(transactionVO);
	}
	/**
	 * 
	 * 	Method		:	ULDController.createULDLoan
	 *	Added on 	:	24-Apr-2023
	 * 	Used for 	:	Calling CreateULDtransactionFeature method
	 *	Parameters	:	@param transactionVO
	 *	Parameters	:	@return
	 *	Parameters	:	@throws SystemException
	 *	Parameters	:	@throws BusinessException 
	 *	Return type	: 	Collection<ErrorVO>
	 */
	 public Collection<ErrorVO> createULDLoan(TransactionVO transactionVO)
	  		  throws SystemException  {
		 try {
			 	return createULDLoanTransactionFeature(transactionVO);
		 	} catch (BusinessException e) {
		 		LOGGER.log(Log.SEVERE, e); 
		 	}
		return new ArrayList<>();
	 }
	
}